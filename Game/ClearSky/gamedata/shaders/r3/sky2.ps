#include "common.h"
#include "rainbow_draw.h"
#include "pbr_cubemap_check.h"

struct         v2p
{
	float4	factor	: COLOR0;        // rgb tint
	float4	tc0		: TEXCOORD0; //tonemap in alpha
	float3	tc1		: TEXCOORD1;
};
struct        _out
{
	float4	low		: SV_Target0;
	float4	high	: SV_Target1;
};


TextureCube	s_sky0	:register(t0);
TextureCube	s_sky1	:register(t1);

//////////////////////////////////////////////////////////////////////////////////////////
// Pixel
_out main(v2p I )
{
	float3	s0		= s_sky0.SampleLevel( smp_base, I.tc0, 0 );
	float3	s1		= s_sky1.SampleLevel( smp_base, I.tc1, 0 );
	
	float3			sky = lerp (s0,s1,I.factor.w);
	
	//srgb tint (matches hmodel)
	
#ifdef ES_PSEUDO_PBR
	float3 SkyTint = I.factor.bgr;
	float TintPow = 1.0;
	
	sky = pow(sky, TintPow); 
	sky *= SkyTint;
	sky = pow(sky, 1/TintPow); 
#else
	sky = LinearTosRGB(sky);
	sky *= I.factor.rgb;
#endif

	// final tone-mapping
	float tm_scale = I.tc0.w;
	_out			o;
	
	tonemap(o.low, o.high, sky, tm_scale)	; //factor contains tonemapping
	
	float diff_green_red = L_sun_color.g - L_sun_color.r;
	float diff_green_blue = L_sun_color.g - L_sun_color.b;
	float amount = (diff_green_red-RB_GREENREDDIFF)+(diff_green_blue-RB_GREENBLUEDIFF);
#ifdef WINTER_MODE
	if (I.tc0.z >= RB_VIEWANGLE.x && I.tc0.z <= RB_VIEWANGLE.y && I.tc0.y >= RB_VIEWANGLE.z && I.tc0.y <= RB_VIEWANGLE.w && amount > 0 && rain_params.x > 0)
	{	
		float sun_intensity = saturate((L_sun_color.r + L_sun_color.g + L_sun_color.b)*RB_SUNFACTOR/3);
		bool white = false;
		o.low += draw_rainbow(I.tc0.xy, RB_POSITION, 1, true, white) * amount * RB_COF;
	}
#endif //WINTER_MODE

	return			o;
}
