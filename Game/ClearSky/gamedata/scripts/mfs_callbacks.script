--Advanced X-ray
--Скрипт сделал: Arkada (aka liner)
--Модульная система

--ВНИМАНИЕ!!! ВЫЗОВЫ КАЛЛБЭКОВ И НОВЫЕ КАЛЛБЭКИ НУЖНО РЕГИСТРИРОВАТЬ ЗАНОВО ПОСЛЕ КАЖДОГО net_spawn!!!
--function on_game_load()
-- mfs_callbacks.Register(name,func)
--end

local callbacks =
{
--($) значит ещё нереализовано
--префикс se_ перед аргументом, это значит что объект серверный (в оффлайне)
--[[
	callback_name = {}, --[description]; <arguments>
]]
--Игрок
	actor_on_net_destroy = {},		--($) actor переходит в online
	actor_on_death = {},			--($) Игрок умер
	actor_drop_item = {},			--($) Игрок выбросил предмет
	actor_take_item = {},			--($) Игрок взял предмет
	actor_take_item_from_box = {},	--($) Игрок взял предмет из ящика
	actor_put_item_in_box = {},		--($) Игрок положил предмет в ящик
	actor_on_update = {},			--($) Апдейт игрока
	actor_on_first_update = {},		--($) Первый апдейт игрока
	actor_item_use = {}, 			--($) Игрок использовал предмет
	actor_item_to_ruck = {},		--($) Игрок переместил предмет в рюкзак
	actor_item_to_belt = {},		--($) Игрок переместил предмет на пояс
	actor_item_to_slot = {},		--($) Игрок переместил предмет в слот
	actor_on_hit = {},				--($) Игрок получил урон
	actor_jump = {},				--($) Игрок прыгает
	actor_land = {},				--($) Игрок лезет по лестнице
	actor_on_leave_dialog = {},		--($) Игрок закрыл диалоговое окно либо оно закрылось принудительно, в общем диалог с НПС закончился
	actor_on_item_sell = {},		--($) Игрок продал предмет
	actor_on_item_buy = {},			--($) Игрок купил предмет
	actor_on_footstep = {},			--($)
	actor_hud_anim_play = {},		--($) Проигрывается HUD анимация
	actor_hud_anim_end = {},		--($) HUD анимация проигралась
	actor_hud_anim_mark = {},		--($)
	actor_info_callback = {},		--($) Игрок получил инфопоршень
	actor_wpn_zoom_in = {},			--($) Оружие: прицеливание
	actor_wpn_zoom_out = {},		--($) Оружие: выход из прицеливания
	actor_wpn_reload = {},			--($) Оружие: перезарядка
	actor_wpn_jam = {},				--($) Оружие: устранение осечки
	actor_wpn_fire = {},			--($) Оружие: огонь
	actor_wpn_empty_click = {},		--($) Оружие: попытка выстрелить, но магазин пуст
--НПС
	npc_on_net_spawn = {},			--($) НПС перешёл в online
	npc_on_net_destroy = {},		--($) НПС перешёл в offline
	npc_take_item = {},				--($) НПС взял предмет
	npc_drop_item = {},				--($) НПС выбросил предмет
	npc_on_death = {},				--($) НПС умер
	npc_on_use = {},				--($) Игрок нажимает клавишу использования, наведя курсор на НПС
	npc_on_hit = {},				--($) НПС получил урон
	npc_on_update = {},				--($) Апдейт НПС
	npc_on_first_update = {},		--($) Первый апдейт НПС
	npc_on_weapon_strap = {},		--($) НПС вешает своё оружие на плечо
	npc_on_weapon_unstrap = {},		--($) НПС снимает своё оружие с плеча
	npc_item_use = {},				--($) НПС использует какой-то предмет
	npc_on_danger = {},				--($) НПС в опасности: где-то рядом появился враг
--Монстры
	monster_on_update = {},			--($) Апдейт мутанта
	monster_on_first_update = {},	--($) Первый апдейт мутанта
	monster_on_net_spawn = {},		--($) Мутант перешёл в online
	monster_on_net_destroy = {},	--($) Мутант перешёл в offline
	monster_on_hit = {},			--($) Мутант получил урон
	monster_on_death = {},			--($) Мутант умер
	monster_on_use = {},			--($) Игрок нажимает на клавишу использования, наведя курсор мыши на мутанта
--Другое
	pstor_save = {},				--($) <object, net_packet>
	pstor_load = {},				--($) <object, net_packet>
	faction_fill_start_pos = {},	--($) Функция, которая заселяет всю зону НПС и сквадами.
	smart_on_update = {},			--($) Апдейт смарт-террейна
	smart_on_first_update = {},		--($) Первый апдейт смарт-террейна
	on_level_changing = {},			--($)
--Главное меню
	mm_on_keyboard = {},			--($)
	mm_on_init = {},				--($) Игрок открыл главное меню
	mm_on_quit = {},				--($) Игрок закрыл главного меню
	mm_on_screen_res_change = {},	--($) Игрок изменил разрешение экрана
--Сквады
	squad_on_add_npc = {},			--($) В сквад добавился НПС
	squad_on_update = {},			--($) Апдейт сквада
	squad_on_first_update = {},		--($) Первый апдейт сквада
	squad_on_npc_death = {},		--($) НПС из сквада умер
	squad_on_leave_smart = {},		--($) Сквад выходит из смарт-террейна
	squad_on_enter_smart = {},		--($) Сквад заходит в смарт-террейн
	squad_on_npc_creation = {},		--($) Сквад создаётся: добавляются НПС
--Сервер
	se_entity_on_register = {},		--($) Серверное существо добавилось в игру (alife_create)
	se_entity_on_unregister = {},	--($) Серверное существо удалилось из игры (alife_release)
	se_stalker_on_spawn = {},		--($) Серверный объект Сталкер заспаунился
--Булеаны, попытки
	actor_try_take_item = {},		--($) Игрок может взять предмет, если результат равен true
	actor_try_take_item_from_box = {},--($) Игрок может взять предмет из ящика, если результат равен true
	actor_try_put_item_in_box = {},	--($) Игрок может положить предмет в ящик, если результат равен true
}

function game_load(actor_binder)
	local ignore = { 
		["_G.script"] = true,
		["class_registrator.script"] = true,
		["game_registrator.script"] = true,
		["ce_new_attachable_item.script"] = true,
		["ce_new_game_dm.script"] = true,
		["sim_faction_brain_human.script"] = true,
		["sim_faction_brain_mutant.script"] = true,
		["ce_switcher.script"] = true,
		["lua_help.script"] = true,
		["heli_snd.script"] = true,
		["level_psy_antenna.script"] = true,
		["mfs_callbacks.script"] = true,
	}
	
	local f	= getFS()
	local flist = f:file_list_open_ex("$game_scripts$",bit_or(FS.FS_ListFiles,FS.FS_RootOnly),"*.script")
	for	it=0, flist:Size()-1 do
		local file = flist:GetAt(it)
		local file_name = file:NameShort()
		printf("%s size=%s",file_name,file:Size())
		if (file:Size() > 0 and ignore[file_name] ~= true) then
			file_name = file_name:sub(0,file_name:len()-7)
			if (_G[file_name] and _G[file_name].on_game_load) then
				_G[file_name].on_game_load(actor_binder)
			end
		end
	end
end

--функция-пример
--Зарегестрировать вызов каллбэка в реестре
--name - имя каллбэка
--func - функция, которая будет вызываться при вызове каллбэка
function Register(name,func)
	--Проверяем, существует ли такой каллбэк
	if callbacks[name] then
		--Если по каким-то причинам func равен nil, то игра крашнется
		callbacks[name][func] = true
	else
		--Не существует: пишем в лог
		printf("! mfs_callbacks: callback [%s] doesn't exist!",name)
		callstack()
	end
end

--Отвязать вызов каллбэка из реестра
function Unregister(name,func)
	if not callbacks[name] then
		printf("! mfs_callbacks: callback [%s] doesn't exist!",name)
		callstack()
		return
	end
	--Если по каким-то причинам func равен nil, то игра крашнется
	callbacks[name][func] = nil
end

--Добавить новый каллбэк в реестр
function Add(name)
	if not callbacks[name] then
		callbacks[name] = {}
	else
		printf("~ mfs_callbacks: callback [%s] already exists!",name) --предупреждение
		callstack()
	end
end

--Удалить каллбэк из реестра
function Del(name)
	callbacks[name] = nil
end

--Вызвать каллбэк
--... (необязательный параметр) - любые аргументы, которые будут передаваться в func
function Action(name,...)
	if not callbacks[name] then
		printf("! mfs_callbacks: callback [%s] doesn't exist!",name)
		callstack()
		return
	end
	for k,v in pairs(callbacks[name]) do
		--если v это nil то итератор автоматически пропускает цикл, поэтому ненужно делать проверку на пустоту
		k(...)
	end
end

--Проверить, существует ли каллбэк
function Exist(name)
	return callbacks[name] ~= nil
end

--Проверить, зарегестрирован ли вызов каллбэка в реестре
function Registered(name,func)
	return callbacks[name] and callbacks[name][func] == true
end

--Получить таблицу каллбэка из реестра
function Get(name)
	return callbacks[name]
end