class "se_actor"	(cse_alife_creature_actor)
--------------------
function se_actor:__init (section) super (section)
	self.m_registred = false
end
function se_actor:on_register()
	cse_alife_creature_actor.on_register(self)
	self.m_registred = true
end
--------------------
function se_actor:STATE_Write(packet)
	cse_alife_creature_actor.STATE_Write (self, packet)

--	if self.m_registred ~= true then
--		return
--	end
	set_save_marker(packet, "save", false, "se_actor")

	task_manager.get_task_manager():save(packet)
	sim_board.get_sim_board().id_generator:save(packet)
	minigames_manager.get_minigames_manager():save(packet)

	set_save_marker(packet, "save", true, "se_actor")
end
--------------------
function se_actor:STATE_Read(packet, size)
	cse_alife_creature_actor.STATE_Read (self, packet, size)

	-- под LevelEditor не пытаться читать из пакета ничего
	if editor() then
		return
	end

--	if self.m_registred ~= true then
--		return
--	end
	set_save_marker(packet, "load", false, "se_actor")

	task_manager.get_task_manager():load(packet)
	sim_board.get_sim_board().id_generator:load(packet)
	minigames_manager.get_minigames_manager():load(packet)

	set_save_marker(packet, "load", true, "se_actor")
end