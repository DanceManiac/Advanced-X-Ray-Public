
{====================================================}
{                                                    }
{   EldoS Visual Components                          }
{                                                    }
{   Copyright (c) 1998-2001, EldoS                   }
{                                                    }
{====================================================}
{$include elpack2.inc}
{$ifdef ELPACK_SINGLECOMP}
{$I ElPack.inc}
{$else}
{$ifdef LINUX}
{$I ../ElPack.inc}
{$else}
{$I ..\ElPack.inc}
{$endif}
{$endif}

unit ElMemoCombo;  { TElMemoCombo component. }

interface

uses
  Windows,
  SysUtils,
  Messages,
  Classes,
  Graphics,
  Controls,
  Forms,
  Dialogs,
  Menus,
  StdCtrls,
{$ifdef VCL_6_USED}
Types,
{$endif}
  ElBtnEdit,
  ElACtrls,
  ElVCLUtils,
  ElPopBtn,
  ElTools,
  ElTmSchema,
  ElUxTheme,
  ElEdits,
  ExtCtrls;

type
  TElMemoComboDropEvent = procedure(Sender : TObject; var Dropped : boolean; var Text : string) of object;

  TElIntMemo = TElAdvancedMemo;
  // TElIntMemo = TElEdit;

  TElMemoCombo = class(TCustomElButtonEdit)
  private
    FOnMemoChange : TNotifyEvent;
    FOnMemoClick : TNotifyEvent;
    FOnMemoDblClick : TNotifyEvent;
    FOnMemoKeyDown : TKeyEvent;
    FOnMemoKeyPress : TKeyPressEvent;
    FOnMemoKeyUp : TKeyEvent;
    FOnMemoMouseDown : TMouseEvent;
    FOnMemoMouseMove : TMouseMoveEvent;
    FOnMemoMouseUp : TMouseEvent;
    { Private declarations }
    FMemo : TElIntMemo;
    FMemoAlignment: TAlignment;
    { Owned component }
    FDropAutoWidth: boolean;
    FDropHeight : Integer;
    FDropWidth : Integer;
    FDropped : Boolean;
    FOnDrop : TElMemoComboDropEvent;
    FIgnoreBtn : boolean;
    procedure SetDropHeight(newValue : Integer);
    procedure SetDropWidth(newValue : Integer);
    procedure SetDropped(newValue : Boolean);
    { Inherited properties' Read/Write methods: }
    procedure SetMemoAlignment(newValue : TAlignment);
    procedure SetMemoColor(newValue : TColor);
    function GetMemoColor : TColor;
    procedure SetMemoFont(newValue : TFont);
    function GetMemoFont : TFont;
    procedure SetMemoMaxLength(newValue : Integer);
    function GetMemoMaxLength : Integer;
    procedure SetMemoPopupMenu(newValue : TPopupMenu);
    function GetMemoPopupMenu : TPopupMenu;
    procedure SetMemoScrollBars(newValue : TScrollStyle);
    function GetMemoScrollBars : TScrollStyle;
    procedure SetMemoWordWrap(newValue : Boolean);
    function GetMemoWordWrap : Boolean;
    procedure MemoDeactivate(Sender : TObject);
    procedure ButtonClick(Sender : TObject);
    procedure SetMemoFlatScrollBars(newValue : Boolean);
    function GetMemoFlatScrollBars : Boolean;
    procedure SetMemoActiveBorderType(newValue : TElFlatBorderType);
    function GetMemoActiveBorderType : TElFlatBorderType;
    procedure MemoChangeTransfer(Sender : TObject);  { TNotifyEvent }
    procedure MemoClickTransfer(Sender : TObject);  { TNotifyEvent }
    procedure MemoDblClickTransfer(Sender : TObject);  { TNotifyEvent }
    procedure MemoKeyDownTransfer(Sender : TObject; var Key : Word; Shift : TShiftState);  { TKeyEvent }
    procedure MemoKeyPressTransfer(Sender : TObject; var Key : Char);  { TKeyPressEvent }
    procedure MemoKeyUpTransfer(Sender : TObject; var Key : Word; Shift : TShiftState);  { TKeyEvent }
    procedure MemoMouseDownTransfer(Sender : TObject; Button : TMouseButton; Shift : TShiftState; X : Integer; Y : Integer);  { TMouseEvent }
    procedure MemoMouseMoveTransfer(Sender : TObject; Shift : TShiftState; X : Integer; Y : Integer);  { TMouseMoveEvent }
    procedure MemoMouseUpTransfer(Sender : TObject; Button : TMouseButton; Shift : TShiftState; X : Integer; Y : Integer);  { TMouseEvent }
    procedure WMSetFocus(var Msg : TWMSetFocus); message WM_SETFOCUS;
    procedure SetDropAutoWidth(const Value: boolean);
  protected
    procedure TriggerDropEvent(var Dropped : boolean; var Text : string); virtual;
    procedure CreateParams(var Params: TCreateParams); override;
    procedure WMSize(var Message: TWMSize); message WM_SIZE;
  public
    constructor Create(AOwner : TComponent); override;
    destructor Destroy; override;
    procedure CreateWnd; override;

    procedure Drop(Dropped : boolean);
    function GetMemo : TElIntMemo;
  published
    property DropAutoWidth: boolean read FDropAutoWidth write SetDropAutoWidth default True;
    property DropHeight : Integer read FDropHeight write SetDropHeight;  { Published }
    property DropWidth : Integer read FDropWidth write SetDropWidth;  { Published }
    property Dropped : Boolean read FDropped write SetDropped;  { Published }
    property OnDrop : TElMemoComboDropEvent read FOnDrop write FOnDrop;

    property MemoAlignment: TAlignment read FMemoAlignment write SetMemoAlignment;
    property MemoColor : TColor read GetMemoColor write SetMemoColor;
    property MemoFont : TFont read GetMemoFont write SetMemoFont;
    property MemoMaxLength : Integer read GetMemoMaxLength write SetMemoMaxLength;
    property MemoPopupMenu : TPopupMenu read GetMemoPopupMenu write SetMemoPopupMenu;
    property MemoScrollBars : TScrollStyle read GetMemoScrollBars write SetMemoScrollBars;
    property MemoWordWrap : Boolean read GetMemoWordWrap write SetMemoWordWrap;
    property MemoActiveBorderType : TElFlatBorderType read GetMemoActiveBorderType write SetMemoActiveBorderType;
    property MemoFlatScrollBars : Boolean read GetMemoFlatScrollBars write SetMemoFlatScrollBars;

    property TopMargin;
    property LeftMargin;
    property RightMargin;
    property AutoSize;
    property RTLContent;
    property BorderSides;
    property PasswordChar;
    property MaxLength;
    property Transparent;
    property FlatFocusedScrollBars;
    property WantTabs;
    property HandleDialogKeys;
    property HideSelection;
    property TabSpaces;
    property Lines  stored false;
    {$ifdef ELPACK_COMPLETE}
    property ImageForm;
    {$endif}
    property WordWrap;
    property ScrollBars;

    property OnMouseEnter;
    property OnMouseLeave;
    property OnResize;
    property OnChange;
    property OnSelectionChange;

    property Text;
    property Multiline;

    property Align;
    property ActiveBorderType;
    property AutoSelect;
    property BorderStyle;
    property ButtonClickSound;
    property ButtonDownSound;
    property ButtonUpSound;
{$IFDEF USE_SOUND_MAP}
    property ButtonSoundMap;
{$ENDIF}
    property ButtonColor;
    property ButtonHint;
    property ButtonWidth;

    property Color;
    property Ctl3D;
    property DragCursor;
    property DragMode;
    property Enabled;
    property Flat;
    property Font;
    property InactiveBorderType;
    // property OEMConvert;
    property ParentColor;
    property ParentCtl3D;
    property ParentFont;
    property ParentShowHint;
    property PopupMenu;
    property ReadOnly;
    property ShowHint;
    property Visible;
    { Inherited events: }
    property OnClick;
    property OnDblClick;
    property OnDragDrop;
    property OnDragOver;
    property OnEndDrag;
    property OnEnter;
    property OnExit;
    property OnKeyDown;
    property OnKeyPress;
    property OnKeyUp;
    property OnMouseDown;
    property OnMouseMove;
    property OnMouseUp;
    property OnMemoChange : TNotifyEvent read FOnMemoChange write FOnMemoChange;
    property OnMemoClick : TNotifyEvent read FOnMemoClick write FOnMemoClick;
    property OnMemoDblClick : TNotifyEvent read FOnMemoDblClick write FOnMemoDblClick;
    property OnMemoKeyDown : TKeyEvent read FOnMemoKeyDown write FOnMemoKeyDown;
    property OnMemoKeyPress : TKeyPressEvent read FOnMemoKeyPress write FOnMemoKeyPress;
    property OnMemoKeyUp : TKeyEvent read FOnMemoKeyUp write FOnMemoKeyUp;
    property OnMemoMouseDown : TMouseEvent read FOnMemoMouseDown write FOnMemoMouseDown;
    property OnMemoMouseMove : TMouseMoveEvent read FOnMemoMouseMove write FOnMemoMouseMove;
    property OnMemoMouseUp : TMouseEvent read FOnMemoMouseUp write FOnMemoMouseUp;

{$IFDEF VCL_4_USED}
    property Anchors;
    property Constraints;
    property DockOrientation;
    property Floating;
    property DoubleBuffered;
    property DragKind;
{$ENDIF}

  end;  { TElMemoCombo }

type

  TElHackMemo = class(TElIntMemo)
  private
    Owner : TComponent;
    FOnDeactivate : TNotifyEvent;
    procedure WMNCHitTest(var Msg : TMessage); message WM_NCHITTEST;
    procedure WMKillFocus(var Msg : TWMKillFocus); message WM_KILLFOCUS;
    procedure WMSysKeyDown(var Msg : TWMKeyDown); message WM_SYSKEYDOWN;
    procedure WMKeyDown(var Msg : TWMKeyDown); message WM_KEYDOWN;
    procedure WMActivate(var Msg : TWMActivate); message WM_ACTIVATE;
  protected
    procedure CreateParams(var Params: TCreateParams); override;
    property OnDeactivate : TNotifyEvent read FOnDeactivate write FOnDeactivate;
  public
    constructor Create(Owner : TComponent); override;
  end;

implementation
end.
