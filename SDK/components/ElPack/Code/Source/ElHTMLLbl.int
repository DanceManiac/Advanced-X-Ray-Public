{====================================================}
{                                                    }
{   EldoS Visual Components                          }
{                                                    }
{   Copyright (c) 1998-2001, EldoS                   }
{                                                    }
{====================================================}

{$include elpack2.inc}
{$ifdef ELPACK_SINGLECOMP}
{$I ElPack.inc}
{$else}
{$ifdef LINUX}
{$I ../ElPack.inc}
{$else}
{$I ..\ElPack.inc}
{$endif}
{$endif}

(*

Version History
  
03/06/2002

  Added unicode hint

12/28/2001

  When the control is resized, WordWrap is on and IsHTML is turned on, wrapping
was not updated. Fixed. 

09/26/2001

  Added LinkStyle, LinkColor and LinkPopupMenu properties

09/10/2001

  Fixed updating after control is resized and WordWrap is set to TRUE.

09/03/2001

  in HTML mode Layout and Alignment properties are taken into account now.  

08/20/2001

  Improved AutoSize behaviour

08/13/2001

  Fixed GetItemRect method to return correct values

*)
unit ElHTMLLbl;  { TElHTMLLabel component. }

{ HTML-enabled label }

interface

uses
{$ifndef CLX_USED}
  Windows,
  Messages,
  Graphics,
  Controls,
  StdCtrls,
  Forms,
  Menus,
{$else}
  QGraphics,
  QControls,
  Qt,
  Types,
  QStdCtrls,
  QForms,
  QMenus,
{$endif}
  Classes,
  SysUtils,
  HTMLRender,
{$ifdef VCL_6_USED}
Types,
{$endif}
  ElTools,
  ElVCLUtils,
  ElStrUtils,
  ElHandPt;

type

  TElHTMLLabel = class(TCustomLabel)
  private
    FCursor : TCursor;
    FRender : TElHTMLRender;
    {$ifdef CLX_USED}
    FCanvas : TCanvas;
    {$endif}
    FIsHTML : Boolean;
    FOnLinkClick : TElHTMLLinkClickEvent;
    FOnImageNeeded : TElHTMLImageNeededEvent;
    FLinkColor: TColor;
    FLinkPopupMenu: TPopupMenu;
    FLinkStyle: TFontStyles;
    {$ifdef ELPACK_UNICODE}
    FHint: WideString;
    {$endif}

    {$ifndef CLX_USED}
    procedure CMTextChanged(var Msg : TMessage); message CM_TEXTCHANGED;
    procedure CMFontChanged(var Msg : TMessage); message CM_FONTCHANGED;
    procedure CMMouseLeave(var Msg : TMessage); message CM_MOUSELEAVE;
    {$endif}
    procedure SetLinkPopupMenu(newValue : TPopupMenu);

  protected
    FCaption: TElFString;
    procedure AdjustBounds;
{$IFNDEF VER100}
{$ifndef CLX_USED}
    override;
{$endif}
{$ENDIF}
{$ifdef CLX_USED}
    procedure Painting(Sender: QObjectH; EventRegion: QRegionH); override;
    procedure TextChanged; override;
    procedure FontChanged; override;
    procedure MouseLeave(AControl: TControl); override;
{$endif}
    procedure SetIsHTML(newValue : Boolean); virtual;
    procedure TriggerLinkClickEvent(HRef : TElFString); virtual;
    procedure TriggerImageNeededEvent(Sender : TObject; Src : TElFString; var Image : TBitmap);
    procedure Loaded; override;
    procedure SetCursor(newValue : TCursor); virtual;
    procedure MouseMove(Shift: TShiftState; X, Y: Integer); override;
    procedure Click; override;
    function GetWordWrap : Boolean; virtual;
    procedure SetWordWrap(newValue : Boolean); virtual;
    procedure SetAutoSize(newValue : Boolean); override;
    function GetTextRect : TRect;
    procedure SetCaption(Value: TElFString);
    {$ifndef CLX_USED}
    procedure DoDrawText(var Rect: TRect; Flags: {$ifdef VCL_4_USED}Longint{$else}Word{$endif});
    {$ifndef D_3}override;{$endif}
    {$endif}
    procedure SetLinkColor(newValue : TColor); virtual;
    procedure SetLinkStyle(newValue : TFontStyles); virtual;
    procedure Notification(AComponent : TComponent; operation : TOperation); 
        override;

    {$ifndef CLX_USED}
    procedure WMRButtonUp(var Message: TWMRButtonUp); message WM_RBUTTONUP;
    procedure DoLinkPopup(MousePos : TPoint);
    {$ifdef VCL_5_USED}
    procedure WMContextMenu(var Message: TWMContextMenu); message WM_CONTEXTMENU;
    {$endif}
    {$endif}
    function CalcTextRect: TRect;
    {$ifdef CLX_USED}
    property Canvas : TCanvas read FCanvas;
    {$endif}
    {$ifdef ELPACK_UNICODE}
    procedure SetHint(Value: WideString);

    {$ifndef CLX_USED}
    procedure CMHintShow(var Message: TMessage); message CM_HINTSHOW;
    {$else}
    function HintShow(var HintInfo : THintInfo): Boolean; override;
    {$endif}
    {$endif}
    procedure SetName(const Value: TComponentName); override;

   public
    { Public declarations }
    constructor Create(AOwner : TComponent); override;
    destructor Destroy; override;
    procedure Paint;
{$ifndef CLX_USED}
    override;
{$endif}
    procedure SetBounds(ALeft, ATop, AWidth, AHeight: Integer); override;

    property TextRect : TRect read GetTextRect;
  published
    {$ifdef ELPACK_UNICODE}
    property Hint: WideString read FHint write SetHint;
    {$endif}

    property Cursor   : TCursor read FCursor write SetCursor;  { Published }
    property IsHTML   : Boolean read FIsHTML write SetIsHTML;  { Published }
    property WordWrap : Boolean read GetWordWrap write SetWordWrap;  { Published }
    property Caption  : TElFString read FCaption write SetCaption;
    property LinkColor: TColor read FLinkColor write SetLinkColor;
    property LinkPopupMenu: TPopupMenu read FLinkPopupMenu write SetLinkPopupMenu;
    property LinkStyle: TFontStyles read FLinkStyle write SetLinkStyle;

    property OnLinkClick : TElHTMLLinkClickEvent read FOnLinkClick write FOnLinkClick;
    property OnImageNeeded : TElHTMLImageNeededEvent read FOnImageNeeded write FOnImageNeeded;

    property Align;
    property Alignment;
    property AutoSize;
{$IFDEF VCL_4_USED}
    property Anchors;
{$ifndef CLX_USED}
    property BiDiMode;
{$endif}
{$ENDIF}
    property Color nodefault;
{$IFDEF VCL_4_USED}
    property Constraints;
{$ifndef CLX_USED}
    property DragKind;
{$endif}
{$ENDIF}
{$ifndef CLX_USED}
    property DragCursor;
{$endif}
    property DragMode;
    property Enabled;
    property FocusControl;
    property Font;
{$IFDEF VCL_4_USED}
{$ifndef CLX_USED}
    property ParentBiDiMode;
{$endif}
{$ENDIF}
    property ParentColor;
    property ParentFont;
    property ParentShowHint;
    property PopupMenu;
    property ShowHint;
    property Transparent;
    property Layout;
    property Visible;

    property OnClick;

{$IFDEF VCL_5_USED}
    property OnContextPopup;
{$ENDIF}    
    property OnDblClick;
    property OnDragDrop;
    property OnDragOver;
    property OnEndDrag;
    property OnMouseDown;
    property OnMouseMove;
    property OnMouseUp;
{$IFDEF VCL_4_USED}
{$ifndef CLX_USED}
    property OnEndDock;
    property OnStartDock;
{$endif}
{$ENDIF}
    property OnStartDrag;
  end;  { TElHTMLLabel }

implementation
end.
