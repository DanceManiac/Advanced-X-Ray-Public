{====================================================}
{                                                    }
{   EldoS Visual Components                          }
{                                                    }
{   Copyright (c) 1998-2001, EldoS                   }
{                                                    }
{====================================================}

{$include elpack2.inc}
{$ifdef ELPACK_SINGLECOMP}
{$I ElPack.inc}
{$else}
{$ifdef LINUX}
{$I ../ElPack.inc}
{$else}
{$I ..\ElPack.inc}
{$endif}
{$endif}

unit ElHintWnd;  { TElHintWindow component. }

interface

uses
{$ifndef CLX_USED}
  Windows,
  Messages,
  Graphics,
  Controls,
  Forms,
{$else}
  QControls,
  QTypes,
  Types,
  Qt,
  QGraphics,
  QForms,
{$endif}
  SysUtils,
{$ifdef VCL_6_USED}
Types,
{$endif}
  Classes,
{$IFDEF HAS_HTML_RENDER}
  HTMLRender,
{$ENDIF}
  ElVCLUtils,
  ElStrUtils
  ;

type
  TElHintWindow = class(THintWindow)
  protected
    FFont : TFont;
    FActivating : boolean;
    {$ifdef ELPACK_UNICODE}
    FWideCaption : WideString;
    {$endif}
{$IFDEF HAS_HTML_RENDER}
    FRender : TElHTMLRender;
    FIsHTML : boolean;
    FOnLinkClick: TElHTMLLinkClickEvent;
    FOnImageNeeded : TElHTMLImageNeededEvent;
{$ENDIF}
    procedure SetFont(newValue : TFont);
  protected
    FWordWrap: Boolean;
{$ifdef HAS_HTML_RENDER}
    procedure TriggerLinkClickEvent(HRef : TElFString); virtual;
    procedure TriggerImageNeededEvent(Sender: TObject; Src : TElFString; var Image : TBitmap); virtual;
{$endif}
    procedure MouseDown(Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
        override;
    {$ifdef CLX_USED}
    function WidgetFlags: Integer; override;
    procedure TextChanged; override;
    {$else}
    procedure CMTextChanged(var Message: TMessage); message CM_TEXTCHANGED;
    {$endif}
    procedure SetWordWrap(Value: Boolean);
  public
    constructor Create(AOwner : TComponent); override;
    destructor Destroy; override;
    procedure Paint; override;

{$ifdef CLX_USED}
    function CalcHintRect(MaxWidth: Integer; const AHint: WideString; AData: Pointer): TRect; override;
{$else}
    function CalcHintRect(MaxWidth: Integer; const AHint: string; AData: Pointer): TRect; override;
{$endif}
    {$ifdef ELPACK_UNICODE}
    function CalcHintRectW(MaxWidth: Integer; const AHint: WideString; AData: Pointer): TRect;
    procedure ActivateHintW(Rect: TRect; const AHint: WideString); virtual;
    {$endif}
    property Canvas;
  published
    property Font : TFont read FFont write SetFont;  { Published }
    property WordWrap: Boolean read FWordWrap write SetWordWrap default false;
    {$ifdef ELPACK_UNICODE}
    property WideCaption : WideString read FWideCaption write FWideCaption;
    {$endif}
{$IFDEF HAS_HTML_RENDER}
    property IsHTML : boolean read FIsHTML write FIsHTML;
    property OnImageNeeded : TElHTMLImageNeededEvent read FOnImageNeeded write FOnImageNeeded;
    property OnLinkClick: TElHTMLLinkClickEvent read FOnLinkClick write
        FOnLinkClick;
{$ENDIF}
  end;  { TElHintWindow }

{$ifdef ELPACK_UNICODE}
function GetUnicodeHint(Hint : string) : WideString; 
{$endif}

implementation
end.
