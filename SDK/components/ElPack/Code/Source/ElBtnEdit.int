{====================================================}
{                                                    }
{   EldoS Visual Components                          }
{                                                    }
{   Copyright (c) 1998-2001, EldoS                   }
{                                                    }
{====================================================}
{$include elpack2.inc}
{$ifdef ELPACK_SINGLECOMP}
{$I ElPack.inc}
{$else}
{$ifdef LINUX}
{$I ../ElPack.inc}
{$else}
{$I ..\ElPack.inc}
{$endif}
{$endif}

(*

Version History

02/26/2002

  Added ButtonTransparent and AltButtonTransparent properties

02/03/2002

  Fixed the problem with disappearing AltButton (caused by incorrect calculation
  of button size)

01/01/2002

  Fixed some problems with painting borders when focus is moved

10/12/2001

  ButtonThinFrame and AltButtonThinFrame added.  

08/31/2001

  Buttons are of type TElGraphicButton now.

03/09/2001

  Fixed drawing artefacts on buttons.
  
01/17/2001

  Now AltButton can be located on the left side of the control

09/30/2000

  Ancestor changed to TCustomElFlatEdit

*)

unit ElBtnEdit; { TElButtonEdit component. }

interface

{$R 'elbtnedit.res'}

uses
{$ifdef MSWINDOWS}
  Windows,
  Messages,
  Graphics,
  Controls,
  StdCtrls,
  Forms,
{$ifdef VCL_6_USED}
Types,
{$endif}
  Menus,
{$else}
  QGraphics,
  QControls,
  Qt,
  Types,
  QStdCtrls,
  QForms,
{$endif}
  SysUtils,
  Classes,
  ElPopBtn,
  ElVCLUtils,
{$ifdef MSWINDOWS}
  ElImgFrm,
  ElSndMap,
{$endif}
  ElTools,
  ElEdits;

type

  TCustomElButtonEdit = class(TCustomElEdit)
  private
    FOnAltButtonClick : TNotifyEvent;
    FButtonShortcut : TShortcut;
    FAltButtonShortcut : TShortcut;
    FOnButtonClick : TNotifyEvent;
    procedure SetButtonClickSound(newValue : TElSoundName);
    function GetButtonClickSound : TElSoundName;
    procedure SetButtonDownSound(newValue : TElSoundName);
    function GetButtonDownSound : TElSoundName;
{$IFDEF USE_SOUND_MAP}
    procedure SetButtonSoundMap(newValue : TElSoundMap);
    function GetButtonSoundMap : TElSoundMap;
{$endif}
    procedure SetButtonUpSound(newValue : TElSoundName);
    function GetButtonUpSound : TElSoundName;
    procedure SetAltButtonClickSound(newValue : TElSoundName);
    function GetAltButtonClickSound : TElSoundName;
    procedure SetAltButtonUpSound(newValue : TElSoundName);
    function GetAltButtonUpSound : TElSoundName;
{$IFDEF USE_SOUND_MAP}
    procedure SetAltButtonSoundMap(newValue : TElSoundMap);
    function GetAltButtonSoundMap : TElSoundMap;
{$ENDIF}
    procedure SetButtonColor(newValue : TColor);
    function GetButtonColor : TColor;
    procedure SetButtonDown(newValue : Boolean);
    function GetButtonDown : Boolean;
    procedure SetButtonGlyph(newValue : TBitmap);
    function GetButtonGlyph : TBitmap;
    procedure SetButtonHint(newValue : string);
    function GetButtonHint : string;
    procedure SetButtonIcon(newValue : TIcon);
    function GetButtonIcon : TIcon;
    procedure SetButtonNumGlyphs(newValue : integer);
    function GetButtonNumGlyphs : integer;
    procedure SetButtonUseIcon(newValue : Boolean);
    function GetButtonUseIcon : Boolean;
    procedure SetButtonWidth(newValue : Integer);
    function GetButtonWidth : Integer;
    procedure ButtonClickTransfer(Sender : TObject); { TNotifyEvent }
    procedure SetButtonVisible(newValue : Boolean);
    function GetButtonVisible : Boolean;
    procedure SetAltButtonDown(newValue : Boolean);
    function GetAltButtonDown : Boolean;
    procedure SetAltButtonDownSound(newValue : TElSoundName);
    function GetAltButtonDownSound : TElSoundName;
    procedure SetAltButtonFlat(newValue : Boolean);
    function GetAltButtonFlat : Boolean;
    procedure SetAltButtonGlyph(newValue : TBitmap);
    function GetAltButtonGlyph : TBitmap;
    procedure SetAltButtonIcon(newValue : TIcon);
    function GetAltButtonIcon : TIcon;
    procedure SetAltButtonNumGlyphs(newValue : integer);
    function GetAltButtonNumGlyphs : integer;
    procedure SetAltButtonUseIcon(newValue : Boolean);
    function GetAltButtonUseIcon : Boolean;
    procedure SetAltButtonVisible(newValue : Boolean);
    function GetAltButtonVisible : Boolean;
    procedure SetAltButtonWidth(newValue : Integer);
    function GetAltButtonWidth : Integer;
    procedure AltButtonClickTransfer(Sender : TObject); { TNotifyEvent }
    procedure CMCtl3DChanged(var Msg : TMessage); message CM_CTL3DCHANGED;
    procedure SetButtonFlat(newValue : Boolean);
    function GetButtonFlat : Boolean;
    procedure SetAltButtonEnabled(newValue : Boolean);
    function GetAltButtonEnabled : Boolean;
    procedure SetButtonEnabled(newValue : Boolean);
    function GetButtonEnabled : Boolean;
    procedure CMEnabledChanged(var Msg : TMessage); message CM_ENABLEDCHANGED;
    procedure SetAltButtonHint(newValue : String);
    function GetAltButtonHint : String;
    procedure SetAltButtonPopupPlace(newValue : TPopupPlace);
    function GetAltButtonPopupPlace : TPopupPlace;
    procedure SetAltButtonPullDownMenu(newValue : TPopupMenu);
    function GetAltButtonPullDownMenu : TPopupMenu;
    procedure SetButtonPopupPlace(newValue : TPopupPlace);
    function GetButtonPopupPlace : TPopupPlace;
    procedure SetButtonPullDownMenu(newValue : TPopupMenu);
    function GetButtonPullDownMenu : TPopupMenu;
    procedure SetAltButtonCaption(newValue : TCaption);
    function GetAltButtonCaption : TCaption;
    procedure SetButtonCaption(newValue : TCaption);
    function GetButtonCaption : TCaption;
    procedure SetMultiline(newValue : boolean);
    procedure SetAltBtnAlign(newValue : TLeftRight);
    procedure CMFontChanged(var Msg : TMessage); message CM_FONTCHANGED;
    procedure WMGetDlgCode(var Msg : TWMGetDlgCode); message WM_GETDLGCODE;
  protected
    { Protected declarations }
    FAltButton : TCustomElGraphicButton;
    FButton    : TCustomElGraphicButton;
    FAltBtnAlign : TLeftRight;
    FMultiline : Boolean;
    ButtonClass : TCustomElGraphicButtonClass;

    procedure WMSize(var Msg : TWMSize); message WM_Size;
    procedure KeyPress(var Key : Char); override;
    procedure KeyDown(var Key : Word; Shift : TShiftState); override;
    procedure Loaded; override;

    procedure SetEditRect;
    procedure WMKeyDown(var Message: TWMKey); message WM_KEYDOWN;
    function GetAltButtonColor: TColor;
    procedure SetAltButtonColor(Value: TColor);
    function GetButtonThinFrame: Boolean;
    procedure SetButtonThinFrame(Value: Boolean);
    function GetAltButtonThinFrame: Boolean;
    procedure SetAltButtonThinFrame(Value: Boolean);
    procedure SetUseXPThemes(const Value : boolean); override;
    procedure UpdateButtonStyles;
    procedure SetActiveBorderType(const Value: TElFlatBorderType); override;
    procedure SetFlat(const Value: boolean); override;
    procedure SetInactiveBorderType(const Value: TElFlatBorderType); override;
    procedure SetLineBorderActiveColor(Value: TColor); override;
    procedure SetLineBorderInactiveColor(Value: TColor); override;
    function GetButtonTransparent: Boolean;
    procedure SetButtonTransparent(Value: Boolean);
    function GetAltButtonTransparent: Boolean;
    procedure SetAltButtonTransparent(Value: Boolean);
    property ButtonCaption : TCaption read GetButtonCaption write SetButtonCaption;
    property ButtonClickSound : TElSoundName read GetButtonClickSound write SetButtonClickSound;
    property ButtonColor : TColor read GetButtonColor write SetButtonColor;
    property ButtonDown : Boolean read GetButtonDown write SetButtonDown;
    property ButtonDownSound : TElSoundName read GetButtonDownSound write SetButtonDownSound;
    property ButtonFlat : Boolean read GetButtonFlat write SetButtonFlat;
    property ButtonGlyph : TBitmap read GetButtonGlyph write SetButtonGlyph;
    property ButtonHint : string read GetButtonHint write SetButtonHint;
    property ButtonIcon : TIcon read GetButtonIcon write SetButtonIcon;
    property ButtonNumGlyphs : integer read GetButtonNumGlyphs write SetButtonNumGlyphs;
    property ButtonPopupPlace : TPopupPlace read GetButtonPopupPlace write SetButtonPopupPlace;
    property ButtonPullDownMenu : TPopupMenu read GetButtonPullDownMenu write SetButtonPullDownMenu;
{$IFDEF USE_SOUND_MAP}
    property ButtonSoundMap : TElSoundMap read GetButtonSoundMap write SetButtonSoundMap;
{$ENDIF}
    property ButtonUpSound : TElSoundName read GetButtonUpSound write SetButtonUpSound;
    property ButtonUseIcon : Boolean read GetButtonUseIcon write SetButtonUseIcon;
    property ButtonWidth : Integer read GetButtonWidth write SetButtonWidth;
    property ButtonEnabled : Boolean read GetButtonEnabled write SetButtonEnabled;

    property OnButtonClick : TNotifyEvent read FOnButtonClick write FOnButtonClick;

    property ButtonShortcut : TShortcut read FButtonShortcut write FButtonShortcut; { Published }
    property AltButtonShortcut : TShortcut read FAltButtonShortcut write FAltButtonShortcut; { Published }
    property ButtonVisible : Boolean read GetButtonVisible write SetButtonVisible;
    property AltButtonCaption : TCaption read GetAltButtonCaption write SetAltButtonCaption;
    property AltButtonClickSound : TElSoundName read GetAltButtonClickSound write SetAltButtonClickSound;
    property AltButtonDownSound : TElSoundName read GetAltButtonDownSound write SetAltButtonDownSound;
{$IFDEF USE_SOUND_MAP}
    property AltButtonSoundMap : TElSoundMap read GetAltButtonSoundMap write SetAltButtonSoundMap;
{$ENDIF}
    property AltButtonUpSound : TElSoundName read GetAltButtonUpSound write SetAltButtonUpSound;
    property AltButtonColor: TColor read GetAltButtonColor write SetAltButtonColor;
    property AltButtonDown : Boolean read GetAltButtonDown write SetAltButtonDown;
    property AltButtonFlat : Boolean read GetAltButtonFlat write SetAltButtonFlat;
    property AltButtonGlyph : TBitmap read GetAltButtonGlyph write SetAltButtonGlyph;
    property AltButtonHint : String read GetAltButtonHint write SetAltButtonHint;
    property AltButtonIcon : TIcon read GetAltButtonIcon write SetAltButtonIcon;
    property AltButtonNumGlyphs : integer read GetAltButtonNumGlyphs write SetAltButtonNumGlyphs;
    property AltButtonPopupPlace : TPopupPlace read GetAltButtonPopupPlace write SetAltButtonPopupPlace;
    property AltButtonPosition : TLeftRight read FAltBtnAlign write SetAltBtnAlign default taRightJustify;
    property AltButtonPullDownMenu : TPopupMenu read GetAltButtonPullDownMenu write SetAltButtonPullDownMenu;
    property AltButtonUseIcon : Boolean read GetAltButtonUseIcon write SetAltButtonUseIcon;
    property AltButtonVisible : Boolean read GetAltButtonVisible write SetAltButtonVisible;
    property AltButtonWidth : Integer read GetAltButtonWidth write SetAltButtonWidth;
    property AltButtonEnabled : Boolean read GetAltButtonEnabled write SetAltButtonEnabled;
    property Multiline : Boolean read FMultiline write SetMultiline;  { Published }
    property OnAltButtonClick : TNotifyEvent read FOnAltButtonClick write FOnAltButtonClick;
  public
    { Public declarations }

    constructor Create(AOwner : TComponent); override;
    destructor Destroy; override;
    procedure CreateWnd; override;
  published
    property ButtonThinFrame: Boolean read GetButtonThinFrame write
        SetButtonThinFrame default false;
    property AltButtonThinFrame: Boolean read GetAltButtonThinFrame write
        SetAltButtonThinFrame default false;
    property ButtonTransparent: Boolean read GetButtonTransparent write 
        SetButtonTransparent default false;
    property AltButtonTransparent: Boolean read GetAltButtonTransparent write 
        SetAltButtonTransparent default false;
  end; { TCustomElButtonEdit }

  TElButtonEdit = class(TCustomElButtonEdit)

    property AlignBottom;
    property CharCase;
    property TopMargin;
    property LeftMargin;
    property RightMargin;
    property AutoSize;
    property RTLContent;
    property BorderSides;
    property PasswordChar;
    property MaxLength;
    property Transparent;
    property FlatFocusedScrollBars;
    property WantTabs;
    property HandleDialogKeys;
    property HideSelection;
    property TabSpaces;
    property Lines stored false;
    {$ifdef ELPACK_COMPLETE}
    property ImageForm;
    {$endif}
    property WordWrap;
    property ScrollBars;

    property OnMouseEnter;
    property OnMouseLeave;
    property OnResize;
    property OnChange;
    property OnSelectionChange;

    property Text;
    property Multiline;

    property VertScrollBarStyles;
    property HorzScrollBarStyles;
    property UseCustomScrollBars;

    // inherited
    property Flat;
    property ActiveBorderType;
    property InactiveBorderType;
    property LineBorderActiveColor;
    property LineBorderInactiveColor;

    property UseBackground;
    property Alignment;
    property AutoSelect;

    property Background;
    property ButtonCaption;
    property ButtonClickSound;
    property ButtonDownSound;
    property ButtonUpSound;
{$IFDEF USE_SOUND_MAP}
    property ButtonSoundMap;
{$ENDIF}
    property ButtonColor;
    property ButtonDown;
    property ButtonEnabled;
    property ButtonFlat;
    property ButtonGlyph;
    property ButtonHint;
    property ButtonIcon;
    property ButtonNumGlyphs;
    property ButtonPopupPlace;
    property ButtonPullDownMenu;
    property ButtonShortcut;
    property ButtonUseIcon;
    property ButtonVisible;
    property ButtonWidth;
    property OnButtonClick;

    property AltButtonCaption;
    property AltButtonClickSound;
    property AltButtonDownSound;
    property AltButtonUpSound;
{$IFDEF USE_SOUND_MAP}
    property AltButtonSoundMap;
{$ENDIF}
    property AltButtonColor;
    property AltButtonDown;
    property AltButtonEnabled;
    property AltButtonFlat;
    property AltButtonGlyph;
    property AltButtonHint;
    property AltButtonIcon;
    property AltButtonNumGlyphs;
    property AltButtonPopupPlace;
    property AltButtonPosition;
    property AltButtonPullDownMenu;
    property AltButtonShortcut;
    property AltButtonUseIcon;
    property AltButtonVisible;
    property AltButtonWidth;
    property OnAltButtonClick;

    // VCL properties
    property BorderStyle;
    property Ctl3D;
    property ParentCtl3D; 
    property Enabled;
    property TabStop default True;
    property TabOrder;
    property PopupMenu;
    property Color;
    property ParentColor;
    property Align;
    property Font;
    property ParentFont;
    property ParentShowHint;
    property ShowHint;
    property Visible;
    property ReadOnly;

    property OnEnter;
    property OnExit;
    property OnClick;
    property OnDblClick;
    property OnKeyDown;
    property OnKeyPress;
    property OnKeyUp;
    property OnStartDrag;
    property OnDragDrop;
    property OnDragOver;
    {$IFDEF VCL_4_USED}
    property OnEndDock;
    {$ENDIF}
    property OnEndDrag;
    property OnMouseDown;
    property OnMouseMove;
    property OnMouseUp;
{$IFDEF VCL_4_USED}
    property OnStartDock;
{$ENDIF}

{$IFDEF VCL_4_USED}
    property Anchors;
    property Constraints;
    property DockOrientation;
    property Floating;
    property DoubleBuffered;
    property DragKind;
{$ENDIF}
  end;

implementation
end.
