
{====================================================}
{                                                    }
{   EldoS Visual Components                          }
{                                                    }
{   Copyright (c) 1998-2001, EldoS                   }
{                                                    }
{====================================================}
{$include elpack2.inc}
{$ifdef ELPACK_SINGLECOMP}
{$I ElPack.inc}
{$else}
{$ifdef LINUX}
{$I ../ElPack.inc}
{$else}
{$I ..\ElPack.inc}
{$endif}
{$endif}

unit ElStrArray;

interface

uses Classes,
     ElArray;

type

  PElStringItem = ^TElStringItem;
  TElStringItem = record
    FString: PChar;
    FObject: TObject;
  end;

  TElStringArray = class(TStrings)
  private
    FStoreAssociatedData : Boolean;
    FDuplicates : TDuplicates;
    FSorted : Boolean;
    FOnChanging : TNotifyEvent;
    FOnChange : TNotifyEvent;
    FArray : TElArray;
    FUpdateCount : integer;
    procedure OnItemDelete(Sender : TObject; Item : Pointer);
    procedure SetSorted(newValue : Boolean);
    procedure ExchangeItems(Index1, Index2: Integer); 
  protected
    procedure QuickSort(L, R: Integer); virtual;
    procedure Changed; virtual;
    procedure Changing; virtual;
    procedure TriggerChangingEvent; virtual;
    procedure TriggerChangeEvent; virtual;
    procedure InsertItem(Index: Integer; const S: string); virtual;
    function  Get(Index: Integer): string; override;
    function GetCount: Integer; override;
    function  GetObject(Index: Integer): TObject; override;
    procedure Put(Index: Integer; const S: string); override;
    procedure PutObject(Index: Integer; AObject: TObject); override;
    procedure PutStringEntry(Index: Integer; const S : String; AObject: TObject); virtual;
    procedure SetUpdateState(Updating: Boolean); override;
  public
    procedure Clear; override;

    function  Add(const S: string): integer; override;
    function  AddStringEntry(const S: string; AObject: TObject): integer; virtual;

    procedure Delete(Index: Integer); override;
    procedure Insert(Index: Integer; const S: string); override;
    function  IndexOf(const S: string): Integer; override;
    function  IIndexOf(const S: string): Integer;
    function  Find(const S: string; var Index: Integer): Boolean; virtual;
    procedure Sort; virtual;
    procedure Exchange(Index1, Index2: Integer); override;
    procedure SaveToBinaryStream(Stream: TStream); virtual;
    procedure LoadFromBinaryStream(Stream: TStream); virtual;
    //procedure LoadFromStream(Stream: TStream); override;
    //procedure SaveToStream(Stream: TStream); override;

    constructor Create;
    destructor Destroy; override;
    
    property Duplicates : TDuplicates read FDuplicates write FDuplicates;  { Public }
    property Sorted : Boolean read FSorted write SetSorted;  { Public }
  published
    property OnChanging : TNotifyEvent read FOnChanging write FOnChanging;
    property OnChange : TNotifyEvent read FOnChange write FOnChange;
    property StoreAssociatedData : Boolean read FStoreAssociatedData write FStoreAssociatedData;  { Published }
  end;

implementation
end.
