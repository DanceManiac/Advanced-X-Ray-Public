{====================================================}
{                                                    }
{   EldoS Visual Components                          }
{                                                    }
{   Copyright (c) 1998-2001, EldoS                   }
{                                                    }
{====================================================}
{$include elpack2.inc}
{$ifdef ELPACK_SINGLECOMP}
{$I ElPack.inc}
{$else}
{$ifdef LINUX}
{$I ../ElPack.inc}
{$else}
{$I ..\ElPack.inc}
{$endif}
{$endif}

unit ElShellUtils;

interface

uses Windows,
     ActiveX,
     ShellAPI,
     Registry,
     Graphics,
     ShlObj,
     
     CommCtrl,
     Controls,
     {$ifdef VCL_4_USED}
     ImgList,
     {$endif}
     Classes,
     SysUtils,
     Forms,
{$ifdef VCL_6_USED}
Types,
{$endif}

     ElList,
     ElTools,
     ElStrToken,
     ElStrUtils;

type

    TShellFolders =
       (sfoDesktopExpanded,sfoDesktop,sfoPrograms, sfoControlPanel,
        sfoPrinters,sfoPersonal,sfoFavorites,sfoStartup,sfoRecent,
        sfoSendto,sfoRecycleBin,sfoStartMenu,sfoDesktopDirectory,
        sfoMyComputer,
        sfoNetwork,sfoNetworkNeighborhood,sfoFonts,sfoTemplates,
        // sfoCommon is available starting from NT 4
        sfoCommonStartMenu, sfoCommonPrograms, sfoCommonStartup,
        sfoCommonDesktopDirectory, sfoAppData, sfoPrintHood, sfoCustom);

{$ifndef D_3}
{$ifndef D_2}
{$HPPEMIT 'typedef UNALIGNED _ITEMIDLIST * LPITEMIDLIST;'}
{$HPPEMIT 'typedef const UNALIGNED _ITEMIDLIST * LPCITEMIDLIST;'}
{$HPPEMIT 'typedef struct _STRRET'}
{$HPPEMIT '{'}
{$HPPEMIT '    UINT uType; // One of the STRRET_* values'}
{$HPPEMIT '    union'}
{$HPPEMIT '    {'}
{$HPPEMIT '        LPWSTR          pOleStr;        // must be freed by caller of GetDisplayNameOf'}
{$HPPEMIT '        LPSTR           pStr;           // NOT USED'}
{$HPPEMIT '        UINT            uOffset;        // Offset into SHITEMID'}
{$HPPEMIT '        char            cStr[MAX_PATH]; // Buffer to fill in (ANSI)'}
(*$HPPEMIT '    } DUMMYUNIONNAME;'*)
(*$HPPEMIT '} STRRET, *LPSTRRET;'*)

{$HPPEMIT 'typedef struct {}
{$HPPEMIT '    GUID fmtid;'}
{$HPPEMIT '    DWORD pid;'}
(*$HPPEMIT '} SHCOLUMNID, *LPSHCOLUMNID;'*)

{$HPPEMIT 'typedef const SHCOLUMNID* LPCSHCOLUMNID;'}

{$HPPEMIT 'typedef SHCOLUMNID *PShColumnID;'}

{$HPPEMIT 'typedef struct _SHELLDETAILS'}
(*$HPPEMIT '{'*)
{$HPPEMIT '    int     fmt;            // LVCFMT_* value (header only)'}
{$HPPEMIT '    int     cxChar;         // Number of "average" characters (header only)'}
{$HPPEMIT '    STRRET  str;            // String information'}
(*$HPPEMIT '} SHELLDETAILS, *LPSHELLDETAILS;'*)

{$HPPEMIT 'typedef _SHELLDETAILS *PShellDetails;'}

{$HPPEMIT 'typedef _SHELLDETAILS  TShellDetails;'}

{$HPPEMIT 'DECLARE_INTERFACE_(IShellFolder, IUnknown)'}
{$HPPEMIT '{'}
{$HPPEMIT '    // *** IUnknown methods ***'}
{$HPPEMIT '    STDMETHOD(QueryInterface) (THIS_ REFIID riid, void **ppv) PURE;'}
{$HPPEMIT '    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;'}
{$HPPEMIT '    STDMETHOD_(ULONG,Release) (THIS) PURE;'}
{$HPPEMIT ''}
{$HPPEMIT '    // *** IShellFolder methods ***'}
{$HPPEMIT '    STDMETHOD(ParseDisplayName)(THIS_ HWND hwnd, LPBC pbc, LPOLESTR pszDisplayName,'}
{$HPPEMIT '                                ULONG *pchEaten, LPITEMIDLIST *ppidl, ULONG *pdwAttributes) PURE;'}
{$HPPEMIT ''}
{$HPPEMIT '    STDMETHOD(EnumObjects)(THIS_ HWND hwnd, DWORD grfFlags, IEnumIDList **ppenumIDList) PURE;'}
{$HPPEMIT ''}
{$HPPEMIT '    STDMETHOD(BindToObject)(THIS_ LPCITEMIDLIST pidl, LPBC pbc, REFIID riid, void **ppv) PURE;'}
{$HPPEMIT '    STDMETHOD(BindToStorage)(THIS_ LPCITEMIDLIST pidl, LPBC pbc, REFIID riid, void **ppv) PURE;'}
{$HPPEMIT '    STDMETHOD(CompareIDs)(THIS_ LPARAM lParam, LPCITEMIDLIST pidl1, LPCITEMIDLIST pidl2) PURE;'}
{$HPPEMIT '    STDMETHOD(CreateViewObject)(THIS_ HWND hwndOwner, REFIID riid, void **ppv) PURE;'}
{$HPPEMIT '    STDMETHOD(GetAttributesOf)(THIS_ UINT cidl, LPCITEMIDLIST * apidl, ULONG * rgfInOut) PURE;'}
{$HPPEMIT '    STDMETHOD(GetUIObjectOf)(THIS_ HWND hwndOwner, UINT cidl, LPCITEMIDLIST * apidl,'}
{$HPPEMIT '                             REFIID riid, UINT * prgfInOut, void **ppv) PURE;'}
{$HPPEMIT '    STDMETHOD(GetDisplayNameOf)(THIS_ LPCITEMIDLIST pidl, DWORD uFlags, LPSTRRET lpName) PURE;'}
{$HPPEMIT '    STDMETHOD(SetNameOf)(THIS_ HWND hwnd, LPCITEMIDLIST pidl, LPCOLESTR pszName,'}
{$HPPEMIT '                         DWORD uFlags, LPITEMIDLIST *ppidlOut) PURE;'}
(*$HPPEMIT '};'*)

{$HPPEMIT 'typedef IShellFolder * LPSHELLFOLDER;'}

{$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IEnumExtraSearch);'}
{$endif}
{$endif}

{$ifndef D_2}
function  GetParentPIDL(PIDL : PItemIDList): PItemIDList;
function  GetOwnPIDL(PIDL : PItemIDList): PItemIDList;
function  GetItemIDOnly(PIDL : PItemIDList): PItemIDList;
function GetNextItemID(PIDL : PItemIDList) : PItemIDList;
function  GetEmptyPIDL : PItemIDList;
function  PIDLContainsAt(PIDL, SubPIDL : PItemIDList; Pos : integer) : boolean;
function  PIDLStartsWith(PIDL, SubPIDL : PItemIDList) : boolean;

function  AppendPIDL(ParentPIDL, ChildPIDL : PItemIDList): PItemIDList;
function  ClonePIDL(PIDL : PItemIDList): PItemIDList;
function  GetFolderPIDL(FolderID : TShellFolders; CustomName : string): PItemIDList;
function GetFolderPIDL2(FolderID : TShellFolders; CustomName : string): PItemIDList;
function  CalcPIDLSize(PIDL : PItemIDList): Integer;
function  CompareIDLists(IDList1, IDList2 : PItemIDList) : boolean;
procedure FreeIDList(PIDL : PItemIDList);
function  GetPathFromPIDL(PIDL : PItemIDList; var Path : string): Boolean;
function  GETPIDLFromPath(Path : String): PItemIDList;
function  StrRetToPas(str : TStrRet; PIDL : PItemIDList) : string;
procedure StrRetFree(str  : TStrRet);
function  IsDesktopPIDL(PIDL : PItemIDList) : boolean;
{$endif}

function FireURL (const URL: string): Boolean;

{$ifndef D_2}
type TElShellIconCache = class
     private
       FNames: TElList;
       FSmallImages: TImageList;
       FLargeImages: TImageList;
       DefSmallIcon: HICON;
       DefLargeIcon: HICON;
       procedure OnItemDelete(Sender : TObject; Item : Pointer);
     protected
       function LookForIcon(Name : PChar; Index : integer): Integer;
     public
       constructor Create;
       destructor Destroy; override;
       function AddIcon(Icon : IExtractIcon; Flags : Cardinal): Integer;
       function AddFromPIDL(PIDL : PItemIDList; Flags : Cardinal; OpenIcon : boolean): Integer;
       property SmallImages: TImageList read FSmallImages;
       property LargeImages: TImageList read FLargeImages;
     end;

function ShellIconCache : TElShellIconCache;

function GetCompressedColor : Integer;

const
  SID_IShellDetails       = '{000214EC-0000-0000-C000-000000000046}';
  SID_IShellFolder2       = '{93F2F68C-1D1B-11D3-A30E-00C04F79ABD1}';
  SID_IEnumExtraSearch    = '{0e700be1-9db6-11d1-A1CE-00C04FD75D13}';

  IID_IShellDetails:TGUID = '{000214EC-0000-0000-C000-000000000046}';
  IID_IShellFolder2:TGUID = '{93F2F68C-1D1B-11D3-A30E-00C04F79ABD1}';

type

  {$ifdef VCL_5_USED}
  {$EXTERNALSYM PExtraSearch}
  {$endif}
  PExtraSearch = ^TExtraSearch;
  {$ifdef VCL_5_USED}
  {$EXTERNALSYM tagExtraSearch}
  {$endif}
  tagExtraSearch = record
    guidSearch: TGUID;
    wszFriendlyName,
    wszMenuText: array[0..79] of WideChar;
    wszHelpText: array[0..MAX_PATH] of WideChar;
    wszUrl: array[0..2047] of WideChar;
    wszIcon,
    wszGreyIcon,
    wszClrIcon: array[0..MAX_PATH+10] of WideChar;
  end;
  {$ifdef VCL_5_USED}
  {$EXTERNALSYM TExtraSearch}
  {$endif}
  TExtraSearch = tagExtraSearch;

  PShColumnID = ^TShColumnID;
  {$ifdef VCL_5_USED}
  {$EXTERNALSYM SHCOLUMNID}
  {$endif}
  SHCOLUMNID = record
    fmtid: TGUID;
    pid: DWORD;
  end;
  {$ifdef VCL_5_USED}
  {$EXTERNALSYM TShColumnID}
  {$endif}
  TShColumnID = SHCOLUMNID;

  PShellDetails = ^TShellDetails;
  {$ifdef VCL_5_USED}
  {$EXTERNALSYM _SHELLDETAILS}
  {$endif}
  _SHELLDETAILS = record
    fmt,
    cxChar: Integer;
    str: TSTRRET;
  end;
  TShellDetails = _SHELLDETAILS;
  {$ifdef VCL_5_USED}
  {$EXTERNALSYM SHELLDETAILS}
  {$endif}
  SHELLDETAILS = _SHELLDETAILS;

  {$ifdef VCL_5_USED}
  {$EXTERNALSYM IEnumExtraSearch}
  {$endif}
  IEnumExtraSearch = interface(IUnknown)
    [SID_IEnumExtraSearch]
    function Next(celt: ULONG; out rgelt: PExtraSearch;
      out pceltFetched: ULONG): HResult; stdcall;
    function Skip(celt: ULONG): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out ppEnum: IEnumExtraSearch): HResult; stdcall;
  end;

  {$ifdef D_3}
  POleVariant = ^OleVariant;
  {$endif}

  IShellFolder2 = interface(IShellFolder)
    [SID_IShellFolder2]
    function GetDefaultSearchGUID(out pguid: TGUID): HResult; stdcall;
    function EnumSearches(out ppEnum: IEnumExtraSearch): HResult; stdcall;
    function GetDefaultColumn(dwRes: DWORD; var pSort: ULONG;
      var pDisplay: ULONG): HResult; stdcall;
    function GetDefaultColumnState(iColumn: UINT; var pcsFlags: DWORD): HResult; stdcall;
    function GetDetailsEx(pidl: PItemIDList; const pscid: SHCOLUMNID;
      pv: POleVariant): HResult; stdcall;
    function GetDetailsOf(pidl: PItemIDList; iColumn: UINT;
      var psd: TShellDetails): HResult; stdcall;
    function MapNameToSCID(pwszName: LPCWSTR; var pscid: TShColumnID): HResult; stdcall;
  end;

  IShellDetails = interface(IUnknown)
    [SID_IShellDetails]
    function GetDetailsOf(pidl: PItemIDList; iColumn: UINT;
      var pDetails: TShellDetails): HResult; stdcall;
    function ColumnClick(iColumn: UINT): HResult; stdcall;
  end;
{$endif}

implementation
end.
