{====================================================}
{                                                    }
{   EldoS Visual Components                          }
{                                                    }
{   Copyright (c) 1998-2001, EldoS                   }
{   Parts:                                           }
{   copyright (c) 2001 Akzhan Abdulin                }
{                                                    }
{====================================================}

{$include elpack2.inc}
{$ifdef ELPACK_SINGLECOMP}
{$I ElPack.inc}
{$else}
{$ifdef LINUX}
{$I ../ElPack.inc}
{$else}
{$I ..\ElPack.inc}
{$endif}
{$endif}

(*
  Version History:

02/11/2002

  WideExtractQuotedStr function fixed

08/20/2001

  Unicode functions added (c) Akzhan Abdulin

07/26/2001

  Added Unicode support

03/15/2001

  * StrStartsWith fixed (string end tests were bad).

  * IsAlpha, IsAlphaStr and IsIdentStr now tests for '_' char too.

  + IsAlphaOrDigit added.

03/14/2001

  + StrStartsWith and ContainsAt methods.

  * H2D function updated.

*)

unit ElStrUtils;

interface

type

{$ifdef MSWINDOWS}
{$ifdef ELPACK_UNICODE}
  TElFString  = type WideString;
  TElFChar    = type WideChar;
  PElFChar    = type PWideChar;
{$else}
  TElFString  = type string;
  TElFChar    = type Char;
  PElFChar    = type PChar;
{$endif}
{$else}
  TElFString  = type string;
  TElFChar    = type Char;
  PElFChar    = type PChar;
{$endif}

{$ifdef BUILDER_USED}
{$ifdef ELPACK_UNICODE}
{$HPPEMIT 'typedef WideString TElFString;'}
{$else}
{$HPPEMIT 'typedef AnsiString TElFString;'}
{$endif}
{$endif}

{$ifdef VCL_3_USED}
const
  WideCRLF = WideString(#13#10#0);
{$endif}

{$IFDEF WIN32}
const
  oleaut = 'oleaut32.dll';

function SysAllocStringLen(P: PWideChar; Len: Integer): PWideChar; stdcall;
  external oleaut name 'SysAllocStringLen';

procedure SysFreeString(S: PWideChar); stdcall;
  external oleaut name 'SysFreeString';

function SysStringLen(S: PWideChar): Integer; stdcall;
  external oleaut name 'SysStringLen';
{$ENDIF WIN32}

function IntToStrFmt(value: integer): string;
function FloatToStrFmt(value: extended; decims: integer): string;

function IntToStrPad(value: integer; MinSize: integer): string;

function CenterStr(Str : string; len : integer) : string;
{ Centers string in a line }

{$ifndef KYLIX_USED}
function OEMToStr(S: string): string;
function StrToOEM(S: string): string;

function MessageRes(Txt: Integer; Title: PChar; TextType: Word; Sounds: boolean): Integer;
{$endif}

function replace(var Str: string; SourceString, DestString: string): boolean;

function ExtractWord(str: string; n: integer): string;

function FstNonSpace(str: string): integer;

function NextWordBegin(str: string; CurrentPos: integer): integer;

function LastPos(SubStr: string; Strn: string): integer;
{ Returns the beginning of the last substring in a string }

function LineIsEmpty(str: string): boolean;
// Returns true, if line doesn't contain any characters except, probably, spaces and tabs

function CompleteLine(Str: string; FLen: integer; symb: char): string;
{ completes a string with some chars }

function PrefixLine(Str: string; FLen: integer; symb: char): string;

function H2D(S: string): integer;
function H2DDef(const S: string; Def: integer): integer;

function Bin2Int(S: string): integer;

function Bin2IntDef(S: string; Default: integer): integer;

function Data2Str(Buffer: pointer; BufLen: integer): string;
function Str2Data(S: string; var Buffer: pointer; var BufLen: integer): boolean;

function IsDigit(ch: char): boolean;
function IsDigitStr(const S: string): boolean;
function IsAlpha(ch: char): boolean;
function IsAlphaOrDigit(ch: char): boolean;
function IsAlphaStr(const S: string): boolean;
function IsIdentStr(const S: string): boolean;

function ExtractStr(var S: string; SPos, SLen: integer): string;

function FileNameLike(FileName : string; Mask : string) : boolean;

function LeftBreak(S: string; Pos: integer): integer;

function EscapeString(aString: string; UnsafeChars: string; EscapeChar: Char): string;
function UnEscapeString(aString: string; EscapeChar: Char): string;

function StrStartsWith(Source: PChar; Seq: PChar): Boolean;
function ContainsAt(Source: string; Index: Integer; Seq: string): Boolean;

function AnsiSameText(const S1, S2: string): Boolean;

function CurrToPrettyStr(const Value: Currency): string;
function PrettyStrToCurr(const Value: string): Currency;

function CurrSign(const Value: Currency): Integer;

function StringDup(S : String) : PChar;

procedure TStrDelete(var S : TElFString; SPos, SLen : integer);
function  TStrExtractStr(var S: TElFString; SPos, SLen: integer): TElFString;
procedure SetTStr(var S: TElFString; Buffer: PElFChar; Len: Integer);

{$ifndef BROKEN_UNICODE}

const
  doti : boolean = true;

function uni2uppers(s:widestring):widestring;
function uni2lowers(s:widestring):widestring;
function uni2upperf(s:widestring):widestring;
function uni2lowerf(s:widestring):widestring;

function WideMakeString(FLen: Integer; Seq : WideString): WideString;
// creates a new string, filled with specified chars

function WideStringDup(S : WideString) : PWideChar;

function WidePos(const Substr, S : WideString) : integer;
function WideStrScan(const Str: PWideChar; Chr: WideChar): PWideChar; assembler;
function WideStrRScan(const Str: PWideChar; Chr: WideChar): PWideChar; assembler;

function WideQuotedStr(const S: WideString; Quote: WideChar): WideString;
function WideExtractQuotedStr(var Src: PWideChar; Quote: WideChar): WideString;
function WideStrEnd(const Str: PWideChar): PWideChar; assembler;
function WideCompareText(const S1, S2: WideString): Integer;
function WideSameText(const S1, S2: WideString): boolean;

function WideCopy(S : WideString; SPos, SLen : integer) : WideString;

procedure WideDelete(var S : WideString; SPos, SLen : integer);
procedure WideInsert(Text : WideString; var S : WideString; SPos : integer);
function  WideExtractStr(var S: WideString; SPos, SLen: integer): WideString;
procedure SetWideString(var S: WideString; Buffer: PWideChar; Len: Integer);

function WideStrCopy(Target : PWideChar; Source : PWideChar) : PWideChar;
function WideStrPCopy(Target : PWideChar; const Source: WideString): PWideChar;
function WideStrComp(const S1, S2: PWideChar): Integer; assembler;
function WideStrLComp(const Str1, Str2: PWideChar; MaxLen: Cardinal): Integer;
function WideStrLen(const Str: PWideChar): Cardinal;
function WideStrPas(const Source: PWideChar): WideString;

procedure WideMove(const Source; var Dest; Count : Integer);
procedure FillWord(var X; Count: Integer; Value: Word);
procedure FillWideChar(var X; Count: Integer; Value: WideChar);

function WideStrMove(Dest: PWideChar; const Source: PWideChar; Count: Cardinal): PWideChar;

function WideStrECopy(Dest: PWideChar; const Source: PWideChar): PWideChar;
function WideStrLCopy(Dest: PWideChar; const Source: PWideChar; MaxLen: Cardinal): PWideChar;
function WideStrLCat(Dest: PWideChar; const Source: PWideChar; MaxLen: Cardinal): PWideChar;
function WideStrCat(Dest: PWideChar; const Source: PWideChar): PWideChar;

function CompareWideStr(const S1, S2: WideString): Integer;
function SameWideStr(const S1, S2: WideString): Boolean;
function WideLastChar(const S: WideString): PWideChar;

{$ifndef KYLIX_USED}
function WideStrAlloc(Size: Cardinal): PWideChar;
function WideStrBufSize(const Str: PWideChar): Cardinal;
function WideStrNew(const Str: PWideChar): PWideChar;
procedure WideStrDispose(Str: PWideChar);
{$endif}

function WideUpperCase(const S: WideString): WideString;
function WideLowerCase(const S: WideString): WideString;

const
  SPathDelimiters = String('/\');
  SWidePathDelimiters = WideString('/\');

function IsWideDelimiter(const Delimiters, S: WideString; Index: Integer): Boolean;
function IsWidePathDelimiter(const S: WideString; Index: Integer): Boolean;
function IncludeWideTrailingDelimiter(const S: WideString): WideString;
function ExcludeWideTrailingDelimiter(const S: WideString): WideString;

function GetWideCharRangeString(FirstChar, LastChar: WideChar): WideString;
function GetWideStringOf(Char: WideChar; Len: Cardinal): WideString;

type
  TWideReplaceFlags = set of (wrfReplaceAll, wrfIgnoreCase);

function WideStringReplace(const S, OldPattern, NewPattern: WideString;
  Flags: TWideReplaceFlags): WideString;

function WideReplace(var Str: WideString; SourceString, DestString: WideString) : boolean;

function WideStrPos(const Str1, Str2: PWideChar): PWideChar; assembler;
function WideLastPos(SubStr, Strn: WideString): integer;

{$endif}

function GetCharRangeString(FirstChar, LastChar: Char): String;

function MakeString(FLen: Integer; Seq : string) : string;

implementation
end.
