{====================================================}
{                                                    }
{   EldoS Visual Components                          }
{                                                    }
{   Copyright (c) 1998-2001, EldoS                   }
{                                                    }
{====================================================}
{$include elpack2.inc}
{$ifdef ELPACK_SINGLECOMP}
{$I ElPack.inc}
{$else}
{$ifdef LINUX}
{$I ../ElPack.inc}
{$else}
{$I ..\ElPack.inc}
{$endif}
{$endif}

(*

Version History

03/06/2002

  Added unicode hint

12/21/2001

  Now the shortcuts can be used not only to focus the linked controls, but also
  to fire OnClick event

05/27/2001 (c) Akzhan Abdulin

    Fixed Color property design-time storing issue (clWindow not stored)

*)

unit ElURLLabel;

interface

uses
  ElHandPt,
  SysUtils,
  Classes,
  ElVCLUtils,
  {$ifndef CLX_USED}
  Windows,
  Messages,
  Controls,
  Graphics,
  ExtCtrls,
  Forms,
{$ifdef VCL_6_USED}
Types,
{$endif}
{$else}
  Qt,
  Types,
  QControls,
  QGraphics,
  QExtCtrls,
  QForms,
{$endif}

  ElCLabel, ShellAPI, Menus;

type
  TElURLLabel = class(TElCustomLabel)
  private
    FShowURLInHint : Boolean;
    FVisited : Boolean;
    FVisitedColor : TColor;
//    FPopupMenu : TPopupMenu;
    FURI : string;
    FHyperLinkColour, FOldColour : TColor; //mc
    FHyperLinkStyle, FOldStyle : TFontStyles; //mc

    {$ifdef ELPACK_UNICODE}
    FHint: WideString;
    {$endif}
    procedure SetHyperLinkStyle(const Value : TFontStyles); //mc
    procedure SetHyperLinkColour(const Value : TColor); //mc
    procedure SetVisitedColor(newValue : TColor);
    procedure SetVisited(newValue : boolean);
    // vcl message handlers                                             //mc
    procedure CMMouseEnter(var Msg : TMessage); message cm_MouseEnter; //mc
    procedure CMMouseLeave(var Msg : TMessage); message cm_MouseLeave; //mc
    procedure CMDialogChar(var Message: TCMDialogChar); message CM_DIALOGCHAR;
  protected
    { Protected declarations }
    function GetPopupMenu : TPopupMenu; override;
    procedure OnOpen(Sender : TObject);
    procedure OnCopy(Sender : TObject);

    {$ifdef ELPACK_UNICODE}
    procedure SetHint(Value: WideString);

    {$ifndef CLX_USED}
    procedure CMHintShow(var Message: TMessage); message CM_HINTSHOW;
    {$else}
    function HintShow(var HintInfo : THintInfo): Boolean; override;
    {$endif}
    {$else}
    procedure CMHintShow(var Message: TMessage); message CM_HINTSHOW;
    {$endif}

  public
    { Public declarations }
    constructor Create(AOwner : TComponent); override;
    procedure Click; override;
    procedure GotoURL;
    procedure CopyURL;
    //destructor Destroy; override;
  published
    property URL : string read FURI write FURI;
    property VisitedColor : TColor read FVisitedColor write SetVisitedColor;
    property Visited : boolean read FVisited write SetVisited;
    property HyperLinkColor : TColor read FHyperLinkColour write SetHyperLinkColour; //mc
    property HyperLinkStyle : TFontStyles read FHyperLinkStyle write SetHyperLinkStyle; //mc
    property ShowURLInHint : Boolean read FShowURLInHint write FShowURLInHint default True;
    {$ifdef ELPACK_UNICODE}
    property Hint: WideString read FHint write SetHint;
    {$endif}

    property Align;
    property Alignment;
{$IFDEF VCL_4_USED}
    property Anchors;
    property Action;
    property Constraints;
    property DockOrientation;
    property Floating;
    property DragKind;
{$ENDIF}
    property AutoSize;
    property Caption;
    property DragCursor;
    property DragMode;
    property Enabled;
    property FocusControl;
    property Font;
    property ShowHint;
    property ParentShowHint;
    property PopupMenu;
    property ShowAccelChar;
    property Transparent;
    {$ifdef VCL_3_USED}
    property Layout;
    {$endif}
    property Visible;
    property WordWrap;
    property OnClick;
    property OnDblClick;
    property OnDragDrop;
    property OnDragOver;
    property OnEndDrag;
    property OnMouseDown;
    property OnMouseMove;
    property OnMouseUp;
    property OnStartDrag;
  end;

implementation
end.
