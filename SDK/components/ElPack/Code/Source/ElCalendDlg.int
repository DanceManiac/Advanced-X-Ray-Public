{====================================================}
{                                                    }
{   EldoS Visual Components                          }
{                                                    }
{   Copyright (c) 1998-2001, EldoS                   }
{                                                    }
{====================================================}
{$include elpack2.inc}
{$ifdef ELPACK_SINGLECOMP}
{$I ElPack.inc}
{$else}
{$ifdef LINUX}
{$I ../ElPack.inc}
{$else}
{$I ..\ElPack.inc}
{$endif}
{$endif}

unit ElCalendDlg;

{$R *.DFM}

interface

uses
  Windows, Dialogs, SysUtils, Messages, Classes, Graphics, Controls, Forms,
  StdCtrls,
{$ifdef VCL_6_USED}
Types,
{$endif}
  ElCalendarDefs,
{$ifndef CALENDAR_USE_WINDOWS_CALENDAR}
  ElCalendar,
  ElACtrls,
  ElSpin,
  ElCombos,
  ElBtnCtl,
{$else}
  ComCtrls,
  CommCtrl,
{$endif}
  ElPopBtn,
  ElPanel,
  ElList,
  ExtCtrls,
  ElVCLUtils, ElXPThemedControl;

type
  TElCalendarForm = class(TForm)
    Panel2 : TPanel;
    TodayBtn : TElPopupButton;
    OkBtn : TElPopupButton;
    CancelBtn : TElPopupButton;
    procedure FormCreate(Sender : TObject);
    procedure FormShow(Sender : TObject);
    procedure TodayBtnClick(Sender : TObject);
    procedure OkBtnClick(Sender : TObject);
    procedure FormClose(Sender : TObject; var Action : TCloseAction);
    procedure CancelBtnClick(Sender : TObject);
    procedure CalendarChange(Sender : TObject);
    procedure CalendarClick(Sender: TObject);
  private
    FOnDeactivate : TNotifyEvent;
    FOnChange : TNotifyEvent;

    procedure WMQueryEndSession(var Message : TMessage); message WM_QueryEndSession;
    procedure WMActivate(var Msg : TWMActivate); message WM_ACTIVATE;
{$ifdef CALENDAR_USE_WINDOWS_CALENDAR}
    procedure WMNotify(var Msg : TWMNotify); message WM_NOTIFY;
{$endif}
  protected
    procedure TriggerChangeEvent; virtual;
  public
    IsModal : boolean;
{$ifndef CALENDAR_USE_WINDOWS_CALENDAR}
    Calendar: TElCalendar;
    Panel1: TElPanel;
    PrevMonBtn: TElPopupButton;
    PrevYearBtn: TElPopupButton;
    NextMonBtn: TElPopupButton;
    NextYearBtn: TElPopupButton;
    YearSpin: TElSpinEdit;
    MonthCombo: TElAdvancedComboBox;

    procedure PrevYearBtnClick(Sender : TObject);
    procedure PrevMonBtnClick(Sender : TObject);
    procedure MonthComboChange(Sender : TObject);
    procedure NextMonBtnClick(Sender : TObject);
    procedure NextYearBtnClick(Sender : TObject);
    procedure YearSpinChange(Sender : TObject);
{$else}
    Calendar : TMonthCalendar;
{$endif}
    procedure SetNames;
    procedure UpdateLabel;
    destructor Destroy; override;
  published
    property OnChange : TNotifyEvent read FOnChange write FOnChange;
    property OnDeactivate : TNotifyEvent read FOnDeactivate write FOnDeactivate;
  end;

type
  TElCalendarDialog = class(TComponent)
  private
    FDate : TDateTime;
    FShowHolidays : Boolean;
    FShowPeriods : Boolean;
    FStartOfWeek : TDayOfWeek;
    FUseCurrentDate : Boolean;
    FGridLineWidth : Integer;
    FShowWeekNum : Boolean;
    FWeekEndDays : TElWeekEndDays;
    FPeriodStart : TDateTime;
    FPeriodLength : Integer;
    FPeriodInterval : Integer;
    FPeriodColor : TColor;
    FHolidayColor : TColor;
    FWeekEndColor : TColor;
    FUseSystemStartOfWeek: Boolean;
    FHolidays : TElHolidays;

    FOnChange : TNotifyEvent;

    procedure PrepareDialog(FrmDialogComponent : TElCalendarForm);
  protected
    FSelectionBorder: TElFlatBorderType;
    FDayCellBorder: TElFlatBorderType;
    FCurrentDayBorder: TElFlatBorderType;
    FUseLineColors: Boolean;
    FLineColorDark: TColor;
    FLineColorLight: TColor;
  public
    constructor Create(AOwner : TComponent); override;
    destructor Destroy; override;
    function Execute : boolean;
  published
    property Date : TDateTime read FDate write FDate;
    property ShowHolidays : Boolean read FShowHolidays write FShowHolidays;
    property ShowPeriods : Boolean read FShowPeriods write FShowPeriods;
    property StartOfWeek : TDayOfWeek read FStartOfWeek write FStartOfWeek;
    property UseCurrentDate : Boolean read FUseCurrentDate write FUseCurrentDate;
    property GridLineWidth : Integer read FGridLineWidth write FGridLineWidth;
    property ShowWeekNum : Boolean read FShowWeekNum write FShowWeekNum;
    property WeekEndDays : TElWeekEndDays read FWeekEndDays write FWeekEndDays;
    property PeriodStart : TDateTime read FPeriodStart write FPeriodStart;
    property PeriodLength : Integer read FPeriodLength write FPeriodLength;
    property PeriodInterval : Integer read FPeriodInterval write FPeriodInterval;
    property PeriodColor : TColor read FPeriodColor write FPeriodColor;
    property HolidayColor : TColor read FHolidayColor write FHolidayColor;
    property WeekEndColor : TColor read FWeekEndColor write FWeekEndColor;
    property Holidays : TElHolidays read FHolidays;

    property OnChange : TNotifyEvent read FOnChange write FOnChange;
    property UseSystemStartOfWeek: Boolean read FUseSystemStartOfWeek write
        FUseSystemStartOfWeek;
    property SelectionBorder: TElFlatBorderType read FSelectionBorder write
        FSelectionBorder;
    property DayCellBorder: TElFlatBorderType read FDayCellBorder write 
        FDayCellBorder;
    property CurrentDayBorder: TElFlatBorderType read FCurrentDayBorder write 
        FCurrentDayBorder;
    property UseLineColors: Boolean read FUseLineColors write FUseLineColors;
    property LineColorDark: TColor read FLineColorDark write FLineColorDark;
    property LineColorLight: TColor read FLineColorLight write FLineColorLight;
  end;

var
  FormList : TElList;

implementation
end.
