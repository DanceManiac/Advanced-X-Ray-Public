{====================================================}
{                                                    }
{   EldoS Visual Components                          }
{                                                    }
{   Copyright (c) 1998-2001, EldoS                   }
{                                                    }
{====================================================}
{$include elpack2.inc}
{$ifdef ELPACK_SINGLECOMP}
{$I ElPack.inc}
{$else}
{$ifdef LINUX}
{$I ../ElPack.inc}
{$else}
{$I ..\ElPack.inc}
{$endif}
{$endif}

(*

Version History

03/16/2002

  Added ElWideDBEdit and ElWideDBMemo
  ElRadioGroup made unicode

*)

unit ElDBCtrls;

interface

uses
     DB,

     DBCtrls,

     ElPanel,
     ElToolbar,
     ElTmSchema,
     ElPopBtn,
     ElACtrls,
     ElMaskEdit,
     ElCheckCtl,
     ElCheckItemGrp,
     ElStrUtils,
{$ifdef ELPACK_UNICODE}
     ElUnicodeStrings,
{$endif}

     Forms,
     Windows,
     Controls,
     StdCtrls,
     Messages,
     Dialogs,
     Graphics,
     ElPromptDlg,
     ElEdits,
{$ifdef VCL_6_USED}
Types,
{$endif}

     Classes,
     SysUtils;

type

{$ifdef MSWINDOWS}
{$ifdef ELPACK_UNICODE}
  TElFStrings = TElWideStrings;
  TElFStringList = TElWideStringList;
{$else}
  TElFStrings = TStrings;
  TElFStringList = TStringList;
{$endif}
{$else}
  TElFStrings = TStrings;
  TElFStringList = TStringList;
{$endif}

  TElDBEdit = class(TCustomElMaskEdit)
  private
    FDataLink: TFieldDataLink;
    FFocused: Boolean;
    function GetDataField: string;
    function GetDataSource: TDataSource;
    function GetField: TField;
    procedure SetDataField(const Value: string);
    procedure SetDataSource(Value: TDataSource);
    procedure ResetMaxLength;
    procedure DataChange(Sender: TObject);
    procedure ActiveChange(Sender: TObject);
    procedure EditingChange(Sender: TObject);
    procedure UpdateData(Sender: TObject);
    procedure CMEnter(var Message: TCMEnter); message CM_ENTER;
    procedure CMExit(var Message: TCMExit); message CM_EXIT;
    procedure CMGetDataLink(var Message: TMessage); message CM_GETDATALINK;
    procedure SetFocused(Value: Boolean);
    function GetReadOnly: Boolean;
    procedure SetReadOnly(Value: Boolean);
    procedure WMCut(var Message: TMessage); message WM_CUT;
    procedure WMPaste(var Message: TMessage); message WM_PASTE;
    procedure WMUndo(var Message: TMessage); message WM_UNDO;
  protected
    procedure Change; override;
    function EditCanModify: Boolean; override;
    procedure KeyDown(var Key: Word; Shift: TShiftState); override;
    procedure KeyPress(var Key: Char); override;
    procedure Loaded; override;
    procedure Notification(AComponent: TComponent; Operation: TOperation); override;
    procedure Reset; override;
  public
    {$ifdef VCL_4_USED}
    function ExecuteAction(Action: TBasicAction): Boolean; override;
    function UpdateAction(Action: TBasicAction): Boolean; override;
    function UseRightToLeftAlignment: Boolean; override;
    {$endif}
    constructor Create(AOwner : TComponent); override;
    destructor Destroy; override;
    property Field: TField read GetField;
  published
    property DataField: string read GetDataField write SetDataField;
    property DataSource: TDataSource read GetDataSource write SetDataSource;
    property ReadOnly: Boolean read GetReadOnly write SetReadOnly default False;

    property ActiveBorderType;
    property Alignment;
    property Background;
    property Flat;
    property InactiveBorderType;
    property OnMouseEnter;
    property OnMouseLeave;
    property Transparent;
    property UseBackground;
    property BorderSides;
    property HandleDialogKeys;
    property ImageForm;
    property UseXPThemes;
    property LineBorderActiveColor;
    property LineBorderInactiveColor;

    property Align;
    {$IFDEF VCL_4_USED}
    property Anchors;
    {$ENDIF}
    property AutoSelect;
    property AutoSize;
    {$IFDEF VCL_4_USED}
    {$ifdef MSWINDOWS}
    property BiDiMode;
    {$endif}
    {$ENDIF}
    property BorderStyle;
    property CharCase;
    property Color;
    {$IFDEF VCL_4_USED}
    property Constraints;
    {$ENDIF}
    property Cursor;
    {$ifdef MSWINDOWS}
    property DragCursor;
    {$endif}
    {$IFDEF VCL_4_USED}
    {$ifdef MSWINDOWS}
    property DragKind;
    {$endif}
    {$ENDIF}
    property DragMode;
    property Enabled;
    property Font;
    property HideSelection;
    {$ifdef MSWINDOWS}
    property ImeMode;
    property ImeName;
    {$endif}
    property MaxLength;
    {$ifdef MSWINDOWS}
    property OEMConvert;
    {$endif}
    {$IFDEF VCL_4_USED}
    {$ifdef MSWINDOWS}
    property ParentBiDiMode;
    {$endif}
    {$ENDIF}
    property ParentColor;
    property ParentFont;
    property ParentShowHint;
    {$ifdef MSWINDOWS}
    property PasswordChar;
    {$endif}
    property PopupMenu;
    property ShowHint;
    property TabOrder;

    property Visible;
    property OnChange;
    property OnClick;
    {$IFDEF VCL_5_USED}
    property OnContextPopup;
    {$ENDIF}
    property OnDblClick;
    property OnDragDrop;
    property OnDragOver;
    {$IFDEF VCL_4_USED}
    {$ifdef MSWINDOWS}
    property OnEndDock;
    {$endif}
    {$ENDIF}
    property OnEndDrag;
    property OnEnter;
    property OnExit;
    property OnKeyDown;
    property OnKeyPress;
    property OnKeyUp;
    property OnMouseDown;
    property OnMouseMove;
    property OnMouseUp;
    {$IFDEF VCL_4_USED}
    {$ifdef MSWINDOWS}
    property OnStartDock;
    {$endif}
    {$ENDIF}
    property OnStartDrag;
  end;

  TElDBMemo = class(TElAdvancedMemo)
  private
    FAutoDisplay: Boolean;
    FDataLink: TFieldDataLink;
    FFocused: Boolean;
    FMemoLoaded: Boolean;
    function GetDataField: string;
    function GetDataSource: TDataSource;
    function GetField: TField;
    procedure SetDataField(const Value: string);
    procedure SetDataSource(Value: TDataSource);
    procedure SetAutoDisplay(Value: Boolean);
    procedure CMEnter(var Message: TCMEnter); message CM_ENTER;
    procedure CMExit(var Message: TCMExit); message CM_EXIT;
    procedure CMGetDataLink(var Message: TMessage); message CM_GETDATALINK;
    procedure DataChange(Sender: TObject);
    procedure EditingChange(Sender: TObject);
    function GetReadOnly: Boolean;
    procedure SetFocused(Value: Boolean);
    procedure SetReadOnly(Value: Boolean);
    procedure UpdateData(Sender: TObject);
    procedure WMCut(var Message: TMessage); message WM_CUT;
    procedure WMLButtonDblClk(var Message: TWMLButtonDblClk); message 
        WM_LBUTTONDBLCLK;
    procedure WMPaste(var Message: TMessage); message WM_PASTE;
    procedure WMUndo(var Message: TMessage); message WM_UNDO;
  protected
    procedure Change; override;
    procedure KeyDown(var Key: Word; Shift: TShiftState); override;
    procedure KeyPress(var Key: Char); override;
    procedure Loaded; override;
    procedure Notification(AComponent: TComponent; Operation: TOperation); override;
  public
    procedure LoadMemo; virtual;
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    {$ifdef VCL_4_USED}
    function ExecuteAction(Action: TBasicAction): Boolean; override;
    function UpdateAction(Action: TBasicAction): Boolean; override;
    function UseRightToLeftAlignment: Boolean; override;
    {$endif}
    property Field: TField read GetField;
  published
    property DataField: string read GetDataField write SetDataField;
    property DataSource: TDataSource read GetDataSource write SetDataSource;
    property AutoDisplay: Boolean read FAutoDisplay write SetAutoDisplay default
        True;
    property ReadOnly: Boolean read GetReadOnly write SetReadOnly default False;
  end;

  TElDBCheckBox = class(TElCheckBox)
  private
    FDataLink: TFieldDataLink;
    FValueCheck: TElFString;
    FValueUncheck: TElFString;
    function GetDataField: string;
    function GetDataSource: TDataSource;
    function GetField: TField;
    function GetReadOnly: Boolean;
    procedure SetDataField(const Value: string);
    procedure SetDataSource(Value: TDataSource);
    procedure SetReadOnly(Value: Boolean);
    procedure CMExit(var Message: TCMExit); message CM_EXIT;
    procedure CMGetDataLink(var Message: TMessage); message CM_GETDATALINK;
    procedure DataChange(Sender: TObject);
    function GetFieldState: TCheckBoxState;
    procedure SetValueCheck(const Value: TElFString);
    procedure SetValueUncheck(const Value: TElFString);
    procedure UpdateData(Sender: TObject);
    function ValueMatch(const ValueList, Value: string): Boolean;
  protected
    procedure KeyPress(var Key: Char); override;
    procedure Notification(AComponent: TComponent; Operation: TOperation); override;
    procedure Toggle; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    {$ifdef VCL_4_USED}
    function ExecuteAction(Action: TBasicAction): Boolean; override;
    function UpdateAction(Action: TBasicAction): Boolean; override;
    function UseRightToLeftAlignment: Boolean; override;
    {$endif}
    procedure Click; override;
    property Field: TField read GetField;
  published
    property DataField: string read GetDataField write SetDataField;
    property DataSource: TDataSource read GetDataSource write SetDataSource;
    property ReadOnly: Boolean read GetReadOnly write SetReadOnly default False;
    property ValueChecked: TElFString read FValueCheck write SetValueCheck;
    property ValueUnchecked: TElFString read FValueUncheck write SetValueUncheck;
  end;

  TElDBRadioGroup = class(TCustomElRadioGroup)
  private
    FDataLink: TFieldDataLink;
    FOnChange: TNotifyEvent;
    FValue: TElFString;
    FValues: TElFStrings;
    FInSetValue: Boolean;
    procedure CMExit(var Message: TCMExit); message CM_EXIT;
    procedure DataChange(Sender: TObject);
    function GetButtonValue(Index: Integer): TElFString;
    function GetDataField: string;
    function GetDataSource: TDataSource;
    function GetField: TField;
    function GetReadOnly: Boolean;
    procedure SetDataField(const Value: string);
    procedure SetDataSource(Value: TDataSource);
    procedure SetItems(Value: TElFStrings);
    procedure SetReadOnly(Value: Boolean);
    procedure SetValue(Value: TElFString);
    procedure SetValues(Value: TElFStrings);
    procedure UpdateData(Sender: TObject);
  protected
    function CanModify: Boolean; override;
    procedure Change; dynamic;
    procedure Click; override;
    procedure KeyPress(var Key: Char); override;
    procedure Notification(AComponent: TComponent; Operation: TOperation); override;
    property DataLink: TFieldDataLink read FDataLink;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    {$ifdef VCL_4_USED}
    function ExecuteAction(Action: TBasicAction): Boolean; override;
    function UpdateAction(Action: TBasicAction): Boolean; override;
    function UseRightToLeftAlignment: Boolean; override;
    {$endif}
    property Field: TField read GetField;
    property Value: TElFString read FValue write SetValue;
  published
    property DataField: string read GetDataField write SetDataField;
    property DataSource: TDataSource read GetDataSource write SetDataSource;
    property OnChange: TNotifyEvent read FOnChange write FOnChange;
    property Values: TElFStrings read FValues write SetValues;
    property Items write SetItems;
    property ReadOnly: Boolean read GetReadOnly write SetReadOnly default False;

    property Align;
    property Alignment;
{$IFDEF VCL_4_USED}
    property Anchors;
    {$ifndef CLX_USED}
    property BiDiMode;
    property Constraints;
    property DragKind;
    property ParentBiDiMode;
    property OnEndDock;
    property OnStartDock;
    {$endif}
{$ENDIF}
    property BorderSides;
    property Caption;
    property CaptionColor;
    property CheckBoxChecked;
    property Color;
    property Columns;
    {$ifndef CLX_USED}
    property Ctl3D;
    property DragCursor;
    {$endif}
    property DragMode;
    property Enabled;
    property Flat;
    property FlatAlways;
    property Font;
    property Hints;
    {$ifndef CLX_USED}
    property ImageForm;
    {$endif}
  {$ifdef HAS_HTML_RENDER}
    property IsHTML;
  {$endif}
    {$ifndef CLX_USED}
    property MoneyFlat;
    property MoneyFlatInactiveColor;
    property MoneyFlatActiveColor;
    property MoneyFlatDownColor;
    {$endif}
    property ParentColor;
    {$ifndef CLX_USED}
    property ParentCtl3D;
    {$endif}
    property ParentFont;
    property ParentShowHint;
    property PopupMenu;
    property ShowCheckBox;
    property ShowFocus;
    property ShowHint;
    property TabOrder;
    property TabStop;
    property Transparent;
    property Visible;
    property UseXPThemes;

    {$ifdef USE_SOUND_MAP}
    property CheckSound;
    property SoundMap;
    {$endif}
    property Glyph;
    property Images;
    property UseCustomGlyphs;
    property UseImageList;

    property OnClick;
    property OnDragDrop;
    property OnDragOver;
    property OnEndDrag;
    property OnEnter;
    property OnExit;
    property OnStartDrag;
{$IFDEF VCL_5_USED}
    property OnContextPopup;
{$ENDIF}
  end;

  TElNavButtonRole = (nbrFirst, nbrPrior, nbrNext, nbrLast,
                      nbrInsert, nbrDelete, nbrEdit, nbrPost,
                      nbrCancel, nbrRefresh,
                      // nbrSetBookmark, nbrGotoBookmark, nbrDeleteBookmark,

                      nbrSearch, nbrSetFilter, nbrRemoveFilter,
                      nbrClear, nbrOpen, nbrClose,
                      nbrFindFirst, nbrFindPrior, nbrFindNext, nbrFindLast, nbrCustom);


  TElDBNavButton = class(TCustomElToolButton)
  protected
    FRole: TElNavButtonRole;
    procedure SetRole(Value: TElNavButtonRole);
    function GetArrowThemedClassName: WideString; override;
    function GetArrowThemePartID: Integer; override;
    function GetArrowThemeStateID: Integer; override;
    function GetThemedClassName: WideString; override;
    function GetThemePartID: Integer; override;
    function GetThemeStateID: Integer; override;
    procedure SetUseImageList(newValue : Boolean); override;
    procedure Loaded; override;
    procedure SetImageList(newValue : TImageList); override;
    procedure SetImageIndex(newValue : Integer); override;
  public
    procedure AClick(Arrow : boolean); override;
    constructor Create(AOwner : TComponent); override;
  published
    property Role: TElNavButtonRole read FRole write SetRole default nbrCustom;

    property Wrap;
    property LargeGlyph;
    property NumLargeGlyphs;
    property Glyph;
    property NumGlyphs;
    property OwnerSettings;

    property PullDownMenu;
    property PopupPlace;
    property DisableAutoPopup;
    property Flat;
    property Layout;
    property Margin;
    property Spacing;
    property UseArrow;
    property ShadowFollowsColor;
    property ShowGlyph;
    property ShowText;
    property OnArrowClick;
    property Icon;
    property TextDrawType;
    property ThinFrame;
    property DownSound;
    property UpSound;
    property ClickSound;
    property ArrowClickSound;
{$IFDEF USE_SOUND_MAP}
    property SoundMap;
{$ENDIF}
    property UseIcon;
    property ImageIndex;
    property UseImageList;
    property OldStyled;
    property Background;
    property DownBackground;
    property BackgroundDrawBorder;
    {$ifdef MSWINDOWS}
    property UseXPThemes;
    {$endif}

    // VCL properties
    property Caption;
    property Enabled;
    property PopupMenu;
    property Color;
    property ParentColor;
    property Align;
    property Font;
    property ParentFont;
    property ParentShowHint;
    property ShowHint;
    property Visible;

    property OnClick;
    property OnDblClick;
    property OnMouseDown;
    property OnMouseMove;
    property OnMouseUp;
    property OnDragDrop;
    property OnDragOver;
    property OnEndDrag;
    property OnStartDrag;

{$IFDEF VCL_4_USED}
    property Action;
    property Constraints;
{$ENDIF}
{$IFDEF VCL_5_USED}
    property OnContextPopup;
{$ENDIF}
  end;

  {$warnings off}
  TElNavDataLink = class;
  TElDBNavigator = class(TElToolbar)
  private
    FDeleteRecordQuestion : string;
    FDataLink : TElNavDataLink;
    function GetDataSource: TDataSource;
    procedure SetDataSource(Value: TDataSource);
    procedure CMEnabledChanged(var Message: TMessage); message CM_ENABLEDCHANGED;
  protected
    FConfirmDelete: Boolean;
    FOnSearch: TNotifyEvent;
    FIsToolbar: Boolean;
    FIntImageList: TImageList;
    procedure ActiveChanged;
    procedure DataChanged;
    procedure EditingChanged;
    procedure DoSearch; virtual;
    function GetButtonClass: TElToolButtonClass; override;
    procedure SetIsToolbar(Value: Boolean);
    procedure Notification(AComponent: TComponent; Operation: TOperation); override;
    procedure Loaded; override;
    procedure CMControlChange(var Msg : TCMControlChange); message CM_CONTROLCHANGE;
  public
    constructor Create(AOwner : TComponent); override;
    function FindButtonByRole(Role : TElNavButtonRole): TElDBNavButton;
    function AddButton(Role : TElNavButtonRole): TElDBNavButton;
    destructor Destroy; override;
  published
    property DeleteRecordQuestion : string read FDeleteRecordQuestion write FDeleteRecordQuestion;
    property DataSource: TDataSource read GetDataSource write SetDataSource;
    property ConfirmDelete: Boolean read FConfirmDelete write FConfirmDelete
        default true;
    property OnSearch: TNotifyEvent read FOnSearch write FOnSearch;
    property IsToolbar: Boolean read FIsToolbar write SetIsToolbar default true;
    property BtnOffsHorz default 3;
    property BtnOffsVert default 3;
    {$ifdef VCL_4_USED}
    property BevelOuter default bvNone;
    {$endif}
  end;
  {$warnings on}

  TElNavDataLink = class(TDataLink)
  private
    FNavigator: TElDBNavigator;
  protected
    procedure EditingChanged; override;
    procedure DataSetChanged; override;
    procedure ActiveChanged; override;
  public
    constructor Create(ANav: TElDBNavigator);
    destructor Destroy; override;
  end;

  {$ifdef ELPACK_UNICODE}
  TElWideDBEdit = class(TCustomElEdit)
  private
    FDataLink: TFieldDataLink;
    FFocused: Boolean;
    function GetDataField: string;
    function GetDataSource: TDataSource;
    function GetField: TField;
    procedure SetDataField(const Value: string);
    procedure SetDataSource(Value: TDataSource);
    procedure ResetMaxLength;
    procedure DataChange(Sender: TObject);
    procedure ActiveChange(Sender: TObject);
    procedure EditingChange(Sender: TObject);
    procedure UpdateData(Sender: TObject);
    procedure CMEnter(var Message: TCMEnter); message CM_ENTER;
    procedure CMExit(var Message: TCMExit); message CM_EXIT;
    procedure CMGetDataLink(var Message: TMessage); message CM_GETDATALINK;
    procedure SetFocused(Value: Boolean);
    function GetReadOnly: Boolean;
    procedure SetReadOnly(Value: Boolean);
    procedure WMCut(var Message: TMessage); message WM_CUT;
    procedure WMPaste(var Message: TMessage); message WM_PASTE;
    procedure WMUndo(var Message: TMessage); message WM_UNDO;
  protected
    procedure Change; override;
    function EditCanModify: Boolean;
    procedure KeyDown(var Key: Word; Shift: TShiftState); override;
    procedure KeyPress(var Key: Char); override;
    procedure Loaded; override;
    procedure Notification(AComponent: TComponent; Operation: TOperation); override;
    procedure Reset;
  public
    {$ifdef VCL_4_USED}
    function ExecuteAction(Action: TBasicAction): Boolean; override;
    function UpdateAction(Action: TBasicAction): Boolean; override;
    function UseRightToLeftAlignment: Boolean; override;
    {$endif}
    constructor Create(AOwner : TComponent); override;
    destructor Destroy; override;
    property Field: TField read GetField;
  published
    property DataField: string read GetDataField write SetDataField;
    property DataSource: TDataSource read GetDataSource write SetDataSource;
    property ReadOnly: Boolean read GetReadOnly write SetReadOnly default False;


    property AutoSize;
    property Alignment;
    property Background;
    property BorderSides;
    property CharCase;
    property UseBackground;
    property RTLContent;
    property PasswordChar;
    property MaxLength;
    property Transparent;
    property FlatFocusedScrollBars;
    property WantTabs;
    property LeftMargin;
    property RightMargin;
    property TopMargin; 
    property BorderStyle;
    property AutoSelect;
    property HandleDialogKeys;
    property HideSelection;
    property TabSpaces;
    property Lines stored false;

    property Text;

    {$ifdef ELPACK_COMPLETE}
    property ImageForm;
    {$endif}
    property ActiveBorderType;
    property Flat;
    property InactiveBorderType;
    property LineBorderActiveColor;
    property LineBorderInactiveColor;

    property WordWrap;
    property ScrollBars;

    property VertScrollBarStyles;
    property HorzScrollBarStyles;
    property UseCustomScrollBars;

    property OnMouseEnter;
    property OnMouseLeave;
    property OnResize;
    property OnChange;
    property OnSelectionChange;

    property Align;

    {$IFDEF VCL_4_USED}
    property Anchors;
    {$ENDIF}
    property Color;
    {$IFDEF VCL_4_USED}
    property Constraints;
    {$ENDIF}
    property Ctl3D;
    property DragCursor;
    {$IFDEF VCL_4_USED}
    property DragKind;
    {$ENDIF}
    property DragMode;
    property Enabled;
    property Font;
    property ParentColor;
    property ParentCtl3D;
    property ParentFont;
    property ParentShowHint;
    property PopupMenu;
    property ShowHint;
    property TabOrder;
    property TabStop;
    property Visible;
    property UseXPThemes;
    {$IFDEF VCL_4_USED}
    {$ifdef MSWINDOWS}
    property BiDiMode;
    {$endif}
    {$ENDIF}
    property Cursor;
    {$ifdef MSWINDOWS}
    property ImeMode;
    property ImeName;
    {$endif}

    property OnClick;
    property OnDblClick;
    property OnDragDrop;
    property OnDragOver;
    property OnEndDrag;
    property OnEnter;
    property OnExit;
    property OnKeyDown;
    property OnKeyPress;
    property OnKeyUp;
    property OnMouseDown;
    property OnMouseMove;
    property OnMouseUp;
    property OnStartDrag;

  {$IFDEF VCL_4_USED}
  {$ifndef CLX_USED}
    property OnStartDock;
    property OnEndDock;
  {$endif}
  {$ENDIF}
  {$IFDEF VCL_5_USED}
    property OnContextPopup;
  {$ENDIF}
  end;

  TElWideDBMemo = class(TCustomElEdit)
  private
    FAutoDisplay: Boolean;
    FDataLink: TFieldDataLink;
    FFocused: Boolean;
    FMemoLoaded: Boolean;
    function GetDataField: string;
    function GetDataSource: TDataSource;
    function GetField: TField;
    procedure SetDataField(const Value: string);
    procedure SetDataSource(Value: TDataSource);
    procedure SetAutoDisplay(Value: Boolean);
    procedure CMEnter(var Message: TCMEnter); message CM_ENTER;
    procedure CMExit(var Message: TCMExit); message CM_EXIT;
    procedure CMGetDataLink(var Message: TMessage); message CM_GETDATALINK;
    procedure DataChange(Sender: TObject);
    procedure EditingChange(Sender: TObject);
    function GetReadOnly: Boolean;
    procedure SetFocused(Value: Boolean);
    procedure SetReadOnly(Value: Boolean);
    procedure UpdateData(Sender: TObject);
    procedure WMCut(var Message: TMessage); message WM_CUT;
    procedure WMLButtonDblClk(var Message: TWMLButtonDblClk); message 
        WM_LBUTTONDBLCLK;
    procedure WMPaste(var Message: TMessage); message WM_PASTE;
    procedure WMUndo(var Message: TMessage); message WM_UNDO;
  protected
    procedure Change; override;
    procedure KeyDown(var Key: Word; Shift: TShiftState); override;
    procedure KeyPress(var Key: Char); override;
    procedure Loaded; override;
    procedure Notification(AComponent: TComponent; Operation: TOperation); override;
  public
    procedure LoadMemo; virtual;
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    {$ifdef VCL_4_USED}
    function ExecuteAction(Action: TBasicAction): Boolean; override;
    function UpdateAction(Action: TBasicAction): Boolean; override;
    function UseRightToLeftAlignment: Boolean; override;
    {$endif}
    property Field: TField read GetField;
  published
    property DataField: string read GetDataField write SetDataField;
    property DataSource: TDataSource read GetDataSource write SetDataSource;
    property AutoDisplay: Boolean read FAutoDisplay write SetAutoDisplay default
        True;
    property ReadOnly: Boolean read GetReadOnly write SetReadOnly default False;


    property AutoSize;
    property Alignment;
    property Background;
    property BorderSides;
    property CharCase;
    property UseBackground;
    property RTLContent;
    property PasswordChar;
    property MaxLength;
    property Transparent;
    property FlatFocusedScrollBars;
    property WantTabs;
    property LeftMargin;
    property RightMargin;
    property TopMargin; 
    property BorderStyle;
    property AutoSelect;
    property HandleDialogKeys;
    property HideSelection;
    property TabSpaces;
    property Lines stored false;

    property Text;

    {$ifdef ELPACK_COMPLETE}
    property ImageForm;
    {$endif}
    property ActiveBorderType;
    property Flat;
    property InactiveBorderType;
    property LineBorderActiveColor;
    property LineBorderInactiveColor;

    property WordWrap;
    property ScrollBars;

    property VertScrollBarStyles;
    property HorzScrollBarStyles;
    property UseCustomScrollBars;

    property OnMouseEnter;
    property OnMouseLeave;
    property OnResize;
    property OnChange;
    property OnSelectionChange;

    property Align;

    {$IFDEF VCL_4_USED}
    property Anchors;
    {$ENDIF}
    property Color;
    {$IFDEF VCL_4_USED}
    property Constraints;
    {$ENDIF}
    property Ctl3D;
    property DragCursor;
    {$IFDEF VCL_4_USED}
    property DragKind;
    {$ENDIF}
    property DragMode;
    property Enabled;
    property Font;
    property ParentColor;
    property ParentCtl3D;
    property ParentFont;
    property ParentShowHint;
    property PopupMenu;
    property ShowHint;
    property TabOrder;
    property TabStop;
    property Visible;
    property UseXPThemes;
    {$IFDEF VCL_4_USED}
    {$ifdef MSWINDOWS}
    property BiDiMode;
    {$endif}
    {$ENDIF}
    property Cursor;
    {$ifdef MSWINDOWS}
    property ImeMode;
    property ImeName;
    {$endif}

    property OnClick;
    property OnDblClick;
    property OnDragDrop;
    property OnDragOver;
    property OnEndDrag;
    property OnEnter;
    property OnExit;
    property OnKeyDown;
    property OnKeyPress;
    property OnKeyUp;
    property OnMouseDown;
    property OnMouseMove;
    property OnMouseUp;
    property OnStartDrag;

  {$IFDEF VCL_4_USED}
  {$ifndef CLX_USED}
    property OnStartDock;
    property OnEndDock;
  {$endif}
  {$ENDIF}
  {$IFDEF VCL_5_USED}
    property OnContextPopup;
  {$ENDIF}
  end;
  {$endif}

implementation
end.
