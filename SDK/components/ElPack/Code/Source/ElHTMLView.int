{====================================================}
{                                                    }
{   EldoS Visual Components                          }
{                                                    }
{   Copyright (c) 1998-2001, EldoS                   }
{                                                    }
{====================================================}
{$include elpack2.inc}
{$ifdef ELPACK_SINGLECOMP}
{$I ElPack.inc}
{$else}
{$ifdef LINUX}
{$I ../ElPack.inc}
{$else}
{$I ..\ElPack.inc}
{$endif}
{$endif}

(*

Version History

03/06/2002

  Added unicode hint
  Added margins between control sides and text rectangle
  Improved vertical scrolling

10/16/2001

  When the tree is disabled, scrollbars (only when UseCustomScrollbars is true)
  are shown as disabled in Windows XP with styles enabled.
  Borders were drawn in XP style even when BorderStyle = bsNone. Fixed.
  
09/26/2001

  Fixed LinkPopupMenu that didn't work
  Fixed calculation of non-client area for control_size < size_of_scrollbar
  with no real scrollbar cases (for exmaple, when control height is 15 and no
  scrollbars are visible, non-client area was calculated as if there was a
  scrollbar)

09/10/2001

  Fixed updating after control is resized and WordWrap is set to TRUE.

08/20/2001

  Caption property made published, void property Text removed from design-time
  property list

07/12/2001

  BorderSides property added.

11/29/2000

  Fixed the problem with horizontal scrollbar, when WordWrap is on. 

11/24/2000

  Transparent property was not working. Fixed.

*)

unit ElHTMLView;  { TElHTMLView component. }

interface

uses
  Windows,
  SysUtils,
  Messages,
  Classes,
  Graphics,
  Controls,
  Forms,
  Menus,
  StdCtrls,
  ExtCtrls,
  HTMLRender,
{$ifdef VCL_6_USED}
Types,
{$endif}
  ElScrollBar,
  ElImgFrm,
  ElXPThemedControl,
  ElUxTheme,
  ElTmSchema,
  ElStrUtils,
  ElVCLUtils;

type

  { event handlers support }
  TElFString = ElStrUtils.TElFString;
{$ifdef VCL_4_USED}
  {$NODEFINE TElFString}
{$endif}

  TElHTMLView = class(TElXPThemedControl)
  private
    FFlatFocusedScrollBars : Boolean;
    FUseCustomScrollBars : Boolean;
    FLinkPopupMenu : TPopupMenu;
    FCursor : TCursor;
    FHighlightColor : TColor;
    FHighlightBkColor : TColor;
    FOnLinkClick : TElHTMLLinkClickEvent;
    FOnImageNeeded : TElHTMLImageNeededEvent;
    FLinkColor : TColor;
    FLinkStyle : TFontStyles;
    FImgForm : TElImageForm;
    FActiveBorderType : TElFlatBorderType;
    FInactiveBorderType : TElFlatBorderType;
    FFlat : Boolean;
    FWordWrap : Boolean;
    FMouseOver: Boolean;
    FBorderStyle: TBorderStyle;
    FRender : TElHTMLRender;
    TmpDC   : HDC;
    FGradientSteps : Integer;
    FGradientStartColor : TColor;
    FGradientEndColor : TColor;
    FTmpBmp : TBitmap;
    FTransparent : Boolean;
    FBackground : TBitmap;
    FBackgroundType : TElBkGndType;
    FImgFormChLink  : TImgFormChangeLink;

    FDummyString : string;
    FViewPos  : TPoint;
    FTextRect : TRect;
    FScrollStep : integer;
    FVertScrollBar,
    FHorzScrollBar  : TElScrollBar;
    FVScrollVisible,
    FHScrollVisible : boolean;
    FVertScrollBarStyles : TElScrollBarStyles;
    FHorzScrollBarStyles : TElScrollBarStyles;
    FBorderSides: TElBorderSides;
    {$ifdef ELPACK_UNICODE}
    FHint: WideString;
    {$endif}

    procedure WMSysColorChange(var Msg: TMessage); message WM_SYSCOLORCHANGE;
    procedure CMFontChanged(var Msg : TMessage); message CM_FONTCHANGED;
    procedure CMSysColorChange(var Msg : TMessage); message CM_SYSCOLORCHANGE;
    procedure SBChanged(Sender: TObject);
    procedure CMMouseEnter(var Msg : TMessage); message CM_MOUSEENTER;
    procedure CMMouseLeave(var Msg : TMessage); message CM_MOUSELEAVE;
    procedure SetBorderStyle(Value: TBorderStyle);
    procedure SetImageForm(newValue : TElImageForm);
    procedure SetTransparent(newValue : boolean);
    procedure SetBackground(newValue : TBitmap);
    procedure SetBackgroundType(newValue : TElBkGndType);
    procedure ImageChange(Sender : TObject);
    procedure ImageFormChange(Sender : TObject);
    procedure SetGradientStartColor(newValue : TColor);
    procedure SetGradientEndColor(newValue : TColor);
    procedure SetGradientSteps(newValue : Integer);
    procedure RedoTmpBmp;
    procedure DrawFlatBorder(HorzTracking, VertTracking : boolean);
    procedure DrawFlatBorderEx(DC : HDC; HorzTracking, VertTracking : boolean);

    procedure OnHScroll(Sender: TObject; ScrollCode: TElScrollCode;
                        var ScrollPos: Integer; var DoChange : boolean);
    procedure OnVScroll(Sender: TObject; ScrollCode: TElScrollCode;
                        var ScrollPos: Integer; var DoChange : boolean);
    procedure WMSetFocus(var Msg : TWMSetFocus); message WM_SETFOCUS;
    procedure WMKillFocus(var Msg : TWMKillFocus); message WM_KILLFOCUS;
    procedure CMTextChanged(var Msg : TMessage); message CM_TEXTCHANGED;
    procedure WMGetDlgCode(var Msg : TWMGetDlgCode); message WM_GETDLGCODE;
    procedure WMPaint(var Msg : TWMPaint); message WM_PAINT;
    procedure WMEraseBkgnd(var Msg : TWMEraseBkgnd); message WM_ERASEBKGND;
    procedure WMMouseWheel(var Msg: TWMMouseWheel); message WM_MOUSEWHEEL;
    procedure SetLinkPopupMenu(newValue : TPopupMenu);
    procedure WMNCPaint(var Msg : TMessage); message WM_NCPAINT;
    procedure WMNCCalcSize(var Message : TWMNcCalcSize); message WM_NCCALCSIZE;
    procedure WMNCHitTest(var Msg : TMessage); message WM_NCHITTEST;
    procedure WMVScroll(var Msg : TWMVScroll); message WM_VSCROLL;
    procedure WMHScroll(var Msg : TWMHScroll); message WM_HSCROLL;

    {$ifndef CLX_USED}
    procedure CMEnabledChanged(var Message: TMessage); message CM_ENABLEDCHANGED;
    {$else}
    procedure EnabledChanged; override;
    {$endif}

    {$IFDEF VCL_4_USED}
    procedure CMMouseWheel(var Msg : TCMMouseWheel); message CM_MOUSEWHEEL;
    {$ENDIF}
    procedure WMSize(var Msg : TWMSize); message WM_SIZE;
    procedure SetBorderSides(Value: TElBorderSides);
    procedure WMRButtonUp(var Message: TWMRButtonUp); message WM_RBUTTONUP;
    {$ifdef VCL_5_USED}
    procedure WMContextMenu(var Message: TWMContextMenu); message WM_CONTEXTMENU;
    {$endif}
  protected
    { Protected declarations }
    FCaption: TElFString;
    FUseXPThemes: Boolean;
    FLineBorderActiveColor: TColor;
    FLineBorderInactiveColor: TColor;
    FViewRect: TRect;
    FMargin: Integer;

    procedure SetVertScrollBarStyles(newValue : TElScrollBarStyles); virtual;
    procedure SetHorzScrollBarStyles(newValue : TElScrollBarStyles); virtual;
    procedure PrepareText; virtual;
    procedure SetViewPos(newValue : TPoint); virtual;
    procedure SetWordWrap(newValue : Boolean); virtual;
    procedure AdjustScrollBars;
    procedure Paint; override;
    procedure UpdateFrame;
    procedure SetActiveBorderType(newValue : TElFlatBorderType); virtual;
    procedure SetInactiveBorderType(newValue : TElFlatBorderType); virtual;
    procedure SetFlat(newValue : Boolean); virtual;
    procedure Notification(AComponent : TComponent; operation : TOperation); override;
    procedure CreateParams(var Params : TCreateParams); override;
    procedure CreateWindowHandle(const Params: TCreateParams); override;
    procedure SetLinkColor(newValue : TColor); virtual;
    procedure SetLinkStyle(newValue : TFontStyles); virtual;
    procedure SetHighlightColor(newValue : TColor); virtual;
    procedure SetHighlightBkColor(newValue : TColor); virtual;
    procedure TriggerLinkClickEvent(HRef : string); virtual;
    procedure TriggerImageNeededEvent(Sender : TObject; Src : TElFString; var Image 
        : TBitmap); virtual;
    procedure MouseMove(Shift: TShiftState; X, Y: Integer); override;
    procedure SetCursor(newValue : TCursor); virtual;
    procedure KeyDown(var Key: Word; Shift: TShiftState); override;
    procedure MouseDown(Button: TMouseButton; Shift: TShiftState; X, Y: Integer); override;
    procedure SetUseCustomScrollBars(newValue : Boolean); virtual;
    procedure SetFlatFocusedScrollBars(newValue : Boolean); virtual;
    procedure Loaded; override;
    procedure SetCaption(newValue: TElFString); virtual;
    procedure IFMRepaintChildren(var Message: TMessage); message 
        IFM_REPAINTCHILDREN;
    procedure WMWindowPosChanged(var Message: TWMWindowPosChanged); message 
        WM_WINDOWPOSCHANGED;
    procedure SetUseXPThemes(const Value: Boolean); override;
    function GetThemedClassName: WideString; override;
    procedure DoLinkPopup(MousePos : TPoint);
    procedure SetLineBorderActiveColor(Value: TColor);
    procedure SetLineBorderInactiveColor(Value: TColor);
    procedure SetViewRect(Value: TRect);
    procedure SetMargin(Value: Integer);
    {$ifdef ELPACK_UNICODE}
    procedure SetHint(Value: WideString);

    {$ifndef CLX_USED}
    procedure CMHintShow(var Message: TMessage); message CM_HINTSHOW;
    {$else}
    function HintShow(var HintInfo : THintInfo): Boolean; override;
    {$endif}
    {$endif}

    property ViewRect: TRect read FViewRect write SetViewRect;
  public
    constructor Create(AOwner : TComponent); override;
    destructor Destroy; override;
    procedure Click; override;

    property VertScrollBarVisible : boolean read FVScrollVisible;
    property HorzScrollBarVisible : boolean read FHScrollVisible;
    property Position : TPoint read FViewPos write SetViewPos;
  published
    {$ifdef ELPACK_UNICODE}
    property Hint: WideString read FHint write SetHint;
    {$endif}
    property Caption: TElFString read FCaption write SetCaption;
    property VertScrollBarStyles : TElScrollBarStyles read FVertScrollBarStyles write SetVertScrollBarStyles;
    property HorzScrollBarStyles : TElScrollBarStyles read FHorzScrollBarStyles write SetHorzScrollBarStyles;
    property WordWrap   : Boolean read FWordWrap write SetWordWrap;
    property Transparent : Boolean read FTransparent write SetTransparent; { Protected }
    property BorderSides: TElBorderSides read FBorderSides write SetBorderSides;
    property BorderStyle: TBorderStyle read FBorderStyle write SetBorderStyle;
    property ActiveBorderType : TElFlatBorderType read FActiveBorderType write SetActiveBorderType;
    property InactiveBorderType : TElFlatBorderType read FInactiveBorderType write SetInactiveBorderType;
    property Flat : Boolean read FFlat write SetFlat;
    property ImageForm : TElImageForm read FImgForm write SetImageForm;
    property GradientStartColor : TColor read FGradientStartColor write SetGradientStartColor;  { Protected }
    property GradientEndColor : TColor read FGradientEndColor write SetGradientEndColor;  { Protected }
    property GradientSteps : Integer read FGradientSteps write SetGradientSteps;  { Protected }
    property Background : TBitmap read FBackground write SetBackground;
    property BackgroundType : TElBkGndType read FBackgroundType write SetBackgroundType;
    property Cursor : TCursor read FCursor write SetCursor;  { Published }
    property LinkColor : TColor read FLinkColor write SetLinkColor;  { Published }
    property LinkStyle : TFontStyles read FLinkStyle write SetLinkStyle;  { Published }
    property LinkPopupMenu : TPopupMenu read FLinkPopupMenu write SetLinkPopupMenu;
    property HighlightColor : TColor read FHighlightColor write SetHighlightColor;  { Published }
    property HighlightBkColor : TColor read FHighlightBkColor write SetHighlightBkColor;  { Published }
    property OnLinkClick : TElHTMLLinkClickEvent read FOnLinkClick write FOnLinkClick;
    property OnImageNeeded : TElHTMLImageNeededEvent read FOnImageNeeded write FOnImageNeeded;
    property UseCustomScrollBars : Boolean read FUseCustomScrollBars write SetUseCustomScrollBars;  { Published }
    property FlatFocusedScrollBars : Boolean read FFlatFocusedScrollBars write SetFlatFocusedScrollBars;  { Published }
    property LineBorderActiveColor: TColor read FLineBorderActiveColor write
        SetLineBorderActiveColor;
    property LineBorderInactiveColor: TColor read FLineBorderInactiveColor write
        SetLineBorderInactiveColor;
    property Text : string read FDummyString;
    property UseXPThemes: Boolean read FUseXPThemes write SetUseXPThemes default
        true;
    property Margin: Integer read FMargin write SetMargin default 4;

{$IFDEF VCL_4_USED}
    property Anchors;
{$ENDIF}
    property Color;
{$IFDEF VCL_4_USED}
    property Constraints;
{$ENDIF}
    property Ctl3D;
    property DragCursor;
{$IFDEF VCL_4_USED}
    property DragKind;
{$ENDIF}
    property Align;
    property DragMode;
    property Enabled;
    property Font;
    property ParentCtl3D;
    property ParentFont;
    property ParentShowHint;
    property PopupMenu;
    property ShowHint;
    property Visible;

    property OnClick;
    property OnDblClick;
    property OnDragDrop;
    property OnDragOver;
    property OnEndDrag;
    property OnEnter;
    property OnExit;
    property OnKeyDown;
    property OnKeyPress;
    property OnKeyUp;
    property OnMouseDown;
    property OnMouseMove;
    property OnMouseUp;
{$IFDEF VCL_4_USED}
    property OnStartDock;
    property OnEndDock;
{$ENDIF}
{$IFDEF VCL_5_USED}
    property OnContextPopup;
{$ENDIF}
  end;  { TElHTMLView }

implementation
end.
