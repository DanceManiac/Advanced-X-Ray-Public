{====================================================}
{                                                    }
{   EldoS Visual Components                          }
{                                                    }
{   Copyright (c) 1998-2001, EldoS                   }
{                                                    }
{====================================================}
{$include elpack2.inc}
{$ifdef ELPACK_SINGLECOMP}
{$I ElPack.inc}
{$else}
{$ifdef LINUX}
{$I ../ElPack.inc}
{$else}
{$I ..\ElPack.inc}
{$endif}
{$endif}

unit ElMaskEdit;

interface

uses
  {$ifdef MSWINDOWS}
  Windows,
  StdCtrls,
  Messages,
  Controls,
  ExtCtrls,
  Forms,
  Graphics,
  {$else}
  Qt,
  QForms,
  Types,
  QGraphics,
  QControls,
  QStdCtrls,
  QExtCtrls,
  {$endif}
{$ifdef VCL_6_USED}
Types,
{$endif}

  ElUxTheme,
  ElTmSchema,
  ElXPThemedControl,
  SysUtils,
  Classes,
  Clipbrd,
  ElVCLUtils,
  ElImgFrm,
  Mask;

type
     TCustomElMaskEdit = class(TCustomMaskEdit)
     private
       FActiveBorderType: TElFlatBorderType;
       FAlignment: TAlignment;
       FBackground: TBitmap;
       FBorderSides: TElBorderSides;
       FFlat: Boolean;
       FHandleDialogKeys: Boolean;
       FImgForm: TElImageForm;
       FImgFormChLink: TImgFormChangeLink;
       FInactiveBorderType: TElFlatBorderType;
       FMouseOver: Boolean;
       FOnMouseEnter: TNotifyEvent;
       FOnMouseLeave: TNotifyEvent;
       FPainting: Boolean;
       FPaintingTo: Boolean;
       FReturnPressed: Boolean;
       FTransparent: Boolean;
       FUseBackground: Boolean;
       FTheme: HTheme;
       {$ifdef ELPACK_UNICODE}
       FHint: WideString;
       {$endif}
       
       procedure BackgroundChanged(Sender: TObject);
       {$ifdef MSWINDOWS}
       procedure CMMouseEnter(var Msg: TMessage); message CM_MOUSEENTER;
       procedure CMMouseLeave(var Msg: TMessage); message CM_MOUSELEAVE;
       procedure CMParentColorChanged(var Msg: TMessage); message
           CM_PARENTCOLORCHANGED;
       procedure CNCtlColorEdit(var Msg: TWMCtlColorEdit); message CN_CTLCOLOREDIT;
       procedure CNCtlColorStatic(var Msg: TWMCtlColorStatic); message
           CN_CTLCOLORSTATIC;
       procedure DrawBackground(DC: HDC; R: TRect);
       procedure DrawFlatBorder(DC: HDC);
       procedure DrawParentControl(DC: HDC);
       procedure WMEraseBkgnd(var Msg: TWMEraseBkgnd); message WM_ERASEBKGND;
       procedure WMGetDlgCode(var Msg : TMessage); message WM_GETDLGCODE;
       procedure WMKillFocus(var Msg: TMessage); message WM_KILLFOCUS;
       procedure WMMove(var Msg: TMessage); message WM_MOVE;
       procedure WMNCCalcSize(var Message : TWMNCCalcSize); message WM_NCCALCSIZE;
       procedure WMPaint(var Msg: TWMPaint); message WM_PAINT;
       procedure WMSetFocus(var Msg: TMessage); message WM_SETFOCUS;
       {$endif}

       procedure ImageFormChange(Sender : TObject);
       procedure SetActiveBorderType(const Value: TElFlatBorderType);
       procedure SetAlignment(const Value: TAlignment);
       procedure SetBackground(const Value: TBitmap);
       procedure SetBorderSides(Value: TElBorderSides);
       procedure SetInactiveBorderType(const Value: TElFlatBorderType);
       procedure SetTransparent(const Value: boolean);
       procedure SetUseBackground(const Value: boolean);
     protected
       FNoHandleEnter: Boolean;
       FUseXPThemes: Boolean;
       FLineBorderActiveColor: TColor;
       FLineBorderInactiveColor: TColor;

       {$ifdef MSWINDOWS}
       procedure Change; override;
       procedure CreateParams(var Params: TCreateParams); override;
       {$endif}
       procedure DoMouseEnter; dynamic;
       procedure DoMouseLeave; dynamic;
       {$ifdef MSWINDOWS}
       procedure DoPaint; dynamic;
       {$endif}
       procedure KeyDown(var Key: Word; Shift: TShiftState); override;
       procedure KeyPress(var Key: Char); override;
       {$ifndef MSWINDOWS}
       function NeedKey(Key: Integer; Shift: TShiftState; const KeyText: WideString):
           Boolean; override;
       {$endif}
       procedure Notification(AComponent: TComponent; Operation: TOperation); override;
       procedure SetFlat(const Value: boolean); virtual;
       procedure SetImageForm(newValue : TElImageForm); virtual;
       procedure IFMRepaintChildren(var Message: TMessage); message
           IFM_REPAINTCHILDREN;
       procedure CreateThemeHandle; virtual;
       procedure CreateWnd; override;
       procedure DestroyWnd; override;
       procedure FreeThemeHandle; virtual;
       function IsThemeApplied: Boolean;
       procedure SetUseXPThemes(Value: Boolean); virtual;
       procedure WMNCPaint(var Msg : TMessage); message WM_NCPAINT;
       procedure WMThemeChanged(var Message: TMessage); message WM_THEMECHANGED;
       function GetThemedClassName: WideString;
       procedure SetLineBorderActiveColor(Value: TColor);
       procedure SetLineBorderInactiveColor(Value: TColor);
       procedure WMPaste(var Message: TMessage); message WM_PASTE;

      {$ifdef ELPACK_UNICODE}
      procedure SetHint(Value: WideString);
      
      {$ifndef CLX_USED}
      procedure CMHintShow(var Message: TMessage); message CM_HINTSHOW;
      {$else}
      function HintShow(var HintInfo : THintInfo): Boolean; override;
      {$endif}
      {$endif}

       property ActiveBorderType: TElFlatBorderType read FActiveBorderType write
           SetActiveBorderType default fbtSunken;
       property Alignment: TAlignment read FAlignment write SetAlignment default
           taLeftJustify;
       property Background: TBitmap read FBackground write SetBackground;
       property Flat: Boolean read FFlat write SetFlat default False;
       property InactiveBorderType: TElFlatBorderType read FInactiveBorderType write
           SetInactiveBorderType default fbtSunkenOuter;
       property OnMouseEnter: TNotifyEvent read FOnMouseEnter write FOnMouseEnter;
       property OnMouseLeave: TNotifyEvent read FOnMouseLeave write FOnMouseLeave;
       property Transparent: Boolean read FTransparent write SetTransparent default
           False;
       property UseBackground: Boolean read FUseBackground write SetUseBackground
           default False;
       property BorderSides: TElBorderSides read FBorderSides write SetBorderSides;
       property HandleDialogKeys: Boolean read FHandleDialogKeys write
           FHandleDialogKeys default true;
       property ImageForm: TElImageForm read FImgForm write SetImageForm;
       property UseXPThemes: Boolean read FUseXPThemes write SetUseXPThemes default
           true;
       property LineBorderActiveColor: TColor read FLineBorderActiveColor write
           SetLineBorderActiveColor;
       property LineBorderInactiveColor: TColor read FLineBorderInactiveColor write
           SetLineBorderInactiveColor;
     public
       constructor Create(AOwner: TComponent); override;
       destructor Destroy; override;
       property MouseOver: Boolean read FMouseOver;
       property Theme: HTheme read FTheme;
     published
      {$ifdef ELPACK_UNICODE}
      property Hint: WideString read FHint write SetHint;
      {$endif}
     end;

     TElMaskEdit = class(TCustomElMaskEdit)
     published
       property ActiveBorderType;
       property Alignment;
       property Background;
       property Flat;
       property InactiveBorderType;
       property OnMouseEnter;
       property OnMouseLeave;
       property Transparent;
       property UseBackground;
       property BorderSides;
       property HandleDialogKeys;
       property ImageForm;
       property UseXPThemes;
       property LineBorderActiveColor;
       property LineBorderInactiveColor;

       property Align;
       {$IFDEF VCL_4_USED}
       property Anchors;
       {$ENDIF}
       property AutoSelect;
       property AutoSize;
       {$IFDEF VCL_4_USED}
       {$ifdef MSWINDOWS}
       property BiDiMode;
       {$endif}
       {$ENDIF}
       property BorderStyle;
       property CharCase;
       property Color;
       {$IFDEF VCL_4_USED}
       property Constraints;
       {$ENDIF}
       property Ctl3D;
       property Cursor;
       {$ifdef MSWINDOWS}
       property DragCursor;
       {$endif}
       {$IFDEF VCL_4_USED}
       {$ifdef MSWINDOWS}
       property DragKind;
       {$endif}
       {$ENDIF}
       property DragMode;
       property Enabled;
       property EditMask;
       property Font;
       property HideSelection;
       {$ifdef MSWINDOWS}
       property ImeMode;
       property ImeName;
       {$endif}
       property MaxLength;
       {$ifdef MSWINDOWS}
       property OEMConvert;
       {$endif}
       {$IFDEF VCL_4_USED}
       {$ifdef MSWINDOWS}
       property ParentBiDiMode;
       {$endif}
       {$ENDIF}
       property ParentColor;
       property ParentCtl3D;
       property ParentFont;
       property ParentShowHint;
       {$ifdef MSWINDOWS}
       property PasswordChar;
       {$endif}
       property PopupMenu;
       property ReadOnly;
       property ShowHint;
       property TabOrder;
       property Text;

       property Visible;
       property OnChange;
       property OnClick;
       {$IFDEF VCL_5_USED}
       property OnContextPopup;
       {$ENDIF}
       property OnDblClick;
       property OnDragDrop;
       property OnDragOver;
       {$IFDEF VCL_4_USED}
       {$ifdef MSWINDOWS}
       property OnEndDock;
       {$endif}
       {$ENDIF}
       property OnEndDrag;
       property OnEnter;
       property OnExit;
       property OnKeyDown;
       property OnKeyPress;
       property OnKeyUp;
       property OnMouseDown;
       property OnMouseMove;
       property OnMouseUp;
       {$IFDEF VCL_4_USED}
       {$ifdef MSWINDOWS}
       property OnStartDock;
       {$endif}
       {$ENDIF}
       property OnStartDrag;
     end;

implementation
end.
