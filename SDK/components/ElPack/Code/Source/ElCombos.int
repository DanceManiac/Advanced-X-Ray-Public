{====================================================}
{                                                    }
{   EldoS Visual Components                          }
{                                                    }
{   Copyright (c) 1998-2001, EldoS                   }
{                                                    }
{====================================================}
{$include elpack2.inc}
{$ifdef ELPACK_SINGLECOMP}
{$I ElPack.inc}
{$else}
{$ifdef LINUX}
{$I ../ElPack.inc}
{$else}
{$I ..\ElPack.inc}
{$endif}
{$endif}

(*

02/26/2002

  Color change is not working anymore when Enabled is changed.

02/11/2002

  Text specified in designtime was lost in runtime. Fixed.

01/29/2002

  Fixed width of the visible text

01/23/2002

  Unicode support added

01/15/2002

  Dropdown form now correctly positions itself on the top of the combo's parent form

01/11/2002

  Fixed vertical text alignment problems with BorderStyle = bsNone
  Added ButtonShortCut and AltButtonShortcut properties

01/01/2002

  Fixed some problems with painting borders when focus is moved

12/21/2001

  Now OnDropDown is fired before the list is dropped. This lets you fill the list
  in OnDropDown event handler.

12/17/2001

  Fixed ElCombo to NOT call OnChange event when the text is changed programmatically

11/25/2001

  AdjustDropDownPos property added. Now, if the list doesn't fit into parent form,
  it is dropped up, not down

Version History
09/17/2001 (c) Akzhan Abdulin

  Added Windows XP Themes Support for ElComboBox.
  Note that themed combobox will ignore some its look'n'feel properties.

  I recommend using of TElAdvancedComboBox instead of this component.

07/23/2001

  AltBtnShowFrame and BtnShowFrame properties added.

06/20/2001

  DropDownWidth property added for dropped down list width setting.

03/21/2001

  Fixed the problem with auto-size combo boxes, that spoiled form fonts.

03/09/2001

  Fixed drawing artefacts on buttons.

12/23/2000

  CanDrop property added. For read-only comboboxes it acts similar to Enabled,
  but the font color is not changed.

12/20/2000

  Small resource leak fixed in ElCombos.SetAutoSize (By the way, this leak
  exists in VCL).

09/28/2000

  OnChange was not fired after selecting an item from the drop-down list. Fixed

09/05/2000

  AutoSize property published

*)

unit ElCombos;

interface

uses
  Windows,
  Messages,
  Classes,
  Controls,
  Graphics,
  ElACtrls,
  Forms,
  ElImgFrm,
  Menus,
{$ifdef VCL_6_USED}
Types,
{$endif}
  ElTools,
  ElVCLUtils,
  Buttons,
  ElPopBtn,
{$IFDEF WIN32}
  ElUxTheme,
{$ENDIF}
  ElEdits,
  ElListBox,
  ElStrUtils,
  ElFrmPers;

type

  TElComboBox = class;

  TElComboButton = class(TGraphicControl)
  private
    FFlat: boolean;
    FFocused: boolean;
    FMouseOver: boolean;
    FTransparent: boolean;
    FArrowColor : TColor;
    FGlyph : TElButtonGlyph;
    FDrawFrame: Boolean;
    procedure CMMouseEnter(var Msg: TMessage); message CM_MOUSEENTER;
    procedure CMMouseLeave(var Msg: TMessage); message CM_MOUSELEAVE;
    procedure SetFocused(const Value: boolean);
    procedure SetDown(const Value : boolean);
    procedure SetTransparent(const Value: boolean);
    procedure SetDrawFrame(Value: Boolean);
  protected
    ExtGlyph : boolean;
    FDown: boolean;
    KeepColor : boolean;
    procedure DrawArrow(R: TRect); virtual;
    procedure MouseDown(Button: TMouseButton; Shift: TShiftState;
      X, Y: integer); override;
    procedure MouseUp(Button: TMouseButton; Shift: TShiftState;
      X, Y: integer); override;
    procedure Paint; override;
    procedure GlyphChanged(Sender : TObject);
    function GetGlyph : TBitmap;
    procedure SetGlyph (Value : TBitmap);
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    property Glyph : TBitmap read GetGlyph write SetGlyph;
    property Flat: boolean read FFlat write FFlat;
    property Down : boolean read FDown write SetDown;
    property Focused: boolean read FFocused write SetFocused;
    property Transparent: boolean read FTransparent write SetTransparent;
    property DrawFrame: Boolean read FDrawFrame write SetDrawFrame;
  end;

  TElComboListBox = class(TElListBox)
  private
    FCombo: TElComboBox;
    procedure WMLButtonDown(var Msg: TMessage); message WM_LBUTTONDOWN;
    procedure WMLButtonUp(var Msg: TWMLButtonUp); message WM_LBUTTONUP;
    procedure WMMouseActivate(var Msg: TMessage); message WM_MOUSEACTIVATE;
    procedure WMMouseMove(var Msg: TWMMouseMove); message WM_MOUSEMOVE;
    procedure WMRButtonDown(var Msg: TMessage); message WM_RBUTTONDOWN;
    procedure WMRButtonUp(var Msg: TMessage); message WM_RBUTTONUP;
    procedure CNCommand(var Msg : TMessage); message CN_COMMAND;
  protected
    procedure ResetContent; override;
    procedure CreateParams(var Params: TCreateParams); override;
    function  GetBackground: TBitmap; override;
  public
    constructor Create(AOwner: TComponent); override;
  end;

  TElComboBox = class(TCustomElEdit)
  protected
    ChangeAllowed  : Boolean;
    FDropDownWidth : Integer;
    FAutoCompletion: Boolean;
    FAltButtonShortcut: TShortcut;
    FButtonShortcut: TShortcut;
    FAltBtnAlign: TLeftRight;
    FAltBtnWidth: integer;
    FBtnFlat : Boolean;
    FBtnTransparent: boolean;
    FAltButton,
    FButton: TElComboButton;
    FDropDownCount: integer;
    FForm: TForm;
    FItemIndex: Integer;
    FListBox: TElComboListBox;
    FOnAltBtnClick: TNotifyEvent;
    FOnDropDown: TNotifyEvent;
    FSaveColor : TColor;
    FSaveFlat  : boolean; 
    FForcedText: boolean;
    FIgnoreItemIdx: boolean;
    FCanDrop,
    FDroppedDown : boolean;
    FAdjustDropDownPos: Boolean;
    function GetListTransparentSelection: Boolean;
    procedure SetListTransparentSelection(Value: Boolean);
    procedure SetDropDownWidth(const Value: Integer);
    function GetBtnDrawFrame: Boolean;
    procedure SetBtnDrawFrame(Value: Boolean);
    function GetAltBtnDrawFrame: Boolean;
    procedure SetAltBtnDrawFrame(Value: Boolean);
    procedure CMCancelMode(var Msg: TCMCancelMode); message CM_CANCELMODE;
    procedure CMEnabledChanged(var Msg: TMessage); message CM_ENABLEDCHANGED;
    procedure CMFontChanged(var Msg: TMessage); message CM_FONTCHANGED;
    procedure CMTextChanged(var Msg: TMessage); message CM_TEXTCHANGED;
    procedure WMSetCursor(var Msg: TMessage); message WM_SETCURSOR;
    procedure WMKeyDown(var Message: TWMKeyDown); message WM_KEYDOWN;
    procedure WMMButtonDblClk(var Message: TWMMButtonDblClk); message WM_LBUTTONDBLCLK;
    procedure WMLButtonDown(var Message: TWMLButtonDown); message WM_LBUTTONDOWN;
    procedure WMLButtonUp(var Message: TWMLButtonUp); message WM_LBUTTONUP;
    procedure WMContextMenu(var Message: TMessage); message WM_CONTEXTMENU;
    procedure WMMouseWheel(var Msg: TWMMouseWheel); message WM_MOUSEWHEEL;
    procedure EMSetReadOnly(var Msg : TMessage); message EM_SETREADONLY;
    procedure CNCommand(var Message: TWMCommand); message CN_COMMAND;
    procedure ButtonClick(Sender: TObject);
    procedure AltButtonClick(Sender: TObject);
    function GetBtnColor: TColor;
    procedure GetDropDownValue;
    function GetDroppedDown: boolean;
    function GetItems: TElFStrings;
    function GetListColor: TColor;
    function GetListInvertSelection: boolean;
    function GetSorted: boolean;
    function GetUseBackground: boolean;
    procedure ListBoxClick(Sender: TObject);
    procedure SetBtnColor(const Value: TColor);
    procedure SetBtnTransparent(const Value: boolean);
    procedure SetDropDownCount(const Value: integer);
    procedure SetDroppedDown(const Value: boolean);
    procedure SetCanDrop(const Value : boolean);
    procedure SetEditRect;
    procedure SetItemIndex(const Value: Integer);
    procedure SetItems(const Value: TElFStrings);
    procedure SetListColor(const Value: TColor);
    procedure SetListInvertSelection(const Value: boolean);
    procedure SetSorted(const Value: boolean);
    procedure SetUseBackground(const Value: boolean);
    function  GetDroppedIndex : integer;
    procedure WMKillFocus(var Msg: TMessage); message WM_KILLFOCUS;
    procedure WMSetFocus(var Msg: TMessage); message WM_SETFOCUS;
    procedure WMSize(var Msg: TMessage); message WM_SIZE;
  protected
    function  GetListImageForm : TElImageForm;
    procedure SetListImageForm(newValue : TElImageForm);
    {$ifdef MSWINDOWS}
    procedure CreateWnd; override;
    procedure CreateParams(var Params: TCreateParams); override;
    procedure WMThemeChanged(var Message: TMessage); message WM_THEMECHANGED;
    {$endif}
    procedure DoDropDown; virtual;
    procedure KeyDown(var Key: Word; Shift: TShiftState); override;
    procedure Loaded; override;
    procedure SetBtnFlat(newValue : Boolean); virtual;
    function GetBtnArrowColor : TColor; virtual;
    procedure SetBtnArrowColor(newValue : TColor); virtual;

    function GetListSelectedColor : TColor;
    procedure SetListSelectedColor(newValue : TColor);
    function GetAltBtnColor : TColor;
    procedure SetAltBtnColor(Value : TColor);
    function GetAltBtnTransparent : boolean;
    procedure SetAltBtnTransparent(Value : boolean);
    function GetAltBtnFlat : boolean;
    procedure SetAltBtnFlat(Value : boolean);
    function GetAltBtnGlyph : TBitmap;
    procedure SetAltBtnGlyph(Value : TBitmap);
    procedure SetAltBtnWidth(Value : integer);
    function GetAltBtnVisible : boolean;
    procedure SetAltBtnVisible(Value : boolean);

    procedure SetAltBtnAlign(Value : TLeftRight);
    procedure DoAutoComplete;
    procedure WMChar(var Message: TWMChar); message WM_CHAR;
    procedure SetReadOnly(Value : boolean);
    procedure SetLineBorderActiveColor(Value: TColor); override;
    procedure SetLineBorderInactiveColor(Value: TColor); override;
    procedure SetActiveBorderType(const Value: TElFlatBorderType); override;
    procedure SetInactiveBorderType(const Value: TElFlatBorderType); override;
    procedure SetFlat(const Value: boolean); override;
    procedure CMDialogKey(var Message: TCMDialogKey); message CM_DIALOGKEY;
    procedure DestroyWnd; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    procedure Click; override;
    procedure CloseUp(AcceptValue: boolean);
    procedure DropDown;
    property DroppedDown: boolean read GetDroppedDown write SetDroppedDown;
    property DroppedIndex : integer read GetDroppedIndex;
  published
    property ActiveBorderType;
    property Align;
    property Alignment;
    {$IFDEF VCL_4_USED}
    property Anchors;
    {$ENDIF}
    property Background;
    {$IFDEF VCL_4_USED}
    property BiDiMode;
    {$ENDIF}
    property BorderStyle;
    property BorderSides;
    property VertScrollBarStyles;
    property HorzScrollBarStyles;
    property UseCustomScrollBars;
    
    property BtnColor         : TColor read GetBtnColor write SetBtnColor default clBtnFace;
    property BtnTransparent   : boolean read FBtnTransparent write SetBtnTransparent default False;
    property BtnFlat          : Boolean read FBtnFlat write SetBtnFlat default false;
    property BtnArrowColor    : TColor read GetBtnArrowColor write SetBtnArrowColor;  { Published }

    property AltBtnColor      : TColor read GetAltBtnColor write SetAltBtnColor default clBtnFace;
    property AltBtnTransparent: boolean read GetAltBtnTransparent write SetAltBtnTransparent default false;
    property AltBtnFlat       : Boolean read GetAltBtnFlat write SetAltBtnFlat default false;
    property AltBtnGlyph      : TBitmap read GetAltBtnGlyph write SetAltBtnGlyph;
    property AltBtnVisible    : Boolean read GetAltBtnVisible write SetAltBtnVisible  default false;
    property AltBtnWidth      : Integer read FAltBtnWidth write SetAltBtnWidth;
    property AltBtnPosition   : TLeftRight read FAltBtnAlign write SetAltBtnAlign default taRightJustify;
    property OnAltButtonClick : TNotifyEvent read FOnAltBtnClick write FOnAltBtnClick;

    property CanDrop : boolean read FCanDrop write SetCanDrop default True;
    property DropDownCount: Integer read FDropDownCount write SetDropDownCount default 8;
    property DropDownWidth: Integer read FDropDownWidth write SetDropDownWidth default -1;
    property ListTransparentSelection: Boolean read GetListTransparentSelection write SetListTransparentSelection default false;
    property BtnDrawFrame: Boolean read GetBtnDrawFrame write SetBtnDrawFrame default true;
    property AutoCompletion: Boolean read FAutoCompletion write FAutoCompletion;
    property AltBtnDrawFrame: Boolean read GetAltBtnDrawFrame write SetAltBtnDrawFrame default true;
    property Items: TElFStrings read GetItems write SetItems;
    property ListColor: TColor read GetListColor write SetListColor default clWindow;
    property ListImageForm : TElImageForm read GetListImageForm write SetListImageForm;
    property ListInvertSelection: boolean read GetListInvertSelection write SetListInvertSelection default False;
    property ListSelectedColor : TColor read GetListSelectedColor write SetListSelectedColor;
    property Sorted: boolean read GetSorted write SetSorted default False;
    property UseBackground: boolean read GetUseBackground write SetUseBackground default False;
    property OnDropDown: TNotifyEvent read FOnDropDown write FOnDropDown;
    property AdjustDropDownPos: Boolean read FAdjustDropDownPos write
        FAdjustDropDownPos default true;
    property ItemIndex: Integer read FItemIndex write SetItemIndex default -1;

    property AutoSize;
    property CharCase;
    property TopMargin;
    property LeftMargin;
    property RightMargin;
    property RTLContent;
    property PasswordChar;
    property Multiline;
    property WantTabs;
    property HandleDialogKeys;
    property HideSelection;
    property TabSpaces;
    property Lines stored false;

    property Color;
    {$IFDEF VCL_4_USED}
    property Constraints;
    {$ENDIF}
    property DragCursor;
    {$IFDEF VCL_4_USED}
    property DragKind;
    {$ENDIF}
    property DragMode;

    property Enabled;
    property Flat;
    property Font;
    {$ifdef ELPACK_COMPLETE}
    property ImageForm;
    {$endif}
    property ImeMode;
    property ImeName;
    property InactiveBorderType;
    property LineBorderActiveColor;
    property LineBorderInactiveColor;

    property MaxLength;
    {$IFDEF VCL_4_USED}
    property ParentBiDiMode;
    {$ENDIF}
    property ParentColor;
    property ParentFont;
    property ParentShowHint;
    property PopupMenu;
    property ReadOnly write SetReadOnly default false;
    property ShowHint;

    property TabOrder;
    property TabStop;
    property Text;
    property Transparent;
    property Visible;
    property OnChange;
    property OnClick;
    {$IFDEF VCL_5_USED}
    property OnContextPopup;
    {$ENDIF}
    property OnDblClick;
    property OnDragDrop;
    property OnDragOver;
    {$IFDEF VCL_4_USED}
    property OnEndDock;
    {$ENDIF}
    property OnEndDrag;
    property OnEnter;
    property OnExit;
    property OnKeyDown;
    property OnKeyPress;
    property OnKeyUp;
    property OnMouseEnter;
    property OnMouseLeave;
    {$IFDEF VCL_4_USED}
    property OnStartDock;
    {$ENDIF}
    property OnStartDrag;
    property AltButtonShortcut: TShortcut read FAltButtonShortcut write 
        FAltButtonShortcut;
    property ButtonShortcut: TShortcut read FButtonShortcut write FButtonShortcut;
  end;

implementation
end.
