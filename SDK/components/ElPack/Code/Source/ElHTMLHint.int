{====================================================}
{                                                    }
{   EldoS Visual Components                          }
{                                                    }
{   Copyright (c) 1998-2001, EldoS                   }
{                                                    }
{====================================================}
{$include elpack2.inc}
{$ifdef ELPACK_SINGLECOMP}
{$I ElPack.inc}
{$else}
{$ifdef LINUX}
{$I ../ElPack.inc}
{$else}
{$I ..\ElPack.inc}
{$endif}
{$endif}

(*

Version History

05/20/2001

Fixed the bug when OnShow was not called properly


04/12/2001

Fixed the AV that happens when the application is closed.

*)

{$IFNDEF HAS_HTML_RENDER}
error You must have HAS_HTML_RENDER enabled to use ElHTMLHint
{$endif}

unit ElHTMLHint;

interface

uses
  {$ifndef CLX_USED}
  Windows,
  Graphics,
  Controls,
  Forms,
  Messages,
  {$else}
  Types,
  QGraphics,
  QForms,
  QControls,
  {$endif}
{$ifdef VCL_6_USED}
Types,
{$endif}

  SysUtils,
  Classes,
  ElVCLUtils,
  ElStrUtils,
  ElHintWnd,
  HTMLRender;

type

  TElHTMLHint = class(TComponent)
  private
    FEnabled  : Boolean;
    FHintClass: THintWindowClass;
    FOnShow,
    FOnHide   : TNotifyEvent;
    FOnImageNeeded: TElHTMLImageNeededEvent;
  protected
    FFontName: TFontName;
    procedure SetEnabled(Value : Boolean); virtual;
    procedure SetOnHide(Value : TNotifyEvent);
    procedure SetOnShow(Value : TNotifyEvent);
    procedure SetOnImageNeeded(Value : TElHTMLImageNeededEvent);
    procedure SetFontName(const Value: TFontName);
  public
    destructor Destroy; override;
  published
    property Enabled : Boolean read FEnabled write SetEnabled;  { Published }

    property OnShow  : TNotifyEvent read FOnShow write SetOnShow;
    property OnHide  : TNotifyEvent read FOnHide write SetOnHide;
    property OnImageNeeded: TElHTMLImageNeededEvent read FOnImageNeeded write
        SetOnImageNeeded;
    property FontName: TFontName read FFontName write SetFontName;
  end;

  TElHTMLHintWindow = class(TElHintWindow)
  protected
    procedure OnShow;
    procedure OnHide;
    {$ifndef CLX_USED}
    procedure WMShowWindow(var Message: TMessage); message WM_SHOWWINDOW;
    procedure WMWindowPosChanged(var Message: TMessage); message
        WM_WINDOWPOSCHANGED;
    {$else}
    procedure VisibleChanged; override;
    {$endif}
    procedure TriggerImageNeededEvent(Sender : TObject; Src : TElFString; var Image
        : TBitmap); override;
    procedure SetupRightCaption(Caption : String);
  public
    constructor Create(AOwner : TComponent); override;
    destructor Destroy; override;
{$ifdef CLX_USED}
    function CalcHintRect(MaxWidth: Integer; const AHint: WideString; AData: Pointer): TRect; override;
    procedure ActivateHint(Rect: TRect; const AHint: WideString); override;
{$else}
    function CalcHintRect(MaxWidth: Integer; const AHint: string; AData: Pointer): TRect; override;
    procedure ActivateHint(Rect: TRect; const AHint: string); override;
{$endif}
  end;  { TElHTMLHintWindow }

implementation
end.
