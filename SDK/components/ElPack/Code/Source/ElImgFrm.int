{====================================================}
{                                                    }
{   EldoS Visual Components                          }
{                                                    }
{   Copyright (c) 1998-2001, EldoS                   }
{                                                    }
{====================================================}

{$include elpack2.inc}
{$ifdef ELPACK_SINGLECOMP}
{$I ElPack.inc}
{$else}
{$ifdef LINUX}
{$I ../ElPack.inc}
{$else}
{$I ..\ElPack.inc}
{$endif}
{$endif}

(*

Version History

12/08/2001

  Fixed the bug that might prevent control region from being set

11/20/2001

  Fixed possible AV appearing in PictureChanged when no form image is assigned

============================== Version 3.0 =====================================

09/30/2001

  Fixed right and middle mouse button messages when MoveForm = true and
  CaptionControl = nil

09/10/2001

  Added TransparentColor. This value is used as a transparent color when creating
  image-shaped forms.  

09/05/2001

  Added possibility to draw background on any control, not just on the form
  Fixed the problem when MoveForm is True and no CaptionControl assigned - it
  was impossible to click on min/max/close/menu buttons. 

============================== Version 2.76 ====================================


12/18/2000

  Clearing the form shape image when the window was not visible didn't work. Fixed.

============================== Version 2.75 ====================================

10/31/2000

  When Movable was true and CaptionControl was nil, it was impossible to click
  on the non-windowed child control on the form. Fixed.    

*)

unit ElImgFrm;

interface

uses
  TypInfo,
{$ifndef CLX_USED}
  Windows,
  Messages,
  Controls,
  Graphics,
  ExtCtrls,
  Forms,
{$else}
  Qt,
  Types,
  QControls,
  QGraphics,
  QExtCtrls,
  QForms,
{$endif}
  Classes,
{$ifdef VCL_6_USED}
Types,
{$endif}
  ElHook,
  ElTools,
  ElVCLUtils,
  ElList,
  ElUxTheme,
  ElTmSchema,
  ElExtBkgnd;

type

  TCustomElImageForm = class;

  TImgFormChangeLink = class(TObject)
  private
    FSender: TCustomElImageForm;
    FOnChange: TNotifyEvent;
  public
    destructor Destroy; override;
    procedure Change; dynamic;
    property OnChange: TNotifyEvent read FOnChange write FOnChange;
    property Sender: TCustomElImageForm read FSender write FSender;
  end;

  TCustomElImageForm = class(TComponent)
  private
    FCaptionControl: TGraphicControl;
    FChangeRegion: boolean;
    FBkImage : TBitmap;
    FImage   : TImage;
    FBmp     : TBitmap;
    FMoveForm: boolean;
    FMoveHook: TElHook;
    FOldImageEvent: TNotifyEvent;
    FRegion: HRGN;
    FBackgroundType : TElBkGndType;
    FGradientSteps : Integer;
    FGradientStartColor : TColor;
    FGradientEndColor : TColor;
    {$ifndef CLX_USED}
    FNoBk : boolean;
    {$endif}
    FCLients : TElList;

{$ifndef CLX_USED}
    procedure AfterMessage(Sender: TObject; var Msg: TMessage; var Handled: boolean);
    procedure BeforeMessage(Sender: TObject; var Msg: TMessage; var Handled: boolean);
{$endif}
    procedure PictureChanged(Sender: TObject);
    procedure BkImageChange(Sender: TObject);
    procedure SetCaptionControl(const Value: TGraphicControl);
    procedure SetChangeRegion(const Value: boolean);
    procedure SetImage(const Value: TImage);
    procedure SetBkImage(const Value: TBitmap);
    procedure SetMoveForm(const Value: boolean);
    procedure SetGradientStartColor(newValue : TColor);
    procedure SetGradientEndColor(newValue : TColor);
    procedure SetGradientSteps(newValue : Integer);
    procedure SetBackgroundType(newValue : TElBkGndType);
    procedure Change;
    //procedure RedoBmp(DC : HDC);
  protected
    FControl: TWinControl;
    FTransparentColor: TColor;
    procedure CreateHook;
    procedure CreateRegion;
    procedure DestroyHook;
    procedure DestroyRegion;
    function GetTransparentColor: TColor;
    procedure Loaded; override;
    procedure Notification(AComponent: TComponent; Operation: TOperation); override;
    procedure SetControl(Value: TWinControl);
    procedure SetTransparentColor(Value: TColor);
    property CaptionControl: TGraphicControl read FCaptionControl write SetCaptionControl;
    property ChangeFormRegion: boolean read FChangeRegion write SetChangeRegion;
    property MoveForm  : boolean read FMoveForm write SetMoveForm default False;
    property FormImage : TImage  read FImage write SetImage;
    property Background: TBitmap read FBkImage write SetBkImage;
    property BackgroundType : TElBkGndType read FBackgroundType write SetBackgroundType;
    property GradientStartColor : TColor read FGradientStartColor write SetGradientStartColor;  { Protected }
    property GradientEndColor : TColor read FGradientEndColor write SetGradientEndColor;  { Protected }
    property GradientSteps : Integer read FGradientSteps write SetGradientSteps;  { Protected }
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    procedure RegisterChanges(Value: TImgFormChangeLink);
    procedure UnregisterChanges(Value: TImgFormChangeLink);

    procedure PaintBkgnd(DC : HDC; R : TRect; Origin : TPoint; Direct : boolean);
    function GetRealControl: TWinControl;
  published
    property Control: TWinControl read FControl write SetControl;
    property TransparentColor: TColor read FTransparentColor write 
        SetTransparentColor;
  end;

  TElImageForm = class(TCustomElImageForm)
  published
    property CaptionControl;
    property ChangeFormRegion;
    property FormImage;
    property MoveForm;
    property Background;
    property BackgroundType;
    property GradientStartColor;
    property GradientEndColor;
    property GradientSteps;
  end;

{$ifndef CLX_USED}
const IFM_EFFECTIVESIZE   = WM_USER + 1326;
      IFM_REPAINTCHILDREN = WM_USER + 6389;
      IFM_CANPAINTBKGND   = WM_USER + 6391;
{$endif}

implementation
end.
