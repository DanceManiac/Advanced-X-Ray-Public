{====================================================}
{                                                    }
{   EldoS Visual Components                          }
{                                                    }
{   Copyright (c) 1998-2001, EldoS                   }
{                                                    }
{   ElInterfaceClasses unit:                         }
{   Copyright (c) 2001 Akzhan Abdulin                }
{                                                    }
{====================================================}
{$include elpack2.inc}
{$ifdef ELPACK_SINGLECOMP}
{$I ElPack.inc}
{$else}
{$ifdef LINUX}
{$I ../ElPack.inc}
{$else}
{$I ..\ElPack.inc}
{$endif}
{$endif}

unit ElInterfaceClasses;

interface

uses
  Classes;

type
  { IElObjectIdentity enables identity tests }

  IElObjectIdentity = interface
  ['{0C5A6289-FFE6-4DE3-B9D2-4E0B22D1A9E4}']
    function SameIdentity(ARef: IUnknown): Boolean;
  end;

  { IElObjectIdentity2 internally serves to test identity and meets ITC, IPC }

  IElObjectIdentity2 = interface
  ['{1847D467-CF11-4370-B5FF-762951CA0FA5}']
    function GetIdentity: Pointer;
  end;

  TElCustomIdentifiedObject = class(TInterfacedObject, IElObjectIdentity, IElObjectIdentity2)
  private
    FIdentity: Pointer;
  protected
    { IElObjectIdentity }
    function SameIdentity(ARef: IUnknown): Boolean;
    { IElObjectIdentity2 }
    function GetIdentity: Pointer;
  public
    procedure AfterConstruction; override;
  end;

  IElComparableObject = interface(IElObjectIdentity)
  ['{9D9174AC-5243-433C-A54C-6349E5D5778F}']
    function Compare(ARef: IUnknown): Integer;
  end;
  { IElInterfaceList provides additional FastGet method  }

  IElInterfaceList = interface(IInterfaceList)
  ['{BB275413-8170-4DDF-8843-B0288F5DDD3F}']
    function FastGet(Index: Integer): IUnknown;
    function Get(Index: Integer): IUnknown;
    function GetCapacity: Integer;
    function GetCount: Integer;
    procedure Put(Index: Integer; Item: IUnknown);
    procedure SetCapacity(NewCapacity: Integer);
    procedure SetCount(NewCount: Integer);

    procedure Clear;
    procedure Delete(Index: Integer);
    procedure Exchange(Index1, Index2: Integer);
    function First: IUnknown;
    function IndexOf(Item: IUnknown): Integer;
    function Add(Item: IUnknown): Integer;
    procedure Insert(Index: Integer; Item: IUnknown);
    function Last: IUnknown;
    function Remove(Item: IUnknown): Integer;
    procedure Lock;
    procedure Unlock;
    property Capacity: Integer read GetCapacity write SetCapacity;
    property Count: Integer read GetCount write SetCount;
    property Items[Index: Integer]: IUnknown read Get write Put; default;
  end;

  { TElInterfaceList accepts duplicates  }

  TElInterfaceList = class(TInterfacedObject, IElInterfaceList, IInterfaceList)
  private
    FList: TThreadList;
  protected
    { IElInterfaceList }
    function FastGet(Index: Integer): IUnknown;
    function Get(Index: Integer): IUnknown;
    function GetCapacity: Integer;
    function GetCount: Integer;
    procedure Put(Index: Integer; Item: IUnknown);
    procedure SetCapacity(NewCapacity: Integer);
    procedure SetCount(NewCount: Integer);
  public
    constructor Create;
    destructor Destroy; override;
    procedure Clear;
    procedure Delete(Index: Integer);
    procedure Exchange(Index1, Index2: Integer);
    function Expand: TElInterfaceList;
    function First: IUnknown;
    function IndexOf(Item: IUnknown): Integer;
    function Add(Item: IUnknown): Integer;
    procedure Insert(Index: Integer; Item: IUnknown);
    function Last: IUnknown;
    function Remove(Item: IUnknown): Integer;
    procedure Lock;
    procedure Unlock;
    property Capacity: Integer read GetCapacity write SetCapacity;
    property Count: Integer read GetCount write SetCount;
    property Items[Index: Integer]: IUnknown read Get write Put; default;
  end;

  IElInterfaceStack = interface
  ['{26DF724D-0250-4B7F-9E26-13C664F20D20}']
    procedure Push(Value: IUnknown);
    function GetFront: IUnknown;
    function Pop: IUnknown;
    procedure Clear;
    function Empty: Boolean;
  end;

  TElInterfaceStack = class(TInterfacedObject, IElInterfaceStack)
  private
    FList: IInterfaceList;
  protected
    { IElInterfaceStack }
    procedure Push(Value: IUnknown);
    function GetFront: IUnknown;
    function Pop: IUnknown;
    procedure Clear;
    function Empty: Boolean;
  public
    procedure AfterConstruction; override;
  end;

  IElAttributeList = interface
  ['{47F41D19-EE3C-4E0A-9F06-3CEF29F64000}']
    function GetText: String;
    procedure SetText(const Text: String);
    function GetName(const Index: Integer): String;
    function GetValue(const Index: Integer): String;
    procedure SetValue(const Index: Integer; const AValue: String);
    function GetCount: Integer;
    function GetAttribute(const AName: String): String;
    procedure SetAttribute(const AName: String; const AValue: String; Additive: Boolean);
    procedure _SetAttribute(const AName: String; const AValue: String);
    procedure RemoveAttribute(const AName: String);
    procedure Clear;

    property Text: String read GetText write SetText;
    property Names[const Index: Integer]: String read GetName;
    property Values[const Index: Integer]: String read GetValue write SetValue;
    property Count: Integer read GetCount;
    property Attributes[const Name: String]: String read GetAttribute write _SetAttribute;
  end;

  TElAttributeList = class(TInterfacedObject, IElAttributeList)
  private
    FNames: TStrings;
    FValues: TStrings;
  protected
    { IElAttributeList }
    function GetText: String;
    procedure SetText(const Text: String);
    function GetName(const Index: Integer): String;
    function GetValue(const Index: Integer): String;
    procedure SetValue(const Index: Integer; const AValue: String);
    function GetCount: Integer;
    function GetAttribute(const AName: String): String;
    procedure SetAttribute(const AName: String; const AValue: String; Additive: Boolean);
    procedure _SetAttribute(const AName: String; const AValue: String);
    procedure RemoveAttribute(const AName: String);
    procedure Clear;
  public
    procedure AfterConstruction; override;
    destructor Destroy; override;
  end;

implementation
end.
