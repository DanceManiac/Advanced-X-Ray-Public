{====================================================}
{                                                    }
{   EldoS Visual Components                          }
{                                                    }
{   Copyright (c) 1998-2001, EldoS                   }
{                                                    }
{====================================================}

{$include elpack2.inc}
{$ifdef ELPACK_SINGLECOMP}
{$I ElPack.inc}
{$else}
{$ifdef LINUX}
{$I ../ElPack.inc}
{$else}
{$I ..\ElPack.inc}
{$endif}
{$endif}

(*

Version History

03/06/2002

  Added unicode hint

02/26/2002

  Fixed trackbar auto-scrolling behaviour when the thumb goes under the cursor
while scrolling

01/25/2002

  Fixed tracking that was spoiled on 12/21/2001 

12/21/2001

  Improved handling of track operations

12/12/2001

  Added Focus rectangle when the trackbar is focused

12/11/2001

  Fixed OnChanging event
  Fixed keyboard operations
  Added ActiveBorderType and InactiveBorderType properties

11/29/2001

  Added Flat property

11/22/2001

  Fixed repainting when Enabled state changes

11/21/2001

  Fixed some artefacts with XP styles enabled

11/17/2001

  Removed flicker with XP styles enabled

11/09/2001

  Transparency fixed.

10/26/2001

  Fixed painting of background with XP styles enabled

10/19/2001

  When Min value is > 0, trackbar worked incorrectly. Fixed.

10/12/2001

  UseXPThemes made published

09/19/2001

  Added Windows XP Themes Support

08/30/2001

  OnTrack event added

*)

unit ElTrackBar;

interface

uses
  SysUtils,
{$ifdef MSWINDOWS}
  Windows,
  Messages,
  Graphics,
  Controls,
  Forms,
  ExtCtrls,
  StdCtrls,
{$ifdef VCL_6_USED}
Types,
{$endif}
{$else}
  Qt,
  QTypes,
  Types,
  QGraphics,
  QControls,
  QForms,
  QMenus,
  QExtCtrls,
  QStdCtrls,
{$endif}
  Classes,
  ElTools,
  ElVCLUtils,
{$IFDEF ELPACK_COMPLETE}
  ElImgFrm,
{$ENDIF}
{$IFDEF HAS_HTML_RENDER}
  HTMLRender,
{$ENDIF}
  ElHintWnd,
  ElTmSchema,
  ElUxTheme,
  ElXPThemedControl
  ;

type

    TElTrackBarOrientation = (toHorizontal, toVertical);

    TElTrackTickPosition = (tpNone, tpAbove, tpBelow, tpBoth);

    TElTrackBarPart = (tbpNowhere, tbSelMarkStart, tbSelMarkEnd, tbpTicksAbove, tbpTicksBelow, tbpTrack, tbpThumb);

    TElTrackThumbType = (tstPointerTop, tstPointerBottom, tstBox);

    TTickMarkMode = (tmmAuto, tmmManual);

    TElTrackHitTestEvent     = procedure(Sender : TObject; X, Y : integer; var Part : TElTrackBarPart; var DefaultTest : boolean) of object;
    TElTrackDrawPartEvent    = procedure(Sender : TObject; Canvas : TCanvas; R : TRect; Part : TElTrackBarPart; Enabled, Focused, Pressed : boolean; var DefaultDraw : boolean) of object;
    TElTrackChangeEvent      = procedure(Sender : TObject; NewPos : integer) of object;
    TElTrackChangingEvent    = procedure(Sender : TObject; var NewPos : integer; var AllowChange : boolean) of object;
    TElTickMarkPositionEvent = procedure(Sender : TObject; PrevPos : integer; var TickPos : integer) of object;

    TElTrackBar = class(TElXPThemedControl)
    private
      FMouseOverPart: TElTrackBarPart;
      FActiveBorderType: TElFlatBorderType;
      FInactiveBorderType: TElFlatBorderType;
      procedure SetActiveBorderType(const Value: TElFlatBorderType);
      procedure SetInactiveBorderType(const Value: TElFlatBorderType);
      procedure WMGetDlgCode(var Msg: TWMGetDlgCode); message WM_GETDLGCODE;
    protected
      FTransparent: Boolean;
      FOrientation: TElTrackBarOrientation;
      FMax: Integer;
      FMin: Integer;
      FPage: Integer;
      FShowTrackHint: Boolean;
      FThumbPos : integer;
      FMouseDown : boolean;
      FImgFormChLink: TImgFormChangeLink;
      FImgForm: TElImageForm;
      FTickPosition: TElTrackTickPosition;
      FOffsetLeft: Integer;
      FOffsetRight: Integer;
      FOnDrawPart: TElTrackDrawPartEvent;
      FOwnerDraw: Boolean;
      FOnChange: TElTrackChangeEvent;
      FOnChanging: TElTrackChangingEvent;
      FThumbType: TElTrackThumbType;
      FTickWidth: Integer;
      FSelStart: Integer;
      FSelEnd: Integer;
      FOnTickMark: TElTickMarkPositionEvent;
      FFrequency: Integer;
      FTickMarkMode: TTickMarkMode;
      FTickColor: TColor;
      FTrackColor: TColor;
      FTrackFrameColor: TColor;
      FTrackWidth: Integer;
      FTrackSelColor: TColor;
      FShowSelection: Boolean;
      FSelectionMarkSize: Integer;
      FThumbWidth: Integer;
      FThumbVisible: Boolean;
      FDown,
      FDragging : boolean;
      FDragPos  : TPoint;
      FSavePosition : integer;
      FSaveThumb : TRect;
      FSaveCapture  : HWND;
      FPosition: Integer;
      FOnHitTest: TElTrackHitTestEvent;
      FDownTimer : TTimer;
      FThumbColor: TColor;
      FOnTrack: TElTrackChangeEvent;
      FFlat: Boolean;
      {$ifdef ELPACK_UNICODE}
      FHint: WideString;
      {$endif}

      function GetPosition: Integer;
      procedure SetOrientation(newValue: TElTrackBarOrientation);
      procedure SetMax(newValue: Integer);
      procedure SetMin(newValue: Integer);
      procedure SetPage(newValue: Integer);
      procedure SetPosition(newValue: Integer);
      procedure DoSetMax(newValue : Integer; Redraw : boolean);
      procedure DoSetMin(newValue : Integer; Redraw : boolean);
      procedure DoSetPage(newValue : Integer; Redraw : boolean);
      procedure DoSetPosition(newValue : Integer; Redraw : boolean);
      function AdjustThumbPos: Integer;
      procedure SetImageForm(newValue: TElImageForm); virtual;
      procedure KeyDown(var Key: Word; Shift: TShiftState); override;
      procedure SetTickPosition(Value: TElTrackTickPosition);
      procedure SetOffsetLeft(Value: Integer);
      procedure SetOffsetRight(Value: Integer);
      procedure TriggerDrawPartEvent(Canvas : TCanvas; R : TRect; Part : 
          TElTrackBarPart; Enabled, Focused, Pressed : boolean; var DefaultDraw : 
          boolean); virtual;
      procedure SetOwnerDraw(Value: Boolean);
      procedure TriggerChangeEvent(NewPos : integer); virtual;
      procedure TriggerChangingEvent(var NewPos : integer; var AllowChange : boolean);
          virtual;
      function GetAutoThumbSize: Integer; virtual;
      procedure CreateParams(var Params : TCreateParams); override;
      procedure SetTransparent(newValue : Boolean); virtual;
      procedure SetThumbType(Value: TElTrackThumbType);
      procedure WMEraseBkgnd(var Msg : TWMEraseBkGnd); message WM_ERASEBKGND;
      procedure SetTickWidth(Value: Integer);
      procedure SetSelStart(Value: Integer);
      procedure SetSelEnd(Value: Integer);
      procedure TriggerTickMarkPositionEvent(PrevPos : integer; var TickPos :
          integer); virtual;
      procedure SetFrequency(Value: Integer);
      procedure SetTickMarkMode(Value: TTickMarkMode);
      procedure SetTickColor(Value: TColor);
      procedure SetTrackColor(Value: TColor);
      procedure SetTrackFrameColor(Value: TColor);
      procedure SetTrackWidth(Value: Integer);
      procedure SetTrackSelColor(Value: TColor);
      procedure SetShowSelection(Value: Boolean);
      procedure SetSelectionMarkSize(Value: Integer);
      function CalcThumbRect: TRect;
      procedure SetThumbWidth(Value: Integer);
      procedure SetThumbVisible(Value: Boolean);
      procedure DrawThumb(Canvas : TCanvas; Rect : TRect);
      procedure MouseDown(Button: TMouseButton; Shift: TShiftState; X, Y: Integer); override;
      procedure MouseMove(Shift: TShiftState; X, Y: Integer); override;
      procedure TriggerHitTestEvent(X, Y : integer; var Part : TElTrackBarPart; var
          DefaultTest : boolean); virtual;
      procedure OnDownTimer(Sender :TObject);
      procedure MouseUp(Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
          override;
      procedure IFMRepaintChildren(var Message: TMessage); message
          IFM_REPAINTCHILDREN;
      procedure WMWindowPosChanged(var Message: TWMWindowPosChanged); message
          WM_WINDOWPOSCHANGED;
      procedure ImageFormChange(Sender : TObject);
      procedure SetThumbColor(Value: TColor);
      procedure TriggerTrackEvent(NewPos : integer); virtual;
      procedure WMMouseWheel(var Msg: TMessage); message WM_MOUSEWHEEL;
      function GetThemedClassName: WideString; override;
      procedure CMEnter(var Msg: TCMEnter); message CM_ENTER;
      procedure CMExit(var Msg: TCMExit); message CM_EXIT;
      procedure CMMouseLeave(var Message : TMessage); message CM_MOUSELEAVE;
      procedure CMEnabledChanged(var Message: TMessage); message CM_ENABLEDCHANGED;
      procedure SetFlat(Value: Boolean);

      {$ifdef ELPACK_UNICODE}
      procedure SetHint(Value: WideString);

      {$ifndef CLX_USED}
      procedure CMHintShow(var Message: TMessage); message CM_HINTSHOW;
      {$else}
      function HintShow(var HintInfo : THintInfo): Boolean; override;
      {$endif}
      {$endif}
      
    public
      constructor Create(AOwner : TComponent); override;
      procedure Paint; override;
      destructor Destroy; override;
      function GetHitTest(X, Y : integer): TElTrackBarPart;

      property Tracking : boolean read FDragging;
    published
      property Orientation: TElTrackBarOrientation read FOrientation write
          SetOrientation default toHorizontal;
      property ImageForm: TElImageForm read FImgForm write SetImageForm;
      property Max: Integer read FMax write SetMax default 20;
      property Min: Integer read FMin write SetMin default 0;
      property Page: Integer read FPage write SetPage default 5;
      property Position: Integer read GetPosition write SetPosition default 0;
      property ShowTrackHint: Boolean read FShowTrackHint write FShowTrackHint
          default false;
      property TickPosition: TElTrackTickPosition read FTickPosition write
          SetTickPosition default tpAbove;
      property OffsetLeft: Integer read FOffsetLeft write SetOffsetLeft default 0;
      property OffsetRight: Integer read FOffsetRight write SetOffsetRight default 0;
      property Transparent: Boolean read FTransparent write SetTransparent default false;
      property OwnerDraw: Boolean read FOwnerDraw write SetOwnerDraw default false;

      property ThumbType: TElTrackThumbType read FThumbType write SetThumbType
          default tstPointerTop;
      property TickWidth: Integer read FTickWidth write SetTickWidth default 3;
      property SelStart: Integer read FSelStart write SetSelStart default 0;
      property SelEnd: Integer read FSelEnd write SetSelEnd;
      property Frequency: Integer read FFrequency write SetFrequency default 2;
      property TickMarkMode: TTickMarkMode read FTickMarkMode write SetTickMarkMode
          default tmmAuto;
      property TickColor: TColor read FTickColor write SetTickColor default clBtnText;
      property TrackColor: TColor read FTrackColor write SetTrackColor default
          clWindow;
      property TrackFrameColor: TColor read FTrackFrameColor write SetTrackFrameColor
          default clBtnShadow;
      property TrackWidth: Integer read FTrackWidth write SetTrackWidth default 10;
      property TrackSelColor: TColor read FTrackSelColor write SetTrackSelColor default clHighlight;
      property ShowSelection: Boolean read FShowSelection write SetShowSelection default false;
      property SelectionMarkSize: Integer read FSelectionMarkSize write
          SetSelectionMarkSize default 5;
      property ThumbWidth: Integer read FThumbWidth write SetThumbWidth default 9;
      property ThumbVisible: Boolean read FThumbVisible write SetThumbVisible default
          true;

      property OnDrawPart: TElTrackDrawPartEvent read FOnDrawPart write FOnDrawPart;
      property OnChange: TElTrackChangeEvent read FOnChange write FOnChange;
      property OnChanging: TElTrackChangingEvent read FOnChanging write FOnChanging;
      property OnTickMark: TElTickMarkPositionEvent read FOnTickMark write
          FOnTickMark;
      property OnHitTest: TElTrackHitTestEvent read FOnHitTest write FOnHitTest;
      property ThumbColor: TColor read FThumbColor write SetThumbColor default 
          clBtnFace;
      property OnTrack: TElTrackChangeEvent read FOnTrack write FOnTrack;

      {$ifdef ELPACK_UNICODE}
      property Hint: WideString read FHint write SetHint;
      {$endif}

      {$IFDEF VCL_4_USED}
      property Anchors;
      {$ENDIF}
      {$IFDEF VCL_4_USED}
      property Constraints;
      {$ENDIF}
      {$IFDEF VCL_4_USED}
      property DragKind;
      {$ENDIF}


      property Align;
      property Color;
  {$ifndef CLX_USED}
      property Ctl3D;
  {$endif}
      property Enabled;
      property ParentColor;
      property ParentShowHint;
      property ShowHint;

      property TabOrder;
      property TabStop;
      property Visible;
      property UseXPThemes;

  {$IFDEF VCL_4_USED}
  {$ifndef CLX_USED}
      property OnStartDock;
      property OnEndDock;
  {$endif}
  {$ENDIF}
  {$IFDEF VCL_5_USED}
      property OnContextPopup;
  {$ENDIF}
      property OnDragDrop;
      property OnDragOver;
      property OnEndDrag;
      property OnEnter;
      property OnExit;
      property OnMouseDown;
      property OnMouseUp;
      property OnMouseMove;
      property OnKeyDown;
      property OnKeyPress;
      property OnKeyUp;
      property OnStartDrag;
      property Flat: Boolean read FFlat write SetFlat default false;
      property ActiveBorderType: TElFlatBorderType read FActiveBorderType write 
          SetActiveBorderType default fbtSunken;
      property InactiveBorderType: TElFlatBorderType read FInactiveBorderType write 
          SetInactiveBorderType default fbtSunkenOuter;
    end;

implementation
end.
