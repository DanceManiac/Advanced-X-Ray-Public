{====================================================}
{                                                    }
{   EldoS Visual Components                          }
{                                                    }
{   Copyright (c) 1998-2002, EldoS                   }
{                                                    }
{====================================================}
unit ElHotKey;

interface

uses
  Windows,
  Messages,
  SysUtils,
  Classes,
  Graphics,
  Controls,
  Forms,
  Dialogs,
  Menus,
{$ifdef VCL_6_USED}
Types,
{$endif}

  ElXPThemedControl,
  ElEdits,
  ElStrUtils;

type
  TElHKInvalidKey = (hcShift, hcAlt, hcCtrl, hcAltShift, hcAltCtrl, hcCtrlShift,
    hcCtrlAlftShift);
  TElHKInvalidKeys = set of TElHKInvalidKey;
  TElHKModifier = (hkShift, hkAlt, hkCtrl);
  TElHKModifiers = set of TElHKModifier;

  TElHotKey = class(TCustomElEdit)
  private
    { Private declarations }
    FText: TElFString;
    FKeyPressed: boolean;
    FInvalidKeys: TElHKInvalidKeys;
    FModifiers: TElHKModifiers;
    FShiftState: TShiftState;
    procedure SetShortCut(newValue: TShortCut);
    procedure WMChar(var Message: TWMChar); message WM_CHAR;
    procedure WMKeyUp(var Message: TWMKeyUp); message WM_KEYUP;
    procedure WMKeyDown(var Message: TWMKeyDown); message WM_KEYDOWN;
    procedure WMSysKeyDown(var Message: TWMKeyDown); message WM_SYSKEYDOWN;
    procedure SetInvalidKeys(Value: TElHKInvalidKeys);
    procedure SetModifiers(Value: TElHKModifiers);
    function ShiftStateToText(state: TShiftState): TElFString;
    function GetShortCut: TShortCut;
    function GetShiftState(state: TShiftState): TShiftState;
  protected
    { Protected declarations }
    procedure KeyDown(var Key: Word; Shift: TShiftState); override;
    procedure KeyUp(var Key: Word; Shift: TShiftState); override;
  public
    { Public declarations }
    constructor Create(AOwner: TComponent); override;

  published
    { Published declarations }
    property HotKey: TShortCut read GetShortCut write SetShortCut;
    property InvalidKeys: TElHKInvalidKeys read FInvalidKeys write
      SetInvalidKeys;
    property Modifiers: TElHKModifiers read FModifiers write SetModifiers;

    property AutoSize;
    property Alignment;
    property Background;
    property BorderSides;
    property UseBackground;
    property RTLContent;
    property Transparent;
    property ReadOnly;
    property LeftMargin;
    property RightMargin;
    property TopMargin;
    property BorderStyle;
    property HideSelection;
{$IFDEF ELPACK_COMPLETE}
    property ImageForm;
{$ENDIF}
    property ActiveBorderType;
    property Flat;
    property InactiveBorderType;
    property LineBorderActiveColor;
    property LineBorderInactiveColor;

    property OnMouseEnter;
    property OnMouseLeave;
    property OnResize;
    property OnChange;

    property Align;

{$IFDEF VCL_4_USED}
    property Anchors;
{$ENDIF}
    property Color;
{$IFDEF VCL_4_USED}
    property Constraints;
{$ENDIF}
    property Ctl3D;
    property DragCursor;
{$IFDEF VCL_4_USED}
    property DragKind;
{$ENDIF}
    property DragMode;
    property Enabled;
    property Font;
    property ParentColor;
    property ParentCtl3D;
    property ParentFont;
    property ParentShowHint;
    property PopupMenu;
    property ShowHint;
    property TabOrder;
    property TabStop;
    property Visible;

    property OnClick;
    property OnDblClick;
    property OnDragDrop;
    property OnDragOver;
    property OnEndDrag;
    property OnEnter;
    property OnExit;
    property OnKeyDown;
    property OnKeyPress;
    property OnKeyUp;
    property OnMouseDown;
    property OnMouseMove;
    property OnMouseUp;

{$IFDEF VCL_4_USED}
{$IFNDEF CLX_USED}
    property OnStartDock;
    property OnEndDock;
{$ENDIF}
{$ENDIF}
{$IFDEF VCL_5_USED}
    property OnContextPopup;
{$ENDIF}
  end;

resourcestring
  rsShiftP = 'Shift+';
  rsAltP = 'Alt+';
  rsCtrlP = 'Ctrl+';
  rsLeftP = 'Left+';
  rsRightP = 'Right+';
  rsMiddleP = 'Middle+';
  rsDoubleP = 'Double+';

const
  nshift: array[0..6] of string = (rsShiftP,
    rsAltP,
    rsCtrlP,
    rsLeftP,
    rsRightP,
    rsMiddleP,
    rsDoubleP);

implementation
end.
