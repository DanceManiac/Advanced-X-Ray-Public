{====================================================}
{                                                    }
{   EldoS Visual Components                          }
{                                                    }
{   Copyright (c) 1998-2001, EldoS                   }
{                                                    }
{====================================================}
{$include elpack2.inc}
{$ifdef ELPACK_SINGLECOMP}
{$I ElPack.inc}
{$else}
{$ifdef LINUX}
{$I ../ElPack.inc}
{$else}
{$I ..\ElPack.inc}
{$endif}
{$endif}

(*

Version History

02/21/2002

  Added handling of Enter key

12/12/2001

  Fixed weekend cells coloring when ShowWeekNum is true 

07/18/2001

  SelectionBorder, DayCellBorder, CurrentDayBorder properties added

07/12/2001

  BorderSides property added.

06/07/2001

  LineColorLight and LineColorDark didn't work. Fixed.
  UseLineColors property added.

09/04/2000

  PeriodInterval = 0 now doesn't freeze the system

*)

unit ElCalendar;

interface

uses
  Classes,
{$ifndef CLX_USED}
  Windows,
  Messages,
  Graphics,
  Controls,
  StdCtrls,
  Forms,
  Buttons,
{$ifdef VCL_6_USED}
Types,
{$endif}
  Grids,
{$ifdef VCL_4_USED}
  ImgList,
{$endif}
{$else}
  Types,
  QTypes,
  Qt,
  QGraphics,
  QControls,
  QForms,
  QButtons,
  QImgList,
  QGrids,
  QStdCtrls,
  ElCLXUtils,
{$endif}
  SysUtils,
  ElTools,
  ElList,
  ElVCLUtils,
  ElUxTheme,
  ElTmSchema,
  ElCalendarDefs;

type

  TElCalendar = class;

  TElCalendar = class(TCustomGrid)
  private
    FHolidayColor : TColor;
    FShowPeriods : Boolean;
    FPeriodStart : TDateTime;
    FPeriodLength : Word;
    FPeriodInterval : Word;
    FPeriodColor : TColor;
    FShowHolidays : Boolean;
    FHolidays : TElHolidays;
    FWeekEndColor : TColor;
    FWeekEndDays : TElWeekEndDays;
    FShowWeekNum : Boolean;
    FDate : TDateTime;
    FMonthOffset : Integer;
    FOnChange : TNotifyEvent;
    FReadOnly : Boolean;
    FStartOfWeek : TDayOfWeek;
    FUpdating : Boolean;
    FUserNavigation : boolean;
    FUseCurrentDate : Boolean;
    FTranslateDays : boolean;
    {$ifndef CLX_USED}
    FMouseOver : boolean;
    {$endif}
    FFlat : boolean;
    FActiveBorderType : TElFlatBorderType;
    FInactiveBorderType : TElFlatBorderType;
    FUseLineColors: Boolean;
    FBorderSides: TElBorderSides;
    FSelectionBorder: TElFlatBorderType;
    FDayCellBorder: TElFlatBorderType;
    FCurrentDayBorder: TElFlatBorderType;

    procedure SetActiveBorderType(newValue : TElFlatBorderType);
    procedure SetInactiveBorderType(newValue : TElFlatBorderType);
    function GetCellText(ACol, ARow : Integer) : string;
    function GetDateElement(Index : Integer) : Integer;
    procedure SetCalendarDate(Value : TDateTime);
    procedure SetDateElement(Index : Integer; Value : Integer);
    procedure SetStartOfWeek(Value : TDayOfWeek);
    procedure SetUseCurrentDate(Value : Boolean);
    function StoreCalendarDate : Boolean;
    procedure SetShowWeekNum(newValue : Boolean);
    procedure SetWeekEndDays(newValue : TElWeekEndDays);
    procedure SetWeekEndColor(newValue : TColor);
    {$ifndef CLX_USED}
    procedure CMHintShow(var Msg : TMessage); message CM_HINTSHOW;
    {$endif}
    procedure SetHolidays(newValue : TElHolidays);
    procedure FixHolidayDate(AHoliday : TElHoliday; var Date : TDateTime);
    procedure SetShowHolidays(newValue : Boolean);
    procedure SetShowPeriods(newValue : Boolean);
    procedure SetPeriodStart(newValue : TDateTime);
    procedure SetPeriodLength(newValue : Word);
    procedure SetPeriodInterval(newValue : Word);
    procedure SetPeriodColor(newValue : TColor);
    procedure SetHolidayColor(newValue : TColor);
    procedure SetDate(newValue : TDateTime);
    procedure SetFlat(newValue : Boolean);
    procedure SetTranslateDays(value : boolean);

    {$ifndef CLX_USED}
    procedure DrawFlatBorder;
    procedure CMMouseEnter(var Msg : TMessage); message CM_MOUSEENTER;
    procedure CMMouseLeave(var Msg : TMessage); message CM_MOUSELEAVE;
    procedure WMNCPaint(var Msg : TMessage); message WM_NCPAINT;
    procedure WMSetFocus(var Msg : TWMSetFocus); message WM_SETFOCUS;
    procedure WMKillFocus(var Msg : TWMKillFocus); message WM_KILLFOCUS;
    procedure WMPaint(var Msg : TWMPaint); message WM_PAINT;
    procedure WMVScroll(var Msg : TWMVScroll); message WM_VSCROLL;
    procedure WMHScroll(var Msg : TWMHScroll); message WM_HSCROLL;
    procedure WMNCCalcSize(var Message : TWMNCCalcSize); message WM_NCCALCSIZE;
    procedure WMSize(var Message : TWMSize); message WM_SIZE;
    {$endif}
    function StoreDate: boolean;
    procedure SetLineColorLight(Value: TColor);
    procedure SetLineColorDark(Value: TColor);
    procedure SetUseLineColors(Value: Boolean);
    procedure SetSelectionBorder(Value: TElFlatBorderType);
    procedure SetDayCellBorder(Value: TElFlatBorderType);
    procedure SetCurrentDayBorder(Value: TElFlatBorderType);

  protected
    FLineColorLight: TColor;
    FLineColorDark: TColor;
    FUseSystemStartOfWeek: Boolean;
    procedure SetBorderSides(Value: TElBorderSides);

    procedure Change; dynamic;
    procedure ChangeMonth(Delta : Integer);
    procedure Click; override;
    function DaysThisMonth : Integer; virtual;
    procedure DrawCell(ACol, ARow : Longint; ARect : TRect; AState : TGridDrawState); override;
    function IsLeapYear(AYear : Integer) : Boolean; virtual;
    function SelectCell(ACol, ARow : Longint) : Boolean; override;
    {$ifdef CLX_USED}
    procedure Resize; override;
    function HintShow(var HintInfo : THintInfo): Boolean; override;
    {$endif}

    procedure Loaded; override;
    {$ifndef CLX_USED}
    procedure UpdateFrame;
    {$endif}
    procedure KeyDown(var Key: Word; Shift: TShiftState); override;
    procedure SetUseSystemStartOfWeek(Value: Boolean);
  public
    constructor Create(AOwner : TComponent); override;
    destructor Destroy; override;
    procedure NextMonth;
    procedure NextYear;
    procedure PrevMonth;
    procedure PrevYear;
    procedure UpdateCalendar; virtual;
    procedure MouseToCell(X, Y : Integer; var ACol, ARow : Longint);

    property CalendarDate : TDateTime read FDate write SetCalendarDate stored StoreCalendarDate;
    property CellText[ACol, ARow : Integer] : string read GetCellText;
    function IsHoliday(AYear, AMonth, ADay : integer) : Boolean;
    function IsInPeriod(AYear, AMonth, ADay : word) : Boolean;

    function IsRestHoliday(AYear, AMonth, ADay : word) : Boolean;
  published
    property Flat : Boolean read FFlat write SetFlat; { Published }

    property Date : TDateTime read FDate write SetDate stored StoreDate;
    property Day : Integer index 3 read GetDateElement write SetDateElement stored False;
    property Holidays : TElHolidays read FHolidays write SetHolidays;
    property Month : Integer index 2 read GetDateElement write SetDateElement stored False;
    property ReadOnly : Boolean read FReadOnly write FReadOnly default False;

    property StartOfWeek : TDayOfWeek read FStartOfWeek write SetStartOfWeek;
    property TranslateDays : boolean read FTranslateDays write SetTranslateDays default true;
    property UseCurrentDate : Boolean read FUseCurrentDate write SetUseCurrentDate default True;
    property Year : Integer index 1 read GetDateElement write SetDateElement stored False;
    property OnChange : TNotifyEvent read FOnChange write FOnChange;

    property ShowWeekNum : Boolean read FShowWeekNum write SetShowWeekNum default False;
    property WeekEndDays : TElWeekEndDays read FWeekEndDays write SetWeekEndDays;
    property WeekEndColor : TColor read FWeekEndColor write SetWeekEndColor default clWindow;
    property ShowHolidays : Boolean read FShowHolidays write SetShowHolidays default True;
    property ShowPeriods : Boolean read FShowPeriods write SetShowPeriods;
    property PeriodStart : TDateTime read FPeriodStart write SetPeriodStart;
    property PeriodLength : Word read FPeriodLength write SetPeriodLength default 1;
    property PeriodInterval : Word read FPeriodInterval write SetPeriodInterval default 28;
    property PeriodColor : TColor read FPeriodColor write SetPeriodColor default clAqua;
    property HolidayColor : TColor read FHolidayColor write SetHolidayColor;
    property ActiveBorderType : TElFlatBorderType read FActiveBorderType write SetActiveBorderType;  { Published }
    property InactiveBorderType : TElFlatBorderType read FInactiveBorderType write SetInactiveBorderType;  { Published }
    property UserNavigation : boolean read FUserNavigation write FUserNavigation;
    property LineColorLight: TColor read FLineColorLight write SetLineColorLight
        stored FUseLineColors default clWindow;
    property LineColorDark: TColor read FLineColorDark write SetLineColorDark
        stored FUseLineColors default clBtnShadow;
    property UseSystemStartOfWeek: Boolean read FUseSystemStartOfWeek write
        SetUseSystemStartOfWeek default false;
    property UseLineColors: Boolean read FUseLineColors write SetUseLineColors
        default true;
    property BorderSides: TElBorderSides read FBorderSides write SetBorderSides;

    property SelectionBorder: TElFlatBorderType read FSelectionBorder write
        SetSelectionBorder;
    property DayCellBorder: TElFlatBorderType read FDayCellBorder write
        SetDayCellBorder;
    property CurrentDayBorder: TElFlatBorderType read FCurrentDayBorder write
        SetCurrentDayBorder;

    property Align;
    property BorderStyle;
    property Color;
    {$ifndef CLX_USED}
    property Ctl3D;
    {$endif}
    property Enabled;
    property Font;
    property GridLineWidth;
    property ParentColor;
    property ParentFont;
    property ParentShowHint;
    property PopupMenu;
    property ShowHint;
    property TabOrder;
    property TabStop;
    property Visible;

    property OnClick;
    property OnDblClick;
    property OnDragDrop;
    property OnDragOver;
    property OnEndDrag;
    property OnEnter;
    property OnExit;
    property OnKeyDown;
    property OnKeyPress;
    property OnKeyUp;
    property OnStartDrag;

{$IFDEF VCL_4_USED}
    property Anchors;
    property Action;
    property Constraints;
    {$ifndef CLX_USED}
    property DockOrientation;
    property Floating;
    property BevelKind;
    property DoubleBuffered;
    property DragKind;
    {$endif}
{$ENDIF}
  end;

implementation
end.
