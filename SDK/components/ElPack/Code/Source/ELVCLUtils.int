{====================================================}
{                                                    }
{   EldoS Visual Components                          }
{                                                    }
{   Copyright (c) 1998-2001, EldoS                   }
{                                                    }
{====================================================}

{$include elpack2.inc}
{$ifdef ELPACK_SINGLECOMP}
{$I ElPack.inc}
{$else}
{$ifdef LINUX}
{$I ../ElPack.inc}
{$else}
{$I ..\ElPack.inc}
{$endif}
{$endif}

(*

Version History

11/28/2001

  New border style, fbtColorLineBorder, added

11/01/2001

  8K limitation in DrawTextW removed.

10/11/2001

  Overhang was not taken into account in NextLineW. Fixed.
  DrawFlatScrollbars incorrectly calculated the position of scrollbar in control
  that had Ctl3D = false. Fixed.

10/05/2001

  Fixed measurement of single-line DT_WORDWRAP'ed text in DrawTextW 

09/12/2001

  Fixed the problem with fonts synthesized by GDI in DrawTextExW

09/11/2001

  DrawTextExW fixed to support lines with up to 8192 characters

09/08/2001

  Fixed some problems with incorrect rectangle in DrawTextExW

08/22/2001

  DrawTextW added to provide Unicode support in Win 9x. 

07/27/2001

  Added AlphaFill method
  
05/27/2001 (c) Akzhan Abdulin

    DrawButtonFrameEx2 rewritten to support clNone color

*)

unit ElVCLUtils;

interface

uses
{$ifndef CLX_USED}
     Messages,
     Windows,
     Forms,
     Graphics,
     StdCtrls,
     Controls,
     Registry,
{$ifdef VCL_6_USED}
Types,
{$endif}
{$endif}
     Classes,
     SysUtils,
     ElStrUtils,
{$ifdef ELPACK_UNICODE}
     ElUnicodeStrings,
{$endif}
     ElTools;

const
  MOUSE_WHEEL_DELTA = 120;
  {$ifndef B_5_UP}
  DT_HIDEPREFIX     = $00100000;
  WM_CHANGEUISTATE  = $0127;
  WM_UPDATEUISTATE  = $0128;
  WM_QUERYUISTATE   = $0129;
  {$endif}
  {$ifdef B_4_UP}
  {$EXTERNALSYM SPI_GETKEYBOARDCUES}
  SPI_GETKEYBOARDCUES = $100A;  
  {$else}
  SPI_GETKEYBOARDCUES = $100A;  
  {$endif}

  SC_DRAGMOVE = $F012;
var
  ParentControlRepaintedMessage : DWORD;

{$IFNDEF VCL_4_USED}
type
  TWMMouseWheel = record
    Msg : Cardinal;
    Keys : SmallInt;
    WheelDelta : SmallInt;
    case Integer of
      0 : (
        XPos : Smallint;
        YPos : Smallint);
      1 : (
        Pos : TSmallPoint;
        Result : Longint);
  end;

{$ENDIF}

{$ifndef VCL_4_USED}
type
  TImageIndex = type Integer;
{$else}
{$ifndef B_5_UP}
type
  TImageIndex = type Integer;
{$endif}
{$endif}

type
  TBlendFunction = record
    BlendOp: Byte;
    BlendFlags: Byte;
    SourceConstantAlpha: Byte;
    AlphaFormat: Byte;
  end;

{$ifndef CLX_USED}
type
  TAlphaBlend =
    function(
      hdcDest: HDC;                     // handle to destination DC
      nXOriginDest: Integer;            // x-coord of upper-left corner
      nYOriginDest: Integer;            // y-coord of upper-left corner
      nWidthDest: Integer;              // destination width
      nHeightDest: Integer;             // destination height
      hdcSrc: HDC;                      // handle to source DC
      nXOriginSrc: Integer;             // x-coord of upper-left corner
      nYOriginSrc: Integer;             // y-coord of upper-left corner
      nWidthSrc: Integer;               // source width
      nHeightSrc: Integer;              // source height
      blendFunction: Integer            // alpha-blending function
      ): BOOL; stdcall;
{$endif}

type
  TElBkGndType = (bgtTileBitmap, bgtStretchBitmap, bgtColorFill, bgtCenterBitmap, bgtHorzGradient, bgtVertGradient, bgtTopLeftBitmap);
  TElBorderSide = (ebsLeft, ebsRight, ebsTop, ebsBottom);
  TElBorderSides = set of TElBorderSide;
  TElFlatBorderType = (fbtFlat, fbtSunken, fbtSunkenInner,
                       fbtSunkenOuter, fbtRaised, fbtRaisedInner, fbtRaisedOuter,
                       fbtBump, fbtBigBump, fbtEtched, fbtFramed,
                       fbtLine, fbtLineBorder, fbtNone, fbtColorLineBorder);

  TElTextDrawType = (tdtNormal, tdtShadowed, tdtRaised);
  TElArrowDir = (eadLeft, eadUp, eadRight, eadDown);

  TTaskbarEdge = (tbeBottom, tbeLeft, tbeTop, tbeRight);

  TElTextCase = (etcNoChange, etcUppercase, etcLowercase);


const

  AllBorderSides : TElBorderSides = [ebsLeft, ebsRight, ebsTop, ebsBottom];

{$ifndef CLX_USED}

{$ifdef VCL_6_USED}
//type TPoint = Types.TPoint;
//     TRect = Types.TRect;
{$endif}

const
  smXEdge : array[boolean] of DWORD = (SM_CXBORDER, SM_CXEDGE);
  smYEdge : array[boolean] of DWORD = (SM_CYBORDER, SM_CYEDGE);


function GetSysTrayRect : TRect;
function GetTaskbarEdge : TTaskbarEdge;
function GetTaskbarRect : TRect;

procedure MinimizeToTray (Wnd : HWND);
{$endif}

procedure GradientFill(DC : HDC; R : TRect; StartColor, EndColor : TColor; Steps : integer; Vertical : boolean);

procedure GradientFillEx(DC : HDC; DCRect, R : TRect; Origin : TPoint;
                         StartColor, EndColor : TColor; Steps : integer;
                         Vertical : boolean);
// DCRect - the rectangle of the "real DC", i.e. the DC, on which the painting is
//          usually performed
// R      - the real rectangle to be painted
// Origin - The original point, i.e. the point, which, when addded to R, would have
//          been copied from the "real DC"

function GetTopOwnerControl(Component : TComponent) : TControl;
function GetOwnerForm(Component : TComponent) : TForm;

function GetKeybTimes(TimeKind : integer) : integer;
// correct parameter values are SPI_GETKEYBOARDDELAY and SPI_GETKEYBOARDSPEED

{$ifndef CLX_USED}
function FindVCLChild(Control : TWinControl; ChildHandle : HWND) : TWinControl;

function HitTest(R : TRect; Pt : TPoint; CornerSize, BorderSize : integer) : integer;

//procedure FillSolidRect2(DC : QPainterH; Rect : TRect; Color : TColor);
//procedure FillSolidRect(DC : QPainterH; x, y, cx, cy : integer; Color : TColor);
{$endif}


procedure FillSolidRect2(DC : HDC; Rect : TRect; Color : TColor);
procedure FillSolidRect(DC : HDC; x, y, cx, cy : integer; Color : TColor);

procedure TiledPaint(Canvas : TCanvas; Bitmap : TBitmap; Rect : TRect);
// destination rectangle is meant.

procedure DrawButtonFrame(DC : HDC; rc : TRect; Focused : boolean; Pushed : boolean);
procedure DrawButtonFrameEx(DC : HDC; rc : TRect; Focused : boolean; Pushed : boolean;
                            ButtonColor : TColor; Thin : boolean);
procedure DrawButtonFrameEx2(DC : HDC; rc : TRect; Focused : boolean; Pushed : boolean;
                            ButtonColor : TColor; Thin : boolean; clrHighlight, clrDkShadow, clrFace, clrShadow : TColor);
procedure DrawButtonFrameEx3(DC : HDC; rc : TRect; Focused : boolean; Pushed : boolean;
                            ButtonColor : TColor; Thin : boolean; BorderSides : TElBorderSides);
procedure Draw3dBorder(DC : HDC; rc : TRect; nColor1, nColor2, nColor3, nColor4 : TColor);

procedure Draw3dRectEx(DC : HDC; x, y, cx, cy : integer; clrTopLeft,
{$ifndef CLX_USED}
  clrBottomRight : COLORREF;
{$endif}
  BorderSides : TElBorderSides);

{$ifndef CLX_USED}
function DrawBevel(DC : HDC; R : TRect; Color1, Color2 : TColor; Sides : TElBorderSides) : TRect;
{$endif}

{$ifndef CLX_USED}
function DrawFlatFrame(DC : HDC; R : TRect; BkColor : TColor; Focused : boolean) : TRect;
function DrawFlatFrame2(DC : HDC; R : TRect; BkColor : TColor; Focused : boolean; BorderSides : TElBorderSides) : TRect;
procedure DrawFlatFrameEx(DC : HDC; R : TRect; BkColor : TColor; Focused, Enabled : boolean);
procedure DrawFlatFrameEx2(DC : HDC; R : TRect; Color, BkColor : TColor;
                           Focused, Enabled : boolean;
                           BorderSides : TElBorderSides;
                           BorderType : TElFlatBorderType);
{$endif}

{$ifndef CLX_USED}
function DrawFlatScrollbars(
        {$ifndef CLX_USED}
        Wnd : HWND; DC : HDC;
        {$else}
        Wnd : QWidgetH; DC : QPainterH;
        {$endif}
        Rect : TRect; Focused : boolean;
        ScrollBars : TScrollStyle; DragHorz, DragVert : boolean;
        IsControl : boolean; Style, ExStyle : integer): TRect;
{$endif}

procedure DrawTypedText(Canvas : TCanvas; Bounds : TRect; Text : string; Flags : integer; DrawType : TElTextDrawType);
procedure DrawTypedTextW(Canvas : TCanvas; Bounds : TRect; Text : WideString; Flags : integer; DrawType : TElTextDrawType);

procedure DrawFlatScrollbarThumb(DC : HDC; rc : TRect; Focused : boolean);

{$ifndef CLX_USED}
procedure DrawTransparentBitmapEx(DC : HDC; Bitmap : TBitmap; X, Y : integer; Src : TRect; Transparent : TColor);
{$endif}

procedure DrawArrow(Canvas : TCanvas; Dir : TElArrowDir; R : TRect; Color : TColor; Enabled : boolean);

function RectsIntersect(R1, R2 : TRect) : boolean;

{$ifndef CLX_USED}

function GetDesktopTop    : integer;
function GetDesktopLeft   : integer;
function GetDesktopBottom : integer;
function GetDesktopRight  : integer;
function GetDesktopRect   : TRect;

function GetWorkSpaceTop    : integer;
function GetWorkSpaceLeft   : integer;
function GetWorkSpaceBottom : integer;
function GetWorkSpaceRight  : integer;
function GetWorkSpaceRect   : TRect;
{$endif}

const
  WaitCursor: TCursor = crHourGlass;

procedure StartWait;
procedure StopWait;

function InvertColor(aColor: TColor): TColor;

function RGBtoHLS(rgbc: integer): integer;
function HLStoRGB(hlsc: integer): integer;

{$ifndef CLX_USED}
procedure DrawFlatScrollBarsEx(
        {$ifndef CLX_USED}
        Wnd : HWND; DC : HDC;
        {$endif}
        Rect : TRect; Focused : boolean; ScrollBars : TScrollStyle;
        DragHorz, DragVert : boolean; IsControl : boolean;
        BkColor, DitherColor,  ButtonColor, ArrowColor, HotButtonColor : TColor;
        DrawFrames, DitherBack : boolean);

procedure DrawFlatScrollBarEx(
        {$ifndef CLX_USED}
        Wnd : HWND; DC : HDC;
        {$endif}
        Rect : TRect; nType : integer; bScrollbarCtrl : boolean;
        Dragging : boolean; Focused : boolean;
        BkColor, DitherColor, ButtonColor, ArrowColor, HotButtonColor : TColor;
        DrawFrames, DitherBack : boolean);

function AlphaBlend(
  hdcDest: HDC;                     // handle to destination DC
  nXOriginDest: Integer;            // x-coord of upper-left corner
  nYOriginDest: Integer;            // y-coord of upper-left corner
  nWidthDest: Integer;              // destination width
  nHeightDest: Integer;             // destination height
  hdcSrc: HDC;                      // handle to source DC
  nXOriginSrc: Integer;             // x-coord of upper-left corner
  nYOriginSrc: Integer;             // y-coord of upper-left corner
  nWidthSrc: Integer;               // source width
  nHeightSrc: Integer;              // source height
  SourceConstantAlpha: Byte;        // Specifies an alpha transparency value to be used on the entire source bitmap
  srcAlpha : byte
  ): Boolean;
{$endif}

{$ifndef CLX_USED}
procedure AlphaCopyRect(DestCanvas : TCanvas; Dest: TRect; SourceCanvas: TCanvas; Source: TRect; AlphaLevel : byte; UseAlphaLevel : boolean);
procedure AlphaFillRect(Canvas : TCanvas; Rect : TRect; Color : TColor; AlphaLevel : byte);
{$endif}

{$ifndef CLX_USED}
function DrawTextW(hDC: HDC; lpString: PWideChar; nCount: Integer; var lpRect: TRect; uFormat: UINT): Integer;
function GetSysColorPen(Color : COLORREF) : HPEN;
{$endif}

function IncColor(const Color : TColor; RInc, GInc, BInc : integer) : integer;

procedure DrawFocus(Canvas : TCanvas; R : TRect);

{$ifndef CLX_USED}
function Win2KHideUIState : boolean;
{$endif}

function ModalFormVisible : boolean;

{$ifndef CLX_USED}
function ShiftStateToKeyData(Shift : TShiftState) : integer;
{$endif}

function GetTimeAMChar : char;
function GetTimePMChar : char;

{$ifdef BUILDER_USED}
{$EXTERNALSYM GetGValue}
function GetGValue(aColor : TColor) : byte;
{$EXTERNALSYM GetBValue}
function GetBValue(aColor : TColor) : byte;
{$EXTERNALSYM GetRValue}
function GetRValue(aColor : TColor) : byte;
{$EXTERNALSYM RGB}
function RGB(R, G, B : byte) : TColor;
{$else}
function GetGValue(aColor : TColor) : byte;
function GetBValue(aColor : TColor) : byte;
function GetRValue(aColor : TColor) : byte;
function RGB(R, G, B : byte) : TColor;
{$endif}

{$ifdef ELPACK_UNICODE}
function GetShortHintW(Hint : WideString) : WideString;
{$endif}

implementation
end.
