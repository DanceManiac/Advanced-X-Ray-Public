; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	D:\CLEARSKY\sources\engine\xrEngine\device.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?OnRender@CLoadScreenRenderer@@UAEXXZ		; CLoadScreenRenderer::OnRender
PUBLIC	?RemoveSeqFrame@CRenderDevice@@EAGXPAVpureFrame@@@Z ; CRenderDevice::RemoveSeqFrame
PUBLIC	?AddSeqFrame@CRenderDevice@@EAGXPAVpureFrame@@_N@Z ; CRenderDevice::AddSeqFrame
PUBLIC	??B?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@QBEP80@BEPAVIRender_Light@@XZXZ ; resptr_core<IRender_Light,resptrcode_light>::operator IRender_Light * (__thiscall resptr_core<IRender_Light,resptrcode_light>::*)(void)const 
PUBLIC	?mul@?$_matrix@M@@QAEAAU1@ABU1@0@Z		; _matrix<float>::mul
PUBLIC	?Process@?$CRegistrator@VpureRender@@@@QAEXP6IXPAX@Z@Z ; CRegistrator<pureRender>::Process
PUBLIC	?size@?$vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@stlp_std@@QBEIXZ ; stlp_std::vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::size
PUBLIC	?size@?$xr_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@@QBEIXZ ; xr_vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::size
PUBLIC	?_M_erase@?$_Impl_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@priv@stlp_std@@AAEPAV?$FastDelegate0@X@fastdelegate@@PAV45@0ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::_M_erase
PUBLIC	?erase@?$_Impl_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@priv@stlp_std@@QAEPAV?$FastDelegate0@X@fastdelegate@@PAV45@0@Z ; stlp_std::priv::_Impl_vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::erase
PUBLIC	?erase@?$vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@stlp_std@@QAEPAV?$FastDelegate0@X@fastdelegate@@PAV34@0@Z ; stlp_std::vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::erase
PUBLIC	?clear_not_free@?$xr_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@@QAEXXZ ; xr_vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::clear_not_free
PUBLIC	??A?$xr_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@@QAEAAV?$FastDelegate0@X@fastdelegate@@I@Z ; xr_vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::operator[]
PUBLIC	?GetClosureThis@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AG_NXZP6G_NXZP6G_NXZ@detail@fastdelegate@@QBEPAVGenericClass@23@XZ ; fastdelegate::detail::ClosurePtr<bool (__stdcall fastdelegate::detail::GenericClass::*)(void),bool (__stdcall*)(void),bool (__stdcall*)(void)>::GetClosureThis
PUBLIC	?GetClosureMemPtr@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AG_NXZP6G_NXZP6G_NXZ@detail@fastdelegate@@QBEP8GenericClass@23@AG_NXZXZ ; fastdelegate::detail::ClosurePtr<bool (__stdcall fastdelegate::detail::GenericClass::*)(void),bool (__stdcall*)(void),bool (__stdcall*)(void)>::GetClosureMemPtr
PUBLIC	??R?$FastDelegate0@_N@fastdelegate@@QBE_NXZ	; fastdelegate::FastDelegate0<bool>::operator()
PUBLIC	?begin@?$list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@stlp_std@@QAE?AU?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Nonconst_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@2@XZ ; stlp_std::list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::begin
PUBLIC	??D?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Nonconst_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@stlp_std@@QBEAAV?$FastDelegate0@_N@fastdelegate@@XZ ; stlp_std::priv::_List_iterator<fastdelegate::FastDelegate0<bool>,stlp_std::_Nonconst_traits<fastdelegate::FastDelegate0<bool> > >::operator*
PUBLIC	?front@?$list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@stlp_std@@QAEAAV?$FastDelegate0@_N@fastdelegate@@XZ ; stlp_std::list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::front
PUBLIC	?begin@?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAE?AU?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Nonconst_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@23@XZ ; stlp_std::priv::_Impl_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::begin
PUBLIC	??0?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Nonconst_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@stlp_std@@QAE@PAU_List_node_base@12@@Z ; stlp_std::priv::_List_iterator<fastdelegate::FastDelegate0<bool>,stlp_std::_Nonconst_traits<fastdelegate::FastDelegate0<bool> > >::_List_iterator<fastdelegate::FastDelegate0<bool>,stlp_std::_Nonconst_traits<fastdelegate::FastDelegate0<bool> > >
PUBLIC	?erase@?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAE?AU?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Nonconst_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@23@U423@@Z ; stlp_std::priv::_Impl_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::erase
PUBLIC	?pop_front@?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAEXXZ ; stlp_std::priv::_Impl_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::pop_front
PUBLIC	?pop_front@?$list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@stlp_std@@QAEXXZ ; stlp_std::list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::pop_front
PUBLIC	?begin@?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QBE?AU?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@23@XZ ; stlp_std::priv::_Impl_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::begin
PUBLIC	??0?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@stlp_std@@QAE@PAU_List_node_base@12@@Z ; stlp_std::priv::_List_iterator<fastdelegate::FastDelegate0<bool>,stlp_std::_Const_traits<fastdelegate::FastDelegate0<bool> > >::_List_iterator<fastdelegate::FastDelegate0<bool>,stlp_std::_Const_traits<fastdelegate::FastDelegate0<bool> > >
PUBLIC	?end@?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QBE?AU?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@23@XZ ; stlp_std::priv::_Impl_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::end
PUBLIC	??E?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@stlp_std@@QAEAAU012@XZ ; stlp_std::priv::_List_iterator<fastdelegate::FastDelegate0<bool>,stlp_std::_Const_traits<fastdelegate::FastDelegate0<bool> > >::operator++
PUBLIC	??9?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@stlp_std@@QBE_NU012@@Z ; stlp_std::priv::_List_iterator<fastdelegate::FastDelegate0<bool>,stlp_std::_Const_traits<fastdelegate::FastDelegate0<bool> > >::operator!=
PUBLIC	??$__distance@U?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@stlp_std@@@stlp_std@@YAHABU?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@0@0ABUinput_iterator_tag@0@@Z ; stlp_std::__distance<stlp_std::priv::_List_iterator<fastdelegate::FastDelegate0<bool>,stlp_std::_Const_traits<fastdelegate::FastDelegate0<bool> > > >
PUBLIC	??$distance@U?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@stlp_std@@@stlp_std@@YAHU?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@0@0@Z ; stlp_std::distance<stlp_std::priv::_List_iterator<fastdelegate::FastDelegate0<bool>,stlp_std::_Const_traits<fastdelegate::FastDelegate0<bool> > > >
PUBLIC	?size@?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::size
PUBLIC	?size@?$list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@stlp_std@@QBEIXZ ; stlp_std::list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::size
PUBLIC	?size@?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@QBEIXZ ; xr_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::size
PUBLIC	?Process@?$CRegistrator@VpureFrame@@@@QAEXP6IXPAX@Z@Z ; CRegistrator<pureFrame>::Process
PUBLIC	?Process@?$CRegistrator@VpureAppActivate@@@@QAEXP6IXPAX@Z@Z ; CRegistrator<pureAppActivate>::Process
PUBLIC	?Process@?$CRegistrator@VpureAppDeactivate@@@@QAEXP6IXPAX@Z@Z ; CRegistrator<pureAppDeactivate>::Process
PUBLIC	?Process@?$CRegistrator@VpureAppStart@@@@QAEXP6IXPAX@Z@Z ; CRegistrator<pureAppStart>::Process
PUBLIC	?Process@?$CRegistrator@VpureAppEnd@@@@QAEXP6IXPAX@Z@Z ; CRegistrator<pureAppEnd>::Process
PUBLIC	?empty@?$_List_base@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QBE_NXZ ; stlp_std::priv::_List_base<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::empty
PUBLIC	?empty@?$list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@stlp_std@@QBE_NXZ ; stlp_std::list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::empty
PUBLIC	??4?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@QAEAAV0@ABV0@@Z ; resptr_core<IRender_Light,resptrcode_light>::operator=
PUBLIC	??C?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@QBEPAVIRender_Light@@XZ ; resptr_core<IRender_Light,resptrcode_light>::operator->
PUBLIC	??7?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@QBE_NXZ ; resptr_core<IRender_Light,resptrcode_light>::operator!
PUBLIC	??0?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@QAE@XZ ; xalloc<fastdelegate::FastDelegate0<bool> >::xalloc<fastdelegate::FastDelegate0<bool> >
PUBLIC	?_M_empty_initialize@?$_List_base@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAEXXZ ; stlp_std::priv::_List_base<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::_M_empty_initialize
PUBLIC	??0?$xalloc@V?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@@@QAE@ABV0@@Z ; xalloc<stlp_std::priv::_List_node<fastdelegate::FastDelegate0<bool> > >::xalloc<stlp_std::priv::_List_node<fastdelegate::FastDelegate0<bool> > >
PUBLIC	??0?$_STLP_alloc_proxy@U_List_node_base@priv@stlp_std@@V?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@23@V?$xalloc@V?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@@@@priv@stlp_std@@QAE@ABV?$xalloc@V?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@@@U_List_node_base@12@@Z ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::priv::_List_node_base,stlp_std::priv::_List_node<fastdelegate::FastDelegate0<bool> >,xalloc<stlp_std::priv::_List_node<fastdelegate::FastDelegate0<bool> > > >::_STLP_alloc_proxy<stlp_std::priv::_List_node_base,stlp_std::priv::_List_node<fastdelegate::FastDelegate0<bool> >,xalloc<stlp_std::priv::_List_node<fastdelegate::FastDelegate0<bool> > > >
PUBLIC	??$?0V?$FastDelegate0@_N@fastdelegate@@@?$xalloc@V?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@@@QAE@ABV?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@Z ; xalloc<stlp_std::priv::_List_node<fastdelegate::FastDelegate0<bool> > >::xalloc<stlp_std::priv::_List_node<fastdelegate::FastDelegate0<bool> > ><fastdelegate::FastDelegate0<bool> >
PUBLIC	??0?$_List_base@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAE@ABV?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@Z ; stlp_std::priv::_List_base<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::_List_base<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >
PUBLIC	??0?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAE@ABV?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@Z ; stlp_std::priv::_Impl_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::_Impl_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >
PUBLIC	??0?$list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@stlp_std@@QAE@ABV?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@Z ; stlp_std::list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >
PUBLIC	??0?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@QAE@XZ ; xr_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::xr_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >
PUBLIC	??$xr_free@V?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@@@YAXAAPAV?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@@Z ; xr_free<stlp_std::priv::_List_node<fastdelegate::FastDelegate0<bool> > >
PUBLIC	?deallocate@?$xalloc@V?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@@@QBEXPAV?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@I@Z ; xalloc<stlp_std::priv::_List_node<fastdelegate::FastDelegate0<bool> > >::deallocate
PUBLIC	??$__destroy_aux@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@YAXPAV?$FastDelegate0@_N@fastdelegate@@ABU__true_type@0@@Z ; stlp_std::__destroy_aux<fastdelegate::FastDelegate0<bool> >
PUBLIC	??$_Destroy@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@YAXPAV?$FastDelegate0@_N@fastdelegate@@@Z ; stlp_std::_Destroy<fastdelegate::FastDelegate0<bool> >
PUBLIC	?clear@?$_List_base@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAEXXZ ; stlp_std::priv::_List_base<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::clear
PUBLIC	??1?$_List_base@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAE@XZ ; stlp_std::priv::_List_base<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::~_List_base<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >
PUBLIC	??1?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAE@XZ ; stlp_std::priv::_Impl_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::~_Impl_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >
PUBLIC	??1?$list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@stlp_std@@QAE@XZ ; stlp_std::list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::~list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >
PUBLIC	??1?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@QAE@XZ ; xr_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::~xr_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >
PUBLIC	??0?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@QAE@PAVIRender_Light@@_N@Z ; resptr_core<IRender_Light,resptrcode_light>::resptr_core<IRender_Light,resptrcode_light>
PUBLIC	??1?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@QAE@XZ ; resptr_core<IRender_Light,resptrcode_light>::~resptr_core<IRender_Light,resptrcode_light>
PUBLIC	?g_bRendering@@3HA				; g_bRendering
PUBLIC	?g_bLoaded@@3HA					; g_bLoaded
PUBLIC	??_C@_0BF@POONHHLC@CRenderDevice?3?3Begin?$AA@	; `string'
PUBLIC	??_C@_0CP@NGFEBHDG@D?3?2CLEARSKY?2sources?2engine?2xrEng@ ; `string'
PUBLIC	??_C@_0BF@FHJFOAFF@?$CK?5MEMORY?5USAGE?3?5?$CFd?5K?$AA@ ; `string'
PUBLIC	??_C@_0CF@MGEIHOOO@?$CK?5End?5of?5synchronization?5A?$FL?$CFd?$FN?5R@ ; `string'
PUBLIC	??_C@_0BC@PKHGFLJB@application?5start?$AA@	; `string'
PUBLIC	?mt_Thread_marker@@3IC				; mt_Thread_marker
PUBLIC	?g_svDedicateServerUpdateReate@@3HA		; g_svDedicateServerUpdateReate
PUBLIC	??_C@_0BD@ELDMCEDA@Starting?5engine?4?4?4?$AA@	; `string'
PUBLIC	??_C@_0BF@IMGDMJOI@X?9RAY?5Primary?5thread?$AA@	; `string'
PUBLIC	??_C@_0BH@NELKNIPN@X?9RAY?5Secondary?5thread?$AA@ ; `string'
PUBLIC	?app_inactive_time@@3IA				; app_inactive_time
PUBLIC	?app_inactive_time_start@@3IA			; app_inactive_time_start
PUBLIC	?bShowPauseString@@3HA				; bShowPauseString
EXTRN	__imp__GetWindowInfo@8:PROC
EXTRN	__imp_?mem_compact@xrMemory@@QAEXXZ:PROC
EXTRN	__imp_?FrameStart@CStatTimer@@QAEXXZ:PROC
EXTRN	__imp_?FrameEnd@CStatTimer@@QAEXXZ:PROC
EXTRN	_D3DXMatrixInverse@12:PROC
EXTRN	__imp__TranslateMessage@4:PROC
EXTRN	__imp__DispatchMessageA@4:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp_?Pause@pauseMngr@@QAEXH@Z:PROC
EXTRN	__imp__ShowCursor@4:PROC
EXTRN	__imp_?Paused@pauseMngr@@QAEHXZ:PROC
EXTRN	__imp_?g_pauseMngr@@3VpauseMngr@@A:BYTE
EXTRN	__imp_?thread_name@@YAXPBD@Z:PROC
EXTRN	__imp_?thread_spawn@@YAXP6AXPAX@ZPBDI0@Z:PROC
EXTRN	__imp__timeGetTime@0:PROC
?g_bRendering@@3HA DD 01H DUP (?)			; g_bRendering
?g_bLoaded@@3HA DD 01H DUP (?)				; g_bLoaded
;	COMDAT ?ignore_always@?5??Begin@CRenderDevice@@QAEHXZ@4_NA
_BSS	SEGMENT
?ignore_always@?5??Begin@CRenderDevice@@QAEHXZ@4_NA DB 01H DUP (?) ; `CRenderDevice::Begin'::`6'::ignore_always
?app_inactive_time@@3IA DD 01H DUP (?)			; app_inactive_time
?app_inactive_time_start@@3IA DD 01H DUP (?)		; app_inactive_time_start
;	COMDAT ?snd_emitters_@?1??Pause@CRenderDevice@@QAEXHHHPBD@Z@4HA
_DATA	SEGMENT
?snd_emitters_@?1??Pause@CRenderDevice@@QAEXHHHPBD@Z@4HA DD 0ffffffffH ; `CRenderDevice::Pause'::`2'::snd_emitters_
_DATA	ENDS
;	COMDAT ??_C@_0BH@NELKNIPN@X?9RAY?5Secondary?5thread?$AA@
CONST	SEGMENT
??_C@_0BH@NELKNIPN@X?9RAY?5Secondary?5thread?$AA@ DB 'X-RAY Secondary thr'
	DB	'ead', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IMGDMJOI@X?9RAY?5Primary?5thread?$AA@
CONST	SEGMENT
??_C@_0BF@IMGDMJOI@X?9RAY?5Primary?5thread?$AA@ DB 'X-RAY Primary thread', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@ELDMCEDA@Starting?5engine?4?4?4?$AA@
CONST	SEGMENT
??_C@_0BD@ELDMCEDA@Starting?5engine?4?4?4?$AA@ DB 'Starting engine...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PKHGFLJB@application?5start?$AA@
CONST	SEGMENT
??_C@_0BC@PKHGFLJB@application?5start?$AA@ DB 'application start', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@MGEIHOOO@?$CK?5End?5of?5synchronization?5A?$FL?$CFd?$FN?5R@
CONST	SEGMENT
??_C@_0CF@MGEIHOOO@?$CK?5End?5of?5synchronization?5A?$FL?$CFd?$FN?5R@ DB '*'
	DB	' End of synchronization A[%d] R[%d]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FHJFOAFF@?$CK?5MEMORY?5USAGE?3?5?$CFd?5K?$AA@
CONST	SEGMENT
??_C@_0BF@FHJFOAFF@?$CK?5MEMORY?5USAGE?3?5?$CFd?5K?$AA@ DB '* MEMORY USAG'
	DB	'E: %d K', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@NGFEBHDG@D?3?2CLEARSKY?2sources?2engine?2xrEng@
CONST	SEGMENT
??_C@_0CP@NGFEBHDG@D?3?2CLEARSKY?2sources?2engine?2xrEng@ DB 'D:\CLEARSKY'
	DB	'\sources\engine\xrEngine\device.cpp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@POONHHLC@CRenderDevice?3?3Begin?$AA@
CONST	SEGMENT
??_C@_0BF@POONHHLC@CRenderDevice?3?3Begin?$AA@ DB 'CRenderDevice::Begin', 00H ; `string'
?mt_Thread_marker@@3IC DD 012345678H			; mt_Thread_marker
?g_svDedicateServerUpdateReate@@3HA DD 064H		; g_svDedicateServerUpdateReate
?bShowPauseString@@3HA DD 01H				; bShowPauseString
_EPS_S	DD	033d6bf95r			; 1e-007
_PI_MUL_2 DD	040c90fdbr			; 6.28319
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_list.h
;	COMDAT ??9?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@stlp_std@@QBE_NU012@@Z
_TEXT	SEGMENT
___y$ = 8						; size = 4
??9?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@stlp_std@@QBE_NU012@@Z PROC ; stlp_std::priv::_List_iterator<fastdelegate::FastDelegate0<bool>,stlp_std::_Const_traits<fastdelegate::FastDelegate0<bool> > >::operator!=, COMDAT
; _this$ = ecx

; 144  :     return this->_M_node != __y._M_node;

	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	cmp	edx, DWORD PTR ___y$[esp-4]
	setne	al

; 145  :   }

	ret	4
??9?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@stlp_std@@QBE_NU012@@Z ENDP ; stlp_std::priv::_List_iterator<fastdelegate::FastDelegate0<bool>,stlp_std::_Const_traits<fastdelegate::FastDelegate0<bool> > >::operator!=
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$__destroy_aux@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@YAXPAV?$FastDelegate0@_N@fastdelegate@@ABU__true_type@0@@Z
_TEXT	SEGMENT
??$__destroy_aux@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@YAXPAV?$FastDelegate0@_N@fastdelegate@@ABU__true_type@0@@Z PROC ; stlp_std::__destroy_aux<fastdelegate::FastDelegate0<bool> >, COMDAT

; 56   : inline void __destroy_aux(_Tp*, const __true_type& /*_Trivial_destructor*/) {}

	ret	0
??$__destroy_aux@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@YAXPAV?$FastDelegate0@_N@fastdelegate@@ABU__true_type@0@@Z ENDP ; stlp_std::__destroy_aux<fastdelegate::FastDelegate0<bool> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrmemory.h
_TEXT	ENDS
;	COMDAT ??$xr_free@V?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@@@YAXAAPAV?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@@Z
_TEXT	SEGMENT
??$xr_free@V?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@@@YAXAAPAV?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@@Z PROC ; xr_free<stlp_std::priv::_List_node<fastdelegate::FastDelegate0<bool> > >, COMDAT
; _P$ = esi

; 111  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN1@xr_free@13
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi], 0
$LN1@xr_free@13:
	ret	0
??$xr_free@V?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@@@YAXAAPAV?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@@Z ENDP ; xr_free<stlp_std::priv::_List_node<fastdelegate::FastDelegate0<bool> > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??$?0V?$FastDelegate0@_N@fastdelegate@@@?$xalloc@V?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@@@QAE@ABV?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@Z
_TEXT	SEGMENT
??$?0V?$FastDelegate0@_N@fastdelegate@@@?$xalloc@V?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@@@QAE@ABV?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@Z PROC ; xalloc<stlp_std::priv::_List_node<fastdelegate::FastDelegate0<bool> > >::xalloc<stlp_std::priv::_List_node<fastdelegate::FastDelegate0<bool> > ><fastdelegate::FastDelegate0<bool> >, COMDAT
; _this$ = eax

; 79   : 	template<class _Other>							xalloc			(const xalloc<_Other>&)					{	}

	ret	0
??$?0V?$FastDelegate0@_N@fastdelegate@@@?$xalloc@V?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@@@QAE@ABV?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@Z ENDP ; xalloc<stlp_std::priv::_List_node<fastdelegate::FastDelegate0<bool> > >::xalloc<stlp_std::priv::_List_node<fastdelegate::FastDelegate0<bool> > ><fastdelegate::FastDelegate0<bool> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$_Destroy@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@YAXPAV?$FastDelegate0@_N@fastdelegate@@@Z
_TEXT	SEGMENT
??$_Destroy@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@YAXPAV?$FastDelegate0@_N@fastdelegate@@@Z PROC ; stlp_std::_Destroy<fastdelegate::FastDelegate0<bool> >, COMDAT

; 60   : #if defined (_STLP_MSVC) && (_STLP_MSVC <= 1010)
; 61   :   __pointer;
; 62   : #endif
; 63   :   typedef typename __type_traits<_Tp>::has_trivial_destructor _Trivial_destructor;
; 64   :   __destroy_aux(__pointer, _Trivial_destructor());
; 65   : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 66   :   memset(__REINTERPRET_CAST(char*, __pointer), _STLP_SHRED_BYTE, sizeof(_Tp));
; 67   : #endif
; 68   : }

	ret	0
??$_Destroy@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@YAXPAV?$FastDelegate0@_N@fastdelegate@@@Z ENDP ; stlp_std::_Destroy<fastdelegate::FastDelegate0<bool> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xalloc@V?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xalloc@V?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@@@QAE@ABV0@@Z PROC ; xalloc<stlp_std::priv::_List_node<fastdelegate::FastDelegate0<bool> > >::xalloc<stlp_std::priv::_List_node<fastdelegate::FastDelegate0<bool> > >, COMDAT

; 78   : 													xalloc			(const xalloc<T>&)						{	}

	mov	eax, OFFSET ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A ; g_loading_events
	ret	0
??0?$xalloc@V?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@@@QAE@ABV0@@Z ENDP ; xalloc<stlp_std::priv::_List_node<fastdelegate::FastDelegate0<bool> > >::xalloc<stlp_std::priv::_List_node<fastdelegate::FastDelegate0<bool> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?deallocate@?$xalloc@V?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@@@QBEXPAV?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@I@Z
_TEXT	SEGMENT
?deallocate@?$xalloc@V?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@@@QBEXPAV?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@I@Z PROC ; xalloc<stlp_std::priv::_List_node<fastdelegate::FastDelegate0<bool> > >::deallocate, COMDAT
; _p$ = eax

; 83   : 							void					deallocate		(pointer p, size_type n) const			{	xr_free	(p);				}

	test	eax, eax
	je	SHORT $LN3@deallocate@13
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN3@deallocate@13:
	ret	0
?deallocate@?$xalloc@V?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@@@QBEXPAV?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@I@Z ENDP ; xalloc<stlp_std::priv::_List_node<fastdelegate::FastDelegate0<bool> > >::deallocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_alloc.h
_TEXT	ENDS
;	COMDAT ??0?$_STLP_alloc_proxy@U_List_node_base@priv@stlp_std@@V?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@23@V?$xalloc@V?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@@@@priv@stlp_std@@QAE@ABV?$xalloc@V?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@@@U_List_node_base@12@@Z
_TEXT	SEGMENT
___p$ = 8						; size = 8
??0?$_STLP_alloc_proxy@U_List_node_base@priv@stlp_std@@V?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@23@V?$xalloc@V?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@@@@priv@stlp_std@@QAE@ABV?$xalloc@V?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@@@U_List_node_base@12@@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::priv::_List_node_base,stlp_std::priv::_List_node<fastdelegate::FastDelegate0<bool> >,xalloc<stlp_std::priv::_List_node<fastdelegate::FastDelegate0<bool> > > >::_STLP_alloc_proxy<stlp_std::priv::_List_node_base,stlp_std::priv::_List_node<fastdelegate::FastDelegate0<bool> >,xalloc<stlp_std::priv::_List_node<fastdelegate::FastDelegate0<bool> > > >, COMDAT

; 571  :     _MaybeReboundAlloc(__a), _M_data(__p) {}

	mov	eax, DWORD PTR ___p$[esp-4]
	mov	ecx, DWORD PTR ___p$[esp]
	mov	DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A, eax
	mov	DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A+4, ecx
	mov	eax, OFFSET ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A ; g_loading_events
	ret	8
??0?$_STLP_alloc_proxy@U_List_node_base@priv@stlp_std@@V?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@23@V?$xalloc@V?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@@@@priv@stlp_std@@QAE@ABV?$xalloc@V?$_List_node@V?$FastDelegate0@_N@fastdelegate@@@priv@stlp_std@@@@U_List_node_base@12@@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::priv::_List_node_base,stlp_std::priv::_List_node<fastdelegate::FastDelegate0<bool> >,xalloc<stlp_std::priv::_List_node<fastdelegate::FastDelegate0<bool> > > >::_STLP_alloc_proxy<stlp_std::priv::_List_node_base,stlp_std::priv::_List_node<fastdelegate::FastDelegate0<bool> >,xalloc<stlp_std::priv::_List_node<fastdelegate::FastDelegate0<bool> > > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_list.h
_TEXT	ENDS
;	COMDAT ?_M_empty_initialize@?$_List_base@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAEXXZ
_TEXT	SEGMENT
?_M_empty_initialize@?$_List_base@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAEXXZ PROC ; stlp_std::priv::_List_base<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::_M_empty_initialize, COMDAT

; 208  :     _M_node._M_data._M_next = &_M_node._M_data;

	mov	eax, OFFSET ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A ; g_loading_events
	mov	DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A, eax

; 209  :     _M_node._M_data._M_prev = _M_node._M_data._M_next;

	mov	DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A+4, eax

; 210  :   }

	ret	0
?_M_empty_initialize@?$_List_base@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAEXXZ ENDP ; stlp_std::priv::_List_base<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::_M_empty_initialize
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_List_base@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAE@ABV?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@Z
_TEXT	SEGMENT
??0?$_List_base@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAE@ABV?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@Z PROC ; stlp_std::priv::_List_base<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::_List_base<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >, COMDAT

; 189  :   { _M_empty_initialize(); }

	xor	eax, eax
	mov	DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A, eax
	mov	DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A+4, eax
	mov	eax, OFFSET ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A ; g_loading_events
	mov	DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A, eax
	mov	DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A+4, eax
	ret	0
??0?$_List_base@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAE@ABV?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@Z ENDP ; stlp_std::priv::_List_base<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::_List_base<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??D?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Nonconst_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@stlp_std@@QBEAAV?$FastDelegate0@_N@fastdelegate@@XZ
_TEXT	SEGMENT
??D?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Nonconst_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@stlp_std@@QBEAAV?$FastDelegate0@_N@fastdelegate@@XZ PROC ; stlp_std::priv::_List_iterator<fastdelegate::FastDelegate0<bool>,stlp_std::_Nonconst_traits<fastdelegate::FastDelegate0<bool> > >::operator*, COMDAT
; _this$ = eax

; 118  :   reference operator*() const { return __STATIC_CAST(_Node*, this->_M_node)->_M_data; }

	mov	eax, DWORD PTR [eax]
	add	eax, 8
	ret	0
??D?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Nonconst_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@stlp_std@@QBEAAV?$FastDelegate0@_N@fastdelegate@@XZ ENDP ; stlp_std::priv::_List_iterator<fastdelegate::FastDelegate0<bool>,stlp_std::_Nonconst_traits<fastdelegate::FastDelegate0<bool> > >::operator*
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?empty@?$_List_base@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$_List_base@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QBE_NXZ PROC ; stlp_std::priv::_List_base<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::empty, COMDAT

; 205  :   bool empty() const { return _M_node._M_data._M_next == &_M_node._M_data; }

	xor	eax, eax
	cmp	DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A, OFFSET ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A ; g_loading_events
	sete	al
	ret	0
?empty@?$_List_base@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QBE_NXZ ENDP ; stlp_std::priv::_List_base<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::empty
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\fastdelegate.h
_TEXT	ENDS
;	COMDAT ?GetClosureMemPtr@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AG_NXZP6G_NXZP6G_NXZ@detail@fastdelegate@@QBEP8GenericClass@23@AG_NXZXZ
_TEXT	SEGMENT
?GetClosureMemPtr@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AG_NXZP6G_NXZP6G_NXZ@detail@fastdelegate@@QBEP8GenericClass@23@AG_NXZXZ PROC ; fastdelegate::detail::ClosurePtr<bool (__stdcall fastdelegate::detail::GenericClass::*)(void),bool (__stdcall*)(void),bool (__stdcall*)(void)>::GetClosureMemPtr, COMDAT
; _this$ = eax

; 711  : 	inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?GetClosureMemPtr@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AG_NXZP6G_NXZP6G_NXZ@detail@fastdelegate@@QBEP8GenericClass@23@AG_NXZXZ ENDP ; fastdelegate::detail::ClosurePtr<bool (__stdcall fastdelegate::detail::GenericClass::*)(void),bool (__stdcall*)(void),bool (__stdcall*)(void)>::GetClosureMemPtr
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?GetClosureThis@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AG_NXZP6G_NXZP6G_NXZ@detail@fastdelegate@@QBEPAVGenericClass@23@XZ
_TEXT	SEGMENT
?GetClosureThis@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AG_NXZP6G_NXZP6G_NXZ@detail@fastdelegate@@QBEPAVGenericClass@23@XZ PROC ; fastdelegate::detail::ClosurePtr<bool (__stdcall fastdelegate::detail::GenericClass::*)(void),bool (__stdcall*)(void),bool (__stdcall*)(void)>::GetClosureThis, COMDAT
; _this$ = eax

; 710  : 	inline GenericClass *GetClosureThis() const { return m_pthis; }

	mov	eax, DWORD PTR [eax]
	ret	0
?GetClosureThis@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AG_NXZP6G_NXZP6G_NXZ@detail@fastdelegate@@QBEPAVGenericClass@23@XZ ENDP ; fastdelegate::detail::ClosurePtr<bool (__stdcall fastdelegate::detail::GenericClass::*)(void),bool (__stdcall*)(void),bool (__stdcall*)(void)>::GetClosureThis
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xr_resource.h
_TEXT	ENDS
;	COMDAT ??7?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@QBE_NXZ
_TEXT	SEGMENT
??7?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@QBE_NXZ PROC ; resptr_core<IRender_Light,resptrcode_light>::operator!, COMDAT

; 76   : 						bool operator!	() const										{	return p_ == 0;	}

	xor	eax, eax
	cmp	DWORD PTR ?precache_light@@3V?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@A, eax ; precache_light
	sete	al
	ret	0
??7?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@QBE_NXZ ENDP ; resptr_core<IRender_Light,resptrcode_light>::operator!
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??C?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@QBEPAVIRender_Light@@XZ
_TEXT	SEGMENT
??C?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@QBEPAVIRender_Light@@XZ PROC ; resptr_core<IRender_Light,resptrcode_light>::operator->, COMDAT

; 71   : 	T *					operator->() const												{	return p_;	}

	mov	eax, DWORD PTR ?precache_light@@3V?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@A ; precache_light
	ret	0
??C?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@QBEPAVIRender_Light@@XZ ENDP ; resptr_core<IRender_Light,resptrcode_light>::operator->
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@QAE@XZ PROC ; xalloc<fastdelegate::FastDelegate0<bool> >::xalloc<fastdelegate::FastDelegate0<bool> >, COMDAT
; _this$ = eax

; 77   : 													xalloc			()										{	}

	ret	0
??0?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@QAE@XZ ENDP ; xalloc<fastdelegate::FastDelegate0<bool> >::xalloc<fastdelegate::FastDelegate0<bool> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\fastdelegate.h
_TEXT	ENDS
;	COMDAT ??R?$FastDelegate0@_N@fastdelegate@@QBE_NXZ
_TEXT	SEGMENT
??R?$FastDelegate0@_N@fastdelegate@@QBE_NXZ PROC	; fastdelegate::FastDelegate0<bool>::operator(), COMDAT
; _this$ = eax

; 915  : 						return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(); }

	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	push	eax
	call	ecx
	ret	0
??R?$FastDelegate0@_N@fastdelegate@@QBE_NXZ ENDP	; fastdelegate::FastDelegate0<bool>::operator()
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_list.h
_TEXT	ENDS
;	COMDAT ?empty@?$list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@stlp_std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@stlp_std@@QBE_NXZ PROC ; stlp_std::list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::empty, COMDAT

; 162  :   bool empty() const         { return _M_impl.empty(); }

	xor	eax, eax
	cmp	DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A, OFFSET ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A ; g_loading_events
	sete	al
	ret	0
?empty@?$list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@stlp_std@@QBE_NXZ ENDP ; stlp_std::list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::empty
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_matrix.h
_TEXT	ENDS
;	COMDAT ?mul@?$_matrix@M@@QAEAAU1@ABU1@0@Z
_TEXT	SEGMENT
?mul@?$_matrix@M@@QAEAAU1@ABU1@0@Z PROC			; _matrix<float>::mul, COMDAT
; _this$ = eax
; _A$ = edx
; _B$ = ecx

; 84   : 		VERIFY	((this!=&A)&&(this!=&B));
; 85   : 		m[0][0] = A.m[0][0] * B.m[0][0] + A.m[1][0] * B.m[0][1] + A.m[2][0] * B.m[0][2] + A.m[3][0] * B.m[0][3];

	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [edx+32]
	mulss	xmm1, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ecx+12]
	mulss	xmm1, DWORD PTR [edx+48]
	addss	xmm0, xmm1
	movss	DWORD PTR [eax], xmm0

; 86   : 		m[0][1] = A.m[0][1] * B.m[0][0] + A.m[1][1] * B.m[0][1] + A.m[2][1] * B.m[0][2] + A.m[3][1] * B.m[0][3];

	movss	xmm0, DWORD PTR [edx+20]
	mulss	xmm0, DWORD PTR [ecx+4]
	movss	xmm1, DWORD PTR [edx+36]
	mulss	xmm1, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ecx]
	mulss	xmm1, DWORD PTR [edx+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [edx+52]
	mulss	xmm1, DWORD PTR [ecx+12]
	addss	xmm0, xmm1
	movss	DWORD PTR [eax+4], xmm0

; 87   : 		m[0][2] = A.m[0][2] * B.m[0][0] + A.m[1][2] * B.m[0][1] + A.m[2][2] * B.m[0][2] + A.m[3][2] * B.m[0][3];

	movss	xmm0, DWORD PTR [edx+40]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR [edx+8]
	mulss	xmm1, DWORD PTR [ecx]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [edx+56]
	mulss	xmm1, DWORD PTR [ecx+12]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [edx+24]
	mulss	xmm1, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	movss	DWORD PTR [eax+8], xmm0

; 88   : 		m[0][3] = A.m[0][3] * B.m[0][0] + A.m[1][3] * B.m[0][1] + A.m[2][3] * B.m[0][2] + A.m[3][3] * B.m[0][3];

	movss	xmm0, DWORD PTR [ecx+12]
	mulss	xmm0, DWORD PTR [edx+60]
	movss	xmm1, DWORD PTR [edx+28]
	mulss	xmm1, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [edx+44]
	mulss	xmm1, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [edx+12]
	mulss	xmm1, DWORD PTR [ecx]
	addss	xmm0, xmm1
	movss	DWORD PTR [eax+12], xmm0

; 89   : 
; 90   : 		m[1][0] = A.m[0][0] * B.m[1][0] + A.m[1][0] * B.m[1][1] + A.m[2][0] * B.m[1][2] + A.m[3][0] * B.m[1][3];

	movss	xmm0, DWORD PTR [edx+16]
	mulss	xmm0, DWORD PTR [ecx+20]
	movss	xmm1, DWORD PTR [ecx+16]
	mulss	xmm1, DWORD PTR [edx]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ecx+28]
	mulss	xmm1, DWORD PTR [edx+48]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [edx+32]
	mulss	xmm1, DWORD PTR [ecx+24]
	addss	xmm0, xmm1
	movss	DWORD PTR [eax+16], xmm0

; 91   : 		m[1][1] = A.m[0][1] * B.m[1][0] + A.m[1][1] * B.m[1][1] + A.m[2][1] * B.m[1][2] + A.m[3][1] * B.m[1][3];

	movss	xmm0, DWORD PTR [edx+20]
	mulss	xmm0, DWORD PTR [ecx+20]
	movss	xmm1, DWORD PTR [ecx+16]
	mulss	xmm1, DWORD PTR [edx+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [edx+52]
	mulss	xmm1, DWORD PTR [ecx+28]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [edx+36]
	mulss	xmm1, DWORD PTR [ecx+24]
	addss	xmm0, xmm1
	movss	DWORD PTR [eax+20], xmm0

; 92   : 		m[1][2] = A.m[0][2] * B.m[1][0] + A.m[1][2] * B.m[1][1] + A.m[2][2] * B.m[1][2] + A.m[3][2] * B.m[1][3];

	movss	xmm0, DWORD PTR [ecx+20]
	mulss	xmm0, DWORD PTR [edx+24]
	movss	xmm1, DWORD PTR [ecx+16]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [edx+56]
	mulss	xmm1, DWORD PTR [ecx+28]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [edx+40]
	mulss	xmm1, DWORD PTR [ecx+24]
	addss	xmm0, xmm1
	movss	DWORD PTR [eax+24], xmm0

; 93   : 		m[1][3] = A.m[0][3] * B.m[1][0] + A.m[1][3] * B.m[1][1] + A.m[2][3] * B.m[1][2] + A.m[3][3] * B.m[1][3];

	movss	xmm0, DWORD PTR [ecx+16]
	mulss	xmm0, DWORD PTR [edx+12]
	movss	xmm1, DWORD PTR [ecx+28]
	mulss	xmm1, DWORD PTR [edx+60]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ecx+24]
	mulss	xmm1, DWORD PTR [edx+44]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ecx+20]
	mulss	xmm1, DWORD PTR [edx+28]
	addss	xmm0, xmm1
	movss	DWORD PTR [eax+28], xmm0

; 94   : 
; 95   : 		m[2][0] = A.m[0][0] * B.m[2][0] + A.m[1][0] * B.m[2][1] + A.m[2][0] * B.m[2][2] + A.m[3][0] * B.m[2][3];

	movss	xmm0, DWORD PTR [edx+16]
	mulss	xmm0, DWORD PTR [ecx+36]
	movss	xmm1, DWORD PTR [ecx+32]
	mulss	xmm1, DWORD PTR [edx]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ecx+44]
	mulss	xmm1, DWORD PTR [edx+48]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [edx+32]
	mulss	xmm1, DWORD PTR [ecx+40]
	addss	xmm0, xmm1
	movss	DWORD PTR [eax+32], xmm0

; 96   : 		m[2][1] = A.m[0][1] * B.m[2][0] + A.m[1][1] * B.m[2][1] + A.m[2][1] * B.m[2][2] + A.m[3][1] * B.m[2][3];

	movss	xmm0, DWORD PTR [edx+20]
	mulss	xmm0, DWORD PTR [ecx+36]
	movss	xmm1, DWORD PTR [ecx+32]
	mulss	xmm1, DWORD PTR [edx+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [edx+52]
	mulss	xmm1, DWORD PTR [ecx+44]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [edx+36]
	mulss	xmm1, DWORD PTR [ecx+40]
	addss	xmm0, xmm1
	movss	DWORD PTR [eax+36], xmm0

; 97   : 		m[2][2] = A.m[0][2] * B.m[2][0] + A.m[1][2] * B.m[2][1] + A.m[2][2] * B.m[2][2] + A.m[3][2] * B.m[2][3];

	movss	xmm0, DWORD PTR [ecx+36]
	mulss	xmm0, DWORD PTR [edx+24]
	movss	xmm1, DWORD PTR [edx+56]
	mulss	xmm1, DWORD PTR [ecx+44]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [edx+40]
	mulss	xmm1, DWORD PTR [ecx+40]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ecx+32]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR [eax+40], xmm0

; 98   : 		m[2][3] = A.m[0][3] * B.m[2][0] + A.m[1][3] * B.m[2][1] + A.m[2][3] * B.m[2][2] + A.m[3][3] * B.m[2][3];

	movss	xmm0, DWORD PTR [ecx+32]
	mulss	xmm0, DWORD PTR [edx+12]
	movss	xmm1, DWORD PTR [ecx+44]
	mulss	xmm1, DWORD PTR [edx+60]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ecx+40]
	mulss	xmm1, DWORD PTR [edx+44]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ecx+36]
	mulss	xmm1, DWORD PTR [edx+28]
	addss	xmm0, xmm1
	movss	DWORD PTR [eax+44], xmm0

; 99   : 
; 100  : 		m[3][0] = A.m[0][0] * B.m[3][0] + A.m[1][0] * B.m[3][1] + A.m[2][0] * B.m[3][2] + A.m[3][0] * B.m[3][3];

	movss	xmm0, DWORD PTR [edx+16]
	mulss	xmm0, DWORD PTR [ecx+52]
	movss	xmm1, DWORD PTR [ecx+48]
	mulss	xmm1, DWORD PTR [edx]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [edx+32]
	mulss	xmm1, DWORD PTR [ecx+56]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ecx+60]
	mulss	xmm1, DWORD PTR [edx+48]
	addss	xmm0, xmm1
	movss	DWORD PTR [eax+48], xmm0

; 101  : 		m[3][1] = A.m[0][1] * B.m[3][0] + A.m[1][1] * B.m[3][1] + A.m[2][1] * B.m[3][2] + A.m[3][1] * B.m[3][3];

	movss	xmm0, DWORD PTR [ecx+48]
	movss	xmm1, DWORD PTR [edx+20]
	mulss	xmm1, DWORD PTR [ecx+52]
	mulss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [edx+36]
	mulss	xmm1, DWORD PTR [ecx+56]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [edx+52]
	mulss	xmm1, DWORD PTR [ecx+60]
	addss	xmm0, xmm1
	movss	DWORD PTR [eax+52], xmm0

; 102  : 		m[3][2] = A.m[0][2] * B.m[3][0] + A.m[1][2] * B.m[3][1] + A.m[2][2] * B.m[3][2] + A.m[3][2] * B.m[3][3];

	movss	xmm0, DWORD PTR [ecx+52]
	mulss	xmm0, DWORD PTR [edx+24]
	movss	xmm1, DWORD PTR [edx+56]
	mulss	xmm1, DWORD PTR [ecx+60]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [edx+40]
	mulss	xmm1, DWORD PTR [ecx+56]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ecx+48]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR [eax+56], xmm0

; 103  : 		m[3][3] = A.m[0][3] * B.m[3][0] + A.m[1][3] * B.m[3][1] + A.m[2][3] * B.m[3][2] + A.m[3][3] * B.m[3][3];

	movss	xmm0, DWORD PTR [ecx+48]
	mulss	xmm0, DWORD PTR [edx+12]
	movss	xmm1, DWORD PTR [ecx+60]
	mulss	xmm1, DWORD PTR [edx+60]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ecx+56]
	mulss	xmm1, DWORD PTR [edx+44]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ecx+52]
	mulss	xmm1, DWORD PTR [edx+28]
	addss	xmm0, xmm1
	movss	DWORD PTR [eax+60], xmm0

; 104  : 		return *this;
; 105  : 	}

	ret	0
?mul@?$_matrix@M@@QAEAAU1@ABU1@0@Z ENDP			; _matrix<float>::mul
_TEXT	ENDS
PUBLIC	?Paused@CRenderDevice@@QAEHXZ			; CRenderDevice::Paused
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\device.cpp
;	COMDAT ?Paused@CRenderDevice@@QAEHXZ
_TEXT	SEGMENT
?Paused@CRenderDevice@@QAEHXZ PROC			; CRenderDevice::Paused, COMDAT
; _this$ = ecx

; 566  : 	return g_pauseMngr.Paused();

	mov	eax, DWORD PTR __imp_?g_pauseMngr@@3VpauseMngr@@A
	mov	eax, DWORD PTR [eax+12]

; 567  : };

	ret	0
?Paused@CRenderDevice@@QAEHXZ ENDP			; CRenderDevice::Paused
_TEXT	ENDS
PUBLIC	__real@3456bf95
PUBLIC	?Pause@CRenderDevice@@QAEXHHHPBD@Z		; CRenderDevice::Pause
;	COMDAT __real@3456bf95
; File d:\clearsky\sources\engine\xrcore\ftimer.h
CONST	SEGMENT
__real@3456bf95 DD 03456bf95r			; 2e-007
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\device.cpp
CONST	ENDS
;	COMDAT ?Pause@CRenderDevice@@QAEXHHHPBD@Z
_TEXT	SEGMENT
_bOn$ = 8						; size = 4
_bTimer$ = 12						; size = 4
_bSound$ = 16						; size = 4
_reason$ = 20						; size = 4
?Pause@CRenderDevice@@QAEXHHHPBD@Z PROC			; CRenderDevice::Pause, COMDAT
; _this$ = ecx

; 498  : 	static int snd_emitters_ = -1;
; 499  : 
; 500  : 	if (g_bBenchmark)	return;

	cmp	BYTE PTR ?g_bBenchmark@@3_NA, 0		; g_bBenchmark
	jne	$LN2@Pause

; 501  : 
; 502  : 
; 503  : #ifdef DEBUG
; 504  : //	Msg("pause [%s] timer=[%s] sound=[%s] reason=%s",bOn?"ON":"OFF", bTimer?"ON":"OFF", bSound?"ON":"OFF", reason);
; 505  : #endif // DEBUG
; 506  : 
; 507  : #ifndef DEDICATED_SERVER	
; 508  : 
; 509  : 	if(bOn)

	cmp	DWORD PTR _bOn$[esp-4], 0
	je	SHORT $LN10@Pause

; 510  : 	{
; 511  : 		if(!Paused())						

	mov	eax, DWORD PTR __imp_?g_pauseMngr@@3VpauseMngr@@A
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN9@Pause

; 512  : 			bShowPauseString				= 
; 513  : #ifdef INGAME_EDITOR
; 514  : 				editor() ? FALSE : 
; 515  : #endif // #ifdef INGAME_EDITOR
; 516  : #ifdef DEBUG
; 517  : 				!xr_strcmp(reason, "li_pause_key_no_clip")?	FALSE:
; 518  : #endif // DEBUG
; 519  : 				TRUE;

	mov	DWORD PTR ?bShowPauseString@@3HA, 1	; bShowPauseString
$LN9@Pause:

; 520  : 
; 521  : 		if( bTimer && (!g_pGamePersistent || g_pGamePersistent->CanBePaused()) )

	cmp	DWORD PTR _bTimer$[esp-4], 0
	je	SHORT $LN8@Pause
	mov	ecx, DWORD PTR ?g_pGamePersistent@@3PAVIGame_Persistent@@A ; g_pGamePersistent
	test	ecx, ecx
	je	SHORT $LN7@Pause
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+76]
	call	eax
	test	al, al
	je	SHORT $LN8@Pause
$LN7@Pause:

; 522  : 		{
; 523  : 			g_pauseMngr.Pause				(TRUE);

	mov	ecx, DWORD PTR __imp_?g_pauseMngr@@3VpauseMngr@@A
	push	1
	call	DWORD PTR __imp_?Pause@pauseMngr@@QAEXH@Z
$LN8@Pause:

; 524  : #ifdef DEBUG
; 525  : 			if(!xr_strcmp(reason, "li_pause_key_no_clip"))
; 526  : 				TimerGlobal.Pause				(FALSE);
; 527  : #endif // DEBUG
; 528  : 		}
; 529  : 	
; 530  : 		if (bSound && ::Sound) {

	cmp	DWORD PTR _bSound$[esp-4], 0
	je	SHORT $LN2@Pause
	mov	ecx, DWORD PTR __imp_?Sound@@3PAVCSound_manager_interface@@A
	mov	ecx, DWORD PTR [ecx]
	test	ecx, ecx
	je	SHORT $LN2@Pause

; 547  : 			{
; 548  : 				snd_emitters_ =				::Sound->pause_emitters(false);

	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+48]
	push	1
	call	eax
	mov	DWORD PTR ?snd_emitters_@?1??Pause@CRenderDevice@@QAEXHHHPBD@Z@4HA, eax

; 549  : #ifdef DEBUG
; 550  : //				Log("snd_emitters_[false]",snd_emitters_);
; 551  : #endif // DEBUG
; 552  : 			}else {
; 553  : #ifdef DEBUG
; 554  : 				Log("Sound->pause_emitters underflow");
; 555  : #endif // DEBUG
; 556  : 			}
; 557  : 		}
; 558  : 	}
; 559  : 
; 560  : #endif
; 561  : 
; 562  : }

	ret	16					; 00000010H
$LN10@Pause:

; 531  : 			snd_emitters_ =					::Sound->pause_emitters(true);
; 532  : #ifdef DEBUG
; 533  : //			Log("snd_emitters_[true]",snd_emitters_);
; 534  : #endif // DEBUG
; 535  : 		}
; 536  : 	}else
; 537  : 	{
; 538  : 		if( bTimer && /*g_pGamePersistent->CanBePaused() &&*/ g_pauseMngr.Paused() )

	cmp	DWORD PTR _bTimer$[esp-4], 0
	je	SHORT $LN4@Pause
	mov	edx, DWORD PTR __imp_?g_pauseMngr@@3VpauseMngr@@A
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN4@Pause

; 539  : 		{
; 540  : 			fTimeDelta						= EPS_S + EPS_S;

	movss	xmm0, DWORD PTR __real@3456bf95
	movss	DWORD PTR [ecx+28], xmm0

; 541  : 			g_pauseMngr.Pause				(FALSE);

	mov	ecx, DWORD PTR __imp_?g_pauseMngr@@3VpauseMngr@@A
	push	0
	call	DWORD PTR __imp_?Pause@pauseMngr@@QAEXH@Z
$LN4@Pause:

; 542  : 		}
; 543  : 		
; 544  : 		if(bSound)

	cmp	DWORD PTR _bSound$[esp-4], 0
	je	SHORT $LN2@Pause

; 545  : 		{
; 546  : 			if(snd_emitters_>0) //avoid crash

	cmp	DWORD PTR ?snd_emitters_@?1??Pause@CRenderDevice@@QAEXHHHPBD@Z@4HA, 0
	jle	SHORT $LN2@Pause

; 547  : 			{
; 548  : 				snd_emitters_ =				::Sound->pause_emitters(false);

	mov	eax, DWORD PTR __imp_?Sound@@3PAVCSound_manager_interface@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+48]
	push	0
	call	eax
	mov	DWORD PTR ?snd_emitters_@?1??Pause@CRenderDevice@@QAEXHHHPBD@Z@4HA, eax
$LN2@Pause:

; 549  : #ifdef DEBUG
; 550  : //				Log("snd_emitters_[false]",snd_emitters_);
; 551  : #endif // DEBUG
; 552  : 			}else {
; 553  : #ifdef DEBUG
; 554  : 				Log("Sound->pause_emitters underflow");
; 555  : #endif // DEBUG
; 556  : 			}
; 557  : 		}
; 558  : 	}
; 559  : 
; 560  : #endif
; 561  : 
; 562  : }

	ret	16					; 00000010H
?Pause@CRenderDevice@@QAEXHHHPBD@Z ENDP			; CRenderDevice::Pause
_TEXT	ENDS
PUBLIC	?Clear@CRenderDevice@@QAEXXZ			; CRenderDevice::Clear
; Function compile flags: /Ogtpy
;	COMDAT ?Clear@CRenderDevice@@QAEXXZ
_TEXT	SEGMENT
?Clear@CRenderDevice@@QAEXXZ PROC			; CRenderDevice::Clear, COMDAT
; _this$ = ecx

; 103  : 	m_pRender->Clear();

	mov	ecx, DWORD PTR [ecx+868]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+108]
	jmp	edx
?Clear@CRenderDevice@@QAEXXZ ENDP			; CRenderDevice::Clear
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_list.h
;	COMDAT ??E?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@stlp_std@@QAEAAU012@XZ
_TEXT	SEGMENT
??E?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@stlp_std@@QAEAAU012@XZ PROC ; stlp_std::priv::_List_iterator<fastdelegate::FastDelegate0<bool>,stlp_std::_Const_traits<fastdelegate::FastDelegate0<bool> > >::operator++, COMDAT
; _this$ = eax

; 123  :     this->_M_incr();

	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 124  :     return *this;
; 125  :   }

	ret	0
??E?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@stlp_std@@QAEAAU012@XZ ENDP ; stlp_std::priv::_List_iterator<fastdelegate::FastDelegate0<bool>,stlp_std::_Const_traits<fastdelegate::FastDelegate0<bool> > >::operator++
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_iterator_base.h
_TEXT	ENDS
;	COMDAT ??$__distance@U?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@stlp_std@@@stlp_std@@YAHABU?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@0@0ABUinput_iterator_tag@0@@Z
_TEXT	SEGMENT
??$__distance@U?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@stlp_std@@@stlp_std@@YAHABU?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@0@0ABUinput_iterator_tag@0@@Z PROC ; stlp_std::__distance<stlp_std::priv::_List_iterator<fastdelegate::FastDelegate0<bool>,stlp_std::_Const_traits<fastdelegate::FastDelegate0<bool> > > >, COMDAT
; ___first$ = ecx
; ___last$ = edx

; 331  :   _STLP_DIFFERENCE_TYPE(_InputIterator) __n = 0;
; 332  :   _InputIterator __it(__first);

	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx]
	xor	eax, eax

; 333  :   while (__it != __last) {

	cmp	ecx, edx
	je	SHORT $LN1@distance
	npad	6
$LL2@distance:

; 334  :     ++__it; ++__n;

	mov	ecx, DWORD PTR [ecx]
	add	eax, 1
	cmp	ecx, edx
	jne	SHORT $LL2@distance
$LN1@distance:

; 335  :   }
; 336  :   return __n;
; 337  : }

	ret	0
??$__distance@U?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@stlp_std@@@stlp_std@@YAHABU?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@0@0ABUinput_iterator_tag@0@@Z ENDP ; stlp_std::__distance<stlp_std::priv::_List_iterator<fastdelegate::FastDelegate0<bool>,stlp_std::_Const_traits<fastdelegate::FastDelegate0<bool> > > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$distance@U?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@stlp_std@@@stlp_std@@YAHU?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@0@0@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$distance@U?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@stlp_std@@@stlp_std@@YAHU?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@0@0@Z PROC ; stlp_std::distance<stlp_std::priv::_List_iterator<fastdelegate::FastDelegate0<bool>,stlp_std::_Const_traits<fastdelegate::FastDelegate0<bool> > > >, COMDAT

; 378  :   return __distance(__first, __last, _STLP_ITERATOR_CATEGORY(__first, _InputIterator));

	mov	ecx, DWORD PTR ___first$[esp-4]
	mov	edx, DWORD PTR ___last$[esp-4]
	xor	eax, eax
	cmp	ecx, edx
	je	SHORT $LN3@distance@2
	npad	2
$LL4@distance@2:
	mov	ecx, DWORD PTR [ecx]
	add	eax, 1
	cmp	ecx, edx
	jne	SHORT $LL4@distance@2
$LN3@distance@2:

; 379  : }

	ret	0
??$distance@U?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@stlp_std@@@stlp_std@@YAHU?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@0@0@Z ENDP ; stlp_std::distance<stlp_std::priv::_List_iterator<fastdelegate::FastDelegate0<bool>,stlp_std::_Const_traits<fastdelegate::FastDelegate0<bool> > > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_list.c
_TEXT	ENDS
;	COMDAT ?clear@?$_List_base@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_List_base@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAEXXZ PROC ; stlp_std::priv::_List_base<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::clear, COMDAT

; 66   : void _List_base<_Tp,_Alloc>::clear() {

	push	ebx
	push	esi

; 67   :   _Node* __cur = __STATIC_CAST(_Node*, _M_node._M_data._M_next);

	mov	esi, DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A

; 68   :   while (__cur != &(_M_node._M_data)) {

	mov	ebx, OFFSET ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A ; g_loading_events
	cmp	esi, ebx
	je	SHORT $LN11@clear@6
	push	edi
	mov	edi, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	npad	8
$LL2@clear@6:

; 69   :     _Node* __tmp = __cur;
; 70   :     __cur = __STATIC_CAST(_Node*, __cur->_M_next);
; 71   :     _STLP_STD::_Destroy(&__tmp->_M_data);
; 72   :     this->_M_node.deallocate(__tmp, 1);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	mov	eax, esi
	mov	esi, DWORD PTR [esi]
	push	eax
	call	edi
	cmp	esi, ebx
	jne	SHORT $LL2@clear@6
	pop	edi
$LN11@clear@6:
	pop	esi

; 73   :   }
; 74   :   _M_node._M_data._M_next = &_M_node._M_data;
; 75   :   _M_node._M_data._M_prev = &_M_node._M_data;

	mov	DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A+4, ebx
	mov	DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A, ebx
	pop	ebx

; 76   : }

	ret	0
?clear@?$_List_base@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAEXXZ ENDP ; stlp_std::priv::_List_base<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::clear
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_list.h
_TEXT	ENDS
;	COMDAT ??0?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@stlp_std@@QAE@PAU_List_node_base@12@@Z
_TEXT	SEGMENT
??0?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@stlp_std@@QAE@PAU_List_node_base@12@@Z PROC ; stlp_std::priv::_List_iterator<fastdelegate::FastDelegate0<bool>,stlp_std::_Const_traits<fastdelegate::FastDelegate0<bool> > >::_List_iterator<fastdelegate::FastDelegate0<bool>,stlp_std::_Const_traits<fastdelegate::FastDelegate0<bool> > >, COMDAT
; _this$ = eax
; ___x$ = ecx

; 113  :   explicit _List_iterator(_List_node_base* __x) : _List_iterator_base(__x) {}

	mov	DWORD PTR [eax], ecx
	ret	0
??0?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@stlp_std@@QAE@PAU_List_node_base@12@@Z ENDP ; stlp_std::priv::_List_iterator<fastdelegate::FastDelegate0<bool>,stlp_std::_Const_traits<fastdelegate::FastDelegate0<bool> > >::_List_iterator<fastdelegate::FastDelegate0<bool>,stlp_std::_Const_traits<fastdelegate::FastDelegate0<bool> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?end@?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QBE?AU?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@23@XZ
_TEXT	SEGMENT
?end@?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QBE?AU?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@23@XZ PROC ; stlp_std::priv::_Impl_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::end, COMDAT
; ___$ReturnUdt$ = eax

; 366  :   const_iterator end() const            { return const_iterator(__CONST_CAST(_Node_base*, &this->_M_node._M_data)); }

	mov	DWORD PTR [eax], OFFSET ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A ; g_loading_events
	ret	0
?end@?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QBE?AU?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@23@XZ ENDP ; stlp_std::priv::_Impl_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QBE?AU?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@23@XZ
_TEXT	SEGMENT
?begin@?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QBE?AU?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@23@XZ PROC ; stlp_std::priv::_Impl_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::begin, COMDAT
; ___$ReturnUdt$ = eax

; 363  :   const_iterator begin() const          { return const_iterator(this->_M_node._M_data._M_next); }

	mov	ecx, DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A
	mov	DWORD PTR [eax], ecx
	ret	0
?begin@?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QBE?AU?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Const_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@23@XZ ENDP ; stlp_std::priv::_Impl_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::begin
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Nonconst_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@stlp_std@@QAE@PAU_List_node_base@12@@Z
_TEXT	SEGMENT
??0?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Nonconst_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@stlp_std@@QAE@PAU_List_node_base@12@@Z PROC ; stlp_std::priv::_List_iterator<fastdelegate::FastDelegate0<bool>,stlp_std::_Nonconst_traits<fastdelegate::FastDelegate0<bool> > >::_List_iterator<fastdelegate::FastDelegate0<bool>,stlp_std::_Nonconst_traits<fastdelegate::FastDelegate0<bool> > >, COMDAT
; _this$ = eax
; ___x$ = ecx

; 113  :   explicit _List_iterator(_List_node_base* __x) : _List_iterator_base(__x) {}

	mov	DWORD PTR [eax], ecx
	ret	0
??0?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Nonconst_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@stlp_std@@QAE@PAU_List_node_base@12@@Z ENDP ; stlp_std::priv::_List_iterator<fastdelegate::FastDelegate0<bool>,stlp_std::_Nonconst_traits<fastdelegate::FastDelegate0<bool> > >::_List_iterator<fastdelegate::FastDelegate0<bool>,stlp_std::_Nonconst_traits<fastdelegate::FastDelegate0<bool> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?erase@?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAE?AU?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Nonconst_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@23@U423@@Z
_TEXT	SEGMENT
___pos$ = 8						; size = 4
?erase@?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAE?AU?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Nonconst_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@23@U423@@Z PROC ; stlp_std::priv::_Impl_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::erase, COMDAT
; ___$ReturnUdt$ = edi

; 509  :     _Node_base* __next_node = __pos._M_node->_M_next;

	mov	eax, DWORD PTR ___pos$[esp-4]

; 510  :     _Node_base* __prev_node = __pos._M_node->_M_prev;

	mov	ecx, DWORD PTR [eax+4]
	push	esi
	mov	esi, DWORD PTR [eax]

; 511  :     _Node* __n = __STATIC_CAST(_Node*, __pos._M_node);
; 512  :     __prev_node->_M_next = __next_node;

	mov	DWORD PTR [ecx], esi

; 513  :     __next_node->_M_prev = __prev_node;

	mov	DWORD PTR [esi+4], ecx

; 514  :     _STLP_STD::_Destroy(&__n->_M_data);
; 515  :     this->_M_node.deallocate(__n, 1);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z

; 516  :     return iterator(__next_node);

	mov	DWORD PTR [edi], esi
	mov	eax, edi
	pop	esi

; 517  :   }

	ret	4
?erase@?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAE?AU?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Nonconst_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@23@U423@@Z ENDP ; stlp_std::priv::_Impl_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?size@?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QBEIXZ PROC ; stlp_std::priv::_Impl_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::size, COMDAT

; 375  :     size_type __result = distance(begin(), end());

	mov	ecx, DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A
	xor	eax, eax
	cmp	ecx, OFFSET ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A ; g_loading_events
	je	SHORT $LN17@size@5
$LL18@size@5:
	mov	ecx, DWORD PTR [ecx]
	add	eax, 1
	cmp	ecx, OFFSET ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A ; g_loading_events
	jne	SHORT $LL18@size@5
$LN17@size@5:

; 376  :     return __result;
; 377  :   }

	ret	0
?size@?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QBEIXZ ENDP ; stlp_std::priv::_Impl_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAE?AU?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Nonconst_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@23@XZ
_TEXT	SEGMENT
?begin@?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAE?AU?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Nonconst_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@23@XZ PROC ; stlp_std::priv::_Impl_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::begin, COMDAT
; ___$ReturnUdt$ = eax

; 362  :   iterator begin()                      { return iterator(this->_M_node._M_data._M_next); }

	mov	ecx, DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A
	mov	DWORD PTR [eax], ecx
	ret	0
?begin@?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAE?AU?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Nonconst_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@23@XZ ENDP ; stlp_std::priv::_Impl_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::begin
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$_List_base@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_base@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAE@XZ PROC ; stlp_std::priv::_List_base<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::~_List_base<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >, COMDAT

; 202  :   { clear(); }

	jmp	?clear@?$_List_base@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAEXXZ ; stlp_std::priv::_List_base<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::clear
??1?$_List_base@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAE@XZ ENDP ; stlp_std::priv::_List_base<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::~_List_base<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?pop_front@?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAEXXZ
_TEXT	SEGMENT
?pop_front@?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAEXXZ PROC ; stlp_std::priv::_Impl_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::pop_front, COMDAT

; 533  :   void pop_front() { erase(begin()); }

	mov	eax, DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, eax
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [ecx+4], eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edx
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	ret	0
?pop_front@?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAEXXZ ENDP ; stlp_std::priv::_Impl_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::pop_front
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAE@ABV?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@Z
_TEXT	SEGMENT
??0?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAE@ABV?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@Z PROC ; stlp_std::priv::_Impl_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::_Impl_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >, COMDAT

; 350  :     : _STLP_PRIV _List_base<_Tp, _Alloc>(__a) {}

	xor	eax, eax
	mov	DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A, eax
	mov	DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A+4, eax
	mov	eax, OFFSET ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A ; g_loading_events
	mov	DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A, eax
	mov	DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A+4, eax
	ret	0
??0?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAE@ABV?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@Z ENDP ; stlp_std::priv::_Impl_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::_Impl_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_list.h
_TEXT	ENDS
;	COMDAT ?size@?$list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?size@?$list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@stlp_std@@QBEIXZ PROC ; stlp_std::list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::size, COMDAT

; 163  :   size_type size() const     { return _M_impl.size(); }

	mov	ecx, DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A
	xor	eax, eax
	cmp	ecx, OFFSET ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A ; g_loading_events
	je	SHORT $LN19@size@6
$LL20@size@6:
	mov	ecx, DWORD PTR [ecx]
	add	eax, 1
	cmp	ecx, OFFSET ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A ; g_loading_events
	jne	SHORT $LL20@size@6
$LN19@size@6:
	ret	0
?size@?$list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@stlp_std@@QBEIXZ ENDP ; stlp_std::list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@stlp_std@@QAE?AU?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Nonconst_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@2@XZ
_TEXT	SEGMENT
?begin@?$list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@stlp_std@@QAE?AU?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Nonconst_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@2@XZ PROC ; stlp_std::list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::begin, COMDAT
; ___$ReturnUdt$ = eax

; 150  :   iterator begin()             { return iterator(_M_impl.begin()._M_node); }

	mov	ecx, DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A
	mov	DWORD PTR [eax], ecx
	ret	0
?begin@?$list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@stlp_std@@QAE?AU?$_List_iterator@V?$FastDelegate0@_N@fastdelegate@@U?$_Nonconst_traits@V?$FastDelegate0@_N@fastdelegate@@@stlp_std@@@priv@2@XZ ENDP ; stlp_std::list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::begin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?size@?$vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@stlp_std@@QBEIXZ PROC ; stlp_std::vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::size, COMDAT
; _this$ = ecx

; 89   :   size_type size() const        { return _M_impl.size(); }

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 3
	ret	0
?size@?$vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@stlp_std@@QBEIXZ ENDP ; stlp_std::vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::size
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xr_resource.h
_TEXT	ENDS
;	COMDAT ??B?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@QBEP80@BEPAVIRender_Light@@XZXZ
_TEXT	SEGMENT
??B?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@QBEP80@BEPAVIRender_Light@@XZXZ PROC ; resptr_core<IRender_Light,resptrcode_light>::operator IRender_Light * (__thiscall resptr_core<IRender_Light,resptrcode_light>::*)(void)const , COMDAT

; 75   : 						operator unspecified_bool_type () const							{	return p_ == 0? 0: &resptr_core::_get;	}

	mov	eax, DWORD PTR ?precache_light@@3V?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@A ; precache_light
	neg	eax
	sbb	eax, eax
	and	eax, OFFSET ?_get@?$resptr_base@VIRender_Light@@@@QBEPAVIRender_Light@@XZ ; resptr_base<IRender_Light>::_get
	ret	0
??B?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@QBEP80@BEPAVIRender_Light@@XZXZ ENDP ; resptr_core<IRender_Light,resptrcode_light>::operator IRender_Light * (__thiscall resptr_core<IRender_Light,resptrcode_light>::*)(void)const 
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@QAE@XZ
_TEXT	SEGMENT
??1?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@QAE@XZ PROC ; resptr_core<IRender_Light,resptrcode_light>::~resptr_core<IRender_Light,resptrcode_light>, COMDAT
; _this$ = esi

; 64   : 						~resptr_core	()												{	_dec();						}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN7@resptr_cor@3
	add	DWORD PTR [eax+4], -1
	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN7@resptr_cor@3
	test	eax, eax
	je	SHORT $LN7@resptr_cor@3
	push	edi
	push	eax
	call	___RTCastToVoid
	mov	ecx, DWORD PTR [esi]
	mov	edi, eax
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+76]
	add	esp, 4
	push	0
	call	edx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi], 0
	pop	edi
$LN7@resptr_cor@3:
	ret	0
??1?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@QAE@XZ ENDP ; resptr_core<IRender_Light,resptrcode_light>::~resptr_core<IRender_Light,resptrcode_light>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@QAE@PAVIRender_Light@@_N@Z
_TEXT	SEGMENT
??0?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@QAE@PAVIRender_Light@@_N@Z PROC ; resptr_core<IRender_Light,resptrcode_light>::resptr_core<IRender_Light,resptrcode_light>, COMDAT
; _this$ = eax

; 62   : 						resptr_core		(T * p, bool add_ref = true) 					{	p_ = p;	if(add_ref)	_inc(); }

	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN8@resptr_cor@4
	add	DWORD PTR [ecx+4], 1
$LN8@resptr_cor@4:
	ret	0
??0?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@QAE@PAVIRender_Light@@_N@Z ENDP ; resptr_core<IRender_Light,resptrcode_light>::resptr_core<IRender_Light,resptrcode_light>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_list.h
_TEXT	ENDS
;	COMDAT ??1?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAE@XZ PROC ; stlp_std::priv::_Impl_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::~_Impl_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >, COMDAT

; 358  :   ~list() {}

	jmp	?clear@?$_List_base@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAEXXZ ; stlp_std::priv::_List_base<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::clear
??1?$_Impl_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAE@XZ ENDP ; stlp_std::priv::_Impl_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::~_Impl_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_list.h
_TEXT	ENDS
;	COMDAT ?pop_front@?$list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@stlp_std@@QAEXXZ
_TEXT	SEGMENT
?pop_front@?$list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@stlp_std@@QAEXXZ PROC ; stlp_std::list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::pop_front, COMDAT

; 245  :   void pop_front() { _M_impl.pop_front(); }

	mov	eax, DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, eax
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [ecx+4], eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edx
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	ret	0
?pop_front@?$list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@stlp_std@@QAEXXZ ENDP ; stlp_std::list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::pop_front
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?front@?$list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@stlp_std@@QAEAAV?$FastDelegate0@_N@fastdelegate@@XZ
_TEXT	SEGMENT
?front@?$list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@stlp_std@@QAEAAV?$FastDelegate0@_N@fastdelegate@@XZ PROC ; stlp_std::list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::front, COMDAT

; 166  :   reference front()             { return *begin(); }

	mov	eax, DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A
	add	eax, 8
	ret	0
?front@?$list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@stlp_std@@QAEAAV?$FastDelegate0@_N@fastdelegate@@XZ ENDP ; stlp_std::list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::front
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@stlp_std@@QAE@ABV?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@Z
_TEXT	SEGMENT
??0?$list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@stlp_std@@QAE@ABV?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@Z PROC ; stlp_std::list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >, COMDAT

; 92   :   list(const allocator_type& __a = allocator_type())

	xor	eax, eax
	mov	DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A, eax
	mov	DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A+4, eax
	mov	eax, OFFSET ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A ; g_loading_events
	mov	DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A, eax
	mov	DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A+4, eax
	ret	0
??0?$list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@stlp_std@@QAE@ABV?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@Z ENDP ; stlp_std::list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?size@?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@QBEIXZ
_TEXT	SEGMENT
?size@?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@QBEIXZ PROC ; xr_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::size, COMDAT

; 200  : template	<typename T, typename allocator = xalloc<T> >									class	xr_list 		: public std::list<T,allocator>			{ public: u32 size() const {return (u32)__super::size(); } };

	mov	ecx, DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A
	xor	eax, eax
	cmp	ecx, OFFSET ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A ; g_loading_events
	je	SHORT $LN21@size@7
$LL22@size@7:
	mov	ecx, DWORD PTR [ecx]
	add	eax, 1
	cmp	ecx, OFFSET ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A ; g_loading_events
	jne	SHORT $LL22@size@7
$LN21@size@7:
	ret	0
?size@?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@QBEIXZ ENDP ; xr_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??A?$xr_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@@QAEAAV?$FastDelegate0@X@fastdelegate@@I@Z
_TEXT	SEGMENT
??A?$xr_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@@QAEAAV?$FastDelegate0@X@fastdelegate@@I@Z PROC ; xr_vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::operator[], COMDAT
; _this$ = eax
; __Pos$ = edx

; 139  : 	reference operator[]		(size_type _Pos)					{ {VERIFY2(_Pos<size(),make_string("index is out of range: index requested[%d], size of container[%d]", _Pos, size()).c_str());} return (*(begin() + _Pos)); }

	mov	ecx, DWORD PTR [eax]
	lea	eax, DWORD PTR [ecx+edx*8]
	ret	0
??A?$xr_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@@QAEAAV?$FastDelegate0@X@fastdelegate@@I@Z ENDP ; xr_vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::operator[]
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?size@?$xr_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@@QBEIXZ
_TEXT	SEGMENT
?size@?$xr_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@@QBEIXZ PROC ; xr_vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::size, COMDAT
; _this$ = ecx

; 126  : 	u32		size				() const							{ return (u32)inherited::size();} 

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 3
	ret	0
?size@?$xr_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@@QBEIXZ ENDP ; xr_vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::size
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\device.cpp
_TEXT	ENDS
;	COMDAT ?OnRender@CLoadScreenRenderer@@UAEXXZ
_TEXT	SEGMENT
?OnRender@CLoadScreenRenderer@@UAEXXZ PROC		; CLoadScreenRenderer::OnRender, COMDAT
; _this$ = ecx

; 636  : 	pApp->load_draw_internal();

	mov	ecx, DWORD PTR ?pApp@@3PAVCApplication@@A ; pApp
	jmp	?load_draw_internal@CApplication@@QAEXXZ ; CApplication::load_draw_internal
?OnRender@CLoadScreenRenderer@@UAEXXZ ENDP		; CLoadScreenRenderer::OnRender
_TEXT	ENDS
PUBLIC	??0CLoadScreenRenderer@@QAE@XZ			; CLoadScreenRenderer::CLoadScreenRenderer
; Function compile flags: /Ogtpy
;	COMDAT ??0CLoadScreenRenderer@@QAE@XZ
_TEXT	SEGMENT
??0CLoadScreenRenderer@@QAE@XZ PROC			; CLoadScreenRenderer::CLoadScreenRenderer, COMDAT
; _this$ = ecx

; 616  : {}

	mov	eax, ecx
	mov	DWORD PTR [eax], OFFSET ??_7CLoadScreenRenderer@@6B@
	mov	BYTE PTR [eax+4], 0
	ret	0
??0CLoadScreenRenderer@@QAE@XZ ENDP			; CLoadScreenRenderer::CLoadScreenRenderer
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@stlp_std@@QAE@XZ PROC ; stlp_std::list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::~list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >, COMDAT
	jmp	?clear@?$_List_base@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAEXXZ ; stlp_std::priv::_List_base<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::clear
??1?$list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@stlp_std@@QAE@XZ ENDP ; stlp_std::list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::~list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@QAE@XZ
_TEXT	SEGMENT
??1?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@QAE@XZ PROC ; xr_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::~xr_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >, COMDAT
	jmp	?clear@?$_List_base@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAEXXZ ; stlp_std::priv::_List_base<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::clear
??1?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@QAE@XZ ENDP ; xr_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::~xr_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@QAE@XZ PROC ; xr_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::xr_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >, COMDAT
	xor	eax, eax
	mov	DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A, eax
	mov	DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A+4, eax
	mov	eax, OFFSET ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A ; g_loading_events
	mov	DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A, eax
	mov	DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A+4, eax
	ret	0
??0?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@QAE@XZ ENDP ; xr_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::xr_list<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
;	COMDAT ?_M_erase@?$_Impl_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@priv@stlp_std@@AAEPAV?$FastDelegate0@X@fastdelegate@@PAV45@0ABU__false_type@3@@Z
_TEXT	SEGMENT
?_M_erase@?$_Impl_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@priv@stlp_std@@AAEPAV?$FastDelegate0@X@fastdelegate@@PAV45@0ABU__false_type@3@@Z PROC ; stlp_std::priv::_Impl_vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::_M_erase, COMDAT
; _this$ = edi
; ___first$ = eax
; ___last$ = ecx

; 579  :     pointer __i = _STLP_PRIV __copy_ptrs(__last, this->_M_finish, __first, _TrivialCopy());

	mov	edx, DWORD PTR [edi+4]
	push	esi
	mov	esi, ecx
	sub	edx, esi
	sar	edx, 3
	test	edx, edx
	mov	ecx, eax
	jle	SHORT $LN18@M_erase@25
	sub	esi, eax
	push	ebx
$LL7@M_erase@25:
	mov	ebx, DWORD PTR [esi+ecx+4]
	mov	DWORD PTR [ecx+4], ebx
	mov	ebx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [ecx], ebx
	sub	edx, 1
	add	ecx, 8
	test	edx, edx
	jg	SHORT $LL7@M_erase@25
	pop	ebx
$LN18@M_erase@25:

; 580  :     _STLP_STD::_Destroy_Range(__i, this->_M_finish);
; 581  :     this->_M_finish = __i;

	mov	DWORD PTR [edi+4], ecx
	pop	esi

; 582  :     return __first;
; 583  :   }

	ret	0
?_M_erase@?$_Impl_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@priv@stlp_std@@AAEPAV?$FastDelegate0@X@fastdelegate@@PAV45@0ABU__false_type@3@@Z ENDP ; stlp_std::priv::_Impl_vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::_M_erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?erase@?$_Impl_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@priv@stlp_std@@QAEPAV?$FastDelegate0@X@fastdelegate@@PAV45@0@Z
_TEXT	SEGMENT
?erase@?$_Impl_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@priv@stlp_std@@QAEPAV?$FastDelegate0@X@fastdelegate@@PAV45@0@Z PROC ; stlp_std::priv::_Impl_vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::erase, COMDAT
; _this$ = edi
; ___first$ = eax
; ___last$ = ecx

; 589  :   iterator erase(iterator __first, iterator __last) {

	push	esi
	mov	esi, ecx

; 590  :     if (__first == __last)

	cmp	eax, esi

; 591  :       return __first;

	je	SHORT $LN2@erase@34

; 592  :     return _M_erase(__first, __last, _Movable());

	mov	edx, DWORD PTR [edi+4]
	sub	edx, esi
	sar	edx, 3
	test	edx, edx
	mov	ecx, eax
	jle	SHORT $LN8@erase@34
	sub	esi, eax
	push	ebx
	npad	8
$LL10@erase@34:
	mov	ebx, DWORD PTR [esi+ecx+4]
	mov	DWORD PTR [ecx+4], ebx
	mov	ebx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [ecx], ebx
	sub	edx, 1
	add	ecx, 8
	test	edx, edx
	jg	SHORT $LL10@erase@34
	pop	ebx
$LN8@erase@34:
	mov	DWORD PTR [edi+4], ecx
$LN2@erase@34:
	pop	esi

; 593  :   }

	ret	0
?erase@?$_Impl_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@priv@stlp_std@@QAEPAV?$FastDelegate0@X@fastdelegate@@PAV45@0@Z ENDP ; stlp_std::priv::_Impl_vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::erase
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?erase@?$vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@stlp_std@@QAEPAV?$FastDelegate0@X@fastdelegate@@PAV34@0@Z
_TEXT	SEGMENT
?erase@?$vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@stlp_std@@QAEPAV?$FastDelegate0@X@fastdelegate@@PAV34@0@Z PROC ; stlp_std::vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::erase, COMDAT
; _this$ = edi
; ___first$ = eax
; ___last$ = ecx

; 207  :   iterator erase(iterator __first, iterator __last) {

	push	esi
	mov	esi, ecx

; 208  :     return cast_traits::to_value_type_ptr(_M_impl.erase(cast_traits::to_storage_type_ptr(__first),
; 209  :                                                         cast_traits::to_storage_type_ptr(__last)));

	cmp	eax, esi
	je	SHORT $LN8@erase@35
	mov	edx, DWORD PTR [edi+4]
	sub	edx, esi
	sar	edx, 3
	test	edx, edx
	mov	ecx, eax
	jle	SHORT $LN14@erase@35
	sub	esi, eax
	push	ebx
	npad	8
$LL16@erase@35:
	mov	ebx, DWORD PTR [esi+ecx+4]
	mov	DWORD PTR [ecx+4], ebx
	mov	ebx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [ecx], ebx
	sub	edx, 1
	add	ecx, 8
	test	edx, edx
	jg	SHORT $LL16@erase@35
	pop	ebx
$LN14@erase@35:
	mov	DWORD PTR [edi+4], ecx
$LN8@erase@35:
	pop	esi

; 210  :   }

	ret	0
?erase@?$vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@stlp_std@@QAEPAV?$FastDelegate0@X@fastdelegate@@PAV34@0@Z ENDP ; stlp_std::vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::erase
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?clear_not_free@?$xr_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear_not_free@?$xr_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@@QAEXXZ PROC ; xr_vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::clear_not_free, COMDAT
; _this$ = esi

; 129  : 	void	clear_not_free		()									{ erase(begin(),end());			}

	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	cmp	eax, edx
	je	SHORT $LN22@clear_not_@4
	mov	ecx, edx
	sub	ecx, edx
	sar	ecx, 3
	test	ecx, ecx
	jle	SHORT $LN28@clear_not_@4
	sub	edx, eax
	push	edi
	npad	9
$LL30@clear_not_@4:
	mov	edi, DWORD PTR [edx+eax+4]
	mov	DWORD PTR [eax+4], edi
	mov	edi, DWORD PTR [edx+eax]
	mov	DWORD PTR [eax], edi
	sub	ecx, 1
	add	eax, 8
	test	ecx, ecx
	jg	SHORT $LL30@clear_not_@4
	pop	edi
$LN28@clear_not_@4:
	mov	DWORD PTR [esi+4], eax
$LN22@clear_not_@4:
	ret	0
?clear_not_free@?$xr_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@@QAEXXZ ENDP ; xr_vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::clear_not_free
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xr_resource.h
;	COMDAT ??4?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
??4?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@QAEAAV0@ABV0@@Z PROC ; resptr_core<IRender_Light,resptrcode_light>::operator=, COMDAT
; _rhs$ = eax

; 67   : 	self &				operator=		(const self & rhs)								{	_set(rhs);	return (self&)*this;	}

	push	esi
	mov	esi, DWORD PTR [eax]
	test	esi, esi
	je	SHORT $LN7@operator@78
	add	DWORD PTR [esi+4], 1
$LN7@operator@78:
	mov	eax, DWORD PTR ?precache_light@@3V?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@A ; precache_light
	test	eax, eax
	je	SHORT $LN20@operator@78
	add	DWORD PTR [eax+4], -1
	mov	eax, DWORD PTR ?precache_light@@3V?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@A ; precache_light
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN20@operator@78
	push	edi
	push	eax
	call	___RTCastToVoid
	mov	ecx, DWORD PTR ?precache_light@@3V?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@A ; precache_light
	mov	edx, DWORD PTR [ecx]
	add	esp, 4
	mov	edi, eax
	mov	eax, DWORD PTR [edx+76]
	push	0
	call	eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	pop	edi
$LN20@operator@78:
	mov	DWORD PTR ?precache_light@@3V?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@A, esi ; precache_light
	mov	eax, OFFSET ?precache_light@@3V?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@A ; precache_light
	pop	esi
	ret	0
??4?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@QAEAAV0@ABV0@@Z ENDP ; resptr_core<IRender_Light,resptrcode_light>::operator=
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\pure.h
_TEXT	ENDS
;	COMDAT ?Process@?$CRegistrator@VpureFrame@@@@QAEXP6IXPAX@Z@Z
_TEXT	SEGMENT
?Process@?$CRegistrator@VpureFrame@@@@QAEXP6IXPAX@Z@Z PROC ; CRegistrator<pureFrame>::Process, COMDAT
; _this$ = esi

; 82   : 		in_process = true;

	or	DWORD PTR [esi+12], 1

; 83   :     	if (R.empty()) return;

	mov	ecx, esi
	call	?empty@?$vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@stlp_std@@QBE_NXZ ; stlp_std::vector<_REG_INFO,xalloc<_REG_INFO> >::empty
	test	al, al
	jne	SHORT $LN9@Process@4

; 84   : 		if (R[0].Prio==REG_PRIORITY_CAPTURE)	f(R[0].Object);

	push	0
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	cmp	DWORD PTR [eax+4], 2147483647		; 7fffffffH
	mov	ecx, esi
	jne	SHORT $LN7@Process@4
	push	0
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	edx

; 85   : 		else {

	jmp	SHORT $LN3@Process@4
$LN7@Process@4:
	push	edi

; 86   : 			for (u32 i=0; i<R.size(); i++)

	xor	edi, edi
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	test	eax, eax
	jbe	SHORT $LN71@Process@4
$LL5@Process@4:

; 87   : 				if(R[i].Prio!=REG_PRIORITY_INVALID)

	push	edi
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	cmp	DWORD PTR [eax+4], -1
	je	SHORT $LN4@Process@4

; 88   : 					f(R[i].Object);

	push	edi
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	edx
$LN4@Process@4:
	mov	ecx, esi
	add	edi, 1
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	cmp	edi, eax
	jb	SHORT $LL5@Process@4
$LN71@Process@4:
	pop	edi
$LN3@Process@4:

; 89   : 
; 90   : 		}
; 91   : 		if(changed)	Resort();

	test	BYTE PTR [esi+12], 2
	je	SHORT $LN1@Process@4
	mov	ecx, esi
	call	?Resort@?$CRegistrator@VpureFrame@@@@QAEXXZ ; CRegistrator<pureFrame>::Resort
$LN1@Process@4:

; 92   : 		in_process = false;

	and	DWORD PTR [esi+12], -2			; fffffffeH
$LN9@Process@4:

; 93   : 	};

	ret	0
?Process@?$CRegistrator@VpureFrame@@@@QAEXP6IXPAX@Z@Z ENDP ; CRegistrator<pureFrame>::Process
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Process@?$CRegistrator@VpureAppEnd@@@@QAEXP6IXPAX@Z@Z
_TEXT	SEGMENT
?Process@?$CRegistrator@VpureAppEnd@@@@QAEXP6IXPAX@Z@Z PROC ; CRegistrator<pureAppEnd>::Process, COMDAT
; _this$ = eax

; 81   : 	{

	push	esi
	mov	esi, eax

; 82   : 		in_process = true;

	or	DWORD PTR [esi+12], 1

; 83   :     	if (R.empty()) return;

	mov	ecx, esi
	call	?empty@?$vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@stlp_std@@QBE_NXZ ; stlp_std::vector<_REG_INFO,xalloc<_REG_INFO> >::empty
	test	al, al
	jne	SHORT $LN9@Process@5

; 84   : 		if (R[0].Prio==REG_PRIORITY_CAPTURE)	f(R[0].Object);

	push	0
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	cmp	DWORD PTR [eax+4], 2147483647		; 7fffffffH
	mov	ecx, esi
	jne	SHORT $LN7@Process@5
	push	0
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	call	edx

; 85   : 		else {

	jmp	SHORT $LN3@Process@5
$LN7@Process@5:
	push	edi

; 86   : 			for (u32 i=0; i<R.size(); i++)

	xor	edi, edi
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	test	eax, eax
	jbe	SHORT $LN71@Process@5
$LL5@Process@5:

; 87   : 				if(R[i].Prio!=REG_PRIORITY_INVALID)

	push	edi
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	cmp	DWORD PTR [eax+4], -1
	je	SHORT $LN4@Process@5

; 88   : 					f(R[i].Object);

	push	edi
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	call	edx
$LN4@Process@5:
	mov	ecx, esi
	add	edi, 1
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	cmp	edi, eax
	jb	SHORT $LL5@Process@5
$LN71@Process@5:
	pop	edi
$LN3@Process@5:

; 89   : 
; 90   : 		}
; 91   : 		if(changed)	Resort();

	test	BYTE PTR [esi+12], 2
	je	SHORT $LN1@Process@5
	call	?Resort@?$CRegistrator@VpureAppEnd@@@@QAEXXZ ; CRegistrator<pureAppEnd>::Resort
$LN1@Process@5:

; 92   : 		in_process = false;

	and	DWORD PTR [esi+12], -2			; fffffffeH
$LN9@Process@5:
	pop	esi

; 93   : 	};

	ret	0
?Process@?$CRegistrator@VpureAppEnd@@@@QAEXP6IXPAX@Z@Z ENDP ; CRegistrator<pureAppEnd>::Process
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Process@?$CRegistrator@VpureAppStart@@@@QAEXP6IXPAX@Z@Z
_TEXT	SEGMENT
?Process@?$CRegistrator@VpureAppStart@@@@QAEXP6IXPAX@Z@Z PROC ; CRegistrator<pureAppStart>::Process, COMDAT
; _this$ = eax

; 81   : 	{

	push	esi
	mov	esi, eax

; 82   : 		in_process = true;

	or	DWORD PTR [esi+12], 1

; 83   :     	if (R.empty()) return;

	mov	ecx, esi
	call	?empty@?$vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@stlp_std@@QBE_NXZ ; stlp_std::vector<_REG_INFO,xalloc<_REG_INFO> >::empty
	test	al, al
	jne	SHORT $LN9@Process@6

; 84   : 		if (R[0].Prio==REG_PRIORITY_CAPTURE)	f(R[0].Object);

	push	0
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	cmp	DWORD PTR [eax+4], 2147483647		; 7fffffffH
	mov	ecx, esi
	jne	SHORT $LN7@Process@6
	push	0
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	call	edx

; 85   : 		else {

	jmp	SHORT $LN3@Process@6
$LN7@Process@6:
	push	edi

; 86   : 			for (u32 i=0; i<R.size(); i++)

	xor	edi, edi
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	test	eax, eax
	jbe	SHORT $LN71@Process@6
$LL5@Process@6:

; 87   : 				if(R[i].Prio!=REG_PRIORITY_INVALID)

	push	edi
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	cmp	DWORD PTR [eax+4], -1
	je	SHORT $LN4@Process@6

; 88   : 					f(R[i].Object);

	push	edi
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	call	edx
$LN4@Process@6:
	mov	ecx, esi
	add	edi, 1
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	cmp	edi, eax
	jb	SHORT $LL5@Process@6
$LN71@Process@6:
	pop	edi
$LN3@Process@6:

; 89   : 
; 90   : 		}
; 91   : 		if(changed)	Resort();

	test	BYTE PTR [esi+12], 2
	je	SHORT $LN1@Process@6
	call	?Resort@?$CRegistrator@VpureAppStart@@@@QAEXXZ ; CRegistrator<pureAppStart>::Resort
$LN1@Process@6:

; 92   : 		in_process = false;

	and	DWORD PTR [esi+12], -2			; fffffffeH
$LN9@Process@6:
	pop	esi

; 93   : 	};

	ret	0
?Process@?$CRegistrator@VpureAppStart@@@@QAEXP6IXPAX@Z@Z ENDP ; CRegistrator<pureAppStart>::Process
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Process@?$CRegistrator@VpureAppDeactivate@@@@QAEXP6IXPAX@Z@Z
_TEXT	SEGMENT
?Process@?$CRegistrator@VpureAppDeactivate@@@@QAEXP6IXPAX@Z@Z PROC ; CRegistrator<pureAppDeactivate>::Process, COMDAT
; _this$ = eax

; 81   : 	{

	push	esi
	mov	esi, eax

; 82   : 		in_process = true;

	or	DWORD PTR [esi+12], 1

; 83   :     	if (R.empty()) return;

	mov	ecx, esi
	call	?empty@?$vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@stlp_std@@QBE_NXZ ; stlp_std::vector<_REG_INFO,xalloc<_REG_INFO> >::empty
	test	al, al
	jne	SHORT $LN9@Process@7

; 84   : 		if (R[0].Prio==REG_PRIORITY_CAPTURE)	f(R[0].Object);

	push	0
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	cmp	DWORD PTR [eax+4], 2147483647		; 7fffffffH
	mov	ecx, esi
	jne	SHORT $LN7@Process@7
	push	0
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	call	edx

; 85   : 		else {

	jmp	SHORT $LN3@Process@7
$LN7@Process@7:
	push	edi

; 86   : 			for (u32 i=0; i<R.size(); i++)

	xor	edi, edi
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	test	eax, eax
	jbe	SHORT $LN71@Process@7
$LL5@Process@7:

; 87   : 				if(R[i].Prio!=REG_PRIORITY_INVALID)

	push	edi
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	cmp	DWORD PTR [eax+4], -1
	je	SHORT $LN4@Process@7

; 88   : 					f(R[i].Object);

	push	edi
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	call	edx
$LN4@Process@7:
	mov	ecx, esi
	add	edi, 1
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	cmp	edi, eax
	jb	SHORT $LL5@Process@7
$LN71@Process@7:
	pop	edi
$LN3@Process@7:

; 89   : 
; 90   : 		}
; 91   : 		if(changed)	Resort();

	test	BYTE PTR [esi+12], 2
	je	SHORT $LN1@Process@7
	call	?Resort@?$CRegistrator@VpureAppDeactivate@@@@QAEXXZ ; CRegistrator<pureAppDeactivate>::Resort
$LN1@Process@7:

; 92   : 		in_process = false;

	and	DWORD PTR [esi+12], -2			; fffffffeH
$LN9@Process@7:
	pop	esi

; 93   : 	};

	ret	0
?Process@?$CRegistrator@VpureAppDeactivate@@@@QAEXP6IXPAX@Z@Z ENDP ; CRegistrator<pureAppDeactivate>::Process
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Process@?$CRegistrator@VpureAppActivate@@@@QAEXP6IXPAX@Z@Z
_TEXT	SEGMENT
?Process@?$CRegistrator@VpureAppActivate@@@@QAEXP6IXPAX@Z@Z PROC ; CRegistrator<pureAppActivate>::Process, COMDAT
; _this$ = eax

; 81   : 	{

	push	esi
	mov	esi, eax

; 82   : 		in_process = true;

	or	DWORD PTR [esi+12], 1

; 83   :     	if (R.empty()) return;

	mov	ecx, esi
	call	?empty@?$vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@stlp_std@@QBE_NXZ ; stlp_std::vector<_REG_INFO,xalloc<_REG_INFO> >::empty
	test	al, al
	jne	SHORT $LN9@Process@8

; 84   : 		if (R[0].Prio==REG_PRIORITY_CAPTURE)	f(R[0].Object);

	push	0
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	cmp	DWORD PTR [eax+4], 2147483647		; 7fffffffH
	mov	ecx, esi
	jne	SHORT $LN7@Process@8
	push	0
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	call	edx

; 85   : 		else {

	jmp	SHORT $LN3@Process@8
$LN7@Process@8:
	push	edi

; 86   : 			for (u32 i=0; i<R.size(); i++)

	xor	edi, edi
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	test	eax, eax
	jbe	SHORT $LN71@Process@8
$LL5@Process@8:

; 87   : 				if(R[i].Prio!=REG_PRIORITY_INVALID)

	push	edi
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	cmp	DWORD PTR [eax+4], -1
	je	SHORT $LN4@Process@8

; 88   : 					f(R[i].Object);

	push	edi
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	call	edx
$LN4@Process@8:
	mov	ecx, esi
	add	edi, 1
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	cmp	edi, eax
	jb	SHORT $LL5@Process@8
$LN71@Process@8:
	pop	edi
$LN3@Process@8:

; 89   : 
; 90   : 		}
; 91   : 		if(changed)	Resort();

	test	BYTE PTR [esi+12], 2
	je	SHORT $LN1@Process@8
	call	?Resort@?$CRegistrator@VpureAppActivate@@@@QAEXXZ ; CRegistrator<pureAppActivate>::Resort
$LN1@Process@8:

; 92   : 		in_process = false;

	and	DWORD PTR [esi+12], -2			; fffffffeH
$LN9@Process@8:
	pop	esi

; 93   : 	};

	ret	0
?Process@?$CRegistrator@VpureAppActivate@@@@QAEXP6IXPAX@Z@Z ENDP ; CRegistrator<pureAppActivate>::Process
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Process@?$CRegistrator@VpureRender@@@@QAEXP6IXPAX@Z@Z
_TEXT	SEGMENT
?Process@?$CRegistrator@VpureRender@@@@QAEXP6IXPAX@Z@Z PROC ; CRegistrator<pureRender>::Process, COMDAT
; _this$ = eax

; 81   : 	{

	push	esi
	mov	esi, eax

; 82   : 		in_process = true;

	or	DWORD PTR [esi+12], 1

; 83   :     	if (R.empty()) return;

	mov	ecx, esi
	call	?empty@?$vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@stlp_std@@QBE_NXZ ; stlp_std::vector<_REG_INFO,xalloc<_REG_INFO> >::empty
	test	al, al
	jne	SHORT $LN9@Process@9

; 84   : 		if (R[0].Prio==REG_PRIORITY_CAPTURE)	f(R[0].Object);

	push	0
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	cmp	DWORD PTR [eax+4], 2147483647		; 7fffffffH
	mov	ecx, esi
	jne	SHORT $LN7@Process@9
	push	0
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	call	edx

; 85   : 		else {

	jmp	SHORT $LN3@Process@9
$LN7@Process@9:
	push	edi

; 86   : 			for (u32 i=0; i<R.size(); i++)

	xor	edi, edi
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	test	eax, eax
	jbe	SHORT $LN71@Process@9
$LL5@Process@9:

; 87   : 				if(R[i].Prio!=REG_PRIORITY_INVALID)

	push	edi
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	cmp	DWORD PTR [eax+4], -1
	je	SHORT $LN4@Process@9

; 88   : 					f(R[i].Object);

	push	edi
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	call	edx
$LN4@Process@9:
	mov	ecx, esi
	add	edi, 1
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	cmp	edi, eax
	jb	SHORT $LL5@Process@9
$LN71@Process@9:
	pop	edi
$LN3@Process@9:

; 89   : 
; 90   : 		}
; 91   : 		if(changed)	Resort();

	test	BYTE PTR [esi+12], 2
	je	SHORT $LN1@Process@9
	call	?Resort@?$CRegistrator@VpureRender@@@@QAEXXZ ; CRegistrator<pureRender>::Resort
$LN1@Process@9:

; 92   : 		in_process = false;

	and	DWORD PTR [esi+12], -2			; fffffffeH
$LN9@Process@9:
	pop	esi

; 93   : 	};

	ret	0
?Process@?$CRegistrator@VpureRender@@@@QAEXP6IXPAX@Z@Z ENDP ; CRegistrator<pureRender>::Process
_TEXT	ENDS
PUBLIC	?stop@CLoadScreenRenderer@@QAEXXZ		; CLoadScreenRenderer::stop
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\device.cpp
;	COMDAT ?stop@CLoadScreenRenderer@@QAEXXZ
_TEXT	SEGMENT
?stop@CLoadScreenRenderer@@QAEXXZ PROC			; CLoadScreenRenderer::stop, COMDAT
; _this$ = ecx

; 626  : {

	push	ebx
	mov	ebx, ecx

; 627  : 	if(!b_registered)				return;

	cmp	BYTE PTR [ebx+4], 0
	je	SHORT $LN2@stop@2

; 628  : 	Device.seqRender.Remove			(this);

	mov	eax, OFFSET ?Device@@3VCRenderDevice@@A+648
	call	?Remove@?$CRegistrator@VpureRender@@@@QAEXPAVpureRender@@@Z ; CRegistrator<pureRender>::Remove

; 629  : 	pApp->destroy_loading_shaders	();

	mov	ecx, DWORD PTR ?pApp@@3PAVCApplication@@A ; pApp
	add	ecx, 6152				; 00001808H
	call	??C?$FactoryPtr@VIApplicationRender@@@@QBEPAVIApplicationRender@@XZ ; FactoryPtr<IApplicationRender>::operator->
	mov	edx, DWORD PTR [eax]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 630  : 	b_registered					= false;

	xor	al, al
	mov	BYTE PTR [ebx+4], al

; 631  : 	b_need_user_input				= false;

	mov	BYTE PTR [ebx+5], al
$LN2@stop@2:
	pop	ebx

; 632  : }

	ret	0
?stop@CLoadScreenRenderer@@QAEXXZ ENDP			; CLoadScreenRenderer::stop
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?RemoveSeqFrame@CRenderDevice@@EAGXPAVpureFrame@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_f$ = 12						; size = 4
?RemoveSeqFrame@CRenderDevice@@EAGXPAVpureFrame@@@Z PROC ; CRenderDevice::RemoveSeqFrame, COMDAT

; 609  : {

	push	esi

; 610  : 	seqFrameMT.Remove	( f );

	mov	esi, DWORD PTR _f$[esp]
	push	edi
	mov	edi, DWORD PTR _this$[esp+4]
	push	esi
	lea	ecx, DWORD PTR [edi+876]
	call	?Remove@?$CRegistrator@VpureFrame@@@@QAEXPAVpureFrame@@@Z ; CRegistrator<pureFrame>::Remove

; 611  : 	seqFrame.Remove		( f );

	push	esi
	lea	ecx, DWORD PTR [edi+728]
	call	?Remove@?$CRegistrator@VpureFrame@@@@QAEXPAVpureFrame@@@Z ; CRegistrator<pureFrame>::Remove
	pop	edi
	pop	esi

; 612  : }

	ret	8
?RemoveSeqFrame@CRenderDevice@@EAGXPAVpureFrame@@@Z ENDP ; CRenderDevice::RemoveSeqFrame
_TEXT	ENDS
PUBLIC	?OnWM_Activate@CRenderDevice@@QAEXIJ@Z		; CRenderDevice::OnWM_Activate
; Function compile flags: /Ogtpy
;	COMDAT ?OnWM_Activate@CRenderDevice@@QAEXIJ@Z
_TEXT	SEGMENT
_wParam$ = 8						; size = 4
_lParam$ = 12						; size = 4
?OnWM_Activate@CRenderDevice@@QAEXIJ@Z PROC		; CRenderDevice::OnWM_Activate, COMDAT
; _this$ = ecx

; 573  : 	BOOL bActive					= ((fActive!=WA_INACTIVE) && (!fMinimized))?TRUE:FALSE;

	mov	eax, DWORD PTR _wParam$[esp-4]
	test	ax, ax
	push	esi
	mov	esi, ecx
	je	SHORT $LN6@OnWM_Activ

; 571  : 	u16 fActive						= LOWORD(wParam);
; 572  : 	BOOL fMinimized					= (BOOL) HIWORD(wParam);

	shr	eax, 16					; 00000010H

; 573  : 	BOOL bActive					= ((fActive!=WA_INACTIVE) && (!fMinimized))?TRUE:FALSE;

	jne	SHORT $LN6@OnWM_Activ
	mov	eax, 1
	jmp	SHORT $LN7@OnWM_Activ
$LN6@OnWM_Activ:
	xor	eax, eax
$LN7@OnWM_Activ:

; 574  : 	
; 575  : 	if (bActive!=Device.b_is_Active)

	cmp	eax, DWORD PTR ?Device@@3VCRenderDevice@@A+20
	je	SHORT $LN1@OnWM_Activ

; 576  : 	{
; 577  : 		Device.b_is_Active			= bActive;
; 578  : 
; 579  : 		if (Device.b_is_Active)	

	test	eax, eax
	mov	DWORD PTR ?Device@@3VCRenderDevice@@A+20, eax
	je	SHORT $LN2@OnWM_Activ

; 580  : 		{
; 581  : 			Device.seqAppActivate.Process(rp_AppActivate);

	mov	eax, OFFSET ?Device@@3VCRenderDevice@@A+664
	call	?Process@?$CRegistrator@VpureAppActivate@@@@QAEXP6IXPAX@Z@Z ; CRegistrator<pureAppActivate>::Process

; 582  : 			app_inactive_time		+= TimerMM.GetElapsed_ms() - app_inactive_time_start;

	lea	ecx, DWORD PTR [esi+800]
	call	DWORD PTR __imp_?GetElapsed_ms@CTimer@@QBEIXZ
	sub	eax, DWORD PTR ?app_inactive_time_start@@3IA ; app_inactive_time_start

; 583  : 
; 584  : #ifndef DEDICATED_SERVER
; 585  : #	ifdef INGAME_EDITOR
; 586  : 			if (!editor())
; 587  : #	endif // #ifdef INGAME_EDITOR
; 588  : 				ShowCursor			(FALSE);

	push	0
	add	DWORD PTR ?app_inactive_time@@3IA, eax	; app_inactive_time

; 594  : 			ShowCursor				(TRUE);

	call	DWORD PTR __imp__ShowCursor@4
	pop	esi

; 595  : 		}
; 596  : 	}
; 597  : }

	ret	8
$LN2@OnWM_Activ:

; 589  : #endif // #ifndef DEDICATED_SERVER
; 590  : 		}else	
; 591  : 		{
; 592  : 			app_inactive_time_start	= TimerMM.GetElapsed_ms();

	lea	ecx, DWORD PTR [esi+800]
	call	DWORD PTR __imp_?GetElapsed_ms@CTimer@@QBEIXZ
	mov	DWORD PTR ?app_inactive_time_start@@3IA, eax ; app_inactive_time_start

; 593  : 			Device.seqAppDeactivate.Process(rp_AppDeactivate);

	mov	eax, OFFSET ?Device@@3VCRenderDevice@@A+680
	call	?Process@?$CRegistrator@VpureAppDeactivate@@@@QAEXP6IXPAX@Z@Z ; CRegistrator<pureAppDeactivate>::Process

; 594  : 			ShowCursor				(TRUE);

	push	1
	call	DWORD PTR __imp__ShowCursor@4
$LN1@OnWM_Activ:
	pop	esi

; 595  : 		}
; 596  : 	}
; 597  : }

	ret	8
?OnWM_Activate@CRenderDevice@@QAEXIJ@Z ENDP		; CRenderDevice::OnWM_Activate
_TEXT	ENDS
PUBLIC	?ProcessLoading@@YAXP6IXPAX@Z@Z			; ProcessLoading
; Function compile flags: /Ogtpy
;	COMDAT ?ProcessLoading@@YAXP6IXPAX@Z@Z
_TEXT	SEGMENT
?ProcessLoading@@YAXP6IXPAX@Z@Z PROC			; ProcessLoading, COMDAT

; 488  : {

	push	esi

; 489  : 	Device.seqFrame.Process				(rp_Frame);

	mov	esi, OFFSET ?Device@@3VCRenderDevice@@A+728
	call	?Process@?$CRegistrator@VpureFrame@@@@QAEXP6IXPAX@Z@Z ; CRegistrator<pureFrame>::Process

; 490  : 	g_bLoaded							= TRUE;

	mov	DWORD PTR ?g_bLoaded@@3HA, 1		; g_bLoaded
	pop	esi

; 491  : }

	ret	0
?ProcessLoading@@YAXP6IXPAX@Z@Z ENDP			; ProcessLoading
_TEXT	ENDS
PUBLIC	__real@3f666666
PUBLIC	__real@3d072b02
PUBLIC	?FrameMove@CRenderDevice@@QAEXXZ		; CRenderDevice::FrameMove
;	COMDAT __real@3f666666
; File d:\clearsky\sources\engine\xrcore\ftimer.h
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3d072b02
CONST	SEGMENT
__real@3d072b02 DD 03d072b02r			; 0.033
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\device.cpp
CONST	ENDS
;	COMDAT ?FrameMove@CRenderDevice@@QAEXXZ
_TEXT	SEGMENT
_fPreviousFrameTime$136344 = -4				; size = 4
?FrameMove@CRenderDevice@@QAEXXZ PROC			; CRenderDevice::FrameMove, COMDAT
; _this$ = ecx

; 439  : {

	push	ecx
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, ecx

; 440  : 	dwFrame			++;

	mov	ebx, 1
	add	DWORD PTR [edi+24], ebx

; 441  : 
; 442  : 	dwTimeContinual	= TimerMM.GetElapsed_ms() - app_inactive_time;

	lea	ecx, DWORD PTR [edi+800]
	call	DWORD PTR __imp_?GetElapsed_ms@CTimer@@QBEIXZ
	sub	eax, DWORD PTR ?app_inactive_time@@3IA	; app_inactive_time

; 443  : 
; 444  : 	if (psDeviceFlags.test(rsConstantFPS))	{

	push	256					; 00000100H
	mov	ecx, OFFSET ?psDeviceFlags@@3U?$_flags@I@@A ; psDeviceFlags
	mov	DWORD PTR [edi+44], eax
	call	?test@?$_flags@I@@QBEHI@Z		; _flags<unsigned int>::test
	xor	ebp, ebp
	test	eax, eax
	je	SHORT $LN5@FrameMove

; 445  : 		// 20ms = 50fps
; 446  : 		//fTimeDelta		=	0.020f;			
; 447  : 		//fTimeGlobal		+=	0.020f;
; 448  : 		//dwTimeDelta		=	20;
; 449  : 		//dwTimeGlobal	+=	20;
; 450  : 		// 33ms = 30fps
; 451  : 		fTimeDelta		=	0.033f;			

	movss	xmm0, DWORD PTR __real@3d072b02

; 452  : 		fTimeGlobal		+=	0.033f;

	movss	xmm1, DWORD PTR [edi+32]

; 453  : 		dwTimeDelta		=	33;

	mov	eax, 33					; 00000021H

; 454  : 		dwTimeGlobal	+=	33;

	add	DWORD PTR [edi+40], eax
	addss	xmm1, xmm0
	movss	DWORD PTR [edi+28], xmm0
	movss	DWORD PTR [edi+32], xmm1

; 455  : 	} else {

	jmp	$LN34@FrameMove
$LN5@FrameMove:

; 456  : 		// Timer
; 457  : 		float fPreviousFrameTime = Timer.GetElapsed_sec(); Timer.Start();	// previous frame

	lea	esi, DWORD PTR [edi+512]
	mov	ecx, esi
	call	DWORD PTR __imp_?GetElapsed_sec@CTimer@@QBEMXZ
	fstp	DWORD PTR _fPreviousFrameTime$136344[esp+20]
	cmp	DWORD PTR [esi+24], ebp
	jne	SHORT $LN11@FrameMove
	call	DWORD PTR __imp_?QPC@CPU@@YA_KXZ
	sub	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [esi+40], ebp
	sbb	edx, DWORD PTR [esi+20]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], edx
	mov	DWORD PTR [esi+44], ebp
	mov	DWORD PTR [esi+48], ebp
	mov	DWORD PTR [esi+52], ebp
$LN11@FrameMove:

; 458  : 		fTimeDelta = 0.1f * fTimeDelta + 0.9f*fPreviousFrameTime;			// smooth random system activity - worst case ~7% error

	movss	xmm0, DWORD PTR [edi+28]
	movss	xmm1, DWORD PTR _psShedulerReaction
	movss	xmm2, DWORD PTR _fPreviousFrameTime$136344[esp+20]
	mulss	xmm2, DWORD PTR __real@3f666666
	mulss	xmm0, xmm1
	addss	xmm0, xmm2

; 459  : 		//fTimeDelta = 0.7f * fTimeDelta + 0.3f*fPreviousFrameTime;			// smooth random system activity
; 460  : 		if (fTimeDelta>.1f)    

	comiss	xmm0, xmm1
	movss	DWORD PTR [edi+28], xmm0
	jbe	SHORT $LN3@FrameMove

; 461  : 			fTimeDelta = .1f;							// limit to 15fps minimum

	movss	DWORD PTR [edi+28], xmm1
$LN3@FrameMove:

; 462  : 
; 463  : 		if (fTimeDelta <= 0.f) 

	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [edi+28]
	jb	SHORT $LN2@FrameMove

; 464  : 			fTimeDelta = EPS_S + EPS_S;					// limit to 15fps minimum

	movss	xmm1, DWORD PTR __real@3456bf95
	movss	DWORD PTR [edi+28], xmm1
$LN2@FrameMove:

; 465  : 
; 466  : 		if(Paused())	

	mov	eax, DWORD PTR __imp_?g_pauseMngr@@3VpauseMngr@@A
	cmp	DWORD PTR [eax+12], ebp
	je	SHORT $LN1@FrameMove

; 467  : 			fTimeDelta = 0.0f;

	movss	DWORD PTR [edi+28], xmm0
$LN1@FrameMove:

; 468  : 
; 469  : //		u64	qTime		= TimerGlobal.GetElapsed_clk();
; 470  : 		fTimeGlobal		= TimerGlobal.GetElapsed_sec(); //float(qTime)*CPU::cycles2seconds;

	lea	esi, DWORD PTR [edi+584]
	mov	ecx, esi
	call	DWORD PTR __imp_?GetElapsed_sec@CTimer@@QBEMXZ
	fstp	DWORD PTR [edi+32]

; 471  : 		u32	_old_global	= dwTimeGlobal;

	mov	ebx, DWORD PTR [edi+40]

; 472  : 		dwTimeGlobal = TimerGlobal.GetElapsed_ms();

	mov	ecx, esi
	call	DWORD PTR __imp_?GetElapsed_ms@CTimer@@QBEIXZ
	mov	DWORD PTR [edi+40], eax

; 473  : 		dwTimeDelta		= dwTimeGlobal-_old_global;

	sub	eax, ebx
	mov	ebx, 1
$LN34@FrameMove:

; 474  : 	}
; 475  : 
; 476  : 	// Frame move
; 477  : 	Statistic->EngineTOTAL.Begin	();

	mov	esi, DWORD PTR [edi+920]
	mov	ecx, DWORD PTR __imp_?g_bEnableStatGather@@3HA
	mov	DWORD PTR [edi+36], eax
	add	esi, 264				; 00000108H
	cmp	DWORD PTR [ecx], ebp
	je	SHORT $LN24@FrameMove
	add	DWORD PTR [esi+68], ebx
	cmp	DWORD PTR [esi+24], ebp
	jne	SHORT $LN24@FrameMove
	call	DWORD PTR __imp_?QPC@CPU@@YA_KXZ
	sub	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [esi+40], ebp
	sbb	edx, DWORD PTR [esi+20]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], edx
	mov	DWORD PTR [esi+44], ebp
	mov	DWORD PTR [esi+48], ebp
	mov	DWORD PTR [esi+52], ebp
$LN24@FrameMove:

; 478  : 
; 479  : 	//	TODO: HACK to test loading screen.
; 480  : 	//if(!g_bLoaded) 
; 481  : 		ProcessLoading				(rp_Frame);

	mov	esi, OFFSET ?Device@@3VCRenderDevice@@A+728
	call	?Process@?$CRegistrator@VpureFrame@@@@QAEXP6IXPAX@Z@Z ; CRegistrator<pureFrame>::Process

; 482  : 	//else
; 483  : 	//	seqFrame.Process			(rp_Frame);
; 484  : 	Statistic->EngineTOTAL.End	();

	mov	edi, DWORD PTR [edi+920]
	mov	edx, DWORD PTR __imp_?g_bEnableStatGather@@3HA
	add	edi, 264				; 00000108H
	cmp	DWORD PTR [edx], ebp
	mov	DWORD PTR ?g_bLoaded@@3HA, ebx		; g_bLoaded
	je	SHORT $LN32@FrameMove
	mov	ecx, edi
	call	DWORD PTR __imp_?GetElapsed_ticks@CTimer@@QBE_KXZ
	add	DWORD PTR [edi+56], eax
	adc	DWORD PTR [edi+60], edx
$LN32@FrameMove:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 485  : }

	pop	ecx
	ret	0
?FrameMove@CRenderDevice@@QAEXXZ ENDP			; CRenderDevice::FrameMove
_TEXT	ENDS
PUBLIC	?mt_Thread@@YAXPAX@Z				; mt_Thread
; Function compile flags: /Ogtpy
;	COMDAT ?mt_Thread@@YAXPAX@Z
_TEXT	SEGMENT
$T363212 = -2						; size = 1
$T363216 = -1						; size = 1
_ptr$ = 8						; size = 4
?mt_Thread@@YAXPAX@Z PROC				; mt_Thread, COMDAT

; 179  : void 			mt_Thread	(void *ptr)	{

	push	ecx
	push	ebx
	push	ebp
	push	edi

; 180  : 	while (true) {
; 181  : 		// waiting for Device permission to execute
; 182  : 		Device.mt_csEnter.Enter	();

	mov	edi, DWORD PTR __imp_?Enter@xrCriticalSection@@QAEXXZ
	mov	ecx, OFFSET ?Device@@3VCRenderDevice@@A+988
	call	edi

; 183  : 
; 184  : 		if (Device.mt_bMustExit) {

	mov	eax, DWORD PTR ?Device@@3VCRenderDevice@@A+996
	mov	ebp, DWORD PTR __imp_?Leave@xrCriticalSection@@QAEXXZ
	xor	ebx, ebx
	test	eax, eax
	jne	$LN76@mt_Thread
	push	esi
	npad	9
$LL6@mt_Thread:

; 187  : 			return;
; 188  : 		}
; 189  : 		// we has granted permission to execute
; 190  : 		mt_Thread_marker			= Device.dwFrame;

	mov	ecx, DWORD PTR ?Device@@3VCRenderDevice@@A+24

; 191  :  
; 192  : 		for (u32 pit=0; pit<Device.seqParallel.size(); pit++)

	mov	eax, DWORD PTR ?Device@@3VCRenderDevice@@A+908
	mov	DWORD PTR ?mt_Thread_marker@@3IC, ecx	; mt_Thread_marker
	mov	ecx, DWORD PTR ?Device@@3VCRenderDevice@@A+912
	mov	edx, ecx
	sub	edx, eax
	xor	esi, esi
	sar	edx, 3
	je	SHORT $LN1@mt_Thread
$LL3@mt_Thread:

; 193  : 			Device.seqParallel[pit]	();

	mov	ecx, DWORD PTR [eax+esi*8]
	mov	edx, DWORD PTR [eax+esi*8+4]
	push	ecx
	call	edx
	mov	ecx, DWORD PTR ?Device@@3VCRenderDevice@@A+912
	mov	eax, DWORD PTR ?Device@@3VCRenderDevice@@A+908
	mov	edx, ecx
	sub	edx, eax
	add	esi, 1
	sar	edx, 3
	cmp	esi, edx
	jb	SHORT $LL3@mt_Thread
$LN1@mt_Thread:

; 194  : 		Device.seqParallel.clear_not_free	();

	cmp	eax, ecx
	je	SHORT $LN53@mt_Thread
	mov	BYTE PTR $T363212[esp+20], bl
	mov	BYTE PTR $T363216[esp+20], bl
	mov	DWORD PTR ?Device@@3VCRenderDevice@@A+912, eax
$LN53@mt_Thread:

; 195  : 		Device.seqFrameMT.Process	(rp_Frame);

	mov	esi, OFFSET ?Device@@3VCRenderDevice@@A+876
	call	?Process@?$CRegistrator@VpureFrame@@@@QAEXP6IXPAX@Z@Z ; CRegistrator<pureFrame>::Process

; 196  : 
; 197  : 		// now we give control to device - signals that we are ended our work
; 198  : 		Device.mt_csEnter.Leave	();

	mov	ecx, OFFSET ?Device@@3VCRenderDevice@@A+988
	call	ebp

; 199  : 		// waits for device signal to continue - to start again
; 200  : 		Device.mt_csLeave.Enter	();

	mov	ecx, OFFSET ?Device@@3VCRenderDevice@@A+992
	call	edi

; 201  : 		// returns sync signal to device
; 202  : 		Device.mt_csLeave.Leave	();

	mov	ecx, OFFSET ?Device@@3VCRenderDevice@@A+992
	call	ebp
	mov	ecx, OFFSET ?Device@@3VCRenderDevice@@A+988
	call	edi
	mov	eax, DWORD PTR ?Device@@3VCRenderDevice@@A+996
	test	eax, eax
	je	$LL6@mt_Thread
	pop	esi
$LN76@mt_Thread:

; 185  : 			Device.mt_bMustExit = FALSE;				// Important!!!
; 186  : 			Device.mt_csEnter.Leave();					// Important!!!

	mov	ecx, OFFSET ?Device@@3VCRenderDevice@@A+988
	mov	DWORD PTR ?Device@@3VCRenderDevice@@A+996, ebx
	call	ebp
	pop	edi
	pop	ebp
	pop	ebx

; 203  : 	}
; 204  : }

	pop	ecx
	ret	0
?mt_Thread@@YAXPAX@Z ENDP				; mt_Thread
; Function compile flags: /Ogtpy
;	COMDAT ?AddSeqFrame@CRenderDevice@@EAGXPAVpureFrame@@_N@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_f$ = 12						; size = 4
_mt$ = 16						; size = 1
?AddSeqFrame@CRenderDevice@@EAGXPAVpureFrame@@_N@Z PROC	; CRenderDevice::AddSeqFrame, COMDAT

; 601  : 		if ( mt )	

	cmp	BYTE PTR _mt$[esp-4], 0

; 602  : 		seqFrameMT.Add	(f,REG_PRIORITY_HIGH);

	push	0
	je	SHORT $LN2@AddSeqFram
	mov	eax, DWORD PTR _f$[esp]
	mov	ecx, DWORD PTR _this$[esp]
	push	858993459				; 33333333H
	push	eax
	add	ecx, 876				; 0000036cH

; 603  : 	else								
; 604  : 		seqFrame.Add		(f,REG_PRIORITY_LOW);

	call	?Add@?$CRegistrator@VpureFrame@@@@QAEXPAVpureFrame@@HI@Z ; CRegistrator<pureFrame>::Add

; 605  : 
; 606  : }

	ret	12					; 0000000cH
$LN2@AddSeqFram:

; 603  : 	else								
; 604  : 		seqFrame.Add		(f,REG_PRIORITY_LOW);

	mov	ecx, DWORD PTR _f$[esp]
	push	286331153				; 11111111H
	push	ecx
	mov	ecx, DWORD PTR _this$[esp+8]
	add	ecx, 728				; 000002d8H
	call	?Add@?$CRegistrator@VpureFrame@@@@QAEXPAVpureFrame@@HI@Z ; CRegistrator<pureFrame>::Add

; 605  : 
; 606  : }

	ret	12					; 0000000cH
?AddSeqFrame@CRenderDevice@@EAGXPAVpureFrame@@_N@Z ENDP	; CRenderDevice::AddSeqFrame
PUBLIC	?start@CLoadScreenRenderer@@QAEX_N@Z		; CLoadScreenRenderer::start
; Function compile flags: /Ogtpy
;	COMDAT ?start@CLoadScreenRenderer@@QAEX_N@Z
_TEXT	SEGMENT
_I$483610 = -12						; size = 12
_b_user_input$ = 8					; size = 1
?start@CLoadScreenRenderer@@QAEX_N@Z PROC		; CLoadScreenRenderer::start, COMDAT
; _this$ = ecx

; 619  : {

	sub	esp, 12					; 0000000cH

; 620  : 	Device.seqRender.Add			(this, 0);

	xor	eax, eax
	push	edi
	mov	DWORD PTR _I$483610[esp+20], eax
	mov	DWORD PTR _I$483610[esp+24], eax
	mov	edi, ecx
	lea	eax, DWORD PTR _I$483610[esp+16]
	push	eax
	mov	ecx, OFFSET ?Device@@3VCRenderDevice@@A+648
	mov	DWORD PTR _I$483610[esp+20], edi
	call	?push_back@?$vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@stlp_std@@QAEXABU_REG_INFO@@@Z ; stlp_std::vector<_REG_INFO,xalloc<_REG_INFO> >::push_back
	test	BYTE PTR ?Device@@3VCRenderDevice@@A+660, 1
	je	SHORT $LN4@start
	or	DWORD PTR ?Device@@3VCRenderDevice@@A+660, 2

; 621  : 	b_registered					= true;
; 622  : 	b_need_user_input				= b_user_input;

	mov	cl, BYTE PTR _b_user_input$[esp+12]
	mov	BYTE PTR [edi+5], cl
	mov	BYTE PTR [edi+4], 1
	pop	edi

; 623  : }

	add	esp, 12					; 0000000cH
	ret	4

; 620  : 	Device.seqRender.Add			(this, 0);

$LN4@start:
	push	esi
	mov	esi, OFFSET ?Device@@3VCRenderDevice@@A+648
	call	?Resort@?$CRegistrator@VpureRender@@@@QAEXXZ ; CRegistrator<pureRender>::Resort

; 621  : 	b_registered					= true;
; 622  : 	b_need_user_input				= b_user_input;

	mov	dl, BYTE PTR _b_user_input$[esp+16]
	pop	esi
	mov	BYTE PTR [edi+5], dl
	mov	BYTE PTR [edi+4], 1
	pop	edi

; 623  : }

	add	esp, 12					; 0000000cH
	ret	4
?start@CLoadScreenRenderer@@QAEX_N@Z ENDP		; CLoadScreenRenderer::start
_TEXT	ENDS
PUBLIC	?PreCache@CRenderDevice@@QAEXI_N0@Z		; CRenderDevice::PreCache
; Function compile flags: /Ogtpy
;	COMDAT ?PreCache@CRenderDevice@@QAEXI_N0@Z
_TEXT	SEGMENT
$T483618 = 8						; size = 4
_amount$ = 8						; size = 4
_b_draw_loadscreen$ = 12				; size = 1
_b_wait_user_input$ = 16				; size = 1
?PreCache@CRenderDevice@@QAEXI_N0@Z PROC		; CRenderDevice::PreCache, COMDAT
; _this$ = ecx

; 208  : {

	push	edi
	mov	edi, ecx

; 209  : 	if (m_pRender->GetForceGPU_REF()) amount=0;

	mov	ecx, DWORD PTR [edi+868]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+96]
	call	edx
	test	eax, eax
	je	SHORT $LN28@PreCache
	xor	eax, eax
	jmp	SHORT $LN3@PreCache
$LN28@PreCache:
	mov	eax, DWORD PTR _amount$[esp]
$LN3@PreCache:

; 210  : #ifdef DEDICATED_SERVER
; 211  : 	amount = 0;
; 212  : #endif
; 213  : 	// Msg			("* PCACHE: start for %d...",amount);
; 214  : 	dwPrecacheFrame	= dwPrecacheTotal = amount;
; 215  : 	if (amount && !precache_light && g_pGameLevel && g_loading_events.empty()) {

	test	eax, eax
	mov	DWORD PTR [edi+856], eax
	mov	DWORD PTR [edi+12], eax
	je	$LN1@PreCache
	cmp	DWORD PTR ?precache_light@@3V?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@A, 0 ; precache_light
	jne	$LN2@PreCache
	cmp	DWORD PTR ?g_pGameLevel@@3PAVIGame_Level@@A, 0 ; g_pGameLevel
	je	$LN2@PreCache
	cmp	DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A, OFFSET ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A ; g_loading_events
	jne	$LN2@PreCache

; 216  : 		precache_light					= ::Render->light_create();

	mov	eax, DWORD PTR __imp_?Render@@3PAVIRender_interface@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+124]
	call	eax
	test	eax, eax
	mov	DWORD PTR $T483618[esp], eax
	je	SHORT $LN16@PreCache
	add	DWORD PTR [eax+4], 1
$LN16@PreCache:
	push	esi
	lea	eax, DWORD PTR $T483618[esp+4]
	call	??4?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@QAEAAV0@ABV0@@Z ; resptr_core<IRender_Light,resptrcode_light>::operator=
	lea	esi, DWORD PTR $T483618[esp+4]
	call	??1?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@QAE@XZ ; resptr_core<IRender_Light,resptrcode_light>::~resptr_core<IRender_Light,resptrcode_light>

; 217  : 		precache_light->set_shadow		(false);

	mov	ecx, DWORD PTR ?precache_light@@3V?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@A ; precache_light
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	push	0
	call	eax

; 218  : 		precache_light->set_position	(vCameraPosition);

	mov	ecx, DWORD PTR ?precache_light@@3V?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@A ; precache_light
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+36]
	add	edi, 48					; 00000030H
	push	edi
	call	eax

; 219  : 		precache_light->set_color		(255,255,255);

	fld	DWORD PTR __real@437f0000
	mov	ecx, DWORD PTR ?precache_light@@3V?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@A ; precache_light
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+60]
	sub	esp, 12					; 0000000cH
	fst	DWORD PTR [esp+8]
	fst	DWORD PTR [esp+4]
	fstp	DWORD PTR [esp]
	call	eax

; 220  : 		precache_light->set_range		(5.0f);

	mov	ecx, DWORD PTR ?precache_light@@3V?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@A ; precache_light
	fld	DWORD PTR __real@40a00000
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+48]
	push	ecx
	fstp	DWORD PTR [esp]
	call	eax

; 221  : 		precache_light->set_active		(true);

	mov	ecx, DWORD PTR ?precache_light@@3V?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@A ; precache_light
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	push	1
	call	eax
	pop	esi
$LN2@PreCache:

; 222  : 	}
; 223  : 
; 224  : 	if(amount && b_draw_loadscreen && load_screen_renderer.b_registered==false)

	cmp	BYTE PTR _b_draw_loadscreen$[esp], 0
	je	SHORT $LN1@PreCache
	cmp	BYTE PTR ?load_screen_renderer@@3VCLoadScreenRenderer@@A+4, 0
	jne	SHORT $LN1@PreCache

; 225  : 	{
; 226  : 		load_screen_renderer.start	(b_wait_user_input);

	mov	ecx, DWORD PTR _b_wait_user_input$[esp]
	push	ecx
	mov	ecx, OFFSET ?load_screen_renderer@@3VCLoadScreenRenderer@@A ; load_screen_renderer
	call	?start@CLoadScreenRenderer@@QAEX_N@Z	; CLoadScreenRenderer::start
$LN1@PreCache:
	pop	edi

; 227  : 	}
; 228  : }

	ret	12					; 0000000cH
?PreCache@CRenderDevice@@QAEXI_N0@Z ENDP		; CRenderDevice::PreCache
_TEXT	ENDS
PUBLIC	?End@CRenderDevice@@QAEXXZ			; CRenderDevice::End
; Function compile flags: /Ogtpy
;	COMDAT ?End@CRenderDevice@@QAEXXZ
_TEXT	SEGMENT
_wi$132880 = -60					; size = 60
?End@CRenderDevice@@QAEXXZ PROC				; CRenderDevice::End, COMDAT
; _this$ = ecx

; 110  : {

	sub	esp, 60					; 0000003cH
	push	esi
	mov	esi, ecx

; 111  : #ifndef DEDICATED_SERVER
; 112  : 
; 113  : 
; 114  : #ifdef INGAME_EDITOR
; 115  : 	bool							load_finished = false;
; 116  : #endif // #ifdef INGAME_EDITOR
; 117  : 	if (dwPrecacheFrame)

	cmp	DWORD PTR [esi+12], 0
	push	edi
	je	$LN25@End

; 118  : 	{
; 119  : 		::Sound->set_master_volume	(0.f);

	mov	eax, DWORD PTR __imp_?Sound@@3PAVCSound_manager_interface@@A
	fldz
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+64]
	push	ecx
	fstp	DWORD PTR [esp]
	call	eax

; 120  : 		dwPrecacheFrame	--;

	add	DWORD PTR [esi+12], -1

; 121  : //.		pApp->load_draw_internal	();
; 122  : 		if (0==dwPrecacheFrame)

	jne	$LN25@End

; 123  : 		{
; 124  : 
; 125  : #ifdef INGAME_EDITOR
; 126  : 			load_finished			= true;
; 127  : #endif // #ifdef INGAME_EDITOR
; 128  : 			//Gamma.Update		();
; 129  : 			m_pRender->updateGamma();

	mov	ecx, DWORD PTR [esi+868]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	call	eax

; 130  : 
; 131  : 			if(precache_light) precache_light->set_active	(false);

	mov	ecx, DWORD PTR ?precache_light@@3V?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@A ; precache_light
	mov	edx, ecx
	neg	edx
	sbb	edx, edx
	test	edx, OFFSET ?_get@?$resptr_base@VIRender_Light@@@@QBEPAVIRender_Light@@XZ ; resptr_base<IRender_Light>::_get
	je	SHORT $LN5@End
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+4]
	push	0
	call	edx
	mov	ecx, DWORD PTR ?precache_light@@3V?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@A ; precache_light
$LN5@End:

; 132  : 			if(precache_light) precache_light.destroy		();

	neg	ecx
	sbb	ecx, ecx
	test	ecx, OFFSET ?_get@?$resptr_base@VIRender_Light@@@@QBEPAVIRender_Light@@XZ ; resptr_base<IRender_Light>::_get
	je	SHORT $LN4@End
	mov	ecx, OFFSET ?precache_light@@3V?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@A ; precache_light
	call	?destroy@resptrcode_light@@QAEXXZ	; resptrcode_light::destroy
$LN4@End:

; 133  : 			::Sound->set_master_volume						(1.f);

	mov	eax, DWORD PTR __imp_?Sound@@3PAVCSound_manager_interface@@A
	fld1
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+64]
	push	ecx
	fstp	DWORD PTR [esp]
	call	eax

; 134  : //			pApp->destroy_loading_shaders					();
; 135  : 
; 136  : 			m_pRender->ResourcesDestroyNecessaryTextures	();

	mov	ecx, DWORD PTR [esi+868]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+76]
	call	eax

; 137  : 			Memory.mem_compact								();

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_compact@xrMemory@@QAEXXZ

; 138  : 			Msg												("* MEMORY USAGE: %d K",Memory.mem_usage()/1024);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	0
	push	0
	call	DWORD PTR __imp_?mem_usage@xrMemory@@QAEIPAI0@Z
	mov	edi, DWORD PTR __imp_?Msg@@YAXPBDZZ
	shr	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_0BF@FHJFOAFF@?$CK?5MEMORY?5USAGE?3?5?$CFd?5K?$AA@
	call	edi

; 139  : 			Msg												("* End of synchronization A[%d] R[%d]",b_is_Active, b_is_Ready);

	mov	ecx, DWORD PTR [esi+16]
	mov	edx, DWORD PTR [esi+20]
	push	ecx
	push	edx
	push	OFFSET ??_C@_0CF@MGEIHOOO@?$CK?5End?5of?5synchronization?5A?$FL?$CFd?$FN?5R@
	call	edi

; 140  : 
; 141  : #ifdef FIND_CHUNK_BENCHMARK_ENABLE
; 142  : 			g_find_chunk_counter.flush();
; 143  : #endif // FIND_CHUNK_BENCHMARK_ENABLE
; 144  : 
; 145  : 			CheckPrivilegySlowdown							();
; 146  : 			
; 147  : 			if(g_pGamePersistent->GameType()==1)//haCk

	mov	eax, DWORD PTR ?g_pGamePersistent@@3PAVIGame_Persistent@@A ; g_pGamePersistent
	mov	edi, 1
	add	esp, 20					; 00000014H
	cmp	DWORD PTR [eax+1060], edi
	jne	SHORT $LN25@End

; 148  : 			{
; 149  : 				WINDOWINFO	wi;
; 150  : 				GetWindowInfo(m_hWnd,&wi);

	mov	edx, DWORD PTR [esi+760]
	lea	ecx, DWORD PTR _wi$132880[esp+68]
	push	ecx
	push	edx
	call	DWORD PTR __imp__GetWindowInfo@8

; 151  : 				if(wi.dwWindowStatus!=WS_ACTIVECAPTION)

	cmp	DWORD PTR _wi$132880[esp+112], edi
	je	SHORT $LN25@End

; 152  : 					Pause(TRUE,TRUE,TRUE,"application start");

	cmp	BYTE PTR ?g_bBenchmark@@3_NA, 0		; g_bBenchmark
	jne	SHORT $LN25@End
	mov	eax, DWORD PTR __imp_?g_pauseMngr@@3VpauseMngr@@A
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN28@End
	mov	DWORD PTR ?bShowPauseString@@3HA, edi	; bShowPauseString
$LN28@End:
	mov	ecx, DWORD PTR ?g_pGamePersistent@@3PAVIGame_Persistent@@A ; g_pGamePersistent
	test	ecx, ecx
	je	SHORT $LN26@End
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+76]
	call	eax
	test	al, al
	je	SHORT $LN27@End
$LN26@End:
	mov	ecx, DWORD PTR __imp_?g_pauseMngr@@3VpauseMngr@@A
	push	edi
	call	DWORD PTR __imp_?Pause@pauseMngr@@QAEXH@Z
$LN27@End:
	mov	ecx, DWORD PTR __imp_?Sound@@3PAVCSound_manager_interface@@A
	mov	ecx, DWORD PTR [ecx]
	test	ecx, ecx
	je	SHORT $LN25@End
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+48]
	push	edi
	call	eax
	mov	DWORD PTR ?snd_emitters_@?1??Pause@CRenderDevice@@QAEXHHHPBD@Z@4HA, eax
$LN25@End:

; 153  : 			}
; 154  : 		}
; 155  : 	}
; 156  : 
; 157  : 	g_bRendering		= FALSE;
; 158  : 	// end scene
; 159  : 	//	Present goes here, so call OA Frame end.
; 160  : 	if (g_SASH.IsBenchmarkRunning())

	cmp	BYTE PTR ?g_SASH@@3VxrSASH@@A+3, 0
	mov	DWORD PTR ?g_bRendering@@3HA, 0		; g_bRendering
	je	SHORT $LN1@End

; 161  : 		g_SASH.DisplayFrame(Device.fTimeGlobal);

	fld	DWORD PTR ?Device@@3VCRenderDevice@@A+32
	push	ecx
	mov	ecx, OFFSET ?g_SASH@@3VxrSASH@@A	; g_SASH
	fstp	DWORD PTR [esp]
	call	?DisplayFrame@xrSASH@@QAEXM@Z		; xrSASH::DisplayFrame
$LN1@End:

; 162  : 	m_pRender->End();

	mov	ecx, DWORD PTR [esi+868]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+112]

; 163  : 	//RCache.OnFrameEnd	();
; 164  : 	//Memory.dbg_check		();
; 165  :     //CHK_DX				(HW.pDevice->EndScene());
; 166  : 
; 167  : 	//HRESULT _hr		= HW.pDevice->Present( NULL, NULL, NULL, NULL );
; 168  : 	//if				(D3DERR_DEVICELOST==_hr)	return;			// we will handle this later
; 169  : 	//R_ASSERT2		(SUCCEEDED(_hr),	"Presentation failed. Driver upgrade needed?");
; 170  : #	ifdef INGAME_EDITOR
; 171  : 		if (load_finished && m_editor)
; 172  : 			m_editor->on_load_finished	();
; 173  : #	endif // #ifdef INGAME_EDITOR
; 174  : #endif
; 175  : }

	pop	edi
	pop	esi
	add	esp, 60					; 0000003cH

; 162  : 	m_pRender->End();

	jmp	eax
?End@CRenderDevice@@QAEXXZ ENDP				; CRenderDevice::End
PUBLIC	?Begin@CRenderDevice@@QAEHXZ			; CRenderDevice::Begin
; Function compile flags: /Ogtpy
;	COMDAT ?Begin@CRenderDevice@@QAEHXZ
_TEXT	SEGMENT
?Begin@CRenderDevice@@QAEHXZ PROC			; CRenderDevice::Begin, COMDAT
; _this$ = ecx

; 43   : {

	push	esi
	mov	esi, ecx

; 44   : #ifndef DEDICATED_SERVER
; 45   : 
; 46   : 	/*
; 47   : 	HW.Validate		();
; 48   : 	HRESULT	_hr		= HW.pDevice->TestCooperativeLevel();
; 49   :     if (FAILED(_hr))
; 50   : 	{
; 51   : 		// If the device was lost, do not render until we get it back
; 52   : 		if		(D3DERR_DEVICELOST==_hr)		{
; 53   : 			Sleep	(33);
; 54   : 			return	FALSE;
; 55   : 		}
; 56   : 
; 57   : 		// Check if the device is ready to be reset
; 58   : 		if		(D3DERR_DEVICENOTRESET==_hr)
; 59   : 		{
; 60   : 			Reset	();
; 61   : 		}
; 62   : 	}
; 63   : 	*/
; 64   : 
; 65   : 	switch (m_pRender->GetDeviceState())

	mov	ecx, DWORD PTR [esi+868]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+92]
	call	edx
	sub	eax, 0
	je	SHORT $LN2@Begin
	sub	eax, 1
	je	SHORT $LN7@Begin
	sub	eax, 1
	je	SHORT $LN6@Begin

; 80   : 
; 81   : 	default:
; 82   : 		R_ASSERT(0);

	cmp	BYTE PTR ?ignore_always@?5??Begin@CRenderDevice@@QAEHXZ@4_NA, 0
	jne	SHORT $LN2@Begin
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?5??Begin@CRenderDevice@@QAEHXZ@4_NA
	push	OFFSET ??_C@_0BF@POONHHLC@CRenderDevice?3?3Begin?$AA@
	push	82					; 00000052H
	push	OFFSET ??_C@_0CP@NGFEBHDG@D?3?2CLEARSKY?2sources?2engine?2xrEng@
	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	call	DWORD PTR __imp_?fail@xrDebug@@QAEXPBD0H0AA_N@Z
$LN2@Begin:

; 83   : 	}
; 84   : 
; 85   : 	m_pRender->Begin();

	mov	ecx, DWORD PTR [esi+868]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+104]
	call	edx

; 86   : 
; 87   : 	/*
; 88   : 	CHK_DX					(HW.pDevice->BeginScene());
; 89   : 	RCache.OnFrameBegin		();
; 90   : 	RCache.set_CullMode		(CULL_CW);
; 91   : 	RCache.set_CullMode		(CULL_CCW);
; 92   : 	if (HW.Caps.SceneMode)	overdrawBegin	();
; 93   : 	*/
; 94   : 
; 95   : 	FPU::m24r	();

	call	DWORD PTR __imp_?m24r@FPU@@YAXXZ

; 96   : 	g_bRendering = 	TRUE;

	mov	DWORD PTR ?g_bRendering@@3HA, 1		; g_bRendering

; 97   : #endif
; 98   : 	return		TRUE;

	mov	eax, 1
	pop	esi

; 99   : }

	ret	0
$LN6@Begin:

; 74   : 		break;
; 75   : 
; 76   : 	case IRenderDeviceRender::dsNeedReset:
; 77   : 		// Check if the device is ready to be reset
; 78   : 		Reset();

	push	1
	mov	ecx, esi
	call	?Reset@CRenderDevice@@QAEX_N@Z		; CRenderDevice::Reset

; 79   : 		break;

	jmp	SHORT $LN2@Begin
$LN7@Begin:

; 66   : 	{
; 67   : 	case IRenderDeviceRender::dsOK:
; 68   : 		break;
; 69   : 
; 70   : 	case IRenderDeviceRender::dsLost:
; 71   : 		// If the device was lost, do not render until we get it back
; 72   : 		Sleep(33);

	push	33					; 00000021H
	call	DWORD PTR __imp__Sleep@4

; 73   : 		return FALSE;

	xor	eax, eax
	pop	esi

; 99   : }

	ret	0
?Begin@CRenderDevice@@QAEHXZ ENDP			; CRenderDevice::Begin
PUBLIC	?on_idle@CRenderDevice@@QAGXXZ			; CRenderDevice::on_idle
; Function compile flags: /Ogtpy
;	COMDAT ?on_idle@CRenderDevice@@QAGXXZ
_TEXT	SEGMENT
_mag$542875 = -16					; size = 4
_angle$136299 = -16					; size = 4
tv957 = -12						; size = 4
tv953 = -8						; size = 4
tv949 = -4						; size = 4
tv498 = -4						; size = 4
tv265 = -4						; size = 4
_this$ = 8						; size = 4
?on_idle@CRenderDevice@@QAGXXZ PROC			; CRenderDevice::on_idle, COMDAT

; 236  : {

	sub	esp, 16					; 00000010H
	push	ebx
	push	ebp

; 237  : 	if (!b_is_Ready) {

	mov	ebp, DWORD PTR _this$[esp+20]
	cmp	DWORD PTR [ebp+16], 0
	push	esi
	push	edi
	jne	SHORT $LN17@on_idle

; 358  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 16					; 00000010H

; 238  : 		Sleep	(100);

	mov	DWORD PTR _this$[esp-4], 100		; 00000064H
	jmp	DWORD PTR __imp__Sleep@4
$LN17@on_idle:

; 239  : 		return;
; 240  : 	}
; 241  : 
; 242  : #ifdef DEDICATED_SERVER
; 243  : 	u32 FrameStartTime = TimerGlobal.GetElapsed_ms();
; 244  : #endif
; 245  : 	if (psDeviceFlags.test(rsStatistic))	g_bEnableStatGather	= TRUE;

	push	32					; 00000020H
	mov	ecx, OFFSET ?psDeviceFlags@@3U?$_flags@I@@A ; psDeviceFlags
	call	?test@?$_flags@I@@QBEHI@Z		; _flags<unsigned int>::test
	mov	ecx, DWORD PTR __imp_?g_bEnableStatGather@@3HA
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	DWORD PTR [ecx], eax

; 246  : 	else									g_bEnableStatGather	= FALSE;
; 247  : 	if(g_loading_events.size())

	mov	edx, DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A
	mov	eax, edx
	xor	ecx, ecx
	cmp	eax, OFFSET ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A ; g_loading_events
	je	SHORT $LN14@on_idle
$LL43@on_idle:
	mov	eax, DWORD PTR [eax]
	add	ecx, 1
	cmp	eax, OFFSET ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A ; g_loading_events
	jne	SHORT $LL43@on_idle
	test	ecx, ecx
	je	SHORT $LN14@on_idle

; 248  : 	{
; 249  : 		if( g_loading_events.front()() )

	mov	eax, DWORD PTR [edx+12]
	mov	edx, DWORD PTR [edx+8]
	push	edx
	call	eax
	test	al, al
	je	SHORT $LN88@on_idle

; 250  : 			g_loading_events.pop_front();

	mov	eax, DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, eax
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [ecx+4], eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edx
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN88@on_idle:

; 251  : 		pApp->LoadDraw				();

	mov	ecx, DWORD PTR ?pApp@@3PAVCApplication@@A ; pApp
	call	?LoadDraw@CApplication@@QAEXXZ		; CApplication::LoadDraw
$LN1@on_idle:

; 358  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 16					; 00000010H
	ret	4
$LN14@on_idle:

; 252  : 		return;
; 253  : 	}else 
; 254  : 	{
; 255  : 		if ( (!Device.dwPrecacheFrame) && (!g_SASH.IsBenchmarkRunning())
; 256  : 			&& g_bLoaded)

	cmp	DWORD PTR ?Device@@3VCRenderDevice@@A+12, 0
	jne	SHORT $LN11@on_idle
	cmp	BYTE PTR ?g_SASH@@3VxrSASH@@A+3, 0
	jne	SHORT $LN11@on_idle
	cmp	DWORD PTR ?g_bLoaded@@3HA, 0		; g_bLoaded
	je	SHORT $LN11@on_idle

; 257  : 			g_SASH.StartBenchmark();

	mov	ecx, OFFSET ?g_SASH@@3VxrSASH@@A	; g_SASH
	call	?StartBenchmark@xrSASH@@QAEXXZ		; xrSASH::StartBenchmark
$LN11@on_idle:

; 258  : 
; 259  : 		FrameMove						( );

	mov	ecx, ebp
	call	?FrameMove@CRenderDevice@@QAEXXZ	; CRenderDevice::FrameMove

; 260  : 	}
; 261  : 
; 262  : 	// Precache
; 263  : 	if (dwPrecacheFrame)

	mov	eax, DWORD PTR [ebp+12]
	test	eax, eax
	je	$LN10@on_idle

; 266  : 		float angle						= PI_MUL_2 * factor;

	mov	DWORD PTR tv265[esp+32], eax
	fild	DWORD PTR tv265[esp+32]
	jge	SHORT $LN218@on_idle
	fadd	DWORD PTR __real@4f800000
$LN218@on_idle:
	mov	edx, DWORD PTR [ebp+856]
	fild	DWORD PTR [ebp+856]
	test	edx, edx
	jge	SHORT $LN219@on_idle
	fadd	DWORD PTR __real@4f800000
$LN219@on_idle:

; 264  : 	{
; 265  : 		float factor					= float(dwPrecacheFrame)/float(dwPrecacheTotal);

	fdivp	ST(1), ST(0)

; 267  : 		vCameraDirection.set			(_sin(angle),0,_cos(angle));	vCameraDirection.normalize	();

	push	ecx
	lea	edi, DWORD PTR [ebp+60]
	fmul	DWORD PTR _PI_MUL_2
	fst	DWORD PTR _angle$136299[esp+36]
	fstp	DWORD PTR [esp]
	call	_sinf
	xorps	xmm0, xmm0
	fstp	DWORD PTR [edi]
	fld	DWORD PTR _angle$136299[esp+36]
	movss	DWORD PTR [edi+4], xmm0
	fstp	DWORD PTR [esp]
	call	_cosf
	fstp	DWORD PTR [edi+8]
	movss	xmm2, DWORD PTR [edi]
	movss	xmm1, DWORD PTR [edi+4]
	movss	xmm0, DWORD PTR [edi+8]
	movaps	xmm3, xmm2
	mulss	xmm3, xmm2
	movss	DWORD PTR tv957[esp+36], xmm2
	movaps	xmm2, xmm1
	mulss	xmm2, xmm1
	movss	DWORD PTR tv953[esp+36], xmm1
	movaps	xmm1, xmm0
	mulss	xmm1, xmm0
	movss	DWORD PTR tv949[esp+36], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm3, xmm2
	addss	xmm3, xmm1
	divss	xmm0, xmm3
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	fstp	DWORD PTR _mag$542875[esp+36]
	movss	xmm1, DWORD PTR _mag$542875[esp+36]
	movss	xmm0, DWORD PTR tv957[esp+36]
	mulss	xmm0, xmm1
	movss	DWORD PTR [edi], xmm0
	movss	xmm0, DWORD PTR tv953[esp+36]
	mulss	xmm0, xmm1
	movss	DWORD PTR [edi+4], xmm0
	movss	xmm0, DWORD PTR tv949[esp+36]
	mulss	xmm0, xmm1

; 268  : 		vCameraTop.set					(0,1,0);

	movss	xmm1, DWORD PTR __real@3f800000
	movss	DWORD PTR [edi+8], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ebp+72], xmm0
	movss	DWORD PTR [ebp+80], xmm0
	movss	DWORD PTR [ebp+76], xmm1

; 269  : 		vCameraRight.crossproduct		(vCameraTop,vCameraDirection);

	movss	xmm0, DWORD PTR [edi+8]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebp+80]
	mulss	xmm1, DWORD PTR [edi+4]
	lea	eax, DWORD PTR [ebp+72]
	subss	xmm0, xmm1
	movss	DWORD PTR [ebp+84], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR [edi]
	movss	xmm1, DWORD PTR [eax]
	mulss	xmm1, DWORD PTR [edi+8]
	subss	xmm0, xmm1
	movss	DWORD PTR [ebp+88], xmm0
	movss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR [edi]
	mulss	xmm0, DWORD PTR [edi+4]
	mulss	xmm1, DWORD PTR [eax+4]
	subss	xmm0, xmm1
	add	esp, 4

; 270  : 
; 271  : 		mView.build_camera_dir			(vCameraPosition,vCameraDirection,vCameraTop);

	lea	ebx, DWORD PTR [ebp+48]
	lea	esi, DWORD PTR [ebp+96]
	movss	DWORD PTR [ebp+92], xmm0
	call	?build_camera_dir@?$_matrix@M@@QAEAAU1@ABU?$_vector3@M@@00@Z ; _matrix<float>::build_camera_dir
$LN10@on_idle:

; 272  : 	}
; 273  : 
; 274  : 	// Matrices
; 275  : 	mFullTransform.mul			( mProject,mView	);

	movss	xmm0, DWORD PTR [ebp+208]
	mulss	xmm0, DWORD PTR [ebp+108]
	movss	xmm1, DWORD PTR [ebp+160]
	mulss	xmm1, DWORD PTR [ebp+96]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebp+192]
	mulss	xmm1, DWORD PTR [ebp+104]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebp+176]
	mulss	xmm1, DWORD PTR [ebp+100]
	addss	xmm0, xmm1
	lea	ebx, DWORD PTR [ebp+96]
	add	ebp, 160				; 000000a0H
	mov	edi, DWORD PTR _this$[esp+28]
	movss	DWORD PTR [edi+224], xmm0
	movss	xmm0, DWORD PTR [ebp+36]
	mulss	xmm0, DWORD PTR [ebx+8]
	movss	xmm1, DWORD PTR [ebp+4]
	mulss	xmm1, DWORD PTR [ebx]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebx+12]
	mulss	xmm1, DWORD PTR [ebp+52]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebp+20]
	mulss	xmm1, DWORD PTR [ebx+4]
	addss	xmm0, xmm1
	movss	DWORD PTR [edi+228], xmm0
	movss	xmm0, DWORD PTR [ebp+56]
	mulss	xmm0, DWORD PTR [ebx+12]
	movss	xmm1, DWORD PTR [ebp+24]
	mulss	xmm1, DWORD PTR [ebx+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebp+40]
	mulss	xmm1, DWORD PTR [ebx+8]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebp+8]
	mulss	xmm1, DWORD PTR [ebx]
	addss	xmm0, xmm1
	movss	DWORD PTR [edi+232], xmm0
	movss	xmm0, DWORD PTR [ebp+60]
	mulss	xmm0, DWORD PTR [ebx+12]
	movss	xmm1, DWORD PTR [ebx+4]
	mulss	xmm1, DWORD PTR [ebp+28]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebp+44]
	mulss	xmm1, DWORD PTR [ebx+8]
	lea	esi, DWORD PTR [edi+224]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebp+12]
	mulss	xmm1, DWORD PTR [ebx]
	addss	xmm0, xmm1
	movss	DWORD PTR [esi+12], xmm0
	movss	xmm0, DWORD PTR [ebp+48]
	mulss	xmm0, DWORD PTR [ebx+28]
	movss	xmm1, DWORD PTR [ebx+16]
	mulss	xmm1, DWORD PTR [ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebp+32]
	mulss	xmm1, DWORD PTR [ebx+24]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebp+16]
	mulss	xmm1, DWORD PTR [ebx+20]
	addss	xmm0, xmm1
	movss	DWORD PTR [esi+16], xmm0
	movss	xmm0, DWORD PTR [ebp+4]
	mulss	xmm0, DWORD PTR [ebx+16]
	movss	xmm1, DWORD PTR [ebp+52]
	mulss	xmm1, DWORD PTR [ebx+28]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebp+36]
	mulss	xmm1, DWORD PTR [ebx+24]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebp+20]
	mulss	xmm1, DWORD PTR [ebx+20]
	addss	xmm0, xmm1
	movss	DWORD PTR [esi+20], xmm0
	movss	xmm0, DWORD PTR [ebp+56]
	movss	xmm1, DWORD PTR [ebp+40]
	mulss	xmm0, DWORD PTR [ebx+28]
	mulss	xmm1, DWORD PTR [ebx+24]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebx+16]
	mulss	xmm1, DWORD PTR [ebp+8]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebp+24]
	mulss	xmm1, DWORD PTR [ebx+20]
	addss	xmm0, xmm1
	movss	DWORD PTR [esi+24], xmm0
	movss	xmm0, DWORD PTR [ebp+60]
	mulss	xmm0, DWORD PTR [ebx+28]
	movss	xmm1, DWORD PTR [ebp+44]
	mulss	xmm1, DWORD PTR [ebx+24]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebx+20]
	mulss	xmm1, DWORD PTR [ebp+28]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebx+16]
	mulss	xmm1, DWORD PTR [ebp+12]
	addss	xmm0, xmm1
	movss	DWORD PTR [esi+28], xmm0
	movss	xmm0, DWORD PTR [ebp+48]
	mulss	xmm0, DWORD PTR [ebx+44]
	movss	xmm1, DWORD PTR [ebx+32]
	mulss	xmm1, DWORD PTR [ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebp+32]
	mulss	xmm1, DWORD PTR [ebx+40]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebp+16]
	mulss	xmm1, DWORD PTR [ebx+36]
	addss	xmm0, xmm1
	movss	DWORD PTR [esi+32], xmm0
	movss	xmm0, DWORD PTR [ebp+4]
	mulss	xmm0, DWORD PTR [ebx+32]
	movss	xmm1, DWORD PTR [ebp+52]
	mulss	xmm1, DWORD PTR [ebx+44]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebp+36]
	mulss	xmm1, DWORD PTR [ebx+40]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebp+20]
	mulss	xmm1, DWORD PTR [ebx+36]
	addss	xmm0, xmm1
	movss	DWORD PTR [esi+36], xmm0
	movss	xmm0, DWORD PTR [ebp+56]
	mulss	xmm0, DWORD PTR [ebx+44]
	movss	xmm1, DWORD PTR [ebp+40]
	mulss	xmm1, DWORD PTR [ebx+40]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebx+32]
	mulss	xmm1, DWORD PTR [ebp+8]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebp+24]
	mulss	xmm1, DWORD PTR [ebx+36]
	addss	xmm0, xmm1
	movss	DWORD PTR [esi+40], xmm0
	movss	xmm0, DWORD PTR [ebp+60]
	mulss	xmm0, DWORD PTR [ebx+44]
	movss	xmm1, DWORD PTR [ebp+44]
	mulss	xmm1, DWORD PTR [ebx+40]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebx+36]
	mulss	xmm1, DWORD PTR [ebp+28]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebx+32]
	mulss	xmm1, DWORD PTR [ebp+12]
	addss	xmm0, xmm1
	movss	DWORD PTR [esi+44], xmm0
	movss	xmm0, DWORD PTR [ebp+48]
	mulss	xmm0, DWORD PTR [ebx+60]
	movss	xmm1, DWORD PTR [ebx+52]
	mulss	xmm1, DWORD PTR [ebp+16]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebx+56]
	mulss	xmm1, DWORD PTR [ebp+32]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebp]
	mulss	xmm1, DWORD PTR [ebx+48]
	addss	xmm0, xmm1
	movss	DWORD PTR [esi+48], xmm0
	movss	xmm0, DWORD PTR [ebx+52]
	mulss	xmm0, DWORD PTR [ebp+20]
	movss	xmm1, DWORD PTR [ebp+4]
	mulss	xmm1, DWORD PTR [ebx+48]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebx+60]
	mulss	xmm1, DWORD PTR [ebp+52]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebx+56]
	mulss	xmm1, DWORD PTR [ebp+36]
	addss	xmm0, xmm1
	movss	DWORD PTR [esi+52], xmm0
	movss	xmm0, DWORD PTR [ebp+56]
	mulss	xmm0, DWORD PTR [ebx+60]
	movss	xmm1, DWORD PTR [ebp+40]
	mulss	xmm1, DWORD PTR [ebx+56]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebx+52]
	mulss	xmm1, DWORD PTR [ebp+24]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebx+48]
	mulss	xmm1, DWORD PTR [ebp+8]
	addss	xmm0, xmm1
	movss	DWORD PTR [esi+56], xmm0
	movss	xmm0, DWORD PTR [ebp+60]
	mulss	xmm0, DWORD PTR [ebx+60]
	movss	xmm1, DWORD PTR [ebp+44]
	mulss	xmm1, DWORD PTR [ebx+56]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebx+52]
	mulss	xmm1, DWORD PTR [ebp+28]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ebp+12]
	mulss	xmm1, DWORD PTR [ebx+48]
	addss	xmm0, xmm1
	movss	DWORD PTR [esi+60], xmm0

; 276  : 	m_pRender->SetCacheXform(mView, mProject);

	mov	ecx, DWORD PTR [edi+868]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+120]
	push	ebp
	push	ebx
	call	edx

; 277  : 	//RCache.set_xform_view		( mView				);
; 278  : 	//RCache.set_xform_project	( mProject			);
; 279  : 	D3DXMatrixInverse			( (D3DXMATRIX*)&mInvFullTransform, 0, (D3DXMATRIX*)&mFullTransform);

	push	esi
	push	0
	lea	eax, DWORD PTR [edi+924]
	push	eax
	call	_D3DXMatrixInverse@12

; 280  : 
; 281  : 	vCameraPosition_saved	= vCameraPosition;

	mov	ecx, DWORD PTR [edi+48]
	mov	edx, DWORD PTR [edi+52]
	mov	eax, DWORD PTR [edi+56]
	mov	DWORD PTR [edi+288], ecx
	mov	DWORD PTR [edi+292], edx
	mov	DWORD PTR [edi+296], eax

; 282  : 	mFullTransform_saved	= mFullTransform;
; 283  : 	mView_saved				= mView;

	mov	eax, DWORD PTR _this$[esp+28]
	add	edi, 428				; 000001acH
	mov	ecx, 16					; 00000010H
	rep movsd
	lea	edi, DWORD PTR [eax+300]
	mov	esi, ebx
	mov	ecx, 16					; 00000010H
	rep movsd

; 284  : 	mProject_saved			= mProject;

	lea	edi, DWORD PTR [eax+364]
	mov	ecx, 16					; 00000010H
	mov	esi, ebp

; 285  : 
; 286  : 	// *** Resume threads
; 287  : 	// Capture end point - thread must run only ONE cycle
; 288  : 	// Release start point - allow thread to run
; 289  : 	mt_csLeave.Enter			();

	lea	ebx, DWORD PTR [eax+992]
	rep movsd
	mov	ecx, ebx
	call	DWORD PTR __imp_?Enter@xrCriticalSection@@QAEXXZ

; 290  : 	mt_csEnter.Leave			();

	mov	edi, DWORD PTR _this$[esp+28]
	lea	ebp, DWORD PTR [edi+988]
	mov	ecx, ebp
	call	DWORD PTR __imp_?Leave@xrCriticalSection@@QAEXXZ

; 291  : 	Sleep						(0);

	push	0
	call	DWORD PTR __imp__Sleep@4

; 292  : 
; 293  : #ifndef DEDICATED_SERVER
; 294  : 	Statistic->RenderTOTAL_Real.FrameStart	();

	mov	ecx, DWORD PTR [edi+920]
	add	ecx, 1088				; 00000440H
	call	DWORD PTR __imp_?FrameStart@CStatTimer@@QAEXXZ

; 295  : 	Statistic->RenderTOTAL_Real.Begin		();

	mov	esi, DWORD PTR [edi+920]
	mov	ecx, DWORD PTR __imp_?g_bEnableStatGather@@3HA
	add	esi, 1088				; 00000440H
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN129@on_idle
	add	DWORD PTR [esi+68], 1
	cmp	DWORD PTR [esi+24], 0
	jne	SHORT $LN129@on_idle
	call	DWORD PTR __imp_?QPC@CPU@@YA_KXZ
	sub	eax, DWORD PTR [esi+16]
	sbb	edx, DWORD PTR [esi+20]
	mov	DWORD PTR [esi], eax
	xor	eax, eax
	mov	DWORD PTR [esi+4], edx
	mov	DWORD PTR [esi+40], eax
	mov	DWORD PTR [esi+44], eax
	mov	DWORD PTR [esi+48], eax
	mov	DWORD PTR [esi+52], eax
$LN129@on_idle:

; 296  : 	if (b_is_Active)							{

	cmp	DWORD PTR [edi+20], 0
	je	SHORT $LN8@on_idle

; 297  : 		if (Begin())				{

	mov	ecx, edi
	call	?Begin@CRenderDevice@@QAEHXZ		; CRenderDevice::Begin
	test	eax, eax
	je	SHORT $LN8@on_idle

; 298  : 
; 299  : 			seqRender.Process						(rp_Render);

	lea	eax, DWORD PTR [edi+648]
	call	?Process@?$CRegistrator@VpureRender@@@@QAEXP6IXPAX@Z@Z ; CRegistrator<pureRender>::Process

; 300  : 			if (psDeviceFlags.test(rsCameraPos) || psDeviceFlags.test(rsStatistic) || Statistic->errors.size())	

	push	262144					; 00040000H
	mov	ecx, OFFSET ?psDeviceFlags@@3U?$_flags@I@@A ; psDeviceFlags
	call	?test@?$_flags@I@@QBEHI@Z		; _flags<unsigned int>::test
	test	eax, eax
	jne	SHORT $LN6@on_idle
	push	32					; 00000020H
	mov	ecx, OFFSET ?psDeviceFlags@@3U?$_flags@I@@A ; psDeviceFlags
	call	?test@?$_flags@I@@QBEHI@Z		; _flags<unsigned int>::test
	test	eax, eax
	jne	SHORT $LN6@on_idle
	mov	eax, DWORD PTR [edi+920]
	mov	edx, DWORD PTR [eax+3504]
	sub	edx, DWORD PTR [eax+3500]
	add	eax, 3500				; 00000dacH
	test	edx, -4					; fffffffcH
	je	SHORT $LN7@on_idle
$LN6@on_idle:

; 301  : 				Statistic->Show						();

	mov	ecx, DWORD PTR [edi+920]
	call	?Show@CStats@@QAEXXZ			; CStats::Show
$LN7@on_idle:

; 302  : 			//	TEST!!!
; 303  : 			//Statistic->RenderTOTAL_Real.End			();
; 304  : 			//	Present goes here
; 305  : 			End										();

	mov	ecx, edi
	call	?End@CRenderDevice@@QAEXXZ		; CRenderDevice::End
$LN8@on_idle:

; 306  : 		}
; 307  : 	}
; 308  : 	Statistic->RenderTOTAL_Real.End			();

	mov	esi, DWORD PTR [edi+920]
	mov	eax, DWORD PTR __imp_?g_bEnableStatGather@@3HA
	add	esi, 1088				; 00000440H
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN143@on_idle
	mov	ecx, esi
	call	DWORD PTR __imp_?GetElapsed_ticks@CTimer@@QBE_KXZ
	add	DWORD PTR [esi+56], eax
	adc	DWORD PTR [esi+60], edx
$LN143@on_idle:

; 309  : 	Statistic->RenderTOTAL_Real.FrameEnd	();

	mov	ecx, DWORD PTR [edi+920]
	add	ecx, 1088				; 00000440H
	call	DWORD PTR __imp_?FrameEnd@CStatTimer@@QAEXXZ

; 310  : 	Statistic->RenderTOTAL.accum	= Statistic->RenderTOTAL_Real.accum;

	mov	eax, DWORD PTR [edi+920]
	mov	ecx, DWORD PTR [eax+1144]
	mov	DWORD PTR [eax+1072], ecx
	mov	edx, DWORD PTR [eax+1148]

; 311  : #endif // #ifndef DEDICATED_SERVER
; 312  : 	// *** Suspend threads
; 313  : 	// Capture startup point
; 314  : 	// Release end point - allow thread to wait for startup point
; 315  : 	mt_csEnter.Enter						();

	mov	ecx, ebp
	mov	DWORD PTR [eax+1076], edx
	call	DWORD PTR __imp_?Enter@xrCriticalSection@@QAEXXZ

; 316  : 	mt_csLeave.Leave						();

	mov	ecx, ebx
	call	DWORD PTR __imp_?Leave@xrCriticalSection@@QAEXXZ

; 317  : 
; 318  : 	// Ensure, that second thread gets chance to execute anyway
; 319  : 	if (dwFrame!=mt_Thread_marker)			{

	mov	eax, DWORD PTR [edi+24]
	mov	ecx, DWORD PTR ?mt_Thread_marker@@3IC	; mt_Thread_marker
	cmp	eax, ecx
	je	SHORT $LN5@on_idle

; 320  : 		for (u32 pit=0; pit<Device.seqParallel.size(); pit++)

	mov	ecx, DWORD PTR ?Device@@3VCRenderDevice@@A+912
	mov	eax, DWORD PTR ?Device@@3VCRenderDevice@@A+908
	mov	edx, ecx
	sub	edx, eax
	xor	esi, esi
	sar	edx, 3
	je	SHORT $LN2@on_idle
$LL4@on_idle:

; 321  : 			Device.seqParallel[pit]			();

	mov	ecx, DWORD PTR [eax+esi*8]
	mov	edx, DWORD PTR [eax+esi*8+4]
	push	ecx
	call	edx
	mov	ecx, DWORD PTR ?Device@@3VCRenderDevice@@A+912
	mov	eax, DWORD PTR ?Device@@3VCRenderDevice@@A+908
	mov	edx, ecx
	sub	edx, eax
	add	esi, 1
	sar	edx, 3
	cmp	esi, edx
	jb	SHORT $LL4@on_idle
$LN2@on_idle:

; 322  : 		Device.seqParallel.clear_not_free	();

	cmp	eax, ecx
	je	SHORT $LN189@on_idle
	mov	DWORD PTR ?Device@@3VCRenderDevice@@A+912, eax
$LN189@on_idle:

; 323  : 		seqFrameMT.Process					(rp_Frame);

	lea	esi, DWORD PTR [edi+876]
	call	?Process@?$CRegistrator@VpureFrame@@@@QAEXP6IXPAX@Z@Z ; CRegistrator<pureFrame>::Process
$LN5@on_idle:

; 324  : 	}
; 325  : 
; 326  : #ifdef DEDICATED_SERVER
; 327  : 	u32 FrameEndTime = TimerGlobal.GetElapsed_ms();
; 328  : 	u32 FrameTime = (FrameEndTime - FrameStartTime);
; 329  : 	/*
; 330  : 	string1024 FPS_str = "";
; 331  : 	string64 tmp;
; 332  : 	xr_strcat(FPS_str, "FPS Real - ");
; 333  : 	if (dwTimeDelta != 0)
; 334  : 		xr_strcat(FPS_str, ltoa(1000/dwTimeDelta, tmp, 10));
; 335  : 	else
; 336  : 		xr_strcat(FPS_str, "~~~");
; 337  : 
; 338  : 	xr_strcat(FPS_str, ", FPS Proj - ");
; 339  : 	if (FrameTime != 0)
; 340  : 		xr_strcat(FPS_str, ltoa(1000/FrameTime, tmp, 10));
; 341  : 	else
; 342  : 		xr_strcat(FPS_str, "~~~");
; 343  : 	
; 344  : */
; 345  : 	u32 DSUpdateDelta = 1000/g_svDedicateServerUpdateReate;
; 346  : 	if (FrameTime < DSUpdateDelta)
; 347  : 	{
; 348  : 		Sleep(DSUpdateDelta - FrameTime);
; 349  : //		Msg("sleep for %d", DSUpdateDelta - FrameTime);
; 350  : //		xr_strcat(FPS_str, ", sleeped for ");
; 351  : //		xr_strcat(FPS_str, ltoa(DSUpdateDelta - FrameTime, tmp, 10));
; 352  : 	}
; 353  : //	Msg(FPS_str);
; 354  : #endif // #ifdef DEDICATED_SERVER
; 355  : 
; 356  : 	if (!b_is_Active)

	cmp	DWORD PTR [edi+20], 0
	jne	$LN1@on_idle

; 358  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 16					; 00000010H

; 357  : 		Sleep		(1);

	mov	DWORD PTR _this$[esp-4], 1
	jmp	DWORD PTR __imp__Sleep@4
?on_idle@CRenderDevice@@QAGXXZ ENDP			; CRenderDevice::on_idle
PUBLIC	?message_loop@CRenderDevice@@AAEXXZ		; CRenderDevice::message_loop
; Function compile flags: /Ogtpy
;	COMDAT ?message_loop@CRenderDevice@@AAEXXZ
_TEXT	SEGMENT
_msg$ = -28						; size = 28
?message_loop@CRenderDevice@@AAEXXZ PROC		; CRenderDevice::message_loop, COMDAT
; _this$ = ecx

; 370  : {

	sub	esp, 28					; 0000001cH
	push	ebx
	push	ebp
	push	esi

; 371  : #ifdef INGAME_EDITOR
; 372  : 	if (editor()) {
; 373  : 		message_loop_editor	();
; 374  : 		return;
; 375  : 	}
; 376  : #endif // #ifdef INGAME_EDITOR
; 377  : 
; 378  : 	MSG						msg;
; 379  :     PeekMessage				(&msg, NULL, 0U, 0U, PM_NOREMOVE );

	mov	esi, DWORD PTR __imp__PeekMessageA@20
	push	edi
	push	0
	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _msg$[esp+60]
	push	eax
	mov	ebp, ecx
	call	esi

; 380  : 	while (msg.message != WM_QUIT) {

	cmp	DWORD PTR _msg$[esp+48], 18		; 00000012H
	je	SHORT $LN2@message_lo
	mov	edi, DWORD PTR __imp__TranslateMessage@4
	mov	ebx, DWORD PTR __imp__DispatchMessageA@4
$LL3@message_lo:

; 381  : 		if (PeekMessage(&msg, NULL, 0U, 0U, PM_REMOVE)) {

	push	1
	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _msg$[esp+60]
	push	ecx
	call	esi
	test	eax, eax
	je	SHORT $LN1@message_lo

; 382  : 			TranslateMessage(&msg);

	lea	edx, DWORD PTR _msg$[esp+44]
	push	edx
	call	edi

; 383  : 			DispatchMessage	(&msg);

	lea	eax, DWORD PTR _msg$[esp+44]
	push	eax
	call	ebx

; 384  : 			continue;

	jmp	SHORT $LN8@message_lo
$LN1@message_lo:

; 385  : 		}
; 386  : 
; 387  : 		on_idle				();

	push	ebp
	call	?on_idle@CRenderDevice@@QAGXXZ		; CRenderDevice::on_idle
$LN8@message_lo:

; 380  : 	while (msg.message != WM_QUIT) {

	cmp	DWORD PTR _msg$[esp+48], 18		; 00000012H
	jne	SHORT $LL3@message_lo
$LN2@message_lo:

; 388  :     }
; 389  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 28					; 0000001cH
	ret	0
?message_loop@CRenderDevice@@AAEXXZ ENDP		; CRenderDevice::message_loop
PUBLIC	?Run@CRenderDevice@@QAEXXZ			; CRenderDevice::Run
; Function compile flags: /Ogtpy
;	COMDAT ?Run@CRenderDevice@@QAEXXZ
_TEXT	SEGMENT
?Run@CRenderDevice@@QAEXXZ PROC				; CRenderDevice::Run, COMDAT
; _this$ = ecx

; 392  : {

	push	ecx
	push	ebx
	push	ebp
	push	esi
	push	edi

; 393  : //	DUMP_PHASE;
; 394  : 	g_bLoaded		= FALSE;

	xor	ebp, ebp

; 395  : 	Log				("Starting engine...");

	push	OFFSET ??_C@_0BD@ELDMCEDA@Starting?5engine?4?4?4?$AA@
	mov	esi, ecx
	mov	DWORD PTR ?g_bLoaded@@3HA, ebp		; g_bLoaded
	call	DWORD PTR __imp_?Log@@YAXPBD@Z
	add	esp, 4

; 396  : 	thread_name		("X-RAY Primary thread");

	push	OFFSET ??_C@_0BF@IMGDMJOI@X?9RAY?5Primary?5thread?$AA@
	call	DWORD PTR __imp_?thread_name@@YAXPBD@Z

; 397  : 
; 398  : 	// Startup timers and calculate timer delta
; 399  : 	dwTimeGlobal				= 0;
; 400  : 	Timer_MM_Delta				= 0;
; 401  : 	{
; 402  : 		u32 time_mm			= timeGetTime	();

	mov	edi, DWORD PTR __imp__timeGetTime@0
	add	esp, 4
	mov	DWORD PTR [esi+40], ebp
	mov	DWORD PTR [esi+500], ebp
	call	edi
	mov	ebx, eax
	npad	2
$LL4@Run:

; 403  : 		while (timeGetTime()==time_mm);			// wait for next tick

	call	edi
	cmp	eax, ebx
	je	SHORT $LL4@Run

; 404  : 		u32 time_system		= timeGetTime	();

	call	edi

; 405  : 		u32 time_local		= TimerAsync	();

	lea	ecx, DWORD PTR [esi+584]
	mov	edi, eax
	call	DWORD PTR __imp_?GetElapsed_ms@CTimer@@QBEIXZ

; 406  : 		Timer_MM_Delta		= time_system-time_local;

	sub	edi, eax
	mov	DWORD PTR [esi+500], edi

; 407  : 	}
; 408  : 
; 409  : 	// Start all threads
; 410  : //	InitializeCriticalSection	(&mt_csEnter);
; 411  : //	InitializeCriticalSection	(&mt_csLeave);
; 412  : 	mt_csEnter.Enter			();

	lea	edi, DWORD PTR [esi+988]
	mov	ecx, edi
	call	DWORD PTR __imp_?Enter@xrCriticalSection@@QAEXXZ

; 413  : 	mt_bMustExit				= FALSE;
; 414  : 	thread_spawn				(mt_Thread,"X-RAY Secondary thread",0,0);

	push	ebp
	push	ebp
	push	OFFSET ??_C@_0BH@NELKNIPN@X?9RAY?5Secondary?5thread?$AA@
	mov	DWORD PTR [esi+996], ebp
	push	OFFSET ?mt_Thread@@YAXPAX@Z		; mt_Thread
	call	DWORD PTR __imp_?thread_spawn@@YAXP6AXPAX@ZPBDI0@Z
	add	esp, 16					; 00000010H

; 415  : 
; 416  : 	// Message cycle
; 417  : 	seqAppStart.Process			(rp_AppStart);

	lea	eax, DWORD PTR [esi+696]
	call	?Process@?$CRegistrator@VpureAppStart@@@@QAEXP6IXPAX@Z@Z ; CRegistrator<pureAppStart>::Process

; 418  : 
; 419  : 	//CHK_DX(HW.pDevice->Clear(0,0,D3DCLEAR_TARGET,D3DCOLOR_XRGB(0,0,0),1,0));
; 420  : 	m_pRender->ClearTarget		();

	mov	ecx, DWORD PTR [esi+868]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+116]
	call	edx

; 421  : 
; 422  : 	message_loop				();

	mov	ecx, esi
	call	?message_loop@CRenderDevice@@AAEXXZ	; CRenderDevice::message_loop

; 423  : 
; 424  : 	seqAppEnd.Process		(rp_AppEnd);

	lea	eax, DWORD PTR [esi+712]
	call	?Process@?$CRegistrator@VpureAppEnd@@@@QAEXP6IXPAX@Z@Z ; CRegistrator<pureAppEnd>::Process

; 425  : 
; 426  : 	// Stop Balance-Thread
; 427  : 	mt_bMustExit			= TRUE;

	mov	DWORD PTR [esi+996], 1

; 428  : 	mt_csEnter.Leave		();

	mov	ecx, edi
	call	DWORD PTR __imp_?Leave@xrCriticalSection@@QAEXXZ

; 429  : 	while (mt_bMustExit)	Sleep(0);

	mov	eax, DWORD PTR [esi+996]
	test	eax, eax
	je	SHORT $LN1@Run
	mov	edi, DWORD PTR __imp__Sleep@4
$LL2@Run:
	push	ebp
	call	edi
	mov	ecx, DWORD PTR [esi+996]
	test	ecx, ecx
	jne	SHORT $LL2@Run
$LN1@Run:

; 430  : //	DeleteCriticalSection	(&mt_csEnter);
; 431  : //	DeleteCriticalSection	(&mt_csLeave);
; 432  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	pop	ecx
	ret	0
?Run@CRenderDevice@@QAEXXZ ENDP				; CRenderDevice::Run
; Function compile flags: /Ogtpy
;	COMDAT ??__EDevice@@YAXXZ
text$yc	SEGMENT
??__EDevice@@YAXXZ PROC					; `dynamic initializer for 'Device'', COMDAT

; 33   : ENGINE_API CRenderDevice Device;

	mov	ecx, OFFSET ?Device@@3VCRenderDevice@@A	; Device
	call	??0CRenderDevice@@QAE@XZ		; CRenderDevice::CRenderDevice
	push	OFFSET ??__FDevice@@YAXXZ		; `dynamic atexit destructor for 'Device''
	call	_atexit
	pop	ecx
	ret	0
??__EDevice@@YAXXZ ENDP					; `dynamic initializer for 'Device''
text$yc	ENDS
PUBLIC	?load_screen_renderer@@3VCLoadScreenRenderer@@A	; load_screen_renderer
?load_screen_renderer@@3VCLoadScreenRenderer@@A DD FLAT:??_7CLoadScreenRenderer@@6B@ ; load_screen_renderer
	DB	00H
; Function compile flags: /Ogtpy
;	COMDAT ??__Eprecache_light@@YAXXZ
text$yc	SEGMENT
??__Eprecache_light@@YAXXZ PROC				; `dynamic initializer for 'precache_light'', COMDAT

; 40   : ref_light	precache_light = 0;

	push	OFFSET ??__Fprecache_light@@YAXXZ	; `dynamic atexit destructor for 'precache_light''
	call	_atexit
	pop	ecx
	ret	0
??__Eprecache_light@@YAXXZ ENDP				; `dynamic initializer for 'precache_light''
; Function compile flags: /Ogtpy
text$yc	ENDS
;	COMDAT ??__Eg_loading_events@@YAXXZ
text$yc	SEGMENT
??__Eg_loading_events@@YAXXZ PROC			; `dynamic initializer for 'g_loading_events'', COMDAT

; 233  : ENGINE_API xr_list<LOADING_EVENT>			g_loading_events;

	xor	eax, eax
	mov	DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A, eax
	mov	DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A+4, eax
	mov	eax, OFFSET ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A ; g_loading_events
	push	OFFSET ??__Fg_loading_events@@YAXXZ	; `dynamic atexit destructor for 'g_loading_events''
	mov	DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A, eax
	mov	DWORD PTR ?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A+4, eax
	call	_atexit
	pop	ecx
	ret	0
??__Eg_loading_events@@YAXXZ ENDP			; `dynamic initializer for 'g_loading_events''
; Function compile flags: /Ogtpy
;	COMDAT ??__Fg_loading_events@@YAXXZ
text$yd	SEGMENT
??__Fg_loading_events@@YAXXZ PROC			; `dynamic atexit destructor for 'g_loading_events'', COMDAT
	jmp	?clear@?$_List_base@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@priv@stlp_std@@QAEXXZ ; stlp_std::priv::_List_base<fastdelegate::FastDelegate0<bool>,xalloc<fastdelegate::FastDelegate0<bool> > >::clear
??__Fg_loading_events@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_loading_events''
; Function compile flags: /Ogtpy
text$yd	ENDS
;	COMDAT ??__Fprecache_light@@YAXXZ
text$yd	SEGMENT
??__Fprecache_light@@YAXXZ PROC				; `dynamic atexit destructor for 'precache_light'', COMDAT
	mov	eax, DWORD PTR ?precache_light@@3V?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@A ; precache_light
	test	eax, eax
	je	SHORT $LN9@dynamic
	add	DWORD PTR [eax+4], -1
	mov	eax, DWORD PTR ?precache_light@@3V?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@A ; precache_light
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN9@dynamic
	push	esi
	push	eax
	call	___RTCastToVoid
	mov	ecx, DWORD PTR ?precache_light@@3V?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@A ; precache_light
	mov	esi, eax
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+76]
	add	esp, 4
	push	0
	call	edx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR ?precache_light@@3V?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@A, 0 ; precache_light
	pop	esi
$LN9@dynamic:
	ret	0
??__Fprecache_light@@YAXXZ ENDP				; `dynamic atexit destructor for 'precache_light''
; Function compile flags: /Ogtpy
;	COMDAT ??__FDevice@@YAXXZ
text$yd	SEGMENT
??__FDevice@@YAXXZ PROC					; `dynamic atexit destructor for 'Device'', COMDAT
	mov	ecx, OFFSET ?Device@@3VCRenderDevice@@A	; Device
	jmp	??1CRenderDevice@@QAE@XZ
??__FDevice@@YAXXZ ENDP					; `dynamic atexit destructor for 'Device''
PUBLIC	?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A ; g_loading_events
PUBLIC	?precache_light@@3V?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@A ; precache_light
PUBLIC	?Device@@3VCRenderDevice@@A			; Device
	ALIGN	8

?g_loading_events@@3V?$xr_list@V?$FastDelegate0@_N@fastdelegate@@V?$xalloc@V?$FastDelegate0@_N@fastdelegate@@@@@@A DQ 01H DUP (?) ; g_loading_events
?precache_light@@3V?$resptr_core@VIRender_Light@@Uresptrcode_light@@@@A DD 01H DUP (?) ; precache_light
?Device@@3VCRenderDevice@@A DB 03e8H DUP (?)		; Device
_Device$initializer$ DD FLAT:??__EDevice@@YAXXZ
_precache_light$initializer$ DD FLAT:??__Eprecache_light@@YAXXZ
_g_loading_events$initializer$ DD FLAT:??__Eg_loading_events@@YAXXZ
END
