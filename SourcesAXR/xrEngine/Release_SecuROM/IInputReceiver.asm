; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	D:\CLEARSKY\sources\engine\xrEngine\IInputReceiver.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?IR_OnActivate@IInputReceiver@@UAEXXZ		; IInputReceiver::IR_OnActivate
PUBLIC	?IR_OnDeactivate@IInputReceiver@@UAEXXZ		; IInputReceiver::IR_OnDeactivate
EXTRN	__imp__GetCursorPos@4:PROC
EXTRN	__imp__ScreenToClient@8:PROC
PUBLIC	?IR_GetMousePosScreen@IInputReceiver@@QAEXAAU?$_vector2@H@@@Z ; IInputReceiver::IR_GetMousePosScreen
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\iinputreceiver.cpp
;	COMDAT ?IR_GetMousePosScreen@IInputReceiver@@QAEXAAU?$_vector2@H@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?IR_GetMousePosScreen@IInputReceiver@@QAEXAAU?$_vector2@H@@@Z PROC ; IInputReceiver::IR_GetMousePosScreen, COMDAT
; _this$ = ecx

; 57   : 	GetCursorPos((LPPOINT)&p);

	jmp	DWORD PTR __imp__GetCursorPos@4
?IR_GetMousePosScreen@IInputReceiver@@QAEXAAU?$_vector2@H@@@Z ENDP ; IInputReceiver::IR_GetMousePosScreen
_TEXT	ENDS
PUBLIC	?IR_GetBtnState@IInputReceiver@@QAEHH@Z		; IInputReceiver::IR_GetBtnState
; Function compile flags: /Ogtpy
;	COMDAT ?IR_GetBtnState@IInputReceiver@@QAEHH@Z
_TEXT	SEGMENT
_btn$ = 8						; size = 4
?IR_GetBtnState@IInputReceiver@@QAEHH@Z PROC		; IInputReceiver::IR_GetBtnState, COMDAT
; _this$ = ecx

; 51   : 	VERIFY(pInput);
; 52   : 	return pInput->iGetAsyncBtnState(btn);

	mov	ecx, DWORD PTR _btn$[esp-4]
	mov	edx, DWORD PTR ?pInput@@3PAVCInput@@A	; pInput
	xor	eax, eax
	cmp	DWORD PTR [edx+ecx*4+60], eax
	setne	al

; 53   : }

	ret	4
?IR_GetBtnState@IInputReceiver@@QAEHH@Z ENDP		; IInputReceiver::IR_GetBtnState
_TEXT	ENDS
PUBLIC	?IR_GetKeyState@IInputReceiver@@QAEHH@Z		; IInputReceiver::IR_GetKeyState
; Function compile flags: /Ogtpy
;	COMDAT ?IR_GetKeyState@IInputReceiver@@QAEHH@Z
_TEXT	SEGMENT
_dik$ = 8						; size = 4
?IR_GetKeyState@IInputReceiver@@QAEHH@Z PROC		; IInputReceiver::IR_GetKeyState, COMDAT
; _this$ = ecx

; 45   : 	VERIFY(pInput);
; 46   : 	return pInput->iGetAsyncKeyState(dik);

	mov	ecx, DWORD PTR _dik$[esp-4]
	mov	edx, DWORD PTR ?pInput@@3PAVCInput@@A	; pInput
	xor	eax, eax
	cmp	DWORD PTR [edx+ecx*4+72], eax
	setne	al

; 47   : }

	ret	4
?IR_GetKeyState@IInputReceiver@@QAEHH@Z ENDP		; IInputReceiver::IR_GetKeyState
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?IR_OnActivate@IInputReceiver@@UAEXXZ
_TEXT	SEGMENT
?IR_OnActivate@IInputReceiver@@UAEXXZ PROC		; IInputReceiver::IR_OnActivate, COMDAT
; _this$ = ecx

; 41   : }

	ret	0
?IR_OnActivate@IInputReceiver@@UAEXXZ ENDP		; IInputReceiver::IR_OnActivate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?IR_OnDeactivate@IInputReceiver@@UAEXXZ
_TEXT	SEGMENT
?IR_OnDeactivate@IInputReceiver@@UAEXXZ PROC		; IInputReceiver::IR_OnDeactivate, COMDAT
; _this$ = ecx

; 26   : {

	push	ebx
	push	esi
	push	edi
	mov	edi, ecx

; 27   : 	int i;
; 28   : 	for (i = 0; i < CInput::COUNT_KB_BUTTONS; i++ )

	xor	ebx, ebx
	mov	esi, 72					; 00000048H
	npad	4
$LL8@IR_OnDeact:

; 29   : 		if (IR_GetKeyState(i))	

	mov	eax, DWORD PTR ?pInput@@3PAVCInput@@A	; pInput
	cmp	DWORD PTR [esi+eax], 0
	je	SHORT $LN7@IR_OnDeact

; 30   : 			IR_OnKeyboardRelease	(i);

	mov	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx+36]
	push	ebx
	mov	ecx, edi
	call	eax
$LN7@IR_OnDeact:
	add	esi, 4
	add	ebx, 1
	cmp	esi, 1096				; 00000448H
	jl	SHORT $LL8@IR_OnDeact

; 31   : 
; 32   : 	for (i = 0; i < CInput::COUNT_MOUSE_BUTTONS; i++ )

	xor	ebx, ebx
	mov	esi, 60					; 0000003cH
	npad	6
$LL4@IR_OnDeact:

; 33   : 		if(IR_GetBtnState(i))   

	mov	ecx, DWORD PTR ?pInput@@3PAVCInput@@A	; pInput
	cmp	DWORD PTR [esi+ecx], 0
	je	SHORT $LN3@IR_OnDeact

; 34   : 			IR_OnMouseRelease( i );

	mov	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx+12]
	push	ebx
	mov	ecx, edi
	call	eax
$LN3@IR_OnDeact:
	add	esi, 4
	add	ebx, 1
	cmp	esi, 72					; 00000048H
	jl	SHORT $LL4@IR_OnDeact

; 35   : 	IR_OnMouseStop	( DIMOFS_X, 0 );

	mov	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx+28]
	push	0
	push	0
	mov	ecx, edi
	call	eax

; 36   : 	IR_OnMouseStop	( DIMOFS_Y, 0 );

	mov	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx+28]
	push	0
	push	4
	mov	ecx, edi
	call	eax
	pop	edi
	pop	esi
	pop	ebx

; 37   : }

	ret	0
?IR_OnDeactivate@IInputReceiver@@UAEXXZ ENDP		; IInputReceiver::IR_OnDeactivate
PUBLIC	?IR_GetMousePosReal@IInputReceiver@@QAEXPAUHWND__@@AAU?$_vector2@H@@@Z ; IInputReceiver::IR_GetMousePosReal
; Function compile flags: /Ogtpy
;	COMDAT ?IR_GetMousePosReal@IInputReceiver@@QAEXPAUHWND__@@AAU?$_vector2@H@@@Z
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
_p$ = 12						; size = 4
?IR_GetMousePosReal@IInputReceiver@@QAEXPAUHWND__@@AAU?$_vector2@H@@@Z PROC ; IInputReceiver::IR_GetMousePosReal, COMDAT
; _this$ = ecx

; 60   : {

	push	esi

; 61   : 	IR_GetMousePosScreen(p);

	mov	esi, DWORD PTR _p$[esp]
	push	esi
	call	DWORD PTR __imp__GetCursorPos@4

; 62   : 	if (hwnd) ScreenToClient(hwnd,(LPPOINT)&p);

	mov	eax, DWORD PTR _hwnd$[esp]
	test	eax, eax
	je	SHORT $LN1@IR_GetMous
	push	esi
	push	eax
	call	DWORD PTR __imp__ScreenToClient@8
$LN1@IR_GetMous:
	pop	esi

; 63   : }

	ret	8
?IR_GetMousePosReal@IInputReceiver@@QAEXPAUHWND__@@AAU?$_vector2@H@@@Z ENDP ; IInputReceiver::IR_GetMousePosReal
_TEXT	ENDS
PUBLIC	?IR_GetLastMouseDelta@IInputReceiver@@QAEXAAU?$_vector2@H@@@Z ; IInputReceiver::IR_GetLastMouseDelta
; Function compile flags: /Ogtpy
;	COMDAT ?IR_GetLastMouseDelta@IInputReceiver@@QAEXAAU?$_vector2@H@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?IR_GetLastMouseDelta@IInputReceiver@@QAEXAAU?$_vector2@H@@@Z PROC ; IInputReceiver::IR_GetLastMouseDelta, COMDAT
; _this$ = ecx

; 21   : 	VERIFY(pInput);
; 22   : 	pInput->iGetLastMouseDelta( p );

	mov	eax, DWORD PTR ?pInput@@3PAVCInput@@A	; pInput
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR [eax+48]
	push	ecx
	mov	ecx, DWORD PTR _p$[esp]
	push	edx
	call	?set@?$_vector2@H@@QAEAAU1@HH@Z		; _vector2<int>::set

; 23   : }

	ret	4
?IR_GetLastMouseDelta@IInputReceiver@@QAEXAAU?$_vector2@H@@@Z ENDP ; IInputReceiver::IR_GetLastMouseDelta
_TEXT	ENDS
PUBLIC	?IR_Release@IInputReceiver@@QAEXXZ		; IInputReceiver::IR_Release
; Function compile flags: /Ogtpy
;	COMDAT ?IR_Release@IInputReceiver@@QAEXXZ
_TEXT	SEGMENT
?IR_Release@IInputReceiver@@QAEXXZ PROC			; IInputReceiver::IR_Release, COMDAT
; _this$ = ecx

; 15   : 	VERIFY(pInput);
; 16   : 	pInput->iRelease(this);

	push	ecx
	mov	ecx, DWORD PTR ?pInput@@3PAVCInput@@A	; pInput
	call	?iRelease@CInput@@QAEXPAVIInputReceiver@@@Z ; CInput::iRelease

; 17   : }

	ret	0
?IR_Release@IInputReceiver@@QAEXXZ ENDP			; IInputReceiver::IR_Release
PUBLIC	?IR_GetMousePosReal@IInputReceiver@@QAEXAAU?$_vector2@H@@@Z ; IInputReceiver::IR_GetMousePosReal
; Function compile flags: /Ogtpy
;	COMDAT ?IR_GetMousePosReal@IInputReceiver@@QAEXAAU?$_vector2@H@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?IR_GetMousePosReal@IInputReceiver@@QAEXAAU?$_vector2@H@@@Z PROC ; IInputReceiver::IR_GetMousePosReal, COMDAT
; _this$ = ecx

; 65   : {

	push	esi

; 66   : 	IR_GetMousePosReal(RDEVICE.m_hWnd,p);

	mov	esi, DWORD PTR ?Device@@3VCRenderDevice@@A+760
	push	edi
	mov	edi, DWORD PTR _p$[esp+4]
	push	edi
	call	DWORD PTR __imp__GetCursorPos@4
	test	esi, esi
	je	SHORT $LN3@IR_GetMous@2
	push	edi
	push	esi
	call	DWORD PTR __imp__ScreenToClient@8
$LN3@IR_GetMous@2:
	pop	edi
	pop	esi

; 67   : }

	ret	4
?IR_GetMousePosReal@IInputReceiver@@QAEXAAU?$_vector2@H@@@Z ENDP ; IInputReceiver::IR_GetMousePosReal
PUBLIC	?IR_GetMousePosIndependent@IInputReceiver@@QAEXAAU?$_vector2@M@@@Z ; IInputReceiver::IR_GetMousePosIndependent
; Function compile flags: /Ogtpy
;	COMDAT ?IR_GetMousePosIndependent@IInputReceiver@@QAEXAAU?$_vector2@M@@@Z
_TEXT	SEGMENT
tv133 = -12						; size = 4
tv131 = -12						; size = 4
_p$ = -8						; size = 8
_f$ = 8							; size = 4
?IR_GetMousePosIndependent@IInputReceiver@@QAEXAAU?$_vector2@M@@@Z PROC ; IInputReceiver::IR_GetMousePosIndependent, COMDAT
; _this$ = ecx

; 69   : {

	sub	esp, 12					; 0000000cH
	push	esi

; 70   : 	Ivector2 p;
; 71   : 	IR_GetMousePosReal(p);

	mov	esi, DWORD PTR ?Device@@3VCRenderDevice@@A+760
	lea	eax, DWORD PTR _p$[esp+16]
	push	eax
	call	DWORD PTR __imp__GetCursorPos@4
	test	esi, esi
	je	SHORT $LN5@IR_GetMous@3
	lea	ecx, DWORD PTR _p$[esp+16]
	push	ecx
	push	esi
	call	DWORD PTR __imp__ScreenToClient@8
$LN5@IR_GetMous@3:

; 72   : 	f.set(
; 73   : 		2.f*float(p.x)/float(RDEVICE.dwWidth)-1.f,
; 74   : 		2.f*float(p.y)/float(RDEVICE.dwHeight)-1.f
; 75   : 		);

	fild	DWORD PTR _p$[esp+20]
	mov	edx, DWORD PTR ?Device@@3VCRenderDevice@@A+8
	test	edx, edx
	fld	DWORD PTR __real@40000000
	fmul	ST(1), ST(0)
	fild	DWORD PTR ?Device@@3VCRenderDevice@@A+8
	jge	SHORT $LN12@IR_GetMous@3
	fadd	DWORD PTR __real@4f800000
$LN12@IR_GetMous@3:
	fdivp	ST(2), ST(0)
	mov	eax, DWORD PTR ?Device@@3VCRenderDevice@@A+4
	sub	esp, 8
	test	eax, eax
	fld1
	fsub	ST(2), ST(0)
	fxch	ST(2)
	fstp	DWORD PTR [esp+4]
	fimul	DWORD PTR _p$[esp+24]
	fild	DWORD PTR ?Device@@3VCRenderDevice@@A+4
	jge	SHORT $LN13@IR_GetMous@3
	fadd	DWORD PTR __real@4f800000
$LN13@IR_GetMous@3:
	fdivp	ST(1), ST(0)
	mov	ecx, DWORD PTR _f$[esp+20]
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR [esp]
	call	?set@?$_vector2@M@@QAEAAU1@MM@Z		; _vector2<float>::set
	pop	esi

; 76   : }

	add	esp, 12					; 0000000cH
	ret	4
?IR_GetMousePosIndependent@IInputReceiver@@QAEXAAU?$_vector2@M@@@Z ENDP ; IInputReceiver::IR_GetMousePosIndependent
PUBLIC	?IR_GetMousePosIndependentCrop@IInputReceiver@@QAEXAAU?$_vector2@M@@@Z ; IInputReceiver::IR_GetMousePosIndependentCrop
; Function compile flags: /Ogtpy
;	COMDAT ?IR_GetMousePosIndependentCrop@IInputReceiver@@QAEXAAU?$_vector2@M@@@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
?IR_GetMousePosIndependentCrop@IInputReceiver@@QAEXAAU?$_vector2@M@@@Z PROC ; IInputReceiver::IR_GetMousePosIndependentCrop, COMDAT
; _this$ = ecx

; 78   : {

	push	esi

; 79   : 	IR_GetMousePosIndependent(f);

	mov	esi, DWORD PTR _f$[esp]
	push	esi
	call	?IR_GetMousePosIndependent@IInputReceiver@@QAEXAAU?$_vector2@M@@@Z ; IInputReceiver::IR_GetMousePosIndependent

; 80   : 	if (f.x<-1.f) f.x=-1.f;

	movss	xmm0, DWORD PTR [esi]
	movss	xmm1, DWORD PTR __real@bf800000
	comiss	xmm1, xmm0
	movss	xmm2, DWORD PTR __real@3f800000
	jbe	SHORT $LN4@IR_GetMous@4
	movss	DWORD PTR [esi], xmm1

; 81   : 	if (f.x> 1.f) f.x= 1.f;

	jmp	SHORT $LN3@IR_GetMous@4
$LN4@IR_GetMous@4:
	comiss	xmm0, xmm2
	jbe	SHORT $LN3@IR_GetMous@4
	movss	DWORD PTR [esi], xmm2
$LN3@IR_GetMous@4:

; 82   : 	if (f.y<-1.f) f.y=-1.f;

	comiss	xmm1, DWORD PTR [esi+4]
	jbe	SHORT $LN2@IR_GetMous@4
	movss	DWORD PTR [esi+4], xmm1
$LN2@IR_GetMous@4:

; 83   : 	if (f.y> 1.f) f.y= 1.f;

	movss	xmm0, DWORD PTR [esi+4]
	comiss	xmm0, xmm2
	jbe	SHORT $LN1@IR_GetMous@4
	movss	DWORD PTR [esi+4], xmm2
$LN1@IR_GetMous@4:
	pop	esi

; 84   : }

	ret	4
?IR_GetMousePosIndependentCrop@IInputReceiver@@QAEXAAU?$_vector2@M@@@Z ENDP ; IInputReceiver::IR_GetMousePosIndependentCrop
PUBLIC	?IR_Capture@IInputReceiver@@QAEXXZ		; IInputReceiver::IR_Capture
; Function compile flags: /Ogtpy
;	COMDAT ?IR_Capture@IInputReceiver@@QAEXXZ
_TEXT	SEGMENT
?IR_Capture@IInputReceiver@@QAEXXZ PROC			; IInputReceiver::IR_Capture, COMDAT
; _this$ = ecx

; 8    : {

	push	ecx

; 9    : 	VERIFY(pInput);
; 10   : 	pInput->iCapture(this);

	push	ecx
	mov	ecx, DWORD PTR ?pInput@@3PAVCInput@@A	; pInput
	call	?iCapture@CInput@@QAEXPAVIInputReceiver@@@Z ; CInput::iCapture
	pop	ecx

; 11   : }

	ret	0
?IR_Capture@IInputReceiver@@QAEXXZ ENDP			; IInputReceiver::IR_Capture
END
