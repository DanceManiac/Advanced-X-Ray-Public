; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	D:\CLEARSKY\sources\engine\xrEngine\Feel_Touch.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?feel_touch_delete@Touch@Feel@@UAEXPAVCObject@@@Z ; Feel::Touch::feel_touch_delete
PUBLIC	?feel_touch_new@Touch@Feel@@UAEXPAVCObject@@@Z	; Feel::Touch::feel_touch_new
PUBLIC	?feel_touch_deny@Touch@Feel@@UAEXPAVCObject@@K@Z ; Feel::Touch::feel_touch_deny
PUBLIC	?feel_touch_update@Touch@Feel@@UAEXAAU?$_vector3@M@@M@Z ; Feel::Touch::feel_touch_update
PUBLIC	?feel_touch_contact@Touch@Feel@@UAEHPAVCObject@@@Z ; Feel::Touch::feel_touch_contact
PUBLIC	??_ETouch@Feel@@UAEPAXI@Z			; Feel::Touch::`vector deleting destructor'
PUBLIC	??_R4Touch@Feel@@6B@				; Feel::Touch::`RTTI Complete Object Locator'
PUBLIC	??_R3Touch@Feel@@8				; Feel::Touch::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Touch@Feel@@8				; Feel::Touch::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EN@pure_relcase@@8			; pure_relcase::`RTTI Base Class Descriptor at (0,-1,0,77)'
PUBLIC	??_R1A@?0A@EA@Touch@Feel@@8			; Feel::Touch::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVTouch@Feel@@@8				; Feel::Touch `RTTI Type Descriptor'
PUBLIC	??0?$_Vector_base@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@IABV?$xalloc@UDenyTouch@Touch@Feel@@@@@Z ; stlp_std::priv::_Vector_base<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_Vector_base<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >
PUBLIC	?get_allocator@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QBE?AV?$xalloc@UDenyTouch@Touch@Feel@@@@XZ ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::get_allocator
PUBLIC	?begin@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QBEPBUDenyTouch@Touch@Feel@@XZ ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::begin
PUBLIC	?end@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QBEPBUDenyTouch@Touch@Feel@@XZ ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::end
PUBLIC	??0?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >
PUBLIC	??0?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >
PUBLIC	??0?$xr_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@@QAE@ABV0@@Z ; xr_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::xr_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >
PUBLIC	?capacity@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::capacity
PUBLIC	?_Answer@?$_BothPtrType@PBUDenyTouch@Touch@Feel@@PAU123@@stlp_std@@SA?AU__true_type@2@XZ ; stlp_std::_BothPtrType<Feel::Touch::DenyTouch const *,Feel::Touch::DenyTouch *>::_Answer
PUBLIC	??$__ucopy_ptrs@PBUDenyTouch@Touch@Feel@@PAU123@@priv@stlp_std@@YAPAUDenyTouch@Touch@Feel@@PBU234@0PAU234@ABU__true_type@1@@Z ; stlp_std::priv::__ucopy_ptrs<Feel::Touch::DenyTouch const *,Feel::Touch::DenyTouch *>
PUBLIC	??$_UseTrivialUCopy@UDenyTouch@Touch@Feel@@U123@@stlp_std@@YA?AU?$_TrivialUCopy@UDenyTouch@Touch@Feel@@U123@@0@PAUDenyTouch@Touch@Feel@@0@Z ; stlp_std::_UseTrivialUCopy<Feel::Touch::DenyTouch,Feel::Touch::DenyTouch>
PUBLIC	?_Answer@?$_TrivialUCopy@UDenyTouch@Touch@Feel@@U123@@stlp_std@@SA?AU__true_type@2@XZ ; stlp_std::_TrivialUCopy<Feel::Touch::DenyTouch,Feel::Touch::DenyTouch>::_Answer
PUBLIC	??$__ucopy_aux@PBUDenyTouch@Touch@Feel@@PAU123@@priv@stlp_std@@YAPAUDenyTouch@Touch@Feel@@PBU234@0PAU234@ABU__true_type@1@@Z ; stlp_std::priv::__ucopy_aux<Feel::Touch::DenyTouch const *,Feel::Touch::DenyTouch *>
PUBLIC	??$uninitialized_copy@PBUDenyTouch@Touch@Feel@@PAU123@@stlp_std@@YAPAUDenyTouch@Touch@Feel@@PBU123@0PAU123@@Z ; stlp_std::uninitialized_copy<Feel::Touch::DenyTouch const *,Feel::Touch::DenyTouch *>
PUBLIC	??$_M_allocate_and_copy@PBUDenyTouch@Touch@Feel@@@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@AAEPAUDenyTouch@Touch@Feel@@AAIPBU345@1@Z ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_M_allocate_and_copy<Feel::Touch::DenyTouch const *>
PUBLIC	??$__copy_ptrs@PBUDenyTouch@Touch@Feel@@PAU123@@priv@stlp_std@@YAPAUDenyTouch@Touch@Feel@@PBU234@0PAU234@ABU__true_type@1@@Z ; stlp_std::priv::__copy_ptrs<Feel::Touch::DenyTouch const *,Feel::Touch::DenyTouch *>
PUBLIC	??$__destroy_range_aux@PAUDenyTouch@Touch@Feel@@U123@@stlp_std@@YAXPAUDenyTouch@Touch@Feel@@00ABU__true_type@0@@Z ; stlp_std::__destroy_range_aux<Feel::Touch::DenyTouch *,Feel::Touch::DenyTouch>
PUBLIC	??$__destroy_range@PAUDenyTouch@Touch@Feel@@U123@@stlp_std@@YAXPAUDenyTouch@Touch@Feel@@00@Z ; stlp_std::__destroy_range<Feel::Touch::DenyTouch *,Feel::Touch::DenyTouch>
PUBLIC	??$_Destroy_Range@PAUDenyTouch@Touch@Feel@@@stlp_std@@YAXPAUDenyTouch@Touch@Feel@@0@Z ; stlp_std::_Destroy_Range<Feel::Touch::DenyTouch *>
PUBLIC	??4?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::operator=
PUBLIC	??4?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAEAAV01@ABV01@@Z ; stlp_std::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::operator=
PUBLIC	??4?$xr_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@@QAEAAV0@ABV0@@Z ; xr_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::operator=
PUBLIC	??0?$xalloc@UDenyTouch@Touch@Feel@@@@QAE@XZ	; xalloc<Feel::Touch::DenyTouch>::xalloc<Feel::Touch::DenyTouch>
PUBLIC	??0?$xalloc@UDenyTouch@Touch@Feel@@@@QAE@ABV0@@Z ; xalloc<Feel::Touch::DenyTouch>::xalloc<Feel::Touch::DenyTouch>
PUBLIC	??0?$_STLP_alloc_proxy@PAUDenyTouch@Touch@Feel@@U123@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@ABV?$xalloc@UDenyTouch@Touch@Feel@@@@PAUDenyTouch@Touch@Feel@@@Z ; stlp_std::priv::_STLP_alloc_proxy<Feel::Touch::DenyTouch *,Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_STLP_alloc_proxy<Feel::Touch::DenyTouch *,Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >
PUBLIC	??0?$_Vector_base@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@ABV?$xalloc@UDenyTouch@Touch@Feel@@@@@Z ; stlp_std::priv::_Vector_base<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_Vector_base<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >
PUBLIC	??0?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@ABV?$xalloc@UDenyTouch@Touch@Feel@@@@@Z ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >
PUBLIC	??0?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAE@ABV?$xalloc@UDenyTouch@Touch@Feel@@@@@Z ; stlp_std::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >
PUBLIC	??0?$xr_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@@QAE@XZ ; xr_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::xr_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >
PUBLIC	??$implicit_cast@PAVTouch@Feel@@PAV12@@detail@fastdelegate@@YAPAVTouch@Feel@@PAV23@@Z ; fastdelegate::detail::implicit_cast<Feel::Touch *,Feel::Touch *>
PUBLIC	??$Convert@VTouch@Feel@@P812@AGXPAVCObject@@@ZP8GenericClass@detail@fastdelegate@@AEXXZ@?$SimplifyMemFunc@$03@detail@fastdelegate@@SGPAVGenericClass@12@PAVTouch@Feel@@P845@AGXPAVCObject@@@ZAAP8312@AEXXZ@Z ; fastdelegate::detail::SimplifyMemFunc<4>::Convert<Feel::Touch,void (__stdcall Feel::Touch::*)(CObject *),void (__thiscall fastdelegate::detail::GenericClass::*)(void)>
PUBLIC	??$bindmemfunc@VTouch@Feel@@P812@AGXPAVCObject@@@Z@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AGXPAVCObject@@@ZP6GX0@ZP6GX0@Z@detail@fastdelegate@@QAEXPAVTouch@Feel@@P834@AGXPAVCObject@@@Z@Z ; fastdelegate::detail::ClosurePtr<void (__stdcall fastdelegate::detail::GenericClass::*)(CObject *),void (__stdcall*)(CObject *),void (__stdcall*)(CObject *)>::bindmemfunc<Feel::Touch,void (__stdcall Feel::Touch::*)(CObject *)>
PUBLIC	??$?0VTouch@Feel@@V01@@?$FastDelegate1@PAVCObject@@X@fastdelegate@@QAE@PAVTouch@Feel@@P823@AGXPAVCObject@@@Z@Z ; fastdelegate::FastDelegate1<CObject *,void>::FastDelegate1<CObject *,void><Feel::Touch,Feel::Touch>
PUBLIC	??$?0VTouch@Feel@@@pure_relcase@@QAE@P8Touch@Feel@@AGXPAVCObject@@@Z@Z ; pure_relcase::pure_relcase<Feel::Touch>
PUBLIC	??1?$_Vector_base@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@XZ ; stlp_std::priv::_Vector_base<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::~_Vector_base<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >
PUBLIC	??1?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@XZ ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::~_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >
PUBLIC	??1?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAE@XZ ; stlp_std::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::~vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >
PUBLIC	??1?$xr_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@@QAE@XZ ; xr_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::~xr_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >
PUBLIC	??$xr_alloc@UDenyTouch@Touch@Feel@@@@YAPAUDenyTouch@Touch@Feel@@I@Z ; xr_alloc<Feel::Touch::DenyTouch>
PUBLIC	?allocate@?$xalloc@UDenyTouch@Touch@Feel@@@@QBEPAUDenyTouch@Touch@Feel@@IPBX@Z ; xalloc<Feel::Touch::DenyTouch>::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@PAUDenyTouch@Touch@Feel@@U123@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@I@Z ; stlp_std::priv::_STLP_alloc_proxy<Feel::Touch::DenyTouch *,Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@PAUDenyTouch@Touch@Feel@@U123@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@AAEPAUDenyTouch@Touch@Feel@@IAAIABU__false_type@3@@Z ; stlp_std::priv::_STLP_alloc_proxy<Feel::Touch::DenyTouch *,Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@PAUDenyTouch@Touch@Feel@@U123@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@IAAI@Z ; stlp_std::priv::_STLP_alloc_proxy<Feel::Touch::DenyTouch *,Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::allocate
PUBLIC	??$xr_free@UDenyTouch@Touch@Feel@@@@YAXAAPAUDenyTouch@Touch@Feel@@@Z ; xr_free<Feel::Touch::DenyTouch>
PUBLIC	?deallocate@?$xalloc@UDenyTouch@Touch@Feel@@@@QBEXPAUDenyTouch@Touch@Feel@@I@Z ; xalloc<Feel::Touch::DenyTouch>::deallocate
PUBLIC	?rbegin@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@3@XZ ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::rbegin
PUBLIC	??0?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@stlp_std@@QAE@PAUDenyTouch@Touch@Feel@@@Z ; stlp_std::reverse_iterator<Feel::Touch::DenyTouch *>::reverse_iterator<Feel::Touch::DenyTouch *>
PUBLIC	?rend@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@3@XZ ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::rend
PUBLIC	??0?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::reverse_iterator<Feel::Touch::DenyTouch *>::reverse_iterator<Feel::Touch::DenyTouch *>
PUBLIC	??$__destroy_range_aux@V?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@stlp_std@@UDenyTouch@Touch@Feel@@@stlp_std@@YAXV?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@0@0PAUDenyTouch@Touch@Feel@@ABU__true_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<Feel::Touch::DenyTouch *>,Feel::Touch::DenyTouch>
PUBLIC	??$__destroy_range@V?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@stlp_std@@UDenyTouch@Touch@Feel@@@stlp_std@@YAXV?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@0@0PAUDenyTouch@Touch@Feel@@@Z ; stlp_std::__destroy_range<stlp_std::reverse_iterator<Feel::Touch::DenyTouch *>,Feel::Touch::DenyTouch>
PUBLIC	??$_Destroy_Range@V?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@0@0@Z ; stlp_std::_Destroy_Range<stlp_std::reverse_iterator<Feel::Touch::DenyTouch *> >
PUBLIC	?_M_clear@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@AAEXXZ ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_M_clear
PUBLIC	?_M_set@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@AAEXPAUDenyTouch@Touch@Feel@@00@Z ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_M_set
PUBLIC	??$__fill_n@PAUDenyTouch@Touch@Feel@@IU123@@priv@stlp_std@@YAPAUDenyTouch@Touch@Feel@@PAU234@IABU234@@Z ; stlp_std::priv::__fill_n<Feel::Touch::DenyTouch *,unsigned int,Feel::Touch::DenyTouch>
PUBLIC	?_M_insert_overflow@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@AAEXPAUDenyTouch@Touch@Feel@@ABU456@ABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_M_insert_overflow
PUBLIC	??$_Copy_Construct@UDenyTouch@Touch@Feel@@@stlp_std@@YAXPAUDenyTouch@Touch@Feel@@ABU123@@Z ; stlp_std::_Copy_Construct<Feel::Touch::DenyTouch>
PUBLIC	?push_back@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEXABUDenyTouch@Touch@Feel@@@Z ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::push_back
PUBLIC	?to_storage_type_cref@?$_CastTraits@UDenyTouch@Touch@Feel@@U123@@priv@stlp_std@@SAABUDenyTouch@Touch@Feel@@ABU456@@Z ; stlp_std::priv::_CastTraits<Feel::Touch::DenyTouch,Feel::Touch::DenyTouch>::to_storage_type_cref
PUBLIC	?push_back@?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAEXABUDenyTouch@Touch@Feel@@@Z ; stlp_std::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::push_back
PUBLIC	?reserve@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEXI@Z ; stlp_std::vector<CObject *,xalloc<CObject *> >::reserve
PUBLIC	?size@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::size
PUBLIC	?size@?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QBEIXZ ; stlp_std::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::size
PUBLIC	?size@?$xr_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@@QBEIXZ ; xr_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::size
PUBLIC	??A?$xr_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@@QAEAAUDenyTouch@Touch@Feel@@I@Z ; xr_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::operator[]
PUBLIC	?begin@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@XZ ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::begin
PUBLIC	?begin@?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@XZ ; stlp_std::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::begin
PUBLIC	?end@?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@XZ ; stlp_std::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::end
PUBLIC	?end@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@XZ ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::end
PUBLIC	??$__copy_ptrs@PAUDenyTouch@Touch@Feel@@PAU123@@priv@stlp_std@@YAPAUDenyTouch@Touch@Feel@@PAU234@00ABU__true_type@1@@Z ; stlp_std::priv::__copy_ptrs<Feel::Touch::DenyTouch *,Feel::Touch::DenyTouch *>
PUBLIC	??$__destroy_aux@UDenyTouch@Touch@Feel@@@stlp_std@@YAXPAUDenyTouch@Touch@Feel@@ABU__true_type@0@@Z ; stlp_std::__destroy_aux<Feel::Touch::DenyTouch>
PUBLIC	??$_Destroy@UDenyTouch@Touch@Feel@@@stlp_std@@YAXPAUDenyTouch@Touch@Feel@@@Z ; stlp_std::_Destroy<Feel::Touch::DenyTouch>
PUBLIC	?_M_erase@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@AAEPAUDenyTouch@Touch@Feel@@PAU456@ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_M_erase
PUBLIC	?erase@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@PAU456@@Z ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::erase
PUBLIC	?to_value_type_ptr@?$_CastTraits@UDenyTouch@Touch@Feel@@U123@@priv@stlp_std@@SAPAUDenyTouch@Touch@Feel@@PAU456@@Z ; stlp_std::priv::_CastTraits<Feel::Touch::DenyTouch,Feel::Touch::DenyTouch>::to_value_type_ptr
PUBLIC	?to_storage_type_ptr@?$_CastTraits@UDenyTouch@Touch@Feel@@U123@@priv@stlp_std@@SAPAUDenyTouch@Touch@Feel@@PAU456@@Z ; stlp_std::priv::_CastTraits<Feel::Touch::DenyTouch,Feel::Touch::DenyTouch>::to_storage_type_ptr
PUBLIC	?erase@?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@PAU345@@Z ; stlp_std::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::erase
PUBLIC	?ignore_always@?3???$?0VTouch@Feel@@@pure_relcase@@QAE@P8Touch@Feel@@AGXPAVCObject@@@Z@Z@4_NA ; `pure_relcase::pure_relcase<Feel::Touch>'::`4'::ignore_always
PUBLIC	??_C@_0BL@NIHABDJK@pure_relcase?3?3pure_relcase?$AA@ ; `string'
PUBLIC	??_C@_0DD@CIHOJODM@d?3?2clearsky?2sources?2engine?2xreng@ ; `string'
PUBLIC	??_C@_0N@HGJAENOJ@g_pGameLevel?$AA@		; `string'
PUBLIC	??_7Touch@Feel@@6B@				; Feel::Touch::`vftable'
EXTRN	__imp_?GetNearest@CObjectSpace@@QAEHAAV?$xr_vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@@ABU?$_vector3@M@@MPAVCObject@@@Z:PROC
;	COMDAT ?ignore_always@?3???$?0VTouch@Feel@@@pure_relcase@@QAE@P8Touch@Feel@@AGXPAVCObject@@@Z@Z@4_NA
_BSS	SEGMENT
?ignore_always@?3???$?0VTouch@Feel@@@pure_relcase@@QAE@P8Touch@Feel@@AGXPAVCObject@@@Z@Z@4_NA DB 01H DUP (?) ; `pure_relcase::pure_relcase<Feel::Touch>'::`4'::ignore_always
;	COMDAT ??_7Touch@Feel@@6B@
CONST	SEGMENT
??_7Touch@Feel@@6B@ DD FLAT:??_R4Touch@Feel@@6B@	; Feel::Touch::`vftable'
	DD	FLAT:??_ETouch@Feel@@UAEPAXI@Z
	DD	FLAT:?feel_touch_contact@Touch@Feel@@UAEHPAVCObject@@@Z
	DD	FLAT:?feel_touch_update@Touch@Feel@@UAEXAAU?$_vector3@M@@M@Z
	DD	FLAT:?feel_touch_deny@Touch@Feel@@UAEXPAVCObject@@K@Z
	DD	FLAT:?feel_touch_new@Touch@Feel@@UAEXPAVCObject@@@Z
	DD	FLAT:?feel_touch_delete@Touch@Feel@@UAEXPAVCObject@@@Z
CONST	ENDS
;	COMDAT ??_R4Touch@Feel@@6B@
rdata$r	SEGMENT
??_R4Touch@Feel@@6B@ DD 00H				; Feel::Touch::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTouch@Feel@@@8
	DD	FLAT:??_R3Touch@Feel@@8
rdata$r	ENDS
;	COMDAT ??_R3Touch@Feel@@8
rdata$r	SEGMENT
??_R3Touch@Feel@@8 DD 00H				; Feel::Touch::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Touch@Feel@@8
rdata$r	ENDS
;	COMDAT ??_R2Touch@Feel@@8
rdata$r	SEGMENT
??_R2Touch@Feel@@8 DD FLAT:??_R1A@?0A@EA@Touch@Feel@@8	; Feel::Touch::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EN@pure_relcase@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EN@pure_relcase@@8
rdata$r	SEGMENT
??_R1A@?0A@EN@pure_relcase@@8 DD FLAT:??_R0?AVpure_relcase@@@8 ; pure_relcase::`RTTI Base Class Descriptor at (0,-1,0,77)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3pure_relcase@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Touch@Feel@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Touch@Feel@@8 DD FLAT:??_R0?AVTouch@Feel@@@8 ; Feel::Touch::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Touch@Feel@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTouch@Feel@@@8
_DATA	SEGMENT
??_R0?AVTouch@Feel@@@8 DD FLAT:??_7type_info@@6B@	; Feel::Touch `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTouch@Feel@@', 00H
_DATA	ENDS
;	COMDAT ??_C@_0N@HGJAENOJ@g_pGameLevel?$AA@
CONST	SEGMENT
??_C@_0N@HGJAENOJ@g_pGameLevel?$AA@ DB 'g_pGameLevel', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@CIHOJODM@d?3?2clearsky?2sources?2engine?2xreng@
CONST	SEGMENT
??_C@_0DD@CIHOJODM@d?3?2clearsky?2sources?2engine?2xreng@ DB 'd:\clearsky'
	DB	'\sources\engine\xrengine\pure_relcase.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NIHABDJK@pure_relcase?3?3pure_relcase?$AA@
CONST	SEGMENT
??_C@_0BL@NIHABDJK@pure_relcase?3?3pure_relcase?$AA@ DB 'pure_relcase::pu'
	DB	're_relcase', 00H				; `string'
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\type_traits.h
;	COMDAT ??$_UseTrivialUCopy@UDenyTouch@Touch@Feel@@U123@@stlp_std@@YA?AU?$_TrivialUCopy@UDenyTouch@Touch@Feel@@U123@@0@PAUDenyTouch@Touch@Feel@@0@Z
_TEXT	SEGMENT
??$_UseTrivialUCopy@UDenyTouch@Touch@Feel@@U123@@stlp_std@@YA?AU?$_TrivialUCopy@UDenyTouch@Touch@Feel@@U123@@0@PAUDenyTouch@Touch@Feel@@0@Z PROC ; stlp_std::_UseTrivialUCopy<Feel::Touch::DenyTouch,Feel::Touch::DenyTouch>, COMDAT

; 489  : { return _TrivialUCopy<_Src, _Dst>(); }

	xor	al, al
	ret	0
??$_UseTrivialUCopy@UDenyTouch@Touch@Feel@@U123@@stlp_std@@YA?AU?$_TrivialUCopy@UDenyTouch@Touch@Feel@@U123@@0@PAUDenyTouch@Touch@Feel@@0@Z ENDP ; stlp_std::_UseTrivialUCopy<Feel::Touch::DenyTouch,Feel::Touch::DenyTouch>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Answer@?$_TrivialUCopy@UDenyTouch@Touch@Feel@@U123@@stlp_std@@SA?AU__true_type@2@XZ
_TEXT	SEGMENT
?_Answer@?$_TrivialUCopy@UDenyTouch@Touch@Feel@@U123@@stlp_std@@SA?AU__true_type@2@XZ PROC ; stlp_std::_TrivialUCopy<Feel::Touch::DenyTouch,Feel::Touch::DenyTouch>::_Answer, COMDAT

; 407  :   static _Ret _Answer() { return _Ret(); }

	xor	al, al
	ret	0
?_Answer@?$_TrivialUCopy@UDenyTouch@Touch@Feel@@U123@@stlp_std@@SA?AU__true_type@2@XZ ENDP ; stlp_std::_TrivialUCopy<Feel::Touch::DenyTouch,Feel::Touch::DenyTouch>::_Answer
_TEXT	ENDS
PUBLIC	?feel_touch_relcase@Touch@Feel@@QAGXPAVCObject@@@Z ; Feel::Touch::feel_touch_relcase
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\fastdelegate.h
;	COMDAT ??$Convert@VTouch@Feel@@P812@AGXPAVCObject@@@ZP8GenericClass@detail@fastdelegate@@AEXXZ@?$SimplifyMemFunc@$03@detail@fastdelegate@@SGPAVGenericClass@12@PAVTouch@Feel@@P845@AGXPAVCObject@@@ZAAP8312@AEXXZ@Z
_TEXT	SEGMENT
_pthis$ = 8						; size = 4
??$Convert@VTouch@Feel@@P812@AGXPAVCObject@@@ZP8GenericClass@detail@fastdelegate@@AEXXZ@?$SimplifyMemFunc@$03@detail@fastdelegate@@SGPAVGenericClass@12@PAVTouch@Feel@@P845@AGXPAVCObject@@@ZAAP8312@AEXXZ@Z PROC ; fastdelegate::detail::SimplifyMemFunc<4>::Convert<Feel::Touch,void (__stdcall Feel::Touch::*)(CObject *),void (__thiscall fastdelegate::detail::GenericClass::*)(void)>, COMDAT
; _bound_func$ = eax

; 310  : 			GenericMemFuncType &bound_func) {
; 311  : #if defined __DMC__  
; 312  : 		// Digital Mars doesn't allow you to cast between abitrary PMF's, 
; 313  : 		// even though the standard says you can. The 32-bit compiler lets you
; 314  : 		// static_cast through an int, but the DOS compiler doesn't.
; 315  : 		bound_func = horrible_cast<GenericMemFuncType>(function_to_bind);
; 316  : #else 
; 317  :         bound_func = reinterpret_cast<GenericMemFuncType>(function_to_bind);

	mov	DWORD PTR [eax], OFFSET ?feel_touch_relcase@Touch@Feel@@QAGXPAVCObject@@@Z ; Feel::Touch::feel_touch_relcase

; 318  : #endif
; 319  :         return reinterpret_cast<GenericClass *>(pthis);

	mov	eax, DWORD PTR _pthis$[esp-4]

; 320  : 	}

	ret	4
??$Convert@VTouch@Feel@@P812@AGXPAVCObject@@@ZP8GenericClass@detail@fastdelegate@@AEXXZ@?$SimplifyMemFunc@$03@detail@fastdelegate@@SGPAVGenericClass@12@PAVTouch@Feel@@P845@AGXPAVCObject@@@ZAAP8312@AEXXZ@Z ENDP ; fastdelegate::detail::SimplifyMemFunc<4>::Convert<Feel::Touch,void (__stdcall Feel::Touch::*)(CObject *),void (__thiscall fastdelegate::detail::GenericClass::*)(void)>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$__destroy_range_aux@PAUDenyTouch@Touch@Feel@@U123@@stlp_std@@YAXPAUDenyTouch@Touch@Feel@@00ABU__true_type@0@@Z
_TEXT	SEGMENT
??$__destroy_range_aux@PAUDenyTouch@Touch@Feel@@U123@@stlp_std@@YAXPAUDenyTouch@Touch@Feel@@00ABU__true_type@0@@Z PROC ; stlp_std::__destroy_range_aux<Feel::Touch::DenyTouch *,Feel::Touch::DenyTouch>, COMDAT

; 169  : __destroy_range_aux(_ForwardIterator, _ForwardIterator, _Tp*, const __true_type& /*_Trivial_destructor*/) {}

	ret	0
??$__destroy_range_aux@PAUDenyTouch@Touch@Feel@@U123@@stlp_std@@YAXPAUDenyTouch@Touch@Feel@@00ABU__true_type@0@@Z ENDP ; stlp_std::__destroy_range_aux<Feel::Touch::DenyTouch *,Feel::Touch::DenyTouch>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\type_traits.h
_TEXT	ENDS
;	COMDAT ?_Answer@?$_BothPtrType@PBUDenyTouch@Touch@Feel@@PAU123@@stlp_std@@SA?AU__true_type@2@XZ
_TEXT	SEGMENT
?_Answer@?$_BothPtrType@PBUDenyTouch@Touch@Feel@@PAU123@@stlp_std@@SA?AU__true_type@2@XZ PROC ; stlp_std::_BothPtrType<Feel::Touch::DenyTouch const *,Feel::Touch::DenyTouch *>::_Answer, COMDAT

; 468  :   static _Ret _Answer() { return _Ret(); }

	xor	al, al
	ret	0
?_Answer@?$_BothPtrType@PBUDenyTouch@Touch@Feel@@PAU123@@stlp_std@@SA?AU__true_type@2@XZ ENDP ; stlp_std::_BothPtrType<Feel::Touch::DenyTouch const *,Feel::Touch::DenyTouch *>::_Answer
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$__destroy_range_aux@V?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@stlp_std@@UDenyTouch@Touch@Feel@@@stlp_std@@YAXV?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@0@0PAUDenyTouch@Touch@Feel@@ABU__true_type@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$__destroy_range_aux@V?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@stlp_std@@UDenyTouch@Touch@Feel@@@stlp_std@@YAXV?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@0@0PAUDenyTouch@Touch@Feel@@ABU__true_type@0@@Z PROC ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<Feel::Touch::DenyTouch *>,Feel::Touch::DenyTouch>, COMDAT

; 169  : __destroy_range_aux(_ForwardIterator, _ForwardIterator, _Tp*, const __true_type& /*_Trivial_destructor*/) {}

	ret	0
??$__destroy_range_aux@V?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@stlp_std@@UDenyTouch@Touch@Feel@@@stlp_std@@YAXV?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@0@0PAUDenyTouch@Touch@Feel@@ABU__true_type@0@@Z ENDP ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<Feel::Touch::DenyTouch *>,Feel::Touch::DenyTouch>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\fastdelegate.h
_TEXT	ENDS
;	COMDAT ??$bindmemfunc@VTouch@Feel@@P812@AGXPAVCObject@@@Z@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AGXPAVCObject@@@ZP6GX0@ZP6GX0@Z@detail@fastdelegate@@QAEXPAVTouch@Feel@@P834@AGXPAVCObject@@@Z@Z
_TEXT	SEGMENT
??$bindmemfunc@VTouch@Feel@@P812@AGXPAVCObject@@@Z@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AGXPAVCObject@@@ZP6GX0@ZP6GX0@Z@detail@fastdelegate@@QAEXPAVTouch@Feel@@P834@AGXPAVCObject@@@Z@Z PROC ; fastdelegate::detail::ClosurePtr<void (__stdcall fastdelegate::detail::GenericClass::*)(CObject *),void (__stdcall*)(CObject *),void (__stdcall*)(CObject *)>::bindmemfunc<Feel::Touch,void (__stdcall Feel::Touch::*)(CObject *)>, COMDAT
; _this$ = eax
; _pthis$ = ecx

; 682  : 		m_pthis = SimplifyMemFunc< sizeof(function_to_bind) >
; 683  : 			::Convert(pthis, function_to_bind, m_pFunction);

	mov	DWORD PTR [eax+4], OFFSET ?feel_touch_relcase@Touch@Feel@@QAGXPAVCObject@@@Z ; Feel::Touch::feel_touch_relcase
	mov	DWORD PTR [eax], ecx

; 684  : #if !defined(FASTDELEGATE_USESTATICFUNCTIONHACK)
; 685  : 		m_pStaticFunction = 0;
; 686  : #endif
; 687  : 	}

	ret	0
??$bindmemfunc@VTouch@Feel@@P812@AGXPAVCObject@@@Z@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AGXPAVCObject@@@ZP6GX0@ZP6GX0@Z@detail@fastdelegate@@QAEXPAVTouch@Feel@@P834@AGXPAVCObject@@@Z@Z ENDP ; fastdelegate::detail::ClosurePtr<void (__stdcall fastdelegate::detail::GenericClass::*)(CObject *),void (__stdcall*)(CObject *),void (__stdcall*)(CObject *)>::bindmemfunc<Feel::Touch,void (__stdcall Feel::Touch::*)(CObject *)>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$implicit_cast@PAVTouch@Feel@@PAV12@@detail@fastdelegate@@YAPAVTouch@Feel@@PAV23@@Z
_TEXT	SEGMENT
??$implicit_cast@PAVTouch@Feel@@PAV12@@detail@fastdelegate@@YAPAVTouch@Feel@@PAV23@@Z PROC ; fastdelegate::detail::implicit_cast<Feel::Touch *,Feel::Touch *>, COMDAT
; _input$ = eax

; 157  : 	return input;
; 158  : }

	ret	0
??$implicit_cast@PAVTouch@Feel@@PAV12@@detail@fastdelegate@@YAPAVTouch@Feel@@PAV23@@Z ENDP ; fastdelegate::detail::implicit_cast<Feel::Touch *,Feel::Touch *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$__destroy_range@PAUDenyTouch@Touch@Feel@@U123@@stlp_std@@YAXPAUDenyTouch@Touch@Feel@@00@Z
_TEXT	SEGMENT
??$__destroy_range@PAUDenyTouch@Touch@Feel@@U123@@stlp_std@@YAXPAUDenyTouch@Touch@Feel@@00@Z PROC ; stlp_std::__destroy_range<Feel::Touch::DenyTouch *,Feel::Touch::DenyTouch>, COMDAT

; 175  :   typedef typename __type_traits<_Tp>::has_trivial_destructor _Trivial_destructor;
; 176  :   __destroy_range_aux(__first, __last, __ptr, _Trivial_destructor());
; 177  : }

	ret	0
??$__destroy_range@PAUDenyTouch@Touch@Feel@@U123@@stlp_std@@YAXPAUDenyTouch@Touch@Feel@@00@Z ENDP ; stlp_std::__destroy_range<Feel::Touch::DenyTouch *,Feel::Touch::DenyTouch>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__destroy_aux@UDenyTouch@Touch@Feel@@@stlp_std@@YAXPAUDenyTouch@Touch@Feel@@ABU__true_type@0@@Z
_TEXT	SEGMENT
??$__destroy_aux@UDenyTouch@Touch@Feel@@@stlp_std@@YAXPAUDenyTouch@Touch@Feel@@ABU__true_type@0@@Z PROC ; stlp_std::__destroy_aux<Feel::Touch::DenyTouch>, COMDAT

; 56   : inline void __destroy_aux(_Tp*, const __true_type& /*_Trivial_destructor*/) {}

	ret	0
??$__destroy_aux@UDenyTouch@Touch@Feel@@@stlp_std@@YAXPAUDenyTouch@Touch@Feel@@ABU__true_type@0@@Z ENDP ; stlp_std::__destroy_aux<Feel::Touch::DenyTouch>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Destroy_Range@PAUDenyTouch@Touch@Feel@@@stlp_std@@YAXPAUDenyTouch@Touch@Feel@@0@Z
_TEXT	SEGMENT
??$_Destroy_Range@PAUDenyTouch@Touch@Feel@@@stlp_std@@YAXPAUDenyTouch@Touch@Feel@@0@Z PROC ; stlp_std::_Destroy_Range<Feel::Touch::DenyTouch *>, COMDAT

; 181  :   __destroy_range(__first, __last, _STLP_VALUE_TYPE(__first, _ForwardIterator));
; 182  : }

	ret	0
??$_Destroy_Range@PAUDenyTouch@Touch@Feel@@@stlp_std@@YAXPAUDenyTouch@Touch@Feel@@0@Z ENDP ; stlp_std::_Destroy_Range<Feel::Touch::DenyTouch *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__fill_n@PAUDenyTouch@Touch@Feel@@IU123@@priv@stlp_std@@YAPAUDenyTouch@Touch@Feel@@PAU234@IABU234@@Z
_TEXT	SEGMENT
??$__fill_n@PAUDenyTouch@Touch@Feel@@IU123@@priv@stlp_std@@YAPAUDenyTouch@Touch@Feel@@PAU234@IABU234@@Z PROC ; stlp_std::priv::__fill_n<Feel::Touch::DenyTouch *,unsigned int,Feel::Touch::DenyTouch>, COMDAT
; ___first$ = eax
; ___n$ = ecx
; ___val$ = edx

; 403  :   _STLP_FIX_LITERAL_BUG(__first)
; 404  :   for ( ; __n > 0; --__n, ++__first)

	test	ecx, ecx
	jbe	SHORT $LN1@fill_n@8
	push	esi
$LL3@fill_n@8:

; 405  :     *__first = __val;

	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], esi
	sub	ecx, 1
	add	eax, 8
	test	ecx, ecx
	ja	SHORT $LL3@fill_n@8
	pop	esi
$LN1@fill_n@8:

; 406  :   return __first;
; 407  : }

	ret	0
??$__fill_n@PAUDenyTouch@Touch@Feel@@IU123@@priv@stlp_std@@YAPAUDenyTouch@Touch@Feel@@PAU234@IABU234@@Z ENDP ; stlp_std::priv::__fill_n<Feel::Touch::DenyTouch *,unsigned int,Feel::Touch::DenyTouch>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_iterator.h
_TEXT	ENDS
;	COMDAT ??0?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@stlp_std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@stlp_std@@QAE@ABV01@@Z PROC ; stlp_std::reverse_iterator<Feel::Touch::DenyTouch *>::reverse_iterator<Feel::Touch::DenyTouch *>, COMDAT
; _this$ = eax
; ___x$ = ecx

; 66   :   reverse_iterator(const _Self& __x) : current(__x.current) {}

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	ret	0
??0?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@stlp_std@@QAE@ABV01@@Z ENDP ; stlp_std::reverse_iterator<Feel::Touch::DenyTouch *>::reverse_iterator<Feel::Touch::DenyTouch *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?_M_set@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@AAEXPAUDenyTouch@Touch@Feel@@00@Z
_TEXT	SEGMENT
___e$ = 8						; size = 4
?_M_set@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@AAEXPAUDenyTouch@Touch@Feel@@00@Z PROC ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_M_set, COMDAT
; _this$ = eax
; ___s$ = ecx
; ___f$ = edx

; 626  :     this->_M_start = __s;

	mov	DWORD PTR [eax], ecx

; 627  :     this->_M_finish = __f;
; 628  :     this->_M_end_of_storage._M_data = __e;

	mov	ecx, DWORD PTR ___e$[esp-4]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx

; 629  :   }

	ret	4
?_M_set@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@AAEXPAUDenyTouch@Touch@Feel@@00@Z ENDP ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_M_set
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?capacity@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QBEIXZ PROC ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::capacity, COMDAT
; _this$ = ecx

; 187  :   size_type capacity() const    { return size_type(this->_M_end_of_storage._M_data - this->_M_start); }

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 3
	ret	0
?capacity@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QBEIXZ ENDP ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::capacity
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrmemory.h
_TEXT	ENDS
;	COMDAT ??$xr_alloc@UDenyTouch@Touch@Feel@@@@YAPAUDenyTouch@Touch@Feel@@I@Z
_TEXT	SEGMENT
??$xr_alloc@UDenyTouch@Touch@Feel@@@@YAPAUDenyTouch@Touch@Feel@@I@Z PROC ; xr_alloc<Feel::Touch::DenyTouch>, COMDAT
; _count$ = eax

; 109  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	lea	ecx, DWORD PTR [eax*8]
	push	ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
??$xr_alloc@UDenyTouch@Touch@Feel@@@@YAPAUDenyTouch@Touch@Feel@@I@Z ENDP ; xr_alloc<Feel::Touch::DenyTouch>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$_Destroy@UDenyTouch@Touch@Feel@@@stlp_std@@YAXPAUDenyTouch@Touch@Feel@@@Z
_TEXT	SEGMENT
??$_Destroy@UDenyTouch@Touch@Feel@@@stlp_std@@YAXPAUDenyTouch@Touch@Feel@@@Z PROC ; stlp_std::_Destroy<Feel::Touch::DenyTouch>, COMDAT

; 60   : #if defined (_STLP_MSVC) && (_STLP_MSVC <= 1010)
; 61   :   __pointer;
; 62   : #endif
; 63   :   typedef typename __type_traits<_Tp>::has_trivial_destructor _Trivial_destructor;
; 64   :   __destroy_aux(__pointer, _Trivial_destructor());
; 65   : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 66   :   memset(__REINTERPRET_CAST(char*, __pointer), _STLP_SHRED_BYTE, sizeof(_Tp));
; 67   : #endif
; 68   : }

	ret	0
??$_Destroy@UDenyTouch@Touch@Feel@@@stlp_std@@YAXPAUDenyTouch@Touch@Feel@@@Z ENDP ; stlp_std::_Destroy<Feel::Touch::DenyTouch>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrmemory.h
_TEXT	ENDS
;	COMDAT ??$xr_free@UDenyTouch@Touch@Feel@@@@YAXAAPAUDenyTouch@Touch@Feel@@@Z
_TEXT	SEGMENT
??$xr_free@UDenyTouch@Touch@Feel@@@@YAXAAPAUDenyTouch@Touch@Feel@@@Z PROC ; xr_free<Feel::Touch::DenyTouch>, COMDAT
; _P$ = esi

; 111  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN1@xr_free@25
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi], 0
$LN1@xr_free@25:
	ret	0
??$xr_free@UDenyTouch@Touch@Feel@@@@YAXAAPAUDenyTouch@Touch@Feel@@@Z ENDP ; xr_free<Feel::Touch::DenyTouch>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?allocate@?$xalloc@UDenyTouch@Touch@Feel@@@@QBEPAUDenyTouch@Touch@Feel@@IPBX@Z
_TEXT	SEGMENT
?allocate@?$xalloc@UDenyTouch@Touch@Feel@@@@QBEPAUDenyTouch@Touch@Feel@@IPBX@Z PROC ; xalloc<Feel::Touch::DenyTouch>::allocate, COMDAT
; _n$ = eax

; 81   : 							pointer					allocate		(size_type n, const void* p=0) const	{	return xr_alloc<T>((u32)n);	}

	lea	ecx, DWORD PTR [eax*8]
	push	ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$xalloc@UDenyTouch@Touch@Feel@@@@QBEPAUDenyTouch@Touch@Feel@@IPBX@Z ENDP ; xalloc<Feel::Touch::DenyTouch>::allocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_alloc.h
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@PAUDenyTouch@Touch@Feel@@U123@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@I@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@PAUDenyTouch@Touch@Feel@@U123@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@I@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<Feel::Touch::DenyTouch *,Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::allocate, COMDAT
; ___n$ = eax

; 633  :   { return _Base::allocate(__n); }

	lea	ecx, DWORD PTR [eax*8]
	push	ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$_STLP_alloc_proxy@PAUDenyTouch@Touch@Feel@@U123@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@I@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<Feel::Touch::DenyTouch *,Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::allocate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@PAUDenyTouch@Touch@Feel@@U123@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@AAEPAUDenyTouch@Touch@Feel@@IAAIABU__false_type@3@@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@PAUDenyTouch@Touch@Feel@@U123@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@AAEPAUDenyTouch@Touch@Feel@@IAAIABU__false_type@3@@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<Feel::Touch::DenyTouch *,Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::allocate, COMDAT
; ___n$ = eax
; ___allocated_n$ = ecx

; 640  :   { __allocated_n = __n; return allocate(__n); }

	lea	edx, DWORD PTR [eax*8]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edx
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$_STLP_alloc_proxy@PAUDenyTouch@Touch@Feel@@U123@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@AAEPAUDenyTouch@Touch@Feel@@IAAIABU__false_type@3@@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<Feel::Touch::DenyTouch *,Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::allocate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@PAUDenyTouch@Touch@Feel@@U123@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@IAAI@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@PAUDenyTouch@Touch@Feel@@U123@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@IAAI@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<Feel::Touch::DenyTouch *,Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::allocate, COMDAT
; ___n$ = eax
; ___allocated_n$ = ecx

; 611  : #if !defined (__BORLANDC__)
; 612  :     typedef typename _IsSTLportClass<_MaybeReboundAlloc>::_Ret _STLportAlloc;
; 613  : #else
; 614  :     typedef typename __bool2type<_IsSTLportClass<_MaybeReboundAlloc>::_Is>::_Ret _STLportAlloc;
; 615  : #endif
; 616  :     return allocate(__n, __allocated_n, _STLportAlloc());

	lea	edx, DWORD PTR [eax*8]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edx
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 617  :   }

	ret	0
?allocate@?$_STLP_alloc_proxy@PAUDenyTouch@Touch@Feel@@U123@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@IAAI@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<Feel::Touch::DenyTouch *,Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::allocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xalloc@UDenyTouch@Touch@Feel@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xalloc@UDenyTouch@Touch@Feel@@@@QAE@ABV0@@Z PROC	; xalloc<Feel::Touch::DenyTouch>::xalloc<Feel::Touch::DenyTouch>, COMDAT
; _this$ = eax

; 78   : 													xalloc			(const xalloc<T>&)						{	}

	ret	0
??0?$xalloc@UDenyTouch@Touch@Feel@@@@QAE@ABV0@@Z ENDP	; xalloc<Feel::Touch::DenyTouch>::xalloc<Feel::Touch::DenyTouch>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_iterator.h
_TEXT	ENDS
;	COMDAT ??0?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@stlp_std@@QAE@PAUDenyTouch@Touch@Feel@@@Z
_TEXT	SEGMENT
??0?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@stlp_std@@QAE@PAUDenyTouch@Touch@Feel@@@Z PROC ; stlp_std::reverse_iterator<Feel::Touch::DenyTouch *>::reverse_iterator<Feel::Touch::DenyTouch *>, COMDAT
; _this$ = eax
; ___x$ = ecx

; 65   :   explicit reverse_iterator(iterator_type __x) : current(__x) {}

	mov	DWORD PTR [eax], ecx
	ret	0
??0?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@stlp_std@@QAE@PAUDenyTouch@Touch@Feel@@@Z ENDP ; stlp_std::reverse_iterator<Feel::Touch::DenyTouch *>::reverse_iterator<Feel::Touch::DenyTouch *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?size@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QBEIXZ PROC ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::size, COMDAT
; _this$ = ecx

; 180  :   size_type size() const        { return size_type(this->_M_finish - this->_M_start); }

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 3
	ret	0
?size@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QBEIXZ ENDP ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?end@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QBEPBUDenyTouch@Touch@Feel@@XZ
_TEXT	SEGMENT
?end@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QBEPBUDenyTouch@Touch@Feel@@XZ PROC ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::end, COMDAT
; _this$ = eax

; 173  :   const_iterator end() const   { return this->_M_finish; }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?end@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QBEPBUDenyTouch@Touch@Feel@@XZ ENDP ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QBEPBUDenyTouch@Touch@Feel@@XZ
_TEXT	SEGMENT
?begin@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QBEPBUDenyTouch@Touch@Feel@@XZ PROC ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::begin, COMDAT
; _this$ = eax

; 171  :   const_iterator begin() const { return this->_M_start; }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QBEPBUDenyTouch@Touch@Feel@@XZ ENDP ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::begin
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?get_allocator@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QBE?AV?$xalloc@UDenyTouch@Touch@Feel@@@@XZ
_TEXT	SEGMENT
?get_allocator@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QBE?AV?$xalloc@UDenyTouch@Touch@Feel@@@@XZ PROC ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::get_allocator, COMDAT
; ___$ReturnUdt$ = eax

; 134  :   { return _STLP_CONVERT_ALLOCATOR((const allocator_type&)this->_M_end_of_storage, _Tp); }

	ret	0
?get_allocator@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QBE?AV?$xalloc@UDenyTouch@Touch@Feel@@@@XZ ENDP ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::get_allocator
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?deallocate@?$xalloc@UDenyTouch@Touch@Feel@@@@QBEXPAUDenyTouch@Touch@Feel@@I@Z
_TEXT	SEGMENT
?deallocate@?$xalloc@UDenyTouch@Touch@Feel@@@@QBEXPAUDenyTouch@Touch@Feel@@I@Z PROC ; xalloc<Feel::Touch::DenyTouch>::deallocate, COMDAT
; _p$ = eax

; 83   : 							void					deallocate		(pointer p, size_type n) const			{	xr_free	(p);				}

	test	eax, eax
	je	SHORT $LN3@deallocate@17
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN3@deallocate@17:
	ret	0
?deallocate@?$xalloc@UDenyTouch@Touch@Feel@@@@QBEXPAUDenyTouch@Touch@Feel@@I@Z ENDP ; xalloc<Feel::Touch::DenyTouch>::deallocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_tools.h
_TEXT	ENDS
;	COMDAT ?to_storage_type_cref@?$_CastTraits@UDenyTouch@Touch@Feel@@U123@@priv@stlp_std@@SAABUDenyTouch@Touch@Feel@@ABU456@@Z
_TEXT	SEGMENT
?to_storage_type_cref@?$_CastTraits@UDenyTouch@Touch@Feel@@U123@@priv@stlp_std@@SAABUDenyTouch@Touch@Feel@@ABU456@@Z PROC ; stlp_std::priv::_CastTraits<Feel::Touch::DenyTouch,Feel::Touch::DenyTouch>::to_storage_type_cref, COMDAT
; ___ref$ = eax

; 254  :   { return __ref; }

	ret	0
?to_storage_type_cref@?$_CastTraits@UDenyTouch@Touch@Feel@@U123@@priv@stlp_std@@SAABUDenyTouch@Touch@Feel@@ABU456@@Z ENDP ; stlp_std::priv::_CastTraits<Feel::Touch::DenyTouch,Feel::Touch::DenyTouch>::to_storage_type_cref
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_storage_type_ptr@?$_CastTraits@UDenyTouch@Touch@Feel@@U123@@priv@stlp_std@@SAPAUDenyTouch@Touch@Feel@@PAU456@@Z
_TEXT	SEGMENT
?to_storage_type_ptr@?$_CastTraits@UDenyTouch@Touch@Feel@@U123@@priv@stlp_std@@SAPAUDenyTouch@Touch@Feel@@PAU456@@Z PROC ; stlp_std::priv::_CastTraits<Feel::Touch::DenyTouch,Feel::Touch::DenyTouch>::to_storage_type_ptr, COMDAT
; ___ptr$ = eax

; 248  :   { return __ptr; }

	ret	0
?to_storage_type_ptr@?$_CastTraits@UDenyTouch@Touch@Feel@@U123@@priv@stlp_std@@SAPAUDenyTouch@Touch@Feel@@PAU456@@Z ENDP ; stlp_std::priv::_CastTraits<Feel::Touch::DenyTouch,Feel::Touch::DenyTouch>::to_storage_type_ptr
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_value_type_ptr@?$_CastTraits@UDenyTouch@Touch@Feel@@U123@@priv@stlp_std@@SAPAUDenyTouch@Touch@Feel@@PAU456@@Z
_TEXT	SEGMENT
?to_value_type_ptr@?$_CastTraits@UDenyTouch@Touch@Feel@@U123@@priv@stlp_std@@SAPAUDenyTouch@Touch@Feel@@PAU456@@Z PROC ; stlp_std::priv::_CastTraits<Feel::Touch::DenyTouch,Feel::Touch::DenyTouch>::to_value_type_ptr, COMDAT
; ___ptr$ = eax

; 237  :   { return __ptr; }

	ret	0
?to_value_type_ptr@?$_CastTraits@UDenyTouch@Touch@Feel@@U123@@priv@stlp_std@@SAPAUDenyTouch@Touch@Feel@@PAU456@@Z ENDP ; stlp_std::priv::_CastTraits<Feel::Touch::DenyTouch,Feel::Touch::DenyTouch>::to_value_type_ptr
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ??1?$_Vector_base@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_base@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@XZ PROC ; stlp_std::priv::_Vector_base<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::~_Vector_base<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >, COMDAT
; _this$ = eax

; 85   :     if (_M_start != _STLP_DEFAULT_CONSTRUCTED(pointer))

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN6@Vector_bas@9

; 86   :       _M_end_of_storage.deallocate(_M_start, _M_end_of_storage._M_data - _M_start);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN6@Vector_bas@9:

; 87   :   }

	ret	0
??1?$_Vector_base@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@XZ ENDP ; stlp_std::priv::_Vector_base<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::~_Vector_base<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?end@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@XZ
_TEXT	SEGMENT
?end@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@XZ PROC ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::end, COMDAT
; _this$ = eax

; 172  :   iterator end()               { return this->_M_finish; }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?end@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@XZ ENDP ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@XZ
_TEXT	SEGMENT
?begin@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@XZ PROC ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::begin, COMDAT
; _this$ = eax

; 170  :   iterator begin()             { return this->_M_start; }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@XZ ENDP ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::begin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xalloc@UDenyTouch@Touch@Feel@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xalloc@UDenyTouch@Touch@Feel@@@@QAE@XZ PROC	; xalloc<Feel::Touch::DenyTouch>::xalloc<Feel::Touch::DenyTouch>, COMDAT
; _this$ = eax

; 77   : 													xalloc			()										{	}

	ret	0
??0?$xalloc@UDenyTouch@Touch@Feel@@@@QAE@XZ ENDP	; xalloc<Feel::Touch::DenyTouch>::xalloc<Feel::Touch::DenyTouch>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?size@?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QBEIXZ PROC ; stlp_std::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::size, COMDAT
; _this$ = ecx

; 89   :   size_type size() const        { return _M_impl.size(); }

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 3
	ret	0
?size@?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QBEIXZ ENDP ; stlp_std::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?end@?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@XZ
_TEXT	SEGMENT
?end@?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@XZ PROC ; stlp_std::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::end, COMDAT
; _this$ = eax

; 81   :   iterator end()               { return cast_traits::to_value_type_ptr(_M_impl.end()); }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?end@?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@XZ ENDP ; stlp_std::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@XZ
_TEXT	SEGMENT
?begin@?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@XZ PROC ; stlp_std::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::begin, COMDAT
; _this$ = eax

; 79   :   iterator begin()             { return cast_traits::to_value_type_ptr(_M_impl.begin()); }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@XZ ENDP ; stlp_std::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::begin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??A?$xr_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@@QAEAAUDenyTouch@Touch@Feel@@I@Z
_TEXT	SEGMENT
??A?$xr_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@@QAEAAUDenyTouch@Touch@Feel@@I@Z PROC ; xr_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::operator[], COMDAT
; _this$ = eax
; __Pos$ = edx

; 139  : 	reference operator[]		(size_type _Pos)					{ {VERIFY2(_Pos<size(),make_string("index is out of range: index requested[%d], size of container[%d]", _Pos, size()).c_str());} return (*(begin() + _Pos)); }

	mov	ecx, DWORD PTR [eax]
	lea	eax, DWORD PTR [ecx+edx*8]
	ret	0
??A?$xr_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@@QAEAAUDenyTouch@Touch@Feel@@I@Z ENDP ; xr_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::operator[]
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?size@?$xr_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@@QBEIXZ
_TEXT	SEGMENT
?size@?$xr_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@@QBEIXZ PROC ; xr_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::size, COMDAT
; _this$ = ecx

; 126  : 	u32		size				() const							{ return (u32)inherited::size();} 

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 3
	ret	0
?size@?$xr_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@@QBEIXZ ENDP ; xr_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::size
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\feel_touch.cpp
_TEXT	ENDS
;	COMDAT ?feel_touch_contact@Touch@Feel@@UAEHPAVCObject@@@Z
_TEXT	SEGMENT
_O$ = 8							; size = 4
?feel_touch_contact@Touch@Feel@@UAEHPAVCObject@@@Z PROC	; Feel::Touch::feel_touch_contact, COMDAT
; _this$ = ecx

; 17   : 	return TRUE; 

	mov	eax, 1

; 18   : }

	ret	4
?feel_touch_contact@Touch@Feel@@UAEHPAVCObject@@@Z ENDP	; Feel::Touch::feel_touch_contact
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\feel_touch.h
_TEXT	ENDS
;	COMDAT ?feel_touch_delete@Touch@Feel@@UAEXPAVCObject@@@Z
_TEXT	SEGMENT
_O$ = 8							; size = 4
?feel_touch_delete@Touch@Feel@@UAEXPAVCObject@@@Z PROC	; Feel::Touch::feel_touch_delete, COMDAT
; _this$ = ecx

; 34   : 		virtual void			feel_touch_delete			(CObject* O)			{	};

	ret	4
?feel_touch_delete@Touch@Feel@@UAEXPAVCObject@@@Z ENDP	; Feel::Touch::feel_touch_delete
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?feel_touch_new@Touch@Feel@@UAEXPAVCObject@@@Z
_TEXT	SEGMENT
_O$ = 8							; size = 4
?feel_touch_new@Touch@Feel@@UAEXPAVCObject@@@Z PROC	; Feel::Touch::feel_touch_new, COMDAT
; _this$ = ecx

; 33   : 		virtual void			feel_touch_new				(CObject* O)			{	};

	ret	4
?feel_touch_new@Touch@Feel@@UAEXPAVCObject@@@Z ENDP	; Feel::Touch::feel_touch_new
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
;	COMDAT ??$__destroy_range@V?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@stlp_std@@UDenyTouch@Touch@Feel@@@stlp_std@@YAXV?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@0@0PAUDenyTouch@Touch@Feel@@@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$__destroy_range@V?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@stlp_std@@UDenyTouch@Touch@Feel@@@stlp_std@@YAXV?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@0@0PAUDenyTouch@Touch@Feel@@@Z PROC ; stlp_std::__destroy_range<stlp_std::reverse_iterator<Feel::Touch::DenyTouch *>,Feel::Touch::DenyTouch>, COMDAT

; 175  :   typedef typename __type_traits<_Tp>::has_trivial_destructor _Trivial_destructor;
; 176  :   __destroy_range_aux(__first, __last, __ptr, _Trivial_destructor());
; 177  : }

	ret	0
??$__destroy_range@V?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@stlp_std@@UDenyTouch@Touch@Feel@@@stlp_std@@YAXV?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@0@0PAUDenyTouch@Touch@Feel@@@Z ENDP ; stlp_std::__destroy_range<stlp_std::reverse_iterator<Feel::Touch::DenyTouch *>,Feel::Touch::DenyTouch>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__copy_ptrs@PBUDenyTouch@Touch@Feel@@PAU123@@priv@stlp_std@@YAPAUDenyTouch@Touch@Feel@@PBU234@0PAU234@ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__copy_ptrs@PBUDenyTouch@Touch@Feel@@PAU123@@priv@stlp_std@@YAPAUDenyTouch@Touch@Feel@@PBU234@0PAU234@ABU__true_type@1@@Z PROC ; stlp_std::priv::__copy_ptrs<Feel::Touch::DenyTouch const *,Feel::Touch::DenyTouch *>, COMDAT
; ___first$ = edx
; ___last$ = ecx
; ___result$ = eax

; 255  :   // we know they all pointers, so this cast is OK
; 256  :   //  return (_OutputIter)__copy_trivial(&(*__first), &(*__last), &(*__result));
; 257  :   return (_OutputIter)__copy_trivial(__first, __last, __result);

	sub	ecx, edx
	push	esi
	mov	esi, ecx
	je	SHORT $LN6@copy_ptrs@13
	push	esi
	push	edx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN6@copy_ptrs@13:
	pop	esi

; 258  : }

	ret	0
??$__copy_ptrs@PBUDenyTouch@Touch@Feel@@PAU123@@priv@stlp_std@@YAPAUDenyTouch@Touch@Feel@@PBU234@0PAU234@ABU__true_type@1@@Z ENDP ; stlp_std::priv::__copy_ptrs<Feel::Touch::DenyTouch const *,Feel::Touch::DenyTouch *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__copy_ptrs@PAUDenyTouch@Touch@Feel@@PAU123@@priv@stlp_std@@YAPAUDenyTouch@Touch@Feel@@PAU234@00ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__copy_ptrs@PAUDenyTouch@Touch@Feel@@PAU123@@priv@stlp_std@@YAPAUDenyTouch@Touch@Feel@@PAU234@00ABU__true_type@1@@Z PROC ; stlp_std::priv::__copy_ptrs<Feel::Touch::DenyTouch *,Feel::Touch::DenyTouch *>, COMDAT
; ___first$ = edx
; ___last$ = ecx
; ___result$ = eax

; 255  :   // we know they all pointers, so this cast is OK
; 256  :   //  return (_OutputIter)__copy_trivial(&(*__first), &(*__last), &(*__result));
; 257  :   return (_OutputIter)__copy_trivial(__first, __last, __result);

	sub	ecx, edx
	push	esi
	mov	esi, ecx
	je	SHORT $LN6@copy_ptrs@14
	push	esi
	push	edx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN6@copy_ptrs@14:
	pop	esi

; 258  : }

	ret	0
??$__copy_ptrs@PAUDenyTouch@Touch@Feel@@PAU123@@priv@stlp_std@@YAPAUDenyTouch@Touch@Feel@@PAU234@00ABU__true_type@1@@Z ENDP ; stlp_std::priv::__copy_ptrs<Feel::Touch::DenyTouch *,Feel::Touch::DenyTouch *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$_Copy_Construct@UDenyTouch@Touch@Feel@@@stlp_std@@YAXPAUDenyTouch@Touch@Feel@@ABU123@@Z
_TEXT	SEGMENT
??$_Copy_Construct@UDenyTouch@Touch@Feel@@@stlp_std@@YAXPAUDenyTouch@Touch@Feel@@ABU123@@Z PROC ; stlp_std::_Copy_Construct<Feel::Touch::DenyTouch>, COMDAT
; ___p$ = eax
; ___val$ = ecx

; 110  : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 111  :   memset((char*)__p, _STLP_SHRED_BYTE, sizeof(_Tp));
; 112  : #endif
; 113  :   _STLP_PLACEMENT_NEW (__p) _Tp(__val);

	test	eax, eax
	je	SHORT $LN3@Copy_Const@9
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
$LN3@Copy_Const@9:

; 114  : }

	ret	0
??$_Copy_Construct@UDenyTouch@Touch@Feel@@@stlp_std@@YAXPAUDenyTouch@Touch@Feel@@ABU123@@Z ENDP ; stlp_std::_Copy_Construct<Feel::Touch::DenyTouch>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_uninitialized.h
_TEXT	ENDS
;	COMDAT ??$__ucopy_ptrs@PBUDenyTouch@Touch@Feel@@PAU123@@priv@stlp_std@@YAPAUDenyTouch@Touch@Feel@@PBU234@0PAU234@ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__ucopy_ptrs@PBUDenyTouch@Touch@Feel@@PAU123@@priv@stlp_std@@YAPAUDenyTouch@Touch@Feel@@PBU234@0PAU234@ABU__true_type@1@@Z PROC ; stlp_std::priv::__ucopy_ptrs<Feel::Touch::DenyTouch const *,Feel::Touch::DenyTouch *>, COMDAT
; ___first$ = ecx
; ___last$ = edx
; ___result$ = eax

; 117  :                                 const __true_type& /*TrivialUCopy*/) {

	push	esi
	mov	esi, edx

; 118  :   // we know they all pointers, so this cast is OK
; 119  :   //  return (_OutputIter)__copy_trivial(&(*__first), &(*__last), &(*__result));
; 120  :   return (_OutputIter)__ucopy_trivial(__first, __last, __result);

	cmp	esi, ecx
	je	SHORT $LN6@ucopy_ptrs@9
	sub	esi, ecx
	push	esi
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN6@ucopy_ptrs@9:
	pop	esi

; 121  : }

	ret	0
??$__ucopy_ptrs@PBUDenyTouch@Touch@Feel@@PAU123@@priv@stlp_std@@YAPAUDenyTouch@Touch@Feel@@PBU234@0PAU234@ABU__true_type@1@@Z ENDP ; stlp_std::priv::__ucopy_ptrs<Feel::Touch::DenyTouch const *,Feel::Touch::DenyTouch *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$_Destroy_Range@V?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@0@0@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$_Destroy_Range@V?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@0@0@Z PROC ; stlp_std::_Destroy_Range<stlp_std::reverse_iterator<Feel::Touch::DenyTouch *> >, COMDAT

; 181  :   __destroy_range(__first, __last, _STLP_VALUE_TYPE(__first, _ForwardIterator));
; 182  : }

	ret	0
??$_Destroy_Range@V?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@0@0@Z ENDP ; stlp_std::_Destroy_Range<stlp_std::reverse_iterator<Feel::Touch::DenyTouch *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_alloc.h
_TEXT	ENDS
;	COMDAT ??0?$_STLP_alloc_proxy@PAUDenyTouch@Touch@Feel@@U123@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@ABV?$xalloc@UDenyTouch@Touch@Feel@@@@PAUDenyTouch@Touch@Feel@@@Z
_TEXT	SEGMENT
??0?$_STLP_alloc_proxy@PAUDenyTouch@Touch@Feel@@U123@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@ABV?$xalloc@UDenyTouch@Touch@Feel@@@@PAUDenyTouch@Touch@Feel@@@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<Feel::Touch::DenyTouch *,Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_STLP_alloc_proxy<Feel::Touch::DenyTouch *,Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >, COMDAT
; _this$ = eax

; 571  :     _MaybeReboundAlloc(__a), _M_data(__p) {}

	mov	DWORD PTR [eax], 0
	ret	0
??0?$_STLP_alloc_proxy@PAUDenyTouch@Touch@Feel@@U123@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@ABV?$xalloc@UDenyTouch@Touch@Feel@@@@PAUDenyTouch@Touch@Feel@@@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<Feel::Touch::DenyTouch *,Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_STLP_alloc_proxy<Feel::Touch::DenyTouch *,Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ??0?$_Vector_base@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@ABV?$xalloc@UDenyTouch@Touch@Feel@@@@@Z
_TEXT	SEGMENT
??0?$_Vector_base@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@ABV?$xalloc@UDenyTouch@Touch@Feel@@@@@Z PROC ; stlp_std::priv::_Vector_base<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_Vector_base<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >, COMDAT
; _this$ = eax

; 67   :     : _M_start(0), _M_finish(0), _M_end_of_storage(__a, 0) {}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$_Vector_base@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@ABV?$xalloc@UDenyTouch@Touch@Feel@@@@@Z ENDP ; stlp_std::priv::_Vector_base<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_Vector_base<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Vector_base@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@IABV?$xalloc@UDenyTouch@Touch@Feel@@@@@Z
_TEXT	SEGMENT
??0?$_Vector_base@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@IABV?$xalloc@UDenyTouch@Touch@Feel@@@@@Z PROC ; stlp_std::priv::_Vector_base<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_Vector_base<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >, COMDAT
; _this$ = esi
; ___n$ = ecx

; 70   :     : _M_start(0), _M_finish(0), _M_end_of_storage(__a, 0) {

	push	edi

; 71   :     _M_start = _M_end_of_storage.allocate(__n, __n);

	mov	edi, ecx
	xor	eax, eax
	add	edi, edi
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	add	edi, edi
	mov	DWORD PTR [esi+8], eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	edi, edi
	push	edi
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 72   :     _M_finish = _M_start;
; 73   :     _M_end_of_storage._M_data = _M_start + __n;

	add	edi, eax
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], edi

; 74   :     _STLP_MPWFIX_TRY _STLP_MPWFIX_CATCH
; 75   :   }

	mov	eax, esi
	pop	edi
	ret	0
??0?$_Vector_base@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@IABV?$xalloc@UDenyTouch@Touch@Feel@@@@@Z ENDP ; stlp_std::priv::_Vector_base<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_Vector_base<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_erase@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@AAEPAUDenyTouch@Touch@Feel@@PAU456@ABU__false_type@3@@Z
_TEXT	SEGMENT
?_M_erase@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@AAEPAUDenyTouch@Touch@Feel@@PAU456@ABU__false_type@3@@Z PROC ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_M_erase, COMDAT
; _this$ = esi
; ___pos$ = edi

; 549  :     if (__pos + 1 != end())

	mov	eax, DWORD PTR [esi+4]
	lea	ecx, DWORD PTR [edi+8]
	cmp	ecx, eax
	je	SHORT $LN13@M_erase@11

; 550  :       _STLP_PRIV __copy_ptrs(__pos + 1, this->_M_finish, __pos, _TrivialCopy());

	sub	eax, ecx
	je	SHORT $LN13@M_erase@11
	push	eax
	push	ecx
	push	edi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN13@M_erase@11:

; 551  :     --this->_M_finish;

	add	DWORD PTR [esi+4], -8			; fffffff8H

; 552  :     _STLP_STD::_Destroy(this->_M_finish);
; 553  :     return __pos;

	mov	eax, edi

; 554  :   }

	ret	0
?_M_erase@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@AAEPAUDenyTouch@Touch@Feel@@PAU456@ABU__false_type@3@@Z ENDP ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_M_erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@ABV?$xalloc@UDenyTouch@Touch@Feel@@@@@Z
_TEXT	SEGMENT
??0?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@ABV?$xalloc@UDenyTouch@Touch@Feel@@@@@Z PROC ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >, COMDAT
; _this$ = eax

; 208  :     : _STLP_PRIV _Vector_base<_Tp, _Alloc>(__a) {}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@ABV?$xalloc@UDenyTouch@Touch@Feel@@@@@Z ENDP ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?erase@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@PAU456@@Z
_TEXT	SEGMENT
?erase@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@PAU456@@Z PROC ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::erase, COMDAT
; _this$ = esi
; ___pos$ = edi

; 587  :     return _M_erase(__pos, _Movable());

	mov	eax, DWORD PTR [esi+4]
	lea	ecx, DWORD PTR [edi+8]
	cmp	ecx, eax
	je	SHORT $LN15@erase@11
	sub	eax, ecx
	je	SHORT $LN15@erase@11
	push	eax
	push	ecx
	push	edi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN15@erase@11:
	add	DWORD PTR [esi+4], -8			; fffffff8H
	mov	eax, edi

; 588  :   }

	ret	0
?erase@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@PAU456@@Z ENDP ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@ABV012@@Z
_TEXT	SEGMENT
??0?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@ABV012@@Z PROC ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >, COMDAT
; _this$ = esi
; ___x$ = eax

; 236  :   { this->_M_finish = _STLP_PRIV __ucopy_ptrs(__x.begin(), __x.end(), this->_M_start, _TrivialUCopy()); }

	push	ebx
	push	edi
	mov	edi, eax
	mov	eax, DWORD PTR [edi+4]
	sub	eax, DWORD PTR [edi]
	xor	ecx, ecx
	sar	eax, 3
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], ecx
	lea	ebx, DWORD PTR [eax*8]
	mov	DWORD PTR [esi+8], ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	ebx
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	add	ebx, eax
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], ebx
	mov	ebx, DWORD PTR [edi+4]
	mov	edi, DWORD PTR [edi]
	cmp	ebx, edi
	je	SHORT $LN35@Impl_vecto@8
	sub	ebx, edi
	push	ebx
	push	edi
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, ebx
$LN35@Impl_vecto@8:
	pop	edi
	mov	DWORD PTR [esi+4], eax
	mov	eax, esi
	pop	ebx
	ret	0
??0?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@ABV012@@Z ENDP ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?rend@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@3@XZ
_TEXT	SEGMENT
?rend@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@3@XZ PROC ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::rend, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 177  :   reverse_iterator rend()                { return reverse_iterator(begin()); }

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	ret	0
?rend@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@3@XZ ENDP ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::rend
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?rbegin@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@3@XZ
_TEXT	SEGMENT
?rbegin@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@3@XZ PROC ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::rbegin, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 175  :   reverse_iterator rbegin()              { return reverse_iterator(end()); }

	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
	ret	0
?rbegin@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUDenyTouch@Touch@Feel@@@3@XZ ENDP ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::rbegin
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@XZ PROC ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::~_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >, COMDAT
; _this$ = eax

; 286  :   ~vector() { _STLP_STD::_Destroy_Range(rbegin(), rend()); }

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN34@Impl_vecto@9
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN34@Impl_vecto@9:
	ret	0
??1?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@XZ ENDP ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::~_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?erase@?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@PAU345@@Z
_TEXT	SEGMENT
?erase@?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@PAU345@@Z PROC ; stlp_std::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::erase, COMDAT
; _this$ = esi
; ___pos$ = edi

; 206  :   {return cast_traits::to_value_type_ptr(_M_impl.erase(cast_traits::to_storage_type_ptr(__pos)));}

	mov	eax, DWORD PTR [esi+4]
	lea	ecx, DWORD PTR [edi+8]
	cmp	ecx, eax
	je	SHORT $LN21@erase@12
	sub	eax, ecx
	je	SHORT $LN21@erase@12
	push	eax
	push	ecx
	push	edi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN21@erase@12:
	add	DWORD PTR [esi+4], -8			; fffffff8H
	mov	eax, edi
	ret	0
?erase@?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAEPAUDenyTouch@Touch@Feel@@PAU345@@Z ENDP ; stlp_std::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAE@ABV01@@Z PROC ; stlp_std::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >, COMDAT
; _this$ = ecx
; ___x$ = eax

; 123  :   vector(const _Self& __x)

	push	esi
	mov	esi, ecx
	call	??0?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >
	mov	eax, esi
	pop	esi
	ret	0
??0?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAE@ABV01@@Z ENDP ; stlp_std::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAE@XZ PROC ; stlp_std::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::~vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >, COMDAT
; _this$ = eax
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN36@vector@9
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN36@vector@9:
	ret	0
??1?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAE@XZ ENDP ; stlp_std::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::~vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$xr_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@@QAE@XZ
_TEXT	SEGMENT
??1?$xr_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@@QAE@XZ PROC ; xr_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::~xr_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >, COMDAT
; _this$ = eax
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN38@xr_vector@6
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN38@xr_vector@6:
	ret	0
??1?$xr_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@@QAE@XZ ENDP ; xr_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::~xr_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$xr_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xr_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@@QAE@ABV0@@Z PROC ; xr_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::xr_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >, COMDAT
; _this$ = ecx
; ___that$ = eax
	push	esi
	mov	esi, ecx
	call	??0?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >
	mov	eax, esi
	pop	esi
	ret	0
??0?$xr_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@@QAE@ABV0@@Z ENDP ; xr_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::xr_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_uninitialized.h
;	COMDAT ??$__ucopy_aux@PBUDenyTouch@Touch@Feel@@PAU123@@priv@stlp_std@@YAPAUDenyTouch@Touch@Feel@@PBU234@0PAU234@ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__ucopy_aux@PBUDenyTouch@Touch@Feel@@PAU123@@priv@stlp_std@@YAPAUDenyTouch@Touch@Feel@@PBU234@0PAU234@ABU__true_type@1@@Z PROC ; stlp_std::priv::__ucopy_aux<Feel::Touch::DenyTouch const *,Feel::Touch::DenyTouch *>, COMDAT
; ___first$ = ecx
; ___last$ = edx
; ___result$ = eax

; 125  :                                const __true_type& /*BothPtrType*/) {

	push	esi
	mov	esi, edx

; 126  :   return __ucopy_ptrs(__first, __last, __result,
; 127  :                       _UseTrivialUCopy(_STLP_VALUE_TYPE(__first, _InputIter),
; 128  :                                        _STLP_VALUE_TYPE(__result, _OutputIter))._Answer());

	cmp	esi, ecx
	je	SHORT $LN12@ucopy_aux@8
	sub	esi, ecx
	push	esi
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN12@ucopy_aux@8:
	pop	esi

; 129  : }

	ret	0
??$__ucopy_aux@PBUDenyTouch@Touch@Feel@@PAU123@@priv@stlp_std@@YAPAUDenyTouch@Touch@Feel@@PBU234@0PAU234@ABU__true_type@1@@Z ENDP ; stlp_std::priv::__ucopy_aux<Feel::Touch::DenyTouch const *,Feel::Touch::DenyTouch *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$uninitialized_copy@PBUDenyTouch@Touch@Feel@@PAU123@@stlp_std@@YAPAUDenyTouch@Touch@Feel@@PBU123@0PAU123@@Z
_TEXT	SEGMENT
??$uninitialized_copy@PBUDenyTouch@Touch@Feel@@PAU123@@stlp_std@@YAPAUDenyTouch@Touch@Feel@@PBU123@0PAU123@@Z PROC ; stlp_std::uninitialized_copy<Feel::Touch::DenyTouch const *,Feel::Touch::DenyTouch *>, COMDAT
; ___first$ = ecx
; ___last$ = edx
; ___result$ = eax

; 144  : { return _STLP_PRIV __ucopy_aux(__first, __last, __result, _BothPtrType< _InputIter, _ForwardIter>::_Answer()); }

	push	esi
	mov	esi, edx
	cmp	esi, ecx
	je	SHORT $LN16@uninitiali@15
	sub	esi, ecx
	push	esi
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN16@uninitiali@15:
	pop	esi
	ret	0
??$uninitialized_copy@PBUDenyTouch@Touch@Feel@@PAU123@@stlp_std@@YAPAUDenyTouch@Touch@Feel@@PBU123@0PAU123@@Z ENDP ; stlp_std::uninitialized_copy<Feel::Touch::DenyTouch const *,Feel::Touch::DenyTouch *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\fastdelegate.h
_TEXT	ENDS
;	COMDAT ??$?0VTouch@Feel@@V01@@?$FastDelegate1@PAVCObject@@X@fastdelegate@@QAE@PAVTouch@Feel@@P823@AGXPAVCObject@@@Z@Z
_TEXT	SEGMENT
_pthis$ = 8						; size = 4
??$?0VTouch@Feel@@V01@@?$FastDelegate1@PAVCObject@@X@fastdelegate@@QAE@PAVTouch@Feel@@P823@AGXPAVCObject@@@Z@Z PROC ; fastdelegate::FastDelegate1<CObject *,void>::FastDelegate1<CObject *,void><Feel::Touch,Feel::Touch>, COMDAT
; _this$ = esi

; 976  : 		FastDelegate1(Y *pthis, DesiredRetType (xr_stdcall X::* function_to_bind)(Param1 p1) ) {

	mov	ecx, esi
	call	??0?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AGXPAVCObject@@@ZP6GX0@ZP6GX0@Z@detail@fastdelegate@@QAE@XZ

; 977  : 			m_Closure.bindmemfunc(detail::implicit_cast<X*>(pthis), function_to_bind); }

	mov	eax, DWORD PTR _pthis$[esp-4]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], OFFSET ?feel_touch_relcase@Touch@Feel@@QAGXPAVCObject@@@Z ; Feel::Touch::feel_touch_relcase
	mov	eax, esi
	ret	4
??$?0VTouch@Feel@@V01@@?$FastDelegate1@PAVCObject@@X@fastdelegate@@QAE@PAVTouch@Feel@@P823@AGXPAVCObject@@@Z@Z ENDP ; fastdelegate::FastDelegate1<CObject *,void>::FastDelegate1<CObject *,void><Feel::Touch,Feel::Touch>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ??$_M_allocate_and_copy@PBUDenyTouch@Touch@Feel@@@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@AAEPAUDenyTouch@Touch@Feel@@AAIPBU345@1@Z
_TEXT	SEGMENT
??$_M_allocate_and_copy@PBUDenyTouch@Touch@Feel@@@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@AAEPAUDenyTouch@Touch@Feel@@AAIPBU345@1@Z PROC ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_M_allocate_and_copy<Feel::Touch::DenyTouch const *>, COMDAT
; ___n$ = eax
; ___first$ = ebx
; ___last$ = ecx

; 634  :                                _ForwardIterator __first, _ForwardIterator __last)
; 635  : #else /* _STLP_MEMBER_TEMPLATES */
; 636  :   pointer _M_allocate_and_copy(size_type& __n,
; 637  :                                const_pointer __first, const_pointer __last)
; 638  : #endif /* _STLP_MEMBER_TEMPLATES */
; 639  :   {
; 640  :     pointer __result = this->_M_end_of_storage.allocate(__n, __n);

	mov	eax, DWORD PTR [eax]
	push	esi
	mov	esi, ecx
	lea	ecx, DWORD PTR [eax*8]
	push	edi
	push	ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 641  :     _STLP_TRY {
; 642  :       uninitialized_copy(__first, __last, __result);

	cmp	esi, ebx
	mov	edi, eax
	je	SHORT $LN28@M_allocate@8
	sub	esi, ebx
	push	esi
	push	ebx
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH

; 643  :       return __result;

	mov	eax, edi
$LN28@M_allocate@8:
	pop	edi
	pop	esi

; 644  :     }
; 645  :     _STLP_UNWIND(this->_M_end_of_storage.deallocate(__result, __n))
; 646  :     _STLP_RET_AFTER_THROW(__result)
; 647  :   }

	ret	0
??$_M_allocate_and_copy@PBUDenyTouch@Touch@Feel@@@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@AAEPAUDenyTouch@Touch@Feel@@AAIPBU345@1@Z ENDP ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_M_allocate_and_copy<Feel::Touch::DenyTouch const *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_clear@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@AAEXXZ
_TEXT	SEGMENT
?_M_clear@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@AAEXXZ PROC ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_M_clear, COMDAT
; _this$ = eax

; 616  :     _STLP_STD::_Destroy_Range(rbegin(), rend());
; 617  :     this->_M_end_of_storage.deallocate(this->_M_start, this->_M_end_of_storage._M_data - this->_M_start);

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN31@M_clear@7
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN31@M_clear@7:

; 618  :   }

	ret	0
?_M_clear@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@AAEXXZ ENDP ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_M_clear
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.c
_TEXT	ENDS
;	COMDAT ??4?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z
_TEXT	SEGMENT
___result$297927 = 8					; size = 4
___x$ = 8						; size = 4
??4?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z PROC ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::operator=, COMDAT
; _this$ = ebx

; 178  :   if (&__x != this) {

	mov	ecx, DWORD PTR ___x$[esp-4]
	cmp	ecx, ebx
	push	ebp
	push	esi
	push	edi
	je	$LN97@operator@47

; 179  :     const size_type __xlen = __x.size();

	mov	edi, DWORD PTR [ecx+4]
	mov	esi, DWORD PTR [ecx]

; 180  :     if (__xlen > capacity()) {

	mov	edx, DWORD PTR [ebx]
	mov	eax, DWORD PTR [ebx+8]
	mov	ebp, edi
	sub	ebp, esi
	sub	eax, edx
	sar	ebp, 3
	sar	eax, 3
	cmp	ebp, eax
	jbe	SHORT $LN4@operator@47

; 181  :       size_type __len = __xlen;
; 182  :       pointer __tmp = _M_allocate_and_copy(__len, __CONST_CAST(const_pointer, __x._M_start) + 0,
; 183  :                                                   __CONST_CAST(const_pointer, __x._M_finish) + 0);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	lea	eax, DWORD PTR [ebp*8]
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	cmp	edi, esi
	mov	DWORD PTR ___result$297927[esp+8], eax
	je	SHORT $LN39@operator@47
	sub	edi, esi
	push	edi
	push	esi
	push	eax
	call	_memcpy
	mov	eax, DWORD PTR ___result$297927[esp+20]
	add	esp, 12					; 0000000cH
$LN39@operator@47:

; 184  :       _M_clear();

	mov	ecx, DWORD PTR [ebx]
	test	ecx, ecx
	je	SHORT $LN70@operator@47
	push	ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	eax, DWORD PTR ___result$297927[esp+8]
$LN70@operator@47:

; 185  :       this->_M_start = __tmp;
; 186  :       this->_M_end_of_storage._M_data = this->_M_start + __len;

	lea	ecx, DWORD PTR [eax+ebp*8]

; 196  :     }
; 197  :     this->_M_finish = this->_M_start + __xlen;

	mov	edx, eax
	mov	DWORD PTR [ebx], eax
	lea	eax, DWORD PTR [edx+ebp*8]
	mov	DWORD PTR [ebx+4], eax
	mov	DWORD PTR [ebx+8], ecx

; 198  :   }
; 199  :   return *this;

	mov	eax, ebx

; 200  : }

	pop	edi
	pop	esi
	pop	ebp
	ret	4
$LN4@operator@47:

; 187  :     } else if (size() >= __xlen) {

	mov	eax, DWORD PTR [ebx+4]
	sub	eax, edx
	sar	eax, 3
	cmp	eax, ebp
	jb	SHORT $LN2@operator@47

; 188  :       pointer __i = _STLP_PRIV __copy_ptrs(__CONST_CAST(const_pointer, __x._M_start) + 0,
; 189  :                                            __CONST_CAST(const_pointer, __x._M_finish) + 0, this->_M_start, _TrivialCopy());

	sub	edi, esi
	je	SHORT $LN96@operator@47
	push	edi
	push	esi
	push	edx
	call	DWORD PTR __imp__memmove

; 196  :     }
; 197  :     this->_M_finish = this->_M_start + __xlen;

	mov	edx, DWORD PTR [ebx]
	lea	eax, DWORD PTR [edx+ebp*8]
	mov	DWORD PTR [ebx+4], eax
	add	esp, 12					; 0000000cH

; 198  :   }
; 199  :   return *this;

	mov	eax, ebx

; 200  : }

	pop	edi
	pop	esi
	pop	ebp
	ret	4
$LN2@operator@47:

; 190  :       _STLP_STD::_Destroy_Range(__i, this->_M_finish);
; 191  :     } else {
; 192  :       _STLP_PRIV __copy_ptrs(__CONST_CAST(const_pointer, __x._M_start),
; 193  :                              __CONST_CAST(const_pointer, __x._M_start) + size(), this->_M_start, _TrivialCopy());

	add	eax, eax
	add	eax, eax
	add	eax, eax
	sub	eax, esi
	add	eax, esi
	je	SHORT $LN87@operator@47
	push	eax
	push	esi
	push	edx
	call	DWORD PTR __imp__memmove
	mov	ecx, DWORD PTR ___x$[esp+20]
	add	esp, 12					; 0000000cH
$LN87@operator@47:

; 194  :       _STLP_PRIV __ucopy_ptrs(__CONST_CAST(const_pointer, __x._M_start) + size(),
; 195  :                               __CONST_CAST(const_pointer, __x._M_finish) + 0, this->_M_finish, _TrivialUCopy());

	mov	edx, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, edx
	sub	esi, DWORD PTR [ebx]
	sar	esi, 3
	lea	ecx, DWORD PTR [ecx+esi*8]
	cmp	eax, ecx
	je	SHORT $LN96@operator@47
	sub	eax, ecx
	push	eax
	push	ecx
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN96@operator@47:

; 196  :     }
; 197  :     this->_M_finish = this->_M_start + __xlen;

	mov	edx, DWORD PTR [ebx]
	lea	eax, DWORD PTR [edx+ebp*8]
	mov	DWORD PTR [ebx+4], eax
$LN97@operator@47:

; 200  : }

	pop	edi
	pop	esi
	mov	eax, ebx
	pop	ebp
	ret	4
??4?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ENDP ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_insert_overflow@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@AAEXPAUDenyTouch@Touch@Feel@@ABU456@ABU__true_type@3@I_N@Z
_TEXT	SEGMENT
___old_size$ = -12					; size = 4
___fill_len$ = -8					; size = 4
tv298 = -4						; size = 4
?_M_insert_overflow@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@AAEXPAUDenyTouch@Touch@Feel@@ABU456@ABU__true_type@3@I_N@Z PROC ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_M_insert_overflow, COMDAT
; _this$ = edi
; ___pos$ = eax
; ___x$ = ebx

; 109  :                                              size_type __fill_len, bool __atend ) {

	sub	esp, 12					; 0000000cH
	push	ebp
	push	esi
	mov	esi, eax

; 110  :   const size_type __old_size = size();

	mov	eax, DWORD PTR [edi+4]
	sub	eax, DWORD PTR [edi]

; 111  :   size_type __len = __old_size + (max)(__old_size, __fill_len);

	lea	ecx, DWORD PTR ___fill_len$[esp+20]
	push	ecx
	lea	edx, DWORD PTR ___old_size$[esp+24]
	sar	eax, 3
	push	edx
	mov	DWORD PTR ___fill_len$[esp+28], 1
	mov	DWORD PTR ___old_size$[esp+28], eax
	call	??$max@I@stlp_std@@YAABIABI0@Z		; stlp_std::max<unsigned int>
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR ___old_size$[esp+28]

; 112  : 
; 113  :   pointer __new_start = this->_M_end_of_storage.allocate(__len, __len);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	eax, eax
	add	eax, eax
	add	eax, eax
	add	esp, 8
	push	eax
	mov	DWORD PTR tv298[esp+24], eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	mov	ebp, eax

; 114  :   pointer __new_finish = __STATIC_CAST(pointer, _STLP_PRIV __copy_trivial(this->_M_start, __pos, __new_start));

	mov	eax, DWORD PTR [edi]
	sub	esi, eax
	je	SHORT $LN22@M_insert_o@4
	push	esi
	push	eax
	push	ebp
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
	jmp	SHORT $LN23@M_insert_o@4
$LN22@M_insert_o@4:
	mov	eax, ebp
$LN23@M_insert_o@4:

; 115  :   // handle insertion
; 116  :   __new_finish = _STLP_PRIV __fill_n(__new_finish, __fill_len, __x);

	mov	ecx, DWORD PTR ___fill_len$[esp+20]
	test	ecx, ecx
	mov	esi, eax
	jbe	SHORT $LN24@M_insert_o@4
	npad	2
$LL26@M_insert_o@4:
	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi], eax
	mov	edx, DWORD PTR [ebx+4]
	mov	DWORD PTR [esi+4], edx
	sub	ecx, 1
	add	esi, 8
	test	ecx, ecx
	ja	SHORT $LL26@M_insert_o@4
$LN24@M_insert_o@4:

; 117  :   if (!__atend)
; 118  :     __new_finish = __STATIC_CAST(pointer, _STLP_PRIV __copy_trivial(__pos, this->_M_finish, __new_finish)); // copy remainder
; 119  :   _M_clear();

	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN63@M_insert_o@4
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN63@M_insert_o@4:

; 120  :   _M_set(__new_start, __new_finish, __new_start + __len);

	mov	eax, DWORD PTR tv298[esp+20]
	mov	DWORD PTR [edi+4], esi
	add	eax, ebp

; 121  : }

	pop	esi
	mov	DWORD PTR [edi], ebp
	mov	DWORD PTR [edi+8], eax
	pop	ebp
	add	esp, 12					; 0000000cH
	ret	0
?_M_insert_overflow@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@AAEXPAUDenyTouch@Touch@Feel@@ABU456@ABU__true_type@3@I_N@Z ENDP ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_M_insert_overflow
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?push_back@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEXABUDenyTouch@Touch@Feel@@@Z
_TEXT	SEGMENT
?push_back@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEXABUDenyTouch@Touch@Feel@@@Z PROC ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::push_back, COMDAT
; _this$ = ecx
; ___x$ = eax

; 360  :   void push_back(const _Tp& __x) {

	push	ebx
	push	edi
	mov	edi, ecx
	mov	ebx, eax

; 361  : #endif /*!_STLP_DONT_SUP_DFLT_PARAM && !_STLP_NO_ANACHRONISMS*/
; 362  :     if (this->_M_finish != this->_M_end_of_storage._M_data) {

	mov	eax, DWORD PTR [edi+4]
	cmp	eax, DWORD PTR [edi+8]
	je	SHORT $LN2@push_back@11

; 363  :       _Copy_Construct(this->_M_finish, __x);

	test	eax, eax
	je	SHORT $LN7@push_back@11
	mov	ecx, DWORD PTR [ebx]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [ebx+4]
	mov	DWORD PTR [eax+4], edx
$LN7@push_back@11:

; 364  :       ++this->_M_finish;

	add	DWORD PTR [edi+4], 8
	pop	edi
	pop	ebx

; 368  :   }

	ret	0
$LN2@push_back@11:

; 365  :     }
; 366  :     else
; 367  :       _M_insert_overflow(this->_M_finish, __x, _TrivialCopy(), 1UL, true);

	call	?_M_insert_overflow@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@AAEXPAUDenyTouch@Touch@Feel@@ABU456@ABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_M_insert_overflow
	pop	edi
	pop	ebx

; 368  :   }

	ret	0
?push_back@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEXABUDenyTouch@Touch@Feel@@@Z ENDP ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::push_back
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ??0?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAE@ABV?$xalloc@UDenyTouch@Touch@Feel@@@@@Z
_TEXT	SEGMENT
??0?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAE@ABV?$xalloc@UDenyTouch@Touch@Feel@@@@@Z PROC ; stlp_std::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >, COMDAT
; _this$ = eax

; 106  :   explicit vector(const allocator_type& __a = allocator_type())

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAE@ABV?$xalloc@UDenyTouch@Touch@Feel@@@@@Z ENDP ; stlp_std::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?push_back@?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAEXABUDenyTouch@Touch@Feel@@@Z
_TEXT	SEGMENT
?push_back@?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAEXABUDenyTouch@Touch@Feel@@@Z PROC ; stlp_std::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::push_back, COMDAT
; _this$ = ecx
; ___x$ = eax

; 171  :   { _M_impl.push_back(cast_traits::to_storage_type_cref(__x)); }

	push	ebx
	push	edi
	mov	edi, ecx
	mov	ebx, eax
	mov	eax, DWORD PTR [edi+4]
	cmp	eax, DWORD PTR [edi+8]
	je	SHORT $LN6@push_back@12
	test	eax, eax
	je	SHORT $LN11@push_back@12
	mov	ecx, DWORD PTR [ebx]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [ebx+4]
	mov	DWORD PTR [eax+4], edx
$LN11@push_back@12:
	add	DWORD PTR [edi+4], 8
	pop	edi
	pop	ebx
	ret	0
$LN6@push_back@12:
	call	?_M_insert_overflow@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@AAEXPAUDenyTouch@Touch@Feel@@ABU456@ABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_M_insert_overflow
	pop	edi
	pop	ebx
	ret	0
?push_back@?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAEXABUDenyTouch@Touch@Feel@@@Z ENDP ; stlp_std::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::push_back
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
??4?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAEAAV01@ABV01@@Z PROC ; stlp_std::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::operator=, COMDAT
; _this$ = ecx
; ___x$ = eax

; 149  :   _Self& operator=(const _Self& __x) { _M_impl = __x._M_impl; return *this; }

	push	ebx
	mov	ebx, ecx
	push	eax
	call	??4?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::operator=
	mov	eax, ebx
	pop	ebx
	ret	0
??4?$vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@stlp_std@@QAEAAV01@ABV01@@Z ENDP ; stlp_std::vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::operator=
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xr_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xr_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@@QAE@XZ PROC ; xr_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::xr_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >, COMDAT
; _this$ = eax

; 123  : 			xr_vector			()									: inherited	()					{}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$xr_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@@QAE@XZ ENDP ; xr_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::xr_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\feel_touch.cpp
_TEXT	ENDS
;	COMDAT ?feel_touch_deny@Touch@Feel@@UAEXPAVCObject@@K@Z
_TEXT	SEGMENT
_D$ = -8						; size = 8
_O$ = 8							; size = 4
_T$ = 12						; size = 4
?feel_touch_deny@Touch@Feel@@UAEXPAVCObject@@K@Z PROC	; Feel::Touch::feel_touch_deny, COMDAT
; _this$ = ecx

; 21   : {

	sub	esp, 8

; 22   : 	DenyTouch						D;
; 23   : 	D.O								= O;
; 24   : 	D.Expire						= Device.dwTimeGlobal + T;

	mov	eax, DWORD PTR _T$[esp+4]
	mov	edx, DWORD PTR _O$[esp+4]
	push	esi
	mov	esi, DWORD PTR ?Device@@3VCRenderDevice@@A+40
	push	edi
	add	esi, eax

; 25   : 	feel_touch_disable.push_back	(D);

	mov	eax, DWORD PTR [ecx+12]
	cmp	eax, DWORD PTR [ecx+16]
	lea	edi, DWORD PTR [ecx+8]
	mov	DWORD PTR _D$[esp+16], edx
	mov	DWORD PTR _D$[esp+20], esi
	je	SHORT $LN8@feel_touch
	test	eax, eax
	je	SHORT $LN13@feel_touch
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], esi
$LN13@feel_touch:
	add	DWORD PTR [edi+4], 8
	pop	edi
	pop	esi

; 26   : }

	add	esp, 8
	ret	8

; 25   : 	feel_touch_disable.push_back	(D);

$LN8@feel_touch:
	push	ebx
	lea	ebx, DWORD PTR _D$[esp+20]
	call	?_M_insert_overflow@?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@AAEXPAUDenyTouch@Touch@Feel@@ABU456@ABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_M_insert_overflow
	pop	ebx
	pop	edi
	pop	esi

; 26   : }

	add	esp, 8
	ret	8
?feel_touch_deny@Touch@Feel@@UAEXPAVCObject@@K@Z ENDP	; Feel::Touch::feel_touch_deny
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$xr_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
??4?$xr_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@@QAEAAV0@ABV0@@Z PROC ; xr_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::operator=, COMDAT
; _this$ = ecx
; ___that$ = eax
	push	ebx
	mov	ebx, ecx
	push	eax
	call	??4?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::operator=
	mov	eax, ebx
	pop	ebx
	ret	0
??4?$xr_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@@QAEAAV0@ABV0@@Z ENDP ; xr_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::operator=
; Function compile flags: /Ogtpy
;	COMDAT ?feel_touch_relcase@Touch@Feel@@QAGXPAVCObject@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_O$ = 12						; size = 4
?feel_touch_relcase@Touch@Feel@@QAGXPAVCObject@@@Z PROC	; Feel::Touch::feel_touch_relcase, COMDAT

; 85   : {

	push	ebx

; 86   : 	xr_vector<CObject*>::iterator I = std::find (feel_touch.begin(),feel_touch.end(),O);

	mov	ebx, DWORD PTR _this$[esp]
	mov	eax, DWORD PTR [ebx+24]
	push	ebp
	push	esi
	push	edi
	push	eax
	call	?to_value_type_ptr@?$_CastTraits@PAXPAVCObject@@@priv@stlp_std@@SAPAPAVCObject@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,CObject *>::to_value_type_ptr
	lea	ebp, DWORD PTR [ebx+20]
	add	esp, 4
	mov	ecx, ebp
	mov	esi, eax
	call	?begin@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEPAPAVCObject@@XZ ; stlp_std::vector<CObject *,xalloc<CObject *> >::begin
	lea	edi, DWORD PTR _O$[esp+12]
	call	??$__find@PAPAVCObject@@PAV1@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@0ABQAV2@ABUrandom_access_iterator_tag@1@@Z ; stlp_std::priv::__find<CObject * *,CObject *>
	mov	esi, eax

; 87   : 	if (I!=feel_touch.end()){

	mov	eax, DWORD PTR [ebx+24]
	push	eax
	call	?to_value_type_ptr@?$_CastTraits@PAXPAVCObject@@@priv@stlp_std@@SAPAPAVCObject@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,CObject *>::to_value_type_ptr
	mov	edi, DWORD PTR _O$[esp+16]
	add	esp, 4
	cmp	esi, eax
	je	SHORT $LN5@feel_touch@2

; 88   : 		feel_touch.erase		(I);

	mov	eax, DWORD PTR [ebp+4]
	lea	ecx, DWORD PTR [esi+4]
	cmp	ecx, eax
	je	SHORT $LN51@feel_touch@2
	sub	eax, ecx
	je	SHORT $LN51@feel_touch@2
	push	eax
	push	ecx
	push	esi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN51@feel_touch@2:
	add	DWORD PTR [ebp+4], -4			; fffffffcH
	mov	ebp, DWORD PTR [ebp+4]
	push	ebp
	call	??$_Destroy@PAX@stlp_std@@YAXPAPAX@Z	; stlp_std::_Destroy<void *>
	push	esi
	call	?to_value_type_ptr@?$_CastTraits@PAXPAVCObject@@@priv@stlp_std@@SAPAPAVCObject@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,CObject *>::to_value_type_ptr

; 89   : 		feel_touch_delete		(O);

	mov	eax, DWORD PTR [ebx]
	mov	edx, DWORD PTR [eax+20]
	add	esp, 8
	push	edi
	mov	ecx, ebx
	call	edx
$LN5@feel_touch@2:

; 90   : 		}
; 91   : 	xr_vector<DenyTouch>::iterator Id=feel_touch_disable.begin(),IdE=feel_touch_disable.end();

	mov	eax, DWORD PTR [ebx+8]
	mov	ecx, DWORD PTR [ebx+12]

; 92   : 	for(;Id!=IdE;++Id)			if((*Id).O==O )	{ feel_touch_disable.erase(Id); break; }

	cmp	eax, ecx
	je	SHORT $LN2@feel_touch@2
$LL4@feel_touch@2:
	cmp	DWORD PTR [eax], edi
	je	SHORT $LN93@feel_touch@2
	add	eax, 8
	cmp	eax, ecx
	jne	SHORT $LL4@feel_touch@2
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 93   : }

	ret	8
$LN93@feel_touch@2:

; 92   : 	for(;Id!=IdE;++Id)			if((*Id).O==O )	{ feel_touch_disable.erase(Id); break; }

	lea	edx, DWORD PTR [eax+8]
	cmp	edx, ecx
	je	SHORT $LN88@feel_touch@2
	sub	ecx, edx
	je	SHORT $LN88@feel_touch@2
	push	ecx
	push	edx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN88@feel_touch@2:
	add	DWORD PTR [ebx+12], -8			; fffffff8H
$LN2@feel_touch@2:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 93   : }

	ret	8
?feel_touch_relcase@Touch@Feel@@QAGXPAVCObject@@@Z ENDP	; Feel::Touch::feel_touch_relcase
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\pure_relcase.h
;	COMDAT ??$?0VTouch@Feel@@@pure_relcase@@QAE@P8Touch@Feel@@AGXPAVCObject@@@Z@Z
_TEXT	SEGMENT
??$?0VTouch@Feel@@@pure_relcase@@QAE@P8Touch@Feel@@AGXPAVCObject@@@Z@Z PROC ; pure_relcase::pure_relcase<Feel::Touch>, COMDAT
; _this$ = edi

; 10   : 	{

	mov	DWORD PTR [edi], OFFSET ??_7pure_relcase@@6B@

; 11   : 		R_ASSERT				(g_pGameLevel);

	cmp	BYTE PTR ?ignore_always@?3???$?0VTouch@Feel@@@pure_relcase@@QAE@P8Touch@Feel@@AGXPAVCObject@@@Z@Z@4_NA, 0 ; `pure_relcase::pure_relcase<Feel::Touch>'::`4'::ignore_always
	push	esi
	jne	SHORT $LN3@pure_relca@3
	cmp	DWORD PTR ?g_pGameLevel@@3PAVIGame_Level@@A, 0 ; g_pGameLevel
	jne	SHORT $LN3@pure_relca@3
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?3???$?0VTouch@Feel@@@pure_relcase@@QAE@P8Touch@Feel@@AGXPAVCObject@@@Z@Z@4_NA ; `pure_relcase::pure_relcase<Feel::Touch>'::`4'::ignore_always
	push	OFFSET ??_C@_0BL@NIHABDJK@pure_relcase?3?3pure_relcase?$AA@
	push	11					; 0000000bH
	push	OFFSET ??_C@_0DD@CIHOJODM@d?3?2clearsky?2sources?2engine?2xreng@
	push	OFFSET ??_C@_0N@HGJAENOJ@g_pGameLevel?$AA@
	call	DWORD PTR __imp_?fail@xrDebug@@QAEXPBD0H0AA_N@Z
$LN3@pure_relca@3:

; 12   : 		class_type				*self = static_cast<class_type*>(this);
; 13   : 		g_pGameLevel->Objects.relcase_register	(
; 14   : 			CObjectList::RELCASE_CALLBACK (
; 15   : 				self,
; 16   : 				function_to_bind
; 17   : 			),
; 18   : 			&m_ID
; 19   : 		);

	lea	eax, DWORD PTR [edi+4]
	push	eax
	sub	esp, 8
	mov	esi, esp
	mov	ecx, esi
	call	??0?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AGXPAVCObject@@@ZP6GX0@ZP6GX0@Z@detail@fastdelegate@@QAE@XZ
	mov	DWORD PTR [esi+4], OFFSET ?feel_touch_relcase@Touch@Feel@@QAGXPAVCObject@@@Z ; Feel::Touch::feel_touch_relcase
	mov	DWORD PTR [esi], edi
	mov	ecx, DWORD PTR ?g_pGameLevel@@3PAVIGame_Level@@A ; g_pGameLevel
	add	ecx, 76					; 0000004cH
	call	?relcase_register@CObjectList@@QAEXV?$FastDelegate1@PAVCObject@@X@fastdelegate@@PAH@Z ; CObjectList::relcase_register

; 20   : 	}

	mov	eax, edi
	pop	esi
	ret	0
??$?0VTouch@Feel@@@pure_relcase@@QAE@P8Touch@Feel@@AGXPAVCObject@@@Z@Z ENDP ; pure_relcase::pure_relcase<Feel::Touch>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?reserve@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEXI@Z
_TEXT	SEGMENT
?reserve@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEXI@Z PROC ; stlp_std::vector<CObject *,xalloc<CObject *> >::reserve, COMDAT
; _this$ = ebx
; ___n$ = ecx

; 151  :   void reserve(size_type __n) {_M_impl.reserve(__n);}

	jmp	?reserve@?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAEXI@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::reserve
?reserve@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEXI@Z ENDP ; stlp_std::vector<CObject *,xalloc<CObject *> >::reserve
_TEXT	ENDS
PUBLIC	??1Touch@Feel@@UAE@XZ				; Feel::Touch::~Touch
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\feel_touch.cpp
;	COMDAT ??1Touch@Feel@@UAE@XZ
_TEXT	SEGMENT
??1Touch@Feel@@UAE@XZ PROC				; Feel::Touch::~Touch, COMDAT
; _this$ = ecx

; 12   : {

	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7Touch@Feel@@6B@

; 13   : }

	mov	eax, DWORD PTR [esi+32]
	test	eax, eax
	push	edi
	mov	edi, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	je	SHORT $LN40@Touch
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
$LN40@Touch:
	mov	eax, DWORD PTR [esi+20]
	test	eax, eax
	je	SHORT $LN80@Touch
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
$LN80@Touch:
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	SHORT $LN120@Touch
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
$LN120@Touch:
	mov	DWORD PTR [esi], OFFSET ??_7pure_relcase@@6B@
	mov	eax, DWORD PTR ?g_pGameLevel@@3PAVIGame_Level@@A ; g_pGameLevel
	test	eax, eax
	je	SHORT $LN123@Touch
	add	esi, 4
	push	esi
	lea	ecx, DWORD PTR [eax+76]
	call	?relcase_unregister@CObjectList@@QAEXPAH@Z ; CObjectList::relcase_unregister
$LN123@Touch:
	pop	edi
	pop	esi
	ret	0
??1Touch@Feel@@UAE@XZ ENDP				; Feel::Touch::~Touch
_TEXT	ENDS
PUBLIC	??0Touch@Feel@@QAE@XZ				; Feel::Touch::Touch
; Function compile flags: /Ogtpy
;	COMDAT ??0Touch@Feel@@QAE@XZ
_TEXT	SEGMENT
??0Touch@Feel@@QAE@XZ PROC				; Feel::Touch::Touch, COMDAT
; _this$ = ecx

; 8    : {

	push	edi
	mov	edi, ecx
	call	??$?0VTouch@Feel@@@pure_relcase@@QAE@P8Touch@Feel@@AGXPAVCObject@@@Z@Z ; pure_relcase::pure_relcase<Feel::Touch>
	xor	eax, eax
	mov	DWORD PTR [edi], OFFSET ??_7Touch@Feel@@6B@
	mov	DWORD PTR [edi+8], eax
	mov	DWORD PTR [edi+12], eax
	mov	DWORD PTR [edi+16], eax
	mov	DWORD PTR [edi+20], eax
	mov	DWORD PTR [edi+24], eax
	mov	DWORD PTR [edi+28], eax
	mov	DWORD PTR [edi+32], eax
	mov	DWORD PTR [edi+36], eax
	mov	DWORD PTR [edi+40], eax

; 9    : }

	mov	eax, edi
	pop	edi
	ret	0
??0Touch@Feel@@QAE@XZ ENDP				; Feel::Touch::Touch
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_ETouch@Feel@@UAEPAXI@Z
_TEXT	SEGMENT
$T443664 = -8						; size = 4
tv450 = -4						; size = 4
___flags$ = 8						; size = 4
??_ETouch@Feel@@UAEPAXI@Z PROC				; Feel::Touch::`vector deleting destructor', COMDAT
; _this$ = ecx
	sub	esp, 8
	test	BYTE PTR ___flags$[esp+4], 2
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, ecx
	je	$LN3@vector@83
	mov	eax, DWORD PTR [edi-4]
	lea	ebx, DWORD PTR [edi-4]
	mov	esi, eax
	imul	esi, 44					; 0000002cH
	add	esi, edi
	sub	eax, 1
	mov	DWORD PTR tv450[esp+24], ebx
	mov	DWORD PTR $T443664[esp+24], eax
	js	$LN6@vector@83
	npad	14
$LL7@vector@83:
	mov	edi, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	sub	esi, 44					; 0000002cH
	mov	DWORD PTR [esi], OFFSET ??_7Touch@Feel@@6B@
	mov	eax, DWORD PTR [esi+32]
	test	eax, eax
	je	SHORT $LN49@vector@83
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
$LN49@vector@83:
	mov	eax, DWORD PTR [esi+20]
	test	eax, eax
	je	SHORT $LN89@vector@83
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
$LN89@vector@83:
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	SHORT $LN129@vector@83
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
$LN129@vector@83:
	mov	DWORD PTR [esi], OFFSET ??_7pure_relcase@@6B@
	mov	edi, DWORD PTR ?g_pGameLevel@@3PAVIGame_Level@@A ; g_pGameLevel
	test	edi, edi
	je	SHORT $LN177@vector@83
	add	edi, 262280				; 00040088H
	mov	ecx, edi
	call	?end@?$_Impl_vector@USRelcasePair@CObjectList@@V?$xalloc@USRelcasePair@CObjectList@@@@@priv@stlp_std@@QAEPAUSRelcasePair@CObjectList@@XZ ; stlp_std::priv::_Impl_vector<CObjectList::SRelcasePair,xalloc<CObjectList::SRelcasePair> >::end
	mov	ebx, DWORD PTR [esi+4]
	mov	ebp, eax
	mov	ecx, edi
	sub	ebp, 12					; 0000000cH
	call	?begin@?$_Impl_vector@USRelcasePair@CObjectList@@V?$xalloc@USRelcasePair@CObjectList@@@@@priv@stlp_std@@QAEPAUSRelcasePair@CObjectList@@XZ ; stlp_std::priv::_Impl_vector<CObjectList::SRelcasePair,xalloc<CObjectList::SRelcasePair> >::begin
	lea	ecx, DWORD PTR [ebx+ebx*2]
	push	ebp
	lea	ecx, DWORD PTR [eax+ecx*4]
	call	??4SRelcasePair@CObjectList@@QAEAAU01@ABU01@@Z
	mov	ecx, edi
	call	?end@?$_Impl_vector@USRelcasePair@CObjectList@@V?$xalloc@USRelcasePair@CObjectList@@@@@priv@stlp_std@@QAEPAUSRelcasePair@CObjectList@@XZ ; stlp_std::priv::_Impl_vector<CObjectList::SRelcasePair,xalloc<CObjectList::SRelcasePair> >::end
	mov	edx, DWORD PTR [eax-12]
	mov	ebx, DWORD PTR tv450[esp+24]
	sub	eax, 12					; 0000000cH
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edx], eax
	add	DWORD PTR [edi+4], -12			; fffffff4H
$LN177@vector@83:
	sub	DWORD PTR $T443664[esp+24], 1
	jns	$LL7@vector@83
$LN6@vector@83:
	test	BYTE PTR ___flags$[esp+20], 1
	je	SHORT $LN181@vector@83
	test	ebx, ebx
	je	SHORT $LN181@vector@83
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	ebx
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN181@vector@83:
	mov	eax, ebx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	4
$LN3@vector@83:
	call	??1Touch@Feel@@UAE@XZ			; Feel::Touch::~Touch
	test	BYTE PTR ___flags$[esp+20], 1
	je	SHORT $LN186@vector@83
	test	edi, edi
	je	SHORT $LN186@vector@83
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN186@vector@83:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	4
??_ETouch@Feel@@UAEPAXI@Z ENDP				; Feel::Touch::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_GTouch@Feel@@UAEPAXI@Z			; Feel::Touch::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_GTouch@Feel@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GTouch@Feel@@UAEPAXI@Z PROC				; Feel::Touch::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	??1Touch@Feel@@UAE@XZ			; Feel::Touch::~Touch
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN10@scalar@67
	test	esi, esi
	je	SHORT $LN10@scalar@67
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN10@scalar@67:
	mov	eax, esi
	pop	esi
	ret	4
??_GTouch@Feel@@UAEPAXI@Z ENDP				; Feel::Touch::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??4Touch@Feel@@QAEAAV01@ABV01@@Z		; Feel::Touch::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4Touch@Feel@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4Touch@Feel@@QAEAAV01@ABV01@@Z PROC			; Feel::Touch::operator=, COMDAT
; _this$ = ecx
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR ___that$[esp+8]
	mov	eax, DWORD PTR [edi+4]
	mov	esi, ecx
	lea	ecx, DWORD PTR [edi+8]
	push	ecx
	lea	ebx, DWORD PTR [esi+8]
	mov	DWORD PTR [esi+4], eax
	call	??4?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::operator=
	lea	edx, DWORD PTR [edi+20]
	push	edx
	lea	ecx, DWORD PTR [esi+20]
	call	??4?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEAAV01@ABV01@@Z ; stlp_std::vector<CObject *,xalloc<CObject *> >::operator=
	add	edi, 32					; 00000020H
	push	edi
	lea	ecx, DWORD PTR [esi+32]
	call	??4?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEAAV01@ABV01@@Z ; stlp_std::vector<CObject *,xalloc<CObject *> >::operator=
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??4Touch@Feel@@QAEAAV01@ABV01@@Z ENDP			; Feel::Touch::operator=
_TEXT	ENDS
PUBLIC	??0Touch@Feel@@QAE@ABV01@@Z			; Feel::Touch::Touch
; Function compile flags: /Ogtpy
;	COMDAT ??0Touch@Feel@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0Touch@Feel@@QAE@ABV01@@Z PROC			; Feel::Touch::Touch, COMDAT
; _this$ = ecx
	push	ebx
	mov	ebx, DWORD PTR ___that$[esp]
	push	esi
	push	edi
	mov	edi, ecx
	mov	DWORD PTR [edi], OFFSET ??_7pure_relcase@@6B@
	mov	eax, DWORD PTR [ebx+4]
	mov	DWORD PTR [edi+4], eax
	lea	eax, DWORD PTR [ebx+8]
	lea	esi, DWORD PTR [edi+8]
	mov	DWORD PTR [edi], OFFSET ??_7Touch@Feel@@6B@
	call	??0?$_Impl_vector@UDenyTouch@Touch@Feel@@V?$xalloc@UDenyTouch@Touch@Feel@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >::_Impl_vector<Feel::Touch::DenyTouch,xalloc<Feel::Touch::DenyTouch> >
	lea	ecx, DWORD PTR [ebx+20]
	push	ecx
	lea	ecx, DWORD PTR [edi+20]
	call	??0?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::vector<CObject *,xalloc<CObject *> >::vector<CObject *,xalloc<CObject *> >
	add	ebx, 32					; 00000020H
	push	ebx
	lea	ecx, DWORD PTR [edi+32]
	call	??0?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::vector<CObject *,xalloc<CObject *> >::vector<CObject *,xalloc<CObject *> >
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	ret	4
??0Touch@Feel@@QAE@ABV01@@Z ENDP			; Feel::Touch::Touch
; Function compile flags: /Ogtpy
;	COMDAT ?feel_touch_update@Touch@Feel@@UAEXAAU?$_vector3@M@@M@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
___old_size$492198 = -16				; size = 4
$T492107 = -12						; size = 4
$T491546 = -8						; size = 4
_it$122186 = -8						; size = 4
_n_begin$ = -4						; size = 4
_n_end$ = 8						; size = 4
_C$ = 8							; size = 4
_O$122211 = 12						; size = 4
_O$122190 = 12						; size = 4
_R$ = 12						; size = 4
?feel_touch_update@Touch@Feel@@UAEXAAU?$_vector3@M@@M@Z PROC ; Feel::Touch::feel_touch_update, COMDAT
; _this$ = ecx

; 29   : {

	sub	esp, 20					; 00000014H
	push	ebx

; 30   : 	// Check if denied objects expire in time
; 31   : 	DWORD	dwT			= Device.dwTimeGlobal;

	mov	ebx, DWORD PTR ?Device@@3VCRenderDevice@@A+40
	push	ebp
	push	esi
	mov	esi, ecx

; 32   : 	for (u32 dit=0; dit<feel_touch_disable.size(); dit++){

	mov	eax, DWORD PTR [esi+12]
	sub	eax, DWORD PTR [esi+8]
	push	edi
	xor	edi, edi
	sar	eax, 3
	mov	DWORD PTR _this$[esp+36], esi
	je	SHORT $LN19@feel_touch@3
	lea	ebp, DWORD PTR [edi-8]
$LL21@feel_touch@3:
	mov	ecx, DWORD PTR [esi+8]

; 33   : 		if (feel_touch_disable[dit].Expire<dwT){

	cmp	DWORD PTR [ecx+edi*8+4], ebx
	lea	edx, DWORD PTR [ecx+edi*8]
	jae	SHORT $LN20@feel_touch@3

; 34   : 			feel_touch_disable.erase	(feel_touch_disable.begin()+dit);

	mov	eax, DWORD PTR [esi+12]
	lea	ecx, DWORD PTR [edx+8]
	cmp	ecx, eax
	je	SHORT $LN62@feel_touch@3
	sub	eax, ecx
	je	SHORT $LN62@feel_touch@3
	push	eax
	push	ecx
	push	edx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN62@feel_touch@3:
	add	DWORD PTR [esi+12], ebp

; 35   : 			dit--;

	sub	edi, 1
$LN20@feel_touch@3:
	mov	edx, DWORD PTR [esi+12]
	sub	edx, DWORD PTR [esi+8]
	add	edi, 1
	sar	edx, 3
	cmp	edi, edx
	jb	SHORT $LL21@feel_touch@3
$LN19@feel_touch@3:

; 36   : 		}
; 37   : 	}
; 38   : 
; 39   : 	// Find nearest objects
; 40   : 	q_nearest.clear_not_free				();

	mov	eax, DWORD PTR [esi+36]
	lea	ebx, DWORD PTR [esi+32]
	push	eax
	call	?to_value_type_ptr@?$_CastTraits@PAXPAVCObject@@@priv@stlp_std@@SAPAPAVCObject@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,CObject *>::to_value_type_ptr
	mov	ebp, eax
	add	esp, 4
	mov	ecx, ebx
	mov	DWORD PTR $T491546[esp+36], ebp
	call	?begin@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEPAPAVCObject@@XZ ; stlp_std::vector<CObject *,xalloc<CObject *> >::begin
	mov	edi, eax
	cmp	edi, ebp
	je	SHORT $LN95@feel_touch@3
	mov	ebp, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR $T491546[esp+36]
	sub	ebp, eax
	je	SHORT $LN103@feel_touch@3
	push	ebp
	push	eax
	push	edi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, ebp
	jmp	SHORT $LN104@feel_touch@3
$LN103@feel_touch@3:
	mov	eax, edi
$LN104@feel_touch@3:
	mov	DWORD PTR [ebx+4], eax
$LN95@feel_touch@3:
	push	edi
	call	?to_value_type_ptr@?$_CastTraits@PAXPAVCObject@@@priv@stlp_std@@SAPAPAVCObject@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,CObject *>::to_value_type_ptr

; 41   : 	q_nearest.reserve						(feel_touch.size());

	lea	ebp, DWORD PTR [esi+20]
	add	esp, 4
	mov	ecx, ebp
	call	?size@?$xr_vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@@QBEIXZ ; xr_vector<CObject *,xalloc<CObject *> >::size
	mov	ecx, eax
	call	?reserve@?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAEXI@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::reserve

; 42   : 	g_pGameLevel->ObjectSpace.GetNearest	(q_nearest,C,R, NULL);

	fld	DWORD PTR _R$[esp+32]
	mov	eax, DWORD PTR _C$[esp+32]
	push	0
	push	ecx
	mov	ecx, DWORD PTR ?g_pGameLevel@@3PAVIGame_Level@@A ; g_pGameLevel
	fstp	DWORD PTR [esp]
	push	eax
	push	ebx
	add	ecx, 262292				; 00040094H
	call	DWORD PTR __imp_?GetNearest@CObjectSpace@@QAEHAAV?$xr_vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@@ABU?$_vector3@M@@MPAVCObject@@@Z

; 43   : 	xr_vector<CObject*>::iterator	n_begin	= q_nearest.begin	();

	mov	ecx, ebx
	call	?begin@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEPAPAVCObject@@XZ ; stlp_std::vector<CObject *,xalloc<CObject *> >::begin
	mov	edi, eax

; 44   : 	xr_vector<CObject*>::iterator	n_end	= q_nearest.end		();

	mov	eax, DWORD PTR [esi+36]
	push	eax
	mov	DWORD PTR _n_begin$[esp+40], edi
	call	?to_value_type_ptr@?$_CastTraits@PAXPAVCObject@@@priv@stlp_std@@SAPAPAVCObject@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,CObject *>::to_value_type_ptr
	add	esp, 4

; 45   : 	if (n_end!=n_begin)						{

	cmp	eax, edi
	mov	DWORD PTR _n_end$[esp+32], eax
	je	$LN14@feel_touch@3

; 46   : 		// Process results (NEW)
; 47   : 		for (xr_vector<CObject*>::iterator it = n_begin; it!=n_end; it++){

	mov	ebx, edi
	mov	DWORD PTR _it$122186[esp+36], edi
	npad	8
$LL16@feel_touch@3:

; 48   : 			CObject* O = *it;

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR _O$122190[esp+32], eax

; 49   : 			if (O->getDestroy())		continue;							// Don't touch candidates for destroy

	test	DWORD PTR [eax+164], 67108864		; 04000000H
	jne	$LN15@feel_touch@3

; 50   : 			if (!feel_touch_contact(O))	continue;							// Actual contact

	mov	edx, DWORD PTR [esi]
	push	eax
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, esi
	call	eax
	test	eax, eax
	je	$LN15@feel_touch@3

; 51   : 
; 52   : 			if (std::find(feel_touch.begin(),feel_touch.end(),O) == feel_touch.end()){

	mov	esi, DWORD PTR [esi+24]
	push	esi
	call	?to_value_type_ptr@?$_CastTraits@PAXPAVCObject@@@priv@stlp_std@@SAPAPAVCObject@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,CObject *>::to_value_type_ptr
	add	esp, 4
	mov	ecx, ebp
	mov	esi, eax
	call	?begin@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEPAPAVCObject@@XZ ; stlp_std::vector<CObject *,xalloc<CObject *> >::begin
	lea	edi, DWORD PTR _O$122190[esp+32]
	call	??$__find@PAPAVCObject@@PAV1@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@0ABQAV2@ABUrandom_access_iterator_tag@1@@Z ; stlp_std::priv::__find<CObject * *,CObject *>
	mov	ecx, DWORD PTR _this$[esp+36]
	mov	esi, eax
	mov	eax, DWORD PTR [ecx+24]
	push	eax
	call	?to_value_type_ptr@?$_CastTraits@PAXPAVCObject@@@priv@stlp_std@@SAPAPAVCObject@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,CObject *>::to_value_type_ptr
	add	esp, 4
	cmp	esi, eax
	jne	$LN333@feel_touch@3

; 53   : 				// check for deny
; 54   : 				BOOL bDeny = FALSE;
; 55   : 				for (dit=0; dit<feel_touch_disable.size(); dit++)

	mov	edi, DWORD PTR _this$[esp+36]
	mov	edx, DWORD PTR [edi+12]
	sub	edx, DWORD PTR [edi+8]
	xor	eax, eax
	sar	edx, 3
	je	SHORT $LN330@feel_touch@3
	mov	ecx, DWORD PTR [edi+8]
	mov	esi, DWORD PTR _O$122190[esp+32]
$LL10@feel_touch@3:

; 56   : 					if (O == feel_touch_disable[dit].O)	{ bDeny=TRUE; break; }

	cmp	esi, DWORD PTR [ecx]
	je	$LN333@feel_touch@3
	mov	edx, DWORD PTR _this$[esp+36]
	mov	edi, DWORD PTR [edx+12]
	sub	edi, DWORD PTR [edx+8]
	add	eax, 1
	sar	edi, 3
	add	ecx, 8
	cmp	eax, edi
	jb	SHORT $LL10@feel_touch@3

; 53   : 				// check for deny
; 54   : 				BOOL bDeny = FALSE;
; 55   : 				for (dit=0; dit<feel_touch_disable.size(); dit++)

	mov	edi, edx
$LN330@feel_touch@3:

; 57   : 
; 58   : 				// _new _
; 59   : 				if (!bDeny)
; 60   : 				{
; 61   : 					feel_touch.push_back	(O);

	mov	esi, DWORD PTR [ebp+4]
	cmp	esi, DWORD PTR [ebp+8]
	je	SHORT $LN185@feel_touch@3
	lea	eax, DWORD PTR _O$122190[esp+32]
	push	eax
	push	esi
	call	??$_Copy_Construct@PAX@stlp_std@@YAXPAPAXABQAX@Z ; stlp_std::_Copy_Construct<void *>
	add	esp, 8
	add	DWORD PTR [ebp+4], 4
	jmp	$LN259@feel_touch@3
$LN185@feel_touch@3:
	mov	ecx, esi
	sub	ecx, DWORD PTR [ebp]
	lea	edx, DWORD PTR $T492107[esp+36]
	push	edx
	lea	eax, DWORD PTR ___old_size$492198[esp+40]
	sar	ecx, 2
	push	eax
	mov	DWORD PTR $T492107[esp+44], 1
	mov	DWORD PTR ___old_size$492198[esp+44], ecx
	call	??$max@I@stlp_std@@YAABIABI0@Z		; stlp_std::max<unsigned int>
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR ___old_size$492198[esp+44]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	esp, 8
	lea	ebx, DWORD PTR [eax*4]
	push	ebx
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	mov	edi, eax
	mov	eax, DWORD PTR [ebp]
	sub	esi, eax
	je	SHORT $LN215@feel_touch@3
	push	esi
	push	eax
	push	edi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
	jmp	SHORT $LN216@feel_touch@3
$LN215@feel_touch@3:
	mov	eax, edi
$LN216@feel_touch@3:
	mov	ecx, DWORD PTR $T492107[esp+36]
	test	ecx, ecx
	mov	esi, eax
	jbe	SHORT $LN217@feel_touch@3
	npad	3
$LL219@feel_touch@3:
	mov	edx, DWORD PTR _O$122190[esp+32]
	mov	DWORD PTR [esi], edx
	sub	ecx, 1
	add	esi, 4
	test	ecx, ecx
	ja	SHORT $LL219@feel_touch@3
$LN217@feel_touch@3:
	mov	eax, DWORD PTR [ebp]
	test	eax, eax
	je	SHORT $LN256@feel_touch@3
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN256@feel_touch@3:
	add	ebx, edi
	mov	DWORD PTR [ebp], edi
	mov	edi, DWORD PTR _this$[esp+36]
	mov	DWORD PTR [ebp+8], ebx
	mov	ebx, DWORD PTR _it$122186[esp+36]
	mov	DWORD PTR [ebp+4], esi
$LN259@feel_touch@3:

; 62   : 					feel_touch_new			(O);

	mov	ecx, DWORD PTR _O$122190[esp+32]
	mov	eax, DWORD PTR [edi]
	mov	edx, DWORD PTR [eax+16]
	push	ecx
	mov	ecx, edi
	call	edx
$LN333@feel_touch@3:
	mov	esi, DWORD PTR _this$[esp+36]
$LN15@feel_touch@3:

; 46   : 		// Process results (NEW)
; 47   : 		for (xr_vector<CObject*>::iterator it = n_begin; it!=n_end; it++){

	add	ebx, 4
	cmp	ebx, DWORD PTR _n_end$[esp+32]
	mov	DWORD PTR _it$122186[esp+36], ebx
	jne	$LL16@feel_touch@3
$LN14@feel_touch@3:

; 63   : 				}
; 64   : 			}
; 65   : 		}
; 66   : 	}
; 67   : 
; 68   : 	// Process results (DELETE)
; 69   : 	for (int d = 0; d<int(feel_touch.size()); d++)

	mov	ecx, ebp
	xor	ebx, ebx
	call	?size@?$xr_vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@@QBEIXZ ; xr_vector<CObject *,xalloc<CObject *> >::size
	test	eax, eax
	jle	$LN3@feel_touch@3
	npad	5
$LL5@feel_touch@3:

; 70   : 	{
; 71   : 		CObject* O	= feel_touch[d];

	push	ebx
	mov	ecx, ebp
	call	??A?$xr_vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@@QAEAAPAVCObject@@I@Z ; xr_vector<CObject *,xalloc<CObject *> >::operator[]
	mov	eax, DWORD PTR [eax]

; 72   : 		if (O->getDestroy() || !feel_touch_contact(O) || (std::find(n_begin,n_end,O) == n_end))	// Don't touch candidates for destroy

	test	DWORD PTR [eax+164], 67108864		; 04000000H
	mov	DWORD PTR _O$122211[esp+32], eax
	jne	SHORT $LN1@feel_touch@3
	mov	edx, DWORD PTR [esi]
	push	eax
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, esi
	call	eax
	test	eax, eax
	je	SHORT $LN1@feel_touch@3
	mov	esi, DWORD PTR _n_end$[esp+32]
	mov	eax, DWORD PTR _n_begin$[esp+36]
	lea	edi, DWORD PTR _O$122211[esp+32]
	call	??$__find@PAPAVCObject@@PAV1@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@0ABQAV2@ABUrandom_access_iterator_tag@1@@Z ; stlp_std::priv::__find<CObject * *,CObject *>
	cmp	eax, DWORD PTR _n_end$[esp+32]
	mov	esi, DWORD PTR _this$[esp+36]
	jne	SHORT $LN4@feel_touch@3
$LN1@feel_touch@3:

; 73   : 		{
; 74   : 			// _delete_
; 75   : 			feel_touch.erase		(feel_touch.begin()+d);

	mov	ecx, ebp
	call	?begin@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEPAPAVCObject@@XZ ; stlp_std::vector<CObject *,xalloc<CObject *> >::begin
	lea	edi, DWORD PTR [eax+ebx*4]
	mov	eax, DWORD PTR [ebp+4]
	lea	ecx, DWORD PTR [edi+4]
	cmp	ecx, eax
	je	SHORT $LN309@feel_touch@3
	sub	eax, ecx
	je	SHORT $LN309@feel_touch@3
	push	eax
	push	ecx
	push	edi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN309@feel_touch@3:
	add	DWORD PTR [ebp+4], -4			; fffffffcH
	mov	eax, DWORD PTR [ebp+4]
	push	eax
	call	??$_Destroy@PAX@stlp_std@@YAXPAPAX@Z	; stlp_std::_Destroy<void *>
	push	edi
	call	?to_value_type_ptr@?$_CastTraits@PAXPAVCObject@@@priv@stlp_std@@SAPAPAVCObject@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,CObject *>::to_value_type_ptr

; 76   : 			feel_touch_delete		(O);

	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR _O$122211[esp+40]
	mov	edx, DWORD PTR [edx+20]
	add	esp, 8
	push	eax
	mov	ecx, esi
	call	edx

; 77   : 			d--;

	sub	ebx, 1
$LN4@feel_touch@3:
	mov	ecx, ebp
	add	ebx, 1
	call	?size@?$xr_vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@@QBEIXZ ; xr_vector<CObject *,xalloc<CObject *> >::size
	cmp	ebx, eax
	jl	$LL5@feel_touch@3
$LN3@feel_touch@3:

; 78   : 		}
; 79   : 	}
; 80   : 
; 81   : 	//. Engine.Sheduler.Slice	();	
; 82   : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 20					; 00000014H
	ret	8
?feel_touch_update@Touch@Feel@@UAEXAAU?$_vector3@M@@M@Z ENDP ; Feel::Touch::feel_touch_update
END
