; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	D:\CLEARSKY\sources\engine\xrEngine\IRenderable.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?identity@?$_matrix@M@@QAEAAU1@XZ		; _matrix<float>::identity
EXTRN	___RTDynamicCast:PROC
EXTRN	__imp_?Render@@3PAVIRender_interface@@A:DWORD
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_matrix.h
;	COMDAT ?identity@?$_matrix@M@@QAEAAU1@XZ
_TEXT	SEGMENT
?identity@?$_matrix@M@@QAEAAU1@XZ PROC			; _matrix<float>::identity, COMDAT
; _this$ = eax

; 72   : 		_11=1; _12=0; _13=0; _14=0;

	xorps	xmm0, xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax], xmm1
	movss	DWORD PTR [eax+4], xmm0
	movss	DWORD PTR [eax+8], xmm0
	movss	DWORD PTR [eax+12], xmm0

; 73   : 		_21=0; _22=1; _23=0; _24=0;

	movss	DWORD PTR [eax+16], xmm0
	movss	DWORD PTR [eax+20], xmm1
	movss	DWORD PTR [eax+24], xmm0
	movss	DWORD PTR [eax+28], xmm0

; 74   : 		_31=0; _32=0; _33=1; _34=0;

	movss	DWORD PTR [eax+32], xmm0
	movss	DWORD PTR [eax+36], xmm0
	movss	DWORD PTR [eax+40], xmm1
	movss	DWORD PTR [eax+44], xmm0

; 75   : 		_41=0; _42=0; _43=0; _44=1;

	movss	DWORD PTR [eax+48], xmm0
	movss	DWORD PTR [eax+52], xmm0
	movss	DWORD PTR [eax+56], xmm0
	movss	DWORD PTR [eax+60], xmm1

; 76   : 		return *this;
; 77   : 	}

	ret	0
?identity@?$_matrix@M@@QAEAAU1@XZ ENDP			; _matrix<float>::identity
_TEXT	ENDS
PUBLIC	?renderable_ROS@IRenderable@@QAEPAVIRender_ObjectSpecific@@XZ ; IRenderable::renderable_ROS
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\irenderable.cpp
;	COMDAT ?renderable_ROS@IRenderable@@QAEPAVIRender_ObjectSpecific@@XZ
_TEXT	SEGMENT
?renderable_ROS@IRenderable@@QAEPAVIRender_ObjectSpecific@@XZ PROC ; IRenderable::renderable_ROS, COMDAT
; _this$ = ecx

; 26   : {

	push	esi
	mov	esi, ecx

; 27   : 	if (0==renderable.pROS && renderable.pROS_Allowed)		renderable.pROS	= Render->ros_create(this);

	cmp	DWORD PTR [esi+72], 0
	jne	SHORT $LN5@renderable
	cmp	DWORD PTR [esi+76], 0
	je	SHORT $LN5@renderable
	mov	eax, DWORD PTR __imp_?Render@@3PAVIRender_interface@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+116]
	push	esi
	call	eax
	mov	DWORD PTR [esi+72], eax
$LN5@renderable:

; 28   : 	return renderable.pROS	;

	mov	eax, DWORD PTR [esi+72]
	pop	esi

; 29   : }

	ret	0
?renderable_ROS@IRenderable@@QAEPAVIRender_ObjectSpecific@@XZ ENDP ; IRenderable::renderable_ROS
_TEXT	ENDS
PUBLIC	??1IRenderable@@UAE@XZ				; IRenderable::~IRenderable
; Function compile flags: /Ogtpy
;	COMDAT ??1IRenderable@@UAE@XZ
_TEXT	SEGMENT
??1IRenderable@@UAE@XZ PROC				; IRenderable::~IRenderable, COMDAT
; _this$ = ecx

; 18   : 	VERIFY								(!g_bRendering); 
; 19   : 	Render->model_Delete				(renderable.visual);

	mov	eax, DWORD PTR __imp_?Render@@3PAVIRender_interface@@A
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR [esi], OFFSET ??_7IRenderable@@6B@
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+156]
	push	0
	lea	edi, DWORD PTR [esi+68]
	push	edi
	call	eax

; 20   : 	if (renderable.pROS)				Render->ros_destroy					(renderable.pROS);

	add	esi, 72					; 00000048H
	cmp	DWORD PTR [esi], 0
	je	SHORT $LN7@IRenderabl
	mov	ecx, DWORD PTR __imp_?Render@@3PAVIRender_interface@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+120]
	push	esi
	call	eax
$LN7@IRenderabl:

; 21   : 	renderable.visual					= NULL;

	mov	DWORD PTR [edi], 0
	pop	edi

; 22   : 	renderable.pROS						= NULL;

	mov	DWORD PTR [esi], 0
	pop	esi

; 23   : }

	ret	0
??1IRenderable@@UAE@XZ ENDP				; IRenderable::~IRenderable
_TEXT	ENDS
PUBLIC	??0IRenderable@@QAE@XZ				; IRenderable::IRenderable
; Function compile flags: /Ogtpy
;	COMDAT ??0IRenderable@@QAE@XZ
_TEXT	SEGMENT
??0IRenderable@@QAE@XZ PROC				; IRenderable::IRenderable, COMDAT
; _this$ = ecx

; 7    : 	renderable.xform.identity			();

	xorps	xmm0, xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7IRenderable@@6B@

; 8    : 	renderable.visual					= NULL;
; 9    : 	renderable.pROS						= NULL;
; 10   : 	renderable.pROS_Allowed				= TRUE;
; 11   : 	ISpatial*		self				= dynamic_cast<ISpatial*> (this);

	push	0
	push	OFFSET ??_R0?AVISpatial@@@8
	push	OFFSET ??_R0?AVIRenderable@@@8
	movss	DWORD PTR [esi+4], xmm1
	movss	DWORD PTR [esi+8], xmm0
	movss	DWORD PTR [esi+12], xmm0
	movss	DWORD PTR [esi+16], xmm0
	movss	DWORD PTR [esi+20], xmm0
	movss	DWORD PTR [esi+24], xmm1
	movss	DWORD PTR [esi+28], xmm0
	movss	DWORD PTR [esi+32], xmm0
	movss	DWORD PTR [esi+36], xmm0
	movss	DWORD PTR [esi+40], xmm0
	movss	DWORD PTR [esi+44], xmm1
	movss	DWORD PTR [esi+48], xmm0
	movss	DWORD PTR [esi+52], xmm0
	movss	DWORD PTR [esi+56], xmm0
	movss	DWORD PTR [esi+60], xmm0
	movss	DWORD PTR [esi+64], xmm1
	push	0
	push	esi
	mov	DWORD PTR [esi+68], 0
	mov	DWORD PTR [esi+72], 0
	mov	DWORD PTR [esi+76], 1
	call	___RTDynamicCast
	add	esp, 20					; 00000014H

; 12   : 	if (self)		self->spatial.type	|= STYPE_RENDERABLE;

	test	eax, eax
	je	SHORT $LN6@IRenderabl@2
	or	DWORD PTR [eax+4], 1
$LN6@IRenderabl@2:

; 13   : }

	mov	eax, esi
	pop	esi
	ret	0
??0IRenderable@@QAE@XZ ENDP				; IRenderable::IRenderable
END
