; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	D:\CLEARSKY\sources\engine\xrEngine\xrSASH.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??$xr_sprintf@$0CAA@@@YAHAAY0CAA@DPBDZZ		; xr_sprintf<512>
PUBLIC	??_C@_0BK@LNLPCG@oa?3?3?5Version?3?5?$CFd?4?$CFd?4?$CFd?4?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BF@IPOMEDHB@oa?3?3?5Failed?5to?5init?4?$AA@ ; `string'
PUBLIC	??_C@_0BK@IDINEHDH@oa?3?3?5Running?5native?5path?4?$AA@ ; `string'
PUBLIC	??_C@_0N@GLHFJILB@SASH?3?3?5Exit?4?$AA@		; `string'
PUBLIC	??_C@_0CO@CBLKAMMI@oa?3?3?5Native?5path?5can?8t?5find?5?$CC?$CFs?$CC@ ; `string'
PUBLIC	??_C@_04OAGCANIB@?$CF07d?$AA@			; `string'
PUBLIC	??_C@_0BM@BDDKKEOG@absolute?5?$CIsmoothed?$CJ?5minimum?$AA@ ; `string'
PUBLIC	??_C@_0BM@PFFKALAH@absolute?5?$CIsmoothed?$CJ?5maximum?$AA@ ; `string'
PUBLIC	??_C@_0BG@DLAFANCM@SASH?3?3?5GetAllOptions?4?$AA@ ; `string'
PUBLIC	??_C@_0BA@CENFKEKB@r__geometry_lod?$AA@		; `string'
PUBLIC	??_C@_0BC@DANJBJKC@r__detail_density?$AA@	; `string'
PUBLIC	??_C@_0M@JGACHMFM@r__tf_aniso?$AA@		; `string'
PUBLIC	??_C@_0BM@GLDIDBOD@ai_use_torch_dynamic_lights?$AA@ ; `string'
PUBLIC	??_C@_0BG@MBBINPCJ@r1_no_detail_textures?$AA@	; `string'
PUBLIC	??_C@_06DKFLPMNP@r2_sun?$AA@			; `string'
PUBLIC	??_C@_0P@PGDLHACC@r2_sun_quality?$AA@		; `string'
PUBLIC	??_C@_0P@NKBDHKNF@r2_slight_fade?$AA@		; `string'
PUBLIC	??_C@_0P@IDPGFAFN@r2_ls_squality?$AA@		; `string'
PUBLIC	??_C@_0P@PCJAFKFF@r2_detail_bump?$AA@		; `string'
PUBLIC	??_C@_0O@LHFKPGKB@r2_sun_shafts?$AA@		; `string'
PUBLIC	??_C@_07NKAEPLDA@r2_ssao?$AA@			; `string'
PUBLIC	??_C@_0BB@IJIGEECP@r2_ssao_opt_data?$AA@	; `string'
PUBLIC	??_C@_0BC@MHALNIIH@r2_ssao_half_data?$AA@	; `string'
PUBLIC	??_C@_0N@OCFNMDDA@r2_ssao_hbao?$AA@		; `string'
PUBLIC	??_C@_0O@JMGALPCM@r2_soft_water?$AA@		; `string'
PUBLIC	??_C@_0BC@NBMFAMGH@r2_soft_particles?$AA@	; `string'
PUBLIC	??_C@_0O@OIFLAOHB@r2_dof_enable?$AA@		; `string'
PUBLIC	??_C@_0BF@KHMKJMA@r2_volumetric_lights?$AA@	; `string'
PUBLIC	??_C@_0BC@NJKLNEJM@r2_steep_parallax?$AA@	; `string'
PUBLIC	??_C@_0BI@MANHLKMD@r3_dynamic_wet_surfaces?$AA@	; `string'
PUBLIC	??_C@_0BE@PBMCOEHI@r3_volumetric_smoke?$AA@	; `string'
PUBLIC	??_C@_0N@PHKDGKAO@r3_gbuff_opt?$AA@		; `string'
PUBLIC	??_C@_0O@IMLPLABF@r3_use_dx10_1?$AA@		; `string'
PUBLIC	??_C@_0N@EGILDBNB@r3_minmax_sm?$AA@		; `string'
PUBLIC	??_C@_07DNCAPEOJ@r3_msaa?$AA@			; `string'
PUBLIC	??_C@_0M@BCPCNGOA@r3_msaa_opt?$AA@		; `string'
PUBLIC	??_C@_0BC@JFPEECNN@r3_msaa_alphatest?$AA@	; `string'
PUBLIC	??_C@_0BK@NNCPMBNI@SASH?3?3?5GetCurrentOptions?4?$AA@ ; `string'
PUBLIC	??_C@_0BD@DKKLLJDO@SASH?3?3?5SetOptions?4?$AA@	; `string'
PUBLIC	??_C@_0BG@EJADJCDM@SASH?3?3?5GetBenchmarks?4?$AA@ ; `string'
PUBLIC	??_C@_05JLNEMJLN@dummy?$AA@			; `string'
PUBLIC	??_C@_0BF@JCPKOHG@SASH?3?3?5RunBenchmark?4?$AA@	; `string'
PUBLIC	??_C@_08PNDHMFBG@SASH?4ltx?$AA@			; `string'
PUBLIC	??_C@_09EBAHBELN@unbindall?$AA@			; `string'
PUBLIC	??_C@_0BO@CPCPAKNB@SASH?3?3?5Option?5?$CC?$CFs?$CC?5not?5found?4?$AA@ ; `string'
PUBLIC	??_C@_0CA@IECNIKLH@SASH?3?3?5Registering?5option?5?$CC?$CFs?$CC?4?$AA@ ; `string'
PUBLIC	??_C@_0BM@BIOJMCHE@SASH?3?3?5Getting?5option?5?$CC?$CFs?$CC?4?$AA@ ; `string'
PUBLIC	??_C@_0BM@EBPENECD@SASH?3?3?5Setting?5option?5?$CC?$CFs?$CC?4?$AA@ ; `string'
PUBLIC	??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_05KDNLHNC@?$CFs?5?$CFf?$AA@		; `string'
PUBLIC	??_C@_05DIALNFFA@?$CFs?5?$CFd?$AA@		; `string'
EXTRN	__imp_?FlushLog@@YAXXZ:PROC
EXTRN	__imp___vsnprintf:PROC
;	COMDAT ??_C@_05DIALNFFA@?$CFs?5?$CFd?$AA@
CONST	SEGMENT
??_C@_05DIALNFFA@?$CFs?5?$CFd?$AA@ DB '%s %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05KDNLHNC@?$CFs?5?$CFf?$AA@
CONST	SEGMENT
??_C@_05KDNLHNC@?$CFs?5?$CFf?$AA@ DB '%s %f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@
CONST	SEGMENT
??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@ DB '%s %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@EBPENECD@SASH?3?3?5Setting?5option?5?$CC?$CFs?$CC?4?$AA@
CONST	SEGMENT
??_C@_0BM@EBPENECD@SASH?3?3?5Setting?5option?5?$CC?$CFs?$CC?4?$AA@ DB 'SA'
	DB	'SH:: Setting option "%s".', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BIOJMCHE@SASH?3?3?5Getting?5option?5?$CC?$CFs?$CC?4?$AA@
CONST	SEGMENT
??_C@_0BM@BIOJMCHE@SASH?3?3?5Getting?5option?5?$CC?$CFs?$CC?4?$AA@ DB 'SA'
	DB	'SH:: Getting option "%s".', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IECNIKLH@SASH?3?3?5Registering?5option?5?$CC?$CFs?$CC?4?$AA@
CONST	SEGMENT
??_C@_0CA@IECNIKLH@SASH?3?3?5Registering?5option?5?$CC?$CFs?$CC?4?$AA@ DB 'S'
	DB	'ASH:: Registering option "%s".', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CPCPAKNB@SASH?3?3?5Option?5?$CC?$CFs?$CC?5not?5found?4?$AA@
CONST	SEGMENT
??_C@_0BO@CPCPAKNB@SASH?3?3?5Option?5?$CC?$CFs?$CC?5not?5found?4?$AA@ DB 'S'
	DB	'ASH:: Option "%s" not found.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09EBAHBELN@unbindall?$AA@
CONST	SEGMENT
??_C@_09EBAHBELN@unbindall?$AA@ DB 'unbindall', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PNDHMFBG@SASH?4ltx?$AA@
CONST	SEGMENT
??_C@_08PNDHMFBG@SASH?4ltx?$AA@ DB 'SASH.ltx', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JCPKOHG@SASH?3?3?5RunBenchmark?4?$AA@
CONST	SEGMENT
??_C@_0BF@JCPKOHG@SASH?3?3?5RunBenchmark?4?$AA@ DB 'SASH:: RunBenchmark.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05JLNEMJLN@dummy?$AA@
CONST	SEGMENT
??_C@_05JLNEMJLN@dummy?$AA@ DB 'dummy', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EJADJCDM@SASH?3?3?5GetBenchmarks?4?$AA@
CONST	SEGMENT
??_C@_0BG@EJADJCDM@SASH?3?3?5GetBenchmarks?4?$AA@ DB 'SASH:: GetBenchmark'
	DB	's.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DKKLLJDO@SASH?3?3?5SetOptions?4?$AA@
CONST	SEGMENT
??_C@_0BD@DKKLLJDO@SASH?3?3?5SetOptions?4?$AA@ DB 'SASH:: SetOptions.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NNCPMBNI@SASH?3?3?5GetCurrentOptions?4?$AA@
CONST	SEGMENT
??_C@_0BK@NNCPMBNI@SASH?3?3?5GetCurrentOptions?4?$AA@ DB 'SASH:: GetCurre'
	DB	'ntOptions.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JFPEECNN@r3_msaa_alphatest?$AA@
CONST	SEGMENT
??_C@_0BC@JFPEECNN@r3_msaa_alphatest?$AA@ DB 'r3_msaa_alphatest', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BCPCNGOA@r3_msaa_opt?$AA@
CONST	SEGMENT
??_C@_0M@BCPCNGOA@r3_msaa_opt?$AA@ DB 'r3_msaa_opt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DNCAPEOJ@r3_msaa?$AA@
CONST	SEGMENT
??_C@_07DNCAPEOJ@r3_msaa?$AA@ DB 'r3_msaa', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EGILDBNB@r3_minmax_sm?$AA@
CONST	SEGMENT
??_C@_0N@EGILDBNB@r3_minmax_sm?$AA@ DB 'r3_minmax_sm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IMLPLABF@r3_use_dx10_1?$AA@
CONST	SEGMENT
??_C@_0O@IMLPLABF@r3_use_dx10_1?$AA@ DB 'r3_use_dx10_1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PHKDGKAO@r3_gbuff_opt?$AA@
CONST	SEGMENT
??_C@_0N@PHKDGKAO@r3_gbuff_opt?$AA@ DB 'r3_gbuff_opt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PBMCOEHI@r3_volumetric_smoke?$AA@
CONST	SEGMENT
??_C@_0BE@PBMCOEHI@r3_volumetric_smoke?$AA@ DB 'r3_volumetric_smoke', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MANHLKMD@r3_dynamic_wet_surfaces?$AA@
CONST	SEGMENT
??_C@_0BI@MANHLKMD@r3_dynamic_wet_surfaces?$AA@ DB 'r3_dynamic_wet_surfac'
	DB	'es', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NJKLNEJM@r2_steep_parallax?$AA@
CONST	SEGMENT
??_C@_0BC@NJKLNEJM@r2_steep_parallax?$AA@ DB 'r2_steep_parallax', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KHMKJMA@r2_volumetric_lights?$AA@
CONST	SEGMENT
??_C@_0BF@KHMKJMA@r2_volumetric_lights?$AA@ DB 'r2_volumetric_lights', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OIFLAOHB@r2_dof_enable?$AA@
CONST	SEGMENT
??_C@_0O@OIFLAOHB@r2_dof_enable?$AA@ DB 'r2_dof_enable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NBMFAMGH@r2_soft_particles?$AA@
CONST	SEGMENT
??_C@_0BC@NBMFAMGH@r2_soft_particles?$AA@ DB 'r2_soft_particles', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JMGALPCM@r2_soft_water?$AA@
CONST	SEGMENT
??_C@_0O@JMGALPCM@r2_soft_water?$AA@ DB 'r2_soft_water', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OCFNMDDA@r2_ssao_hbao?$AA@
CONST	SEGMENT
??_C@_0N@OCFNMDDA@r2_ssao_hbao?$AA@ DB 'r2_ssao_hbao', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MHALNIIH@r2_ssao_half_data?$AA@
CONST	SEGMENT
??_C@_0BC@MHALNIIH@r2_ssao_half_data?$AA@ DB 'r2_ssao_half_data', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IJIGEECP@r2_ssao_opt_data?$AA@
CONST	SEGMENT
??_C@_0BB@IJIGEECP@r2_ssao_opt_data?$AA@ DB 'r2_ssao_opt_data', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07NKAEPLDA@r2_ssao?$AA@
CONST	SEGMENT
??_C@_07NKAEPLDA@r2_ssao?$AA@ DB 'r2_ssao', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LHFKPGKB@r2_sun_shafts?$AA@
CONST	SEGMENT
??_C@_0O@LHFKPGKB@r2_sun_shafts?$AA@ DB 'r2_sun_shafts', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PCJAFKFF@r2_detail_bump?$AA@
CONST	SEGMENT
??_C@_0P@PCJAFKFF@r2_detail_bump?$AA@ DB 'r2_detail_bump', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IDPGFAFN@r2_ls_squality?$AA@
CONST	SEGMENT
??_C@_0P@IDPGFAFN@r2_ls_squality?$AA@ DB 'r2_ls_squality', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NKBDHKNF@r2_slight_fade?$AA@
CONST	SEGMENT
??_C@_0P@NKBDHKNF@r2_slight_fade?$AA@ DB 'r2_slight_fade', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PGDLHACC@r2_sun_quality?$AA@
CONST	SEGMENT
??_C@_0P@PGDLHACC@r2_sun_quality?$AA@ DB 'r2_sun_quality', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06DKFLPMNP@r2_sun?$AA@
CONST	SEGMENT
??_C@_06DKFLPMNP@r2_sun?$AA@ DB 'r2_sun', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MBBINPCJ@r1_no_detail_textures?$AA@
CONST	SEGMENT
??_C@_0BG@MBBINPCJ@r1_no_detail_textures?$AA@ DB 'r1_no_detail_textures', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@GLDIDBOD@ai_use_torch_dynamic_lights?$AA@
CONST	SEGMENT
??_C@_0BM@GLDIDBOD@ai_use_torch_dynamic_lights?$AA@ DB 'ai_use_torch_dyna'
	DB	'mic_lights', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JGACHMFM@r__tf_aniso?$AA@
CONST	SEGMENT
??_C@_0M@JGACHMFM@r__tf_aniso?$AA@ DB 'r__tf_aniso', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DANJBJKC@r__detail_density?$AA@
CONST	SEGMENT
??_C@_0BC@DANJBJKC@r__detail_density?$AA@ DB 'r__detail_density', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CENFKEKB@r__geometry_lod?$AA@
CONST	SEGMENT
??_C@_0BA@CENFKEKB@r__geometry_lod?$AA@ DB 'r__geometry_lod', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DLAFANCM@SASH?3?3?5GetAllOptions?4?$AA@
CONST	SEGMENT
??_C@_0BG@DLAFANCM@SASH?3?3?5GetAllOptions?4?$AA@ DB 'SASH:: GetAllOption'
	DB	's.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PFFKALAH@absolute?5?$CIsmoothed?$CJ?5maximum?$AA@
CONST	SEGMENT
??_C@_0BM@PFFKALAH@absolute?5?$CIsmoothed?$CJ?5maximum?$AA@ DB 'absolute '
	DB	'(smoothed) maximum', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BDDKKEOG@absolute?5?$CIsmoothed?$CJ?5minimum?$AA@
CONST	SEGMENT
??_C@_0BM@BDDKKEOG@absolute?5?$CIsmoothed?$CJ?5minimum?$AA@ DB 'absolute '
	DB	'(smoothed) minimum', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OAGCANIB@?$CF07d?$AA@
CONST	SEGMENT
??_C@_04OAGCANIB@?$CF07d?$AA@ DB '%07d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@CBLKAMMI@oa?3?3?5Native?5path?5can?8t?5find?5?$CC?$CFs?$CC@
CONST	SEGMENT
??_C@_0CO@CBLKAMMI@oa?3?3?5Native?5path?5can?8t?5find?5?$CC?$CFs?$CC@ DB 'o'
	DB	'a:: Native path can''t find "%s" config file.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GLHFJILB@SASH?3?3?5Exit?4?$AA@
CONST	SEGMENT
??_C@_0N@GLHFJILB@SASH?3?3?5Exit?4?$AA@ DB 'SASH:: Exit.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@IDINEHDH@oa?3?3?5Running?5native?5path?4?$AA@
CONST	SEGMENT
??_C@_0BK@IDINEHDH@oa?3?3?5Running?5native?5path?4?$AA@ DB 'oa:: Running '
	DB	'native path.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IPOMEDHB@oa?3?3?5Failed?5to?5init?4?$AA@
CONST	SEGMENT
??_C@_0BF@IPOMEDHB@oa?3?3?5Failed?5to?5init?4?$AA@ DB 'oa:: Failed to ini'
	DB	't.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LNLPCG@oa?3?3?5Version?3?5?$CFd?4?$CFd?4?$CFd?4?$CFd?$AA@
CONST	SEGMENT
??_C@_0BK@LNLPCG@oa?3?3?5Version?3?5?$CFd?4?$CFd?4?$CFd?4?$CFd?$AA@ DB 'o'
	DB	'a:: Version: %d.%d.%d.%d', 00H		; `string'
	ORG $+1248
_EPS	DD	03727c5acr			; 1e-005
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_std_extensions.h
;	COMDAT ??$xr_sprintf@$0CAA@@@YAHAAY0CAA@DPBDZZ
_TEXT	SEGMENT
_format_string$ = 8					; size = 4
??$xr_sprintf@$0CAA@@@YAHAAY0CAA@DPBDZZ PROC		; xr_sprintf<512>, COMDAT
; _destination$ = edx

; 244  : 	va_list args;
; 245  : 	va_start					( args, format_string);
; 246  : 	return						vsnprintf_s( destination, count, count - 1, format_string, args );

	mov	ecx, DWORD PTR _format_string$[esp-4]
	lea	eax, DWORD PTR _format_string$[esp]
	push	eax
	push	ecx
	push	511					; 000001ffH
	push	512					; 00000200H
	push	edx
	call	DWORD PTR __imp__vsnprintf_s
	add	esp, 20					; 00000014H

; 247  : }

	ret	0
??$xr_sprintf@$0CAA@@@YAHAAY0CAA@DPBDZZ ENDP		; xr_sprintf<512>
_TEXT	ENDS
PUBLIC	?Message@xrSASH@@AAEXW4oaErrorType@@PBD@Z	; xrSASH::Message
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\xrsash.cpp
;	COMDAT ?Message@xrSASH@@AAEXW4oaErrorType@@PBD@Z
_TEXT	SEGMENT
_Message$ = -12						; size = 12
_MessageType$ = 8					; size = 4
_pszMsg$ = 12						; size = 4
?Message@xrSASH@@AAEXW4oaErrorType@@PBD@Z PROC		; xrSASH::Message, COMDAT
; _this$ = ecx

; 713  : {

	sub	esp, 12					; 0000000cH

; 714  : 	VERIFY(m_bInited);
; 715  : 
; 716  : 	oaMessage Message;
; 717  : 	oaInitMessage(&Message);
; 718  : 	Message.Error = MessageType;
; 719  : 	Message.Message = pszMsg;

	mov	ecx, DWORD PTR _pszMsg$[esp+8]
	xor	eax, eax

; 720  : 	oaSendSignal(OA_SIGNAL_ERROR, &Message);

	cmp	DWORD PTR _InitFlag, 0
	mov	DWORD PTR _Message$[esp+12], eax
	mov	DWORD PTR _Message$[esp+16], eax
	mov	DWORD PTR _Message$[esp+20], eax
	mov	eax, DWORD PTR _MessageType$[esp+8]
	mov	DWORD PTR _Message$[esp+12], 12		; 0000000cH
	mov	DWORD PTR _Message$[esp+16], eax
	mov	DWORD PTR _Message$[esp+20], ecx
	jne	SHORT $LN9@Message
	push	OFFSET ??_C@_0BE@FCNOHKJO@OA?5not?5initialized?4?$AA@
	push	OFFSET ??_C@_0L@MJEBIGKE@ERROR?3?5?$CFs?6?$AA@
	call	DWORD PTR __imp____iob_func
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH

; 721  : }

	add	esp, 12					; 0000000cH
	ret	8

; 720  : 	oaSendSignal(OA_SIGNAL_ERROR, &Message);

$LN9@Message:
	mov	eax, DWORD PTR _FuncTable+44
	test	eax, eax
	je	SHORT $LN8@Message
	lea	edx, DWORD PTR _Message$[esp+12]
	push	edx
	push	1
	call	eax
	add	esp, 8
$LN8@Message:

; 721  : }

	add	esp, 12					; 0000000cH
	ret	8
?Message@xrSASH@@AAEXW4oaErrorType@@PBD@Z ENDP		; xrSASH::Message
_TEXT	ENDS
PUBLIC	?GetBenchmarks@xrSASH@@AAEXXZ			; xrSASH::GetBenchmarks
; Function compile flags: /Ogtpy
;	COMDAT ?GetBenchmarks@xrSASH@@AAEXXZ
_TEXT	SEGMENT
?GetBenchmarks@xrSASH@@AAEXXZ PROC			; xrSASH::GetBenchmarks, COMDAT
; _this$ = ecx

; 420  : 	Msg("SASH:: GetBenchmarks.");

	push	OFFSET ??_C@_0BG@EJADJCDM@SASH?3?3?5GetBenchmarks?4?$AA@
	call	DWORD PTR __imp_?Msg@@YAXPBDZZ
	add	esp, 4

; 421  : 	/* foreach known available benchmark */
; 422  : 	{
; 423  : 		/* Set BenchmarkName to a unique string identifying the benchmark */
; 424  : 
; 425  : 		oaAddBenchmark(TEXT("dummy"));

	cmp	DWORD PTR _InitFlag, 0
	jne	SHORT $LN4@GetBenchma
	push	OFFSET ??_C@_0BE@FCNOHKJO@OA?5not?5initialized?4?$AA@
	push	OFFSET ??_C@_0L@MJEBIGKE@ERROR?3?5?$CFs?6?$AA@
	call	DWORD PTR __imp____iob_func
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH

; 426  : 		//sashAddBenchmark(TEXT("crates"));
; 427  : 		//sashAddBenchmark(TEXT("map1"));
; 428  : 	}
; 429  : }

	ret	0

; 421  : 	/* foreach known available benchmark */
; 422  : 	{
; 423  : 		/* Set BenchmarkName to a unique string identifying the benchmark */
; 424  : 
; 425  : 		oaAddBenchmark(TEXT("dummy"));

$LN4@GetBenchma:
	mov	eax, DWORD PTR _FuncTable+20
	test	eax, eax
	je	SHORT $LN3@GetBenchma
	push	OFFSET ??_C@_05JLNEMJLN@dummy?$AA@
	call	eax
	pop	ecx
$LN3@GetBenchma:

; 426  : 		//sashAddBenchmark(TEXT("crates"));
; 427  : 		//sashAddBenchmark(TEXT("map1"));
; 428  : 	}
; 429  : }

	ret	0
?GetBenchmarks@xrSASH@@AAEXXZ ENDP			; xrSASH::GetBenchmarks
_TEXT	ENDS
PUBLIC	?EndBenchmark@xrSASH@@QAEXXZ			; xrSASH::EndBenchmark
; Function compile flags: /Ogtpy
;	COMDAT ?EndBenchmark@xrSASH@@QAEXXZ
_TEXT	SEGMENT
?EndBenchmark@xrSASH@@QAEXXZ PROC			; xrSASH::EndBenchmark, COMDAT
; _this$ = ecx

; 245  : 	if (!m_bRunning) return;

	cmp	BYTE PTR [ecx+2], 0
	je	SHORT $LN7@EndBenchma

; 246  : 
; 247  : 	VERIFY(m_bBenchmarkRunning);
; 248  : 
; 249  : 	m_bBenchmarkRunning = false;
; 250  : 	oaEndBenchmark();

	cmp	DWORD PTR _InitFlag, 0
	mov	BYTE PTR [ecx+3], 0
	jne	SHORT $LN8@EndBenchma
	push	OFFSET ??_C@_0BE@FCNOHKJO@OA?5not?5initialized?4?$AA@
	push	OFFSET ??_C@_0L@MJEBIGKE@ERROR?3?5?$CFs?6?$AA@
	call	DWORD PTR __imp____iob_func
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
$LN7@EndBenchma:

; 251  : }

	ret	0

; 246  : 
; 247  : 	VERIFY(m_bBenchmarkRunning);
; 248  : 
; 249  : 	m_bBenchmarkRunning = false;
; 250  : 	oaEndBenchmark();

$LN8@EndBenchma:
	mov	eax, DWORD PTR _FuncTable+36
	test	eax, eax
	je	SHORT $LN7@EndBenchma
	jmp	eax
?EndBenchmark@xrSASH@@QAEXXZ ENDP			; xrSASH::EndBenchmark
PUBLIC	?Message@xrSASH@@AAEXW4oaErrorType@@PBDAAPAD@Z	; xrSASH::Message
; Function compile flags: /Ogtpy
;	COMDAT ?Message@xrSASH@@AAEXW4oaErrorType@@PBDAAPAD@Z
_TEXT	SEGMENT
_buf$ = -2048						; size = 2048
_MessageType$ = 8					; size = 4
_pszMsg$ = 12						; size = 4
_mark$ = 16						; size = 4
?Message@xrSASH@@AAEXW4oaErrorType@@PBDAAPAD@Z PROC	; xrSASH::Message, COMDAT
; _this$ = ecx

; 724  : {

	sub	esp, 2048				; 00000800H

; 725  : 	VERIFY(m_bInited);
; 726  : 
; 727  : 	string2048	buf;
; 728  : 	int sz		= _vsnprintf(buf, sizeof(buf)-1, pszMsg, mark ); buf[sizeof(buf)-1]=0;

	mov	eax, DWORD PTR _mark$[esp+2044]
	mov	edx, DWORD PTR _pszMsg$[esp+2044]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	edx
	lea	eax, DWORD PTR _buf$[esp+2060]
	push	2047					; 000007ffH
	push	eax
	call	DWORD PTR __imp___vsnprintf
	add	esp, 16					; 00000010H

; 729  : 
; 730  : 	if (sz)	Message(MessageType, buf);

	test	eax, eax
	mov	BYTE PTR _buf$[esp+4099], 0
	je	SHORT $LN1@Message@2
	mov	edx, DWORD PTR _MessageType$[esp+2048]
	lea	ecx, DWORD PTR _buf$[esp+2052]
	push	ecx
	push	edx
	mov	ecx, esi
	call	?Message@xrSASH@@AAEXW4oaErrorType@@PBD@Z ; xrSASH::Message
$LN1@Message@2:
	pop	esi

; 731  : }

	add	esp, 2048				; 00000800H
	ret	12					; 0000000cH
?Message@xrSASH@@AAEXW4oaErrorType@@PBDAAPAD@Z ENDP	; xrSASH::Message
_TEXT	ENDS
PUBLIC	?Init@xrSASH@@QAE_NPBD@Z			; xrSASH::Init
; Function compile flags: /Ogtpy
;	COMDAT ?Init@xrSASH@@QAE_NPBD@Z
_TEXT	SEGMENT
_ver$ = -16						; size = 16
_pszParam$ = 8						; size = 4
?Init@xrSASH@@QAE_NPBD@Z PROC				; xrSASH::Init, COMDAT
; _this$ = ecx

; 24   : {

	sub	esp, 16					; 00000010H
	push	ebx

; 25   : 	oaVersion ver;
; 26   : 	oaBool res = oaInit(pszParam, &ver);

	mov	ebx, DWORD PTR _pszParam$[esp+16]
	push	esi
	lea	eax, DWORD PTR _ver$[esp+24]
	push	eax
	mov	esi, ecx
	call	_oaInit
	add	esp, 4

; 27   : 	if (res)

	test	eax, eax

; 28   : 	{
; 29   : 		m_bInited = true;

	mov	BYTE PTR [esi], 1
	je	SHORT $LN2@Init

; 30   : 		m_bOpenAutomate = true;
; 31   : 
; 32   : 		Msg("oa:: Version: %d.%d.%d.%d", ver.Major, ver.Minor, ver.Minor, ver.Custom);

	mov	ecx, DWORD PTR _ver$[esp+32]
	mov	eax, DWORD PTR _ver$[esp+28]
	mov	edx, DWORD PTR _ver$[esp+24]
	push	ecx
	push	eax
	push	eax
	push	edx
	push	OFFSET ??_C@_0BK@LNLPCG@oa?3?3?5Version?3?5?$CFd?4?$CFd?4?$CFd?4?$CFd?$AA@
	mov	BYTE PTR [esi+1], 1
	call	DWORD PTR __imp_?Msg@@YAXPBDZZ
	add	esp, 20					; 00000014H

; 33   : 
; 34   : 		return true;

	mov	al, 1

; 42   : 		return false;
; 43   : 	}
; 44   : }

	pop	esi
	pop	ebx
	add	esp, 16					; 00000010H
	ret	4
$LN2@Init:

; 35   : 	}
; 36   : 	else
; 37   : 	{
; 38   : 		m_bInited = true;
; 39   : 		xr_strcpy( m_strBenchCfgName, pszParam);

	push	ebx
	add	esi, 6
	push	esi
	call	??$xr_strcpy@$0EA@@@YAHAAY0EA@DPBD@Z	; xr_strcpy<64>

; 40   : 		Msg("oa:: Failed to init.");

	mov	esi, DWORD PTR __imp_?Msg@@YAXPBDZZ
	push	OFFSET ??_C@_0BF@IPOMEDHB@oa?3?3?5Failed?5to?5init?4?$AA@
	call	esi

; 41   : 		Msg("oa:: Running native path.");

	push	OFFSET ??_C@_0BK@IDINEHDH@oa?3?3?5Running?5native?5path?4?$AA@
	call	esi
	add	esp, 16					; 00000010H

; 42   : 		return false;
; 43   : 	}
; 44   : }

	pop	esi
	xor	al, al
	pop	ebx
	add	esp, 16					; 00000010H
	ret	4
?Init@xrSASH@@QAE_NPBD@Z ENDP				; xrSASH::Init
PUBLIC	?OnConsoleInvalidSyntax@xrSASH@@QAAX_NPBDZZ	; xrSASH::OnConsoleInvalidSyntax
; Function compile flags: /Ogtpy
;	COMDAT ?OnConsoleInvalidSyntax@xrSASH@@QAAX_NPBDZZ
_TEXT	SEGMENT
_mark$118103 = 8					; size = 4
_this$ = 8						; size = 4
_bLastLine$ = 12					; size = 1
_pszMsg$ = 16						; size = 4
?OnConsoleInvalidSyntax@xrSASH@@QAAX_NPBDZZ PROC	; xrSASH::OnConsoleInvalidSyntax, COMDAT

; 735  : 	if ( m_bInited && m_bExecutingConsoleCommand)

	mov	ecx, DWORD PTR _this$[esp-4]
	cmp	BYTE PTR [ecx], 0
	je	SHORT $LN1@OnConsoleI
	cmp	BYTE PTR [ecx+5], 0
	je	SHORT $LN1@OnConsoleI

; 736  : 	{
; 737  : 		va_list		mark;
; 738  : 		va_start	(mark, pszMsg );
; 739  : 
; 740  : 		if (bLastLine)

	cmp	BYTE PTR _bLastLine$[esp-4], 0
	lea	eax, DWORD PTR _pszMsg$[esp]

; 741  : 			Message( OA_ERROR_INVALID_OPTION_VALUE, pszMsg, mark);

	lea	edx, DWORD PTR _mark$118103[esp-4]
	mov	DWORD PTR _mark$118103[esp-4], eax
	mov	eax, DWORD PTR _pszMsg$[esp-4]
	push	edx
	push	eax
	je	SHORT $LN2@OnConsoleI
	push	17					; 00000011H

; 742  : 		else
; 743  : 			Message( OA_ERROR_LOG, pszMsg, mark);

	call	?Message@xrSASH@@AAEXW4oaErrorType@@PBDAAPAD@Z ; xrSASH::Message

; 744  : 
; 745  : 		va_end		(mark);
; 746  : 	}
; 747  : }

	ret	0
$LN2@OnConsoleI:

; 742  : 		else
; 743  : 			Message( OA_ERROR_LOG, pszMsg, mark);

	push	2
	call	?Message@xrSASH@@AAEXW4oaErrorType@@PBDAAPAD@Z ; xrSASH::Message
$LN1@OnConsoleI:

; 744  : 
; 745  : 		va_end		(mark);
; 746  : 	}
; 747  : }

	ret	0
?OnConsoleInvalidSyntax@xrSASH@@QAAX_NPBDZZ ENDP	; xrSASH::OnConsoleInvalidSyntax
_TEXT	ENDS
PUBLIC	?ReportNative@xrSASH@@AAEXPBD@Z			; xrSASH::ReportNative
; Function compile flags: /Ogtpy
;	COMDAT ?ReportNative@xrSASH@@AAEXPBD@Z
_TEXT	SEGMENT
_fNumFrames$ = -1112					; size = 4
_it$117585 = -1112					; size = 4
_fTotal$ = -1108					; size = 4
_fTime$117589 = -1108					; size = 4
_fMaxFps$ = -1104					; size = 4
_fMinFps$ = -1100					; size = 4
_id$117611 = -1096					; size = 32
_res$ = -1064						; size = 540
_fname$ = -520						; size = 520
_pszTestName$ = 8					; size = 4
?ReportNative@xrSASH@@AAEXPBD@Z PROC			; xrSASH::ReportNative, COMDAT
; _this$ = ecx

; 155  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 1116				; 0000045cH

; 156  : 	string_path			fname;
; 157  : 	xr_sprintf( fname, sizeof(fname), "%s.result", pszTestName );

	mov	eax, DWORD PTR _pszTestName$[ebp]
	push	ebx
	push	esi
	push	edi
	push	eax
	mov	esi, ecx
	lea	ecx, DWORD PTR _fname$[esp+1132]
	push	OFFSET ??_C@_09FLBAMLIF@?$CFs?4result?$AA@
	push	ecx
	mov	eax, 520				; 00000208H
	call	?xr_sprintf@@YAHPADIPBDZZ		; xr_sprintf

; 158  : 	FS.update_path( fname, "$app_data_root$", fname );

	mov	ecx, DWORD PTR __imp_?xr_FS@@3PAVCLocatorAPI@@A
	mov	ecx, DWORD PTR [ecx]
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR _fname$[esp+1128]
	push	edx
	push	OFFSET ??_C@_0BA@BDJNLMJI@$app_data_root$?$AA@
	mov	eax, edx
	push	eax
	call	DWORD PTR __imp_?update_path@CLocatorAPI@@QAEPBDAAY0CAI@DPBD1@Z

; 159  : 	CInifile	res( fname, FALSE, FALSE, TRUE );

	sub	esp, 8
	mov	ecx, esp
	call	??0?$FastDelegate@$$A6A_NPBD@Z@fastdelegate@@QAE@XZ ; fastdelegate::FastDelegate<bool __cdecl(char const *)>::FastDelegate<bool __cdecl(char const *)>
	xor	edi, edi
	push	edi
	push	1
	push	edi
	push	edi
	lea	edx, DWORD PTR _fname$[esp+1152]
	push	edx
	lea	ecx, DWORD PTR _res$[esp+1156]
	call	DWORD PTR __imp_??0CInifile@@QAE@PBDHHHIV?$FastDelegate@$$A6A_NPBD@Z@fastdelegate@@@Z

; 160  : 
; 161  : 	// min/max/average
; 162  : 	float fMinFps	= flt_max;

	movss	xmm0, DWORD PTR __real@7f7fffff
	movss	DWORD PTR _fMinFps$[esp+1128], xmm0

; 163  : 	float fMaxFps	= flt_min;

	movss	xmm0, DWORD PTR __real@ff7fffff

; 164  : 
; 165  : 	const u32 iWindowSize	=	15;
; 166  : 
; 167  : 	if ( m_aFrimeTimes.size() > iWindowSize*4 )

	add	esi, 128				; 00000080H
	mov	ecx, esi
	movss	DWORD PTR _fMaxFps$[esp+1128], xmm0
	call	?size@?$_Impl_vector@MV?$xalloc@M@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<float,xalloc<float> >::size
	cmp	eax, 60					; 0000003cH

; 168  : 	{
; 169  : 		for (u32 it=0; it<m_aFrimeTimes.size()-iWindowSize; it++)

	mov	ecx, esi
	jbe	$LN18@ReportNati
	mov	DWORD PTR _it$117585[esp+1128], edi
	call	?size@?$_Impl_vector@MV?$xalloc@M@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<float,xalloc<float> >::size
	sub	eax, 15					; 0000000fH
	je	$LN6@ReportNati
$LN17@ReportNati:
	mov	edi, DWORD PTR _it$117585[esp+1128]

; 170  : 		{
; 171  : 			float	fTime = 0;

	xorps	xmm0, xmm0
	add	edi, edi
	movss	DWORD PTR _fTime$117589[esp+1128], xmm0
	add	edi, edi
	mov	ebx, 15					; 0000000fH
	npad	4
$LL14@ReportNati:

; 172  : 
; 173  : 			for (u32 i=0; i<iWindowSize; ++i)
; 174  : 				fTime += m_aFrimeTimes[it+i];

	mov	ecx, esi
	call	?begin@?$_Impl_vector@MV?$xalloc@M@@@priv@stlp_std@@QAEPAMXZ ; stlp_std::priv::_Impl_vector<float,xalloc<float> >::begin
	movss	xmm1, DWORD PTR [edi+eax]
	addss	xmm1, DWORD PTR _fTime$117589[esp+1128]
	add	edi, 4
	sub	ebx, 1
	movss	DWORD PTR _fTime$117589[esp+1128], xmm1
	jne	SHORT $LL14@ReportNati

; 175  : 
; 176  : 			float fFps	= iWindowSize / fTime;

	movss	xmm0, DWORD PTR __real@41700000
	divss	xmm0, xmm1

; 177  : 			if ( fFps<fMinFps ) fMinFps = fFps;

	movss	xmm1, DWORD PTR _fMinFps$[esp+1128]
	comiss	xmm1, xmm0
	jbe	SHORT $LN11@ReportNati
	movss	DWORD PTR _fMinFps$[esp+1128], xmm0
$LN11@ReportNati:

; 178  : 			if ( fFps>fMaxFps ) fMaxFps = fFps;

	comiss	xmm0, DWORD PTR _fMaxFps$[esp+1128]
	jbe	SHORT $LN16@ReportNati
	movss	DWORD PTR _fMaxFps$[esp+1128], xmm0
$LN16@ReportNati:

; 168  : 	{
; 169  : 		for (u32 it=0; it<m_aFrimeTimes.size()-iWindowSize; it++)

	mov	edi, DWORD PTR _it$117585[esp+1128]
	add	edi, 1
	mov	ecx, esi
	mov	DWORD PTR _it$117585[esp+1128], edi
	call	?size@?$_Impl_vector@MV?$xalloc@M@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<float,xalloc<float> >::size
	sub	eax, 15					; 0000000fH
	cmp	edi, eax
	jb	SHORT $LN17@ReportNati

; 179  : 		}
; 180  : 	}
; 181  : 	else

	jmp	SHORT $LN6@ReportNati
$LN18@ReportNati:

; 182  : 	{
; 183  : 		for (u32	it=0; it<m_aFrimeTimes.size(); it++)

	call	?size@?$_Impl_vector@MV?$xalloc@M@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<float,xalloc<float> >::size
	test	eax, eax
	jbe	SHORT $LN6@ReportNati
	npad	2
$LL8@ReportNati:

; 184  : 		{
; 185  : 			float fFps	= 1.f / m_aFrimeTimes[it];

	mov	ecx, esi
	call	?begin@?$_Impl_vector@MV?$xalloc@M@@@priv@stlp_std@@QAEPAMXZ ; stlp_std::priv::_Impl_vector<float,xalloc<float> >::begin
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR [eax+edi*4]

; 186  : 			if (fFps<fMinFps) fMinFps = fFps;

	movss	xmm1, DWORD PTR _fMinFps$[esp+1128]
	comiss	xmm1, xmm0
	jbe	SHORT $LN5@ReportNati
	movss	DWORD PTR _fMinFps$[esp+1128], xmm0
$LN5@ReportNati:

; 187  : 			if (fFps>fMaxFps) fMaxFps = fFps;

	comiss	xmm0, DWORD PTR _fMaxFps$[esp+1128]
	jbe	SHORT $LN7@ReportNati
	movss	DWORD PTR _fMaxFps$[esp+1128], xmm0
$LN7@ReportNati:

; 182  : 	{
; 183  : 		for (u32	it=0; it<m_aFrimeTimes.size(); it++)

	mov	ecx, esi
	add	edi, 1
	call	?size@?$_Impl_vector@MV?$xalloc@M@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<float,xalloc<float> >::size
	cmp	edi, eax
	jb	SHORT $LL8@ReportNati
$LN6@ReportNati:

; 188  : 		}
; 189  : 	}
; 190  : 
; 191  : 	//res.w_float			("general","test float",	float(1.0f)/10.f,	"dx-level required"		);
; 192  : 	//res.w_float			("general","renderer",	float(::Render->get_generation())/10.f,	"dx-level required"		);
; 193  : 	//res.w_float			("general","average",	rfps_average,							"average for this run"	);
; 194  : 	//res.w_float			("general","middle",	rfps_middlepoint,						"per-frame middle-point");
; 195  : 	float fTotal = 0;

	xorps	xmm0, xmm0

; 196  : 	float fNumFrames = 0;
; 197  : 	for (u32	it=0; it<m_aFrimeTimes.size(); it++)

	mov	ecx, esi
	movss	DWORD PTR _fTotal$[esp+1128], xmm0
	movss	DWORD PTR _fNumFrames$[esp+1128], xmm0
	xor	edi, edi
	call	?size@?$_Impl_vector@MV?$xalloc@M@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<float,xalloc<float> >::size
	test	eax, eax
	mov	ebx, DWORD PTR __imp_?w_float@CInifile@@QAEXPBD0M0@Z
	jbe	SHORT $LN1@ReportNati
$LL3@ReportNati:

; 198  : 	{
; 199  : 		string32		id;
; 200  : 		xr_sprintf		(id,sizeof(id),"%07d",it);

	push	edi
	lea	eax, DWORD PTR _id$117611[esp+1132]
	push	OFFSET ??_C@_04OAGCANIB@?$CF07d?$AA@
	push	eax
	mov	eax, 32					; 00000020H
	call	?xr_sprintf@@YAHPADIPBDZZ		; xr_sprintf
	add	esp, 12					; 0000000cH

; 201  : 		res.w_float		("per_frame_stats",	id, 1.f / m_aFrimeTimes[it]);

	mov	ecx, esi
	call	?begin@?$_Impl_vector@MV?$xalloc@M@@@priv@stlp_std@@QAEPAMXZ ; stlp_std::priv::_Impl_vector<float,xalloc<float> >::begin
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR [eax+edi*4]
	push	0
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _id$117611[esp+1136]
	push	ecx
	push	OFFSET ??_C@_0BA@HCEKDGCO@per_frame_stats?$AA@
	lea	ecx, DWORD PTR _res$[esp+1144]
	call	ebx

; 202  : 		fTotal += m_aFrimeTimes[it];

	mov	ecx, esi
	call	?begin@?$_Impl_vector@MV?$xalloc@M@@@priv@stlp_std@@QAEPAMXZ ; stlp_std::priv::_Impl_vector<float,xalloc<float> >::begin
	movss	xmm0, DWORD PTR [eax+edi*4]
	addss	xmm0, DWORD PTR _fTotal$[esp+1128]
	movss	DWORD PTR _fTotal$[esp+1128], xmm0

; 203  : 		fNumFrames += 1;

	movss	xmm0, DWORD PTR _fNumFrames$[esp+1128]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	ecx, esi
	movss	DWORD PTR _fNumFrames$[esp+1128], xmm0
	add	edi, 1
	call	?size@?$_Impl_vector@MV?$xalloc@M@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<float,xalloc<float> >::size
	cmp	edi, eax
	jb	SHORT $LL3@ReportNati
$LN1@ReportNati:

; 204  : 	}
; 205  : 
; 206  : 	//	Output statistics
; 207  : 	res.w_float			("general","average",	fNumFrames/fTotal,	"average for this run"	);

	movss	xmm0, DWORD PTR _fNumFrames$[esp+1128]
	divss	xmm0, DWORD PTR _fTotal$[esp+1128]
	push	OFFSET ??_C@_0BF@JFNMHPHL@average?5for?5this?5run?$AA@
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_07EIHJKMF@average?$AA@
	push	OFFSET ??_C@_07LLDKJBMK@general?$AA@
	lea	ecx, DWORD PTR _res$[esp+1144]
	call	ebx

; 208  : 	res.w_float			("general","min",		fMinFps,			"absolute (smoothed) minimum"		);

	fld	DWORD PTR _fMinFps$[esp+1128]
	push	OFFSET ??_C@_0BM@BDDKKEOG@absolute?5?$CIsmoothed?$CJ?5minimum?$AA@
	push	ecx
	fstp	DWORD PTR [esp]
	push	OFFSET ??_C@_03KLIPLJLL@min?$AA@
	push	OFFSET ??_C@_07LLDKJBMK@general?$AA@
	lea	ecx, DWORD PTR _res$[esp+1144]
	call	ebx

; 209  : 	res.w_float			("general","max",		fMaxFps,			"absolute (smoothed) maximum"		);

	fld	DWORD PTR _fMaxFps$[esp+1128]
	push	OFFSET ??_C@_0BM@PFFKALAH@absolute?5?$CIsmoothed?$CJ?5maximum?$AA@
	push	ecx
	fstp	DWORD PTR [esp]
	push	OFFSET ??_C@_03LJAEFNNE@max?$AA@
	push	OFFSET ??_C@_07LLDKJBMK@general?$AA@
	lea	ecx, DWORD PTR _res$[esp+1144]
	call	ebx

; 210  : }

	lea	ecx, DWORD PTR _res$[esp+1128]
	call	DWORD PTR __imp_??1CInifile@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ReportNative@xrSASH@@AAEXPBD@Z ENDP			; xrSASH::ReportNative
_TEXT	ENDS
PUBLIC	??1xrSASH@@QAE@XZ				; xrSASH::~xrSASH
; Function compile flags: /Ogtpy
;	COMDAT ??1xrSASH@@QAE@XZ
_TEXT	SEGMENT
??1xrSASH@@QAE@XZ PROC					; xrSASH::~xrSASH, COMDAT
; _this$ = ecx

; 19   : 	VERIFY(!m_bRunning);
; 20   : 	VERIFY(!m_bBenchmarkRunning);
; 21   : }

	add	ecx, 128				; 00000080H
	jmp	??1?$_Impl_vector@MV?$xalloc@M@@@priv@stlp_std@@QAE@XZ ; stlp_std::priv::_Impl_vector<float,xalloc<float> >::~_Impl_vector<float,xalloc<float> >
??1xrSASH@@QAE@XZ ENDP					; xrSASH::~xrSASH
PUBLIC	?GetOption@xrSASH@@AAEXPAD@Z			; xrSASH::GetOption
; Function compile flags: /Ogtpy
;	COMDAT ?GetOption@xrSASH@@AAEXPAD@Z
_TEXT	SEGMENT
_Val$ = -264						; size = 8
_stat$118019 = -256					; size = 256
_pszOptionName$ = 8					; size = 4
?GetOption@xrSASH@@AAEXPAD@Z PROC			; xrSASH::GetOption, COMDAT
; _this$ = ecx

; 614  : 	oaValue Val;
; 615  : 
; 616  : 	CConsole::vecCMD_IT I = Console->Commands.find(pszOptionName);

	mov	eax, DWORD PTR ?Console@@3PAVCConsole@@A ; Console
	sub	esp, 264				; 00000108H
	push	ebx
	push	ebp
	push	esi
	push	edi
	add	eax, 176				; 000000b0H
	push	eax
	lea	edi, DWORD PTR _pszOptionName$[esp+280]
	call	??$_M_find@PAD@?$_Rb_tree@PBDUstr_pred@CConsole@@U?$pair@QBDPAVIConsole_Command@@@stlp_std@@U?$_Select1st@U?$pair@QBDPAVIConsole_Command@@@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@QBDPAVIConsole_Command@@@stlp_std@@@64@V?$xalloc@U?$pair@PBDPAVIConsole_Command@@@stlp_std@@@@@priv@stlp_std@@ABEPAU_Rb_tree_node_base@12@ABQAD@Z ; stlp_std::priv::_Rb_tree<char const *,CConsole::str_pred,stlp_std::pair<char const * const,IConsole_Command *>,stlp_std::priv::_Select1st<stlp_std::pair<char const * const,IConsole_Command *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<char const * const,IConsole_Command *> >,xalloc<stlp_std::pair<char const *,IConsole_Command *> > >::_M_find<char *>

; 617  : 	if (I==Console->Commands.end())

	mov	ecx, DWORD PTR ?Console@@3PAVCConsole@@A ; Console
	add	ecx, 176				; 000000b0H
	cmp	eax, ecx
	jne	SHORT $LN15@GetOption

; 618  : 	{
; 619  : 		Msg("SASH:: Option \"%s\" not found.", pszOptionName);

	mov	eax, DWORD PTR _pszOptionName$[esp+276]
	push	eax
	push	OFFSET ??_C@_0BO@CPCPAKNB@SASH?3?3?5Option?5?$CC?$CFs?$CC?5not?5found?4?$AA@
	call	DWORD PTR __imp_?Msg@@YAXPBDZZ
	add	esp, 8

; 654  : 	}
; 655  : 	else
; 656  : 	{
; 657  : 		VERIFY(!"Unsupported console command type.");
; 658  : 	}
; 659  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 264				; 00000108H
	ret	4
$LN15@GetOption:

; 620  : 		VERIFY(I!=Console->Commands.end());
; 621  : 		return;
; 622  : 	}
; 623  : 	
; 624  : 
; 625  : 	IConsole_Command* pCmd = I->second;

	mov	esi, DWORD PTR [eax+20]

; 626  : 	CCC_Mask* pMask = dynamic_cast<CCC_Mask*>(pCmd);

	push	0
	push	OFFSET ??_R0?AVCCC_Mask@@@8
	push	OFFSET ??_R0?AVIConsole_Command@@@8
	push	0
	push	esi
	call	___RTDynamicCast

; 627  : 	CCC_Token* pToken = dynamic_cast<CCC_Token*>(pCmd);

	push	0
	push	OFFSET ??_R0?AVCCC_Token@@@8
	push	OFFSET ??_R0?AVIConsole_Command@@@8
	push	0
	push	esi
	mov	edi, eax
	call	___RTDynamicCast

; 628  : 	CCC_Float* pFloat = dynamic_cast<CCC_Float*>(pCmd);

	push	0
	push	OFFSET ??_R0?AVCCC_Float@@@8
	push	OFFSET ??_R0?AVIConsole_Command@@@8
	push	0
	push	esi
	mov	ebx, eax
	call	___RTDynamicCast

; 629  : 	CCC_Integer* pInt = dynamic_cast<CCC_Integer*>(pCmd);

	push	0
	push	OFFSET ??_R0?AVCCC_Integer@@@8
	push	OFFSET ??_R0?AVIConsole_Command@@@8
	push	0
	push	esi
	mov	ebp, eax
	call	___RTDynamicCast

; 630  : 
; 631  : 	Msg("SASH:: Getting option \"%s\".", pszOptionName);

	mov	ecx, DWORD PTR _pszOptionName$[esp+356]
	add	esp, 80					; 00000050H
	push	ecx
	push	OFFSET ??_C@_0BM@BIOJMCHE@SASH?3?3?5Getting?5option?5?$CC?$CFs?$CC?4?$AA@
	mov	esi, eax
	call	DWORD PTR __imp_?Msg@@YAXPBDZZ
	add	esp, 8

; 632  : 
; 633  : 	if (pMask)

	test	edi, edi
	je	SHORT $LN11@GetOption

; 634  : 	{
; 635  : 		Val.Bool = pMask->GetValue() ? OA_TRUE : OA_FALSE;

	mov	edx, DWORD PTR [edi+28]
	mov	ecx, DWORD PTR [edi+24]
	push	edx
	call	?test@?$_flags@I@@QBEHI@Z		; _flags<unsigned int>::test
	neg	eax
	sbb	eax, eax
	neg	eax

; 636  : 		oaAddOptionValue( pszOptionName, OA_TYPE_BOOL, &Val );

	cmp	DWORD PTR _InitFlag, 0
	mov	DWORD PTR _Val$[esp+280], eax
	jne	SHORT $LN49@GetOption
$LN62@GetOption:
	push	OFFSET ??_C@_0BE@FCNOHKJO@OA?5not?5initialized?4?$AA@
	push	OFFSET ??_C@_0L@MJEBIGKE@ERROR?3?5?$CFs?6?$AA@
	call	DWORD PTR __imp____iob_func
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf

; 653  : 		oaAddOptionValue( pszOptionName, OA_TYPE_INT, &Val );

	add	esp, 12					; 0000000cH

; 654  : 	}
; 655  : 	else
; 656  : 	{
; 657  : 		VERIFY(!"Unsupported console command type.");
; 658  : 	}
; 659  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 264				; 00000108H
	ret	4

; 636  : 		oaAddOptionValue( pszOptionName, OA_TYPE_BOOL, &Val );

$LN49@GetOption:
	mov	eax, DWORD PTR _FuncTable+16
	test	eax, eax
	je	$LN1@GetOption
	mov	edx, DWORD PTR _pszOptionName$[esp+276]
	lea	ecx, DWORD PTR _Val$[esp+280]
	push	ecx
	push	5
	push	edx
	call	eax

; 653  : 		oaAddOptionValue( pszOptionName, OA_TYPE_INT, &Val );

	add	esp, 12					; 0000000cH

; 654  : 	}
; 655  : 	else
; 656  : 	{
; 657  : 		VERIFY(!"Unsupported console command type.");
; 658  : 	}
; 659  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 264				; 00000108H
	ret	4
$LN11@GetOption:

; 637  : 	}
; 638  : 	else if (pToken)

	test	ebx, ebx
	je	SHORT $LN9@GetOption

; 639  : 	{
; 640  : 		IConsole_Command::TStatus stat;
; 641  : 		pToken->Status(stat);

	mov	eax, DWORD PTR [ebx]
	mov	edx, DWORD PTR [eax+8]
	lea	ecx, DWORD PTR _stat$118019[esp+280]
	push	ecx
	mov	ecx, ebx
	call	edx

; 642  : 		Val.Enum = stat;
; 643  : 		oaAddOptionValue( pszOptionName, OA_TYPE_ENUM, &Val );

	cmp	DWORD PTR _InitFlag, 0
	lea	eax, DWORD PTR _stat$118019[esp+280]
	mov	DWORD PTR _Val$[esp+280], eax
	je	SHORT $LN62@GetOption
	mov	eax, DWORD PTR _FuncTable+16
	test	eax, eax
	je	SHORT $LN1@GetOption
	mov	edx, DWORD PTR _pszOptionName$[esp+276]
	lea	ecx, DWORD PTR _Val$[esp+280]
	push	ecx
	push	4
	push	edx
	call	eax

; 653  : 		oaAddOptionValue( pszOptionName, OA_TYPE_INT, &Val );

	add	esp, 12					; 0000000cH

; 654  : 	}
; 655  : 	else
; 656  : 	{
; 657  : 		VERIFY(!"Unsupported console command type.");
; 658  : 	}
; 659  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 264				; 00000108H
	ret	4
$LN9@GetOption:

; 644  : 	}
; 645  : 	else if (pFloat)

	test	ebp, ebp
	je	SHORT $LN7@GetOption

; 646  : 	{
; 647  : 		Val.Float = pFloat->GetValue();

	mov	eax, DWORD PTR [ebp+24]
	fld	DWORD PTR [eax]

; 648  : 		oaAddOptionValue( pszOptionName, OA_TYPE_FLOAT, &Val );

	mov	edx, DWORD PTR _pszOptionName$[esp+276]
	lea	ecx, DWORD PTR _Val$[esp+280]
	fstp	QWORD PTR _Val$[esp+280]
	push	ecx
	push	3
	push	edx
	jmp	SHORT $LN61@GetOption
$LN7@GetOption:

; 649  : 	}
; 650  : 	else if (pInt)

	test	esi, esi
	je	SHORT $LN1@GetOption

; 651  : 	{
; 652  : 		Val.Int = pInt->GetValue();

	mov	eax, DWORD PTR [esi+24]
	mov	ecx, DWORD PTR [eax]

; 653  : 		oaAddOptionValue( pszOptionName, OA_TYPE_INT, &Val );

	mov	eax, DWORD PTR _pszOptionName$[esp+276]
	lea	edx, DWORD PTR _Val$[esp+280]
	push	edx
	push	2
	mov	DWORD PTR _Val$[esp+288], ecx
	push	eax
$LN61@GetOption:
	call	_oaAddOptionValue
	add	esp, 12					; 0000000cH
$LN1@GetOption:

; 654  : 	}
; 655  : 	else
; 656  : 	{
; 657  : 		VERIFY(!"Unsupported console command type.");
; 658  : 	}
; 659  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 264				; 00000108H
	ret	4
?GetOption@xrSASH@@AAEXPAD@Z ENDP			; xrSASH::GetOption
_TEXT	ENDS
PUBLIC	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption
; Function compile flags: /Ogtpy
;	COMDAT ?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z
_TEXT	SEGMENT
_mn$117982 = -88					; size = 4
_pFloat$ = -88						; size = 4
_mx$117983 = -84					; size = 4
_Option$ = -80						; size = 80
_pszOptionName$ = 8					; size = 4
_Dependency$ = 12					; size = 4
?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z PROC ; xrSASH::DescribeOption, COMDAT
; _this$ = ecx

; 545  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 546  : 	oaNamedOptionStruct Option; 
; 547  : 	oaInitOption(&Option);

	push	80					; 00000050H
	lea	eax, DWORD PTR _Option$[esp+108]
	push	0
	push	eax
	call	_memset

; 548  : 
; 549  : 	Option.Dependency = Dependency;
; 550  : 
; 551  : 	CConsole::vecCMD_IT I = Console->Commands.find(pszOptionName);

	mov	eax, DWORD PTR ?Console@@3PAVCConsole@@A ; Console
	mov	esi, DWORD PTR _Dependency$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _Option$[esp+104], 80		; 00000050H
	mov	DWORD PTR _Option$[esp+144], -1
	mov	ecx, 8
	lea	edi, DWORD PTR _Option$[esp+152]
	add	eax, 176				; 000000b0H
	rep movsd
	push	eax
	lea	edi, DWORD PTR _pszOptionName$[ebp]
	call	??$_M_find@PAD@?$_Rb_tree@PBDUstr_pred@CConsole@@U?$pair@QBDPAVIConsole_Command@@@stlp_std@@U?$_Select1st@U?$pair@QBDPAVIConsole_Command@@@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@QBDPAVIConsole_Command@@@stlp_std@@@64@V?$xalloc@U?$pair@PBDPAVIConsole_Command@@@stlp_std@@@@@priv@stlp_std@@ABEPAU_Rb_tree_node_base@12@ABQAD@Z ; stlp_std::priv::_Rb_tree<char const *,CConsole::str_pred,stlp_std::pair<char const * const,IConsole_Command *>,stlp_std::priv::_Select1st<stlp_std::pair<char const * const,IConsole_Command *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<char const * const,IConsole_Command *> >,xalloc<stlp_std::pair<char const *,IConsole_Command *> > >::_M_find<char *>

; 552  : 	if (I==Console->Commands.end())

	mov	ecx, DWORD PTR ?Console@@3PAVCConsole@@A ; Console
	add	ecx, 176				; 000000b0H
	cmp	eax, ecx
	jne	SHORT $LN17@DescribeOp

; 553  : 	{
; 554  : 		Msg("SASH:: Option \"%s\" not found.", pszOptionName);

	mov	ecx, DWORD PTR _pszOptionName$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BO@CPCPAKNB@SASH?3?3?5Option?5?$CC?$CFs?$CC?5not?5found?4?$AA@
	call	DWORD PTR __imp_?Msg@@YAXPBDZZ
	add	esp, 8

; 605  : 	}
; 606  : 	else
; 607  : 	{
; 608  : 		VERIFY(!"Unsupported console command type.");
; 609  : 	}
; 610  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN17@DescribeOp:

; 555  : 		VERIFY(I!=Console->Commands.end());
; 556  : 		return;
; 557  : 	}
; 558  : 	
; 559  : 	IConsole_Command* pCmd = I->second;

	mov	esi, DWORD PTR [eax+20]

; 560  : 	CCC_Mask* pMask = dynamic_cast<CCC_Mask*>(pCmd);

	push	0
	push	OFFSET ??_R0?AVCCC_Mask@@@8
	push	OFFSET ??_R0?AVIConsole_Command@@@8
	push	0
	push	esi
	call	___RTDynamicCast

; 561  : 	CCC_Token* pToken = dynamic_cast<CCC_Token*>(pCmd);

	push	0
	push	OFFSET ??_R0?AVCCC_Token@@@8
	push	OFFSET ??_R0?AVIConsole_Command@@@8
	push	0
	push	esi
	mov	ebx, eax
	call	___RTDynamicCast

; 562  : 	CCC_Float* pFloat = dynamic_cast<CCC_Float*>(pCmd);

	push	0
	push	OFFSET ??_R0?AVCCC_Float@@@8
	push	OFFSET ??_R0?AVIConsole_Command@@@8
	push	0
	push	esi
	mov	edi, eax
	call	___RTDynamicCast

; 563  : 	CCC_Integer* pInt = dynamic_cast<CCC_Integer*>(pCmd);

	push	0
	push	OFFSET ??_R0?AVCCC_Integer@@@8
	push	OFFSET ??_R0?AVIConsole_Command@@@8
	push	0
	push	esi
	mov	DWORD PTR _pFloat$[esp+184], eax
	call	___RTDynamicCast
	mov	esi, eax

; 564  : 
; 565  : 	Option.Name = pszOptionName;

	mov	eax, DWORD PTR _pszOptionName$[ebp]
	add	esp, 80					; 00000050H

; 566  : 
; 567  : 	Msg("SASH:: Registering option \"%s\".", pszOptionName);

	push	eax
	push	OFFSET ??_C@_0CA@IECNIKLH@SASH?3?3?5Registering?5option?5?$CC?$CFs?$CC?4?$AA@
	mov	DWORD PTR _Option$[esp+120], eax
	call	DWORD PTR __imp_?Msg@@YAXPBDZZ
	add	esp, 8

; 568  : 
; 569  : 	if (pMask)

	test	ebx, ebx
	je	SHORT $LN13@DescribeOp

; 570  : 	{
; 571  : 		Option.DataType = OA_TYPE_BOOL;
; 572  : 		oaAddOption(&Option);

	cmp	DWORD PTR _InitFlag, 0
	mov	DWORD PTR _Option$[esp+108], 5
	jne	SHORT $LN49@DescribeOp
	push	OFFSET ??_C@_0BE@FCNOHKJO@OA?5not?5initialized?4?$AA@
	push	OFFSET ??_C@_0L@MJEBIGKE@ERROR?3?5?$CFs?6?$AA@
	call	DWORD PTR __imp____iob_func
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH

; 605  : 	}
; 606  : 	else
; 607  : 	{
; 608  : 		VERIFY(!"Unsupported console command type.");
; 609  : 	}
; 610  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8

; 570  : 	{
; 571  : 		Option.DataType = OA_TYPE_BOOL;
; 572  : 		oaAddOption(&Option);

$LN49@DescribeOp:
	mov	eax, DWORD PTR _FuncTable+12
	test	eax, eax
	je	$LN1@DescribeOp
	lea	edx, DWORD PTR _Option$[esp+104]
	push	edx
	call	eax

; 603  : 		Option.MaxValue.Int		= mx;
; 604  : 		oaAddOption				(&Option);

	add	esp, 4

; 605  : 	}
; 606  : 	else
; 607  : 	{
; 608  : 		VERIFY(!"Unsupported console command type.");
; 609  : 	}
; 610  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN13@DescribeOp:

; 573  : 	}
; 574  : 	else if (pToken)

	test	edi, edi
	je	SHORT $LN11@DescribeOp

; 575  : 	{
; 576  : 		Option.DataType = OA_TYPE_ENUM;

	mov	DWORD PTR _Option$[esp+108], 4

; 577  : 		xr_token* pXRToken = pToken->GetToken();

	mov	eax, DWORD PTR [edi]
	mov	edx, DWORD PTR [eax+28]
	mov	ecx, edi
	call	edx
	mov	esi, eax

; 578  : 
; 579  : 		while (pXRToken->name)

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	$LN1@DescribeOp
	mov	edi, DWORD PTR __imp__fprintf
	mov	ebx, DWORD PTR __imp____iob_func
	npad	9
$LL10@DescribeOp:

; 580  : 		{
; 581  : 			Option.Value.Enum = (char*)pXRToken->name;
; 582  : 			oaAddOption(&Option);

	cmp	DWORD PTR _InitFlag, 0
	mov	DWORD PTR _Option$[esp+120], eax
	jne	SHORT $LN53@DescribeOp
	push	OFFSET ??_C@_0BE@FCNOHKJO@OA?5not?5initialized?4?$AA@
	push	OFFSET ??_C@_0L@MJEBIGKE@ERROR?3?5?$CFs?6?$AA@
	call	ebx
	add	eax, 64					; 00000040H
	push	eax
	call	edi
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN52@DescribeOp
$LN53@DescribeOp:
	mov	eax, DWORD PTR _FuncTable+12
	test	eax, eax
	je	SHORT $LN52@DescribeOp
	lea	ecx, DWORD PTR _Option$[esp+104]
	push	ecx
	call	eax
	add	esp, 4
$LN52@DescribeOp:
	mov	eax, DWORD PTR [esi+8]

; 583  : 			++pXRToken;

	add	esi, 8
	test	eax, eax
	jne	SHORT $LL10@DescribeOp

; 605  : 	}
; 606  : 	else
; 607  : 	{
; 608  : 		VERIFY(!"Unsupported console command type.");
; 609  : 	}
; 610  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN11@DescribeOp:

; 584  : 		}
; 585  : 	}
; 586  : 	else if (pFloat)

	mov	eax, DWORD PTR _pFloat$[esp+104]
	test	eax, eax
	je	SHORT $LN7@DescribeOp

; 587  : 	{
; 588  : 		Option.DataType = OA_TYPE_FLOAT;

	mov	DWORD PTR _Option$[esp+108], 3

; 589  : 		float mn,mx;
; 590  : 
; 591  : 		pFloat->GetBounds		(mn, mx);

	movss	xmm1, DWORD PTR [eax+28]
	movss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR _mn$117982[esp+104], xmm1

; 592  : 		Option.MinValue.Float	= mn;

	fld	DWORD PTR _mn$117982[esp+104]
	movss	DWORD PTR _mx$117983[esp+104], xmm0
	fstp	QWORD PTR _Option$[esp+128]

; 593  : 		Option.MaxValue.Float	= mx;
; 594  : 		Option.NumSteps			= (int)((mx - mn) / 0.1f);

	subss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@41200000
	fld	DWORD PTR _mx$117983[esp+104]

; 595  : 		oaAddOption				(&Option);

	lea	eax, DWORD PTR _Option$[esp+104]
	fstp	QWORD PTR _Option$[esp+136]
	cvttss2si edx, xmm0
	push	eax
	mov	DWORD PTR _Option$[esp+148], edx

; 603  : 		Option.MaxValue.Int		= mx;
; 604  : 		oaAddOption				(&Option);

	call	_oaAddOption
	add	esp, 4

; 605  : 	}
; 606  : 	else
; 607  : 	{
; 608  : 		VERIFY(!"Unsupported console command type.");
; 609  : 	}
; 610  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN7@DescribeOp:

; 596  : 	}
; 597  : 	else if (pInt)

	test	esi, esi
	je	SHORT $LN1@DescribeOp

; 598  : 	{
; 599  : 		Option.DataType			= OA_TYPE_INT;

	mov	DWORD PTR _Option$[esp+108], 2

; 600  : 		int mn, mx;
; 601  : 		pInt->GetBounds			(mn, mx);

	mov	eax, DWORD PTR [esi+32]

; 602  : 		Option.MinValue.Int		= mn;

	mov	ecx, DWORD PTR [esi+28]

; 603  : 		Option.MaxValue.Int		= mx;
; 604  : 		oaAddOption				(&Option);

	lea	edx, DWORD PTR _Option$[esp+104]
	push	edx
	mov	DWORD PTR _Option$[esp+132], ecx
	mov	DWORD PTR _Option$[esp+140], eax
	call	_oaAddOption
	add	esp, 4
$LN1@DescribeOp:

; 605  : 	}
; 606  : 	else
; 607  : 	{
; 608  : 		VERIFY(!"Unsupported console command type.");
; 609  : 	}
; 610  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ENDP ; xrSASH::DescribeOption
_TEXT	ENDS
PUBLIC	?GetOptionType@xrSASH@@AAE?AW4oaOptionDataType@@PAD@Z ; xrSASH::GetOptionType
; Function compile flags: /Ogtpy
;	COMDAT ?GetOptionType@xrSASH@@AAE?AW4oaOptionDataType@@PAD@Z
_TEXT	SEGMENT
_pszOptionName$ = 8					; size = 4
?GetOptionType@xrSASH@@AAE?AW4oaOptionDataType@@PAD@Z PROC ; xrSASH::GetOptionType, COMDAT
; _this$ = ecx

; 514  : 	CConsole::vecCMD_IT I = Console->Commands.find(pszOptionName);

	mov	eax, DWORD PTR ?Console@@3PAVCConsole@@A ; Console
	push	edi
	add	eax, 176				; 000000b0H
	push	eax
	lea	edi, DWORD PTR _pszOptionName$[esp+4]
	call	??$_M_find@PAD@?$_Rb_tree@PBDUstr_pred@CConsole@@U?$pair@QBDPAVIConsole_Command@@@stlp_std@@U?$_Select1st@U?$pair@QBDPAVIConsole_Command@@@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@QBDPAVIConsole_Command@@@stlp_std@@@64@V?$xalloc@U?$pair@PBDPAVIConsole_Command@@@stlp_std@@@@@priv@stlp_std@@ABEPAU_Rb_tree_node_base@12@ABQAD@Z ; stlp_std::priv::_Rb_tree<char const *,CConsole::str_pred,stlp_std::pair<char const * const,IConsole_Command *>,stlp_std::priv::_Select1st<stlp_std::pair<char const * const,IConsole_Command *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<char const * const,IConsole_Command *> >,xalloc<stlp_std::pair<char const *,IConsole_Command *> > >::_M_find<char *>

; 515  : 	if (I==Console->Commands.end())

	mov	ecx, DWORD PTR ?Console@@3PAVCConsole@@A ; Console
	add	ecx, 176				; 000000b0H
	cmp	eax, ecx
	jne	SHORT $LN15@GetOptionT

; 516  : 	{
; 517  : 		Msg("SASH:: Option \"%s\" not found.", pszOptionName);

	mov	eax, DWORD PTR _pszOptionName$[esp]
	push	eax
	push	OFFSET ??_C@_0BO@CPCPAKNB@SASH?3?3?5Option?5?$CC?$CFs?$CC?5not?5found?4?$AA@
	call	DWORD PTR __imp_?Msg@@YAXPBDZZ
	add	esp, 8

; 518  : 		VERIFY(I!=Console->Commands.end());
; 519  : 		return OA_TYPE_BOOL;

	mov	eax, 5
	pop	edi

; 535  : 		return OA_TYPE_INT;
; 536  : 	else
; 537  : 	{
; 538  : 		VERIFY(!"Unsupported console command type.");
; 539  : 		return OA_TYPE_BOOL;
; 540  : 	}
; 541  : 
; 542  : }

	ret	4
$LN15@GetOptionT:
	push	ebx
	push	ebp
	push	esi

; 520  : 	}
; 521  : 
; 522  : 	IConsole_Command* pCmd = I->second;

	mov	esi, DWORD PTR [eax+20]

; 523  : 	CCC_Mask* pMask = dynamic_cast<CCC_Mask*>(pCmd);

	push	0
	push	OFFSET ??_R0?AVCCC_Mask@@@8
	push	OFFSET ??_R0?AVIConsole_Command@@@8
	push	0
	push	esi
	call	___RTDynamicCast

; 524  : 	CCC_Token* pToken = dynamic_cast<CCC_Token*>(pCmd);

	push	0
	push	OFFSET ??_R0?AVCCC_Token@@@8
	push	OFFSET ??_R0?AVIConsole_Command@@@8
	push	0
	push	esi
	mov	edi, eax
	call	___RTDynamicCast

; 525  : 	CCC_Float* pFloat = dynamic_cast<CCC_Float*>(pCmd);

	push	0
	push	OFFSET ??_R0?AVCCC_Float@@@8
	push	OFFSET ??_R0?AVIConsole_Command@@@8
	push	0
	push	esi
	mov	ebx, eax
	call	___RTDynamicCast

; 526  : 	CCC_Integer* pInt = dynamic_cast<CCC_Integer*>(pCmd);

	push	0
	push	OFFSET ??_R0?AVCCC_Integer@@@8
	push	OFFSET ??_R0?AVIConsole_Command@@@8
	push	0
	push	esi
	mov	ebp, eax
	call	___RTDynamicCast
	add	esp, 80					; 00000050H

; 527  : 
; 528  : 	if (pMask)

	test	edi, edi
	je	SHORT $LN11@GetOptionT
	pop	esi
	pop	ebp
	pop	ebx

; 529  : 		return OA_TYPE_BOOL;

	mov	eax, 5
	pop	edi

; 535  : 		return OA_TYPE_INT;
; 536  : 	else
; 537  : 	{
; 538  : 		VERIFY(!"Unsupported console command type.");
; 539  : 		return OA_TYPE_BOOL;
; 540  : 	}
; 541  : 
; 542  : }

	ret	4
$LN11@GetOptionT:

; 530  : 	else if (pToken)

	test	ebx, ebx
	je	SHORT $LN9@GetOptionT
	pop	esi
	pop	ebp
	pop	ebx

; 531  : 		return OA_TYPE_ENUM;

	mov	eax, 4
	pop	edi

; 535  : 		return OA_TYPE_INT;
; 536  : 	else
; 537  : 	{
; 538  : 		VERIFY(!"Unsupported console command type.");
; 539  : 		return OA_TYPE_BOOL;
; 540  : 	}
; 541  : 
; 542  : }

	ret	4
$LN9@GetOptionT:

; 532  : 	else if (pFloat)

	test	ebp, ebp
	je	SHORT $LN7@GetOptionT
	pop	esi
	pop	ebp
	pop	ebx

; 533  : 		return OA_TYPE_FLOAT;

	mov	eax, 3
	pop	edi

; 535  : 		return OA_TYPE_INT;
; 536  : 	else
; 537  : 	{
; 538  : 		VERIFY(!"Unsupported console command type.");
; 539  : 		return OA_TYPE_BOOL;
; 540  : 	}
; 541  : 
; 542  : }

	ret	4
$LN7@GetOptionT:

; 534  : 	else if (pInt)

	neg	eax
	pop	esi
	sbb	eax, eax
	pop	ebp
	and	eax, -3					; fffffffdH
	pop	ebx
	add	eax, 5
	pop	edi

; 535  : 		return OA_TYPE_INT;
; 536  : 	else
; 537  : 	{
; 538  : 		VERIFY(!"Unsupported console command type.");
; 539  : 		return OA_TYPE_BOOL;
; 540  : 	}
; 541  : 
; 542  : }

	ret	4
?GetOptionType@xrSASH@@AAE?AW4oaOptionDataType@@PAD@Z ENDP ; xrSASH::GetOptionType
_TEXT	ENDS
PUBLIC	??0xrSASH@@QAE@XZ				; xrSASH::xrSASH
; Function compile flags: /Ogtpy
;	COMDAT ??0xrSASH@@QAE@XZ
_TEXT	SEGMENT
$T348440 = -1						; size = 1
??0xrSASH@@QAE@XZ PROC					; xrSASH::xrSASH, COMDAT
; _this$ = ecx

; 13   : {

	push	ecx
	push	ebx
	xor	ebx, ebx
	push	esi
	mov	esi, ecx
	lea	ecx, DWORD PTR [esi+72]
	mov	BYTE PTR [esi], bl
	mov	BYTE PTR [esi+1], bl
	mov	BYTE PTR [esi+2], bl
	mov	BYTE PTR [esi+3], bl
	mov	BYTE PTR [esi+4], bl
	mov	BYTE PTR [esi+5], bl
	call	DWORD PTR __imp_??0CTimer@@QAE@XZ
	push	ebx
	lea	eax, DWORD PTR $T348440[esp+16]
	push	eax
	lea	ecx, DWORD PTR [esi+136]
	mov	DWORD PTR [esi+128], ebx
	mov	DWORD PTR [esi+132], ebx
	call	??0?$_STLP_alloc_proxy@PAMMV?$xalloc@M@@@priv@stlp_std@@QAE@ABV?$xalloc@M@@PAM@Z ; stlp_std::priv::_STLP_alloc_proxy<float *,float,xalloc<float> >::_STLP_alloc_proxy<float *,float,xalloc<float> >

; 14   : 	;
; 15   : }

	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ecx
	ret	0
??0xrSASH@@QAE@XZ ENDP					; xrSASH::xrSASH
PUBLIC	?StartBenchmark@xrSASH@@QAEXXZ			; xrSASH::StartBenchmark
; Function compile flags: /Ogtpy
;	COMDAT ?StartBenchmark@xrSASH@@QAEXXZ
_TEXT	SEGMENT
?StartBenchmark@xrSASH@@QAEXXZ PROC			; xrSASH::StartBenchmark, COMDAT
; _this$ = ecx

; 213  : {

	push	ebx
	push	edi
	mov	edi, ecx

; 214  : 	if (!m_bRunning) return;

	xor	ebx, ebx
	cmp	BYTE PTR [edi+2], bl
	je	SHORT $LN15@StartBench

; 215  : 
; 216  : 	VERIFY(!m_bBenchmarkRunning);
; 217  : 
; 218  : 	m_bBenchmarkRunning = true;
; 219  : 	oaStartBenchmark();

	cmp	DWORD PTR _InitFlag, ebx
	mov	BYTE PTR [edi+3], 1
	jne	SHORT $LN9@StartBench
	push	OFFSET ??_C@_0BE@FCNOHKJO@OA?5not?5initialized?4?$AA@
	push	OFFSET ??_C@_0L@MJEBIGKE@ERROR?3?5?$CFs?6?$AA@
	call	DWORD PTR __imp____iob_func
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN8@StartBench
$LN9@StartBench:
	mov	eax, DWORD PTR _FuncTable+28
	cmp	eax, ebx
	je	SHORT $LN8@StartBench
	call	eax
$LN8@StartBench:

; 220  : 
; 221  : 	if (!m_bOpenAutomate)

	cmp	BYTE PTR [edi+1], bl
	jne	SHORT $LN15@StartBench
	push	esi

; 222  : 	{
; 223  : 		m_aFrimeTimes.clear();

	lea	esi, DWORD PTR [edi+128]
	push	esi
	call	?clear@?$xr_vector@MV?$xalloc@M@@@@QAEXXZ ; xr_vector<float,xalloc<float> >::clear

; 224  : 		m_aFrimeTimes.reserve(1024);

	call	?reserve@?$_Impl_vector@MV?$xalloc@M@@@priv@stlp_std@@QAEXI@Z ; stlp_std::priv::_Impl_vector<float,xalloc<float> >::reserve

; 225  : 		m_FrameTimer.Start();

	cmp	DWORD PTR [edi+96], ebx
	pop	esi
	jne	SHORT $LN15@StartBench
	call	DWORD PTR __imp_?QPC@CPU@@YA_KXZ
	sub	eax, DWORD PTR [edi+88]
	mov	DWORD PTR [edi+112], ebx
	sbb	edx, DWORD PTR [edi+92]
	mov	DWORD PTR [edi+72], eax
	mov	DWORD PTR [edi+76], edx
	mov	DWORD PTR [edi+116], ebx
	mov	DWORD PTR [edi+120], ebx
	mov	DWORD PTR [edi+124], ebx
$LN15@StartBench:
	pop	edi
	pop	ebx

; 226  : 	}
; 227  : }

	ret	0
?StartBenchmark@xrSASH@@QAEXXZ ENDP			; xrSASH::StartBenchmark
PUBLIC	?DisplayFrame@xrSASH@@QAEXM@Z			; xrSASH::DisplayFrame
; Function compile flags: /Ogtpy
;	COMDAT ?DisplayFrame@xrSASH@@QAEXM@Z
_TEXT	SEGMENT
$T478074 = -4						; size = 4
_t$ = 8							; size = 4
?DisplayFrame@xrSASH@@QAEXM@Z PROC			; xrSASH::DisplayFrame, COMDAT
; _this$ = ecx

; 230  : {

	push	ebp
	mov	ebp, esp
	and	esp, -64				; ffffffc0H
	sub	esp, 52					; 00000034H
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx

; 231  : 	if (!m_bRunning) return;

	xor	ebx, ebx
	cmp	BYTE PTR [edi+2], bl
	je	SHORT $LN23@DisplayFra@2

; 232  : 
; 233  : 	VERIFY(m_bBenchmarkRunning);
; 234  : 	oaDisplayFrame(t);

	fld	DWORD PTR _t$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_oaDisplayFrame
	add	esp, 8

; 235  : 
; 236  : 	if (!m_bOpenAutomate)

	cmp	BYTE PTR [edi+1], bl
	jne	SHORT $LN23@DisplayFra@2

; 237  : 	{
; 238  : 		m_aFrimeTimes.push_back(m_FrameTimer.GetElapsed_sec());

	lea	esi, DWORD PTR [edi+72]
	mov	ecx, esi
	call	DWORD PTR __imp_?GetElapsed_sec@CTimer@@QBEMXZ
	fstp	DWORD PTR $T478074[esp+64]
	mov	eax, DWORD PTR [edi+132]
	add	edi, 128				; 00000080H
	cmp	eax, DWORD PTR [edi+8]
	je	SHORT $LN13@DisplayFra@2
	cmp	eax, ebx
	je	SHORT $LN18@DisplayFra@2
	movss	xmm0, DWORD PTR $T478074[esp+64]
	movss	DWORD PTR [eax], xmm0
$LN18@DisplayFra@2:
	add	DWORD PTR [edi+4], 4
	jmp	SHORT $LN12@DisplayFra@2
$LN13@DisplayFra@2:
	push	1
	push	1
	push	eax
	lea	eax, DWORD PTR $T478074[esp+76]
	call	?_M_insert_overflow@?$_Impl_vector@MV?$xalloc@M@@@priv@stlp_std@@AAEXPAMABMABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<float,xalloc<float> >::_M_insert_overflow
$LN12@DisplayFra@2:

; 239  : 		m_FrameTimer.Start();

	cmp	DWORD PTR [esi+24], ebx
	jne	SHORT $LN23@DisplayFra@2
	call	DWORD PTR __imp_?QPC@CPU@@YA_KXZ
	sub	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [esi+40], ebx
	sbb	edx, DWORD PTR [esi+20]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], edx
	mov	DWORD PTR [esi+44], ebx
	mov	DWORD PTR [esi+48], ebx
	mov	DWORD PTR [esi+52], ebx
$LN23@DisplayFra@2:

; 240  : 	}
; 241  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?DisplayFrame@xrSASH@@QAEXM@Z ENDP			; xrSASH::DisplayFrame
PUBLIC	?ReleaseEngine@xrSASH@@AAEXXZ			; xrSASH::ReleaseEngine
; Function compile flags: /Ogtpy
;	COMDAT ?ReleaseEngine@xrSASH@@AAEXXZ
_TEXT	SEGMENT
?ReleaseEngine@xrSASH@@AAEXXZ PROC			; xrSASH::ReleaseEngine, COMDAT
; _this$ = ecx

; 504  : 	m_bReinitEngine = true;
; 505  : 
; 506  : 	destroyInput();

	push	OFFSET ?pInput@@3PAVCInput@@A		; pInput
	mov	BYTE PTR [ecx+4], 1
	call	??$xr_delete@VCInput@@@@YAXAAPAVCInput@@@Z ; xr_delete<CInput>

; 507  : 	Console->Destroy();

	mov	ecx, DWORD PTR ?Console@@3PAVCConsole@@A ; Console
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+12]
	add	esp, 4
	call	edx

; 508  : 	destroySound();

	call	DWORD PTR __imp_?_destroy@CSound_manager_interface@@SAXXZ

; 509  : 	destroyEngine();

	mov	ecx, OFFSET ?Device@@3VCRenderDevice@@A	; Device
	call	?Destroy@CRenderDevice@@QAEXXZ		; CRenderDevice::Destroy
	mov	ecx, OFFSET ?Engine@@3VCEngine@@A	; Engine
	jmp	?Destroy@CEngine@@QAEXXZ		; CEngine::Destroy
?ReleaseEngine@xrSASH@@AAEXXZ ENDP			; xrSASH::ReleaseEngine
PUBLIC	?SetOption@xrSASH@@AAEXPAUoaNamedOptionStruct@@@Z ; xrSASH::SetOption
; Function compile flags: /Ogtpy
;	COMDAT ?SetOption@xrSASH@@AAEXPAUoaNamedOptionStruct@@@Z
_TEXT	SEGMENT
_pFloat$ = -524						; size = 4
_this$ = -520						; size = 4
_pToken$ = -516						; size = 4
_CmdBuf$ = -512						; size = 512
_pOption$ = 8						; size = 4
?SetOption@xrSASH@@AAEXPAUoaNamedOptionStruct@@@Z PROC	; xrSASH::SetOption, COMDAT
; _this$ = ecx

; 662  : {

	push	ebp
	mov	ebp, esp
	and	esp, -64				; ffffffc0H
	sub	esp, 564				; 00000234H

; 663  : 	/*
; 664  : 	* Set option value to persist for subsequent runs of the game 
; 665  : 	* to the given value.  Option->Name will be the name of the value, 
; 666  : 	* and Option->Value will contain the appropriate value.
; 667  : 	*/
; 668  : 	CConsole::vecCMD_IT I = Console->Commands.find(pOption->Name);

	mov	eax, DWORD PTR ?Console@@3PAVCConsole@@A ; Console
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR _pOption$[ebp]
	add	eax, 176				; 000000b0H
	add	edi, 8
	push	eax
	mov	DWORD PTR _this$[esp+580], ecx
	call	??$_M_find@PBD@?$_Rb_tree@PBDUstr_pred@CConsole@@U?$pair@QBDPAVIConsole_Command@@@stlp_std@@U?$_Select1st@U?$pair@QBDPAVIConsole_Command@@@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@QBDPAVIConsole_Command@@@stlp_std@@@64@V?$xalloc@U?$pair@PBDPAVIConsole_Command@@@stlp_std@@@@@priv@stlp_std@@ABEPAU_Rb_tree_node_base@12@ABQBD@Z ; stlp_std::priv::_Rb_tree<char const *,CConsole::str_pred,stlp_std::pair<char const * const,IConsole_Command *>,stlp_std::priv::_Select1st<stlp_std::pair<char const * const,IConsole_Command *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<char const * const,IConsole_Command *> >,xalloc<stlp_std::pair<char const *,IConsole_Command *> > >::_M_find<char const *>

; 669  : 	if (I==Console->Commands.end())

	mov	ecx, DWORD PTR ?Console@@3PAVCConsole@@A ; Console
	add	ecx, 176				; 000000b0H
	cmp	eax, ecx
	jne	SHORT $LN15@SetOption

; 670  : 	{
; 671  : 		Msg("SASH:: Option \"%s\" not found.", pOption->Name);

	mov	eax, DWORD PTR [edi]
	push	eax
	push	OFFSET ??_C@_0BO@CPCPAKNB@SASH?3?3?5Option?5?$CC?$CFs?$CC?5not?5found?4?$AA@
	call	DWORD PTR __imp_?Msg@@YAXPBDZZ
	add	esp, 8

; 709  : 	m_bExecutingConsoleCommand = false;
; 710  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN15@SetOption:

; 672  : 		VERIFY(I!=Console->Commands.end());
; 673  : 		return;
; 674  : 	}
; 675  : 
; 676  : 	IConsole_Command* pCmd = I->second;

	mov	esi, DWORD PTR [eax+20]

; 677  : 	CCC_Mask* pMask = dynamic_cast<CCC_Mask*>(pCmd);

	push	0
	push	OFFSET ??_R0?AVCCC_Mask@@@8
	push	OFFSET ??_R0?AVIConsole_Command@@@8
	push	0
	push	esi
	call	___RTDynamicCast

; 678  : 	CCC_Token* pToken = dynamic_cast<CCC_Token*>(pCmd);

	push	0
	push	OFFSET ??_R0?AVCCC_Token@@@8
	push	OFFSET ??_R0?AVIConsole_Command@@@8
	push	0
	push	esi
	mov	ebx, eax
	call	___RTDynamicCast

; 679  : 	CCC_Float* pFloat = dynamic_cast<CCC_Float*>(pCmd);

	push	0
	push	OFFSET ??_R0?AVCCC_Float@@@8
	push	OFFSET ??_R0?AVIConsole_Command@@@8
	push	0
	push	esi
	mov	DWORD PTR _pToken$[esp+636], eax
	call	___RTDynamicCast

; 680  : 	CCC_Integer* pInt = dynamic_cast<CCC_Integer*>(pCmd);

	push	0
	push	OFFSET ??_R0?AVCCC_Integer@@@8
	push	OFFSET ??_R0?AVIConsole_Command@@@8
	push	0
	push	esi
	mov	DWORD PTR _pFloat$[esp+656], eax
	call	___RTDynamicCast

; 681  : 
; 682  : 	Msg("SASH:: Setting option \"%s\".", pOption->Name);

	mov	ecx, DWORD PTR [edi]
	add	esp, 80					; 00000050H
	push	ecx
	push	OFFSET ??_C@_0BM@EBPENECD@SASH?3?3?5Setting?5option?5?$CC?$CFs?$CC?4?$AA@
	mov	esi, eax
	call	DWORD PTR __imp_?Msg@@YAXPBDZZ
	add	esp, 8

; 683  : 
; 684  : 	string512	CmdBuf;
; 685  : 
; 686  : 	if (pMask)

	test	ebx, ebx
	je	SHORT $LN11@SetOption

; 687  : 	{
; 688  : 		xr_sprintf( CmdBuf, "%s %s", pOption->Name, (pOption->Value.Bool?"1":"0"));

	mov	edx, DWORD PTR _pOption$[ebp]
	cmp	DWORD PTR [edx+16], 0
	mov	eax, OFFSET ??_C@_01HIHLOKLC@1?$AA@
	jne	SHORT $LN19@SetOption
	mov	eax, OFFSET ??_C@_01GBGANLPD@0?$AA@
$LN19@SetOption:
	push	eax
	mov	eax, DWORD PTR [edi]
	push	eax
	push	OFFSET ??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@
	jmp	SHORT $LN48@SetOption
$LN11@SetOption:

; 689  : 	}
; 690  : 	else if (pToken)

	cmp	DWORD PTR _pToken$[esp+576], 0
	je	SHORT $LN9@SetOption

; 691  : 	{
; 692  : 		xr_sprintf( CmdBuf, "%s %s", pOption->Name, pOption->Value.Enum);

	mov	ecx, DWORD PTR _pOption$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edi]
	push	edx
	push	eax
	push	OFFSET ??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@
	jmp	SHORT $LN48@SetOption
$LN9@SetOption:

; 693  : 	}
; 694  : 	else if (pFloat)

	cmp	DWORD PTR _pFloat$[esp+576], 0
	je	SHORT $LN7@SetOption

; 695  : 	{
; 696  : 		xr_sprintf( CmdBuf, "%s %f", pOption->Name, pOption->Value.Float);

	mov	ecx, DWORD PTR _pOption$[ebp]
	fld	QWORD PTR [ecx+16]
	mov	edx, DWORD PTR [edi]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	edx
	push	OFFSET ??_C@_05KDNLHNC@?$CFs?5?$CFf?$AA@
	lea	edx, DWORD PTR _CmdBuf$[esp+592]
	call	??$xr_sprintf@$0CAA@@@YAHAAY0CAA@DPBDZZ	; xr_sprintf<512>
	add	esp, 16					; 00000010H
	jmp	SHORT $LN1@SetOption
$LN7@SetOption:

; 697  : 	}
; 698  : 	else if (pInt)

	test	esi, esi
	je	SHORT $LN1@SetOption

; 699  : 	{
; 700  : 		xr_sprintf( CmdBuf, "%s %d", pOption->Name, pOption->Value.Int);

	mov	eax, DWORD PTR _pOption$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [edi]
	push	ecx
	push	edx
	push	OFFSET ??_C@_05DIALNFFA@?$CFs?5?$CFd?$AA@
$LN48@SetOption:
	lea	edx, DWORD PTR _CmdBuf$[esp+588]
	call	??$xr_sprintf@$0CAA@@@YAHAAY0CAA@DPBDZZ	; xr_sprintf<512>
	add	esp, 12					; 0000000cH
$LN1@SetOption:

; 701  : 	}
; 702  : 	else
; 703  : 	{
; 704  : 		VERIFY(!"Unsupported console command type.");
; 705  : 	}
; 706  : 
; 707  : 	m_bExecutingConsoleCommand = true;

	mov	esi, DWORD PTR _this$[esp+576]

; 708  : 	Console->Execute(CmdBuf);

	push	0
	lea	eax, DWORD PTR _CmdBuf$[esp+580]
	mov	BYTE PTR [esi+5], 1
	mov	ecx, DWORD PTR ?Console@@3PAVCConsole@@A ; Console
	push	eax
	call	?ExecuteCommand@CConsole@@QAEXPBD_N@Z	; CConsole::ExecuteCommand

; 709  : 	m_bExecutingConsoleCommand = false;
; 710  : }

	pop	edi
	mov	BYTE PTR [esi+5], 0
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetOption@xrSASH@@AAEXPAUoaNamedOptionStruct@@@Z ENDP	; xrSASH::SetOption
PUBLIC	?TryInitEngine@xrSASH@@AAEX_N@Z			; xrSASH::TryInitEngine
; Function compile flags: /Ogtpy
;	COMDAT ?TryInitEngine@xrSASH@@AAEX_N@Z
_TEXT	SEGMENT
_bCaptureInput$547965 = -68				; size = 4
_pTmp$117740 = -68					; size = 4
_c_name$117730 = -64					; size = 64
_bNoRun$ = 8						; size = 1
?TryInitEngine@xrSASH@@AAEX_N@Z PROC			; xrSASH::TryInitEngine, COMDAT
; _this$ = ecx

; 447  : {

	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx

; 448  : 	if (m_bReinitEngine)

	cmp	BYTE PTR [edi+4], 0
	je	SHORT $LN11@TryInitEng

; 449  : 	{
; 450  : 		InitEngine();

	call	?InitEngine@@YAXXZ			; InitEngine

; 451  : 		//	It was destroyed on previous exit
; 452  : 		Console->Initialize();

	mov	ecx, DWORD PTR ?Console@@3PAVCConsole@@A ; Console
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+8]
	call	edx
$LN11@TryInitEng:

; 453  : 	}
; 454  : 
; 455  : 	xr_strcpy						(Console->ConfigFile,"user.ltx");

	mov	eax, DWORD PTR ?Console@@3PAVCConsole@@A ; Console
	add	eax, 108				; 0000006cH
	push	OFFSET ??_C@_08KFGGNOJM@user?4ltx?$AA@
	push	eax
	call	??$xr_strcpy@$0EA@@@YAHAAY0EA@DPBD@Z	; xr_strcpy<64>

; 456  : 	if (strstr(Core.Params,"-ltx ")) 

	mov	eax, DWORD PTR __imp_?Core@@3VxrCore@@A
	mov	esi, DWORD PTR __imp__strstr
	add	eax, 1232				; 000004d0H
	push	OFFSET ??_C@_05ICPGPIHJ@?9ltx?5?$AA@
	push	eax
	call	esi
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN10@TryInitEng

; 457  : 	{
; 458  : 		string64				c_name;
; 459  : 		sscanf					(strstr(Core.Params,"-ltx ")+5,"%[^ ] ",c_name);

	mov	eax, DWORD PTR __imp_?Core@@3VxrCore@@A
	lea	ecx, DWORD PTR _c_name$117730[esp+80]
	push	ecx
	push	OFFSET ??_C@_06EPKOIJFL@?$CF?$FL?$FO?5?$FN?5?$AA@
	add	eax, 1232				; 000004d0H
	push	OFFSET ??_C@_05ICPGPIHJ@?9ltx?5?$AA@
	push	eax
	call	esi
	add	eax, 5
	add	esp, 8
	push	eax
	call	DWORD PTR __imp__sscanf

; 460  : 		xr_strcpy				(Console->ConfigFile,c_name);

	mov	eax, DWORD PTR ?Console@@3PAVCConsole@@A ; Console
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR _c_name$117730[esp+80]
	push	edx
	add	eax, 108				; 0000006cH
	push	eax
	call	??$xr_strcpy@$0EA@@@YAHAAY0EA@DPBD@Z	; xr_strcpy<64>
	add	esp, 8
$LN10@TryInitEng:

; 461  : 	}
; 462  : 
; 463  : 	if(strstr(Core.Params,"-r2a"))	

	mov	eax, DWORD PTR __imp_?Core@@3VxrCore@@A
	add	eax, 1232				; 000004d0H
	push	OFFSET ??_C@_04JKLDOAFI@?9r2a?$AA@
	push	eax
	call	esi
	add	esp, 8
	test	eax, eax
	je	SHORT $LN9@TryInitEng

; 464  : 		Console->Execute			("renderer renderer_r2a");

	mov	ecx, DWORD PTR ?Console@@3PAVCConsole@@A ; Console
	push	0
	push	OFFSET ??_C@_0BG@KMMDAGHN@renderer?5renderer_r2a?$AA@
	call	?ExecuteCommand@CConsole@@QAEXPBD_N@Z	; CConsole::ExecuteCommand
	jmp	$LN6@TryInitEng
$LN9@TryInitEng:

; 465  : 	else if(strstr(Core.Params,"-r2"))	

	mov	eax, DWORD PTR __imp_?Core@@3VxrCore@@A
	add	eax, 1232				; 000004d0H
	push	OFFSET ??_C@_03DGOGLPEP@?9r2?$AA@
	push	eax
	call	esi
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@TryInitEng

; 466  : 		Console->Execute			("renderer renderer_r2");

	mov	ecx, DWORD PTR ?Console@@3PAVCConsole@@A ; Console
	push	0
	push	OFFSET ??_C@_0BF@EFEKGMOF@renderer?5renderer_r2?$AA@
	call	?ExecuteCommand@CConsole@@QAEXPBD_N@Z	; CConsole::ExecuteCommand

; 467  : 	else

	jmp	SHORT $LN6@TryInitEng
$LN7@TryInitEng:

; 468  : 	{
; 469  : 		CCC_LoadCFG_custom*	pTmp = xr_new<CCC_LoadCFG_custom>("renderer ");

	push	OFFSET ??_C@_09FHIHGOFD@renderer?5?$AA@
	call	??$xr_new@VCCC_LoadCFG_custom@@$$BY09$$CBD@@YAPAVCCC_LoadCFG_custom@@AAY09$$CBD@Z ; xr_new<CCC_LoadCFG_custom,char const [10]>

; 470  : 		pTmp->Execute				(Console->ConfigFile);

	mov	ecx, DWORD PTR ?Console@@3PAVCConsole@@A ; Console
	add	ecx, 108				; 0000006cH
	add	esp, 4
	mov	DWORD PTR _pTmp$117740[esp+80], eax
	mov	edx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+4]
	push	ecx
	mov	ecx, eax
	call	edx

; 471  : 		if (m_bOpenAutomate)

	cmp	BYTE PTR [edi+1], 0

; 472  : 			pTmp->Execute				("SASH.ltx");

	mov	ecx, DWORD PTR _pTmp$117740[esp+80]
	mov	eax, DWORD PTR [ecx]
	je	SHORT $LN5@TryInitEng
	mov	edx, DWORD PTR [eax+4]
	push	OFFSET ??_C@_08PNDHMFBG@SASH?4ltx?$AA@
	call	edx

; 473  : 		else

	jmp	SHORT $LN4@TryInitEng
$LN5@TryInitEng:

; 474  : 			pTmp->Execute				(Console->ConfigFile);

	mov	edx, DWORD PTR ?Console@@3PAVCConsole@@A ; Console
	mov	eax, DWORD PTR [eax+4]
	add	edx, 108				; 0000006cH
	push	edx
	call	eax
$LN4@TryInitEng:

; 475  : 		xr_delete					(pTmp);

	lea	ecx, DWORD PTR _pTmp$117740[esp+80]
	push	ecx
	call	??$xr_delete@VCCC_LoadCFG_custom@@@@YAXAAPAVCCC_LoadCFG_custom@@@Z ; xr_delete<CCC_LoadCFG_custom>
	add	esp, 4
$LN6@TryInitEng:

; 476  : 	}
; 477  : 
; 478  : 	InitInput();

	mov	eax, DWORD PTR __imp_?Core@@3VxrCore@@A
	add	eax, 1232				; 000004d0H
	push	OFFSET ??_C@_02IEBECDLA@?9i?$AA@
	push	eax
	call	esi
	neg	eax
	sbb	eax, eax
	lea	edx, DWORD PTR _bCaptureInput$547965[esp+88]
	add	eax, 1
	push	edx
	mov	DWORD PTR _bCaptureInput$547965[esp+92], eax
	call	??$xr_new@VCInput@@H@@YAPAVCInput@@ABH@Z ; xr_new<CInput,int>
	add	esp, 12					; 0000000cH

; 479  : 
; 480  : 	Engine.External.Initialize( );

	mov	ecx, OFFSET ?Engine@@3VCEngine@@A+4
	mov	DWORD PTR ?pInput@@3PAVCInput@@A, eax	; pInput
	call	?Initialize@CEngineAPI@@QAEXXZ		; CEngineAPI::Initialize

; 481  : 
; 482  : 	if (bNoRun)

	mov	bl, BYTE PTR _bNoRun$[esp+76]
	test	bl, bl
	mov	esi, DWORD PTR __imp_?_create@CSound_manager_interface@@SAXH@Z
	je	SHORT $LN44@TryInitEng

; 483  : 		InitSound1();

	push	0
	call	esi
	add	esp, 4
$LN44@TryInitEng:

; 484  : 
; 485  : 	Console->Execute			("unbindall");

	mov	ecx, DWORD PTR ?Console@@3PAVCConsole@@A ; Console
	push	0
	push	OFFSET ??_C@_09EBAHBELN@unbindall?$AA@
	call	?ExecuteCommand@CConsole@@QAEXPBD_N@Z	; CConsole::ExecuteCommand

; 486  : 	Console->ExecuteScript		(Console->ConfigFile);

	mov	ecx, DWORD PTR ?Console@@3PAVCConsole@@A ; Console
	lea	eax, DWORD PTR [ecx+108]
	push	eax
	call	?ExecuteScript@CConsole@@QAEXPBD@Z	; CConsole::ExecuteScript

; 487  : 	if (m_bOpenAutomate)

	cmp	BYTE PTR [edi+1], 0
	je	SHORT $LN2@TryInitEng

; 488  : 	{
; 489  : 		//	Overwrite setting using SASH.ltx if has any.
; 490  : 		xr_strcpy(Console->ConfigFile,"SASH.ltx");

	mov	ecx, DWORD PTR ?Console@@3PAVCConsole@@A ; Console
	add	ecx, 108				; 0000006cH
	push	OFFSET ??_C@_08PNDHMFBG@SASH?4ltx?$AA@
	push	ecx
	call	??$xr_strcpy@$0EA@@@YAHAAY0EA@DPBD@Z	; xr_strcpy<64>

; 491  : 		Console->ExecuteScript		(Console->ConfigFile);

	mov	ecx, DWORD PTR ?Console@@3PAVCConsole@@A ; Console
	add	esp, 8
	lea	edx, DWORD PTR [ecx+108]
	push	edx
	call	?ExecuteScript@CConsole@@QAEXPBD@Z	; CConsole::ExecuteScript
$LN2@TryInitEng:

; 492  : 	}
; 493  : 
; 494  : 	if (bNoRun)

	test	bl, bl
	je	SHORT $LN1@TryInitEng

; 495  : 	{
; 496  : 		InitSound2();

	push	1
	call	esi
	add	esp, 4

; 497  : 		Device.Create();

	mov	ecx, OFFSET ?Device@@3VCRenderDevice@@A	; Device
	call	?Create@CRenderDevice@@QAEXXZ		; CRenderDevice::Create
$LN1@TryInitEng:

; 498  : 	}
; 499  : 
; 500  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 68					; 00000044H
	ret	4
?TryInitEngine@xrSASH@@AAEX_N@Z ENDP			; xrSASH::TryInitEngine
_TEXT	ENDS
PUBLIC	?SetOptions@xrSASH@@AAEXXZ			; xrSASH::SetOptions
; Function compile flags: /Ogtpy
;	COMDAT ?SetOptions@xrSASH@@AAEXXZ
_TEXT	SEGMENT
?SetOptions@xrSASH@@AAEXXZ PROC				; xrSASH::SetOptions, COMDAT
; _this$ = ecx

; 403  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	push	ecx
	push	esi

; 404  : 	Msg("SASH:: SetOptions.");

	push	OFFSET ??_C@_0BD@DKKLLJDO@SASH?3?3?5SetOptions?4?$AA@
	mov	esi, ecx
	call	DWORD PTR __imp_?Msg@@YAXPBDZZ
	add	esp, 4

; 405  : 	TryInitEngine();

	push	1
	mov	ecx, esi
	call	?TryInitEngine@xrSASH@@AAEX_N@Z		; xrSASH::TryInitEngine
$LL2@SetOptions:

; 406  : 
; 407  : 	oaNamedOption *Option;
; 408  : 
; 409  : 	while((Option = oaGetNextOption()) != NULL)

	cmp	DWORD PTR _InitFlag, 0
	je	SHORT $LN23@SetOptions
	mov	eax, DWORD PTR _FuncTable+8
	test	eax, eax
	je	SHORT $LN5@SetOptions
	call	eax
	test	eax, eax
	je	SHORT $LN5@SetOptions

; 410  : 		SetOption(Option);

	push	eax
	mov	ecx, esi
	call	?SetOption@xrSASH@@AAEXPAUoaNamedOptionStruct@@@Z ; xrSASH::SetOption
	jmp	SHORT $LL2@SetOptions
$LN23@SetOptions:

; 406  : 
; 407  : 	oaNamedOption *Option;
; 408  : 
; 409  : 	while((Option = oaGetNextOption()) != NULL)

	push	OFFSET ??_C@_0BE@FCNOHKJO@OA?5not?5initialized?4?$AA@
	push	OFFSET ??_C@_0L@MJEBIGKE@ERROR?3?5?$CFs?6?$AA@
	call	DWORD PTR __imp____iob_func
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
$LN5@SetOptions:

; 411  : 
; 412  : 	//Console->Save();
; 413  : 	Console->Execute("cfg_save");

	mov	ecx, DWORD PTR ?Console@@3PAVCConsole@@A ; Console
	push	0
	push	OFFSET ??_C@_08KMELLGDM@cfg_save?$AA@
	call	?ExecuteCommand@CConsole@@QAEXPBD_N@Z	; CConsole::ExecuteCommand

; 414  : 
; 415  : 	ReleaseEngine();

	push	OFFSET ?pInput@@3PAVCInput@@A		; pInput
	mov	BYTE PTR [esi+4], 1
	call	??$xr_delete@VCInput@@@@YAXAAPAVCInput@@@Z ; xr_delete<CInput>
	mov	ecx, DWORD PTR ?Console@@3PAVCConsole@@A ; Console
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+12]
	add	esp, 4
	call	edx
	call	DWORD PTR __imp_?_destroy@CSound_manager_interface@@SAXXZ
	mov	ecx, OFFSET ?Device@@3VCRenderDevice@@A	; Device
	call	?Destroy@CRenderDevice@@QAEXXZ		; CRenderDevice::Destroy
	mov	ecx, OFFSET ?Engine@@3VCEngine@@A	; Engine
	call	?Destroy@CEngine@@QAEXXZ		; CEngine::Destroy

; 416  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?SetOptions@xrSASH@@AAEXXZ ENDP				; xrSASH::SetOptions
_TEXT	ENDS
PUBLIC	?GetCurrentOptions@xrSASH@@AAEXXZ		; xrSASH::GetCurrentOptions
; Function compile flags: /Ogtpy
;	COMDAT ?GetCurrentOptions@xrSASH@@AAEXXZ
_TEXT	SEGMENT
?GetCurrentOptions@xrSASH@@AAEXXZ PROC			; xrSASH::GetCurrentOptions, COMDAT
; _this$ = ecx

; 350  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	push	ecx
	push	esi

; 351  : 	Msg("SASH:: GetCurrentOptions.");

	push	OFFSET ??_C@_0BK@NNCPMBNI@SASH?3?3?5GetCurrentOptions?4?$AA@
	mov	esi, ecx
	call	DWORD PTR __imp_?Msg@@YAXPBDZZ
	add	esp, 4

; 352  : 	TryInitEngine();

	push	1
	mov	ecx, esi
	call	?TryInitEngine@xrSASH@@AAEX_N@Z		; xrSASH::TryInitEngine

; 353  : 
; 354  : 	GetOption("renderer");

	push	OFFSET ??_C@_08NELFFGLM@renderer?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 355  : 	GetOption("vid_mode");

	push	OFFSET ??_C@_08ICHJJAPN@vid_mode?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 356  : 	GetOption("rs_fullscreen");

	push	OFFSET ??_C@_0O@JAOOLNDK@rs_fullscreen?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 357  : 
; 358  : 	GetOption("rs_vis_distance");

	push	OFFSET ??_C@_0BA@DKBCLJG@rs_vis_distance?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 359  : 	GetOption("r__geometry_lod");

	push	OFFSET ??_C@_0BA@CENFKEKB@r__geometry_lod?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 360  : 	GetOption("r__detail_density");

	push	OFFSET ??_C@_0BC@DANJBJKC@r__detail_density?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 361  : 	GetOption("texture_lod");

	push	OFFSET ??_C@_0M@IEODBMNE@texture_lod?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 362  : 	GetOption("r__tf_aniso");

	push	OFFSET ??_C@_0M@JGACHMFM@r__tf_aniso?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 363  : 	GetOption("ai_use_torch_dynamic_lights");

	push	OFFSET ??_C@_0BM@GLDIDBOD@ai_use_torch_dynamic_lights?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 364  : 
; 365  : 	//	r1 only
; 366  : 	GetOption("r__supersample");

	push	OFFSET ??_C@_0P@EGAINIKO@r__supersample?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 367  : 	GetOption("r1_no_detail_textures");

	push	OFFSET ??_C@_0BG@MBBINPCJ@r1_no_detail_textures?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 368  : 
; 369  : 	//	>=r2
; 370  : 	GetOption("r2_sun");

	push	OFFSET ??_C@_06DKFLPMNP@r2_sun?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 371  : 	GetOption("r2_sun_quality");

	push	OFFSET ??_C@_0P@PGDLHACC@r2_sun_quality?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 372  : 	GetOption("r2_slight_fade");

	push	OFFSET ??_C@_0P@NKBDHKNF@r2_slight_fade?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 373  : 	GetOption("r2_ls_squality");

	push	OFFSET ??_C@_0P@IDPGFAFN@r2_ls_squality?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 374  : 	GetOption("r2_detail_bump");

	push	OFFSET ??_C@_0P@PCJAFKFF@r2_detail_bump?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 375  : 
; 376  : 	//	>=r2.5
; 377  : 	GetOption("r2_sun_shafts");

	push	OFFSET ??_C@_0O@LHFKPGKB@r2_sun_shafts?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 378  : 	GetOption("r2_ssao");

	push	OFFSET ??_C@_07NKAEPLDA@r2_ssao?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 379  : 	GetOption("r2_ssao_opt_data");

	push	OFFSET ??_C@_0BB@IJIGEECP@r2_ssao_opt_data?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 380  : 	GetOption("r2_ssao_half_data");

	push	OFFSET ??_C@_0BC@MHALNIIH@r2_ssao_half_data?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 381  : 	GetOption("r2_ssao_hbao");

	push	OFFSET ??_C@_0N@OCFNMDDA@r2_ssao_hbao?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 382  : 	GetOption("r2_soft_water");

	push	OFFSET ??_C@_0O@JMGALPCM@r2_soft_water?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 383  : 	GetOption("r2_soft_particles");

	push	OFFSET ??_C@_0BC@NBMFAMGH@r2_soft_particles?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 384  : 	GetOption("r2_dof_enable");

	push	OFFSET ??_C@_0O@OIFLAOHB@r2_dof_enable?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 385  : 	GetOption("r2_volumetric_lights");

	push	OFFSET ??_C@_0BF@KHMKJMA@r2_volumetric_lights?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 386  : 	GetOption("r2_steep_parallax");

	push	OFFSET ??_C@_0BC@NJKLNEJM@r2_steep_parallax?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 387  : 
; 388  : 	//	>=r3
; 389  : 	GetOption("r3_dynamic_wet_surfaces");

	push	OFFSET ??_C@_0BI@MANHLKMD@r3_dynamic_wet_surfaces?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 390  : 	GetOption("r3_volumetric_smoke");

	push	OFFSET ??_C@_0BE@PBMCOEHI@r3_volumetric_smoke?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 391  : 	GetOption("r3_use_dx10_1");

	push	OFFSET ??_C@_0O@IMLPLABF@r3_use_dx10_1?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 392  : 	GetOption("r3_minmax_sm");

	push	OFFSET ??_C@_0N@EGILDBNB@r3_minmax_sm?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 393  : 	GetOption("r3_msaa");

	push	OFFSET ??_C@_07DNCAPEOJ@r3_msaa?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 394  : 	GetOption("r3_msaa_opt");

	push	OFFSET ??_C@_0M@BCPCNGOA@r3_msaa_opt?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 395  : 	GetOption("r3_msaa_alphatest");

	push	OFFSET ??_C@_0BC@JFPEECNN@r3_msaa_alphatest?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 396  : 	GetOption("r3_gbuff_opt");

	push	OFFSET ??_C@_0N@PHKDGKAO@r3_gbuff_opt?$AA@
	mov	ecx, esi
	call	?GetOption@xrSASH@@AAEXPAD@Z		; xrSASH::GetOption

; 397  : 	
; 398  : 
; 399  : 	ReleaseEngine();

	push	OFFSET ?pInput@@3PAVCInput@@A		; pInput
	mov	BYTE PTR [esi+4], 1
	call	??$xr_delete@VCInput@@@@YAXAAPAVCInput@@@Z ; xr_delete<CInput>
	mov	ecx, DWORD PTR ?Console@@3PAVCConsole@@A ; Console
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+12]
	add	esp, 4
	call	edx
	call	DWORD PTR __imp_?_destroy@CSound_manager_interface@@SAXXZ
	mov	ecx, OFFSET ?Device@@3VCRenderDevice@@A	; Device
	call	?Destroy@CRenderDevice@@QAEXXZ		; CRenderDevice::Destroy
	mov	ecx, OFFSET ?Engine@@3VCEngine@@A	; Engine
	call	?Destroy@CEngine@@QAEXXZ		; CEngine::Destroy

; 400  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCurrentOptions@xrSASH@@AAEXXZ ENDP			; xrSASH::GetCurrentOptions
_TEXT	ENDS
PUBLIC	?GetAllOptions@xrSASH@@AAEXXZ			; xrSASH::GetAllOptions
; Function compile flags: /Ogtpy
;	COMDAT ?GetAllOptions@xrSASH@@AAEXXZ
_TEXT	SEGMENT
_Option$ = -80						; size = 80
?GetAllOptions@xrSASH@@AAEXXZ PROC			; xrSASH::GetAllOptions, COMDAT
; _this$ = ecx

; 262  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 84					; 00000054H
	push	esi

; 263  : 	Msg("SASH:: GetAllOptions.");

	push	OFFSET ??_C@_0BG@DLAFANCM@SASH?3?3?5GetAllOptions?4?$AA@
	mov	esi, ecx
	call	DWORD PTR __imp_?Msg@@YAXPBDZZ
	add	esp, 4

; 264  : 	TryInitEngine();

	push	1
	mov	ecx, esi
	call	?TryInitEngine@xrSASH@@AAEX_N@Z		; xrSASH::TryInitEngine

; 265  : 
; 266  : 	oaNamedOptionStruct Option; 
; 267  : 	oaInitOption(&Option);

	push	80					; 00000050H
	lea	eax, DWORD PTR _Option$[esp+92]
	push	0
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 268  : 	
; 269  : 	DescribeOption("renderer",		Option.Dependency);

	lea	ecx, DWORD PTR _Option$[esp+136]
	push	ecx
	push	OFFSET ??_C@_08NELFFGLM@renderer?$AA@
	mov	ecx, esi
	mov	DWORD PTR _Option$[esp+96], 80		; 00000050H
	mov	DWORD PTR _Option$[esp+136], -1
	mov	DWORD PTR _Option$[esp+144], 32		; 00000020H
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 270  : 	DescribeOption("vid_mode",		Option.Dependency);

	lea	edx, DWORD PTR _Option$[esp+136]
	push	edx
	push	OFFSET ??_C@_08ICHJJAPN@vid_mode?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 271  : 	DescribeOption("rs_fullscreen", Option.Dependency);

	lea	eax, DWORD PTR _Option$[esp+136]
	push	eax
	push	OFFSET ??_C@_0O@JAOOLNDK@rs_fullscreen?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 272  : 
; 273  : 	DescribeOption("rs_vis_distance",				Option.Dependency);

	lea	ecx, DWORD PTR _Option$[esp+136]
	push	ecx
	push	OFFSET ??_C@_0BA@DKBCLJG@rs_vis_distance?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 274  : 	DescribeOption("r__geometry_lod",				Option.Dependency);

	lea	edx, DWORD PTR _Option$[esp+136]
	push	edx
	push	OFFSET ??_C@_0BA@CENFKEKB@r__geometry_lod?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 275  : 	DescribeOption("r__detail_density",				Option.Dependency);

	lea	eax, DWORD PTR _Option$[esp+136]
	push	eax
	push	OFFSET ??_C@_0BC@DANJBJKC@r__detail_density?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 276  : 	DescribeOption("texture_lod",					Option.Dependency);

	lea	ecx, DWORD PTR _Option$[esp+136]
	push	ecx
	push	OFFSET ??_C@_0M@IEODBMNE@texture_lod?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 277  : 	DescribeOption("r__tf_aniso",					Option.Dependency);

	lea	edx, DWORD PTR _Option$[esp+136]
	push	edx
	push	OFFSET ??_C@_0M@JGACHMFM@r__tf_aniso?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 278  : 	DescribeOption("ai_use_torch_dynamic_lights",	Option.Dependency);

	lea	eax, DWORD PTR _Option$[esp+136]
	push	eax
	push	OFFSET ??_C@_0BM@GLDIDBOD@ai_use_torch_dynamic_lights?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 279  : 
; 280  : 	//	r1 only
; 281  : 	Option.Dependency.ParentName = TEXT("renderer");
; 282  : 	Option.Dependency.ComparisonOp = OA_COMP_OP_EQUAL;
; 283  : 	Option.Dependency.ComparisonVal.Enum = TEXT("renderer_r1");
; 284  : 	Option.Dependency.ComparisonValType = GetOptionType("renderer");

	push	OFFSET ??_C@_08NELFFGLM@renderer?$AA@
	mov	ecx, esi
	mov	DWORD PTR _Option$[esp+144], OFFSET ??_C@_08NELFFGLM@renderer?$AA@
	mov	DWORD PTR _Option$[esp+148], 1
	mov	DWORD PTR _Option$[esp+156], OFFSET ??_C@_0M@JJOIBOAJ@renderer_r1?$AA@
	call	?GetOptionType@xrSASH@@AAE?AW4oaOptionDataType@@PAD@Z ; xrSASH::GetOptionType

; 285  : 	{
; 286  : 		DescribeOption("r__supersample",		Option.Dependency);

	lea	ecx, DWORD PTR _Option$[esp+136]
	push	ecx
	push	OFFSET ??_C@_0P@EGAINIKO@r__supersample?$AA@
	mov	ecx, esi
	mov	DWORD PTR _Option$[esp+168], eax
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 287  : 		DescribeOption("r1_no_detail_textures", Option.Dependency);

	lea	edx, DWORD PTR _Option$[esp+136]
	push	edx
	push	OFFSET ??_C@_0BG@MBBINPCJ@r1_no_detail_textures?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 288  : 	}
; 289  : 
; 290  : 	//	>=r2
; 291  : 	oaInitOption(&Option);	//	Reset dependency info

	push	80					; 00000050H
	push	0
	lea	eax, DWORD PTR _Option$[esp+96]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 292  : 	//	Currently only equal/not equal works
; 293  : 	//Option.Dependency.ParentName = TEXT("renderer");
; 294  : 	//Option.Dependency.ComparisonOp = OA_COMP_OP_GREATER_OR_EQUAL;
; 295  : 	//Option.Dependency.ComparisonVal.Enum = TEXT("renderer_r2");
; 296  : 	//Option.Dependency.ComparisonValType = GetOptionType("renderer");
; 297  : 	{
; 298  : 		DescribeOption("r2_sun", Option.Dependency);

	lea	ecx, DWORD PTR _Option$[esp+136]
	push	ecx
	push	OFFSET ??_C@_06DKFLPMNP@r2_sun?$AA@
	mov	ecx, esi
	mov	DWORD PTR _Option$[esp+96], 80		; 00000050H
	mov	DWORD PTR _Option$[esp+136], -1
	mov	DWORD PTR _Option$[esp+144], 32		; 00000020H
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 299  : 		DescribeOption("r2_sun_quality", Option.Dependency);

	lea	edx, DWORD PTR _Option$[esp+136]
	push	edx
	push	OFFSET ??_C@_0P@PGDLHACC@r2_sun_quality?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 300  : 		DescribeOption("r2_slight_fade", Option.Dependency);

	lea	eax, DWORD PTR _Option$[esp+136]
	push	eax
	push	OFFSET ??_C@_0P@NKBDHKNF@r2_slight_fade?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 301  : 		DescribeOption("r2_ls_squality", Option.Dependency);

	lea	ecx, DWORD PTR _Option$[esp+136]
	push	ecx
	push	OFFSET ??_C@_0P@IDPGFAFN@r2_ls_squality?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 302  : 		DescribeOption("r2_detail_bump", Option.Dependency);

	lea	edx, DWORD PTR _Option$[esp+136]
	push	edx
	push	OFFSET ??_C@_0P@PCJAFKFF@r2_detail_bump?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 303  : 	}
; 304  : 
; 305  : 	//	>=r2.5
; 306  : 	//Option.Dependency.ParentName = TEXT("renderer");
; 307  : 	//Option.Dependency.ComparisonOp = OA_COMP_OP_GREATER_OR_EQUAL;
; 308  : 	//Option.Dependency.ComparisonVal.Enum = TEXT("renderer_r2.5");
; 309  : 	//Option.Dependency.ComparisonValType = GetOptionType("renderer");
; 310  : 	{
; 311  : 		DescribeOption("r2_sun_shafts",			Option.Dependency);

	lea	eax, DWORD PTR _Option$[esp+136]
	push	eax
	push	OFFSET ??_C@_0O@LHFKPGKB@r2_sun_shafts?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 312  : 		DescribeOption("r2_ssao",				Option.Dependency);

	lea	ecx, DWORD PTR _Option$[esp+136]
	push	ecx
	push	OFFSET ??_C@_07NKAEPLDA@r2_ssao?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 313  : 		DescribeOption("r2_ssao_opt_data",		Option.Dependency);

	lea	edx, DWORD PTR _Option$[esp+136]
	push	edx
	push	OFFSET ??_C@_0BB@IJIGEECP@r2_ssao_opt_data?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 314  : 		DescribeOption("r2_ssao_half_data",		Option.Dependency);

	lea	eax, DWORD PTR _Option$[esp+136]
	push	eax
	push	OFFSET ??_C@_0BC@MHALNIIH@r2_ssao_half_data?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 315  : 		DescribeOption("r2_ssao_hbao",			Option.Dependency);

	lea	ecx, DWORD PTR _Option$[esp+136]
	push	ecx
	push	OFFSET ??_C@_0N@OCFNMDDA@r2_ssao_hbao?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 316  : 		DescribeOption("r2_soft_water",			Option.Dependency);

	lea	edx, DWORD PTR _Option$[esp+136]
	push	edx
	push	OFFSET ??_C@_0O@JMGALPCM@r2_soft_water?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 317  : 		DescribeOption("r2_soft_particles",		Option.Dependency);

	lea	eax, DWORD PTR _Option$[esp+136]
	push	eax
	push	OFFSET ??_C@_0BC@NBMFAMGH@r2_soft_particles?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 318  : 		DescribeOption("r2_dof_enable",			Option.Dependency);

	lea	ecx, DWORD PTR _Option$[esp+136]
	push	ecx
	push	OFFSET ??_C@_0O@OIFLAOHB@r2_dof_enable?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 319  : 		DescribeOption("r2_volumetric_lights",	Option.Dependency);

	lea	edx, DWORD PTR _Option$[esp+136]
	push	edx
	push	OFFSET ??_C@_0BF@KHMKJMA@r2_volumetric_lights?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 320  : 		DescribeOption("r2_steep_parallax",		Option.Dependency);

	lea	eax, DWORD PTR _Option$[esp+136]
	push	eax
	push	OFFSET ??_C@_0BC@NJKLNEJM@r2_steep_parallax?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 321  : 	}
; 322  : 
; 323  : 	//	>=r3
; 324  : 	//Option.Dependency.ParentName = TEXT("renderer");
; 325  : 	//Option.Dependency.ComparisonOp = OA_COMP_OP_GREATER_OR_EQUAL;
; 326  : 	//Option.Dependency.ComparisonVal.Enum = TEXT("renderer_r3");
; 327  : 	//Option.Dependency.ComparisonValType = GetOptionType("renderer");
; 328  : 	{
; 329  : 		DescribeOption("r3_dynamic_wet_surfaces",Option.Dependency);

	lea	ecx, DWORD PTR _Option$[esp+136]
	push	ecx
	push	OFFSET ??_C@_0BI@MANHLKMD@r3_dynamic_wet_surfaces?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 330  : 		DescribeOption("r3_volumetric_smoke",	Option.Dependency);

	lea	edx, DWORD PTR _Option$[esp+136]
	push	edx
	push	OFFSET ??_C@_0BE@PBMCOEHI@r3_volumetric_smoke?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 331  : 		DescribeOption("r3_gbuff_opt",			Option.Dependency);

	lea	eax, DWORD PTR _Option$[esp+136]
	push	eax
	push	OFFSET ??_C@_0N@PHKDGKAO@r3_gbuff_opt?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 332  : 		DescribeOption("r3_use_dx10_1",			Option.Dependency);

	lea	ecx, DWORD PTR _Option$[esp+136]
	push	ecx
	push	OFFSET ??_C@_0O@IMLPLABF@r3_use_dx10_1?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 333  : 		DescribeOption("r3_minmax_sm",			Option.Dependency);

	lea	edx, DWORD PTR _Option$[esp+136]
	push	edx
	push	OFFSET ??_C@_0N@EGILDBNB@r3_minmax_sm?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 334  : 		DescribeOption("r3_msaa",				Option.Dependency);

	lea	eax, DWORD PTR _Option$[esp+136]
	push	eax
	push	OFFSET ??_C@_07DNCAPEOJ@r3_msaa?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 335  : 		//	>= 2x
; 336  : 		//Option.Dependency.ParentName = TEXT("r3_msaa");
; 337  : 		//Option.Dependency.ComparisonOp = OA_COMP_OP_GREATER_OR_EQUAL;
; 338  : 		//Option.Dependency.ComparisonVal.Enum = TEXT("2x");
; 339  : 		//Option.Dependency.ComparisonValType = GetOptionType("r3_msaa");
; 340  : 		{
; 341  : 			DescribeOption("r3_msaa_opt",			Option.Dependency);

	lea	ecx, DWORD PTR _Option$[esp+136]
	push	ecx
	push	OFFSET ??_C@_0M@BCPCNGOA@r3_msaa_opt?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 342  : 			DescribeOption("r3_msaa_alphatest",		Option.Dependency);

	lea	edx, DWORD PTR _Option$[esp+136]
	push	edx
	push	OFFSET ??_C@_0BC@JFPEECNN@r3_msaa_alphatest?$AA@
	mov	ecx, esi
	call	?DescribeOption@xrSASH@@AAEXPADABUoaOptionDependencyStruct@@@Z ; xrSASH::DescribeOption

; 343  : 		}
; 344  : 	}
; 345  : 
; 346  : 	ReleaseEngine();

	push	OFFSET ?pInput@@3PAVCInput@@A		; pInput
	mov	BYTE PTR [esi+4], 1
	call	??$xr_delete@VCInput@@@@YAXAAPAVCInput@@@Z ; xr_delete<CInput>
	mov	ecx, DWORD PTR ?Console@@3PAVCConsole@@A ; Console
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+12]
	add	esp, 4
	call	edx
	call	DWORD PTR __imp_?_destroy@CSound_manager_interface@@SAXXZ
	mov	ecx, OFFSET ?Device@@3VCRenderDevice@@A	; Device
	call	?Destroy@CRenderDevice@@QAEXXZ		; CRenderDevice::Destroy
	mov	ecx, OFFSET ?Engine@@3VCEngine@@A	; Engine
	call	?Destroy@CEngine@@QAEXXZ		; CEngine::Destroy

; 347  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAllOptions@xrSASH@@AAEXXZ ENDP			; xrSASH::GetAllOptions
PUBLIC	?RunBenchmark@xrSASH@@AAEXPBD@Z			; xrSASH::RunBenchmark
; Function compile flags: /Ogtpy
;	COMDAT ?RunBenchmark@xrSASH@@AAEXPBD@Z
_TEXT	SEGMENT
_pszName$ = 8						; size = 4
?RunBenchmark@xrSASH@@AAEXPBD@Z PROC			; xrSASH::RunBenchmark, COMDAT
; _this$ = ecx

; 434  : {

	push	ecx
	push	esi

; 435  : 	Msg("SASH:: RunBenchmark.");

	push	OFFSET ??_C@_0BF@JCPKOHG@SASH?3?3?5RunBenchmark?4?$AA@
	mov	esi, ecx
	call	DWORD PTR __imp_?Msg@@YAXPBDZZ
	add	esp, 4

; 436  : 
; 437  : 	TryInitEngine(false);

	push	0
	mov	ecx, esi
	call	?TryInitEngine@xrSASH@@AAEX_N@Z		; xrSASH::TryInitEngine

; 438  : 
; 439  : 	Startup();

	call	?Startup@@YAXXZ				; Startup

; 440  : 
; 441  : 	m_bReinitEngine = true;

	mov	BYTE PTR [esi+4], 1

; 442  : 
; 443  : 	//	no need to release engine. Startup will close everything itself.
; 444  : }

	pop	esi
	pop	ecx
	ret	4
?RunBenchmark@xrSASH@@AAEXPBD@Z ENDP			; xrSASH::RunBenchmark
_TEXT	ENDS
PUBLIC	?LoopNative@xrSASH@@AAEXXZ			; xrSASH::LoopNative
; Function compile flags: /Ogtpy
;	COMDAT ?LoopNative@xrSASH@@AAEXXZ
_TEXT	SEGMENT
$T556364 = -1084					; size = 4
_test_command$117549 = -1080				; size = 4
_test_name$117547 = -1076				; size = 4
_R$ = -1072						; size = 4
_t$117548 = -1068					; size = 4
_ini$ = -1064						; size = 540
_in_file$ = -520					; size = 520
?LoopNative@xrSASH@@AAEXXZ PROC				; xrSASH::LoopNative, COMDAT
; _this$ = ecx

; 118  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 1088				; 00000440H

; 119  : 	string_path in_file;
; 120  : 	FS.update_path(in_file,"$app_data_root$", m_strBenchCfgName);

	mov	edx, DWORD PTR __imp_?xr_FS@@3PAVCLocatorAPI@@A
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, ecx
	lea	eax, DWORD PTR [edi+6]
	push	eax
	push	OFFSET ??_C@_0BA@BDJNLMJI@$app_data_root$?$AA@
	lea	ecx, DWORD PTR _in_file$[esp+1112]
	push	ecx
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?update_path@CLocatorAPI@@QAEPBDAAY0CAI@DPBD1@Z

; 121  : 
; 122  : 	CInifile ini(in_file);

	sub	esp, 8
	mov	ecx, esp
	call	??0?$FastDelegate@$$A6A_NPBD@Z@fastdelegate@@QAE@XZ ; fastdelegate::FastDelegate<bool __cdecl(char const *)>::FastDelegate<bool __cdecl(char const *)>
	xor	ebp, ebp
	push	ebp
	push	1
	push	1
	push	1
	lea	eax, DWORD PTR _in_file$[esp+1128]
	push	eax
	lea	ecx, DWORD PTR _ini$[esp+1132]
	call	DWORD PTR __imp_??0CInifile@@QAE@PBDHHHIV?$FastDelegate@$$A6A_NPBD@Z@fastdelegate@@@Z

; 123  : 
; 124  : 	IReader* R 	= FS.r_open(in_file);

	mov	ecx, DWORD PTR __imp_?xr_FS@@3PAVCLocatorAPI@@A
	mov	ecx, DWORD PTR [ecx]
	lea	edx, DWORD PTR _in_file$[esp+1104]
	push	edx
	push	ebp
	call	DWORD PTR __imp_?r_open@CLocatorAPI@@QAEPAVIReader@@PBD0@Z

; 125  : 	if (R)

	cmp	eax, ebp
	mov	DWORD PTR _R$[esp+1104], eax
	je	$LN5@LoopNative

; 126  : 	{
; 127  : 		FS.r_close(R);

	mov	ecx, DWORD PTR __imp_?xr_FS@@3PAVCLocatorAPI@@A
	mov	ecx, DWORD PTR [ecx]
	lea	eax, DWORD PTR _R$[esp+1104]
	push	eax
	call	DWORD PTR __imp_?r_close@CLocatorAPI@@QAEXAAPAVIReader@@@Z

; 128  : 
; 129  : 		int test_count = ini.line_count("benchmark");

	push	OFFSET ??_C@_09HHEPMDCB@benchmark?$AA@
	lea	ecx, DWORD PTR _ini$[esp+1108]
	call	DWORD PTR __imp_?line_count@CInifile@@QBEIPBD@Z
	mov	ebx, eax

; 130  : 		LPCSTR test_name,t;
; 131  : 		shared_str test_command;
; 132  : 
; 133  : 		for(int i=0;i<test_count;++i)

	cmp	ebx, ebp
	mov	DWORD PTR _test_command$117549[esp+1104], ebp
	jle	$LN1@LoopNative
$LN4@LoopNative:

; 134  : 		{
; 135  : 			ini.r_line( "benchmark", i, &test_name, &t);

	lea	edx, DWORD PTR _t$117548[esp+1104]
	push	edx
	lea	eax, DWORD PTR _test_name$117547[esp+1108]
	push	eax
	push	ebp
	push	OFFSET ??_C@_09HHEPMDCB@benchmark?$AA@
	lea	ecx, DWORD PTR _ini$[esp+1120]
	call	DWORD PTR __imp_?r_line@CInifile@@QBEHPBDHPAPBD1@Z

; 136  : 			//xr_strcpy(g_sBenchmarkName, test_name);
; 137  : 
; 138  : 			test_command = ini.r_string_wb("benchmark",test_name);

	mov	ecx, DWORD PTR _test_name$117547[esp+1104]
	push	ecx
	push	OFFSET ??_C@_09HHEPMDCB@benchmark?$AA@
	lea	edx, DWORD PTR $T556364[esp+1112]
	push	edx
	lea	ecx, DWORD PTR _ini$[esp+1116]
	call	DWORD PTR __imp_?r_string_wb@CInifile@@QBE?AVshared_str@@PBD0@Z
	mov	esi, DWORD PTR [eax]
	test	esi, esi
	je	SHORT $LN26@LoopNative
	add	DWORD PTR [esi], 1
$LN26@LoopNative:
	mov	eax, DWORD PTR _test_command$117549[esp+1104]
	test	eax, eax
	je	SHORT $LN29@LoopNative
	add	DWORD PTR [eax], -1
$LN29@LoopNative:
	mov	eax, DWORD PTR $T556364[esp+1104]
	test	eax, eax
	mov	DWORD PTR _test_command$117549[esp+1104], esi
	je	SHORT $LN35@LoopNative
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR $T556364[esp+1104]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN35@LoopNative
	mov	DWORD PTR $T556364[esp+1104], 0
$LN35@LoopNative:

; 139  : 			xr_strcpy( Core.Params, *test_command );

	test	esi, esi
	je	SHORT $LN41@LoopNative
	lea	eax, DWORD PTR [esi+16]
	jmp	SHORT $LN42@LoopNative
$LN41@LoopNative:
	xor	eax, eax
$LN42@LoopNative:
	mov	ecx, DWORD PTR __imp_?Core@@3VxrCore@@A
	push	eax
	add	ecx, 1232				; 000004d0H
	push	ecx
	call	??$xr_strcpy@$0CAA@@@YAHAAY0CAA@DPBD@Z	; xr_strcpy<512>

; 140  : 			_strlwr_s( Core.Params );

	mov	edx, DWORD PTR __imp_?Core@@3VxrCore@@A
	add	edx, 1232				; 000004d0H
	push	edx
	call	??$_strlwr_s@$0CAA@@@YAHAAY0CAA@D@Z	; _strlwr_s<512>
	add	esp, 12					; 0000000cH

; 141  : 
; 142  : 			RunBenchmark(test_name);

	push	OFFSET ??_C@_0BF@JCPKOHG@SASH?3?3?5RunBenchmark?4?$AA@
	call	DWORD PTR __imp_?Msg@@YAXPBDZZ
	add	esp, 4
	push	0
	mov	ecx, edi
	call	?TryInitEngine@xrSASH@@AAEX_N@Z		; xrSASH::TryInitEngine
	call	?Startup@@YAXXZ				; Startup

; 143  : 
; 144  : 			//	Output results
; 145  : 			ReportNative(test_name);

	mov	eax, DWORD PTR _test_name$117547[esp+1104]
	push	eax
	mov	ecx, edi
	mov	BYTE PTR [edi+4], 1
	call	?ReportNative@xrSASH@@AAEXPBD@Z		; xrSASH::ReportNative
	add	ebp, 1
	cmp	ebp, ebx
	jl	$LN4@LoopNative

; 146  : 		}
; 147  : 	}

	test	esi, esi
	je	SHORT $LN1@LoopNative
	add	DWORD PTR [esi], -1

; 148  : 	else

	jmp	SHORT $LN1@LoopNative
$LN5@LoopNative:

; 149  : 		Msg("oa:: Native path can't find \"%s\" config file.", in_file);

	lea	ecx, DWORD PTR _in_file$[esp+1104]
	push	ecx
	push	OFFSET ??_C@_0CO@CBLKAMMI@oa?3?3?5Native?5path?5can?8t?5find?5?$CC?$CFs?$CC@
	call	DWORD PTR __imp_?Msg@@YAXPBDZZ
	add	esp, 8
$LN1@LoopNative:

; 150  : 
; 151  : 	FlushLog();

	call	DWORD PTR __imp_?FlushLog@@YAXXZ

; 152  : }

	lea	ecx, DWORD PTR _ini$[esp+1104]
	call	DWORD PTR __imp_??1CInifile@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?LoopNative@xrSASH@@AAEXXZ ENDP				; xrSASH::LoopNative
_TEXT	ENDS
PUBLIC	?LoopOA@xrSASH@@AAEXXZ				; xrSASH::LoopOA
; Function compile flags: /Ogtpy
;	COMDAT ?LoopOA@xrSASH@@AAEXXZ
_TEXT	SEGMENT
_Command$ = -12						; size = 12
?LoopOA@xrSASH@@AAEXXZ PROC				; xrSASH::LoopOA, COMDAT
; _this$ = ecx

; 65   : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 16					; 00000010H
	push	ebx
	mov	ebx, DWORD PTR __imp____iob_func
	push	ebp
	mov	ebp, DWORD PTR __imp__fprintf
	push	esi
	push	edi
	mov	edi, ecx
$LN11@LoopOA:

; 66   : 	oaCommand Command;
; 67   : 	bool	bExit = false;
; 68   : 
; 69   : 	while (!bExit)
; 70   : 	{
; 71   : 		//	It must be called on the oaCommand object sent to 
; 72   : 		//	oaGetNextCommand() before each call to oaGetNextCommand().
; 73   : 		oaInitCommand(&Command);

	xor	eax, eax

; 74   : 		switch(oaGetNextCommand(&Command))

	cmp	DWORD PTR _InitFlag, eax
	mov	DWORD PTR _Command$[esp+32], eax
	mov	DWORD PTR _Command$[esp+36], eax
	mov	DWORD PTR _Command$[esp+40], eax
	mov	DWORD PTR _Command$[esp+32], 12		; 0000000cH
	jne	SHORT $LN17@LoopOA
	push	OFFSET ??_C@_0BE@FCNOHKJO@OA?5not?5initialized?4?$AA@
	push	OFFSET ??_C@_0L@MJEBIGKE@ERROR?3?5?$CFs?6?$AA@
	call	ebx
	add	eax, 64					; 00000040H
	push	eax
	call	ebp
	add	esp, 12					; 0000000cH
	xor	eax, eax
	jmp	SHORT $LN29@LoopOA
$LN17@LoopOA:
	lea	eax, DWORD PTR _Command$[esp+32]
	push	eax
	call	DWORD PTR _FuncTable+4
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	jne	SHORT $LN16@LoopOA
	call	_Cleanup
$LN16@LoopOA:
	cmp	esi, 6
	mov	DWORD PTR _Command$[esp+36], esi
	mov	eax, esi
	ja	SHORT $LN11@LoopOA
$LN29@LoopOA:
	jmp	DWORD PTR $LN33@LoopOA[eax*4]
$LN5@LoopOA:

; 79   : 			bExit = true;
; 80   : 			break;
; 81   : 
; 82   : 			/* Run as normal */
; 83   : 		case OA_CMD_RUN: 
; 84   : 			//RunApp();
; 85   : 			//Msg("SASH:: GetCurrentOptions.");
; 86   : 			bExit = true;
; 87   : 			break;
; 88   : 
; 89   : 			/* Enumerate all in-game options */
; 90   : 		case OA_CMD_GET_ALL_OPTIONS: 
; 91   : 			GetAllOptions();

	mov	ecx, edi
	call	?GetAllOptions@xrSASH@@AAEXXZ		; xrSASH::GetAllOptions

; 92   : 			break;

	jmp	SHORT $LN11@LoopOA
$LN4@LoopOA:

; 93   : 
; 94   : 			/* Return the option values currently set */
; 95   : 		case OA_CMD_GET_CURRENT_OPTIONS:
; 96   : 			GetCurrentOptions();

	mov	ecx, edi
	call	?GetCurrentOptions@xrSASH@@AAEXXZ	; xrSASH::GetCurrentOptions

; 97   : 			break;

	jmp	SHORT $LN11@LoopOA
$LN3@LoopOA:

; 98   : 
; 99   : 			/* Set all in-game options */
; 100  : 		case OA_CMD_SET_OPTIONS: 
; 101  : 			SetOptions();

	mov	ecx, edi
	call	?SetOptions@xrSASH@@AAEXXZ		; xrSASH::SetOptions

; 102  : 			break;

	jmp	SHORT $LN11@LoopOA
$LN2@LoopOA:

; 103  : 
; 104  : 			/* Enumerate all known benchmarks */
; 105  : 		case OA_CMD_GET_BENCHMARKS: 
; 106  : 			GetBenchmarks();

	push	OFFSET ??_C@_0BG@EJADJCDM@SASH?3?3?5GetBenchmarks?4?$AA@
	call	DWORD PTR __imp_?Msg@@YAXPBDZZ
	add	esp, 4
	cmp	DWORD PTR _InitFlag, 0
	jne	SHORT $LN23@LoopOA
	push	OFFSET ??_C@_0BE@FCNOHKJO@OA?5not?5initialized?4?$AA@
	push	OFFSET ??_C@_0L@MJEBIGKE@ERROR?3?5?$CFs?6?$AA@
	call	ebx
	add	eax, 64					; 00000040H
	push	eax
	call	ebp
	add	esp, 12					; 0000000cH
	jmp	$LN11@LoopOA
$LN23@LoopOA:
	mov	eax, DWORD PTR _FuncTable+20
	test	eax, eax
	je	$LN11@LoopOA
	push	OFFSET ??_C@_05JLNEMJLN@dummy?$AA@
	call	eax
	add	esp, 4

; 107  : 			break;

	jmp	$LN11@LoopOA
$LN1@LoopOA:

; 108  : 
; 109  : 			/* Run benchmark */
; 110  : 		case OA_CMD_RUN_BENCHMARK: 
; 111  : 			RunBenchmark(Command.BenchmarkName);

	push	OFFSET ??_C@_0BF@JCPKOHG@SASH?3?3?5RunBenchmark?4?$AA@
	call	DWORD PTR __imp_?Msg@@YAXPBDZZ
	add	esp, 4
	push	0
	mov	ecx, edi
	call	?TryInitEngine@xrSASH@@AAEX_N@Z		; xrSASH::TryInitEngine
	call	?Startup@@YAXXZ				; Startup
	mov	BYTE PTR [edi+4], 1
	jmp	$LN11@LoopOA
$LN7@LoopOA:

; 75   : 		{
; 76   : 			/* No more commands, exit program */
; 77   : 		case OA_CMD_EXIT:
; 78   : 			Msg("SASH:: Exit.");

	push	OFFSET ??_C@_0N@GLHFJILB@SASH?3?3?5Exit?4?$AA@
	call	DWORD PTR __imp_?Msg@@YAXPBDZZ
	add	esp, 4
$LN6@LoopOA:

; 112  : 			break;
; 113  : 		}
; 114  : 	}
; 115  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN33@LoopOA:
	DD	$LN7@LoopOA
	DD	$LN6@LoopOA
	DD	$LN5@LoopOA
	DD	$LN4@LoopOA
	DD	$LN3@LoopOA
	DD	$LN2@LoopOA
	DD	$LN1@LoopOA
?LoopOA@xrSASH@@AAEXXZ ENDP				; xrSASH::LoopOA
_TEXT	ENDS
PUBLIC	?MainLoop@xrSASH@@QAEXXZ			; xrSASH::MainLoop
; Function compile flags: /Ogtpy
;	COMDAT ?MainLoop@xrSASH@@QAEXXZ
_TEXT	SEGMENT
?MainLoop@xrSASH@@QAEXXZ PROC				; xrSASH::MainLoop, COMDAT
; _this$ = ecx

; 47   : {

	push	esi
	mov	esi, ecx

; 48   : 	m_bRunning = true;
; 49   : 	m_bReinitEngine = false;
; 50   : 
; 51   : 	if (m_bOpenAutomate)

	cmp	BYTE PTR [esi+1], 0
	mov	BYTE PTR [esi+2], 1
	mov	BYTE PTR [esi+4], 0
	je	SHORT $LN2@MainLoop

; 52   : 	{
; 53   : 		LoopOA();

	call	?LoopOA@xrSASH@@AAEXXZ			; xrSASH::LoopOA

; 59   : 	}
; 60   : 
; 61   : 	m_bRunning = false;

	mov	BYTE PTR [esi+2], 0

; 62   : }

	pop	esi
	ret	0
$LN2@MainLoop:

; 54   : 	}
; 55   : 	else
; 56   : 	{
; 57   : 		//	Native benchmarks
; 58   : 		LoopNative();

	call	?LoopNative@xrSASH@@AAEXXZ		; xrSASH::LoopNative

; 59   : 	}
; 60   : 
; 61   : 	m_bRunning = false;

	mov	BYTE PTR [esi+2], 0

; 62   : }

	pop	esi
	ret	0
?MainLoop@xrSASH@@QAEXXZ ENDP				; xrSASH::MainLoop
; Function compile flags: /Ogtpy
;	COMDAT ??__Eg_SASH@@YAXXZ
text$yc	SEGMENT
$T557615 = -1						; size = 1
??__Eg_SASH@@YAXXZ PROC					; `dynamic initializer for 'g_SASH'', COMDAT

; 7    : xrSASH	ENGINE_API g_SASH;

	push	ecx
	mov	ecx, OFFSET ?g_SASH@@3VxrSASH@@A+72
	call	DWORD PTR __imp_??0CTimer@@QAE@XZ
	xor	eax, eax
	push	eax
	mov	DWORD PTR ?g_SASH@@3VxrSASH@@A+128, eax
	mov	DWORD PTR ?g_SASH@@3VxrSASH@@A+132, eax
	lea	eax, DWORD PTR $T557615[esp+8]
	push	eax
	mov	ecx, OFFSET ?g_SASH@@3VxrSASH@@A+136
	call	??0?$_STLP_alloc_proxy@PAMMV?$xalloc@M@@@priv@stlp_std@@QAE@ABV?$xalloc@M@@PAM@Z ; stlp_std::priv::_STLP_alloc_proxy<float *,float,xalloc<float> >::_STLP_alloc_proxy<float *,float,xalloc<float> >
	push	OFFSET ??__Fg_SASH@@YAXXZ		; `dynamic atexit destructor for 'g_SASH''
	call	_atexit
	add	esp, 8
	ret	0
??__Eg_SASH@@YAXXZ ENDP					; `dynamic initializer for 'g_SASH''
; Function compile flags: /Ogtpy
;	COMDAT ??__Fg_SASH@@YAXXZ
text$yd	SEGMENT
??__Fg_SASH@@YAXXZ PROC					; `dynamic atexit destructor for 'g_SASH'', COMDAT
	mov	ecx, OFFSET ?g_SASH@@3VxrSASH@@A+128
	jmp	??1?$_Impl_vector@MV?$xalloc@M@@@priv@stlp_std@@QAE@XZ ; stlp_std::priv::_Impl_vector<float,xalloc<float> >::~_Impl_vector<float,xalloc<float> >
??__Fg_SASH@@YAXXZ ENDP					; `dynamic atexit destructor for 'g_SASH''
PUBLIC	?g_SASH@@3VxrSASH@@A				; g_SASH
?g_SASH@@3VxrSASH@@A DB 090H DUP (?)			; g_SASH
_g_SASH$initializer$ DD FLAT:??__Eg_SASH@@YAXXZ
END
