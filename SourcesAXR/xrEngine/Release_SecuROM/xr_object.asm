; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	D:\CLEARSKY\sources\engine\xrEngine\xr_object.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?renderable_Render@CObject@@UAEXXZ		; CObject::renderable_Render
PUBLIC	?shedule_Update@CObject@@UAEXI@Z		; CObject::shedule_Update
PUBLIC	?spatial_move@CObject@@UAEXXZ			; CObject::spatial_move
PUBLIC	?spatial_unregister@CObject@@UAEXXZ		; CObject::spatial_unregister
PUBLIC	?spatial_register@CObject@@UAEXXZ		; CObject::spatial_register
PUBLIC	?get_last_local_point_on_mesh@CObject@@UBE?AU?$_vector3@M@@ABU2@G@Z ; CObject::get_last_local_point_on_mesh
PUBLIC	?get_new_local_point_on_mesh@CObject@@UBE?AU?$_vector3@M@@AAG@Z ; CObject::get_new_local_point_on_mesh
PUBLIC	?OnH_A_Independent@CObject@@UAEXXZ		; CObject::OnH_A_Independent
PUBLIC	?OnH_A_Chield@CObject@@UAEXXZ			; CObject::OnH_A_Chield
PUBLIC	?OnH_B_Independent@CObject@@UAEX_N@Z		; CObject::OnH_B_Independent
PUBLIC	?OnH_B_Chield@CObject@@UAEXXZ			; CObject::OnH_B_Chield
PUBLIC	?ps_Element@CObject@@UBE?AUSavedPosition@1@I@Z	; CObject::ps_Element
PUBLIC	?net_Destroy@CObject@@UAEXXZ			; CObject::net_Destroy
PUBLIC	?net_Spawn@CObject@@UAEHPAVCSE_Abstract@@@Z	; CObject::net_Spawn
PUBLIC	?UpdateCL@CObject@@UAEXXZ			; CObject::UpdateCL
PUBLIC	?Load@CObject@@UAEXPBD@Z			; CObject::Load
PUBLIC	?BoundingBox@CObject@@UBEABV?$_box3@M@@XZ	; CObject::BoundingBox
PUBLIC	?Radius@CObject@@UBEMXZ				; CObject::Radius
PUBLIC	?Center@CObject@@UBEXAAU?$_vector3@M@@@Z	; CObject::Center
PUBLIC	?mul_43@?$_matrix@M@@QAEAAU1@ABU1@0@Z		; _matrix<float>::mul_43
PUBLIC	?translate@?$_matrix@M@@QAEAAU1@ABU?$_vector3@M@@@Z ; _matrix<float>::translate
PUBLIC	?scale@?$_matrix@M@@QAEAAU1@MMM@Z		; _matrix<float>::scale
PUBLIC	?scale@?$_matrix@M@@QAEAAU1@ABU?$_vector3@M@@@Z	; _matrix<float>::scale
PUBLIC	?sub@?$_vector3@M@@QAEAAU1@ABU1@0@Z		; _vector3<float>::sub
PUBLIC	?getsize@?$_box3@M@@QBEXAAU?$_vector3@M@@@Z	; _box3<float>::getsize
PUBLIC	?getradius@?$_box3@M@@QBEXAAU?$_vector3@M@@@Z	; _box3<float>::getradius
PUBLIC	?getcenter@?$_box3@M@@QBEABV1@AAU?$_vector3@M@@@Z ; _box3<float>::getcenter
PUBLIC	??A?$svector@USavedPosition@CObject@@$03@@QBEABUSavedPosition@CObject@@I@Z ; svector<CObject::SavedPosition,4>::operator[]
PUBLIC	?clear@?$svector@USavedPosition@CObject@@$03@@QAEXXZ ; svector<CObject::SavedPosition,4>::clear
PUBLIC	??$xr_new@VCCF_Skeleton@@PAVCObject@@@@YAPAVCCF_Skeleton@@ABQAVCObject@@@Z ; xr_new<CCF_Skeleton,CObject *>
PUBLIC	??Ashared_str@@QAEDI@Z				; shared_str::operator[]
PUBLIC	?_get@shared_str@@QBEPBUstr_value@@XZ		; shared_str::_get
PUBLIC	??8@YA_NABVshared_str@@0@Z			; operator==
PUBLIC	?strext@@YAPADPBD@Z				; strext
PUBLIC	?xr_strlwr@@YAPADPAD@Z				; xr_strlwr
PUBLIC	??$xr_strcpy@$0CAI@@@YAHAAY0CAI@DPBD@Z		; xr_strcpy<520>
PUBLIC	?transform_tiny@?$_matrix@M@@QBEXAAU?$_vector3@M@@ABU2@@Z ; _matrix<float>::transform_tiny
PUBLIC	??4shared_str@@QAEAAV0@PBD@Z			; shared_str::operator=
PUBLIC	??0?$svector@USavedPosition@CObject@@$03@@QAE@XZ ; svector<CObject::SavedPosition,4>::svector<CObject::SavedPosition,4>
PUBLIC	?fsimilar@@YAHMMM@Z				; fsimilar
PUBLIC	_fabsf
PUBLIC	?_abs@@YAMM@Z					; _abs
PUBLIC	?similar@?$_vector3@M@@QBEHABU1@M@Z		; _vector3<float>::similar
PUBLIC	?push_back@?$svector@USavedPosition@CObject@@$03@@QAEXUSavedPosition@CObject@@@Z ; svector<CObject::SavedPosition,4>::push_back
PUBLIC	??A?$svector@USavedPosition@CObject@@$03@@QAEAAUSavedPosition@CObject@@I@Z ; svector<CObject::SavedPosition,4>::operator[]
PUBLIC	?back@?$svector@USavedPosition@CObject@@$03@@QAEAAUSavedPosition@CObject@@XZ ; svector<CObject::SavedPosition,4>::back
PUBLIC	?empty@?$svector@USavedPosition@CObject@@$03@@QBE_NXZ ; svector<CObject::SavedPosition,4>::empty
PUBLIC	??_C@_0O@JKHJECOG@CObject?3?3Load?$AA@		; `string'
PUBLIC	??_C@_0DC@KLBOKOMF@D?3?2CLEARSKY?2sources?2engine?2xrEng@ ; `string'
PUBLIC	??_C@_07BNGFJMOB@section?$AA@			; `string'
PUBLIC	??_C@_06KABONEAP@visual?$AA@			; `string'
PUBLIC	??_C@_05DCEMOPME@cform?$AA@			; `string'
PUBLIC	??_C@_0BD@FMCMDGBO@CObject?3?3net_Spawn?$AA@	; `string'
PUBLIC	??_C@_0O@CEHLMFAB@spatial?4space?$AA@		; `string'
EXTRN	__imp_?line_exist@CInifile@@QBEHABVshared_str@@0@Z:PROC
EXTRN	__imp_?r_string@CInifile@@QBEPBDABVshared_str@@PBD@Z:PROC
EXTRN	__imp__strrchr:PROC
EXTRN	__imp_??0ISpatial@@QAE@PAVISpatial_DB@@@Z:PROC
;	COMDAT ?ignore_always@?3??Load@CObject@@UAEXPBD@Z@4_NA
_BSS	SEGMENT
?ignore_always@?3??Load@CObject@@UAEXPBD@Z@4_NA DB 01H DUP (?) ; `CObject::Load'::`4'::ignore_always
_BSS	ENDS
;	COMDAT ?ignore_always@?BA@??net_Spawn@CObject@@UAEHPAVCSE_Abstract@@@Z@4_NA
_BSS	SEGMENT
?ignore_always@?BA@??net_Spawn@CObject@@UAEHPAVCSE_Abstract@@@Z@4_NA DB 01H DUP (?) ; `CObject::net_Spawn'::`16'::ignore_always
;	COMDAT ??_C@_0O@CEHLMFAB@spatial?4space?$AA@
CONST	SEGMENT
??_C@_0O@CEHLMFAB@spatial?4space?$AA@ DB 'spatial.space', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FMCMDGBO@CObject?3?3net_Spawn?$AA@
CONST	SEGMENT
??_C@_0BD@FMCMDGBO@CObject?3?3net_Spawn?$AA@ DB 'CObject::net_Spawn', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05DCEMOPME@cform?$AA@
CONST	SEGMENT
??_C@_05DCEMOPME@cform?$AA@ DB 'cform', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KABONEAP@visual?$AA@
CONST	SEGMENT
??_C@_06KABONEAP@visual?$AA@ DB 'visual', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BNGFJMOB@section?$AA@
CONST	SEGMENT
??_C@_07BNGFJMOB@section?$AA@ DB 'section', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@KLBOKOMF@D?3?2CLEARSKY?2sources?2engine?2xrEng@
CONST	SEGMENT
??_C@_0DC@KLBOKOMF@D?3?2CLEARSKY?2sources?2engine?2xrEng@ DB 'D:\CLEARSKY'
	DB	'\sources\engine\xrEngine\xr_object.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JKHJECOG@CObject?3?3Load?$AA@
CONST	SEGMENT
??_C@_0O@JKHJECOG@CObject?3?3Load?$AA@ DB 'CObject::Load', 00H ; `string'
_base_spu_epsP DD 03d4ccccdr			; 0.05
_base_spu_epsR DD 03d4ccccdr			; 0.05
_PI	DD	040490fdbr			; 3.14159
_PI_MUL_2 DD	040c90fdbr			; 6.28319
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrstring.h
;	COMDAT ?_get@shared_str@@QBEPBUstr_value@@XZ
_TEXT	SEGMENT
?_get@shared_str@@QBEPBUstr_value@@XZ PROC		; shared_str::_get, COMDAT
; _this$ = eax

; 69   : 	const str_value*	_get		()	const						{	return p_;																					}

	mov	eax, DWORD PTR [eax]
	ret	0
?_get@shared_str@@QBEPBUstr_value@@XZ ENDP		; shared_str::_get
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??8@YA_NABVshared_str@@0@Z
_TEXT	SEGMENT
??8@YA_NABVshared_str@@0@Z PROC				; operator==, COMDAT
; _a$ = eax
; _b$ = edx

; 108  : IC bool operator	==	(shared_str const & a, shared_str const & b)		{ return a._get() == b._get();					}

	mov	ecx, DWORD PTR [eax]
	xor	eax, eax
	cmp	ecx, DWORD PTR [edx]
	sete	al
	ret	0
??8@YA_NABVshared_str@@0@Z ENDP				; operator==
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??Ashared_str@@QAEDI@Z
_TEXT	SEGMENT
??Ashared_str@@QAEDI@Z PROC				; shared_str::operator[], COMDAT
; _this$ = eax

; 82   : 	char				operator[]	(size_t id)						{	return p_->value[id];							}

	mov	ecx, DWORD PTR [eax]
	mov	al, BYTE PTR [ecx+16]
	ret	0
??Ashared_str@@QAEDI@Z ENDP				; shared_str::operator[]
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_std_extensions.h
_TEXT	ENDS
;	COMDAT ?strext@@YAPADPBD@Z
_TEXT	SEGMENT
?strext@@YAPADPBD@Z PROC				; strext, COMDAT
; _S$ = eax

; 173  : {	return (char*) strrchr(S,'.');	}

	push	46					; 0000002eH
	push	eax
	call	DWORD PTR __imp__strrchr
	add	esp, 8
	ret	0
?strext@@YAPADPBD@Z ENDP				; strext
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?xr_strlwr@@YAPADPAD@Z
_TEXT	SEGMENT
?xr_strlwr@@YAPADPAD@Z PROC				; xr_strlwr, COMDAT
; _S$ = eax

; 179  : {	return strlwr(S);				}

	push	eax
	call	DWORD PTR __imp__strlwr
	add	esp, 4
	ret	0
?xr_strlwr@@YAPADPAD@Z ENDP				; xr_strlwr
; Function compile flags: /Ogtpy
; File j:\msvs8\vc\include\math.h
_TEXT	ENDS
;	COMDAT _fabsf
_TEXT	SEGMENT
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 384  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	fld	DWORD PTR __X$[ebp]
	fabs
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_std_extensions.h
_TEXT	ENDS
;	COMDAT ?_abs@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?_abs@@YAMM@Z PROC					; _abs, COMDAT

; 99   : IC float	_abs	(float x)		{ return fabsf(x); }

	fld	DWORD PTR _x$[esp-4]
	push	ecx
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	ret	0
?_abs@@YAMM@Z ENDP					; _abs
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_vector3d.h
_TEXT	ENDS
;	COMDAT ?sub@?$_vector3@M@@QAEAAU1@ABU1@0@Z
_TEXT	SEGMENT
?sub@?$_vector3@M@@QAEAAU1@ABU1@0@Z PROC		; _vector3<float>::sub, COMDAT
; _this$ = eax
; _a$ = edx
; _v$ = ecx

; 36   : 	ICF	SelfRef	sub(const Self &a, const Self &v)		{ x=a.x-v.x;y=a.y-v.y;	z=a.z-v.z;		return *this;	};

	movss	xmm0, DWORD PTR [edx]
	subss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	subss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [eax+4], xmm0
	movss	xmm0, DWORD PTR [edx+8]
	subss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR [eax+8], xmm0
	ret	0
?sub@?$_vector3@M@@QAEAAU1@ABU1@0@Z ENDP		; _vector3<float>::sub
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_fbox.h
_TEXT	ENDS
;	COMDAT ?getsize@?$_box3@M@@QBEXAAU?$_vector3@M@@@Z
_TEXT	SEGMENT
?getsize@?$_box3@M@@QBEXAAU?$_vector3@M@@@Z PROC	; _box3<float>::getsize, COMDAT
; _this$ = eax
; _R$ = ecx

; 92   : 	IC	void		getsize		(Tvector& R )	const 	{ R.sub( max, min ); };

	movss	xmm0, DWORD PTR [eax+12]
	subss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	subss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]
	subss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [ecx+8], xmm0
	ret	0
?getsize@?$_box3@M@@QBEXAAU?$_vector3@M@@@Z ENDP	; _box3<float>::getsize
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\fixedvector.h
_TEXT	ENDS
;	COMDAT ?empty@?$svector@USavedPosition@CObject@@$03@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$svector@USavedPosition@CObject@@$03@@QBE_NXZ PROC ; svector<CObject::SavedPosition,4>::empty, COMDAT
; _this$ = ecx

; 48   : 	IC bool		empty()		const			{ return 0==count;	}

	xor	eax, eax
	cmp	DWORD PTR [ecx+64], eax
	sete	al
	ret	0
?empty@?$svector@USavedPosition@CObject@@$03@@QBE_NXZ ENDP ; svector<CObject::SavedPosition,4>::empty
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?back@?$svector@USavedPosition@CObject@@$03@@QAEAAUSavedPosition@CObject@@XZ
_TEXT	SEGMENT
?back@?$svector@USavedPosition@CObject@@$03@@QAEAAUSavedPosition@CObject@@XZ PROC ; svector<CObject::SavedPosition,4>::back, COMDAT
; _this$ = eax

; 42   : 	IC reference		back()				{ return array[count-1];				}

	mov	ecx, DWORD PTR [eax+64]
	shl	ecx, 4
	lea	eax, DWORD PTR [ecx+eax-16]
	ret	0
?back@?$svector@USavedPosition@CObject@@$03@@QAEAAUSavedPosition@CObject@@XZ ENDP ; svector<CObject::SavedPosition,4>::back
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??A?$svector@USavedPosition@CObject@@$03@@QBEABUSavedPosition@CObject@@I@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
??A?$svector@USavedPosition@CObject@@$03@@QBEABUSavedPosition@CObject@@I@Z PROC ; svector<CObject::SavedPosition,4>::operator[], COMDAT
; _id$ = eax

; 39   : 	IC const_reference	operator[] (u32 id)	const	{ VERIFY(id<count); return array[id];	}

	shl	eax, 4
	add	eax, DWORD PTR _this$[esp-4]
	ret	4
??A?$svector@USavedPosition@CObject@@$03@@QBEABUSavedPosition@CObject@@I@Z ENDP ; svector<CObject::SavedPosition,4>::operator[]
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??A?$svector@USavedPosition@CObject@@$03@@QAEAAUSavedPosition@CObject@@I@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
??A?$svector@USavedPosition@CObject@@$03@@QAEAAUSavedPosition@CObject@@I@Z PROC ; svector<CObject::SavedPosition,4>::operator[], COMDAT
; _id$ = eax

; 38   : 	IC reference		operator[] (u32 id)			{ VERIFY(id<count); return array[id];	}

	shl	eax, 4
	add	eax, DWORD PTR _this$[esp-4]
	ret	4
??A?$svector@USavedPosition@CObject@@$03@@QAEAAUSavedPosition@CObject@@I@Z ENDP ; svector<CObject::SavedPosition,4>::operator[]
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?push_back@?$svector@USavedPosition@CObject@@$03@@QAEXUSavedPosition@CObject@@@Z
_TEXT	SEGMENT
_e$ = 8							; size = 16
?push_back@?$svector@USavedPosition@CObject@@$03@@QAEXUSavedPosition@CObject@@@Z PROC ; svector<CObject::SavedPosition,4>::push_back, COMDAT
; _this$ = ecx

; 35   : 	IC void		push_back(value_type e)		{ VERIFY(count<dim); array[count++]=e;	}

	mov	eax, DWORD PTR [ecx+64]
	mov	edx, DWORD PTR _e$[esp-4]
	shl	eax, 4
	mov	DWORD PTR [eax+ecx], edx
	mov	edx, DWORD PTR _e$[esp]
	add	eax, ecx
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _e$[esp+4]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR _e$[esp+8]
	mov	DWORD PTR [eax+12], edx
	add	DWORD PTR [ecx+64], 1
	ret	16					; 00000010H
?push_back@?$svector@USavedPosition@CObject@@$03@@QAEXUSavedPosition@CObject@@@Z ENDP ; svector<CObject::SavedPosition,4>::push_back
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?clear@?$svector@USavedPosition@CObject@@$03@@QAEXXZ
_TEXT	SEGMENT
?clear@?$svector@USavedPosition@CObject@@$03@@QAEXXZ PROC ; svector<CObject::SavedPosition,4>::clear, COMDAT
; _this$ = eax

; 31   : 	IC void		clear()						{ count=0;								}

	mov	DWORD PTR [eax+64], 0
	ret	0
?clear@?$svector@USavedPosition@CObject@@$03@@QAEXXZ ENDP ; svector<CObject::SavedPosition,4>::clear
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$svector@USavedPosition@CObject@@$03@@QAE@XZ
_TEXT	SEGMENT
??0?$svector@USavedPosition@CObject@@$03@@QAE@XZ PROC	; svector<CObject::SavedPosition,4>::svector<CObject::SavedPosition,4>, COMDAT
; _this$ = eax

; 22   : 	{}

	mov	DWORD PTR [eax+64], 0
	ret	0
??0?$svector@USavedPosition@CObject@@$03@@QAE@XZ ENDP	; svector<CObject::SavedPosition,4>::svector<CObject::SavedPosition,4>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_fbox.h
_TEXT	ENDS
;	COMDAT ?getcenter@?$_box3@M@@QBEABV1@AAU?$_vector3@M@@@Z
_TEXT	SEGMENT
?getcenter@?$_box3@M@@QBEABV1@AAU?$_vector3@M@@@Z PROC	; _box3<float>::getcenter, COMDAT
; _this$ = eax
; _C$ = ecx

; 97   : 		C.x = (min.x + max.x) * 0.5f;

	movss	xmm1, DWORD PTR [eax+12]
	addss	xmm1, DWORD PTR [eax]
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm1, xmm0
	movss	DWORD PTR [ecx], xmm1

; 98   : 		C.y = (min.y + max.y) * 0.5f;

	movss	xmm1, DWORD PTR [eax+16]
	addss	xmm1, DWORD PTR [eax+4]
	mulss	xmm1, xmm0
	movss	DWORD PTR [ecx+4], xmm1

; 99   : 		C.z = (min.z + max.z) * 0.5f;

	movss	xmm1, DWORD PTR [eax+20]
	addss	xmm1, DWORD PTR [eax+8]
	mulss	xmm1, xmm0
	movss	DWORD PTR [ecx+8], xmm1

; 100  : 		return				*this;
; 101  : 	};

	ret	0
?getcenter@?$_box3@M@@QBEABV1@AAU?$_vector3@M@@@Z ENDP	; _box3<float>::getcenter
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_matrix.h
_TEXT	ENDS
;	COMDAT ?transform_tiny@?$_matrix@M@@QBEXAAU?$_vector3@M@@ABU2@@Z
_TEXT	SEGMENT
?transform_tiny@?$_matrix@M@@QBEXAAU?$_vector3@M@@ABU2@@Z PROC ; _matrix<float>::transform_tiny, COMDAT
; _this$ = eax
; _dest$ = edx
; _v$ = ecx

; 498  : 		dest.x = v.x*_11 + v.y*_21 + v.z*_31 + _41;

	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR [eax+16]
	mulss	xmm1, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ecx]
	mulss	xmm1, DWORD PTR [eax]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR [eax+48]
	movss	DWORD PTR [edx], xmm0

; 499  : 		dest.y = v.x*_12 + v.y*_22 + v.z*_32 + _42;

	movss	xmm0, DWORD PTR [eax+36]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR [eax+20]
	mulss	xmm1, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR [ecx]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR [edx+4], xmm0

; 500  : 		dest.z = v.x*_13 + v.y*_23 + v.z*_33 + _43;

	movss	xmm0, DWORD PTR [eax+40]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR [eax+24]
	mulss	xmm1, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [eax+8]
	mulss	xmm1, DWORD PTR [ecx]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR [eax+56]
	movss	DWORD PTR [edx+8], xmm0

; 501  : 	}

	ret	0
?transform_tiny@?$_matrix@M@@QBEXAAU?$_vector3@M@@ABU2@@Z ENDP ; _matrix<float>::transform_tiny
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?mul_43@?$_matrix@M@@QAEAAU1@ABU1@0@Z
_TEXT	SEGMENT
?mul_43@?$_matrix@M@@QAEAAU1@ABU1@0@Z PROC		; _matrix<float>::mul_43, COMDAT
; _this$ = eax
; _A$ = ecx
; _B$ = edx

; 110  : 		VERIFY	((this!=&A)&&(this!=&B));
; 111  : 		m[0][0] = A.m[0][0] * B.m[0][0] + A.m[1][0] * B.m[0][1] + A.m[2][0] * B.m[0][2];

	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR [edx]
	movss	xmm1, DWORD PTR [ecx+16]
	mulss	xmm1, DWORD PTR [edx+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [edx+8]
	mulss	xmm1, DWORD PTR [ecx+32]
	addss	xmm0, xmm1
	movss	DWORD PTR [eax], xmm0

; 112  : 		m[0][1] = A.m[0][1] * B.m[0][0] + A.m[1][1] * B.m[0][1] + A.m[2][1] * B.m[0][2];

	movss	xmm0, DWORD PTR [ecx+20]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR [ecx+4]
	mulss	xmm1, DWORD PTR [edx]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ecx+36]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR [eax+4], xmm0

; 113  : 		m[0][2] = A.m[0][2] * B.m[0][0] + A.m[1][2] * B.m[0][1] + A.m[2][2] * B.m[0][2];

	movss	xmm0, DWORD PTR [ecx+24]
	mulss	xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ecx+40]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR [eax+8], xmm0

; 114  : 		m[0][3] = 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+12], xmm0

; 115  : 
; 116  : 		m[1][0] = A.m[0][0] * B.m[1][0] + A.m[1][0] * B.m[1][1] + A.m[2][0] * B.m[1][2];

	movss	xmm1, DWORD PTR [ecx]
	mulss	xmm1, DWORD PTR [edx+16]
	movss	xmm2, DWORD PTR [ecx+16]
	mulss	xmm2, DWORD PTR [edx+20]
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR [ecx+32]
	mulss	xmm2, DWORD PTR [edx+24]
	addss	xmm1, xmm2
	movss	DWORD PTR [eax+16], xmm1

; 117  : 		m[1][1] = A.m[0][1] * B.m[1][0] + A.m[1][1] * B.m[1][1] + A.m[2][1] * B.m[1][2];

	movss	xmm1, DWORD PTR [ecx+36]
	mulss	xmm1, DWORD PTR [edx+24]
	movss	xmm2, DWORD PTR [ecx+20]
	mulss	xmm2, DWORD PTR [edx+20]
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR [ecx+4]
	mulss	xmm2, DWORD PTR [edx+16]
	addss	xmm1, xmm2
	movss	DWORD PTR [eax+20], xmm1

; 118  : 		m[1][2] = A.m[0][2] * B.m[1][0] + A.m[1][2] * B.m[1][1] + A.m[2][2] * B.m[1][2];

	movss	xmm1, DWORD PTR [ecx+40]
	mulss	xmm1, DWORD PTR [edx+24]
	movss	xmm2, DWORD PTR [ecx+24]
	mulss	xmm2, DWORD PTR [edx+20]
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR [ecx+8]
	mulss	xmm2, DWORD PTR [edx+16]
	addss	xmm1, xmm2
	movss	DWORD PTR [eax+24], xmm1

; 119  : 		m[1][3] = 0;

	movss	DWORD PTR [eax+28], xmm0

; 120  : 
; 121  : 		m[2][0] = A.m[0][0] * B.m[2][0] + A.m[1][0] * B.m[2][1] + A.m[2][0] * B.m[2][2];

	movss	xmm1, DWORD PTR [ecx]
	mulss	xmm1, DWORD PTR [edx+32]
	movss	xmm2, DWORD PTR [ecx+16]
	mulss	xmm2, DWORD PTR [edx+36]
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR [ecx+32]
	mulss	xmm2, DWORD PTR [edx+40]
	addss	xmm1, xmm2
	movss	DWORD PTR [eax+32], xmm1

; 122  : 		m[2][1] = A.m[0][1] * B.m[2][0] + A.m[1][1] * B.m[2][1] + A.m[2][1] * B.m[2][2];

	movss	xmm1, DWORD PTR [ecx+36]
	mulss	xmm1, DWORD PTR [edx+40]
	movss	xmm2, DWORD PTR [ecx+20]
	mulss	xmm2, DWORD PTR [edx+36]
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR [ecx+4]
	mulss	xmm2, DWORD PTR [edx+32]
	addss	xmm1, xmm2
	movss	DWORD PTR [eax+36], xmm1

; 123  : 		m[2][2] = A.m[0][2] * B.m[2][0] + A.m[1][2] * B.m[2][1] + A.m[2][2] * B.m[2][2];

	movss	xmm1, DWORD PTR [ecx+40]
	movss	xmm2, DWORD PTR [ecx+24]
	mulss	xmm2, DWORD PTR [edx+36]
	mulss	xmm1, DWORD PTR [edx+40]
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR [ecx+8]
	mulss	xmm2, DWORD PTR [edx+32]

; 124  : 		m[2][3] = 0;

	movss	DWORD PTR [eax+44], xmm0
	addss	xmm1, xmm2
	movss	DWORD PTR [eax+40], xmm1

; 125  : 
; 126  : 		m[3][0] = A.m[0][0] * B.m[3][0] + A.m[1][0] * B.m[3][1] + A.m[2][0] * B.m[3][2] + A.m[3][0];

	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR [edx+48]
	movss	xmm1, DWORD PTR [ecx+16]
	mulss	xmm1, DWORD PTR [edx+52]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [edx+56]
	mulss	xmm1, DWORD PTR [ecx+32]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR [ecx+48]
	movss	DWORD PTR [eax+48], xmm0

; 127  : 		m[3][1] = A.m[0][1] * B.m[3][0] + A.m[1][1] * B.m[3][1] + A.m[2][1] * B.m[3][2] + A.m[3][1];

	movss	xmm0, DWORD PTR [ecx+36]
	mulss	xmm0, DWORD PTR [edx+56]
	movss	xmm1, DWORD PTR [ecx+20]
	mulss	xmm1, DWORD PTR [edx+52]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ecx+4]
	mulss	xmm1, DWORD PTR [edx+48]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR [ecx+52]
	movss	DWORD PTR [eax+52], xmm0

; 128  : 		m[3][2] = A.m[0][2] * B.m[3][0] + A.m[1][2] * B.m[3][1] + A.m[2][2] * B.m[3][2] + A.m[3][2];

	movss	xmm0, DWORD PTR [ecx+40]
	mulss	xmm0, DWORD PTR [edx+56]
	movss	xmm1, DWORD PTR [ecx+24]
	mulss	xmm1, DWORD PTR [edx+52]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+48]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR [ecx+56]
	movss	DWORD PTR [eax+56], xmm0

; 129  : 		m[3][3] = 1;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+60], xmm0

; 130  : 		return *this;
; 131  : 	}

	ret	0
?mul_43@?$_matrix@M@@QAEAAU1@ABU1@0@Z ENDP		; _matrix<float>::mul_43
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_vector3d.h
_TEXT	ENDS
;	COMDAT ?similar@?$_vector3@M@@QBEHABU1@M@Z
_TEXT	SEGMENT
_E$ = 8							; size = 4
?similar@?$_vector3@M@@QBEHABU1@M@Z PROC		; _vector3<float>::similar, COMDAT
; _this$ = edi
; _v$ = esi

; 58   : 	ICF BOOL	similar(const Self &v, T E=EPS_L) const	{ return _abs(x-v.x)<E && _abs(y-v.y)<E && _abs(z-v.z)<E;};

	movss	xmm0, DWORD PTR [edi]
	subss	xmm0, DWORD PTR [esi]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	fld	DWORD PTR _E$[esp]
	add	esp, 4
	fcomip	ST(1)
	fstp	ST(0)
	jbe	SHORT $LN3@similar
	movss	xmm0, DWORD PTR [edi+4]
	subss	xmm0, DWORD PTR [esi+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	fld	DWORD PTR _E$[esp]
	add	esp, 4
	fcomip	ST(1)
	fstp	ST(0)
	jbe	SHORT $LN3@similar
	movss	xmm0, DWORD PTR [edi+8]
	subss	xmm0, DWORD PTR [esi+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	fld	DWORD PTR _E$[esp]
	add	esp, 4
	fcomip	ST(1)
	fstp	ST(0)
	jbe	SHORT $LN3@similar
	mov	eax, 1
	ret	4
$LN3@similar:
	xor	eax, eax
	ret	4
?similar@?$_vector3@M@@QBEHABU1@M@Z ENDP		; _vector3<float>::similar
_TEXT	ENDS
PUBLIC	?setDestroy@CObject@@QAEXH@Z			; CObject::setDestroy
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\xr_object.cpp
;	COMDAT ?setDestroy@CObject@@QAEXH@Z
_TEXT	SEGMENT
__destroy$ = 8						; size = 4
?setDestroy@CObject@@QAEXH@Z PROC			; CObject::setDestroy, COMDAT
; _this$ = ecx

; 411  : 	if (_destroy == (BOOL)Props.bDestroy)

	mov	eax, DWORD PTR [ecx+164]
	mov	edx, eax
	shr	edx, 26					; 0000001aH
	push	esi
	mov	esi, DWORD PTR __destroy$[esp]
	and	edx, 1
	cmp	esi, edx
	je	SHORT $LN1@setDestroy

; 412  : 		return;
; 413  : 
; 414  : 	Props.bDestroy	= _destroy?1:0;

	xor	edx, edx
	test	esi, esi
	setne	dl
	shl	edx, 26					; 0000001aH
	xor	edx, eax
	and	edx, 67108864				; 04000000H
	xor	edx, eax

; 415  : 	if (_destroy)

	test	esi, esi
	mov	DWORD PTR [ecx+164], edx
	je	SHORT $LN1@setDestroy
	pop	esi

; 416  : 	{
; 417  : 		g_pGameLevel->Objects.register_object_to_destroy	(this);

	mov	DWORD PTR __destroy$[esp-4], ecx
	mov	ecx, DWORD PTR ?g_pGameLevel@@3PAVIGame_Level@@A ; g_pGameLevel
	add	ecx, 76					; 0000004cH
	jmp	?register_object_to_destroy@CObjectList@@QAEXPAVCObject@@@Z ; CObjectList::register_object_to_destroy
$LN1@setDestroy:
	pop	esi

; 418  : #ifdef DEBUG
; 419  : 		extern BOOL debug_destroy;
; 420  : 		if(debug_destroy)
; 421  : 			Msg("cl setDestroy [%d][%d]",ID(),Device.dwFrame);
; 422  : #endif
; 423  : #ifdef MP_LOGGING
; 424  : 		Msg("cl setDestroy [%d][%d]",ID(),Device.dwFrame);
; 425  : #endif //#ifdef MP_LOGGING
; 426  : 	}else
; 427  : 		VERIFY		(!g_pGameLevel->Objects.registered_object_to_destroy(this));
; 428  : }

	ret	4
?setDestroy@CObject@@QAEXH@Z ENDP			; CObject::setDestroy
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?OnH_B_Independent@CObject@@UAEX_N@Z
_TEXT	SEGMENT
_just_before_destroy$ = 8				; size = 1
?OnH_B_Independent@CObject@@UAEX_N@Z PROC		; CObject::OnH_B_Independent, COMDAT
; _this$ = ecx

; 407  : }

	ret	4
?OnH_B_Independent@CObject@@UAEX_N@Z ENDP		; CObject::OnH_B_Independent
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?OnH_A_Chield@CObject@@UAEXXZ
_TEXT	SEGMENT
?OnH_A_Chield@CObject@@UAEXXZ PROC			; CObject::OnH_A_Chield, COMDAT
; _this$ = ecx

; 395  : }

	ret	0
?OnH_A_Chield@CObject@@UAEXXZ ENDP			; CObject::OnH_A_Chield
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?ps_Element@CObject@@UBE?AUSavedPosition@1@I@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_ID$ = 12						; size = 4
?ps_Element@CObject@@UBE?AUSavedPosition@1@I@Z PROC	; CObject::ps_Element, COMDAT
; _this$ = ecx

; 363  : 	VERIFY(ID<ps_Size());
; 364  : 	return PositionStack[ID];

	mov	eax, DWORD PTR _ID$[esp-4]
	shl	eax, 4
	mov	edx, DWORD PTR [eax+ecx+184]
	lea	ecx, DWORD PTR [eax+ecx+184]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ecx

; 365  : }

	ret	8
?ps_Element@CObject@@UBE?AUSavedPosition@1@I@Z ENDP	; CObject::ps_Element
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?spatial_move@CObject@@UAEXXZ
_TEXT	SEGMENT
?spatial_move@CObject@@UAEXXZ PROC			; CObject::spatial_move, COMDAT
; _this$ = ecx

; 355  : {

	push	esi
	mov	esi, ecx

; 356  : 	Center						(spatial.sphere.P);

	mov	eax, DWORD PTR [esi-16]
	mov	edx, DWORD PTR [eax+16]
	push	edi
	lea	edi, DWORD PTR [esi-16]
	lea	ecx, DWORD PTR [esi+8]
	push	ecx
	mov	ecx, edi
	call	edx

; 357  : 	spatial.sphere.R			= Radius();

	mov	eax, DWORD PTR [edi]
	mov	edx, DWORD PTR [eax+20]
	mov	ecx, edi
	call	edx
	fstp	DWORD PTR [esi+20]
	pop	edi

; 358  : 	ISpatial::spatial_move		();

	mov	ecx, esi
	pop	esi
	jmp	DWORD PTR __imp_?spatial_move@ISpatial@@UAEXXZ
?spatial_move@CObject@@UAEXXZ ENDP			; CObject::spatial_move
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?spatial_unregister@CObject@@UAEXXZ
_TEXT	SEGMENT
?spatial_unregister@CObject@@UAEXXZ PROC		; CObject::spatial_unregister, COMDAT
; _this$ = ecx

; 351  : 	ISpatial::spatial_unregister();

	jmp	DWORD PTR __imp_?spatial_unregister@ISpatial@@UAEXXZ
?spatial_unregister@CObject@@UAEXXZ ENDP		; CObject::spatial_unregister
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?spatial_register@CObject@@UAEXXZ
_TEXT	SEGMENT
?spatial_register@CObject@@UAEXXZ PROC			; CObject::spatial_register, COMDAT
; _this$ = ecx

; 343  : {

	push	esi
	mov	esi, ecx

; 344  : 	Center						(spatial.sphere.P);

	mov	eax, DWORD PTR [esi-16]
	mov	edx, DWORD PTR [eax+16]
	push	edi
	lea	edi, DWORD PTR [esi-16]
	lea	ecx, DWORD PTR [esi+8]
	push	ecx
	mov	ecx, edi
	call	edx

; 345  : 	spatial.sphere.R			= Radius();

	mov	eax, DWORD PTR [edi]
	mov	edx, DWORD PTR [eax+20]
	mov	ecx, edi
	call	edx
	fstp	DWORD PTR [esi+20]
	pop	edi

; 346  : 	ISpatial::spatial_register	();

	mov	ecx, esi
	pop	esi
	jmp	DWORD PTR __imp_?spatial_register@ISpatial@@UAEXXZ
?spatial_register@CObject@@UAEXXZ ENDP			; CObject::spatial_register
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?BoundingBox@CObject@@UBEABV?$_box3@M@@XZ
_TEXT	SEGMENT
?BoundingBox@CObject@@UBEABV?$_box3@M@@XZ PROC		; CObject::BoundingBox, COMDAT
; _this$ = ecx

; 147  : const	Fbox&	CObject::BoundingBox	()				const	{ VERIFY2(renderable.visual,*cName()); return renderable.visual->getVisData().box;									}

	mov	eax, DWORD PTR [ecx+144]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	push	eax
	call	edx
	add	eax, 16					; 00000010H
	ret	0
?BoundingBox@CObject@@UBEABV?$_box3@M@@XZ ENDP		; CObject::BoundingBox
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Radius@CObject@@UBEMXZ
_TEXT	SEGMENT
?Radius@CObject@@UBEMXZ PROC				; CObject::Radius, COMDAT
; _this$ = ecx

; 145  : float	CObject::Radius					()				const	{ VERIFY2(renderable.visual,*cName()); return renderable.visual->getVisData().sphere.R;								}

	mov	eax, DWORD PTR [ecx+144]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	push	eax
	call	edx
	fld	DWORD PTR [eax+12]
	ret	0
?Radius@CObject@@UBEMXZ ENDP				; CObject::Radius
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Center@CObject@@UBEXAAU?$_vector3@M@@@Z
_TEXT	SEGMENT
_C$ = 8							; size = 4
?Center@CObject@@UBEXAAU?$_vector3@M@@@Z PROC		; CObject::Center, COMDAT
; _this$ = ecx

; 143  : void	CObject::Center					(Fvector& C)	const	{ VERIFY2(renderable.visual,*cName()); renderable.xform.transform_tiny(C,renderable.visual->getVisData().sphere.P);	}

	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+144]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	push	eax
	call	edx
	movss	xmm0, DWORD PTR [esi+112]
	mulss	xmm0, DWORD PTR [eax+8]
	movss	xmm1, DWORD PTR [esi+96]
	mulss	xmm1, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _C$[esp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [eax]
	mulss	xmm1, DWORD PTR [esi+80]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR [esi+128]
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [esi+116]
	mulss	xmm0, DWORD PTR [eax+8]
	movss	xmm1, DWORD PTR [esi+100]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [esi+84]
	mulss	xmm1, DWORD PTR [eax]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR [esi+132]
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [esi+120]
	mulss	xmm0, DWORD PTR [eax+8]
	movss	xmm1, DWORD PTR [esi+104]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [esi+88]
	mulss	xmm1, DWORD PTR [eax]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR [esi+136]
	movss	DWORD PTR [ecx+8], xmm0
	pop	esi
	ret	4
?Center@CObject@@UBEXAAU?$_vector3@M@@@Z ENDP		; CObject::Center
_TEXT	ENDS
PUBLIC	?setVisible@CObject@@QAEXH@Z			; CObject::setVisible
; Function compile flags: /Ogtpy
;	COMDAT ?setVisible@CObject@@QAEXH@Z
_TEXT	SEGMENT
__visible$ = 8						; size = 4
?setVisible@CObject@@QAEXH@Z PROC			; CObject::setVisible, COMDAT
; _this$ = ecx

; 133  : 	if (_visible){				// Parent should control object visibility itself (??????)

	cmp	DWORD PTR __visible$[esp-4], 0
	je	SHORT $LN3@setVisible

; 134  : 		Props.bVisible							= 1;

	or	DWORD PTR [ecx+164], 33554432		; 02000000H

; 135  : 		if (renderable.visual)	spatial.type	|=	STYPE_RENDERABLE;

	cmp	DWORD PTR [ecx+144], 0
	je	SHORT $LN1@setVisible
	or	DWORD PTR [ecx+20], 1

; 139  : 	}
; 140  : }

	ret	4
$LN3@setVisible:

; 136  : 	}else{
; 137  : 		Props.bVisible							= 0;

	and	DWORD PTR [ecx+164], -33554433		; fdffffffH

; 138  : 		spatial.type							&=	~STYPE_RENDERABLE;

	and	DWORD PTR [ecx+20], -2			; fffffffeH
$LN1@setVisible:

; 139  : 	}
; 140  : }

	ret	4
?setVisible@CObject@@QAEXH@Z ENDP			; CObject::setVisible
_TEXT	ENDS
PUBLIC	?setEnabled@CObject@@QAEXH@Z			; CObject::setEnabled
; Function compile flags: /Ogtpy
;	COMDAT ?setEnabled@CObject@@QAEXH@Z
_TEXT	SEGMENT
__enabled$ = 8						; size = 4
?setEnabled@CObject@@QAEXH@Z PROC			; CObject::setEnabled, COMDAT
; _this$ = ecx

; 123  : 	if (_enabled){

	cmp	DWORD PTR __enabled$[esp-4], 0
	je	SHORT $LN3@setEnabled

; 124  : 		Props.bEnabled							=	1;	

	or	DWORD PTR [ecx+164], 16777216		; 01000000H

; 125  : 		if (collidable.model)	spatial.type	|=	STYPE_COLLIDEABLE;

	cmp	DWORD PTR [ecx+160], 0
	je	SHORT $LN1@setEnabled
	or	DWORD PTR [ecx+20], 4

; 129  : 	}
; 130  : }

	ret	4
$LN3@setEnabled:

; 126  : 	}else{
; 127  : 		Props.bEnabled							=	0;

	and	DWORD PTR [ecx+164], -16777217		; feffffffH

; 128  : 		spatial.type							&=	~STYPE_COLLIDEABLE;

	and	DWORD PTR [ecx+20], -5			; fffffffbH
$LN1@setEnabled:

; 129  : 	}
; 130  : }

	ret	4
?setEnabled@CObject@@QAEXH@Z ENDP			; CObject::setEnabled
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\vector.h
;	COMDAT ?fsimilar@@YAHMMM@Z
_TEXT	SEGMENT
_b$ = 8							; size = 4
_cmp$ = 12						; size = 4
?fsimilar@@YAHMMM@Z PROC				; fsimilar, COMDAT
; _a$ = xmm0s

; 79   : IC BOOL  fsimilar		( float		a, float	b, float	cmp=EPS )		{ return _abs(a-b)<cmp;	}

	push	ecx
	subss	xmm0, DWORD PTR _b$[esp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	fld	DWORD PTR _cmp$[esp+4]
	add	esp, 4
	fcomip	ST(1)
	fstp	ST(0)
	jbe	SHORT $LN3@fsimilar
	mov	eax, 1
	pop	ecx
	ret	0
$LN3@fsimilar:
	xor	eax, eax
	pop	ecx
	ret	0
?fsimilar@@YAHMMM@Z ENDP				; fsimilar
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_std_extensions.h
_TEXT	ENDS
;	COMDAT ??$xr_strcpy@$0CAI@@@YAHAAY0CAI@DPBD@Z
_TEXT	SEGMENT
??$xr_strcpy@$0CAI@@@YAHAAY0CAI@DPBD@Z PROC		; xr_strcpy<520>, COMDAT
; _destination$ = ecx
; _source$ = eax

; 257  : 	return						xr_strcpy( destination, count, source );

	push	520					; 00000208H
	push	eax
	push	520					; 00000208H
	push	ecx
	call	DWORD PTR __imp__strncpy_s
	add	esp, 16					; 00000010H

; 258  : }

	ret	0
??$xr_strcpy@$0CAI@@@YAHAAY0CAI@DPBD@Z ENDP		; xr_strcpy<520>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_matrix.h
_TEXT	ENDS
;	COMDAT ?scale@?$_matrix@M@@QAEAAU1@MMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?scale@?$_matrix@M@@QAEAAU1@MMM@Z PROC			; _matrix<float>::scale, COMDAT
; _this$ = eax

; 259  : 		identity(); m[0][0]=x; m[1][1]=y; m[2][2]=z; 

	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+4], xmm0
	movss	DWORD PTR [eax+8], xmm0
	movss	DWORD PTR [eax+12], xmm0
	movss	DWORD PTR [eax+16], xmm0
	movss	DWORD PTR [eax+24], xmm0
	movss	DWORD PTR [eax+28], xmm0
	movss	DWORD PTR [eax+32], xmm0
	movss	DWORD PTR [eax+36], xmm0
	movss	DWORD PTR [eax+44], xmm0
	movss	DWORD PTR [eax+48], xmm0
	movss	DWORD PTR [eax+52], xmm0
	movss	DWORD PTR [eax+56], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+60], xmm0
	movss	xmm0, DWORD PTR _x$[esp-4]
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR _y$[esp-4]
	movss	DWORD PTR [eax+20], xmm0
	movss	xmm0, DWORD PTR _z$[esp-4]
	movss	DWORD PTR [eax+40], xmm0

; 260  : 		return *this;
; 261  : 	}

	ret	12					; 0000000cH
?scale@?$_matrix@M@@QAEAAU1@MMM@Z ENDP			; _matrix<float>::scale
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_fbox.h
_TEXT	ENDS
;	COMDAT ?getradius@?$_box3@M@@QBEXAAU?$_vector3@M@@@Z
_TEXT	SEGMENT
?getradius@?$_box3@M@@QBEXAAU?$_vector3@M@@@Z PROC	; _box3<float>::getradius, COMDAT
; _this$ = ecx
; _R$ = eax

; 93   : 	IC	void		getradius	(Tvector& R )	const 	{ getsize(R); R.mul(0.5f); };

	movss	xmm0, DWORD PTR [ecx+12]
	subss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	subss	xmm0, DWORD PTR [ecx+4]
	movss	xmm1, DWORD PTR [eax]
	movss	DWORD PTR [eax+4], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	subss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR [eax+8], xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm1, xmm0
	movss	DWORD PTR [eax], xmm1
	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm1, xmm0
	movss	DWORD PTR [eax+4], xmm1
	movss	xmm1, DWORD PTR [eax+8]
	mulss	xmm1, xmm0
	movss	DWORD PTR [eax+8], xmm1
	ret	0
?getradius@?$_box3@M@@QBEXAAU?$_vector3@M@@@Z ENDP	; _box3<float>::getradius
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_matrix.h
_TEXT	ENDS
;	COMDAT ?scale@?$_matrix@M@@QAEAAU1@ABU?$_vector3@M@@@Z
_TEXT	SEGMENT
?scale@?$_matrix@M@@QAEAAU1@ABU?$_vector3@M@@@Z PROC	; _matrix<float>::scale, COMDAT
; _this$ = eax
; _v$ = ecx

; 263  : 	{	return scale(v.x,v.y,v.z); }

	movss	xmm1, DWORD PTR [ecx]
	movss	xmm2, DWORD PTR [ecx+4]
	movss	xmm3, DWORD PTR [ecx+8]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+4], xmm0
	movss	DWORD PTR [eax+8], xmm0
	movss	DWORD PTR [eax+12], xmm0
	movss	DWORD PTR [eax+16], xmm0
	movss	DWORD PTR [eax+24], xmm0
	movss	DWORD PTR [eax+28], xmm0
	movss	DWORD PTR [eax+32], xmm0
	movss	DWORD PTR [eax+36], xmm0
	movss	DWORD PTR [eax+44], xmm0
	movss	DWORD PTR [eax+48], xmm0
	movss	DWORD PTR [eax+52], xmm0
	movss	DWORD PTR [eax+56], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+60], xmm0
	movss	DWORD PTR [eax], xmm1
	movss	DWORD PTR [eax+20], xmm2
	movss	DWORD PTR [eax+40], xmm3
	ret	0
?scale@?$_matrix@M@@QAEAAU1@ABU?$_vector3@M@@@Z ENDP	; _matrix<float>::scale
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?translate@?$_matrix@M@@QAEAAU1@ABU?$_vector3@M@@@Z
_TEXT	SEGMENT
?translate@?$_matrix@M@@QAEAAU1@ABU?$_vector3@M@@@Z PROC ; _matrix<float>::translate, COMDAT
; _this$ = eax
; _Loc$ = ecx

; 234  : 		identity();	c.set	(Loc.x,Loc.y,Loc.z);	

	xorps	xmm0, xmm0
	fld	DWORD PTR [ecx]
	movss	xmm1, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax], xmm1
	movss	DWORD PTR [eax+4], xmm0
	movss	DWORD PTR [eax+8], xmm0
	movss	DWORD PTR [eax+12], xmm0
	movss	DWORD PTR [eax+16], xmm0
	movss	DWORD PTR [eax+20], xmm1
	movss	DWORD PTR [eax+24], xmm0
	movss	DWORD PTR [eax+28], xmm0
	movss	DWORD PTR [eax+32], xmm0
	movss	DWORD PTR [eax+36], xmm0
	movss	DWORD PTR [eax+40], xmm1
	movss	DWORD PTR [eax+44], xmm0
	movss	DWORD PTR [eax+60], xmm1
	fstp	DWORD PTR [eax+48]
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+52]
	fld	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+56]

; 235  : 		return *this;
; 236  : 	}

	ret	0
?translate@?$_matrix@M@@QAEAAU1@ABU?$_vector3@M@@@Z ENDP ; _matrix<float>::translate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\xr_object.cpp
_TEXT	ENDS
;	COMDAT ?get_last_local_point_on_mesh@CObject@@UBE?AU?$_vector3@M@@ABU2@G@Z
_TEXT	SEGMENT
tv1118 = -200						; size = 4
tv719 = -200						; size = 4
tv1130 = -196						; size = 4
tv723 = -196						; size = 4
tv1107 = -192						; size = 4
tv705 = -192						; size = 4
tv1096 = -188						; size = 4
tv709 = -188						; size = 4
tv1105 = -184						; size = 4
tv965 = -184						; size = 4
tv1103 = -180						; size = 4
tv1021 = -180						; size = 4
tv1094 = -176						; size = 4
tv1011 = -176						; size = 4
tv1114 = -172						; size = 4
tv976 = -172						; size = 4
tv1092 = -168						; size = 4
tv987 = -168						; size = 4
tv1116 = -164						; size = 4
tv1001 = -164						; size = 4
tv696 = -160						; size = 4
tv700 = -156						; size = 4
_c$ = -152						; size = 12
_r$ = -140						; size = 12
_mR$ = -128						; size = 64
_mE$ = -64						; size = 64
___$ReturnUdt$ = 8					; size = 4
_local_point$ = 12					; size = 4
_bone_id$ = 16						; size = 2
?get_last_local_point_on_mesh@CObject@@UBE?AU?$_vector3@M@@ABU2@G@Z PROC ; CObject::get_last_local_point_on_mesh, COMDAT
; _this$ = ecx

; 437  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 200				; 000000c8H

; 438  : 	VERIFY				( bone_id == u16(-1) );
; 439  : 
; 440  : 	Fvector				result;
; 441  : 	// Fetch data
; 442  : 	Fmatrix				mE;
; 443  : 	const Fmatrix&		M = XFORM();
; 444  : 	const Fbox&			B = CFORM()->getBBox();

	mov	eax, DWORD PTR [ecx+160]

; 445  : 
; 446  : 	// Build OBB + Ellipse and X-form point
; 447  : 	Fvector				c,r;
; 448  : 	Fmatrix				T,mR,mS;
; 449  : 	B.getcenter			(c);

	movss	xmm1, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR [eax+12]
	movss	xmm3, DWORD PTR [eax+16]
	movss	xmm4, DWORD PTR [eax+20]
	add	eax, 12					; 0000000cH
	movaps	xmm0, xmm2
	addss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, xmm1

; 450  : 	B.getradius			(r);
; 451  : 	T.translate			(c);
; 452  : 	mR.mul_43			(M,T);

	movss	xmm6, DWORD PTR [ecx+116]
	movss	DWORD PTR _c$[esp+200], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	addss	xmm0, xmm3
	movss	xmm7, DWORD PTR [ecx+120]
	mulss	xmm0, xmm1
	movss	DWORD PTR _c$[esp+204], xmm0
	movss	xmm0, DWORD PTR [eax+20]
	addss	xmm0, xmm4
	mulss	xmm0, xmm1
	movss	DWORD PTR _c$[esp+208], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	subss	xmm0, xmm2
	movss	xmm2, DWORD PTR [eax+16]
	subss	xmm2, xmm3
	movss	xmm3, DWORD PTR [eax+20]
	subss	xmm3, xmm4
	movss	xmm4, DWORD PTR [ecx+104]
	mulss	xmm2, xmm1
	mulss	xmm3, xmm1
	movss	DWORD PTR _r$[esp+204], xmm2
	movss	xmm2, DWORD PTR [ecx+96]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR [ecx+112]
	movss	DWORD PTR tv696[esp+200], xmm2
	movss	DWORD PTR _r$[esp+208], xmm3
	movss	xmm3, DWORD PTR [ecx+80]
	movss	DWORD PTR _r$[esp+200], xmm0
	xorps	xmm0, xmm0
	mulss	xmm2, xmm0
	movss	DWORD PTR tv700[esp+200], xmm3
	movss	DWORD PTR tv965[esp+200], xmm2
	movaps	xmm5, xmm1
	mulss	xmm5, xmm0
	addss	xmm2, xmm5
	addss	xmm2, xmm3
	movss	xmm3, DWORD PTR [ecx+100]
	movss	DWORD PTR tv709[esp+200], xmm3
	movss	DWORD PTR tv723[esp+200], xmm4
	movss	DWORD PTR tv705[esp+200], xmm6
	mulss	xmm6, xmm0
	mulss	xmm3, xmm0
	mulss	xmm4, xmm0
	movss	DWORD PTR tv976[esp+200], xmm3
	addss	xmm3, xmm6
	movss	DWORD PTR tv987[esp+200], xmm4
	movss	DWORD PTR _mR$[esp+200], xmm2
	movss	xmm2, DWORD PTR [ecx+84]
	addss	xmm3, xmm2
	movss	DWORD PTR tv719[esp+200], xmm7
	mulss	xmm7, xmm0
	addss	xmm4, xmm7
	movss	DWORD PTR _mR$[esp+204], xmm3
	movss	xmm3, DWORD PTR [ecx+88]
	addss	xmm4, xmm3
	movss	DWORD PTR _mR$[esp+208], xmm4
	movss	xmm4, DWORD PTR tv700[esp+200]
	mulss	xmm4, xmm0
	movss	DWORD PTR tv1001[esp+200], xmm4
	addss	xmm4, xmm5
	addss	xmm4, DWORD PTR tv696[esp+200]
	movaps	xmm5, xmm2
	mulss	xmm5, xmm0
	movss	DWORD PTR tv1011[esp+200], xmm5
	addss	xmm5, xmm6
	addss	xmm5, DWORD PTR tv709[esp+200]
	movaps	xmm6, xmm3
	mulss	xmm6, xmm0
	movss	DWORD PTR tv1021[esp+200], xmm6
	addss	xmm6, xmm7
	addss	xmm6, DWORD PTR tv723[esp+200]
	movss	DWORD PTR _mR$[esp+224], xmm6
	movss	xmm6, DWORD PTR tv1001[esp+200]
	addss	xmm6, DWORD PTR tv965[esp+200]
	addss	xmm6, xmm1
	mulss	xmm1, DWORD PTR _c$[esp+208]
	movss	xmm7, DWORD PTR tv696[esp+200]
	mulss	xmm2, DWORD PTR _c$[esp+200]
	mulss	xmm3, DWORD PTR _c$[esp+200]
	movss	DWORD PTR _mR$[esp+232], xmm6
	movss	xmm6, DWORD PTR tv1011[esp+200]
	addss	xmm6, DWORD PTR tv976[esp+200]
	addss	xmm6, DWORD PTR tv705[esp+200]
	movss	DWORD PTR _mR$[esp+236], xmm6
	movss	xmm6, DWORD PTR tv1021[esp+200]
	addss	xmm6, DWORD PTR tv987[esp+200]
	addss	xmm6, DWORD PTR tv719[esp+200]
	movss	DWORD PTR _mR$[esp+240], xmm6
	movss	xmm6, DWORD PTR tv700[esp+200]
	mulss	xmm6, DWORD PTR _c$[esp+200]
	addss	xmm1, xmm6
	movss	xmm6, DWORD PTR _c$[esp+204]
	mulss	xmm7, xmm6
	addss	xmm1, xmm7
	addss	xmm1, DWORD PTR [ecx+128]
	movss	xmm7, DWORD PTR _c$[esp+208]
	movss	DWORD PTR _mR$[esp+248], xmm1
	movss	xmm1, DWORD PTR tv705[esp+200]
	mulss	xmm1, xmm7
	addss	xmm2, xmm1
	movss	xmm1, DWORD PTR tv709[esp+200]
	mulss	xmm1, xmm6
	addss	xmm2, xmm1
	addss	xmm2, DWORD PTR [ecx+132]
	movss	xmm1, DWORD PTR tv719[esp+200]
	mulss	xmm1, xmm7

; 453  : 	mS.scale			(r);
; 454  : 	mE.mul_43			(mR,mS); 

	movss	xmm7, DWORD PTR _mR$[esp+232]
	addss	xmm3, xmm1
	movss	xmm1, DWORD PTR tv723[esp+200]
	mulss	xmm1, xmm6
	movss	xmm6, DWORD PTR _r$[esp+200]
	addss	xmm3, xmm1
	addss	xmm3, DWORD PTR [ecx+136]
	movss	DWORD PTR _mR$[esp+252], xmm2
	movss	DWORD PTR _mR$[esp+256], xmm3
	movaps	xmm2, xmm4
	mulss	xmm2, xmm0
	movaps	xmm1, xmm7
	mulss	xmm1, xmm0
	movss	DWORD PTR tv1092[esp+200], xmm1
	movss	DWORD PTR tv1094[esp+200], xmm2
	addss	xmm2, xmm1
	movss	xmm1, DWORD PTR _mR$[esp+200]
	mulss	xmm1, xmm6
	addss	xmm1, xmm2
	movss	DWORD PTR _mE$[esp+200], xmm1
	movss	DWORD PTR tv1096[esp+200], xmm2
	movss	xmm2, DWORD PTR _mR$[esp+236]
	movaps	xmm3, xmm5
	mulss	xmm3, xmm0
	movss	DWORD PTR tv1105[esp+200], xmm3
	movaps	xmm1, xmm2
	mulss	xmm1, xmm0
	addss	xmm3, xmm1
	movss	DWORD PTR tv1103[esp+200], xmm1
	movss	xmm1, DWORD PTR _mR$[esp+204]
	movss	DWORD PTR tv1107[esp+200], xmm3
	mulss	xmm1, xmm6
	movss	xmm6, DWORD PTR _mR$[esp+224]
	addss	xmm1, xmm3
	movss	DWORD PTR _mE$[esp+204], xmm1
	movss	xmm1, DWORD PTR _mR$[esp+240]
	mulss	xmm1, xmm0
	movaps	xmm3, xmm6
	mulss	xmm3, xmm0
	movss	DWORD PTR tv1116[esp+200], xmm3
	addss	xmm3, xmm1
	movss	DWORD PTR tv1118[esp+200], xmm3
	movss	xmm3, DWORD PTR _mR$[esp+208]
	mulss	xmm3, DWORD PTR _r$[esp+200]
	addss	xmm3, DWORD PTR tv1118[esp+200]
	movss	DWORD PTR tv1114[esp+200], xmm1
	movss	xmm1, DWORD PTR _mR$[esp+200]
	mulss	xmm4, DWORD PTR _r$[esp+204]
	mulss	xmm1, xmm0
	addss	xmm4, xmm1
	addss	xmm4, DWORD PTR tv1092[esp+200]
	movss	DWORD PTR _mE$[esp+216], xmm4
	movss	xmm4, DWORD PTR _r$[esp+204]
	mulss	xmm5, xmm4

; 455  : 	mE.transform_tiny	(result,local_point);

	mov	eax, DWORD PTR _local_point$[ebp]
	mulss	xmm6, xmm4
	movss	DWORD PTR tv1130[esp+200], xmm1
	movss	xmm1, DWORD PTR _mR$[esp+204]
	mulss	xmm1, xmm0
	movss	xmm4, DWORD PTR tv1130[esp+200]
	addss	xmm5, xmm1
	addss	xmm5, DWORD PTR tv1103[esp+200]
	movss	DWORD PTR _mE$[esp+220], xmm5
	movss	xmm5, DWORD PTR _mR$[esp+208]
	mulss	xmm5, xmm0
	movss	xmm0, DWORD PTR _mR$[esp+240]
	addss	xmm6, xmm5
	addss	xmm6, DWORD PTR tv1114[esp+200]
	movss	DWORD PTR _mE$[esp+224], xmm6
	movss	xmm6, DWORD PTR _r$[esp+208]
	mulss	xmm0, xmm6
	addss	xmm0, xmm5
	addss	xmm0, DWORD PTR tv1116[esp+200]
	mulss	xmm2, xmm6
	mulss	xmm7, xmm6
	movaps	xmm6, xmm0
	movss	xmm0, DWORD PTR _mR$[esp+248]
	addss	xmm0, xmm4
	addss	xmm0, DWORD PTR tv1096[esp+200]
	movss	DWORD PTR _mE$[esp+248], xmm0
	movss	xmm0, DWORD PTR _mR$[esp+252]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR tv1107[esp+200]
	movss	DWORD PTR _mE$[esp+252], xmm0
	movss	xmm0, DWORD PTR _mR$[esp+256]
	addss	xmm0, xmm5
	addss	xmm0, DWORD PTR tv1118[esp+200]
	addss	xmm7, xmm4
	addss	xmm7, DWORD PTR tv1094[esp+200]
	addss	xmm2, xmm1
	addss	xmm2, DWORD PTR tv1105[esp+200]
	movss	xmm1, DWORD PTR [eax+4]
	movss	DWORD PTR _mE$[esp+256], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _mE$[esp+236], xmm2
	movss	xmm2, DWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movaps	xmm5, xmm0
	mulss	xmm5, xmm7
	movaps	xmm4, xmm2
	mulss	xmm4, DWORD PTR _mE$[esp+200]
	addss	xmm4, xmm5
	movaps	xmm5, xmm1
	mulss	xmm5, DWORD PTR _mE$[esp+216]
	addss	xmm4, xmm5
	addss	xmm4, DWORD PTR _mE$[esp+248]
	movss	DWORD PTR [eax], xmm4
	movaps	xmm4, xmm0
	mulss	xmm4, DWORD PTR _mE$[esp+236]
	movaps	xmm5, xmm1
	mulss	xmm5, DWORD PTR _mE$[esp+220]
	mulss	xmm1, DWORD PTR _mE$[esp+224]
	addss	xmm4, xmm5
	mulss	xmm0, xmm6
	movaps	xmm5, xmm2
	mulss	xmm5, DWORD PTR _mE$[esp+204]
	addss	xmm0, xmm1
	mulss	xmm2, xmm3
	addss	xmm4, xmm5
	addss	xmm4, DWORD PTR _mE$[esp+252]
	addss	xmm0, xmm2
	addss	xmm0, DWORD PTR _mE$[esp+256]
	movss	DWORD PTR [eax+4], xmm4
	movss	DWORD PTR [eax+8], xmm0

; 456  : 
; 457  : 	return				result;
; 458  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?get_last_local_point_on_mesh@CObject@@UBE?AU?$_vector3@M@@ABU2@G@Z ENDP ; CObject::get_last_local_point_on_mesh
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?OnH_A_Independent@CObject@@UAEXXZ
_TEXT	SEGMENT
?OnH_A_Independent@CObject@@UAEXXZ PROC			; CObject::OnH_A_Independent, COMDAT
; _this$ = ecx

; 402  : 	setVisible	(true);

	or	DWORD PTR [ecx+164], 33554432		; 02000000H
	cmp	DWORD PTR [ecx+144], 0
	je	SHORT $LN4@OnH_A_Inde
	or	DWORD PTR [ecx+20], 1
$LN4@OnH_A_Inde:

; 403  : }

	ret	0
?OnH_A_Independent@CObject@@UAEXXZ ENDP			; CObject::OnH_A_Independent
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?OnH_B_Chield@CObject@@UAEXXZ
_TEXT	SEGMENT
?OnH_B_Chield@CObject@@UAEXXZ PROC			; CObject::OnH_B_Chield, COMDAT
; _this$ = ecx

; 398  : 	setVisible	(false);

	and	DWORD PTR [ecx+164], -33554433		; fdffffffH
	and	DWORD PTR [ecx+20], -2			; fffffffeH

; 399  : }

	ret	0
?OnH_B_Chield@CObject@@UAEXXZ ENDP			; CObject::OnH_B_Chield
_TEXT	ENDS
PUBLIC	?spatial_update@CObject@@QAEXMM@Z		; CObject::spatial_update
; Function compile flags: /Ogtpy
;	COMDAT ?spatial_update@CObject@@QAEXMM@Z
_TEXT	SEGMENT
_C$138689 = -12						; size = 12
_eps_P$ = 8						; size = 4
_eps_R$ = 12						; size = 4
?spatial_update@CObject@@QAEXMM@Z PROC			; CObject::spatial_update, COMDAT
; _this$ = ecx

; 247  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	mov	esi, ecx

; 248  : 	//
; 249  : 	BOOL	bUpdate=FALSE;
; 250  : 	if (PositionStack.empty())

	mov	eax, DWORD PTR [esi+248]
	test	eax, eax
	push	edi
	jne	SHORT $LN12@spatial_up

; 251  : 	{
; 252  : 		// Empty
; 253  : 		bUpdate							= TRUE;
; 254  : 		PositionStack.push_back			(SavedPosition());

	mov	ecx, DWORD PTR [esi+248]
	lea	eax, DWORD PTR [esi+184]
	shl	ecx, 4
	add	ecx, eax
	xor	edx, edx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], edx
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], edx
	add	DWORD PTR [eax+64], 1

; 255  : 		PositionStack.back().dwTime		= Device.dwTimeGlobal;

	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR ?Device@@3VCRenderDevice@@A+40
	shl	ecx, 4
	mov	DWORD PTR [ecx+eax-16], edx

; 256  : 		PositionStack.back().vPosition	= Position();

	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [esi+128]
	shl	ecx, 4
	lea	eax, DWORD PTR [ecx+eax-12]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [esi+132]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [esi+136]
	mov	DWORD PTR [eax+8], edx

; 274  : 		}
; 275  : 	}
; 276  : 
; 277  : 	if (bUpdate)		{
; 278  : 		spatial_move	();

	mov	edx, DWORD PTR [esi+16]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [esi+16]
	call	eax

; 287  : 			}
; 288  : 			// else nothing to do :_)
; 289  : 		}
; 290  : 	}
; 291  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN12@spatial_up:

; 257  : 	} else {
; 258  : 		if (PositionStack.back().vPosition.similar(Position(),eps_P))

	mov	eax, DWORD PTR [esi+248]
	lea	edi, DWORD PTR [esi+184]
	shl	eax, 4
	movss	xmm0, DWORD PTR [eax+edi-12]
	subss	xmm0, DWORD PTR [esi+128]
	lea	ebx, DWORD PTR [eax+edi-12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	fld	DWORD PTR _eps_P$[ebp]
	add	esp, 4
	fcomip	ST(1)
	fstp	ST(0)
	jbe	$LN10@spatial_up
	movss	xmm0, DWORD PTR [ebx+4]
	subss	xmm0, DWORD PTR [esi+132]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	fld	DWORD PTR _eps_P$[ebp]
	add	esp, 4
	fcomip	ST(1)
	fstp	ST(0)
	jbe	$LN10@spatial_up
	movss	xmm0, DWORD PTR [ebx+8]
	subss	xmm0, DWORD PTR [esi+136]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	fld	DWORD PTR _eps_P$[ebp]
	add	esp, 4
	fcomip	ST(1)
	fstp	ST(0)
	jbe	$LN10@spatial_up

; 259  : 		{
; 260  : 			// Just update time
; 261  : 			PositionStack.back().dwTime		= Device.dwTimeGlobal;

	mov	ecx, DWORD PTR [edi+64]
	mov	edx, DWORD PTR ?Device@@3VCRenderDevice@@A+40
	shl	ecx, 4
	mov	DWORD PTR [ecx+edi-16], edx

; 279  : 	} else {
; 280  : 		if (spatial.node_ptr)	

	cmp	DWORD PTR [esi+56], 0
	je	$LN1@spatial_up

; 281  : 		{	// Object registered!
; 282  : 			if (!fsimilar(Radius(),spatial.sphere.R,eps_R))	spatial_move();

	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, esi
	call	eax
	fsub	DWORD PTR [esi+36]
	push	ecx
	fstp	DWORD PTR [esp]
	call	_fabsf
	fld	DWORD PTR _eps_R$[ebp]
	add	esp, 4
	fcomip	ST(1)
	fstp	ST(0)

; 283  : 			else			{

	jbe	$LN117@spatial_up

; 284  : 				Fvector			C;
; 285  : 				Center			(C);

	mov	edx, DWORD PTR [esi]
	mov	edx, DWORD PTR [edx+16]
	lea	eax, DWORD PTR _C$138689[esp+24]
	push	eax
	mov	ecx, esi
	call	edx

; 286  : 				if (!C.similar(spatial.sphere.P,eps_P))	spatial_move();

	movss	xmm0, DWORD PTR _C$138689[esp+24]
	subss	xmm0, DWORD PTR [esi+24]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	fld	DWORD PTR _eps_P$[ebp]
	add	esp, 4
	fcomip	ST(1)
	fstp	ST(0)
	jbe	SHORT $LN103@spatial_up
	movss	xmm0, DWORD PTR _C$138689[esp+28]
	subss	xmm0, DWORD PTR [esi+28]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	fld	DWORD PTR _eps_P$[ebp]
	add	esp, 4
	fcomip	ST(1)
	fstp	ST(0)
	jbe	SHORT $LN103@spatial_up
	movss	xmm0, DWORD PTR _C$138689[esp+32]
	subss	xmm0, DWORD PTR [esi+32]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	fld	DWORD PTR _eps_P$[ebp]
	add	esp, 4
	fcomip	ST(1)
	fstp	ST(0)
	ja	SHORT $LN1@spatial_up
$LN103@spatial_up:
	mov	eax, DWORD PTR [esi+16]
	mov	edx, DWORD PTR [eax+8]
	lea	ecx, DWORD PTR [esi+16]
	call	edx
$LN1@spatial_up:

; 287  : 			}
; 288  : 			// else nothing to do :_)
; 289  : 		}
; 290  : 	}
; 291  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN10@spatial_up:

; 262  : 		} else {
; 263  : 			// Register _new_ record
; 264  : 			bUpdate							= TRUE;
; 265  : 			if (PositionStack.size()<4)		{

	cmp	DWORD PTR [esi+248], 4
	jae	SHORT $LN59@spatial_up

; 266  : 				PositionStack.push_back			(SavedPosition());

	mov	eax, DWORD PTR [edi+64]
	xor	ecx, ecx
	shl	eax, 4
	add	eax, edi
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	add	DWORD PTR [edi+64], 1

; 267  : 			} else {

	jmp	$LN7@spatial_up

; 268  : 				PositionStack[0]				= PositionStack[1];

$LN59@spatial_up:
	mov	eax, DWORD PTR [esi+200]
	mov	ecx, DWORD PTR [esi+204]
	mov	edx, DWORD PTR [esi+208]
	mov	DWORD PTR [edi], eax
	mov	eax, DWORD PTR [esi+212]
	mov	DWORD PTR [edi+4], ecx

; 269  : 				PositionStack[1]				= PositionStack[2];

	mov	ecx, DWORD PTR [esi+216]
	mov	DWORD PTR [edi+8], edx
	mov	edx, DWORD PTR [esi+220]
	mov	DWORD PTR [esi+200], ecx
	mov	ecx, DWORD PTR [esi+228]
	mov	DWORD PTR [edi+12], eax
	mov	eax, DWORD PTR [esi+224]
	mov	DWORD PTR [esi+204], edx

; 270  : 				PositionStack[2]				= PositionStack[3];

	mov	edx, DWORD PTR [esi+232]
	mov	DWORD PTR [esi+208], eax
	mov	eax, DWORD PTR [esi+236]
	mov	DWORD PTR [esi+216], edx
	mov	edx, DWORD PTR [esi+244]
	mov	DWORD PTR [esi+212], ecx
	mov	ecx, DWORD PTR [esi+240]
	mov	DWORD PTR [esi+220], eax
	mov	DWORD PTR [esi+224], ecx
	mov	DWORD PTR [esi+228], edx
$LN7@spatial_up:

; 271  : 			}
; 272  : 			PositionStack.back().dwTime		= Device.dwTimeGlobal;

	mov	eax, DWORD PTR [edi+64]
	mov	ecx, DWORD PTR ?Device@@3VCRenderDevice@@A+40
	shl	eax, 4
	mov	DWORD PTR [eax+edi-16], ecx

; 273  : 			PositionStack.back().vPosition	= Position();

	mov	edx, DWORD PTR [edi+64]
	mov	ecx, DWORD PTR [esi+128]
	shl	edx, 4
	lea	eax, DWORD PTR [edx+edi-12]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [esi+132]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [esi+136]
	mov	DWORD PTR [eax+8], ecx
$LN117@spatial_up:

; 274  : 		}
; 275  : 	}
; 276  : 
; 277  : 	if (bUpdate)		{
; 278  : 		spatial_move	();

	mov	edx, DWORD PTR [esi+16]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [esi+16]
	call	eax

; 287  : 			}
; 288  : 			// else nothing to do :_)
; 289  : 		}
; 290  : 	}
; 291  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?spatial_update@CObject@@QAEXMM@Z ENDP			; CObject::spatial_update
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrstring.h
;	COMDAT ??4shared_str@@QAEAAV0@PBD@Z
_TEXT	SEGMENT
??4shared_str@@QAEAAV0@PBD@Z PROC			; shared_str::operator=, COMDAT
; _this$ = esi
; _rhs$ = eax

; 78   : 	shared_str&			operator=	(str_c rhs)						{	_set(rhs);	return (shared_str&)*this;			}

	mov	ecx, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
	mov	ecx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	test	eax, eax
	je	SHORT $LN3@operator@54
	add	DWORD PTR [eax], 1
$LN3@operator@54:
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN11@operator@54
	add	DWORD PTR [ecx], -1
	mov	edx, DWORD PTR [esi]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN11@operator@54
	mov	DWORD PTR [esi], 0
$LN11@operator@54:
	mov	DWORD PTR [esi], eax
	mov	eax, esi
	ret	0
??4shared_str@@QAEAAV0@PBD@Z ENDP			; shared_str::operator=
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrmemory_subst_msvc.h
_TEXT	ENDS
;	COMDAT ??$xr_new@VCCF_Skeleton@@PAVCObject@@@@YAPAVCCF_Skeleton@@ABQAVCObject@@@Z
_TEXT	SEGMENT
_p1$ = 8						; size = 4
??$xr_new@VCCF_Skeleton@@PAVCObject@@@@YAPAVCCF_Skeleton@@ABQAVCObject@@@Z PROC ; xr_new<CCF_Skeleton,CObject *>, COMDAT

; 74   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	88					; 00000058H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 75   : 	return new (ptr) T(p1);

	test	eax, eax
	je	SHORT $LN3@xr_new@11
	mov	ecx, DWORD PTR _p1$[esp-4]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, eax
	call	??0CCF_Skeleton@@QAE@PAVCObject@@@Z	; CCF_Skeleton::CCF_Skeleton

; 76   : }

	ret	0
$LN3@xr_new@11:

; 75   : 	return new (ptr) T(p1);

	xor	eax, eax

; 76   : }

	ret	0
??$xr_new@VCCF_Skeleton@@PAVCObject@@@@YAPAVCCF_Skeleton@@ABQAVCObject@@@Z ENDP ; xr_new<CCF_Skeleton,CObject *>
_TEXT	ENDS
PUBLIC	__real@3f333333
;	COMDAT __real@3f333333
; File d:\clearsky\sources\engine\xrcore\_vector3d.h
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\xr_object.cpp
CONST	ENDS
;	COMDAT ?get_new_local_point_on_mesh@CObject@@UBE?AU?$_vector3@M@@AAG@Z
_TEXT	SEGMENT
$T318235 = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_bone_id$ = 12						; size = 4
?get_new_local_point_on_mesh@CObject@@UBE?AU?$_vector3@M@@AAG@Z PROC ; CObject::get_new_local_point_on_mesh, COMDAT
; _this$ = ecx

; 431  : {

	sub	esp, 12					; 0000000cH

; 432  : 	bone_id				= u16(-1);

	mov	eax, DWORD PTR _bone_id$[esp+8]
	push	esi
	mov	WORD PTR [eax], 65535			; 0000ffffH

; 433  : 	return				Fvector().random_dir().mul(.7f);

	xor	eax, eax
	push	edi
	mov	edi, DWORD PTR __imp_?Random@@3VCRandom@@A
	lea	esi, DWORD PTR $T318235[esp+20]
	mov	DWORD PTR $T318235[esp+20], eax
	mov	DWORD PTR $T318235[esp+24], eax
	mov	DWORD PTR $T318235[esp+28], eax
	call	?random_dir@?$_vector3@M@@QAEAAU1@AAVCRandom@@@Z ; _vector3<float>::random_dir
	movss	xmm1, DWORD PTR [eax]
	movss	xmm0, DWORD PTR __real@3f333333
	mov	ecx, DWORD PTR ___$ReturnUdt$[esp+16]
	mulss	xmm1, xmm0
	movss	DWORD PTR [eax], xmm1
	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm1, xmm0
	movss	DWORD PTR [eax+4], xmm1
	movss	xmm1, DWORD PTR [eax+8]
	mulss	xmm1, xmm0
	movss	DWORD PTR [eax+8], xmm1
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+4], edx
	pop	edi
	mov	DWORD PTR [ecx+8], eax
	mov	eax, ecx
	pop	esi

; 434  : }

	add	esp, 12					; 0000000cH
	ret	8
?get_new_local_point_on_mesh@CObject@@UBE?AU?$_vector3@M@@AAG@Z ENDP ; CObject::get_new_local_point_on_mesh
PUBLIC	?cNameVisual_set@CObject@@QAEXVshared_str@@@Z	; CObject::cNameVisual_set
; Function compile flags: /Ogtpy
;	COMDAT ?cNameVisual_set@CObject@@QAEXVshared_str@@@Z
_TEXT	SEGMENT
_old_v$138528 = -4					; size = 4
_N$ = 8							; size = 4
?cNameVisual_set@CObject@@QAEXVshared_str@@@Z PROC	; CObject::cNameVisual_set, COMDAT
; _this$ = ecx

; 69   : { 

	push	ecx
	push	ebx

; 70   : 	// check if equal
; 71   : 	if (*N && *NameVisual)

	mov	ebx, DWORD PTR _N$[esp+4]
	push	esi
	push	edi
	xor	edi, edi
	cmp	ebx, edi
	mov	esi, ecx
	je	$LN3@cNameVisua
	lea	edx, DWORD PTR [ebx+16]
	cmp	edx, edi
	je	$LN3@cNameVisua
	mov	eax, DWORD PTR [esi+176]
	cmp	eax, edi
	je	SHORT $LN33@cNameVisua
	add	eax, 16					; 00000010H
	cmp	eax, edi
	je	SHORT $LN33@cNameVisua

; 72   : 		if (N==NameVisual)		return;

	cmp	ebx, DWORD PTR [esi+176]
	je	$LN66@cNameVisua

; 73   : 
; 74   : 	// replace model
; 75   : 	if (*N && N[0]) 

$LN33@cNameVisua:
	cmp	edx, edi
	je	$LN3@cNameVisua
	cmp	BYTE PTR [edx], 0
	je	$LN3@cNameVisua

; 76   : 	{
; 77   : 		IRenderVisual			*old_v = renderable.visual;

	mov	eax, DWORD PTR [esi+144]

; 78   : 		
; 79   : 		NameVisual				= N;

	add	DWORD PTR [ebx], 1
	mov	DWORD PTR _old_v$138528[esp+16], eax
	mov	eax, DWORD PTR [esi+176]
	cmp	eax, edi
	je	SHORT $LN64@cNameVisua
	add	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR [esi+176]
	cmp	DWORD PTR [ecx], edi
	jne	SHORT $LN64@cNameVisua
	mov	DWORD PTR [esi+176], edi
$LN64@cNameVisua:

; 80   : 		renderable.visual		= Render->model_Create	(*N);

	mov	eax, DWORD PTR __imp_?Render@@3PAVIRender_interface@@A
	mov	DWORD PTR [esi+176], ebx
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	push	edi
	push	edx
	mov	edx, DWORD PTR [eax+144]
	call	edx
	mov	DWORD PTR [esi+144], eax

; 81   : 		
; 82   : 		IKinematics* old_k	= old_v?old_v->dcast_PKinematics():NULL;

	mov	eax, DWORD PTR _old_v$138528[esp+16]
	cmp	eax, edi
	je	SHORT $LN8@cNameVisua
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	push	eax
	call	edx
	mov	edi, eax
$LN8@cNameVisua:

; 83   : 		IKinematics* new_k	= renderable.visual->dcast_PKinematics();

	mov	eax, DWORD PTR [esi+144]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	push	ebp
	push	eax
	call	edx

; 84   : 
; 85   : 		/*
; 86   : 		if(old_k && new_k){
; 87   : 			new_k->Update_Callback			= old_k->Update_Callback;
; 88   : 			new_k->Update_Callback_Param	= old_k->Update_Callback_Param;
; 89   : 		}
; 90   : 		*/
; 91   : 		if(old_k && new_k)

	test	edi, edi
	mov	ebp, eax
	je	SHORT $LN2@cNameVisua
	test	ebp, ebp
	je	SHORT $LN2@cNameVisua

; 92   : 		{
; 93   : 			new_k->SetUpdateCallback(old_k->GetUpdateCallback());

	mov	eax, DWORD PTR [edi]
	mov	edx, DWORD PTR [eax+128]
	mov	ebx, DWORD PTR [ebp]
	mov	ecx, edi
	call	edx
	push	eax
	mov	eax, DWORD PTR [ebx+120]
	mov	ecx, ebp
	call	eax

; 94   : 			new_k->SetUpdateCallbackParam(old_k->GetUpdateCallbackParam());

	mov	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx+132]
	mov	ebx, DWORD PTR [ebp]
	mov	ecx, edi
	call	eax
	mov	edx, DWORD PTR [ebx+124]
	push	eax
	mov	ecx, ebp
	call	edx
	mov	ebx, DWORD PTR _N$[esp+16]
$LN2@cNameVisua:

; 95   : 		}
; 96   : 
; 97   : 		::Render->model_Delete	(old_v);

	mov	eax, DWORD PTR __imp_?Render@@3PAVIRender_interface@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+156]
	push	0
	lea	eax, DWORD PTR _old_v$138528[esp+24]
	push	eax
	call	edx
	pop	ebp

; 98   : 	} 
; 99   : 	else 

	jmp	SHORT $LN52@cNameVisua
$LN3@cNameVisua:

; 100  : 	{
; 101  : 		::Render->model_Delete	(renderable.visual);

	mov	eax, DWORD PTR __imp_?Render@@3PAVIRender_interface@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+156]
	push	edi
	lea	eax, DWORD PTR [esi+144]
	push	eax
	call	edx

; 102  : 		NameVisual				= 0;

	mov	eax, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
	mov	ecx, DWORD PTR [eax]
	push	edi
	call	DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	cmp	eax, edi
	je	SHORT $LN51@cNameVisua
	add	DWORD PTR [eax], 1
$LN51@cNameVisua:
	mov	ecx, DWORD PTR [esi+176]
	cmp	ecx, edi
	je	SHORT $LN54@cNameVisua
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [esi+176]
	cmp	DWORD PTR [ecx], edi
	jne	SHORT $LN54@cNameVisua
	mov	DWORD PTR [esi+176], edi
$LN54@cNameVisua:
	mov	DWORD PTR [esi+176], eax
$LN52@cNameVisua:

; 103  : 	}
; 104  : 	OnChangeVisual				();

	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, esi
	call	eax

; 105  : }

	test	ebx, ebx
	je	SHORT $LN60@cNameVisua
$LN66@cNameVisua:
	add	DWORD PTR [ebx], -1
$LN60@cNameVisua:
	pop	edi
	pop	esi
	pop	ebx
	pop	ecx
	ret	4
?cNameVisual_set@CObject@@QAEXVshared_str@@@Z ENDP	; CObject::cNameVisual_set
_TEXT	ENDS
PUBLIC	?cNameSect_set@CObject@@QAEXVshared_str@@@Z	; CObject::cNameSect_set
; Function compile flags: /Ogtpy
;	COMDAT ?cNameSect_set@CObject@@QAEXVshared_str@@@Z
_TEXT	SEGMENT
_N$ = 8							; size = 4
?cNameSect_set@CObject@@QAEXVshared_str@@@Z PROC	; CObject::cNameSect_set, COMDAT
; _this$ = ecx

; 65   : 	NameSection	=	N; 

	mov	edx, DWORD PTR _N$[esp-4]
	test	edx, edx
	je	SHORT $LN5@cNameSect_@2
	add	DWORD PTR [edx], 1
$LN5@cNameSect_@2:
	mov	eax, DWORD PTR [ecx+172]
	test	eax, eax
	je	SHORT $LN8@cNameSect_@2
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [ecx+172]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN8@cNameSect_@2
	mov	DWORD PTR [ecx+172], 0
$LN8@cNameSect_@2:

; 66   : }

	test	edx, edx
	mov	DWORD PTR [ecx+172], edx
	je	SHORT $LN14@cNameSect_@2
	add	DWORD PTR [edx], -1
$LN14@cNameSect_@2:
	ret	4
?cNameSect_set@CObject@@QAEXVshared_str@@@Z ENDP	; CObject::cNameSect_set
_TEXT	ENDS
PUBLIC	?cName_set@CObject@@QAEXVshared_str@@@Z		; CObject::cName_set
; Function compile flags: /Ogtpy
;	COMDAT ?cName_set@CObject@@QAEXVshared_str@@@Z
_TEXT	SEGMENT
_N$ = 8							; size = 4
?cName_set@CObject@@QAEXVshared_str@@@Z PROC		; CObject::cName_set, COMDAT
; _this$ = ecx

; 61   : 	NameObject	=	N; 

	mov	edx, DWORD PTR _N$[esp-4]
	test	edx, edx
	je	SHORT $LN5@cName_set
	add	DWORD PTR [edx], 1
$LN5@cName_set:
	mov	eax, DWORD PTR [ecx+168]
	test	eax, eax
	je	SHORT $LN8@cName_set
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [ecx+168]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN8@cName_set
	mov	DWORD PTR [ecx+168], 0
$LN8@cName_set:

; 62   : }

	test	edx, edx
	mov	DWORD PTR [ecx+168], edx
	je	SHORT $LN14@cName_set
	add	DWORD PTR [edx], -1
$LN14@cName_set:
	ret	4
?cName_set@CObject@@QAEXVshared_str@@@Z ENDP		; CObject::cName_set
; Function compile flags: /Ogtpy
;	COMDAT ?Load@CObject@@UAEXPBD@Z
_TEXT	SEGMENT
_tmp$138606 = -520					; size = 520
_section$ = 8						; size = 4
?Load@CObject@@UAEXPBD@Z PROC				; CObject::Load, COMDAT
; _this$ = ecx

; 180  : {

	sub	esp, 520				; 00000208H

; 181  : 	// Name
; 182  : 	R_ASSERT					(section);

	cmp	BYTE PTR ?ignore_always@?3??Load@CObject@@UAEXPBD@Z@4_NA, 0
	push	ebp
	push	esi
	mov	esi, DWORD PTR _section$[esp+524]
	push	edi
	mov	edi, ecx
	jne	SHORT $LN5@Load@8
	test	esi, esi
	jne	SHORT $LN5@Load@8
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?3??Load@CObject@@UAEXPBD@Z@4_NA
	push	OFFSET ??_C@_0O@JKHJECOG@CObject?3?3Load?$AA@
	push	182					; 000000b6H
	push	OFFSET ??_C@_0DC@KLBOKOMF@D?3?2CLEARSKY?2sources?2engine?2xrEng@
	push	OFFSET ??_C@_07BNGFJMOB@section?$AA@
	call	DWORD PTR __imp_?fail@xrDebug@@QAEXPBD0H0AA_N@Z
$LN5@Load@8:

; 183  : 	cName_set					(section);

	mov	eax, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
	mov	ecx, DWORD PTR [eax]
	mov	ebp, DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	push	esi
	call	ebp
	test	eax, eax
	je	SHORT $LN22@Load@8
	add	DWORD PTR [eax], 1
	test	eax, eax
	je	SHORT $LN22@Load@8
	add	DWORD PTR [eax], 1
$LN22@Load@8:
	mov	ecx, DWORD PTR [edi+168]
	test	ecx, ecx
	je	SHORT $LN86@Load@8
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [edi+168]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN86@Load@8
	mov	DWORD PTR [edi+168], 0
$LN86@Load@8:
	test	eax, eax
	mov	DWORD PTR [edi+168], eax
	je	SHORT $LN31@Load@8
	add	DWORD PTR [eax], -1
$LN31@Load@8:

; 184  : 	cNameSect_set				(section);

	mov	edx, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
	mov	ecx, DWORD PTR [edx]
	push	esi
	call	ebp
	test	eax, eax
	je	SHORT $LN48@Load@8
	add	DWORD PTR [eax], 1
	test	eax, eax
	je	SHORT $LN48@Load@8
	add	DWORD PTR [eax], 1
$LN48@Load@8:
	mov	ecx, DWORD PTR [edi+172]
	test	ecx, ecx
	je	SHORT $LN88@Load@8
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [edi+172]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN88@Load@8
	mov	DWORD PTR [edi+172], 0
$LN88@Load@8:
	test	eax, eax
	mov	DWORD PTR [edi+172], eax
	je	SHORT $LN57@Load@8
	add	DWORD PTR [eax], -1
$LN57@Load@8:

; 185  : 	
; 186  : 	// Visual and light-track
; 187  : 	if (pSettings->line_exist(section,"visual")){

	mov	edx, DWORD PTR __imp_?pSettings@@3PBVCInifile@@B
	mov	ecx, DWORD PTR [edx]
	push	OFFSET ??_C@_06KABONEAP@visual?$AA@
	push	esi
	call	DWORD PTR __imp_?line_exist@CInifile@@QBEHPBD0@Z
	test	eax, eax
	je	$LN2@Load@8

; 188  : 		string_path					tmp;
; 189  : 		xr_strcpy					(tmp, pSettings->r_string(section,"visual"));

	mov	eax, DWORD PTR __imp_?pSettings@@3PBVCInifile@@B
	mov	ecx, DWORD PTR [eax]
	push	OFFSET ??_C@_06KABONEAP@visual?$AA@
	push	esi
	call	DWORD PTR __imp_?r_string@CInifile@@QBEPBDPBD0@Z
	push	520					; 00000208H
	push	eax
	lea	ecx, DWORD PTR _tmp$138606[esp+540]
	push	520					; 00000208H
	push	ecx
	call	DWORD PTR __imp__strncpy_s

; 190  : 		if(strext(tmp)) 

	mov	esi, DWORD PTR __imp__strrchr
	lea	edx, DWORD PTR _tmp$138606[esp+548]
	push	46					; 0000002eH
	push	edx
	call	esi
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN1@Load@8

; 191  : 			*strext(tmp)			=0;

	lea	eax, DWORD PTR _tmp$138606[esp+532]
	push	46					; 0000002eH
	push	eax
	call	esi
	add	esp, 8
	mov	BYTE PTR [eax], 0
$LN1@Load@8:

; 192  : 		xr_strlwr					(tmp);

	lea	ecx, DWORD PTR _tmp$138606[esp+532]
	push	ecx
	call	DWORD PTR __imp__strlwr

; 193  : 
; 194  : 		cNameVisual_set				(tmp);

	mov	eax, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
	mov	esi, esp
	lea	edx, DWORD PTR _tmp$138606[esp+536]
	mov	DWORD PTR [esi], 0
	mov	ecx, DWORD PTR [eax]
	push	edx
	call	ebp
	test	eax, eax
	je	SHORT $LN73@Load@8
	add	DWORD PTR [eax], 1
$LN73@Load@8:
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN76@Load@8
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [esi]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN76@Load@8
	mov	DWORD PTR [esi], 0
$LN76@Load@8:
	mov	ecx, edi
	mov	DWORD PTR [esi], eax
	call	?cNameVisual_set@CObject@@QAEXVshared_str@@@Z ; CObject::cNameVisual_set
$LN2@Load@8:

; 195  : 	}
; 196  : 	setVisible					(false);

	and	DWORD PTR [edi+164], -33554433		; fdffffffH
	and	DWORD PTR [edi+20], -2			; fffffffeH

; 197  : }

	pop	edi
	pop	esi
	pop	ebp
	add	esp, 520				; 00000208H
	ret	4
?Load@CObject@@UAEXPBD@Z ENDP				; CObject::Load
PUBLIC	?o_crow@CObjectList@@QAEXPAVCObject@@@Z		; CObjectList::o_crow
; Function compile flags: /Ogtpy
;	COMDAT ?o_crow@CObjectList@@QAEXPAVCObject@@@Z
_TEXT	SEGMENT
_O$ = 8							; size = 4
?o_crow@CObjectList@@QAEXPAVCObject@@@Z PROC		; CObjectList::o_crow, COMDAT
; _this$ = ecx

; 26   : {

	push	esi
	push	edi
	mov	esi, ecx

; 27   : 	Objects& crows				= get_crows();

	call	DWORD PTR __imp__GetCurrentThreadId@0
	cmp	eax, DWORD PTR [esi+262200]
	lea	edi, DWORD PTR [esi+262176]
	je	SHORT $LN3@o_crow
	lea	edi, DWORD PTR [esi+262188]
$LN3@o_crow:

; 28   : 	VERIFY						( std::find(crows.begin(),crows.end(),O) == crows.end() );
; 29   : 	crows.push_back				( O );

	mov	eax, DWORD PTR [edi+4]
	cmp	eax, DWORD PTR [edi+8]
	je	SHORT $LN16@o_crow
	lea	ecx, DWORD PTR _O$[esp+4]
	push	ecx
	push	eax
	call	??$_Copy_Construct@PAX@stlp_std@@YAXPAPAXABQAX@Z ; stlp_std::_Copy_Construct<void *>

; 30   : 
; 31   : 	O->dwFrame_AsCrow			= Device.dwFrame;

	mov	edx, DWORD PTR _O$[esp+12]
	add	esp, 8
	add	DWORD PTR [edi+4], 4
	mov	eax, DWORD PTR ?Device@@3VCRenderDevice@@A+24
	pop	edi
	mov	DWORD PTR [edx+256], eax
	pop	esi

; 32   : }

	ret	4

; 28   : 	VERIFY						( std::find(crows.begin(),crows.end(),O) == crows.end() );
; 29   : 	crows.push_back				( O );

$LN16@o_crow:
	push	1
	push	1
	push	eax
	lea	eax, DWORD PTR _O$[esp+16]
	call	?_M_insert_overflow@?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@AAEXPAPAXABQAXABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::_M_insert_overflow

; 30   : 
; 31   : 	O->dwFrame_AsCrow			= Device.dwFrame;

	mov	ecx, DWORD PTR _O$[esp+4]
	mov	edx, DWORD PTR ?Device@@3VCRenderDevice@@A+24
	pop	edi
	mov	DWORD PTR [ecx+256], edx
	pop	esi

; 32   : }

	ret	4
?o_crow@CObjectList@@QAEXPAVCObject@@@Z ENDP		; CObjectList::o_crow
; Function compile flags: /Ogtpy
;	COMDAT ?net_Destroy@CObject@@UAEXXZ
_TEXT	SEGMENT
?net_Destroy@CObject@@UAEXXZ PROC			; CObject::net_Destroy, COMDAT
; _this$ = ecx

; 231  : {

	push	esi
	mov	esi, ecx

; 232  : 	VERIFY						(getDestroy());
; 233  : 	xr_delete					(collidable.model);

	mov	eax, DWORD PTR [esi+160]
	test	eax, eax
	push	edi
	je	SHORT $LN7@net_Destro
	push	eax
	call	___RTCastToVoid
	mov	ecx, DWORD PTR [esi+160]
	mov	edi, eax
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	add	esp, 4
	push	0
	call	edx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi+160], 0
$LN7@net_Destro:

; 234  : 	if (register_schedule())

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax+120]
	mov	ecx, esi
	call	edx
	test	al, al
	je	SHORT $LN12@net_Destro

; 235  : 		shedule_unregister		();

	lea	eax, DWORD PTR [esi+68]
	push	eax
	mov	ecx, OFFSET ?Engine@@3VCEngine@@A+64
	call	?Unregister@CSheduler@@QAEXPAVISheduled@@@Z ; CSheduler::Unregister
$LN12@net_Destro:

; 236  : 
; 237  : 	spatial_unregister			();

	mov	edx, DWORD PTR [esi+16]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [esi+16]
	call	eax

; 238  : //	setDestroy					(true);
; 239  : 	// remove visual
; 240  : 	cNameVisual_set				( 0 );

	push	ecx
	mov	ecx, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
	mov	edi, esp
	mov	DWORD PTR [edi], 0
	mov	ecx, DWORD PTR [ecx]
	push	0
	call	DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	test	eax, eax
	je	SHORT $LN16@net_Destro
	add	DWORD PTR [eax], 1
$LN16@net_Destro:
	mov	ecx, DWORD PTR [edi]
	test	ecx, ecx
	je	SHORT $LN19@net_Destro
	add	DWORD PTR [ecx], -1
	mov	edx, DWORD PTR [edi]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN19@net_Destro
	mov	DWORD PTR [edi], 0
$LN19@net_Destro:
	mov	ecx, esi
	mov	DWORD PTR [edi], eax
	call	?cNameVisual_set@CObject@@QAEXVshared_str@@@Z ; CObject::cNameVisual_set

; 241  : }

	pop	edi
	pop	esi
	ret	0
?net_Destroy@CObject@@UAEXXZ ENDP			; CObject::net_Destroy
_TEXT	ENDS
PUBLIC	??1CObject@@UAE@XZ				; CObject::~CObject
; Function compile flags: /Ogtpy
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT
??1CObject@@UAE@XZ PROC					; CObject::~CObject, COMDAT
; _this$ = ecx

; 174  : 	cNameVisual_set				( 0 );

	mov	eax, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
	push	ebx
	mov	ebx, DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	push	ebp
	push	esi
	push	edi
	mov	esi, ecx
	push	ecx
	mov	edi, esp
	mov	DWORD PTR [esi], OFFSET ??_7CObject@@6BDLL_Pure@@@
	mov	DWORD PTR [esi+16], OFFSET ??_7CObject@@6BISpatial@@@
	mov	DWORD PTR [esi+68], OFFSET ??_7CObject@@6BISheduled@@@
	mov	DWORD PTR [esi+76], OFFSET ??_7CObject@@6BIRenderable@@@
	mov	DWORD PTR [esi+156], OFFSET ??_7CObject@@6BICollidable@@@
	xor	ebp, ebp
	mov	DWORD PTR [edi], ebp
	mov	ecx, DWORD PTR [eax]
	push	ebp
	call	ebx
	cmp	eax, ebp
	je	SHORT $LN13@CObject@2
	add	DWORD PTR [eax], 1
$LN13@CObject@2:
	mov	ecx, DWORD PTR [edi]
	cmp	ecx, ebp
	je	SHORT $LN16@CObject@2
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [edi]
	cmp	DWORD PTR [ecx], ebp
	jne	SHORT $LN16@CObject@2
	mov	DWORD PTR [edi], ebp
$LN16@CObject@2:
	mov	ecx, esi
	mov	DWORD PTR [edi], eax
	call	?cNameVisual_set@CObject@@QAEXVshared_str@@@Z ; CObject::cNameVisual_set

; 175  : 	cName_set					( 0 );

	mov	edx, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
	mov	ecx, DWORD PTR [edx]
	push	ebp
	call	ebx
	cmp	eax, ebp
	je	SHORT $LN112@CObject@2
	add	DWORD PTR [eax], 1
	cmp	eax, ebp
	je	SHORT $LN112@CObject@2
	add	DWORD PTR [eax], 1
$LN112@CObject@2:
	mov	ecx, DWORD PTR [esi+168]
	cmp	ecx, ebp
	je	SHORT $LN111@CObject@2
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [esi+168]
	cmp	DWORD PTR [ecx], ebp
	jne	SHORT $LN111@CObject@2
	mov	DWORD PTR [esi+168], ebp
$LN111@CObject@2:
	cmp	eax, ebp
	mov	DWORD PTR [esi+168], eax
	je	SHORT $LN113@CObject@2
	add	DWORD PTR [eax], -1
$LN113@CObject@2:

; 176  : 	cNameSect_set				( 0 );

	mov	edx, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
	mov	ecx, DWORD PTR [edx]
	push	ebp
	call	ebx
	cmp	eax, ebp
	je	SHORT $LN59@CObject@2
	add	DWORD PTR [eax], 1
	cmp	eax, ebp
	je	SHORT $LN59@CObject@2
	add	DWORD PTR [eax], 1
$LN59@CObject@2:
	mov	ecx, DWORD PTR [esi+172]
	cmp	ecx, ebp
	je	SHORT $LN115@CObject@2
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [esi+172]
	cmp	DWORD PTR [ecx], ebp
	jne	SHORT $LN115@CObject@2
	mov	DWORD PTR [esi+172], ebp
$LN115@CObject@2:
	cmp	eax, ebp
	mov	DWORD PTR [esi+172], eax
	je	SHORT $LN116@CObject@2
	add	DWORD PTR [eax], -1
$LN116@CObject@2:

; 177  : }

	mov	eax, DWORD PTR [esi+176]
	cmp	eax, ebp
	je	SHORT $LN117@CObject@2
	add	DWORD PTR [eax], -1
	mov	edx, DWORD PTR [esi+176]
	cmp	DWORD PTR [edx], ebp
	jne	SHORT $LN117@CObject@2
	mov	DWORD PTR [esi+176], ebp
$LN117@CObject@2:
	mov	eax, DWORD PTR [esi+172]
	cmp	eax, ebp
	je	SHORT $LN118@CObject@2
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [esi+172]
	cmp	DWORD PTR [eax], ebp
	jne	SHORT $LN118@CObject@2
	mov	DWORD PTR [esi+172], ebp
$LN118@CObject@2:
	mov	eax, DWORD PTR [esi+168]
	cmp	eax, ebp
	je	SHORT $LN86@CObject@2
	add	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR [esi+168]
	cmp	DWORD PTR [ecx], ebp
	jne	SHORT $LN86@CObject@2
	mov	DWORD PTR [esi+168], ebp
$LN86@CObject@2:
	mov	DWORD PTR [esi+156], OFFSET ??_7ICollidable@@6B@
	mov	eax, DWORD PTR [esi+160]
	cmp	eax, ebp
	je	SHORT $LN92@CObject@2
	push	eax
	call	___RTCastToVoid
	mov	ecx, DWORD PTR [esi+160]
	mov	edx, DWORD PTR [ecx]
	add	esp, 4
	mov	edi, eax
	mov	eax, DWORD PTR [edx]
	push	ebp
	call	eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi+160], ebp
$LN92@CObject@2:
	mov	ecx, DWORD PTR __imp_?Render@@3PAVIRender_interface@@A
	mov	DWORD PTR [esi+76], OFFSET ??_7IRenderable@@6B@
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+156]
	push	ebp
	lea	ebx, DWORD PTR [esi+144]
	push	ebx
	call	eax
	cmp	DWORD PTR [esi+148], ebp
	lea	edi, DWORD PTR [esi+148]
	je	SHORT $LN97@CObject@2
	mov	ecx, DWORD PTR __imp_?Render@@3PAVIRender_interface@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+120]
	push	edi
	call	eax
$LN97@CObject@2:
	lea	eax, DWORD PTR [esi+68]
	mov	DWORD PTR [ebx], ebp
	mov	DWORD PTR [edi], ebp
	push	eax
	mov	ecx, OFFSET ?Engine@@3VCEngine@@A+64
	mov	DWORD PTR [eax], OFFSET ??_7ISheduled@@6B@
	call	?Unregister@CSheduler@@QAEXPAVISheduled@@@Z ; CSheduler::Unregister
	lea	ecx, DWORD PTR [esi+16]
	call	DWORD PTR __imp_??1ISpatial@@UAE@XZ
	pop	edi
	mov	DWORD PTR [esi], OFFSET ??_7DLL_Pure@@6B@
	pop	esi
	pop	ebp
	pop	ebx
	ret	0
??1CObject@@UAE@XZ ENDP					; CObject::~CObject
_TEXT	ENDS
PUBLIC	??0CObject@@QAE@XZ				; CObject::CObject
; Function compile flags: /Ogtpy
;	COMDAT ??0CObject@@QAE@XZ
_TEXT	SEGMENT
??0CObject@@QAE@XZ PROC					; CObject::CObject, COMDAT
; _this$ = ecx

; 156  : {

	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx
	push	edi
	xor	edi, edi
	mov	DWORD PTR [esi], OFFSET ??_7DLL_Pure@@6B@
	mov	DWORD PTR [esi+8], edi
	mov	DWORD PTR [esi+12], edi
	mov	eax, DWORD PTR __imp_?g_SpatialSpace@@3PAVISpatial_DB@@A
	mov	ecx, DWORD PTR [eax]
	lea	ebp, DWORD PTR [esi+16]
	push	ecx
	mov	ecx, ebp
	call	DWORD PTR __imp_??0ISpatial@@QAE@PAVISpatial_DB@@@Z
	mov	edx, DWORD PTR [esi+72]
	and	edx, -788922348				; d0fa0014H
	or	edx, 16384020				; 00fa0014H
	lea	ecx, DWORD PTR [esi+76]
	mov	DWORD PTR [esi+68], OFFSET ??_7ISheduled@@6B@
	mov	DWORD PTR [esi+72], edx
	call	??0IRenderable@@QAE@XZ			; IRenderable::IRenderable
	push	edi
	push	OFFSET ??_R0?AVISpatial@@@8
	push	OFFSET ??_R0?AVICollidable@@@8
	lea	ebx, DWORD PTR [esi+156]
	push	edi
	push	ebx
	mov	DWORD PTR [ebx], OFFSET ??_7ICollidable@@6B@
	mov	DWORD PTR [ebx+4], edi
	call	___RTDynamicCast
	add	esp, 20					; 00000014H
	cmp	eax, edi
	je	SHORT $LN7@CObject@3
	or	DWORD PTR [eax+4], 4
$LN7@CObject@3:

; 157  : 	// Transform
; 158  : 	Props.storage				= 0;
; 159  : 
; 160  : 	Parent						= NULL;
; 161  : 
; 162  : 	NameObject					= NULL;

	mov	eax, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
	mov	DWORD PTR [ebx], OFFSET ??_7CObject@@6BICollidable@@@
	mov	ebx, DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	mov	DWORD PTR [esi], OFFSET ??_7CObject@@6BDLL_Pure@@@
	mov	DWORD PTR [ebp], OFFSET ??_7CObject@@6BISpatial@@@
	mov	DWORD PTR [esi+68], OFFSET ??_7CObject@@6BISheduled@@@
	mov	DWORD PTR [esi+76], OFFSET ??_7CObject@@6BIRenderable@@@
	mov	DWORD PTR [esi+168], edi
	mov	DWORD PTR [esi+172], edi
	mov	DWORD PTR [esi+176], edi
	mov	DWORD PTR [esi+248], edi
	mov	DWORD PTR [esi+256], -1
	mov	DWORD PTR [esi+164], edi
	mov	DWORD PTR [esi+180], edi
	mov	ecx, DWORD PTR [eax]
	push	edi
	call	ebx
	cmp	eax, edi
	je	SHORT $LN20@CObject@3
	add	DWORD PTR [eax], 1
$LN20@CObject@3:
	mov	ecx, DWORD PTR [esi+168]
	cmp	ecx, edi
	je	SHORT $LN23@CObject@3
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [esi+168]
	cmp	DWORD PTR [ecx], edi
	jne	SHORT $LN23@CObject@3
	mov	DWORD PTR [esi+168], edi
$LN23@CObject@3:

; 163  : 	NameSection					= NULL;

	mov	edx, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
	mov	DWORD PTR [esi+168], eax
	mov	ecx, DWORD PTR [edx]
	push	edi
	call	ebx
	cmp	eax, edi
	je	SHORT $LN29@CObject@3
	add	DWORD PTR [eax], 1
$LN29@CObject@3:
	mov	ecx, DWORD PTR [esi+172]
	cmp	ecx, edi
	je	SHORT $LN32@CObject@3
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [esi+172]
	cmp	DWORD PTR [ecx], edi
	jne	SHORT $LN32@CObject@3
	mov	DWORD PTR [esi+172], edi
$LN32@CObject@3:

; 164  : 	NameVisual					= NULL;

	mov	edx, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
	mov	DWORD PTR [esi+172], eax
	mov	ecx, DWORD PTR [edx]
	push	edi
	call	ebx
	cmp	eax, edi
	je	SHORT $LN38@CObject@3
	add	DWORD PTR [eax], 1
$LN38@CObject@3:
	mov	ecx, DWORD PTR [esi+176]
	cmp	ecx, edi
	je	SHORT $LN46@CObject@3
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [esi+176]
	cmp	DWORD PTR [ecx], edi
$LN46@CObject@3:
	pop	edi
	mov	DWORD PTR [esi+176], eax

; 165  : 
; 166  : #ifdef DEBUG
; 167  : 	dbg_update_shedule			= u32(-1)/2;
; 168  : 	dbg_update_cl				= u32(-1)/2;
; 169  : #endif
; 170  : }

	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
	ret	0
??0CObject@@QAE@XZ ENDP					; CObject::CObject
_TEXT	ENDS
PUBLIC	?MakeMeCrow@CObject@@QAEXXZ			; CObject::MakeMeCrow
; Function compile flags: /Ogtpy
;	COMDAT ?MakeMeCrow@CObject@@QAEXXZ
_TEXT	SEGMENT
?MakeMeCrow@CObject@@QAEXXZ PROC			; CObject::MakeMeCrow, COMDAT
; _this$ = ecx

; 36   : 	if ( Props.crow )

	test	DWORD PTR [ecx+164], 1073741824		; 40000000H
	jne	SHORT $LN7@MakeMeCrow

; 37   : 		return;
; 38   : 
; 39   : 	if ( !processing_enabled() )

	cmp	BYTE PTR [ecx+166], 0
	je	SHORT $LN7@MakeMeCrow

; 40   : 		return;
; 41   : 
; 42   : 	u32 const device_frame_id		= Device.dwFrame;

	mov	edx, DWORD PTR ?Device@@3VCRenderDevice@@A+24

; 43   : 	u32 const object_frame_id		= dwFrame_AsCrow;

	mov	eax, DWORD PTR [ecx+256]
	push	ebx
	push	esi
	lea	esi, DWORD PTR [ecx+256]

; 44   : 	if (
; 45   : 			(u32)_InterlockedCompareExchange(
; 46   : 				(long*)&dwFrame_AsCrow,
; 47   : 				device_frame_id,
; 48   : 				object_frame_id
; 49   : 			) == device_frame_id
; 50   : 		)

	mov	ebx, edx
	lock	 cmpxchg DWORD PTR [esi], ebx
	cmp	eax, edx
	pop	esi
	pop	ebx
	je	SHORT $LN7@MakeMeCrow

; 51   : 		return;
; 52   : 
; 53   : 	VERIFY							( dwFrame_AsCrow == device_frame_id );
; 54   : 
; 55   : 	Props.crow						= 1;

	or	DWORD PTR [ecx+164], 1073741824		; 40000000H

; 56   : 	g_pGameLevel->Objects.o_crow	(this);

	push	ecx
	mov	ecx, DWORD PTR ?g_pGameLevel@@3PAVIGame_Level@@A ; g_pGameLevel
	add	ecx, 76					; 0000004cH
	call	?o_crow@CObjectList@@QAEXPAVCObject@@@Z	; CObjectList::o_crow
$LN7@MakeMeCrow:

; 57   : }

	ret	0
?MakeMeCrow@CObject@@QAEXXZ ENDP			; CObject::MakeMeCrow
PUBLIC	?H_SetParent@CObject@@QAEPAV1@PAV1@_N@Z		; CObject::H_SetParent
; Function compile flags: /Ogtpy
;	COMDAT ?H_SetParent@CObject@@QAEPAV1@PAV1@_N@Z
_TEXT	SEGMENT
_new_parent$ = 8					; size = 4
_just_before_destroy$ = 12				; size = 1
?H_SetParent@CObject@@QAEPAV1@PAV1@_N@Z PROC		; CObject::H_SetParent, COMDAT
; _this$ = ecx

; 373  : {

	push	ebx

; 374  : 	if (new_parent==Parent)	return new_parent;

	mov	ebx, DWORD PTR _new_parent$[esp]
	push	esi
	mov	esi, ecx
	push	edi
	mov	edi, DWORD PTR [esi+180]
	cmp	ebx, edi
	jne	SHORT $LN10@H_SetParen
	pop	edi
	pop	esi
	mov	eax, ebx
	pop	ebx

; 391  : }

	ret	8
$LN10@H_SetParen:

; 375  : 
; 376  : 	CObject* old_parent	= Parent; 
; 377  : 	
; 378  : 	VERIFY2((new_parent==0)||(old_parent==0),"Before set parent - execute H_SetParent(0)");
; 379  : 
; 380  : 	// if (Parent) Parent->H_ChildRemove	(this);
; 381  : 	if (0==old_parent)	OnH_B_Chield		();	// before attach

	test	edi, edi
	mov	eax, DWORD PTR [esi]
	jne	SHORT $LN6@H_SetParen
	mov	edx, DWORD PTR [eax+96]
	call	edx
	jmp	SHORT $LN5@H_SetParen
$LN6@H_SetParen:

; 382  : 	else				OnH_B_Independent	(just_before_destroy); // before detach

	mov	ecx, DWORD PTR _just_before_destroy$[esp+8]
	mov	edx, DWORD PTR [eax+100]
	push	ecx
	mov	ecx, esi
	call	edx
$LN5@H_SetParen:

; 383  : 	if (new_parent)		spatial_unregister	();

	test	ebx, ebx
	mov	eax, DWORD PTR [esi+16]
	lea	ecx, DWORD PTR [esi+16]
	je	SHORT $LN4@H_SetParen
	mov	edx, DWORD PTR [eax+4]
	jmp	SHORT $LN13@H_SetParen
$LN4@H_SetParen:

; 384  : 	else				spatial_register	();

	mov	edx, DWORD PTR [eax]
$LN13@H_SetParen:
	call	edx

; 385  : 	Parent				= new_parent;
; 386  : 	if (0==old_parent)	OnH_A_Chield		();	// after attach

	test	edi, edi
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [esi+180], ebx
	mov	ecx, esi
	jne	SHORT $LN2@H_SetParen
	mov	edx, DWORD PTR [eax+104]

; 387  : 	else				OnH_A_Independent	(); // after detach

	call	edx

; 388  : 	// if (Parent)	Parent->H_ChildAdd		(this);
; 389  : 	MakeMeCrow			();

	mov	ecx, esi
	call	?MakeMeCrow@CObject@@QAEXXZ		; CObject::MakeMeCrow

; 390  : 	return				old_parent;

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx

; 391  : }

	ret	8
$LN2@H_SetParen:

; 387  : 	else				OnH_A_Independent	(); // after detach

	mov	edx, DWORD PTR [eax+108]
	call	edx

; 388  : 	// if (Parent)	Parent->H_ChildAdd		(this);
; 389  : 	MakeMeCrow			();

	mov	ecx, esi
	call	?MakeMeCrow@CObject@@QAEXXZ		; CObject::MakeMeCrow

; 390  : 	return				old_parent;

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx

; 391  : }

	ret	8
?H_SetParent@CObject@@QAEPAV1@PAV1@_N@Z ENDP		; CObject::H_SetParent
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?renderable_Render@CObject@@UAEXXZ
_TEXT	SEGMENT
?renderable_Render@CObject@@UAEXXZ PROC			; CObject::renderable_Render, COMDAT
; _this$ = ecx

; 369  : 	MakeMeCrow	();

	add	ecx, -76				; ffffffb4H
	test	DWORD PTR [ecx+164], 1073741824		; 40000000H
	jne	SHORT $LN9@renderable@2
	cmp	BYTE PTR [ecx+166], 0
	je	SHORT $LN9@renderable@2
	mov	edx, DWORD PTR ?Device@@3VCRenderDevice@@A+24
	mov	eax, DWORD PTR [ecx+256]
	push	ebx
	push	esi
	lea	esi, DWORD PTR [ecx+256]
	mov	ebx, edx
	lock	 cmpxchg DWORD PTR [esi], ebx
	cmp	eax, edx
	pop	esi
	pop	ebx
	je	SHORT $LN9@renderable@2
	or	DWORD PTR [ecx+164], 1073741824		; 40000000H
	push	ecx
	mov	ecx, DWORD PTR ?g_pGameLevel@@3PAVIGame_Level@@A ; g_pGameLevel
	add	ecx, 76					; 0000004cH
	call	?o_crow@CObjectList@@QAEXPAVCObject@@@Z	; CObjectList::o_crow
$LN9@renderable@2:

; 370  : }

	ret	0
?renderable_Render@CObject@@UAEXXZ ENDP			; CObject::renderable_Render
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?shedule_Update@CObject@@UAEXI@Z
_TEXT	SEGMENT
_T$ = 8							; size = 4
?shedule_Update@CObject@@UAEXI@Z PROC			; CObject::shedule_Update, COMDAT
; _this$ = ecx

; 328  : 	// consistency check
; 329  : 	// Msg						("-SUB-:[%x][%s] CObject::shedule_Update",dynamic_cast<void*>(this),*cName());
; 330  : 	ISheduled::shedule_Update	(T);
; 331  : 	spatial_update				(base_spu_epsP*1,base_spu_epsR*1);

	fld	DWORD PTR _LDIST
	push	esi
	sub	esp, 8
	lea	esi, DWORD PTR [ecx-68]
	fst	DWORD PTR [esp+4]
	mov	ecx, esi
	fstp	DWORD PTR [esp]
	call	?spatial_update@CObject@@QAEXMM@Z	; CObject::spatial_update

; 332  : 
; 333  : 	// Always make me crow on shedule-update 
; 334  : 	// Makes sure that update-cl called at least with freq of shedule-update
; 335  : 	MakeMeCrow					();	

	test	DWORD PTR [esi+164], 1073741824		; 40000000H
	jne	SHORT $LN11@shedule_Up@2
	cmp	BYTE PTR [esi+166], 0
	je	SHORT $LN11@shedule_Up@2
	mov	ecx, DWORD PTR ?Device@@3VCRenderDevice@@A+24
	mov	eax, DWORD PTR [esi+256]
	lea	edx, DWORD PTR [esi+256]
	push	ebx
	mov	ebx, ecx
	lock	 cmpxchg DWORD PTR [edx], ebx
	cmp	eax, ecx
	pop	ebx
	je	SHORT $LN11@shedule_Up@2
	or	DWORD PTR [esi+164], 1073741824		; 40000000H
	mov	ecx, DWORD PTR ?g_pGameLevel@@3PAVIGame_Level@@A ; g_pGameLevel
	push	esi
	add	ecx, 76					; 0000004cH
	call	?o_crow@CObjectList@@QAEXPAVCObject@@@Z	; CObjectList::o_crow
$LN11@shedule_Up@2:
	pop	esi

; 336  : 	/*
; 337  : 	if (AlwaysTheCrow())																	MakeMeCrow	();
; 338  : 	else if (Device.vCameraPosition.distance_to_sqr(Position()) < CROW_RADIUS*CROW_RADIUS)	MakeMeCrow	();
; 339  : 	*/
; 340  : }

	ret	4
?shedule_Update@CObject@@UAEXI@Z ENDP			; CObject::shedule_Update
_TEXT	ENDS
PUBLIC	__real@44610000
PUBLIC	__real@3e800000
;	COMDAT __real@44610000
; File d:\clearsky\sources\engine\xrengine\xr_object.h
CONST	SEGMENT
__real@44610000 DD 044610000r			; 900
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\xr_object.cpp
CONST	ENDS
;	COMDAT ?UpdateCL@CObject@@UAEXXZ
_TEXT	SEGMENT
_dist$138698 = -4					; size = 4
?UpdateCL@CObject@@UAEXXZ PROC				; CObject::UpdateCL, COMDAT
; _this$ = ecx

; 295  : {

	push	ecx

; 296  : 	// consistency check
; 297  : #ifdef DEBUG
; 298  : 	VERIFY2								(_valid(renderable.xform),*cName());
; 299  : 
; 300  : 	if (Device.dwFrame==dbg_update_cl)								Debug.fatal	(DEBUG_INFO,"'UpdateCL' called twice per frame for %s",*cName());
; 301  : 	dbg_update_cl	= Device.dwFrame;
; 302  : 
; 303  : 	if (Parent && spatial.node_ptr)									Debug.fatal	(DEBUG_INFO,"Object %s has parent but is still registered inside spatial DB",*cName());
; 304  : 
; 305  : 	if ((0==collidable.model)&&(spatial.type&STYPE_COLLIDEABLE))	Debug.fatal	(DEBUG_INFO,"Object %s registered as 'collidable' but has no collidable model",*cName());
; 306  : #endif
; 307  : 
; 308  : 	spatial_update				(base_spu_epsP*5,base_spu_epsR*5);

	fld	DWORD PTR __real@3e800000
	push	esi
	sub	esp, 8
	fst	DWORD PTR [esp+4]
	mov	esi, ecx
	fstp	DWORD PTR [esp]
	call	?spatial_update@CObject@@QAEXMM@Z	; CObject::spatial_update

; 309  : 
; 310  : 	// crow
; 311  : 	if (Parent == g_pGameLevel->CurrentViewEntity())										

	mov	ecx, DWORD PTR ?g_pGameLevel@@3PAVIGame_Level@@A ; g_pGameLevel
	mov	eax, DWORD PTR [esi+180]
	cmp	eax, DWORD PTR [ecx+36]

; 312  : 		MakeMeCrow	();

	mov	ecx, esi
	jne	SHORT $LN7@UpdateCL
	pop	esi

; 323  : 	}
; 324  : }

	add	esp, 4

; 312  : 		MakeMeCrow	();

	jmp	?MakeMeCrow@CObject@@QAEXXZ		; CObject::MakeMeCrow
$LN7@UpdateCL:

; 313  : 	else if (AlwaysTheCrow())																

	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	test	eax, eax
	je	SHORT $LN5@UpdateCL

; 314  : 		MakeMeCrow	();

	mov	ecx, esi
	pop	esi

; 323  : 	}
; 324  : }

	add	esp, 4

; 314  : 		MakeMeCrow	();

	jmp	?MakeMeCrow@CObject@@QAEXXZ		; CObject::MakeMeCrow
$LN5@UpdateCL:

; 315  : 	else
; 316  : 	{
; 317  : 		float dist = Device.vCameraPosition.distance_to_sqr(Position());

	movss	xmm2, DWORD PTR ?Device@@3VCRenderDevice@@A+56
	subss	xmm2, DWORD PTR [esi+136]
	movss	xmm1, DWORD PTR ?Device@@3VCRenderDevice@@A+52
	subss	xmm1, DWORD PTR [esi+132]
	movss	xmm0, DWORD PTR ?Device@@3VCRenderDevice@@A+48
	subss	xmm0, DWORD PTR [esi+128]
	movaps	xmm3, xmm2
	mulss	xmm3, xmm2
	mulss	xmm0, xmm0
	movaps	xmm2, xmm1
	mulss	xmm2, xmm1

; 318  : 		if (dist < CROW_RADIUS*CROW_RADIUS)	

	movss	xmm1, DWORD PTR __real@44610000
	addss	xmm0, xmm3
	addss	xmm0, xmm2
	comiss	xmm1, xmm0
	movss	DWORD PTR _dist$138698[esp+8], xmm0
	jbe	SHORT $LN3@UpdateCL

; 319  : 			MakeMeCrow	();

	mov	ecx, esi
	pop	esi

; 323  : 	}
; 324  : }

	add	esp, 4

; 319  : 			MakeMeCrow	();

	jmp	?MakeMeCrow@CObject@@QAEXXZ		; CObject::MakeMeCrow
$LN3@UpdateCL:

; 320  : 		else 
; 321  : 		if( (Visual() && Visual()->getVisData().hom_frame+2 > Device.dwFrame) && (dist < CROW_RADIUS2*CROW_RADIUS2) )

	mov	eax, DWORD PTR [esi+144]
	test	eax, eax
	je	SHORT $LN1@UpdateCL
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	push	eax
	call	edx
	mov	eax, DWORD PTR [eax+48]
	add	eax, 2
	cmp	eax, DWORD PTR ?Device@@3VCRenderDevice@@A+24
	jbe	SHORT $LN1@UpdateCL
	movss	xmm0, DWORD PTR __real@45610000
	comiss	xmm0, DWORD PTR _dist$138698[esp+8]
	jbe	SHORT $LN1@UpdateCL

; 322  : 			MakeMeCrow	();

	mov	ecx, esi
	pop	esi

; 323  : 	}
; 324  : }

	add	esp, 4

; 322  : 			MakeMeCrow	();

	jmp	?MakeMeCrow@CObject@@QAEXXZ		; CObject::MakeMeCrow
$LN1@UpdateCL:
	pop	esi

; 323  : 	}
; 324  : }

	pop	ecx
	ret	0
?UpdateCL@CObject@@UAEXXZ ENDP				; CObject::UpdateCL
_TEXT	ENDS
PUBLIC	?processing_deactivate@CObject@@QAEXXZ		; CObject::processing_deactivate
; Function compile flags: /Ogtpy
;	COMDAT ?processing_deactivate@CObject@@QAEXXZ
_TEXT	SEGMENT
?processing_deactivate@CObject@@QAEXXZ PROC		; CObject::processing_deactivate, COMDAT
; _this$ = ecx

; 116  : 	VERIFY3	(0	!= Props.bActiveCounter, "Invalid sequence of processing enable/disable calls: underflow",*cName());
; 117  : 	Props.bActiveCounter			--;

	add	BYTE PTR [ecx+166], 255			; 000000ffH

; 118  : 	if (0==Props.bActiveCounter)		g_pGameLevel->Objects.o_sleep		(this);

	jne	SHORT $LN1@processing
	push	ecx
	mov	ecx, DWORD PTR ?g_pGameLevel@@3PAVIGame_Level@@A ; g_pGameLevel
	add	ecx, 76					; 0000004cH
	call	?o_sleep@CObjectList@@QAEXPAVCObject@@@Z ; CObjectList::o_sleep
$LN1@processing:

; 119  : }

	ret	0
?processing_deactivate@CObject@@QAEXXZ ENDP		; CObject::processing_deactivate
_TEXT	ENDS
PUBLIC	?processing_activate@CObject@@QAEXXZ		; CObject::processing_activate
; Function compile flags: /Ogtpy
;	COMDAT ?processing_activate@CObject@@QAEXXZ
_TEXT	SEGMENT
?processing_activate@CObject@@QAEXXZ PROC		; CObject::processing_activate, COMDAT
; _this$ = ecx

; 110  : 	VERIFY3	(255!= Props.bActiveCounter, "Invalid sequence of processing enable/disable calls: overflow",*cName());
; 111  : 	Props.bActiveCounter			++;

	add	BYTE PTR [ecx+166], 1

; 112  : 	if (0==(Props.bActiveCounter-1))	g_pGameLevel->Objects.o_activate	(this);

	movzx	eax, BYTE PTR [ecx+166]
	sub	eax, 1
	jne	SHORT $LN1@processing@2
	push	ecx
	mov	ecx, DWORD PTR ?g_pGameLevel@@3PAVIGame_Level@@A ; g_pGameLevel
	add	ecx, 76					; 0000004cH
	call	?o_activate@CObjectList@@QAEXPAVCObject@@@Z ; CObjectList::o_activate
$LN1@processing@2:

; 113  : }

	ret	0
?processing_activate@CObject@@QAEXXZ ENDP		; CObject::processing_activate
; Function compile flags: /Ogtpy
;	COMDAT ?net_Spawn@CObject@@UAEHPAVCSE_Abstract@@@Z
_TEXT	SEGMENT
$T552602 = -16						; size = 4
$T552601 = -12						; size = 4
$T552609 = -8						; size = 4
$T552606 = -8						; size = 4
$T552611 = -4						; size = 4
$T552608 = -4						; size = 4
_data$ = 8						; size = 4
?net_Spawn@CObject@@UAEHPAVCSE_Abstract@@@Z PROC	; CObject::net_Spawn, COMDAT
; _this$ = ecx

; 200  : {

	sub	esp, 16					; 00000010H
	push	ebx
	push	ebp
	push	esi
	xor	ebx, ebx
	mov	esi, ecx
	xor	ebp, ebp

; 201  : 	PositionStack.clear			();

	mov	DWORD PTR $T552611[esp+28], ebx

; 202  : 
; 203  : 	VERIFY						(_valid(renderable.xform));
; 204  : 
; 205  : 	if (0==Visual() && pSettings->line_exist( cNameSect(), "visual" ) )

	cmp	DWORD PTR [esi+144], ebp
	push	edi
	mov	DWORD PTR [esi+248], ebp
	jne	SHORT $LN151@net_Spawn
	mov	eax, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET ??_C@_06KABONEAP@visual?$AA@
	mov	DWORD PTR $T552601[esp+36], ebp
	call	DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	cmp	eax, ebp
	je	SHORT $LN150@net_Spawn
	add	DWORD PTR [eax], 1
$LN150@net_Spawn:
	mov	ecx, DWORD PTR $T552601[esp+32]
	cmp	ecx, ebp
	je	SHORT $LN152@net_Spawn
	add	DWORD PTR [ecx], -1
$LN152@net_Spawn:
	mov	DWORD PTR $T552601[esp+32], eax
	mov	eax, DWORD PTR [esi+172]
	cmp	eax, ebp
	mov	ebx, 3
	mov	DWORD PTR $T552602[esp+32], ebp
	je	SHORT $LN154@net_Spawn
	add	DWORD PTR [eax], 1
	mov	ecx, DWORD PTR $T552602[esp+32]
	cmp	ecx, ebp
	je	SHORT $LN154@net_Spawn
	add	DWORD PTR [ecx], -1
$LN154@net_Spawn:
	mov	DWORD PTR $T552602[esp+32], eax
	mov	eax, DWORD PTR __imp_?pSettings@@3PBVCInifile@@B
	lea	ecx, DWORD PTR $T552601[esp+32]
	push	ecx
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR $T552602[esp+36]
	push	edx
	call	DWORD PTR __imp_?line_exist@CInifile@@QBEHABVshared_str@@0@Z
	test	eax, eax
	je	SHORT $LN151@net_Spawn
	mov	cl, 1
	jmp	SHORT $LN18@net_Spawn
$LN151@net_Spawn:
	xor	cl, cl
$LN18@net_Spawn:
	test	bl, 2
	je	SHORT $LN159@net_Spawn
	mov	eax, DWORD PTR $T552602[esp+32]
	and	ebx, -3					; fffffffdH
	cmp	eax, ebp
	je	SHORT $LN159@net_Spawn
	add	DWORD PTR [eax], -1
	mov	edx, DWORD PTR $T552602[esp+32]
	cmp	DWORD PTR [edx], ebp
	jne	SHORT $LN159@net_Spawn
	mov	DWORD PTR $T552602[esp+32], ebp
$LN159@net_Spawn:
	test	bl, 1
	je	SHORT $LN161@net_Spawn
	mov	eax, DWORD PTR $T552601[esp+32]
	cmp	eax, ebp
	je	SHORT $LN161@net_Spawn
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR $T552601[esp+32]
	cmp	DWORD PTR [eax], ebp
	jne	SHORT $LN161@net_Spawn
	mov	DWORD PTR $T552601[esp+32], ebp
$LN161@net_Spawn:
	test	cl, cl
	je	$LN153@net_Spawn

; 206  : 		cNameVisual_set			(pSettings->r_string( cNameSect(), "visual" ) );

	mov	eax, DWORD PTR [esi+172]
	cmp	eax, ebp
	mov	DWORD PTR $T552606[esp+32], ebp
	je	SHORT $LN64@net_Spawn
	add	DWORD PTR [eax], 1
	mov	ecx, DWORD PTR $T552606[esp+32]
	cmp	ecx, ebp
	je	SHORT $LN64@net_Spawn
	add	DWORD PTR [ecx], -1
$LN64@net_Spawn:
	mov	edx, DWORD PTR __imp_?pSettings@@3PBVCInifile@@B
	push	OFFSET ??_C@_06KABONEAP@visual?$AA@
	lea	ecx, DWORD PTR $T552606[esp+36]
	mov	DWORD PTR $T552606[esp+36], eax
	push	ecx
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?r_string@CInifile@@QBEPBDABVshared_str@@PBD@Z
	push	ecx
	mov	edi, esp
	push	eax
	mov	eax, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
	mov	DWORD PTR [edi], ebp
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	cmp	eax, ebp
	je	SHORT $LN70@net_Spawn
	add	DWORD PTR [eax], 1
$LN70@net_Spawn:
	mov	ecx, DWORD PTR [edi]
	cmp	ecx, ebp
	je	SHORT $LN73@net_Spawn
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [edi]
	cmp	DWORD PTR [ecx], ebp
	jne	SHORT $LN73@net_Spawn
	mov	DWORD PTR [edi], ebp
$LN73@net_Spawn:
	mov	ecx, esi
	mov	DWORD PTR [edi], eax
	call	?cNameVisual_set@CObject@@QAEXVshared_str@@@Z ; CObject::cNameVisual_set
	mov	eax, DWORD PTR $T552606[esp+32]
	cmp	eax, ebp
	je	SHORT $LN153@net_Spawn
	add	DWORD PTR [eax], -1
	mov	edx, DWORD PTR $T552606[esp+32]
	cmp	DWORD PTR [edx], ebp
	jne	SHORT $LN153@net_Spawn
	mov	DWORD PTR $T552606[esp+32], ebp
$LN153@net_Spawn:

; 207  : 
; 208  : 	if (0==collidable.model) 	{

	cmp	DWORD PTR [esi+160], ebp
	jne	$LN5@net_Spawn

; 209  : 		if (pSettings->line_exist(cNameSect(),"cform")) {

	mov	eax, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET ??_C@_05DCEMOPME@cform?$AA@
	mov	DWORD PTR $T552608[esp+36], ebp
	call	DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	cmp	eax, ebp
	je	SHORT $LN156@net_Spawn
	add	DWORD PTR [eax], 1
$LN156@net_Spawn:
	mov	ecx, DWORD PTR $T552608[esp+32]
	cmp	ecx, ebp
	je	SHORT $LN157@net_Spawn
	add	DWORD PTR [ecx], -1
$LN157@net_Spawn:
	mov	DWORD PTR $T552608[esp+32], eax
	mov	eax, DWORD PTR [esi+172]
	cmp	eax, ebp
	mov	DWORD PTR $T552609[esp+32], ebp
	je	SHORT $LN160@net_Spawn
	add	DWORD PTR [eax], 1
	mov	ecx, DWORD PTR $T552609[esp+32]
	cmp	ecx, ebp
	je	SHORT $LN160@net_Spawn
	add	DWORD PTR [ecx], -1
$LN160@net_Spawn:
	mov	DWORD PTR $T552609[esp+32], eax
	mov	eax, DWORD PTR __imp_?pSettings@@3PBVCInifile@@B
	lea	ecx, DWORD PTR $T552608[esp+32]
	push	ecx
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR $T552609[esp+36]
	push	edx
	call	DWORD PTR __imp_?line_exist@CInifile@@QBEHABVshared_str@@0@Z
	mov	ecx, DWORD PTR $T552609[esp+32]
	cmp	ecx, ebp
	je	SHORT $LN162@net_Spawn
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR $T552609[esp+32]
	cmp	DWORD PTR [ecx], ebp
	jne	SHORT $LN162@net_Spawn
	mov	DWORD PTR $T552609[esp+32], ebp
$LN162@net_Spawn:
	mov	ecx, DWORD PTR $T552608[esp+32]
	cmp	ecx, ebp
	je	SHORT $LN111@net_Spawn
	add	DWORD PTR [ecx], -1
$LN111@net_Spawn:
	cmp	eax, ebp
	je	SHORT $LN5@net_Spawn

; 210  : 			VERIFY3				(*NameVisual, "Model isn't assigned for object, but cform requisted",*cName());
; 211  : 			collidable.model	= xr_new<CCF_Skeleton>	(this);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	88					; 00000058H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	cmp	eax, ebp
	je	SHORT $LN117@net_Spawn
	push	esi
	mov	ecx, eax
	call	??0CCF_Skeleton@@QAE@PAVCObject@@@Z	; CCF_Skeleton::CCF_Skeleton
	jmp	SHORT $LN118@net_Spawn
$LN117@net_Spawn:
	xor	eax, eax
$LN118@net_Spawn:
	mov	DWORD PTR [esi+160], eax
$LN5@net_Spawn:

; 212  : 		}
; 213  : 	}
; 214  : 
; 215  : 	R_ASSERT					(spatial.space);

	cmp	BYTE PTR ?ignore_always@?BA@??net_Spawn@CObject@@UAEHPAVCSE_Abstract@@@Z@4_NA, 0
	jne	SHORT $LN4@net_Spawn
	cmp	DWORD PTR [esi+64], ebp
	jne	SHORT $LN4@net_Spawn
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?BA@??net_Spawn@CObject@@UAEHPAVCSE_Abstract@@@Z@4_NA
	push	OFFSET ??_C@_0BD@FMCMDGBO@CObject?3?3net_Spawn?$AA@
	push	215					; 000000d7H
	push	OFFSET ??_C@_0DC@KLBOKOMF@D?3?2CLEARSKY?2sources?2engine?2xrEng@
	push	OFFSET ??_C@_0O@CEHLMFAB@spatial?4space?$AA@
	call	DWORD PTR __imp_?fail@xrDebug@@QAEXPBD0H0AA_N@Z
$LN4@net_Spawn:

; 216  : 	spatial_register			();

	mov	edx, DWORD PTR [esi+16]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [esi+16]
	call	eax

; 217  : 
; 218  : 	if (register_schedule())

	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+120]
	mov	ecx, esi
	call	eax
	test	al, al
	je	SHORT $LN126@net_Spawn

; 219  : 		shedule_register		();

	push	ebp
	lea	ecx, DWORD PTR [esi+68]
	push	ecx
	mov	ecx, OFFSET ?Engine@@3VCEngine@@A+64
	call	?Register@CSheduler@@QAEXPAVISheduled@@H@Z ; CSheduler::Register

; 220  : 
; 221  : 	// reinitialize flags
; 222  : 	processing_activate			();

$LN126@net_Spawn:
	add	BYTE PTR [esi+166], 1
	movzx	edx, BYTE PTR [esi+166]
	sub	edx, 1
	jne	SHORT $LN123@net_Spawn
	mov	ecx, DWORD PTR ?g_pGameLevel@@3PAVIGame_Level@@A ; g_pGameLevel
	push	esi
	add	ecx, 76					; 0000004cH
	call	?o_activate@CObjectList@@QAEXPAVCObject@@@Z ; CObjectList::o_activate
$LN123@net_Spawn:

; 223  : 	setDestroy					(false);

	mov	eax, DWORD PTR [esi+164]
	test	eax, 67108864				; 04000000H
	je	SHORT $LN129@net_Spawn
	and	eax, -67108865				; fbffffffH
	mov	DWORD PTR [esi+164], eax
$LN129@net_Spawn:

; 224  : 
; 225  : 	MakeMeCrow					();

	mov	edi, 1073741824				; 40000000H
	test	DWORD PTR [esi+164], edi
	jne	SHORT $LN149@net_Spawn
	cmp	BYTE PTR [esi+166], 0
	je	SHORT $LN149@net_Spawn
	mov	ecx, DWORD PTR ?Device@@3VCRenderDevice@@A+24
	mov	eax, DWORD PTR [esi+256]
	lea	edx, DWORD PTR [esi+256]
	mov	ebx, ecx
	lock	 cmpxchg DWORD PTR [edx], ebx
	cmp	eax, ecx
	je	SHORT $LN149@net_Spawn
	or	DWORD PTR [esi+164], edi
	mov	ecx, DWORD PTR ?g_pGameLevel@@3PAVIGame_Level@@A ; g_pGameLevel
	push	esi
	add	ecx, 76					; 0000004cH
	call	?o_crow@CObjectList@@QAEXPAVCObject@@@Z	; CObjectList::o_crow
$LN149@net_Spawn:

; 226  : 
; 227  : 	return TRUE					;
; 228  : }

	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	pop	ebx
	add	esp, 16					; 00000010H
	ret	4
?net_Spawn@CObject@@UAEHPAVCSE_Abstract@@@Z ENDP	; CObject::net_Spawn
END
