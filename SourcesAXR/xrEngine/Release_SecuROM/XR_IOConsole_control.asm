; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	D:\CLEARSKY\sources\engine\xrEngine\XR_IOConsole_control.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??$_Destroy@Vshared_str@@@stlp_std@@YAXPAVshared_str@@@Z ; stlp_std::_Destroy<shared_str>
PUBLIC	?_M_erase@?$_Impl_vector@Vshared_str@@V?$xalloc@Vshared_str@@@@@priv@stlp_std@@AAEPAVshared_str@@PAV4@ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<shared_str,xalloc<shared_str> >::_M_erase
PUBLIC	?erase@?$_Impl_vector@Vshared_str@@V?$xalloc@Vshared_str@@@@@priv@stlp_std@@QAEPAVshared_str@@PAV4@@Z ; stlp_std::priv::_Impl_vector<shared_str,xalloc<shared_str> >::erase
PUBLIC	?erase@?$vector@Vshared_str@@V?$xalloc@Vshared_str@@@@@stlp_std@@QAEPAVshared_str@@PAV3@@Z ; stlp_std::vector<shared_str,xalloc<shared_str> >::erase
PUBLIC	?reset_selected_tip@CConsole@@IAEXXZ		; CConsole::reset_selected_tip
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\xr_ioconsole_control.cpp
;	COMDAT ?reset_selected_tip@CConsole@@IAEXXZ
_TEXT	SEGMENT
?reset_selected_tip@CConsole@@IAEXXZ PROC		; CConsole::reset_selected_tip, COMDAT
; _this$ = ecx

; 94   : 	m_select_tip = -1;
; 95   : 	m_start_tip = 0;

	xor	eax, eax
	mov	DWORD PTR [ecx+96], -1
	mov	DWORD PTR [ecx+100], eax

; 96   : 	m_disable_tips = false;

	mov	BYTE PTR [ecx+36], al

; 97   : }

	ret	0
?reset_selected_tip@CConsole@@IAEXXZ ENDP		; CConsole::reset_selected_tip
_TEXT	ENDS
PUBLIC	?check_prev_selected_tip@CConsole@@IAEXXZ	; CConsole::check_prev_selected_tip
; Function compile flags: /Ogtpy
;	COMDAT ?check_prev_selected_tip@CConsole@@IAEXXZ
_TEXT	SEGMENT
?check_prev_selected_tip@CConsole@@IAEXXZ PROC		; CConsole::check_prev_selected_tip, COMDAT
; _this$ = ecx

; 81   : 	if ( m_select_tip < 0 )

	cmp	DWORD PTR [ecx+96], 0
	jge	SHORT $LN2@check_prev

; 82   : 	{
; 83   : 		m_select_tip = 0;

	mov	DWORD PTR [ecx+96], 0
$LN2@check_prev:

; 84   : 	}
; 85   : 
; 86   : 	if ( m_start_tip > m_select_tip )

	mov	eax, DWORD PTR [ecx+96]
	cmp	DWORD PTR [ecx+100], eax
	jle	SHORT $LN1@check_prev

; 87   : 	{
; 88   : 		m_start_tip = m_select_tip;

	mov	DWORD PTR [ecx+100], eax
$LN1@check_prev:

; 89   : 	}
; 90   : }

	ret	0
?check_prev_selected_tip@CConsole@@IAEXXZ ENDP		; CConsole::check_prev_selected_tip
_TEXT	ENDS
PUBLIC	?prev_selected_tip@CConsole@@IAEXXZ		; CConsole::prev_selected_tip
; Function compile flags: /Ogtpy
;	COMDAT ?prev_selected_tip@CConsole@@IAEXXZ
_TEXT	SEGMENT
?prev_selected_tip@CConsole@@IAEXXZ PROC		; CConsole::prev_selected_tip, COMDAT
; _this$ = ecx

; 75   : 	--m_select_tip;

	add	DWORD PTR [ecx+96], -1

; 76   : 	check_prev_selected_tip();

	jns	SHORT $LN4@prev_selec
	mov	DWORD PTR [ecx+96], 0
$LN4@prev_selec:
	mov	eax, DWORD PTR [ecx+96]
	cmp	DWORD PTR [ecx+100], eax
	jle	SHORT $LN3@prev_selec
	mov	DWORD PTR [ecx+100], eax
$LN3@prev_selec:

; 77   : }

	ret	0
?prev_selected_tip@CConsole@@IAEXXZ ENDP		; CConsole::prev_selected_tip
_TEXT	ENDS
PUBLIC	?reset_cmd_history_idx@CConsole@@IAEXXZ		; CConsole::reset_cmd_history_idx
; Function compile flags: /Ogtpy
;	COMDAT ?reset_cmd_history_idx@CConsole@@IAEXXZ
_TEXT	SEGMENT
?reset_cmd_history_idx@CConsole@@IAEXXZ PROC		; CConsole::reset_cmd_history_idx, COMDAT
; _this$ = ecx

; 45   : 	m_cmd_history_idx = -1;

	mov	DWORD PTR [ecx+56], -1

; 46   : }

	ret	0
?reset_cmd_history_idx@CConsole@@IAEXXZ ENDP		; CConsole::reset_cmd_history_idx
_TEXT	ENDS
PUBLIC	?next_cmd_history_idx@CConsole@@IAEXXZ		; CConsole::next_cmd_history_idx
; Function compile flags: /Ogtpy
;	COMDAT ?next_cmd_history_idx@CConsole@@IAEXXZ
_TEXT	SEGMENT
?next_cmd_history_idx@CConsole@@IAEXXZ PROC		; CConsole::next_cmd_history_idx, COMDAT
; _this$ = ecx

; 27   : 	--m_cmd_history_idx;

	add	DWORD PTR [ecx+56], -1

; 28   : 	if ( m_cmd_history_idx < 0 )

	jns	SHORT $LN1@next_cmd_h

; 29   : 	{
; 30   : 		m_cmd_history_idx = 0;

	mov	DWORD PTR [ecx+56], 0
$LN1@next_cmd_h:

; 31   : 	}
; 32   : }

	ret	0
?next_cmd_history_idx@CConsole@@IAEXXZ ENDP		; CConsole::next_cmd_history_idx
PUBLIC	?check_next_selected_tip@CConsole@@IAEXXZ	; CConsole::check_next_selected_tip
; Function compile flags: /Ogtpy
;	COMDAT ?check_next_selected_tip@CConsole@@IAEXXZ
_TEXT	SEGMENT
?check_next_selected_tip@CConsole@@IAEXXZ PROC		; CConsole::check_next_selected_tip, COMDAT
; _this$ = ecx

; 55   : {

	push	esi
	mov	esi, ecx
	push	edi

; 56   : 	if ( m_select_tip >= (int)m_tips.size() )

	lea	edi, DWORD PTR [esi+76]
	mov	ecx, edi
	call	?size@?$_Impl_vector@UTipString@@V?$xalloc@UTipString@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<TipString,xalloc<TipString> >::size
	cmp	DWORD PTR [esi+96], eax
	jl	SHORT $LN3@check_next

; 57   : 	{
; 58   : 		m_select_tip = m_tips.size() - 1;

	mov	ecx, edi
	call	?size@?$_Impl_vector@UTipString@@V?$xalloc@UTipString@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<TipString,xalloc<TipString> >::size
	sub	eax, 1
	mov	DWORD PTR [esi+96], eax
$LN3@check_next:

; 59   : 	}
; 60   : 
; 61   : 	int sel_dif = m_select_tip - VIEW_TIPS_COUNT + 1;

	mov	eax, DWORD PTR [esi+96]
	sub	eax, 13					; 0000000dH

; 62   : 	if ( sel_dif < 0 )

	jns	SHORT $LN2@check_next

; 63   : 	{
; 64   : 		sel_dif = 0;

	xor	eax, eax
$LN2@check_next:

; 65   : 	}
; 66   : 
; 67   : 	if ( sel_dif > m_start_tip )

	cmp	eax, DWORD PTR [esi+100]
	jle	SHORT $LN1@check_next

; 68   : 	{
; 69   : 		m_start_tip = sel_dif;

	mov	DWORD PTR [esi+100], eax
$LN1@check_next:
	pop	edi
	pop	esi

; 70   : 	}
; 71   : }

	ret	0
?check_next_selected_tip@CConsole@@IAEXXZ ENDP		; CConsole::check_next_selected_tip
_TEXT	ENDS
PUBLIC	?next_selected_tip@CConsole@@IAEXXZ		; CConsole::next_selected_tip
; Function compile flags: /Ogtpy
;	COMDAT ?next_selected_tip@CConsole@@IAEXXZ
_TEXT	SEGMENT
?next_selected_tip@CConsole@@IAEXXZ PROC		; CConsole::next_selected_tip, COMDAT
; _this$ = ecx

; 49   : {

	push	esi
	mov	esi, ecx

; 50   : 	++m_select_tip;

	add	DWORD PTR [esi+96], 1
	push	edi

; 51   : 	check_next_selected_tip();

	lea	edi, DWORD PTR [esi+76]
	mov	ecx, edi
	call	?size@?$_Impl_vector@UTipString@@V?$xalloc@UTipString@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<TipString,xalloc<TipString> >::size
	cmp	DWORD PTR [esi+96], eax
	jl	SHORT $LN5@next_selec
	mov	ecx, edi
	call	?size@?$_Impl_vector@UTipString@@V?$xalloc@UTipString@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<TipString,xalloc<TipString> >::size
	sub	eax, 1
	mov	DWORD PTR [esi+96], eax
$LN5@next_selec:
	mov	eax, DWORD PTR [esi+96]
	sub	eax, 13					; 0000000dH
	jns	SHORT $LN4@next_selec
	xor	eax, eax
$LN4@next_selec:
	cmp	eax, DWORD PTR [esi+100]
	jle	SHORT $LN3@next_selec
	mov	DWORD PTR [esi+100], eax
$LN3@next_selec:
	pop	edi
	pop	esi

; 52   : }

	ret	0
?next_selected_tip@CConsole@@IAEXXZ ENDP		; CConsole::next_selected_tip
_TEXT	ENDS
PUBLIC	?prev_cmd_history_idx@CConsole@@IAEXXZ		; CConsole::prev_cmd_history_idx
; Function compile flags: /Ogtpy
;	COMDAT ?prev_cmd_history_idx@CConsole@@IAEXXZ
_TEXT	SEGMENT
?prev_cmd_history_idx@CConsole@@IAEXXZ PROC		; CConsole::prev_cmd_history_idx, COMDAT
; _this$ = ecx

; 36   : 	++m_cmd_history_idx;

	add	DWORD PTR [ecx+56], 1

; 37   : 	if ( m_cmd_history_idx >= (int)m_cmd_history.size() )

	mov	edx, DWORD PTR [ecx+44]
	sub	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [ecx+56]
	sar	edx, 2
	cmp	eax, edx
	jl	SHORT $LN1@prev_cmd_h

; 38   : 	{
; 39   : 		m_cmd_history_idx = m_cmd_history.size() - 1;

	mov	eax, DWORD PTR [ecx+44]
	sub	eax, DWORD PTR [ecx+40]
	sar	eax, 2
	sub	eax, 1
	mov	DWORD PTR [ecx+56], eax
$LN1@prev_cmd_h:

; 40   : 	}
; 41   : }

	ret	0
?prev_cmd_history_idx@CConsole@@IAEXXZ ENDP		; CConsole::prev_cmd_history_idx
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
;	COMDAT ??$_Destroy@Vshared_str@@@stlp_std@@YAXPAVshared_str@@@Z
_TEXT	SEGMENT
??$_Destroy@Vshared_str@@@stlp_std@@YAXPAVshared_str@@@Z PROC ; stlp_std::_Destroy<shared_str>, COMDAT
; ___pointer$ = ecx

; 60   : #if defined (_STLP_MSVC) && (_STLP_MSVC <= 1010)
; 61   :   __pointer;
; 62   : #endif
; 63   :   typedef typename __type_traits<_Tp>::has_trivial_destructor _Trivial_destructor;
; 64   :   __destroy_aux(__pointer, _Trivial_destructor());

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN10@Destroy@3
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN10@Destroy@3
	mov	DWORD PTR [ecx], 0
$LN10@Destroy@3:

; 65   : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 66   :   memset(__REINTERPRET_CAST(char*, __pointer), _STLP_SHRED_BYTE, sizeof(_Tp));
; 67   : #endif
; 68   : }

	ret	0
??$_Destroy@Vshared_str@@@stlp_std@@YAXPAVshared_str@@@Z ENDP ; stlp_std::_Destroy<shared_str>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
;	COMDAT ?_M_erase@?$_Impl_vector@Vshared_str@@V?$xalloc@Vshared_str@@@@@priv@stlp_std@@AAEPAVshared_str@@PAV4@ABU__false_type@3@@Z
_TEXT	SEGMENT
$T433635 = -1						; size = 1
?_M_erase@?$_Impl_vector@Vshared_str@@V?$xalloc@Vshared_str@@@@@priv@stlp_std@@AAEPAVshared_str@@PAV4@ABU__false_type@3@@Z PROC ; stlp_std::priv::_Impl_vector<shared_str,xalloc<shared_str> >::_M_erase, COMDAT
; _this$ = eax
; ___pos$ = edi

; 548  :   iterator _M_erase(iterator __pos, const __false_type& /*_Movable*/) {

	push	ecx
	push	esi
	mov	esi, eax

; 549  :     if (__pos + 1 != end())

	mov	eax, DWORD PTR [esi+4]
	lea	ecx, DWORD PTR [edi+4]
	cmp	ecx, eax
	je	SHORT $LN1@M_erase@36

; 550  :       _STLP_PRIV __copy_ptrs(__pos + 1, this->_M_finish, __pos, _TrivialCopy());

	lea	edx, DWORD PTR $T433635[esp+8]
	push	edx
	push	edi
	push	eax
	push	ecx
	mov	BYTE PTR $T433635[esp+24], 0
	call	??$__copy_ptrs@PAVshared_str@@PAV1@@priv@stlp_std@@YAPAVshared_str@@PAV2@00ABU__false_type@1@@Z ; stlp_std::priv::__copy_ptrs<shared_str *,shared_str *>
	add	esp, 16					; 00000010H
$LN1@M_erase@36:

; 551  :     --this->_M_finish;

	add	DWORD PTR [esi+4], -4			; fffffffcH
	mov	esi, DWORD PTR [esi+4]

; 552  :     _STLP_STD::_Destroy(this->_M_finish);

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN25@M_erase@36
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax], 0

; 553  :     return __pos;

	mov	eax, edi
	jne	SHORT $LN15@M_erase@36

; 552  :     _STLP_STD::_Destroy(this->_M_finish);

	mov	DWORD PTR [esi], 0
	pop	esi

; 554  :   }

	pop	ecx
	ret	0
$LN25@M_erase@36:

; 553  :     return __pos;

	mov	eax, edi

; 552  :     _STLP_STD::_Destroy(this->_M_finish);

$LN15@M_erase@36:
	pop	esi

; 554  :   }

	pop	ecx
	ret	0
?_M_erase@?$_Impl_vector@Vshared_str@@V?$xalloc@Vshared_str@@@@@priv@stlp_std@@AAEPAVshared_str@@PAV4@ABU__false_type@3@@Z ENDP ; stlp_std::priv::_Impl_vector<shared_str,xalloc<shared_str> >::_M_erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?erase@?$_Impl_vector@Vshared_str@@V?$xalloc@Vshared_str@@@@@priv@stlp_std@@QAEPAVshared_str@@PAV4@@Z
_TEXT	SEGMENT
$T433809 = -1						; size = 1
?erase@?$_Impl_vector@Vshared_str@@V?$xalloc@Vshared_str@@@@@priv@stlp_std@@QAEPAVshared_str@@PAV4@@Z PROC ; stlp_std::priv::_Impl_vector<shared_str,xalloc<shared_str> >::erase, COMDAT
; _this$ = eax
; ___pos$ = edi

; 586  :   iterator erase(iterator __pos) {

	push	ecx
	push	esi
	mov	esi, eax

; 587  :     return _M_erase(__pos, _Movable());

	mov	eax, DWORD PTR [esi+4]
	lea	ecx, DWORD PTR [edi+4]
	cmp	ecx, eax
	je	SHORT $LN3@erase@55
	lea	edx, DWORD PTR $T433809[esp+8]
	push	edx
	push	edi
	push	eax
	push	ecx
	mov	BYTE PTR $T433809[esp+24], 0
	call	??$__copy_ptrs@PAVshared_str@@PAV1@@priv@stlp_std@@YAPAVshared_str@@PAV2@00ABU__false_type@1@@Z ; stlp_std::priv::__copy_ptrs<shared_str *,shared_str *>
	add	esp, 16					; 00000010H
$LN3@erase@55:
	add	DWORD PTR [esi+4], -4			; fffffffcH
	mov	esi, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN27@erase@55
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax], 0
	mov	eax, edi
	jne	SHORT $LN17@erase@55
	mov	DWORD PTR [esi], 0
	pop	esi

; 588  :   }

	pop	ecx
	ret	0
$LN27@erase@55:

; 587  :     return _M_erase(__pos, _Movable());

	mov	eax, edi
$LN17@erase@55:
	pop	esi

; 588  :   }

	pop	ecx
	ret	0
?erase@?$_Impl_vector@Vshared_str@@V?$xalloc@Vshared_str@@@@@priv@stlp_std@@QAEPAVshared_str@@PAV4@@Z ENDP ; stlp_std::priv::_Impl_vector<shared_str,xalloc<shared_str> >::erase
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?erase@?$vector@Vshared_str@@V?$xalloc@Vshared_str@@@@@stlp_std@@QAEPAVshared_str@@PAV3@@Z
_TEXT	SEGMENT
$T433953 = -1						; size = 1
?erase@?$vector@Vshared_str@@V?$xalloc@Vshared_str@@@@@stlp_std@@QAEPAVshared_str@@PAV3@@Z PROC ; stlp_std::vector<shared_str,xalloc<shared_str> >::erase, COMDAT
; _this$ = ecx
; ___pos$ = eax

; 206  :   {return cast_traits::to_value_type_ptr(_M_impl.erase(cast_traits::to_storage_type_ptr(__pos)));}

	push	ecx
	push	esi
	push	edi
	push	eax
	mov	esi, ecx
	call	?to_storage_type_ptr@?$_CastTraits@Vshared_str@@V1@@priv@stlp_std@@SAPAVshared_str@@PAV4@@Z ; stlp_std::priv::_CastTraits<shared_str,shared_str>::to_storage_type_ptr
	mov	edi, eax
	mov	eax, DWORD PTR [esi+4]
	lea	ecx, DWORD PTR [edi+4]
	add	esp, 4
	cmp	ecx, eax
	je	SHORT $LN7@erase@56
	lea	edx, DWORD PTR $T433953[esp+12]
	push	edx
	push	edi
	push	eax
	push	ecx
	mov	BYTE PTR $T433953[esp+28], 0
	call	??$__copy_ptrs@PAVshared_str@@PAV1@@priv@stlp_std@@YAPAVshared_str@@PAV2@00ABU__false_type@1@@Z ; stlp_std::priv::__copy_ptrs<shared_str *,shared_str *>
	add	esp, 16					; 00000010H
$LN7@erase@56:
	add	DWORD PTR [esi+4], -4			; fffffffcH
	mov	esi, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN21@erase@56
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN21@erase@56
	mov	DWORD PTR [esi], 0
$LN21@erase@56:
	push	edi
	call	?to_value_type_ptr@?$_CastTraits@Vshared_str@@V1@@priv@stlp_std@@SAPAVshared_str@@PAV4@@Z ; stlp_std::priv::_CastTraits<shared_str,shared_str>::to_value_type_ptr
	add	esp, 4
	pop	edi
	pop	esi
	pop	ecx
	ret	0
?erase@?$vector@Vshared_str@@V?$xalloc@Vshared_str@@@@@stlp_std@@QAEPAVshared_str@@PAV3@@Z ENDP ; stlp_std::vector<shared_str,xalloc<shared_str> >::erase
PUBLIC	?add_cmd_history@CConsole@@IAEXABVshared_str@@@Z ; CConsole::add_cmd_history
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\xr_ioconsole_control.cpp
;	COMDAT ?add_cmd_history@CConsole@@IAEXABVshared_str@@@Z
_TEXT	SEGMENT
_str$ = 8						; size = 4
?add_cmd_history@CConsole@@IAEXABVshared_str@@@Z PROC	; CConsole::add_cmd_history, COMDAT
; _this$ = ecx

; 13   : {

	push	edi
	mov	edi, ecx

; 14   : 	if ( str.size() == 0 )

	mov	ecx, DWORD PTR _str$[esp]
	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN1@add_cmd_hi
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@add_cmd_hi
	push	esi

; 15   : 	{
; 16   : 		return;
; 17   : 	}
; 18   : 	m_cmd_history.push_back( str );

	lea	esi, DWORD PTR [edi+40]
	push	ecx
	mov	ecx, esi
	call	?push_back@?$vector@Vshared_str@@V?$xalloc@Vshared_str@@@@@stlp_std@@QAEXABVshared_str@@@Z ; stlp_std::vector<shared_str,xalloc<shared_str> >::push_back

; 19   : 	if ( m_cmd_history.size() > m_cmd_history_max )

	mov	eax, DWORD PTR [esi+4]
	sub	eax, DWORD PTR [esi]
	sar	eax, 2
	cmp	eax, DWORD PTR [edi+52]
	jbe	SHORT $LN25@add_cmd_hi

; 20   : 	{
; 21   : 		m_cmd_history.erase( m_cmd_history.begin() );

	mov	ecx, esi
	call	?begin@?$vector@Vshared_str@@V?$xalloc@Vshared_str@@@@@stlp_std@@QAEPAVshared_str@@XZ ; stlp_std::vector<shared_str,xalloc<shared_str> >::begin
	mov	ecx, esi
	call	?erase@?$vector@Vshared_str@@V?$xalloc@Vshared_str@@@@@stlp_std@@QAEPAVshared_str@@PAV3@@Z ; stlp_std::vector<shared_str,xalloc<shared_str> >::erase
$LN25@add_cmd_hi:
	pop	esi
$LN1@add_cmd_hi:
	pop	edi

; 22   : 	}
; 23   : }

	ret	4
?add_cmd_history@CConsole@@IAEXABVshared_str@@@Z ENDP	; CConsole::add_cmd_history
END
