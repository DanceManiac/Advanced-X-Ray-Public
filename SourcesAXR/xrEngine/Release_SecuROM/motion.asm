; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	D:\CLEARSKY\sources\engine\xrEngine\motion.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?LoadMotion@COMotion@@UAE_NPBD@Z		; COMotion::LoadMotion
PUBLIC	?SaveMotion@COMotion@@UAEXPBD@Z			; COMotion::SaveMotion
PUBLIC	?Load@COMotion@@UAE_NAAVIReader@@@Z		; COMotion::Load
PUBLIC	?Save@COMotion@@UAEXAAVIWriter@@@Z		; COMotion::Save
PUBLIC	??_ECOMotion@@UAEPAXI@Z				; COMotion::`vector deleting destructor'
PUBLIC	??_R4COMotion@@6B@				; COMotion::`RTTI Complete Object Locator'
PUBLIC	??_R3COMotion@@8				; COMotion::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2COMotion@@8				; COMotion::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@COMotion@@8			; COMotion::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCOMotion@@@8				; COMotion `RTTI Type Descriptor'
PUBLIC	?Load@CCustomMotion@@UAE_NAAVIReader@@@Z	; CCustomMotion::Load
PUBLIC	?Save@CCustomMotion@@UAEXAAVIWriter@@@Z		; CCustomMotion::Save
PUBLIC	??_ECCustomMotion@@UAEPAXI@Z			; CCustomMotion::`vector deleting destructor'
PUBLIC	??_R4CCustomMotion@@6B@				; CCustomMotion::`RTTI Complete Object Locator'
PUBLIC	??_R3CCustomMotion@@8				; CCustomMotion::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCustomMotion@@8				; CCustomMotion::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCustomMotion@@8			; CCustomMotion::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCCustomMotion@@@8			; CCustomMotion `RTTI Type Descriptor'
PUBLIC	??$xr_new@VCEnvelope@@PAV1@@@YAPAVCEnvelope@@ABQAV0@@Z ; xr_new<CEnvelope,CEnvelope *>
PUBLIC	??R?$xr_special_free@$00VCEnvelope@@@@QAEXAAPAVCEnvelope@@@Z ; xr_special_free<1,CEnvelope>::operator()
PUBLIC	??$xr_delete@VCEnvelope@@@@YAXAAPAVCEnvelope@@@Z ; xr_delete<CEnvelope>
PUBLIC	??0?$destructor@VIReader@@@@QAE@PAVIReader@@@Z	; destructor<IReader>::destructor<IReader>
PUBLIC	??R?$xr_special_free@$00VIReader@@@@QAEXAAPAVIReader@@@Z ; xr_special_free<1,IReader>::operator()
PUBLIC	??$xr_delete@VIReader@@@@YAXAAPAVIReader@@@Z	; xr_delete<IReader>
PUBLIC	??1?$destructor@VIReader@@@@QAE@XZ		; destructor<IReader>::~destructor<IReader>
PUBLIC	??R?$destructor@VIReader@@@@QAEAAVIReader@@XZ	; destructor<IReader>::operator()
PUBLIC	??$xr_new@VCEnvelope@@@@YAPAVCEnvelope@@XZ	; xr_new<CEnvelope>
PUBLIC	??_C@_0BL@LHLAEJBA@?$CBCan?8t?5save?5object?5motion?3?$AA@ ; `string'
PUBLIC	??_C@_0BF@LPEKCENH@COMotion?3?3LoadMotion?$AA@	; `string'
PUBLIC	??_C@_0CP@DJKKALEL@D?3?2CLEARSKY?2sources?2engine?2xrEng@ ; `string'
PUBLIC	??_C@_0BN@CJBDDDEE@F?$CI?$CJ?4find_chunk?$CIEOBJ_OMOTION?$CJ?$AA@ ; `string'
PUBLIC	??_7CCustomMotion@@6B@				; CCustomMotion::`vftable'
PUBLIC	??_7COMotion@@6B@				; COMotion::`vftable'
EXTRN	__imp_?w_u32@IWriter@@QAEXI@Z:PROC
EXTRN	__imp_?w_stringZ@IWriter@@QAEXAAVshared_str@@@Z:PROC
EXTRN	__imp_?r_stringZ@IReader@@QAEXAAVshared_str@@@Z:PROC
EXTRN	__imp_?open_chunk@IWriter@@QAEXI@Z:PROC
EXTRN	__imp_?close_chunk@IWriter@@QAEXXZ:PROC
EXTRN	__imp_??0CMemoryWriter@@QAE@XZ:PROC
EXTRN	__imp_??1CMemoryWriter@@UAE@XZ:PROC
EXTRN	__imp_?save_to@CMemoryWriter@@QAE_NPBD@Z:PROC
EXTRN	__imp_?Log@@YAXPBD0@Z:PROC
;	COMDAT ?ignore_always@?3??LoadMotion@COMotion@@UAE_NPBD@Z@4_NA
_BSS	SEGMENT
?ignore_always@?3??LoadMotion@COMotion@@UAE_NPBD@Z@4_NA DB 01H DUP (?) ; `COMotion::LoadMotion'::`4'::ignore_always
;	COMDAT ??_7COMotion@@6B@
CONST	SEGMENT
??_7COMotion@@6B@ DD FLAT:??_R4COMotion@@6B@		; COMotion::`vftable'
	DD	FLAT:??_ECOMotion@@UAEPAXI@Z
	DD	FLAT:?Save@COMotion@@UAEXAAVIWriter@@@Z
	DD	FLAT:?Load@COMotion@@UAE_NAAVIReader@@@Z
	DD	FLAT:?SaveMotion@COMotion@@UAEXPBD@Z
	DD	FLAT:?LoadMotion@COMotion@@UAE_NPBD@Z
CONST	ENDS
;	COMDAT ??_R4COMotion@@6B@
rdata$r	SEGMENT
??_R4COMotion@@6B@ DD 00H				; COMotion::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCOMotion@@@8
	DD	FLAT:??_R3COMotion@@8
rdata$r	ENDS
;	COMDAT ??_R3COMotion@@8
rdata$r	SEGMENT
??_R3COMotion@@8 DD 00H					; COMotion::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2COMotion@@8
rdata$r	ENDS
;	COMDAT ??_R2COMotion@@8
rdata$r	SEGMENT
??_R2COMotion@@8 DD FLAT:??_R1A@?0A@EA@COMotion@@8	; COMotion::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CCustomMotion@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@COMotion@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@COMotion@@8 DD FLAT:??_R0?AVCOMotion@@@8	; COMotion::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3COMotion@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCOMotion@@@8
_DATA	SEGMENT
??_R0?AVCOMotion@@@8 DD FLAT:??_7type_info@@6B@		; COMotion `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCOMotion@@', 00H
_DATA	ENDS
;	COMDAT ??_7CCustomMotion@@6B@
CONST	SEGMENT
??_7CCustomMotion@@6B@ DD FLAT:??_R4CCustomMotion@@6B@	; CCustomMotion::`vftable'
	DD	FLAT:??_ECCustomMotion@@UAEPAXI@Z
	DD	FLAT:?Save@CCustomMotion@@UAEXAAVIWriter@@@Z
	DD	FLAT:?Load@CCustomMotion@@UAE_NAAVIReader@@@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_R4CCustomMotion@@6B@
rdata$r	SEGMENT
??_R4CCustomMotion@@6B@ DD 00H				; CCustomMotion::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCustomMotion@@@8
	DD	FLAT:??_R3CCustomMotion@@8
rdata$r	ENDS
;	COMDAT ??_R3CCustomMotion@@8
rdata$r	SEGMENT
??_R3CCustomMotion@@8 DD 00H				; CCustomMotion::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCustomMotion@@8
rdata$r	ENDS
;	COMDAT ??_R2CCustomMotion@@8
rdata$r	SEGMENT
??_R2CCustomMotion@@8 DD FLAT:??_R1A@?0A@EA@CCustomMotion@@8 ; CCustomMotion::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCustomMotion@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCustomMotion@@8 DD FLAT:??_R0?AVCCustomMotion@@@8 ; CCustomMotion::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCustomMotion@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCustomMotion@@@8
_DATA	SEGMENT
??_R0?AVCCustomMotion@@@8 DD FLAT:??_7type_info@@6B@	; CCustomMotion `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCustomMotion@@', 00H
_DATA	ENDS
;	COMDAT ??_C@_0BN@CJBDDDEE@F?$CI?$CJ?4find_chunk?$CIEOBJ_OMOTION?$CJ?$AA@
CONST	SEGMENT
??_C@_0BN@CJBDDDEE@F?$CI?$CJ?4find_chunk?$CIEOBJ_OMOTION?$CJ?$AA@ DB 'F()'
	DB	'.find_chunk(EOBJ_OMOTION)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@DJKKALEL@D?3?2CLEARSKY?2sources?2engine?2xrEng@
CONST	SEGMENT
??_C@_0CP@DJKKALEL@D?3?2CLEARSKY?2sources?2engine?2xrEng@ DB 'D:\CLEARSKY'
	DB	'\sources\engine\xrEngine\motion.cpp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LPEKCENH@COMotion?3?3LoadMotion?$AA@
CONST	SEGMENT
??_C@_0BF@LPEKCENH@COMotion?3?3LoadMotion?$AA@ DB 'COMotion::LoadMotion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LHLAEJBA@?$CBCan?8t?5save?5object?5motion?3?$AA@
CONST	SEGMENT
??_C@_0BL@LHLAEJBA@?$CBCan?8t?5save?5object?5motion?3?$AA@ DB '!Can''t sa'
	DB	've object motion:', 00H			; `string'
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrmemory_subst_msvc.h
;	COMDAT ??R?$xr_special_free@$00VIReader@@@@QAEXAAPAVIReader@@@Z
_TEXT	SEGMENT
??R?$xr_special_free@$00VIReader@@@@QAEXAAPAVIReader@@@Z PROC ; xr_special_free<1,IReader>::operator(), COMDAT
; _ptr$ = esi

; 132  : 		void*	_real_ptr	= dynamic_cast<void*>(ptr);

	mov	eax, DWORD PTR [esi]
	push	edi
	push	eax
	call	___RTCastToVoid

; 133  : 		ptr->~T			();

	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx]
	add	esp, 4
	mov	edi, eax
	mov	eax, DWORD PTR [edx]
	push	0
	call	eax

; 134  : 		Memory.mem_free	(_real_ptr);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	pop	edi

; 135  : 	}

	ret	0
??R?$xr_special_free@$00VIReader@@@@QAEXAAPAVIReader@@@Z ENDP ; xr_special_free<1,IReader>::operator()
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??R?$xr_special_free@$00VCEnvelope@@@@QAEXAAPAVCEnvelope@@@Z
_TEXT	SEGMENT
??R?$xr_special_free@$00VCEnvelope@@@@QAEXAAPAVCEnvelope@@@Z PROC ; xr_special_free<1,CEnvelope>::operator(), COMDAT
; _ptr$ = esi

; 132  : 		void*	_real_ptr	= dynamic_cast<void*>(ptr);

	mov	eax, DWORD PTR [esi]
	push	edi
	push	eax
	call	___RTCastToVoid

; 133  : 		ptr->~T			();

	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx]
	add	esp, 4
	mov	edi, eax
	mov	eax, DWORD PTR [edx]
	push	0
	call	eax

; 134  : 		Memory.mem_free	(_real_ptr);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	pop	edi

; 135  : 	}

	ret	0
??R?$xr_special_free@$00VCEnvelope@@@@QAEXAAPAVCEnvelope@@@Z ENDP ; xr_special_free<1,CEnvelope>::operator()
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$xr_delete@VIReader@@@@YAXAAPAVIReader@@@Z
_TEXT	SEGMENT
??$xr_delete@VIReader@@@@YAXAAPAVIReader@@@Z PROC	; xr_delete<IReader>, COMDAT
; _ptr$ = esi

; 151  : 	if (ptr) 

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN1@xr_delete@8
	push	edi

; 152  : 	{
; 153  : 		xr_special_free<is_polymorphic<T>::result,T>()(ptr);

	push	eax
	call	___RTCastToVoid
	mov	ecx, DWORD PTR [esi]
	mov	edi, eax
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	add	esp, 4
	push	0
	call	edx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z

; 154  : 		ptr = NULL;

	mov	DWORD PTR [esi], 0
	pop	edi
$LN1@xr_delete@8:

; 155  : 	}
; 156  : }

	ret	0
??$xr_delete@VIReader@@@@YAXAAPAVIReader@@@Z ENDP	; xr_delete<IReader>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$xr_delete@VCEnvelope@@@@YAXAAPAVCEnvelope@@@Z
_TEXT	SEGMENT
??$xr_delete@VCEnvelope@@@@YAXAAPAVCEnvelope@@@Z PROC	; xr_delete<CEnvelope>, COMDAT
; _ptr$ = esi

; 151  : 	if (ptr) 

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN1@xr_delete@9
	push	edi

; 152  : 	{
; 153  : 		xr_special_free<is_polymorphic<T>::result,T>()(ptr);

	push	eax
	call	___RTCastToVoid
	mov	ecx, DWORD PTR [esi]
	mov	edi, eax
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	add	esp, 4
	push	0
	call	edx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z

; 154  : 		ptr = NULL;

	mov	DWORD PTR [esi], 0
	pop	edi
$LN1@xr_delete@9:

; 155  : 	}
; 156  : }

	ret	0
??$xr_delete@VCEnvelope@@@@YAXAAPAVCEnvelope@@@Z ENDP	; xr_delete<CEnvelope>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrcore.h
_TEXT	ENDS
;	COMDAT ??R?$destructor@VIReader@@@@QAEAAVIReader@@XZ
_TEXT	SEGMENT
??R?$destructor@VIReader@@@@QAEAAVIReader@@XZ PROC	; destructor<IReader>::operator(), COMDAT
; _this$ = eax

; 290  : 	{	return *ptr; }

	mov	eax, DWORD PTR [eax]
	ret	0
??R?$destructor@VIReader@@@@QAEAAVIReader@@XZ ENDP	; destructor<IReader>::operator()
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$destructor@VIReader@@@@QAE@XZ
_TEXT	SEGMENT
??1?$destructor@VIReader@@@@QAE@XZ PROC			; destructor<IReader>::~destructor<IReader>, COMDAT
; _this$ = esi

; 288  : 	~destructor()		{ xr_delete(ptr);	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN3@destructor
	push	edi
	push	eax
	call	___RTCastToVoid
	mov	ecx, DWORD PTR [esi]
	mov	edi, eax
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	add	esp, 4
	push	0
	call	edx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi], 0
	pop	edi
$LN3@destructor:
	ret	0
??1?$destructor@VIReader@@@@QAE@XZ ENDP			; destructor<IReader>::~destructor<IReader>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$destructor@VIReader@@@@QAE@PAVIReader@@@Z
_TEXT	SEGMENT
??0?$destructor@VIReader@@@@QAE@PAVIReader@@@Z PROC	; destructor<IReader>::destructor<IReader>, COMDAT
; _this$ = eax
; _p$ = ecx

; 287  : 	destructor(T* p)	{ ptr=p;			}

	mov	DWORD PTR [eax], ecx
	ret	0
??0?$destructor@VIReader@@@@QAE@PAVIReader@@@Z ENDP	; destructor<IReader>::destructor<IReader>
_TEXT	ENDS
PUBLIC	?Set@SAnimParams@@QAEXMMM@Z			; SAnimParams::Set
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\motion.cpp
;	COMDAT ?Set@SAnimParams@@QAEXMMM@Z
_TEXT	SEGMENT
_start_frame$ = 8					; size = 4
_end_frame$ = 12					; size = 4
_fps$ = 16						; size = 4
?Set@SAnimParams@@QAEXMMM@Z PROC			; SAnimParams::Set, COMDAT
; _this$ = eax

; 517  :     min_t=start_frame/fps;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _fps$[esp-4]
	movaps	xmm1, xmm0
	mulss	xmm1, DWORD PTR _start_frame$[esp-4]

; 518  :     max_t=end_frame/fps;

	mulss	xmm0, DWORD PTR _end_frame$[esp-4]
	movss	DWORD PTR [eax+8], xmm1
	movss	DWORD PTR [eax+12], xmm0

; 519  : }

	ret	12					; 0000000cH
?Set@SAnimParams@@QAEXMMM@Z ENDP			; SAnimParams::Set
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?LoadMotion@COMotion@@UAE_NPBD@Z
_TEXT	SEGMENT
_buf$ = 8						; size = 4
?LoadMotion@COMotion@@UAE_NPBD@Z PROC			; COMotion::LoadMotion, COMDAT
; _this$ = ecx

; 105  : 	destructor<IReader>	F(FS.r_open(buf));

	mov	edx, DWORD PTR _buf$[esp-4]
	mov	eax, DWORD PTR __imp_?xr_FS@@3PAVCLocatorAPI@@A
	push	ebx
	push	esi
	push	edi
	push	edx
	mov	edi, ecx
	mov	ecx, DWORD PTR [eax]
	push	0
	call	DWORD PTR __imp_?r_open@CLocatorAPI@@QAEPAVIReader@@PBD0@Z

; 106  : 	R_ASSERT(F().find_chunk(EOBJ_OMOTION));

	cmp	BYTE PTR ?ignore_always@?3??LoadMotion@COMotion@@UAE_NPBD@Z@4_NA, 0
	mov	esi, eax
	jne	SHORT $LN3@LoadMotion
	push	0
	push	4352					; 00001100H
	mov	ecx, esi
	call	DWORD PTR __imp_?find_chunk@IReader@@QAEIIPAH@Z
	test	eax, eax
	jne	SHORT $LN3@LoadMotion
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?3??LoadMotion@COMotion@@UAE_NPBD@Z@4_NA
	push	OFFSET ??_C@_0BF@LPEKCENH@COMotion?3?3LoadMotion?$AA@
	push	106					; 0000006aH
	push	OFFSET ??_C@_0CP@DJKKALEL@D?3?2CLEARSKY?2sources?2engine?2xrEng@
	push	OFFSET ??_C@_0BN@CJBDDDEE@F?$CI?$CJ?4find_chunk?$CIEOBJ_OMOTION?$CJ?$AA@
	call	DWORD PTR __imp_?fail@xrDebug@@QAEXPBD0H0AA_N@Z
$LN3@LoadMotion:

; 107  : 	return Load		(F());

	mov	eax, DWORD PTR [edi]
	mov	edx, DWORD PTR [eax+8]
	push	esi
	mov	ecx, edi
	call	edx
	test	esi, esi
	mov	bl, al
	je	SHORT $LN22@LoadMotion
	push	esi
	call	___RTCastToVoid
	mov	edi, eax
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	add	esp, 4
	push	0
	mov	ecx, esi
	call	edx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN22@LoadMotion:
	pop	edi
	pop	esi
	mov	al, bl
	pop	ebx

; 108  : }

	ret	4
?LoadMotion@COMotion@@UAE_NPBD@Z ENDP			; COMotion::LoadMotion
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?SaveMotion@COMotion@@UAEXPBD@Z
_TEXT	SEGMENT
_F$ = -36						; size = 36
_buf$ = 8						; size = 4
?SaveMotion@COMotion@@UAEXPBD@Z PROC			; COMotion::SaveMotion, COMDAT
; _this$ = ecx

; 94   : void COMotion::SaveMotion(const char* buf){

	sub	esp, 36					; 00000024H
	push	esi
	mov	esi, ecx

; 95   : 	CMemoryWriter	F;

	lea	ecx, DWORD PTR _F$[esp+40]
	call	DWORD PTR __imp_??0CMemoryWriter@@QAE@XZ

; 96   : 	F.open_chunk	(EOBJ_OMOTION);

	push	4352					; 00001100H
	lea	ecx, DWORD PTR _F$[esp+44]
	call	DWORD PTR __imp_?open_chunk@IWriter@@QAEXI@Z

; 97   : 	Save			(F);

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax+4]
	lea	ecx, DWORD PTR _F$[esp+40]
	push	ecx
	mov	ecx, esi
	call	edx

; 98   : 	F.close_chunk	();

	lea	ecx, DWORD PTR _F$[esp+40]
	call	DWORD PTR __imp_?close_chunk@IWriter@@QAEXXZ

; 99   : 	if (!F.save_to(buf)) 

	mov	esi, DWORD PTR _buf$[esp+36]
	push	esi
	lea	ecx, DWORD PTR _F$[esp+44]
	call	DWORD PTR __imp_?save_to@CMemoryWriter@@QAE_NPBD@Z
	test	al, al
	jne	SHORT $LN1@SaveMotion

; 100  :         Log			("!Can't save object motion:",buf);

	push	esi
	push	OFFSET ??_C@_0BL@LHLAEJBA@?$CBCan?8t?5save?5object?5motion?3?$AA@
	call	DWORD PTR __imp_?Log@@YAXPBD0@Z
	add	esp, 8
$LN1@SaveMotion:

; 101  : }

	lea	ecx, DWORD PTR _F$[esp+40]
	call	DWORD PTR __imp_??1CMemoryWriter@@UAE@XZ
	pop	esi
	add	esp, 36					; 00000024H
	ret	4
?SaveMotion@COMotion@@UAEXPBD@Z ENDP			; COMotion::SaveMotion
_TEXT	ENDS
PUBLIC	?Clear@COMotion@@QAEXXZ				; COMotion::Clear
; Function compile flags: /Ogtpy
;	COMDAT ?Clear@COMotion@@QAEXXZ
_TEXT	SEGMENT
?Clear@COMotion@@QAEXXZ PROC				; COMotion::Clear, COMDAT
; _this$ = ecx

; 79   : {

	push	ebx

; 80   : 	for (int ch=0; ch<ctMaxChannel; ch++) xr_delete(envs[ch]);

	mov	ebx, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	push	ebp
	push	esi
	push	edi
	lea	esi, DWORD PTR [ecx+24]
	mov	ebp, 6
$LL3@Clear:
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN2@Clear
	push	eax
	call	___RTCastToVoid
	mov	ecx, DWORD PTR [esi]
	mov	edi, eax
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	add	esp, 4
	push	0
	call	edx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	ebx
	mov	DWORD PTR [esi], 0
$LN2@Clear:
	add	esi, 4
	sub	ebp, 1
	jne	SHORT $LL3@Clear
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 81   : }

	ret	0
?Clear@COMotion@@QAEXXZ ENDP				; COMotion::Clear
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Load@CCustomMotion@@UAE_NAAVIReader@@@Z
_TEXT	SEGMENT
_F$ = 8							; size = 4
?Load@CCustomMotion@@UAE_NAAVIReader@@@Z PROC		; CCustomMotion::Load, COMDAT
; _this$ = ecx

; 47   : {

	push	esi
	mov	esi, ecx
	push	edi

; 48   : 	F.r_stringZ	(name);

	mov	edi, DWORD PTR _F$[esp+4]
	lea	eax, DWORD PTR [esi+20]
	push	eax
	mov	ecx, edi
	call	DWORD PTR __imp_?r_stringZ@IReader@@QAEXAAVshared_str@@@Z

; 49   : 	iFrameStart	= F.r_u32();

	mov	ecx, edi
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ

; 50   : 	iFrameEnd	= F.r_u32();

	mov	ecx, edi
	mov	DWORD PTR [esi+8], eax
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ

; 51   : 	fFPS		= F.r_float();

	mov	ecx, edi
	mov	DWORD PTR [esi+12], eax
	call	DWORD PTR __imp_?r_float@?$IReaderBase@VIReader@@@@QAEMXZ
	fstp	DWORD PTR [esi+16]
	pop	edi

; 52   : 	return true;

	mov	al, 1
	pop	esi

; 53   : }

	ret	4
?Load@CCustomMotion@@UAE_NAAVIReader@@@Z ENDP		; CCustomMotion::Load
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Save@CCustomMotion@@UAEXAAVIWriter@@@Z
_TEXT	SEGMENT
_F$ = 8							; size = 4
?Save@CCustomMotion@@UAEXAAVIWriter@@@Z PROC		; CCustomMotion::Save, COMDAT
; _this$ = ecx

; 36   : {

	push	esi
	mov	esi, ecx
	push	edi

; 37   : #ifdef _LW_EXPORT
; 38   : 	ReplaceSpaceAndLowerCase(name);
; 39   : #endif
; 40   : 	F.w_stringZ	(name);

	mov	edi, DWORD PTR _F$[esp+4]
	lea	eax, DWORD PTR [esi+20]
	push	eax
	mov	ecx, edi
	call	DWORD PTR __imp_?w_stringZ@IWriter@@QAEXAAVshared_str@@@Z

; 41   : 	F.w_u32		(iFrameStart);

	mov	ecx, DWORD PTR [esi+8]
	push	ecx
	mov	ecx, edi
	call	DWORD PTR __imp_?w_u32@IWriter@@QAEXI@Z

; 42   : 	F.w_u32		(iFrameEnd);

	mov	edx, DWORD PTR [esi+12]
	push	edx
	mov	ecx, edi
	call	DWORD PTR __imp_?w_u32@IWriter@@QAEXI@Z

; 43   : 	F.w_float	(fFPS);

	fld	DWORD PTR [esi+16]
	push	ecx
	mov	ecx, edi
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_?w_float@IWriter@@QAEXM@Z
	pop	edi
	pop	esi

; 44   : }

	ret	4
?Save@CCustomMotion@@UAEXAAVIWriter@@@Z ENDP		; CCustomMotion::Save
_TEXT	ENDS
PUBLIC	?SetParam@CCustomMotion@@QAEXHHM@Z		; CCustomMotion::SetParam
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\motion.h
;	COMDAT ?SetParam@CCustomMotion@@QAEXHHM@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_e$ = 12						; size = 4
_fps$ = 16						; size = 4
?SetParam@CCustomMotion@@QAEXHHM@Z PROC			; CCustomMotion::SetParam, COMDAT
; _this$ = ecx

; 70   : 	void			SetParam		(int s, int e, float fps){iFrameStart=s; iFrameEnd=e; fFPS=fps;}

	mov	eax, DWORD PTR _s$[esp-4]
	mov	edx, DWORD PTR _e$[esp-4]
	movss	xmm0, DWORD PTR _fps$[esp-4]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], edx
	movss	DWORD PTR [ecx+16], xmm0
	ret	12					; 0000000cH
?SetParam@CCustomMotion@@QAEXHHM@Z ENDP			; CCustomMotion::SetParam
_TEXT	ENDS
PUBLIC	?Length@CCustomMotion@@QAEHXZ			; CCustomMotion::Length
; Function compile flags: /Ogtpy
;	COMDAT ?Length@CCustomMotion@@QAEHXZ
_TEXT	SEGMENT
?Length@CCustomMotion@@QAEHXZ PROC			; CCustomMotion::Length, COMDAT
; _this$ = ecx

; 68   :     int				Length			()				{return iFrameEnd-iFrameStart+1;}

	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [ecx+8]
	add	eax, 1
	ret	0
?Length@CCustomMotion@@QAEHXZ ENDP			; CCustomMotion::Length
_TEXT	ENDS
PUBLIC	?FPS@CCustomMotion@@QAEMXZ			; CCustomMotion::FPS
; Function compile flags: /Ogtpy
;	COMDAT ?FPS@CCustomMotion@@QAEMXZ
_TEXT	SEGMENT
?FPS@CCustomMotion@@QAEMXZ PROC				; CCustomMotion::FPS, COMDAT
; _this$ = ecx

; 67   :     float			FPS				()				{return fFPS;}

	fld	DWORD PTR [ecx+16]
	ret	0
?FPS@CCustomMotion@@QAEMXZ ENDP				; CCustomMotion::FPS
_TEXT	ENDS
PUBLIC	?FrameEnd@CCustomMotion@@QAEHXZ			; CCustomMotion::FrameEnd
; Function compile flags: /Ogtpy
;	COMDAT ?FrameEnd@CCustomMotion@@QAEHXZ
_TEXT	SEGMENT
?FrameEnd@CCustomMotion@@QAEHXZ PROC			; CCustomMotion::FrameEnd, COMDAT
; _this$ = ecx

; 66   :     int				FrameEnd		()				{return iFrameEnd;}

	mov	eax, DWORD PTR [ecx+12]
	ret	0
?FrameEnd@CCustomMotion@@QAEHXZ ENDP			; CCustomMotion::FrameEnd
_TEXT	ENDS
PUBLIC	?FrameStart@CCustomMotion@@QAEHXZ		; CCustomMotion::FrameStart
; Function compile flags: /Ogtpy
;	COMDAT ?FrameStart@CCustomMotion@@QAEHXZ
_TEXT	SEGMENT
?FrameStart@CCustomMotion@@QAEHXZ PROC			; CCustomMotion::FrameStart, COMDAT
; _this$ = ecx

; 65   :     int				FrameStart		()				{return iFrameStart;}

	mov	eax, DWORD PTR [ecx+8]
	ret	0
?FrameStart@CCustomMotion@@QAEHXZ ENDP			; CCustomMotion::FrameStart
PUBLIC	?Update@SAnimParams@@QAEXMM_N@Z			; SAnimParams::Update
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\motion.cpp
;	COMDAT ?Update@SAnimParams@@QAEXMM_N@Z
_TEXT	SEGMENT
_speed$ = 8						; size = 4
_a$245991 = 12						; size = 4
_loop$ = 12						; size = 1
?Update@SAnimParams@@QAEXMM_N@Z PROC			; SAnimParams::Update, COMDAT
; _this$ = edi
; _dt$ = xmm0s

; 530  : 	if (!bPlay) return;

	cmp	DWORD PTR [edi+16], 0
	je	$LN3@Update

; 531  : 	bWrapped	= false;
; 532  : 
; 533  : 	t_current	+=speed*dt;

	mulss	xmm0, DWORD PTR _speed$[esp-4]
	addss	xmm0, DWORD PTR [edi]

; 534  :     tmp 		= t_current;
; 535  : 
; 536  :     if (t_current>max_t)

	movss	xmm1, DWORD PTR [edi+12]
	comiss	xmm0, xmm1
	mov	DWORD PTR [edi+20], 0
	movss	DWORD PTR [edi], xmm0
	movss	DWORD PTR [edi+4], xmm0
	jbe	$LN3@Update

; 537  :     {
; 538  : 		bWrapped= true;
; 539  : 		if (loop)

	cmp	BYTE PTR _loop$[esp-4], 0
	mov	DWORD PTR [edi+20], 1
	je	$LN2@Update

; 540  :         {
; 541  :         	float len = max_t-min_t;

	movss	xmm2, DWORD PTR [edi+8]
	subss	xmm1, xmm2

; 542  :         	float k = float(iFloor((t_current-min_t)/len));

	movaps	xmm3, xmm0
	subss	xmm3, xmm2
	push	esi
	divss	xmm3, xmm1
	movss	DWORD PTR _a$245991[esp], xmm3
	mov	esi, DWORD PTR _a$245991[esp]
	mov	eax, esi
	sar	eax, 23					; 00000017H
	and	eax, 255				; 000000ffH
	mov	edx, esi
	or	edx, -8388608				; ff800000H
	shl	edx, 8
	mov	ecx, 158				; 0000009eH
	sub	ecx, eax
	shr	edx, cl
	sub	ecx, 96					; 00000060H
	mov	eax, 1
	shl	eax, cl
	sub	eax, 1
	sar	eax, 8
	and	eax, esi
	neg	eax
	sbb	eax, eax
	sar	esi, 31					; 0000001fH
	add	eax, 1
	and	eax, esi
	add	ecx, 64					; 00000040H
	sub	edx, eax
	sar	ecx, 31					; 0000001fH
	and	edx, ecx
	xor	edx, esi

; 543  :         	t_current	= t_current-k*len;

	cvtsi2ss xmm2, edx
	mulss	xmm2, xmm1
	subss	xmm0, xmm2
	movss	DWORD PTR [edi], xmm0

; 546  : 
; 547  :     tmp 		= t_current;

	fld	DWORD PTR [edi]
	fstp	DWORD PTR [edi+4]
	pop	esi

; 548  : 	}
; 549  : }

	ret	8
$LN2@Update:

; 544  :         }else
; 545  :             t_current   = max_t;

	movss	DWORD PTR [edi], xmm1

; 546  : 
; 547  :     tmp 		= t_current;

	fld	DWORD PTR [edi]
	fstp	DWORD PTR [edi+4]
$LN3@Update:

; 548  : 	}
; 549  : }

	ret	8
?Update@SAnimParams@@QAEXMM_N@Z ENDP			; SAnimParams::Update
_TEXT	ENDS
PUBLIC	?Set@SAnimParams@@QAEXPAVCCustomMotion@@@Z	; SAnimParams::Set
; Function compile flags: /Ogtpy
;	COMDAT ?Set@SAnimParams@@QAEXPAVCCustomMotion@@@Z
_TEXT	SEGMENT
?Set@SAnimParams@@QAEXPAVCCustomMotion@@@Z PROC		; SAnimParams::Set, COMDAT
; _this$ = eax
; _M$ = ecx

; 523  :     Set((float)M->FrameStart(),(float)M->FrameEnd(),M->FPS());

	movss	xmm1, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR [ecx+12]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, xmm0
	movss	DWORD PTR [eax+8], xmm1
	cvtsi2ss xmm1, edx
	mulss	xmm1, xmm0

; 524  : 	t_current	= min_t;

	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [eax+12], xmm1
	movss	DWORD PTR [eax], xmm0

; 525  :     tmp 		= t_current;

	movss	DWORD PTR [eax+4], xmm0

; 526  : //    bPlay=true;
; 527  : }

	ret	0
?Set@SAnimParams@@QAEXPAVCCustomMotion@@@Z ENDP		; SAnimParams::Set
_TEXT	ENDS
PUBLIC	?Name@CCustomMotion@@QAEPBDXZ			; CCustomMotion::Name
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\motion.h
;	COMDAT ?Name@CCustomMotion@@QAEPBDXZ
_TEXT	SEGMENT
?Name@CCustomMotion@@QAEPBDXZ PROC			; CCustomMotion::Name, COMDAT
; _this$ = ecx

; 64   : 	LPCSTR			Name			()				{return name.c_str();}

	mov	eax, DWORD PTR [ecx+20]
	test	eax, eax
	je	SHORT $LN5@Name@2
	add	eax, 16					; 00000010H
	ret	0
$LN5@Name@2:
	xor	eax, eax
	ret	0
?Name@CCustomMotion@@QAEPBDXZ ENDP			; CCustomMotion::Name
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\motion.cpp
;	COMDAT ?Save@COMotion@@UAEXAAVIWriter@@@Z
_TEXT	SEGMENT
_F$ = 8							; size = 4
?Save@COMotion@@UAEXAAVIWriter@@@Z PROC			; COMotion::Save, COMDAT
; _this$ = ecx

; 111  : {

	push	ebx
	push	esi

; 112  : 	CCustomMotion::Save(F);

	mov	esi, DWORD PTR _F$[esp+4]
	push	edi
	mov	edi, ecx
	lea	eax, DWORD PTR [edi+20]
	push	eax
	mov	ecx, esi
	call	DWORD PTR __imp_?w_stringZ@IWriter@@QAEXAAVshared_str@@@Z
	mov	ecx, DWORD PTR [edi+8]
	push	ecx
	mov	ecx, esi
	call	DWORD PTR __imp_?w_u32@IWriter@@QAEXI@Z
	mov	edx, DWORD PTR [edi+12]
	push	edx
	mov	ecx, esi
	call	DWORD PTR __imp_?w_u32@IWriter@@QAEXI@Z
	fld	DWORD PTR [edi+16]
	push	ecx
	mov	ecx, esi
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_?w_float@IWriter@@QAEXM@Z

; 113  : 	F.w_u16		(EOBJ_OMOTION_VERSION);

	push	5
	mov	ecx, esi
	call	DWORD PTR __imp_?w_u16@IWriter@@QAEXG@Z
	add	edi, 24					; 00000018H
	mov	ebx, 6
	npad	2
$LL3@Save@7:

; 114  : 	for (int ch=0; ch<ctMaxChannel; ch++)
; 115  : 		envs[ch]->Save(F);

	mov	ecx, DWORD PTR [edi]
	push	esi
	call	?Save@CEnvelope@@QAEXAAVIWriter@@@Z	; CEnvelope::Save
	add	edi, 4
	sub	ebx, 1
	jne	SHORT $LL3@Save@7
	pop	edi
	pop	esi
	pop	ebx

; 116  : }

	ret	4
?Save@COMotion@@UAEXAAVIWriter@@@Z ENDP			; COMotion::Save
_TEXT	ENDS
PUBLIC	??1CCustomMotion@@UAE@XZ			; CCustomMotion::~CCustomMotion
; Function compile flags: /Ogtpy
;	COMDAT ??1CCustomMotion@@UAE@XZ
_TEXT	SEGMENT
??1CCustomMotion@@UAE@XZ PROC				; CCustomMotion::~CCustomMotion, COMDAT
; _this$ = ecx

; 32   : {

	mov	DWORD PTR [ecx], OFFSET ??_7CCustomMotion@@6B@

; 33   : }

	mov	eax, DWORD PTR [ecx+20]
	test	eax, eax
	je	SHORT $LN5@CCustomMot
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [ecx+20]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN5@CCustomMot
	mov	DWORD PTR [ecx+20], 0
$LN5@CCustomMot:
	ret	0
??1CCustomMotion@@UAE@XZ ENDP				; CCustomMotion::~CCustomMotion
_TEXT	ENDS
PUBLIC	??0CCustomMotion@@QAE@XZ			; CCustomMotion::CCustomMotion
; Function compile flags: /Ogtpy
;	COMDAT ??0CCustomMotion@@QAE@XZ
_TEXT	SEGMENT
??0CCustomMotion@@QAE@XZ PROC				; CCustomMotion::CCustomMotion, COMDAT
; _this$ = ecx

; 22   :     iFrameStart		=0;
; 23   :     iFrameEnd		=0;
; 24   :     fFPS			=30.f;

	movss	xmm0, DWORD PTR _SAMPLE_FPS
	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], OFFSET ??_7CCustomMotion@@6B@
	mov	DWORD PTR [eax+20], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	movss	DWORD PTR [eax+16], xmm0

; 25   : }

	ret	0
??0CCustomMotion@@QAE@XZ ENDP				; CCustomMotion::CCustomMotion
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_ECCustomMotion@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_ECCustomMotion@@UAEPAXI@Z PROC			; CCustomMotion::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebx
	mov	bl, BYTE PTR ___flags$[esp]
	test	bl, 2
	push	esi
	mov	esi, ecx
	je	SHORT $LN3@vector@26
	mov	edx, DWORD PTR [esi-4]
	push	edi
	lea	edi, DWORD PTR [esi-4]
	lea	eax, DWORD PTR [edx+edx*2]
	sub	edx, 1
	lea	eax, DWORD PTR [esi+eax*8]
	js	SHORT $LN6@vector@26
	npad	1
$LL7@vector@26:
	sub	eax, 24					; 00000018H
	mov	DWORD PTR [eax], OFFSET ??_7CCustomMotion@@6B@
	mov	ecx, DWORD PTR [eax+20]
	test	ecx, ecx
	je	SHORT $LN14@vector@26
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN14@vector@26
	mov	DWORD PTR [eax+20], 0
$LN14@vector@26:
	sub	edx, 1
	jns	SHORT $LL7@vector@26
$LN6@vector@26:
	test	bl, 1
	je	SHORT $LN20@vector@26
	test	edi, edi
	je	SHORT $LN20@vector@26
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN20@vector@26:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$LN3@vector@26:
	mov	DWORD PTR [esi], OFFSET ??_7CCustomMotion@@6B@
	mov	eax, DWORD PTR [esi+20]
	test	eax, eax
	je	SHORT $LN27@vector@26
	add	DWORD PTR [eax], -1
	mov	edx, DWORD PTR [esi+20]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN27@vector@26
	mov	DWORD PTR [esi+20], 0
$LN27@vector@26:
	test	bl, 1
	je	SHORT $LN33@vector@26
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN33@vector@26:
	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??_ECCustomMotion@@UAEPAXI@Z ENDP			; CCustomMotion::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_GCCustomMotion@@UAEPAXI@Z			; CCustomMotion::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_GCCustomMotion@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCCustomMotion@@UAEPAXI@Z PROC			; CCustomMotion::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7CCustomMotion@@6B@
	mov	eax, DWORD PTR [esi+20]
	test	eax, eax
	je	SHORT $LN8@scalar@26
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [esi+20]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN8@scalar@26
	mov	DWORD PTR [esi+20], 0
$LN8@scalar@26:
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN17@scalar@26
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN17@scalar@26:
	mov	eax, esi
	pop	esi
	ret	4
??_GCCustomMotion@@UAEPAXI@Z ENDP			; CCustomMotion::`scalar deleting destructor'
PUBLIC	??1COMotion@@UAE@XZ				; COMotion::~COMotion
; Function compile flags: /Ogtpy
;	COMDAT ??1COMotion@@UAE@XZ
_TEXT	SEGMENT
??1COMotion@@UAE@XZ PROC				; COMotion::~COMotion, COMDAT
; _this$ = ecx

; 74   : {

	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7COMotion@@6B@

; 75   : 	Clear			();

	call	?Clear@COMotion@@QAEXXZ			; COMotion::Clear

; 76   : }

	mov	DWORD PTR [esi], OFFSET ??_7CCustomMotion@@6B@
	mov	eax, DWORD PTR [esi+20]
	test	eax, eax
	je	SHORT $LN7@COMotion
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [esi+20]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN7@COMotion
	mov	DWORD PTR [esi+20], 0
$LN7@COMotion:
	pop	esi
	ret	0
??1COMotion@@UAE@XZ ENDP				; COMotion::~COMotion
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_ECOMotion@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_ECOMotion@@UAEPAXI@Z PROC				; COMotion::`vector deleting destructor', COMDAT
; _this$ = ecx
	test	BYTE PTR ___flags$[esp-4], 2
	push	edi
	mov	edi, ecx
	je	SHORT $LN3@vector@69
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR [edi-4]
	lea	ebx, DWORD PTR [edi-4]
	push	esi
	lea	esi, DWORD PTR [ebp+ebp*2]
	shl	esi, 4
	add	esi, edi
	sub	ebp, 1
	js	SHORT $LN41@vector@69
$LL7@vector@69:
	sub	esi, 48					; 00000030H
	mov	ecx, esi
	mov	DWORD PTR [esi], OFFSET ??_7COMotion@@6B@
	call	?Clear@COMotion@@QAEXXZ			; COMotion::Clear
	mov	DWORD PTR [esi], OFFSET ??_7CCustomMotion@@6B@
	mov	eax, DWORD PTR [esi+20]
	test	eax, eax
	je	SHORT $LN16@vector@69
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [esi+20]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN16@vector@69
	mov	DWORD PTR [esi+20], 0
$LN16@vector@69:
	sub	ebp, 1
	jns	SHORT $LL7@vector@69
$LN41@vector@69:
	test	BYTE PTR ___flags$[esp+12], 1
	je	SHORT $LN22@vector@69
	test	ebx, ebx
	je	SHORT $LN22@vector@69
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	ebx
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN22@vector@69:
	pop	esi
	pop	ebp
	mov	eax, ebx
	pop	ebx
	pop	edi
	ret	4
$LN3@vector@69:
	mov	DWORD PTR [edi], OFFSET ??_7COMotion@@6B@
	call	?Clear@COMotion@@QAEXXZ			; COMotion::Clear
	mov	DWORD PTR [edi], OFFSET ??_7CCustomMotion@@6B@
	mov	eax, DWORD PTR [edi+20]
	test	eax, eax
	je	SHORT $LN31@vector@69
	add	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR [edi+20]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN31@vector@69
	mov	DWORD PTR [edi+20], 0
$LN31@vector@69:
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN37@vector@69
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN37@vector@69:
	mov	eax, edi
	pop	edi
	ret	4
??_ECOMotion@@UAEPAXI@Z ENDP				; COMotion::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_GCOMotion@@UAEPAXI@Z				; COMotion::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_GCOMotion@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCOMotion@@UAEPAXI@Z PROC				; COMotion::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7COMotion@@6B@
	call	?Clear@COMotion@@QAEXXZ			; COMotion::Clear
	mov	DWORD PTR [esi], OFFSET ??_7CCustomMotion@@6B@
	mov	eax, DWORD PTR [esi+20]
	test	eax, eax
	je	SHORT $LN10@scalar@42
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [esi+20]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN10@scalar@42
	mov	DWORD PTR [esi+20], 0
$LN10@scalar@42:
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN19@scalar@42
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN19@scalar@42:
	mov	eax, esi
	pop	esi
	ret	4
??_GCOMotion@@UAEPAXI@Z ENDP				; COMotion::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??4CCustomMotion@@QAEAAV0@ABV0@@Z		; CCustomMotion::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4CCustomMotion@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4CCustomMotion@@QAEAAV0@ABV0@@Z PROC			; CCustomMotion::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	fld	DWORD PTR [ecx+16]
	fstp	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR [ecx+20]
	test	ecx, ecx
	je	SHORT $LN5@operator@84
	add	DWORD PTR [ecx], 1
$LN5@operator@84:
	mov	edx, DWORD PTR [eax+20]
	test	edx, edx
	je	SHORT $LN13@operator@84
	add	DWORD PTR [edx], -1
	mov	edx, DWORD PTR [eax+20]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN13@operator@84
	mov	DWORD PTR [eax+20], 0
$LN13@operator@84:
	mov	DWORD PTR [eax+20], ecx
	ret	4
??4CCustomMotion@@QAEAAV0@ABV0@@Z ENDP			; CCustomMotion::operator=
_TEXT	ENDS
PUBLIC	??0CCustomMotion@@QAE@ABV0@@Z			; CCustomMotion::CCustomMotion
; Function compile flags: /Ogtpy
;	COMDAT ??0CCustomMotion@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0CCustomMotion@@QAE@ABV0@@Z PROC			; CCustomMotion::CCustomMotion, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	DWORD PTR [eax], OFFSET ??_7CCustomMotion@@6B@
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	fld	DWORD PTR [ecx+16]
	fstp	DWORD PTR [eax+16]
	mov	DWORD PTR [eax+20], 0
	mov	ecx, DWORD PTR [ecx+20]
	test	ecx, ecx
	je	SHORT $LN5@CCustomMot@2
	add	DWORD PTR [ecx], 1
$LN5@CCustomMot@2:
	mov	edx, DWORD PTR [eax+20]
	test	edx, edx
	je	SHORT $LN13@CCustomMot@2
	add	DWORD PTR [edx], -1
	mov	edx, DWORD PTR [eax+20]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN13@CCustomMot@2
	mov	DWORD PTR [eax+20], 0
$LN13@CCustomMot@2:
	mov	DWORD PTR [eax+20], ecx
	ret	4
??0CCustomMotion@@QAE@ABV0@@Z ENDP			; CCustomMotion::CCustomMotion
_TEXT	ENDS
PUBLIC	?SetName@CCustomMotion@@QAEXPBD@Z		; CCustomMotion::SetName
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\motion.h
;	COMDAT ?SetName@CCustomMotion@@QAEXPBD@Z
_TEXT	SEGMENT
_tmp$ = -256						; size = 256
_n$ = 8							; size = 4
?SetName@CCustomMotion@@QAEXPBD@Z PROC			; CCustomMotion::SetName, COMDAT
; _this$ = ecx

; 63   : 	void			SetName			(const char* n)	{string256 tmp; tmp[0]=0; if(n){xr_strcpy(tmp,n); strlwr(tmp);} name=tmp;}

	sub	esp, 256				; 00000100H
	mov	eax, DWORD PTR _n$[esp+252]
	test	eax, eax
	push	esi
	mov	esi, ecx
	mov	BYTE PTR _tmp$[esp+260], 0
	je	SHORT $LN1@SetName
	push	eax
	lea	eax, DWORD PTR _tmp$[esp+264]
	push	eax
	call	??$xr_strcpy@$0BAA@@@YAHAAY0BAA@DPBD@Z	; xr_strcpy<256>
	lea	ecx, DWORD PTR _tmp$[esp+268]
	push	ecx
	call	DWORD PTR __imp__strlwr
	add	esp, 12					; 0000000cH
$LN1@SetName:
	mov	eax, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _tmp$[esp+260]
	push	edx
	call	DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	test	eax, eax
	je	SHORT $LN10@SetName
	add	DWORD PTR [eax], 1
$LN10@SetName:
	mov	ecx, DWORD PTR [esi+20]
	test	ecx, ecx
	je	SHORT $LN18@SetName
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [esi+20]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN18@SetName
	mov	DWORD PTR [esi+20], 0
$LN18@SetName:
	mov	DWORD PTR [esi+20], eax
	pop	esi
	add	esp, 256				; 00000100H
	ret	4
?SetName@CCustomMotion@@QAEXPBD@Z ENDP			; CCustomMotion::SetName
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrmemory_subst_msvc.h
;	COMDAT ??$xr_new@VCEnvelope@@@@YAPAVCEnvelope@@XZ
_TEXT	SEGMENT
??$xr_new@VCEnvelope@@@@YAPAVCEnvelope@@XZ PROC		; xr_new<CEnvelope>, COMDAT

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 69   : 	return new (ptr) T();

	xor	ecx, ecx
	cmp	eax, ecx
	je	SHORT $LN3@xr_new@31
	mov	DWORD PTR [eax], OFFSET ??_7CEnvelope@@6B@
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	ecx, 1
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], ecx

; 70   : }

	ret	0
$LN3@xr_new@31:

; 69   : 	return new (ptr) T();

	xor	eax, eax

; 70   : }

	ret	0
??$xr_new@VCEnvelope@@@@YAPAVCEnvelope@@XZ ENDP		; xr_new<CEnvelope>
_TEXT	ENDS
PUBLIC	?_Evaluate@COMotion@@QAEXMAAU?$_vector3@M@@0@Z	; COMotion::_Evaluate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\motion.cpp
;	COMDAT ?_Evaluate@COMotion@@QAEXMAAU?$_vector3@M@@0@Z
_TEXT	SEGMENT
_t$ = 8							; size = 4
_T$ = 12						; size = 4
_R$ = 16						; size = 4
?_Evaluate@COMotion@@QAEXMAAU?$_vector3@M@@0@Z PROC	; COMotion::_Evaluate, COMDAT
; _this$ = ecx

; 85   : 	T.x = envs[ctPositionX]->Evaluate(t);

	fld	DWORD PTR _t$[esp-4]
	push	esi
	push	edi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+24]
	push	ecx
	fstp	DWORD PTR [esp]
	push	eax
	call	?evalEnvelope@@YAMPAVCEnvelope@@M@Z	; evalEnvelope

; 86   : 	T.y = envs[ctPositionY]->Evaluate(t);

	fld	DWORD PTR _t$[esp+12]
	mov	eax, DWORD PTR [esi+28]
	fstp	DWORD PTR [esp+4]
	mov	edi, DWORD PTR _T$[esp+12]
	add	esp, 4
	push	eax
	movss	DWORD PTR [edi], xmm0
	call	?evalEnvelope@@YAMPAVCEnvelope@@M@Z	; evalEnvelope

; 87   : 	T.z = envs[ctPositionZ]->Evaluate(t);

	fld	DWORD PTR _t$[esp+12]
	mov	eax, DWORD PTR [esi+32]
	fstp	DWORD PTR [esp+4]
	add	esp, 4
	push	eax
	movss	DWORD PTR [edi+4], xmm0
	call	?evalEnvelope@@YAMPAVCEnvelope@@M@Z	; evalEnvelope

; 88   : 
; 89   : 	R.y = envs[ctRotationH]->Evaluate(t);

	fld	DWORD PTR _t$[esp+12]
	mov	eax, DWORD PTR [esi+36]
	fstp	DWORD PTR [esp+4]
	add	esp, 4
	push	eax
	movss	DWORD PTR [edi+8], xmm0
	call	?evalEnvelope@@YAMPAVCEnvelope@@M@Z	; evalEnvelope

; 90   : 	R.x = envs[ctRotationP]->Evaluate(t);

	fld	DWORD PTR _t$[esp+12]
	mov	eax, DWORD PTR [esi+40]
	fstp	DWORD PTR [esp+4]
	mov	edi, DWORD PTR _R$[esp+12]
	add	esp, 4
	push	eax
	movss	DWORD PTR [edi+4], xmm0
	call	?evalEnvelope@@YAMPAVCEnvelope@@M@Z	; evalEnvelope

; 91   : 	R.z = envs[ctRotationB]->Evaluate(t);

	fld	DWORD PTR _t$[esp+12]
	mov	esi, DWORD PTR [esi+44]
	fstp	DWORD PTR [esp+4]
	add	esp, 4
	push	esi
	movss	DWORD PTR [edi], xmm0
	call	?evalEnvelope@@YAMPAVCEnvelope@@M@Z	; evalEnvelope
	add	esp, 8
	movss	DWORD PTR [edi+8], xmm0

; 92   : }

	pop	edi
	pop	esi
	ret	12					; 0000000cH
?_Evaluate@COMotion@@QAEXMAAU?$_vector3@M@@0@Z ENDP	; COMotion::_Evaluate
_TEXT	ENDS
PUBLIC	??0COMotion@@QAE@XZ				; COMotion::COMotion
; Function compile flags: /Ogtpy
;	COMDAT ??0COMotion@@QAE@XZ
_TEXT	SEGMENT
tv131 = -4						; size = 4
??0COMotion@@QAE@XZ PROC				; COMotion::COMotion, COMDAT
; _this$ = ecx

; 59   : {

	push	ecx
	movss	xmm0, DWORD PTR _SAMPLE_FPS
	push	ebx
	push	ebp
	push	esi
	xor	esi, esi
	push	edi
	mov	edi, ecx
	mov	DWORD PTR [edi+20], esi
	mov	DWORD PTR [edi+8], esi
	mov	DWORD PTR [edi+12], esi
	movss	DWORD PTR [edi+16], xmm0
	mov	DWORD PTR [edi], OFFSET ??_7COMotion@@6B@

; 60   : 	mtype			=mtObject;

	mov	DWORD PTR [edi+4], esi
	lea	ebx, DWORD PTR [edi+24]
	mov	DWORD PTR tv131[esp+20], 6
	lea	ebp, DWORD PTR [esi+1]
	npad	10
$LL3@COMotion@2:

; 61   : 	for (int ch=0; ch<ctMaxChannel; ch++)
; 62   : 		envs[ch]	= xr_new<CEnvelope> ();

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	cmp	eax, esi
	je	SHORT $LN12@COMotion@2
	mov	DWORD PTR [eax], OFFSET ??_7CEnvelope@@6B@
	mov	DWORD PTR [eax+4], esi
	mov	DWORD PTR [eax+8], esi
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+16], ebp
	mov	DWORD PTR [eax+20], ebp
	jmp	SHORT $LN13@COMotion@2
$LN12@COMotion@2:
	xor	eax, eax
$LN13@COMotion@2:
	mov	DWORD PTR [ebx], eax
	add	ebx, 4
	sub	DWORD PTR tv131[esp+20], ebp
	jne	SHORT $LL3@COMotion@2

; 63   : }

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	pop	ecx
	ret	0
??0COMotion@@QAE@XZ ENDP				; COMotion::COMotion
_TEXT	ENDS
PUBLIC	??0CCustomMotion@@QAE@PAV0@@Z			; CCustomMotion::CCustomMotion
; Function compile flags: /Ogtpy
;	COMDAT ??0CCustomMotion@@QAE@PAV0@@Z
_TEXT	SEGMENT
_source$ = 8						; size = 4
??0CCustomMotion@@QAE@PAV0@@Z PROC			; CCustomMotion::CCustomMotion, COMDAT
; _this$ = ecx

; 27   : CCustomMotion::CCustomMotion(CCustomMotion* source){

	mov	eax, ecx

; 28   : 	*this			= *source;

	mov	ecx, DWORD PTR _source$[esp-4]
	mov	DWORD PTR [eax], OFFSET ??_7CCustomMotion@@6B@
	mov	DWORD PTR [eax+20], 0
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	fld	DWORD PTR [ecx+16]
	fstp	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR [ecx+20]
	test	ecx, ecx
	je	SHORT $LN9@CCustomMot@3
	add	DWORD PTR [ecx], 1
$LN9@CCustomMot@3:
	mov	edx, DWORD PTR [eax+20]
	test	edx, edx
	je	SHORT $LN17@CCustomMot@3
	add	DWORD PTR [edx], -1
	mov	edx, DWORD PTR [eax+20]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN17@CCustomMot@3
	mov	DWORD PTR [eax+20], 0
$LN17@CCustomMot@3:
	mov	DWORD PTR [eax+20], ecx

; 29   : }

	ret	4
??0CCustomMotion@@QAE@PAV0@@Z ENDP			; CCustomMotion::CCustomMotion
_TEXT	ENDS
PUBLIC	??4COMotion@@QAEAAV0@ABV0@@Z			; COMotion::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4COMotion@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4COMotion@@QAEAAV0@ABV0@@Z PROC			; COMotion::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	fld	DWORD PTR [ecx+16]
	fstp	DWORD PTR [eax+16]
	push	esi
	mov	esi, DWORD PTR [ecx+20]
	test	esi, esi
	je	SHORT $LN10@operator@110
	add	DWORD PTR [esi], 1
$LN10@operator@110:
	mov	edx, DWORD PTR [eax+20]
	test	edx, edx
	je	SHORT $LN13@operator@110
	add	DWORD PTR [edx], -1
	mov	edx, DWORD PTR [eax+20]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN13@operator@110
	mov	DWORD PTR [eax+20], 0
$LN13@operator@110:
	mov	DWORD PTR [eax+20], esi
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], edx
	mov	ecx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+44], ecx
	pop	esi
	ret	4
??4COMotion@@QAEAAV0@ABV0@@Z ENDP			; COMotion::operator=
_TEXT	ENDS
PUBLIC	??0COMotion@@QAE@ABV0@@Z			; COMotion::COMotion
; Function compile flags: /Ogtpy
;	COMDAT ??0COMotion@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0COMotion@@QAE@ABV0@@Z PROC				; COMotion::COMotion, COMDAT
; _this$ = ecx
	push	esi
	push	edi
	mov	edi, DWORD PTR ___that$[esp+4]
	push	edi
	mov	esi, ecx
	call	??0CCustomMotion@@QAE@ABV0@@Z
	lea	eax, DWORD PTR [edi+24]
	mov	DWORD PTR [esi], OFFSET ??_7COMotion@@6B@
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [esi+24], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi+28], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [esi+32], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [esi+36], edx
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [esi+40], ecx
	mov	edx, DWORD PTR [eax+20]
	pop	edi
	mov	DWORD PTR [esi+44], edx
	mov	eax, esi
	pop	esi
	ret	4
??0COMotion@@QAE@ABV0@@Z ENDP				; COMotion::COMotion
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrmemory_subst_msvc.h
;	COMDAT ??$xr_new@VCEnvelope@@PAV1@@@YAPAVCEnvelope@@ABQAV0@@Z
_TEXT	SEGMENT
_p1$ = 8						; size = 4
??$xr_new@VCEnvelope@@PAV1@@@YAPAVCEnvelope@@ABQAV0@@Z PROC ; xr_new<CEnvelope,CEnvelope *>, COMDAT

; 74   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 75   : 	return new (ptr) T(p1);

	test	eax, eax
	je	SHORT $LN3@xr_new@39
	mov	ecx, DWORD PTR _p1$[esp-4]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, eax
	call	??0CEnvelope@@QAE@PAV0@@Z		; CEnvelope::CEnvelope

; 76   : }

	ret	0
$LN3@xr_new@39:

; 75   : 	return new (ptr) T(p1);

	xor	eax, eax

; 76   : }

	ret	0
??$xr_new@VCEnvelope@@PAV1@@@YAPAVCEnvelope@@ABQAV0@@Z ENDP ; xr_new<CEnvelope,CEnvelope *>
_TEXT	ENDS
PUBLIC	??0COMotion@@QAE@PAV0@@Z			; COMotion::COMotion
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\motion.cpp
;	COMDAT ??0COMotion@@QAE@PAV0@@Z
_TEXT	SEGMENT
_source$ = 8						; size = 4
??0COMotion@@QAE@PAV0@@Z PROC				; COMotion::COMotion, COMDAT
; _this$ = ecx

; 66   : {

	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR _source$[esp+12]
	push	edi
	mov	ebx, ecx
	call	??0CCustomMotion@@QAE@PAV0@@Z		; CCustomMotion::CCustomMotion
	mov	DWORD PTR [ebx], OFFSET ??_7COMotion@@6B@

; 67   : 	// bone motions
; 68   : 	mtype = source->mtype;

	mov	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [ebx+4], eax
	lea	esi, DWORD PTR [ebx+24]

; 69   : 	for (int ch=0; ch<ctMaxChannel; ch++)

	sub	edi, ebx
	mov	ebp, 6
	npad	10
$LL3@COMotion@3:

; 70   : 		envs[ch]	= xr_new<CEnvelope> (source->envs[ch]);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	test	eax, eax
	je	SHORT $LN8@COMotion@3
	mov	ecx, DWORD PTR [edi+esi]
	push	ecx
	mov	ecx, eax
	call	??0CEnvelope@@QAE@PAV0@@Z		; CEnvelope::CEnvelope
	jmp	SHORT $LN9@COMotion@3
$LN8@COMotion@3:
	xor	eax, eax
$LN9@COMotion@3:
	mov	DWORD PTR [esi], eax
	add	esi, 4
	sub	ebp, 1
	jne	SHORT $LL3@COMotion@3
	pop	edi
	pop	esi
	pop	ebp

; 71   : }

	mov	eax, ebx
	pop	ebx
	ret	4
??0COMotion@@QAE@PAV0@@Z ENDP				; COMotion::COMotion
; Function compile flags: /Ogtpy
;	COMDAT ?Load@COMotion@@UAE_NAAVIReader@@@Z
_TEXT	SEGMENT
_F$ = 8							; size = 4
?Load@COMotion@@UAE_NAAVIReader@@@Z PROC		; COMotion::Load, COMDAT
; _this$ = ecx

; 119  : {

	push	ebx

; 120  : 	CCustomMotion::Load(F);

	mov	ebx, DWORD PTR _F$[esp]
	push	ebp
	push	esi
	push	edi
	mov	edi, ecx
	lea	eax, DWORD PTR [edi+20]
	push	eax
	mov	ecx, ebx
	call	DWORD PTR __imp_?r_stringZ@IReader@@QAEXAAVshared_str@@@Z
	mov	ecx, ebx
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ
	mov	ecx, ebx
	mov	DWORD PTR [edi+8], eax
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ
	mov	ecx, ebx
	mov	DWORD PTR [edi+12], eax
	call	DWORD PTR __imp_?r_float@?$IReaderBase@VIReader@@@@QAEMXZ
	fstp	DWORD PTR [edi+16]

; 121  : 	u16 vers	= F.r_u16();

	mov	ecx, ebx
	call	DWORD PTR __imp_?r_u16@?$IReaderBase@VIReader@@@@QAEGXZ
	movzx	eax, ax

; 122  :     if (vers==0x0003){

	cmp	ax, 3
	jne	SHORT $LN11@Load@13

; 123  : 	    Clear	();

	mov	ecx, edi
	call	?Clear@COMotion@@QAEXXZ			; COMotion::Clear
	add	edi, 24					; 00000018H
	mov	ebp, 6
	xor	esi, esi
	npad	7
$LL10@Load@13:

; 124  :         for (int ch=0; ch<ctMaxChannel; ch++){
; 125  :             envs[ch] = xr_new<CEnvelope> ();

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	cmp	eax, esi
	je	SHORT $LN18@Load@13
	mov	DWORD PTR [eax], OFFSET ??_7CEnvelope@@6B@
	mov	DWORD PTR [eax+4], esi
	mov	DWORD PTR [eax+8], esi
	mov	ecx, 1
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], ecx
	jmp	SHORT $LN19@Load@13
$LN18@Load@13:
	xor	eax, eax
$LN19@Load@13:

; 126  :             envs[ch]->Load_1(F);

	push	ebx
	mov	ecx, eax
	mov	DWORD PTR [edi], eax
	call	?Load_1@CEnvelope@@QAEXAAVIReader@@@Z	; CEnvelope::Load_1
	add	edi, 4
	sub	ebp, 1
	jne	SHORT $LL10@Load@13
	pop	edi
	pop	esi
	pop	ebp

; 143  :         }
; 144  :     }
; 145  : 	return true;

	mov	al, 1
	pop	ebx

; 146  : }

	ret	4
$LN11@Load@13:

; 127  :         }
; 128  :     }else if (vers==0x0004){

	cmp	ax, 4
	jne	$LN6@Load@13

; 129  : 	    Clear	();

	mov	ecx, edi
	call	?Clear@COMotion@@QAEXXZ			; COMotion::Clear

; 130  :         envs[ctPositionX] = xr_new<CEnvelope>();	envs[ctPositionX]->Load_2(F);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	mov	ebp, DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	push	24					; 00000018H
	call	ebp
	xor	esi, esi
	cmp	eax, esi
	je	SHORT $LN42@Load@13
	mov	DWORD PTR [eax], OFFSET ??_7CEnvelope@@6B@
	mov	DWORD PTR [eax+4], esi
	mov	DWORD PTR [eax+8], esi
	mov	ecx, 1
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], ecx
	jmp	SHORT $LN43@Load@13
$LN42@Load@13:
	xor	eax, eax
$LN43@Load@13:
	push	ebx
	mov	ecx, eax
	mov	DWORD PTR [edi+24], eax
	call	?Load_2@CEnvelope@@QAEXAAVIReader@@@Z	; CEnvelope::Load_2

; 131  :         envs[ctPositionY] = xr_new<CEnvelope>();	envs[ctPositionY]->Load_2(F);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
	call	ebp
	cmp	eax, esi
	je	SHORT $LN66@Load@13
	mov	DWORD PTR [eax], OFFSET ??_7CEnvelope@@6B@
	mov	DWORD PTR [eax+4], esi
	mov	DWORD PTR [eax+8], esi
	mov	ecx, 1
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], ecx
	jmp	SHORT $LN67@Load@13
$LN66@Load@13:
	xor	eax, eax
$LN67@Load@13:
	push	ebx
	mov	ecx, eax
	mov	DWORD PTR [edi+28], eax
	call	?Load_2@CEnvelope@@QAEXAAVIReader@@@Z	; CEnvelope::Load_2

; 132  :         envs[ctPositionZ] = xr_new<CEnvelope>();	envs[ctPositionZ]->Load_2(F);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
	call	ebp
	cmp	eax, esi
	je	SHORT $LN90@Load@13
	mov	DWORD PTR [eax], OFFSET ??_7CEnvelope@@6B@
	mov	DWORD PTR [eax+4], esi
	mov	DWORD PTR [eax+8], esi
	mov	ecx, 1
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], ecx
	jmp	SHORT $LN91@Load@13
$LN90@Load@13:
	xor	eax, eax
$LN91@Load@13:
	push	ebx
	mov	ecx, eax
	mov	DWORD PTR [edi+32], eax
	call	?Load_2@CEnvelope@@QAEXAAVIReader@@@Z	; CEnvelope::Load_2

; 133  :         envs[ctRotationP] = xr_new<CEnvelope>();	envs[ctRotationP]->Load_2(F);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
	call	ebp
	cmp	eax, esi
	je	SHORT $LN114@Load@13
	mov	DWORD PTR [eax], OFFSET ??_7CEnvelope@@6B@
	mov	DWORD PTR [eax+4], esi
	mov	DWORD PTR [eax+8], esi
	mov	ecx, 1
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], ecx
	jmp	SHORT $LN115@Load@13
$LN114@Load@13:
	xor	eax, eax
$LN115@Load@13:
	push	ebx
	mov	ecx, eax
	mov	DWORD PTR [edi+40], eax
	call	?Load_2@CEnvelope@@QAEXAAVIReader@@@Z	; CEnvelope::Load_2

; 134  :         envs[ctRotationH] = xr_new<CEnvelope>();	envs[ctRotationH]->Load_2(F);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
	call	ebp
	cmp	eax, esi
	je	SHORT $LN138@Load@13
	mov	DWORD PTR [eax], OFFSET ??_7CEnvelope@@6B@
	mov	DWORD PTR [eax+4], esi
	mov	DWORD PTR [eax+8], esi
	mov	ecx, 1
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], ecx
	jmp	SHORT $LN139@Load@13
$LN138@Load@13:
	xor	eax, eax
$LN139@Load@13:
	push	ebx
	mov	ecx, eax
	mov	DWORD PTR [edi+36], eax
	call	?Load_2@CEnvelope@@QAEXAAVIReader@@@Z	; CEnvelope::Load_2

; 135  :         envs[ctRotationB] = xr_new<CEnvelope>();	envs[ctRotationB]->Load_2(F);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
	call	ebp
	cmp	eax, esi
	je	SHORT $LN162@Load@13
	mov	DWORD PTR [eax], OFFSET ??_7CEnvelope@@6B@
	mov	DWORD PTR [eax+4], esi
	mov	DWORD PTR [eax+8], esi
	mov	DWORD PTR [eax+12], esi
	mov	ecx, 1
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], ecx
	push	ebx
	mov	ecx, eax
	mov	DWORD PTR [edi+44], eax
	call	?Load_2@CEnvelope@@QAEXAAVIReader@@@Z	; CEnvelope::Load_2
	pop	edi
	pop	esi
	pop	ebp

; 143  :         }
; 144  :     }
; 145  : 	return true;

	mov	al, 1
	pop	ebx

; 146  : }

	ret	4

; 135  :         envs[ctRotationB] = xr_new<CEnvelope>();	envs[ctRotationB]->Load_2(F);

$LN162@Load@13:
	xor	eax, eax
	push	ebx
	mov	ecx, eax
	mov	DWORD PTR [edi+44], eax
	call	?Load_2@CEnvelope@@QAEXAAVIReader@@@Z	; CEnvelope::Load_2
	pop	edi
	pop	esi
	pop	ebp

; 143  :         }
; 144  :     }
; 145  : 	return true;

	mov	al, 1
	pop	ebx

; 146  : }

	ret	4
$LN6@Load@13:

; 136  :     }else{
; 137  : 		if (vers!=EOBJ_OMOTION_VERSION) return false;

	cmp	ax, 5
	je	SHORT $LN4@Load@13
	pop	edi
	pop	esi
	pop	ebp
	xor	al, al
	pop	ebx

; 146  : }

	ret	4
$LN4@Load@13:

; 138  : 	    Clear	();

	mov	ecx, edi
	call	?Clear@COMotion@@QAEXXZ			; COMotion::Clear
	add	edi, 24					; 00000018H
	mov	ebp, 6
	xor	esi, esi
	npad	7
$LL3@Load@13:

; 139  : 
; 140  :         for (int ch=0; ch<ctMaxChannel; ch++){
; 141  :             envs[ch] = xr_new<CEnvelope> ();

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	cmp	eax, esi
	je	SHORT $LN186@Load@13
	mov	DWORD PTR [eax], OFFSET ??_7CEnvelope@@6B@
	mov	DWORD PTR [eax+4], esi
	mov	DWORD PTR [eax+8], esi
	mov	ecx, 1
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], ecx
	jmp	SHORT $LN187@Load@13
$LN186@Load@13:
	xor	eax, eax
$LN187@Load@13:

; 142  :             envs[ch]->Load_2(F);

	push	ebx
	mov	ecx, eax
	mov	DWORD PTR [edi], eax
	call	?Load_2@CEnvelope@@QAEXAAVIReader@@@Z	; CEnvelope::Load_2
	add	edi, 4
	sub	ebp, 1
	jne	SHORT $LL3@Load@13
	pop	edi
	pop	esi
	pop	ebp

; 143  :         }
; 144  :     }
; 145  : 	return true;

	mov	al, 1
	pop	ebx

; 146  : }

	ret	4
?Load@COMotion@@UAE_NAAVIReader@@@Z ENDP		; COMotion::Load
END
