; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	D:\CLEARSKY\sources\engine\xrEngine\FDemoRecord.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?OnRender@CDemoRecord@@UAEXXZ			; CDemoRecord::OnRender
PUBLIC	??_R4CDemoRecord@@6BpureRender@@@		; CDemoRecord::`RTTI Complete Object Locator'
PUBLIC	?IR_OnKeyboardHold@CDemoRecord@@UAEXH@Z		; CDemoRecord::IR_OnKeyboardHold
PUBLIC	?IR_OnKeyboardPress@CDemoRecord@@UAEXH@Z	; CDemoRecord::IR_OnKeyboardPress
PUBLIC	?IR_OnMouseMove@CDemoRecord@@UAEXHH@Z		; CDemoRecord::IR_OnMouseMove
PUBLIC	?IR_OnMouseHold@CDemoRecord@@UAEXH@Z		; CDemoRecord::IR_OnMouseHold
PUBLIC	??_R4CDemoRecord@@6BIInputReceiver@@@		; CDemoRecord::`RTTI Complete Object Locator'
PUBLIC	?ProcessCam@CDemoRecord@@UAEHAAUSCamEffectorInfo@@@Z ; CDemoRecord::ProcessCam
PUBLIC	??_ECDemoRecord@@UAEPAXI@Z			; CDemoRecord::`vector deleting destructor'
PUBLIC	??_R4CDemoRecord@@6BCEffectorCam@@@		; CDemoRecord::`RTTI Complete Object Locator'
PUBLIC	??_R3CDemoRecord@@8				; CDemoRecord::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDemoRecord@@8				; CDemoRecord::`RTTI Base Class Array'
PUBLIC	??_R1BM@?0A@EA@pureRender@@8			; pureRender::`RTTI Base Class Descriptor at (28,-1,0,64)'
PUBLIC	??_R1BI@?0A@EA@IInputReceiver@@8		; IInputReceiver::`RTTI Base Class Descriptor at (24,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CDemoRecord@@8			; CDemoRecord::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCDemoRecord@@@8				; CDemoRecord `RTTI Type Descriptor'
PUBLIC	?build_projection_ortho@?$_matrix@M@@QAEAAU1@MMMM@Z ; _matrix<float>::build_projection_ortho
PUBLIC	?negative@@YAHABM@Z				; negative
PUBLIC	?xform@?$_box3@M@@QAEAAV1@ABV1@ABU?$_matrix@M@@@Z ; _box3<float>::xform
PUBLIC	?xform@?$_box3@M@@QAEAAV1@ABU?$_matrix@M@@@Z	; _box3<float>::xform
PUBLIC	_asinf
PUBLIC	?equal@?$_flags@I@@QBEHABU1@I@Z			; _flags<unsigned int>::equal
PUBLIC	?assign@?$_flags@I@@QAEAAU1@ABU1@@Z		; _flags<unsigned int>::assign
PUBLIC	?normalize_safe@?$_vector3@M@@QAEAAU1@XZ	; _vector3<float>::normalize_safe
PUBLIC	?stored_red_text@@3HA				; stored_red_text
PUBLIC	?curr_lm_fbox@@3V?$_box3@M@@A			; curr_lm_fbox
PUBLIC	?g_position@CDemoRecord@@0Uforce_position@1@A	; CDemoRecord::g_position
PUBLIC	??_C@_09BIPICMMN@level_map?$AA@			; `string'
PUBLIC	??_C@_0L@MPHAKFMF@bound_rect?$AA@		; `string'
PUBLIC	??_C@_06HJIDENPF@speed0?$AA@			; `string'
PUBLIC	??_C@_0M@GNMFNDPM@demo_record?$AA@		; `string'
PUBLIC	??_C@_06GAJIHMLE@speed1?$AA@			; `string'
PUBLIC	??_C@_06ELLFCPHH@speed2?$AA@			; `string'
PUBLIC	??_C@_06FCKOBODG@speed3?$AA@			; `string'
PUBLIC	??_C@_0L@GFBIFDFL@ang_speed0?$AA@		; `string'
PUBLIC	??_C@_0L@HMADGCBK@ang_speed1?$AA@		; `string'
PUBLIC	??_C@_0L@FHCODBNJ@ang_speed2?$AA@		; `string'
PUBLIC	??_C@_0L@EODFAAJI@ang_speed3?$AA@		; `string'
PUBLIC	??_C@_06BLHCIAFO@map_?$CFs?$AA@			; `string'
PUBLIC	??_C@_09GODKKBIC@map_?$CFs?$CD?$CFd?$AA@	; `string'
PUBLIC	??_C@_09OPNFHOOA@RECORDING?$AA@			; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_0BF@DOGMJHO@Key?5frames?5count?3?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_05CAEOFMEP@SPACE?$AA@			; `string'
PUBLIC	??_C@_04FJBHJJME@BACK?$AA@			; `string'
PUBLIC	??_C@_03MHNPAEMD@ESC?$AA@			; `string'
PUBLIC	??_C@_03IDDAKPBH@F11?$AA@			; `string'
PUBLIC	??_C@_0N@EMHMJELA@LCONTROL?$CLF11?$AA@		; `string'
PUBLIC	??_C@_03KIBNPMNE@F12?$AA@			; `string'
PUBLIC	??_C@_0N@FEBBIANB@?$DN?5Append?5Key?$AA@	; `string'
PUBLIC	??_C@_0L@LBPBFPMO@?$DN?5Cube?5Map?$AA@		; `string'
PUBLIC	??_C@_06PJEMBLKN@?$DN?5Quit?$AA@		; `string'
PUBLIC	??_C@_0BH@DHPNDKLL@?$DN?5Level?5Map?5ScreenShot?$AA@ ; `string'
PUBLIC	??_C@_0CF@HIPFDMOH@?$DN?5Level?5Map?5ScreenShot?$CIHigh?5Qual@ ; `string'
PUBLIC	??_C@_0N@FHLEPJHO@?$DN?5ScreenShot?$AA@		; `string'
PUBLIC	??_C@_0CJ@DNOMCCAO@run_string?5level?4set_weather?$CI?$CCma@ ; `string'
PUBLIC	??_7CDemoRecord@@6BCEffectorCam@@@		; CDemoRecord::`vftable'
PUBLIC	??_7CDemoRecord@@6BIInputReceiver@@@		; CDemoRecord::`vftable'
PUBLIC	??_7CDemoRecord@@6BpureRender@@@		; CDemoRecord::`vftable'
EXTRN	__imp_?section_exist@CInifile@@QBEHPBD@Z:PROC
EXTRN	__imp_?GetBoundingVolume@CObjectSpace@@QAEABV?$_box3@M@@XZ:PROC
EXTRN	__imp___unlink:PROC
EXTRN	__imp_?w_open@CLocatorAPI@@QAEPAVIWriter@@PBD@Z:PROC
EXTRN	__imp_?w_close@CLocatorAPI@@QAEXAAPAVIWriter@@@Z:PROC
?stored_red_text@@3HA DD 01H DUP (?)			; stored_red_text
?curr_lm_fbox@@3V?$_box3@M@@A DB 018H DUP (?)		; curr_lm_fbox
_s_hud_flag DD	01H DUP (?)
_s_dev_flags DD	01H DUP (?)
?g_position@CDemoRecord@@0Uforce_position@1@A DB 0dH DUP (?) ; CDemoRecord::g_position
;	COMDAT ??_7CDemoRecord@@6BpureRender@@@
CONST	SEGMENT
??_7CDemoRecord@@6BpureRender@@@ DD FLAT:??_R4CDemoRecord@@6BpureRender@@@ ; CDemoRecord::`vftable'
	DD	FLAT:?OnRender@CDemoRecord@@UAEXXZ
CONST	ENDS
;	COMDAT ??_R4CDemoRecord@@6BpureRender@@@
rdata$r	SEGMENT
??_R4CDemoRecord@@6BpureRender@@@ DD 00H		; CDemoRecord::`RTTI Complete Object Locator'
	DD	01cH
	DD	00H
	DD	FLAT:??_R0?AVCDemoRecord@@@8
	DD	FLAT:??_R3CDemoRecord@@8
rdata$r	ENDS
;	COMDAT ??_7CDemoRecord@@6BIInputReceiver@@@
CONST	SEGMENT
??_7CDemoRecord@@6BIInputReceiver@@@ DD FLAT:??_R4CDemoRecord@@6BIInputReceiver@@@ ; CDemoRecord::`vftable'
	DD	FLAT:?IR_OnDeactivate@IInputReceiver@@UAEXXZ
	DD	FLAT:?IR_OnActivate@IInputReceiver@@UAEXXZ
	DD	FLAT:?IR_OnMousePress@IInputReceiver@@UAEXH@Z
	DD	FLAT:?IR_OnMouseRelease@IInputReceiver@@UAEXH@Z
	DD	FLAT:?IR_OnMouseHold@CDemoRecord@@UAEXH@Z
	DD	FLAT:?IR_OnMouseWheel@IInputReceiver@@UAEXH@Z
	DD	FLAT:?IR_OnMouseMove@CDemoRecord@@UAEXHH@Z
	DD	FLAT:?IR_OnMouseStop@IInputReceiver@@UAEXHH@Z
	DD	FLAT:?IR_OnKeyboardPress@CDemoRecord@@UAEXH@Z
	DD	FLAT:?IR_OnKeyboardRelease@IInputReceiver@@UAEXH@Z
	DD	FLAT:?IR_OnKeyboardHold@CDemoRecord@@UAEXH@Z
CONST	ENDS
;	COMDAT ??_R4CDemoRecord@@6BIInputReceiver@@@
rdata$r	SEGMENT
??_R4CDemoRecord@@6BIInputReceiver@@@ DD 00H		; CDemoRecord::`RTTI Complete Object Locator'
	DD	018H
	DD	00H
	DD	FLAT:??_R0?AVCDemoRecord@@@8
	DD	FLAT:??_R3CDemoRecord@@8
rdata$r	ENDS
;	COMDAT ??_7CDemoRecord@@6BCEffectorCam@@@
CONST	SEGMENT
??_7CDemoRecord@@6BCEffectorCam@@@ DD FLAT:??_R4CDemoRecord@@6BCEffectorCam@@@ ; CDemoRecord::`vftable'
	DD	FLAT:??_ECDemoRecord@@UAEPAXI@Z
	DD	FLAT:?Valid@CEffectorCam@@UAEHXZ
	DD	FLAT:?ProcessCam@CDemoRecord@@UAEHAAUSCamEffectorInfo@@@Z
	DD	FLAT:?ProcessIfInvalid@CEffectorCam@@UAEXAAUSCamEffectorInfo@@@Z
	DD	FLAT:?AllowProcessingIfInvalid@CEffectorCam@@UAEHXZ
	DD	FLAT:?AbsolutePositioning@CEffectorCam@@UAE_NXZ
CONST	ENDS
;	COMDAT ??_R4CDemoRecord@@6BCEffectorCam@@@
rdata$r	SEGMENT
??_R4CDemoRecord@@6BCEffectorCam@@@ DD 00H		; CDemoRecord::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDemoRecord@@@8
	DD	FLAT:??_R3CDemoRecord@@8
rdata$r	ENDS
;	COMDAT ??_R3CDemoRecord@@8
rdata$r	SEGMENT
??_R3CDemoRecord@@8 DD 00H				; CDemoRecord::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2CDemoRecord@@8
rdata$r	ENDS
;	COMDAT ??_R2CDemoRecord@@8
rdata$r	SEGMENT
??_R2CDemoRecord@@8 DD FLAT:??_R1A@?0A@EA@CDemoRecord@@8 ; CDemoRecord::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CEffectorCam@@8
	DD	FLAT:??_R1A@?0A@EA@SBaseEffector@@8
	DD	FLAT:??_R1BI@?0A@EA@IInputReceiver@@8
	DD	FLAT:??_R1BM@?0A@EA@pureRender@@8
rdata$r	ENDS
;	COMDAT ??_R1BM@?0A@EA@pureRender@@8
rdata$r	SEGMENT
??_R1BM@?0A@EA@pureRender@@8 DD FLAT:??_R0?AVpureRender@@@8 ; pureRender::`RTTI Base Class Descriptor at (28,-1,0,64)'
	DD	00H
	DD	01cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3pureRender@@8
rdata$r	ENDS
;	COMDAT ??_R1BI@?0A@EA@IInputReceiver@@8
rdata$r	SEGMENT
??_R1BI@?0A@EA@IInputReceiver@@8 DD FLAT:??_R0?AVIInputReceiver@@@8 ; IInputReceiver::`RTTI Base Class Descriptor at (24,-1,0,64)'
	DD	00H
	DD	018H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IInputReceiver@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CDemoRecord@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDemoRecord@@8 DD FLAT:??_R0?AVCDemoRecord@@@8 ; CDemoRecord::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDemoRecord@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDemoRecord@@@8
_DATA	SEGMENT
??_R0?AVCDemoRecord@@@8 DD FLAT:??_7type_info@@6B@	; CDemoRecord `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDemoRecord@@', 00H
_DATA	ENDS
;	COMDAT ??_C@_0CJ@DNOMCCAO@run_string?5level?4set_weather?$CI?$CCma@
CONST	SEGMENT
??_C@_0CJ@DNOMCCAO@run_string?5level?4set_weather?$CI?$CCma@ DB 'run_stri'
	DB	'ng level.set_weather("map",true)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FHLEPJHO@?$DN?5ScreenShot?$AA@
CONST	SEGMENT
??_C@_0N@FHLEPJHO@?$DN?5ScreenShot?$AA@ DB '= ScreenShot', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@HIPFDMOH@?$DN?5Level?5Map?5ScreenShot?$CIHigh?5Qual@
CONST	SEGMENT
??_C@_0CF@HIPFDMOH@?$DN?5Level?5Map?5ScreenShot?$CIHigh?5Qual@ DB '= Leve'
	DB	'l Map ScreenShot(High Quality)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DHPNDKLL@?$DN?5Level?5Map?5ScreenShot?$AA@
CONST	SEGMENT
??_C@_0BH@DHPNDKLL@?$DN?5Level?5Map?5ScreenShot?$AA@ DB '= Level Map Scre'
	DB	'enShot', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06PJEMBLKN@?$DN?5Quit?$AA@
CONST	SEGMENT
??_C@_06PJEMBLKN@?$DN?5Quit?$AA@ DB '= Quit', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LBPBFPMO@?$DN?5Cube?5Map?$AA@
CONST	SEGMENT
??_C@_0L@LBPBFPMO@?$DN?5Cube?5Map?$AA@ DB '= Cube Map', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FEBBIANB@?$DN?5Append?5Key?$AA@
CONST	SEGMENT
??_C@_0N@FEBBIANB@?$DN?5Append?5Key?$AA@ DB '= Append Key', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03KIBNPMNE@F12?$AA@
CONST	SEGMENT
??_C@_03KIBNPMNE@F12?$AA@ DB 'F12', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EMHMJELA@LCONTROL?$CLF11?$AA@
CONST	SEGMENT
??_C@_0N@EMHMJELA@LCONTROL?$CLF11?$AA@ DB 'LCONTROL+F11', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03IDDAKPBH@F11?$AA@
CONST	SEGMENT
??_C@_03IDDAKPBH@F11?$AA@ DB 'F11', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MHNPAEMD@ESC?$AA@
CONST	SEGMENT
??_C@_03MHNPAEMD@ESC?$AA@ DB 'ESC', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04FJBHJJME@BACK?$AA@
CONST	SEGMENT
??_C@_04FJBHJJME@BACK?$AA@ DB 'BACK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CAEOFMEP@SPACE?$AA@
CONST	SEGMENT
??_C@_05CAEOFMEP@SPACE?$AA@ DB 'SPACE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DOGMJHO@Key?5frames?5count?3?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BF@DOGMJHO@Key?5frames?5count?3?5?$CFd?$AA@ DB 'Key frames count: '
	DB	'%d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09OPNFHOOA@RECORDING?$AA@
CONST	SEGMENT
??_C@_09OPNFHOOA@RECORDING?$AA@ DB 'RECORDING', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09GODKKBIC@map_?$CFs?$CD?$CFd?$AA@
CONST	SEGMENT
??_C@_09GODKKBIC@map_?$CFs?$CD?$CFd?$AA@ DB 'map_%s#%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06BLHCIAFO@map_?$CFs?$AA@
CONST	SEGMENT
??_C@_06BLHCIAFO@map_?$CFs?$AA@ DB 'map_%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EODFAAJI@ang_speed3?$AA@
CONST	SEGMENT
??_C@_0L@EODFAAJI@ang_speed3?$AA@ DB 'ang_speed3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FHCODBNJ@ang_speed2?$AA@
CONST	SEGMENT
??_C@_0L@FHCODBNJ@ang_speed2?$AA@ DB 'ang_speed2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HMADGCBK@ang_speed1?$AA@
CONST	SEGMENT
??_C@_0L@HMADGCBK@ang_speed1?$AA@ DB 'ang_speed1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GFBIFDFL@ang_speed0?$AA@
CONST	SEGMENT
??_C@_0L@GFBIFDFL@ang_speed0?$AA@ DB 'ang_speed0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FCKOBODG@speed3?$AA@
CONST	SEGMENT
??_C@_06FCKOBODG@speed3?$AA@ DB 'speed3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ELLFCPHH@speed2?$AA@
CONST	SEGMENT
??_C@_06ELLFCPHH@speed2?$AA@ DB 'speed2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GAJIHMLE@speed1?$AA@
CONST	SEGMENT
??_C@_06GAJIHMLE@speed1?$AA@ DB 'speed1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GNMFNDPM@demo_record?$AA@
CONST	SEGMENT
??_C@_0M@GNMFNDPM@demo_record?$AA@ DB 'demo_record', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06HJIDENPF@speed0?$AA@
CONST	SEGMENT
??_C@_06HJIDENPF@speed0?$AA@ DB 'speed0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MPHAKFMF@bound_rect?$AA@
CONST	SEGMENT
??_C@_0L@MPHAKFMF@bound_rect?$AA@ DB 'bound_rect', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09BIPICMMN@level_map?$AA@
CONST	SEGMENT
??_C@_09BIPICMMN@level_map?$AA@ DB 'level_map', 00H	; `string'
_cmNorm	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0bf800000r			; -1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
_cmDir	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0bf800000r			; -1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0bf800000r			; -1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0bf800000r			; -1
_PI	DD	040490fdbr			; 3.14159
EXTRN	__CIasin:PROC
; Function compile flags: /Ogtpy
; File j:\msvs8\vc\include\math.h
;	COMDAT _asinf
_TEXT	SEGMENT
__X$ = 8						; size = 4
_asinf	PROC						; COMDAT

; 391  :         {return ((float)asin((double)_X)); }

	fld	DWORD PTR __X$[esp-4]
	jmp	__CIasin
_asinf	ENDP
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_bitwise.h
_TEXT	ENDS
;	COMDAT ?negative@@YAHABM@Z
_TEXT	SEGMENT
?negative@@YAHABM@Z PROC				; negative, COMDAT
; _f$ = eax

; 25   : 	IC BOOL negative(const float &f)	{ return (*((unsigned*)(&f))&fdSGN);	}

	mov	eax, DWORD PTR [eax]
	and	eax, -2147483648			; 80000000H
	ret	0
?negative@@YAHABM@Z ENDP				; negative
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_flags.h
_TEXT	ENDS
;	COMDAT ?equal@?$_flags@I@@QBEHABU1@I@Z
_TEXT	SEGMENT
?equal@?$_flags@I@@QBEHABU1@I@Z PROC			; _flags<unsigned int>::equal, COMDAT

; 31   : 	IC 	BOOL	equal	(const Self& f, const T mask) 		const	{ return (flags&mask)==(f.flags&mask);}

	mov	eax, DWORD PTR _s_dev_flags
	not	eax
	xor	eax, DWORD PTR ?psDeviceFlags@@3U?$_flags@I@@A ; psDeviceFlags
	and	eax, 1
	ret	0
?equal@?$_flags@I@@QBEHABU1@I@Z ENDP			; _flags<unsigned int>::equal
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?assign@?$_flags@I@@QAEAAU1@ABU1@@Z
_TEXT	SEGMENT
?assign@?$_flags@I@@QAEAAU1@ABU1@@Z PROC		; _flags<unsigned int>::assign, COMDAT
; _this$ = eax
; _f$ = ecx

; 20   : 	IC	SelfRef	assign	(const Self& f)								{ flags =	f.flags;	return *this;	}

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	ret	0
?assign@?$_flags@I@@QAEAAU1@ABU1@@Z ENDP		; _flags<unsigned int>::assign
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_matrix.h
_TEXT	ENDS
;	COMDAT ?build_projection_ortho@?$_matrix@M@@QAEAAU1@MMMM@Z
_TEXT	SEGMENT
_w$ = 8							; size = 4
_h$ = 12						; size = 4
_zn$ = 16						; size = 4
?build_projection_ortho@?$_matrix@M@@QAEAAU1@MMMM@Z PROC ; _matrix<float>::build_projection_ortho, COMDAT
; _this$ = eax
; _zf$ = xmm2s

; 418  : 		_11	= T(2)/w;	_12 = 0;		_13 = 0;			_14 = 0;

	movss	xmm1, DWORD PTR __real@40000000

; 419  : 		_21 = 0;		_22 = T(2)/h;	_23	= 0;			_24	= 0;
; 420  : 		_31 = 0;		_32 = 0;		_33	= T(1)/(zf-zn);	_34	= 0;

	movss	xmm3, DWORD PTR __real@3f800000
	movaps	xmm0, xmm1
	divss	xmm0, DWORD PTR _w$[esp-4]
	divss	xmm1, DWORD PTR _h$[esp-4]
	movss	DWORD PTR [eax], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+20], xmm1
	movss	xmm1, DWORD PTR _zn$[esp-4]
	movss	DWORD PTR [eax+4], xmm0
	movss	DWORD PTR [eax+8], xmm0
	movss	DWORD PTR [eax+12], xmm0
	movss	DWORD PTR [eax+16], xmm0
	movss	DWORD PTR [eax+24], xmm0
	movss	DWORD PTR [eax+28], xmm0
	movss	DWORD PTR [eax+32], xmm0
	movss	DWORD PTR [eax+36], xmm0
	movss	DWORD PTR [eax+44], xmm0

; 421  : 		_41 = 0;		_42 = 0;		_43	= zn/(zn-zf);	_44	= T(1);

	movss	DWORD PTR [eax+48], xmm0
	movss	DWORD PTR [eax+52], xmm0
	movaps	xmm0, xmm1
	movaps	xmm4, xmm2
	subss	xmm4, xmm1
	movaps	xmm5, xmm3
	subss	xmm0, xmm2
	divss	xmm5, xmm4
	divss	xmm1, xmm0
	movss	DWORD PTR [eax+40], xmm5
	movss	DWORD PTR [eax+56], xmm1
	movss	DWORD PTR [eax+60], xmm3

; 422  : 		return *this; 
; 423  : 	}

	ret	12					; 0000000cH
?build_projection_ortho@?$_matrix@M@@QAEAAU1@MMMM@Z ENDP ; _matrix<float>::build_projection_ortho
_TEXT	ENDS
PUBLIC	?MakeScreenshot@CDemoRecord@@AAEXXZ		; CDemoRecord::MakeScreenshot
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\fdemorecord.cpp
;	COMDAT ?MakeScreenshot@CDemoRecord@@AAEXXZ
_TEXT	SEGMENT
?MakeScreenshot@CDemoRecord@@AAEXXZ PROC		; CDemoRecord::MakeScreenshot, COMDAT
; _this$ = ecx

; 517  : 	m_bMakeScreenshot = TRUE;

	mov	DWORD PTR [ecx+184], 1

; 518  : 	m_Stage = 0;

	mov	DWORD PTR [ecx+128], 0

; 519  : }

	ret	0
?MakeScreenshot@CDemoRecord@@AAEXXZ ENDP		; CDemoRecord::MakeScreenshot
_TEXT	ENDS
PUBLIC	?MakeCubemap@CDemoRecord@@AAEXXZ		; CDemoRecord::MakeCubemap
; Function compile flags: /Ogtpy
;	COMDAT ?MakeCubemap@CDemoRecord@@AAEXXZ
_TEXT	SEGMENT
?MakeCubemap@CDemoRecord@@AAEXXZ PROC			; CDemoRecord::MakeCubemap, COMDAT
; _this$ = ecx

; 511  : 	m_bMakeCubeMap	= TRUE;

	mov	DWORD PTR [ecx+180], 1

; 512  : 	m_Stage			= 0;

	mov	DWORD PTR [ecx+128], 0

; 513  : }

	ret	0
?MakeCubemap@CDemoRecord@@AAEXXZ ENDP			; CDemoRecord::MakeCubemap
_TEXT	ENDS
PUBLIC	?GetLM_BBox@@YAXAAV?$_box3@M@@H@Z		; GetLM_BBox
; Function compile flags: /Ogtpy
;	COMDAT ?GetLM_BBox@@YAXAAV?$_box3@M@@H@Z
_TEXT	SEGMENT
?GetLM_BBox@@YAXAAV?$_box3@M@@H@Z PROC			; GetLM_BBox, COMDAT
; _Step$ = eax

; 155  : 	float half_x = bb.min.x + (bb.max.x - bb.min.x)/2;
; 156  : 	float half_z = bb.min.z + (bb.max.z - bb.min.z)/2;
; 157  : 	switch (Step)

	cmp	eax, 3
	movss	xmm1, DWORD PTR ?curr_lm_fbox@@3V?$_box3@M@@A
	movss	xmm0, DWORD PTR ?curr_lm_fbox@@3V?$_box3@M@@A+12
	movss	xmm2, DWORD PTR __real@3f000000
	movss	xmm3, DWORD PTR ?curr_lm_fbox@@3V?$_box3@M@@A+8
	subss	xmm0, xmm1
	mulss	xmm0, xmm2
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR ?curr_lm_fbox@@3V?$_box3@M@@A+20
	subss	xmm1, xmm3
	mulss	xmm1, xmm2
	addss	xmm1, xmm3
	ja	SHORT $LN1@GetLM_BBox
	jmp	DWORD PTR $LN11@GetLM_BBox[eax*4]
$LN5@GetLM_BBox:

; 158  : 	{
; 159  : 	case 0:
; 160  : 		{
; 161  : 			bb.max.x = half_x;

	movss	DWORD PTR ?curr_lm_fbox@@3V?$_box3@M@@A+12, xmm0

; 162  : 			bb.min.z = half_z;

	movss	DWORD PTR ?curr_lm_fbox@@3V?$_box3@M@@A+8, xmm1

; 178  : 		}break;
; 179  : 	default:
; 180  : 		{			
; 181  : 		}break;
; 182  : 		
; 183  : 	}
; 184  : };

	ret	0
$LN4@GetLM_BBox:

; 163  : 		}break;
; 164  : 	case 1:
; 165  : 		{
; 166  : 			bb.min.x = half_x;
; 167  : 			bb.min.z = half_z;

	movss	DWORD PTR ?curr_lm_fbox@@3V?$_box3@M@@A+8, xmm1

; 173  : 		}break;
; 174  : 	case 3:
; 175  : 		{
; 176  : 			bb.min.x = half_x;

	movss	DWORD PTR ?curr_lm_fbox@@3V?$_box3@M@@A, xmm0

; 178  : 		}break;
; 179  : 	default:
; 180  : 		{			
; 181  : 		}break;
; 182  : 		
; 183  : 	}
; 184  : };

	ret	0
$LN3@GetLM_BBox:

; 168  : 		}break;
; 169  : 	case 2:
; 170  : 		{
; 171  : 			bb.max.x = half_x;

	movss	DWORD PTR ?curr_lm_fbox@@3V?$_box3@M@@A+12, xmm0

; 172  : 			bb.max.z = half_z;

	movss	DWORD PTR ?curr_lm_fbox@@3V?$_box3@M@@A+20, xmm1

; 178  : 		}break;
; 179  : 	default:
; 180  : 		{			
; 181  : 		}break;
; 182  : 		
; 183  : 	}
; 184  : };

	ret	0
$LN2@GetLM_BBox:

; 177  : 			bb.max.z = half_z;

	movss	DWORD PTR ?curr_lm_fbox@@3V?$_box3@M@@A+20, xmm1
	movss	DWORD PTR ?curr_lm_fbox@@3V?$_box3@M@@A, xmm0
$LN1@GetLM_BBox:

; 178  : 		}break;
; 179  : 	default:
; 180  : 		{			
; 181  : 		}break;
; 182  : 		
; 183  : 	}
; 184  : };

	ret	0
$LN11@GetLM_BBox:
	DD	$LN5@GetLM_BBox
	DD	$LN4@GetLM_BBox
	DD	$LN3@GetLM_BBox
	DD	$LN2@GetLM_BBox
?GetLM_BBox@@YAXAAV?$_box3@M@@H@Z ENDP			; GetLM_BBox
_TEXT	ENDS
PUBLIC	?get_level_screenshot_bound@@YA?AV?$_box3@M@@XZ	; get_level_screenshot_bound
; Function compile flags: /Ogtpy
;	COMDAT ?get_level_screenshot_bound@@YA?AV?$_box3@M@@XZ
_TEXT	SEGMENT
_res2d$128949 = -20					; size = 16
?get_level_screenshot_bound@@YA?AV?$_box3@M@@XZ PROC	; get_level_screenshot_bound, COMDAT
; $T214229 = esi

; 49   : 	Fbox res			=  g_pGameLevel->ObjectSpace.GetBoundingVolume();

	mov	eax, DWORD PTR ?g_pGameLevel@@3PAVIGame_Level@@A ; g_pGameLevel
	mov	ecx, DWORD PTR [eax+262324]
	mov	edx, DWORD PTR [eax+262328]
	mov	DWORD PTR [esi], ecx
	mov	ecx, DWORD PTR [eax+262332]
	mov	DWORD PTR [esi+4], edx
	mov	edx, DWORD PTR [eax+262336]
	mov	DWORD PTR [esi+8], ecx
	mov	ecx, DWORD PTR [eax+262340]
	mov	DWORD PTR [esi+12], edx
	mov	edx, DWORD PTR [eax+262344]
	sub	esp, 20					; 00000014H
	mov	DWORD PTR [esi+16], ecx

; 50   : 	if(g_pGameLevel->pLevel->section_exist("level_map"))

	mov	ecx, DWORD PTR [eax+262400]
	push	OFFSET ??_C@_09BIPICMMN@level_map?$AA@
	mov	DWORD PTR [esi+20], edx
	call	DWORD PTR __imp_?section_exist@CInifile@@QBEHPBD@Z
	test	eax, eax
	je	SHORT $LN6@get_level_

; 51   : 	{
; 52   : 		Fvector4 res2d = g_pGameLevel->pLevel->r_fvector4("level_map","bound_rect");

	mov	ecx, DWORD PTR ?g_pGameLevel@@3PAVIGame_Level@@A ; g_pGameLevel
	mov	ecx, DWORD PTR [ecx+262400]
	push	OFFSET ??_C@_0L@MPHAKFMF@bound_rect?$AA@
	push	OFFSET ??_C@_09BIPICMMN@level_map?$AA@
	lea	eax, DWORD PTR _res2d$128949[esp+28]
	push	eax
	call	DWORD PTR __imp_?r_fvector4@CInifile@@QBE?AU?$_vector4@M@@PBD0@Z

; 53   : 		res.min.x = res2d.x;

	movss	xmm0, DWORD PTR _res2d$128949[esp+20]
	movss	DWORD PTR [esi], xmm0

; 54   : 		res.min.z = res2d.y;

	movss	xmm0, DWORD PTR _res2d$128949[esp+24]
	movss	DWORD PTR [esi+8], xmm0

; 55   : 
; 56   : 		res.max.x = res2d.z;

	movss	xmm0, DWORD PTR _res2d$128949[esp+28]
	movss	DWORD PTR [esi+12], xmm0

; 57   : 		res.max.z = res2d.w;

	movss	xmm0, DWORD PTR _res2d$128949[esp+32]
	movss	DWORD PTR [esi+20], xmm0
$LN6@get_level_:

; 58   : 	}
; 59   : 
; 60   : 	return res;

	mov	eax, esi

; 61   : }

	add	esp, 20					; 00000014H
	ret	0
?get_level_screenshot_bound@@YA?AV?$_box3@M@@XZ ENDP	; get_level_screenshot_bound
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_fbox.h
;	COMDAT ?xform@?$_box3@M@@QAEAAV1@ABV1@ABU?$_matrix@M@@@Z
_TEXT	SEGMENT
_vy$ = -36						; size = 12
_vz$ = -24						; size = 12
_vx$ = -12						; size = 12
?xform@?$_box3@M@@QAEAAV1@ABV1@ABU?$_matrix@M@@@Z PROC	; _box3<float>::xform, COMDAT
; _this$ = eax
; _B$ = edx
; _m$ = ecx

; 60   : 	{

	sub	esp, 36					; 00000024H

; 61   : 		// The three edges transformed: you can efficiently transform an X-only vector3
; 62   : 		// by just getting the "X" column of the matrix
; 63   : 		Tvector vx,vy,vz;
; 64   : 		vx.mul				(m.i, B.max.x-B.min.x);	

	movss	xmm1, DWORD PTR [ecx]
	movss	xmm6, DWORD PTR [edx]
	movss	xmm0, DWORD PTR [edx+12]
	movss	xmm3, DWORD PTR [ecx+4]
	movss	xmm5, DWORD PTR [ecx+8]

; 65   : 		vy.mul				(m.j, B.max.y-B.min.y);	

	movss	xmm2, DWORD PTR [edx+4]
	movss	xmm7, DWORD PTR [ecx+16]
	subss	xmm0, xmm6
	mulss	xmm3, xmm0
	mulss	xmm5, xmm0
	movaps	xmm4, xmm1
	mulss	xmm4, xmm0
	movss	xmm0, DWORD PTR [edx+16]
	subss	xmm0, xmm2
	mulss	xmm7, xmm0

; 66   : 		vz.mul				(m.k, B.max.z-B.min.z);	
; 67   : 		
; 68   : 		// Transform the min point
; 69   : 		m.transform_tiny	(min,B.min);

	mulss	xmm2, DWORD PTR [ecx+16]
	movss	DWORD PTR _vy$[esp+36], xmm7
	movss	xmm7, DWORD PTR [ecx+20]
	mulss	xmm7, xmm0
	movss	DWORD PTR _vy$[esp+40], xmm7
	movss	xmm7, DWORD PTR [ecx+24]
	mulss	xmm7, xmm0
	movss	xmm0, DWORD PTR [edx+20]
	movss	DWORD PTR _vy$[esp+44], xmm7
	movss	xmm7, DWORD PTR [edx+8]
	subss	xmm0, xmm7
	movss	xmm7, DWORD PTR [ecx+32]
	mulss	xmm7, xmm0
	movss	DWORD PTR _vz$[esp+36], xmm7
	movss	xmm7, DWORD PTR [ecx+36]
	mulss	xmm7, xmm0
	movss	DWORD PTR _vz$[esp+40], xmm7
	movss	xmm7, DWORD PTR [ecx+40]
	mulss	xmm7, xmm0
	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm1, xmm6
	movss	DWORD PTR _vz$[esp+44], xmm7
	movss	xmm7, DWORD PTR [ecx+32]
	mulss	xmm7, xmm0
	addss	xmm7, xmm2
	addss	xmm7, xmm1
	addss	xmm7, DWORD PTR [ecx+48]
	movss	DWORD PTR [eax], xmm7

; 70   : 		max.set				(min);

	fld	DWORD PTR [eax]
	movss	xmm0, DWORD PTR [ecx+36]
	mulss	xmm0, DWORD PTR [edx+8]
	movss	xmm1, DWORD PTR [ecx+20]
	mulss	xmm1, DWORD PTR [edx+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [edx]
	mulss	xmm1, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR [ecx+52]
	movss	DWORD PTR [eax+4], xmm0
	movss	xmm0, DWORD PTR [ecx+40]
	mulss	xmm0, DWORD PTR [edx+8]
	movss	xmm1, DWORD PTR [ecx+24]
	mulss	xmm1, DWORD PTR [edx+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [edx]
	mulss	xmm1, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR [ecx+56]
	movss	DWORD PTR [eax+8], xmm0
	fstp	DWORD PTR [eax+12]
	fld	DWORD PTR [eax+4]
	movss	DWORD PTR _vx$[esp+36], xmm4
	fstp	DWORD PTR [eax+16]

; 71   : 		
; 72   : 		// Take the transformed min & axes and find _new_ extents
; 73   : 		// Using CPU code in the right place is faster...
; 74   : 		if(negative(vx.x))	min.x += vx.x; else max.x += vx.x;

	mov	ecx, -2147483648			; 80000000H
	test	DWORD PTR _vx$[esp+36], ecx
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR [eax+20]
	movss	DWORD PTR _vx$[esp+40], xmm3
	movss	DWORD PTR _vx$[esp+44], xmm5
	je	SHORT $LN18@xform
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, xmm4
	movss	DWORD PTR [eax], xmm0
	jmp	SHORT $LN17@xform
$LN18@xform:
	movss	xmm0, DWORD PTR [eax+12]
	addss	xmm0, xmm4
	movss	DWORD PTR [eax+12], xmm0
$LN17@xform:

; 75   : 		if(negative(vx.y))	min.y += vx.y; else max.y += vx.y;

	test	DWORD PTR _vx$[esp+40], ecx
	je	SHORT $LN16@xform
	addss	xmm3, DWORD PTR [eax+4]
	movss	DWORD PTR [eax+4], xmm3
	jmp	SHORT $LN15@xform
$LN16@xform:
	movss	xmm0, DWORD PTR [eax+16]
	addss	xmm0, xmm3
	movss	DWORD PTR [eax+16], xmm0
$LN15@xform:

; 76   : 		if(negative(vx.z))	min.z += vx.z; else max.z += vx.z;

	test	DWORD PTR _vx$[esp+44], ecx
	je	SHORT $LN14@xform
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, xmm5
	movss	DWORD PTR [eax+8], xmm0
	jmp	SHORT $LN13@xform
$LN14@xform:
	addss	xmm5, DWORD PTR [eax+20]
	movss	DWORD PTR [eax+20], xmm5
$LN13@xform:

; 77   : 		if(negative(vy.x))	min.x += vy.x; else max.x += vy.x;

	test	DWORD PTR _vy$[esp+36], ecx
	je	SHORT $LN12@xform
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR _vy$[esp+36]
	movss	DWORD PTR [eax], xmm0
	jmp	SHORT $LN11@xform
$LN12@xform:
	movss	xmm0, DWORD PTR [eax+12]
	addss	xmm0, DWORD PTR _vy$[esp+36]
	movss	DWORD PTR [eax+12], xmm0
$LN11@xform:

; 78   : 		if(negative(vy.y))	min.y += vy.y; else max.y += vy.y;

	test	DWORD PTR _vy$[esp+40], ecx
	je	SHORT $LN10@xform
	movss	xmm0, DWORD PTR _vy$[esp+40]
	addss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR [eax+4], xmm0
	jmp	SHORT $LN9@xform
$LN10@xform:
	movss	xmm0, DWORD PTR [eax+16]
	addss	xmm0, DWORD PTR _vy$[esp+40]
	movss	DWORD PTR [eax+16], xmm0
$LN9@xform:

; 79   : 		if(negative(vy.z))	min.z += vy.z; else max.z += vy.z;

	test	DWORD PTR _vy$[esp+44], ecx
	je	SHORT $LN8@xform
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR _vy$[esp+44]
	movss	DWORD PTR [eax+8], xmm0
	jmp	SHORT $LN7@xform
$LN8@xform:
	movss	xmm0, DWORD PTR _vy$[esp+44]
	addss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR [eax+20], xmm0
$LN7@xform:

; 80   : 		if(negative(vz.x))	min.x += vz.x; else max.x += vz.x;

	test	DWORD PTR _vz$[esp+36], ecx
	je	SHORT $LN6@xform
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR _vz$[esp+36]
	movss	DWORD PTR [eax], xmm0
	jmp	SHORT $LN5@xform
$LN6@xform:
	movss	xmm0, DWORD PTR [eax+12]
	addss	xmm0, DWORD PTR _vz$[esp+36]
	movss	DWORD PTR [eax+12], xmm0
$LN5@xform:

; 81   : 		if(negative(vz.y))	min.y += vz.y; else max.y += vz.y;

	test	DWORD PTR _vz$[esp+40], ecx
	je	SHORT $LN4@xform
	movss	xmm0, DWORD PTR _vz$[esp+40]
	addss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR [eax+4], xmm0
	jmp	SHORT $LN3@xform
$LN4@xform:
	movss	xmm0, DWORD PTR [eax+16]
	addss	xmm0, DWORD PTR _vz$[esp+40]
	movss	DWORD PTR [eax+16], xmm0
$LN3@xform:

; 82   : 		if(negative(vz.z))	min.z += vz.z; else max.z += vz.z;

	test	DWORD PTR _vz$[esp+44], ecx
	je	SHORT $LN2@xform
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR _vz$[esp+44]
	movss	DWORD PTR [eax+8], xmm0

; 83   : 		return *this;
; 84   : 	}

	add	esp, 36					; 00000024H
	ret	0
$LN2@xform:

; 82   : 		if(negative(vz.z))	min.z += vz.z; else max.z += vz.z;

	movss	xmm0, DWORD PTR _vz$[esp+44]
	addss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR [eax+20], xmm0

; 83   : 		return *this;
; 84   : 	}

	add	esp, 36					; 00000024H
	ret	0
?xform@?$_box3@M@@QAEAAV1@ABV1@ABU?$_matrix@M@@@Z ENDP	; _box3<float>::xform
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_vector3d.h
_TEXT	ENDS
;	COMDAT ?normalize_safe@?$_vector3@M@@QAEAAU1@XZ
_TEXT	SEGMENT
tv138 = -12						; size = 4
tv134 = -8						; size = 4
tv130 = -4						; size = 4
?normalize_safe@?$_vector3@M@@QAEAAU1@XZ PROC		; _vector3<float>::normalize_safe, COMDAT
; _this$ = esi

; 199  : 	{

	sub	esp, 12					; 0000000cH

; 200  : 		T magnitude=x*x + y*y + z*z;

	movss	xmm2, DWORD PTR [esi+4]
	movss	xmm1, DWORD PTR [esi+8]
	movss	xmm0, DWORD PTR [esi]
	movaps	xmm3, xmm2
	movss	DWORD PTR tv138[esp+12], xmm0
	mulss	xmm3, xmm2
	movss	DWORD PTR tv134[esp+12], xmm2
	mulss	xmm0, xmm0
	movaps	xmm2, xmm1
	addss	xmm0, xmm3
	mulss	xmm2, xmm1
	addss	xmm0, xmm2

; 201  : 		if (magnitude> std::numeric_limits<T>::min()) {

	comiss	xmm0, DWORD PTR __real@00800000
	movss	DWORD PTR tv130[esp+12], xmm1
	jbe	SHORT $LN10@normalize_

; 202  : 			magnitude=_sqrt(1/magnitude);

	movss	xmm1, DWORD PTR __real@3f800000
	push	ecx
	divss	xmm1, xmm0
	movss	DWORD PTR [esp], xmm1
	call	_sqrtf

; 203  : 			x *= magnitude;

	fld	DWORD PTR tv138[esp+16]
	fmul	ST(0), ST(1)
	add	esp, 4
	fstp	DWORD PTR [esi]

; 204  : 			y *= magnitude;

	fld	DWORD PTR tv134[esp+12]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esi+4]

; 205  : 			z *= magnitude;

	fmul	DWORD PTR tv130[esp+12]
	fstp	DWORD PTR [esi+8]
$LN10@normalize_:

; 206  : 		}
; 207  : 		return *this;	

	mov	eax, esi

; 208  : 	}

	add	esp, 12					; 0000000cH
	ret	0
?normalize_safe@?$_vector3@M@@QAEAAU1@XZ ENDP		; _vector3<float>::normalize_safe
_TEXT	ENDS
PUBLIC	?RecordKey@CDemoRecord@@AAEXXZ			; CDemoRecord::RecordKey
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\fdemorecord.cpp
;	COMDAT ?RecordKey@CDemoRecord@@AAEXXZ
_TEXT	SEGMENT
_g_matView$ = -64					; size = 64
?RecordKey@CDemoRecord@@AAEXXZ PROC			; CDemoRecord::RecordKey, COMDAT
; _this$ = ecx

; 501  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 68					; 00000044H
	push	esi
	mov	esi, ecx

; 502  : 	Fmatrix			g_matView;
; 503  :  
; 504  : 	g_matView.invert(m_Camera);

	lea	ecx, DWORD PTR [esi+64]
	lea	eax, DWORD PTR _g_matView$[esp+72]
	call	?invert@?$_matrix@M@@QAEAAU1@ABU1@@Z	; _matrix<float>::invert

; 505  : 	file->w			(&g_matView,sizeof(Fmatrix));

	mov	ecx, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+12]
	push	64					; 00000040H
	lea	edx, DWORD PTR _g_matView$[esp+76]
	push	edx
	call	eax

; 506  : 	iCount++;

	add	DWORD PTR [esi+32], 1

; 507  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?RecordKey@CDemoRecord@@AAEXXZ ENDP			; CDemoRecord::RecordKey
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?update_whith_timescale@@YAXAAU?$_vector3@M@@ABU1@@Z
_TEXT	SEGMENT
?update_whith_timescale@@YAXAAU?$_vector3@M@@ABU1@@Z PROC ; update_whith_timescale, COMDAT
; _v$ = eax
; _v_delta$ = ecx

; 425  : 	VERIFY(!fis_zero(Device.time_factor()));
; 426  : 	float scale = 1.f/Device.time_factor();

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR ?Device@@3VCRenderDevice@@A+544

; 427  : 	v.mad( v, v_delta, scale );

	movss	xmm1, DWORD PTR [ecx]
	mulss	xmm1, xmm0
	addss	xmm1, DWORD PTR [eax]
	movss	DWORD PTR [eax], xmm1
	movss	xmm1, DWORD PTR [ecx+4]
	mulss	xmm1, xmm0
	addss	xmm1, DWORD PTR [eax+4]
	movss	DWORD PTR [eax+4], xmm1
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, xmm0
	addss	xmm1, DWORD PTR [eax+8]
	movss	DWORD PTR [eax+8], xmm1

; 428  : }

	ret	0
?update_whith_timescale@@YAXAAU?$_vector3@M@@ABU1@@Z ENDP ; update_whith_timescale
_TEXT	ENDS
PUBLIC	?MakeCubeMapFace@CDemoRecord@@AAEXAAU?$_vector3@M@@0@Z ; CDemoRecord::MakeCubeMapFace
; Function compile flags: /Ogtpy
;	COMDAT ?MakeCubeMapFace@CDemoRecord@@AAEXAAU?$_vector3@M@@0@Z
_TEXT	SEGMENT
_buf$ = -32						; size = 32
_D$ = 8							; size = 4
_N$ = 12						; size = 4
?MakeCubeMapFace@CDemoRecord@@AAEXAAU?$_vector3@M@@0@Z PROC ; CDemoRecord::MakeCubeMapFace, COMDAT
; _this$ = ecx

; 245  : {

	sub	esp, 32					; 00000020H
	push	esi
	mov	esi, ecx

; 246  : 	string32 buf;
; 247  : 	switch (m_Stage){

	mov	eax, DWORD PTR [esi+128]
	cmp	eax, 6
	ja	$LN4@MakeCubeMa
	push	edi
	jmp	DWORD PTR $LN27@MakeCubeMa[eax*4]
$LN3@MakeCubeMa:

; 248  : 	case 0:
; 249  : 		N.set		(cmNorm[m_Stage]);

	movss	xmm0, DWORD PTR _cmNorm
	mov	eax, DWORD PTR _N$[esp+36]

; 250  : 		D.set		(cmDir[m_Stage]);

	mov	ecx, DWORD PTR _D$[esp+36]
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR _cmNorm+4
	movss	DWORD PTR [eax+4], xmm0
	movss	xmm0, DWORD PTR _cmNorm+8
	movss	DWORD PTR [eax+8], xmm0
	mov	eax, DWORD PTR [esi+128]
	lea	eax, DWORD PTR [eax+eax*2]
	fld	DWORD PTR _cmDir[eax*4]
	lea	eax, DWORD PTR _cmDir[eax*4]
	fstp	DWORD PTR [ecx]
	pop	edi
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [ecx+4]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR [ecx+8]

; 251  : 		s_hud_flag.assign(psHUD_Flags);

	mov	eax, DWORD PTR ?psHUD_Flags@@3U?$_flags@I@@A ; psHUD_Flags
	mov	DWORD PTR _s_hud_flag, eax

; 252  : 		psHUD_Flags.assign	(0);

	mov	DWORD PTR ?psHUD_Flags@@3U?$_flags@I@@A, 0 ; psHUD_Flags

; 269  : 	break;
; 270  : 	}
; 271  : 	m_Stage++;

	add	DWORD PTR [esi+128], 1
	pop	esi

; 272  : }

	add	esp, 32					; 00000020H
	ret	8
$LN2@MakeCubeMa:

; 253  : 	break;
; 254  : 	case 1:
; 255  : 	case 2:
; 256  : 	case 3:
; 257  : 	case 4:
; 258  : 	case 5:
; 259  : 		N.set		(cmNorm[m_Stage]);

	mov	ecx, DWORD PTR _N$[esp+36]
	lea	eax, DWORD PTR [eax+eax*2]
	fld	DWORD PTR _cmNorm[eax*4]
	lea	eax, DWORD PTR _cmNorm[eax*4]
	fstp	DWORD PTR [ecx]

; 260  : 		D.set		(cmDir[m_Stage]);
; 261  : 		Render->Screenshot	(IRender_interface::SM_FOR_CUBEMAP,itoa(m_Stage,buf,10));

	push	10					; 0000000aH
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [ecx+4]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [esi+128]
	mov	ecx, DWORD PTR _D$[esp+40]
	lea	eax, DWORD PTR [eax+eax*2]
	fld	DWORD PTR _cmDir[eax*4]
	lea	eax, DWORD PTR _cmDir[eax*4]
	fstp	DWORD PTR [ecx]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [ecx+4]
	fld	DWORD PTR [eax+8]
	lea	eax, DWORD PTR _buf$[esp+44]
	fstp	DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR __imp_?Render@@3PAVIRender_interface@@A
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [esi+128]
	mov	edi, DWORD PTR [edx]
	push	eax
	push	ecx
	call	DWORD PTR __imp__itoa
	mov	edx, DWORD PTR __imp_?Render@@3PAVIRender_interface@@A
	mov	ecx, DWORD PTR [edx]
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR [edi+196]
	push	1
	call	eax

; 269  : 	break;
; 270  : 	}
; 271  : 	m_Stage++;

	add	DWORD PTR [esi+128], 1
	pop	edi
	pop	esi

; 272  : }

	add	esp, 32					; 00000020H
	ret	8
$LN1@MakeCubeMa:

; 262  : 	break;
; 263  : 	case 6:
; 264  : 		Render->Screenshot	(IRender_interface::SM_FOR_CUBEMAP,itoa(m_Stage,buf,10));

	mov	ecx, DWORD PTR __imp_?Render@@3PAVIRender_interface@@A
	mov	edx, DWORD PTR [ecx]
	mov	edi, DWORD PTR [edx]
	push	10					; 0000000aH
	lea	eax, DWORD PTR _buf$[esp+44]
	push	eax
	push	6
	call	DWORD PTR __imp__itoa
	mov	ecx, DWORD PTR __imp_?Render@@3PAVIRender_interface@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edi+196]
	add	esp, 12					; 0000000cH
	push	eax
	push	1
	call	edx

; 265  : 		N.set		(m_Camera.j);

	fld	DWORD PTR [esi+80]
	mov	eax, DWORD PTR _N$[esp+36]
	fstp	DWORD PTR [eax]
	fld	DWORD PTR [esi+84]
	fstp	DWORD PTR [eax+4]
	fld	DWORD PTR [esi+88]
	fstp	DWORD PTR [eax+8]

; 266  : 		D.set		(m_Camera.k);

	mov	eax, DWORD PTR _D$[esp+36]
	fld	DWORD PTR [esi+96]
	fstp	DWORD PTR [eax]
	fld	DWORD PTR [esi+100]
	fstp	DWORD PTR [eax+4]
	fld	DWORD PTR [esi+104]
	fstp	DWORD PTR [eax+8]

; 267  : 		psHUD_Flags.assign(s_hud_flag);

	mov	eax, DWORD PTR _s_hud_flag
	mov	DWORD PTR ?psHUD_Flags@@3U?$_flags@I@@A, eax ; psHUD_Flags

; 268  : 		m_bMakeCubeMap = FALSE;

	mov	DWORD PTR [esi+180], 0
$LN26@MakeCubeMa:
	pop	edi
$LN4@MakeCubeMa:

; 269  : 	break;
; 270  : 	}
; 271  : 	m_Stage++;

	add	DWORD PTR [esi+128], 1
	pop	esi

; 272  : }

	add	esp, 32					; 00000020H
	ret	8
	npad	2
$LN27@MakeCubeMa:
	DD	$LN3@MakeCubeMa
	DD	$LN2@MakeCubeMa
	DD	$LN2@MakeCubeMa
	DD	$LN2@MakeCubeMa
	DD	$LN2@MakeCubeMa
	DD	$LN2@MakeCubeMa
	DD	$LN1@MakeCubeMa
?MakeCubeMapFace@CDemoRecord@@AAEXAAU?$_vector3@M@@0@Z ENDP ; CDemoRecord::MakeCubeMapFace
_TEXT	ENDS
PUBLIC	?MakeScreenshotFace@CDemoRecord@@AAEXXZ		; CDemoRecord::MakeScreenshotFace
; Function compile flags: /Ogtpy
;	COMDAT ?MakeScreenshotFace@CDemoRecord@@AAEXXZ
_TEXT	SEGMENT
?MakeScreenshotFace@CDemoRecord@@AAEXXZ PROC		; CDemoRecord::MakeScreenshotFace, COMDAT
; _this$ = ecx

; 137  : {

	push	esi
	mov	esi, ecx

; 138  : 	switch (m_Stage){

	mov	eax, DWORD PTR [esi+128]
	sub	eax, 0
	je	SHORT $LN2@MakeScreen
	sub	eax, 1
	jne	SHORT $LN13@MakeScreen

; 142  : 	break;
; 143  : 	case 1:
; 144  : 		Render->Screenshot	();

	mov	eax, DWORD PTR __imp_?Render@@3PAVIRender_interface@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+196]
	push	0
	push	0
	call	eax

; 145  : 		psHUD_Flags.assign	(s_hud_flag);

	mov	ecx, DWORD PTR _s_hud_flag
	mov	DWORD PTR ?psHUD_Flags@@3U?$_flags@I@@A, ecx ; psHUD_Flags

; 146  : 		m_bMakeScreenshot= FALSE;
; 147  : 	break;
; 148  : 	}
; 149  : 	m_Stage++;

	add	DWORD PTR [esi+128], 1
	mov	DWORD PTR [esi+184], 0
	pop	esi

; 150  : }

	ret	0
$LN2@MakeScreen:

; 139  : 	case 0:
; 140  : 		s_hud_flag.assign	(psHUD_Flags);

	mov	edx, DWORD PTR ?psHUD_Flags@@3U?$_flags@I@@A ; psHUD_Flags
	mov	DWORD PTR _s_hud_flag, edx

; 141  : 		psHUD_Flags.assign	(0);

	mov	DWORD PTR ?psHUD_Flags@@3U?$_flags@I@@A, 0 ; psHUD_Flags
$LN13@MakeScreen:

; 146  : 		m_bMakeScreenshot= FALSE;
; 147  : 	break;
; 148  : 	}
; 149  : 	m_Stage++;

	add	DWORD PTR [esi+128], 1
	pop	esi

; 150  : }

	ret	0
?MakeScreenshotFace@CDemoRecord@@AAEXXZ ENDP		; CDemoRecord::MakeScreenshotFace
_TEXT	ENDS
PUBLIC	?GetGlobalPosition@CDemoRecord@@SAXAAU?$_vector3@M@@@Z ; CDemoRecord::GetGlobalPosition
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\fdemorecord.h
;	COMDAT ?GetGlobalPosition@CDemoRecord@@SAXAAU?$_vector3@M@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?GetGlobalPosition@CDemoRecord@@SAXAAU?$_vector3@M@@@Z PROC ; CDemoRecord::GetGlobalPosition, COMDAT

; 64   : 	static	void GetGlobalPosition		( Fvector &p ) { p.set( g_position.p ); }

	movss	xmm0, DWORD PTR ?g_position@CDemoRecord@@0Uforce_position@1@A+1
	mov	eax, DWORD PTR _p$[esp-4]
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR ?g_position@CDemoRecord@@0Uforce_position@1@A+5
	movss	DWORD PTR [eax+4], xmm0
	movss	xmm0, DWORD PTR ?g_position@CDemoRecord@@0Uforce_position@1@A+9
	movss	DWORD PTR [eax+8], xmm0
	ret	0
?GetGlobalPosition@CDemoRecord@@SAXAAU?$_vector3@M@@@Z ENDP ; CDemoRecord::GetGlobalPosition
_TEXT	ENDS
PUBLIC	?SetGlobalPosition@CDemoRecord@@SAXABU?$_vector3@M@@@Z ; CDemoRecord::SetGlobalPosition
; Function compile flags: /Ogtpy
;	COMDAT ?SetGlobalPosition@CDemoRecord@@SAXABU?$_vector3@M@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?SetGlobalPosition@CDemoRecord@@SAXABU?$_vector3@M@@@Z PROC ; CDemoRecord::SetGlobalPosition, COMDAT

; 63   : 	static	void SetGlobalPosition		( const Fvector &p ) { g_position.p.set(p), g_position.set_position= true; }

	mov	eax, DWORD PTR _p$[esp-4]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR ?g_position@CDemoRecord@@0Uforce_position@1@A+1, xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR ?g_position@CDemoRecord@@0Uforce_position@1@A+5, xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR ?g_position@CDemoRecord@@0Uforce_position@1@A+9, xmm0
	mov	BYTE PTR ?g_position@CDemoRecord@@0Uforce_position@1@A, 1
	ret	0
?SetGlobalPosition@CDemoRecord@@SAXABU?$_vector3@M@@@Z ENDP ; CDemoRecord::SetGlobalPosition
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_fbox.h
;	COMDAT ?xform@?$_box3@M@@QAEAAV1@ABU?$_matrix@M@@@Z
_TEXT	SEGMENT
_vx$294142 = -36					; size = 12
_vy$294143 = -24					; size = 12
_vz$294144 = -12					; size = 12
?xform@?$_box3@M@@QAEAAV1@ABU?$_matrix@M@@@Z PROC	; _box3<float>::xform, COMDAT
; _this$ = eax
; _m$ = ecx

; 86   :     {

	sub	esp, 36					; 00000024H

; 87   : 		Self b;
; 88   :         b.set(*this);

	movss	xmm0, DWORD PTR [eax]
	movss	xmm3, DWORD PTR [eax+12]
	movss	xmm1, DWORD PTR [eax+4]
	movss	xmm4, DWORD PTR [eax+16]
	movss	xmm2, DWORD PTR [eax+8]
	movss	xmm5, DWORD PTR [eax+20]

; 89   :         return xform(b,m);

	subss	xmm3, xmm0
	movaps	xmm6, xmm3
	movss	xmm3, DWORD PTR [ecx]
	movaps	xmm7, xmm3
	mulss	xmm7, xmm6
	movss	DWORD PTR _vx$294142[esp+36], xmm7
	movss	xmm7, DWORD PTR [ecx+4]
	mulss	xmm7, xmm6
	subss	xmm4, xmm1
	subss	xmm5, xmm2
	movss	DWORD PTR _vx$294142[esp+40], xmm7
	movss	xmm7, DWORD PTR [ecx+8]
	mulss	xmm7, xmm6
	movss	xmm6, DWORD PTR [ecx+16]
	mulss	xmm6, xmm4
	movss	DWORD PTR _vy$294143[esp+36], xmm6
	movss	xmm6, DWORD PTR [ecx+20]
	mulss	xmm6, xmm4
	movss	DWORD PTR _vy$294143[esp+40], xmm6
	movss	xmm6, DWORD PTR [ecx+24]
	mulss	xmm6, xmm4
	movss	xmm4, DWORD PTR [ecx+32]
	mulss	xmm4, xmm5
	mulss	xmm3, xmm0
	movss	DWORD PTR _vz$294144[esp+36], xmm4
	movss	xmm4, DWORD PTR [ecx+36]
	mulss	xmm4, xmm5
	movss	DWORD PTR _vz$294144[esp+40], xmm4
	movss	xmm4, DWORD PTR [ecx+40]
	mulss	xmm4, xmm5
	movss	xmm5, DWORD PTR [ecx+16]
	mulss	xmm5, xmm1
	addss	xmm5, xmm3
	movaps	xmm3, xmm2
	mulss	xmm3, DWORD PTR [ecx+32]
	addss	xmm5, xmm3
	addss	xmm5, DWORD PTR [ecx+48]
	movss	DWORD PTR [eax], xmm5
	fld	DWORD PTR [eax]
	movss	xmm3, DWORD PTR [ecx+36]
	movss	xmm5, DWORD PTR [ecx+20]
	mulss	xmm3, xmm2
	mulss	xmm5, xmm1
	addss	xmm3, xmm5
	movss	xmm5, DWORD PTR [ecx+4]
	mulss	xmm5, xmm0
	addss	xmm3, xmm5
	addss	xmm3, DWORD PTR [ecx+52]
	movss	DWORD PTR [eax+4], xmm3
	movss	xmm3, DWORD PTR [ecx+40]
	mulss	xmm3, xmm2
	movss	xmm2, DWORD PTR [ecx+24]
	mulss	xmm2, xmm1
	movss	xmm1, DWORD PTR [ecx+8]
	addss	xmm3, xmm2
	mulss	xmm1, xmm0
	addss	xmm3, xmm1
	addss	xmm3, DWORD PTR [ecx+56]
	movss	DWORD PTR [eax+8], xmm3
	fstp	DWORD PTR [eax+12]
	fld	DWORD PTR [eax+4]
	mov	ecx, -2147483648			; 80000000H
	test	DWORD PTR _vx$294142[esp+36], ecx
	fstp	DWORD PTR [eax+16]
	fld	DWORD PTR [eax+8]
	movss	DWORD PTR _vx$294142[esp+44], xmm7
	fstp	DWORD PTR [eax+20]
	movss	DWORD PTR _vy$294143[esp+44], xmm6
	movss	DWORD PTR _vz$294144[esp+44], xmm4
	je	SHORT $LN26@xform@2
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR _vx$294142[esp+36]
	movss	DWORD PTR [eax], xmm0
	jmp	SHORT $LN25@xform@2
$LN26@xform@2:
	movss	xmm0, DWORD PTR _vx$294142[esp+36]
	addss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR [eax+12], xmm0
$LN25@xform@2:
	test	DWORD PTR _vx$294142[esp+40], ecx
	je	SHORT $LN24@xform@2
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR _vx$294142[esp+40]
	movss	DWORD PTR [eax+4], xmm0
	jmp	SHORT $LN23@xform@2
$LN24@xform@2:
	movss	xmm0, DWORD PTR [eax+16]
	addss	xmm0, DWORD PTR _vx$294142[esp+40]
	movss	DWORD PTR [eax+16], xmm0
$LN23@xform@2:
	test	DWORD PTR _vx$294142[esp+44], ecx
	je	SHORT $LN22@xform@2
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, xmm7
	movss	DWORD PTR [eax+8], xmm0
	jmp	SHORT $LN21@xform@2
$LN22@xform@2:
	addss	xmm7, DWORD PTR [eax+20]
	movss	DWORD PTR [eax+20], xmm7
$LN21@xform@2:
	test	DWORD PTR _vy$294143[esp+36], ecx
	je	SHORT $LN20@xform@2
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR _vy$294143[esp+36]
	movss	DWORD PTR [eax], xmm0
	jmp	SHORT $LN19@xform@2
$LN20@xform@2:
	movss	xmm0, DWORD PTR _vy$294143[esp+36]
	addss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR [eax+12], xmm0
$LN19@xform@2:
	test	DWORD PTR _vy$294143[esp+40], ecx
	je	SHORT $LN18@xform@2
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR _vy$294143[esp+40]
	movss	DWORD PTR [eax+4], xmm0
	jmp	SHORT $LN17@xform@2
$LN18@xform@2:
	movss	xmm0, DWORD PTR [eax+16]
	addss	xmm0, DWORD PTR _vy$294143[esp+40]
	movss	DWORD PTR [eax+16], xmm0
$LN17@xform@2:
	test	DWORD PTR _vy$294143[esp+44], ecx
	je	SHORT $LN16@xform@2
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, xmm6
	movss	DWORD PTR [eax+8], xmm0
	jmp	SHORT $LN15@xform@2
$LN16@xform@2:
	addss	xmm6, DWORD PTR [eax+20]
	movss	DWORD PTR [eax+20], xmm6
$LN15@xform@2:
	test	DWORD PTR _vz$294144[esp+36], ecx
	je	SHORT $LN14@xform@2
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR _vz$294144[esp+36]
	movss	DWORD PTR [eax], xmm0
	jmp	SHORT $LN13@xform@2
$LN14@xform@2:
	movss	xmm0, DWORD PTR _vz$294144[esp+36]
	addss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR [eax+12], xmm0
$LN13@xform@2:
	test	DWORD PTR _vz$294144[esp+40], ecx
	je	SHORT $LN12@xform@2
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR _vz$294144[esp+40]
	movss	DWORD PTR [eax+4], xmm0
	jmp	SHORT $LN11@xform@2
$LN12@xform@2:
	movss	xmm0, DWORD PTR [eax+16]
	addss	xmm0, DWORD PTR _vz$294144[esp+40]
	movss	DWORD PTR [eax+16], xmm0
$LN11@xform@2:
	test	DWORD PTR _vz$294144[esp+44], ecx
	je	SHORT $LN10@xform@2
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, xmm4
	movss	DWORD PTR [eax+8], xmm0

; 90   :     }

	add	esp, 36					; 00000024H
	ret	0

; 89   :         return xform(b,m);

$LN10@xform@2:
	addss	xmm4, DWORD PTR [eax+20]
	movss	DWORD PTR [eax+20], xmm4

; 90   :     }

	add	esp, 36					; 00000024H
	ret	0
?xform@?$_box3@M@@QAEAAV1@ABU?$_matrix@M@@@Z ENDP	; _box3<float>::xform
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\fdemorecord.cpp
_TEXT	ENDS
;	COMDAT ?OnRender@CDemoRecord@@UAEXXZ
_TEXT	SEGMENT
?OnRender@CDemoRecord@@UAEXXZ PROC			; CDemoRecord::OnRender, COMDAT
; _this$ = ecx

; 539  : 	pApp->pFontSystem->OnRender();

	mov	eax, DWORD PTR ?pApp@@3PAVCApplication@@A ; pApp
	push	esi
	mov	esi, DWORD PTR [eax+6192]
	mov	ecx, DWORD PTR [esi+76]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	push	edi
	push	esi
	call	eax
	add	esi, 64					; 00000040H
	mov	ecx, esi
	call	?end@?$_Impl_vector@UString@CGameFont@@V?$xalloc@UString@CGameFont@@@@@priv@stlp_std@@QAEPAUString@CGameFont@@XZ ; stlp_std::priv::_Impl_vector<CGameFont::String,xalloc<CGameFont::String> >::end
	mov	ecx, esi
	mov	edi, eax
	call	?begin@?$_Impl_vector@UString@CGameFont@@V?$xalloc@UString@CGameFont@@@@@priv@stlp_std@@QAEPAUString@CGameFont@@XZ ; stlp_std::priv::_Impl_vector<CGameFont::String,xalloc<CGameFont::String> >::begin
	push	edi
	push	eax
	mov	ecx, esi
	call	?erase@?$_Impl_vector@UString@CGameFont@@V?$xalloc@UString@CGameFont@@@@@priv@stlp_std@@QAEPAUString@CGameFont@@PAU45@0@Z ; stlp_std::priv::_Impl_vector<CGameFont::String,xalloc<CGameFont::String> >::erase
	pop	edi
	pop	esi

; 540  : }

	ret	0
?OnRender@CDemoRecord@@UAEXXZ ENDP			; CDemoRecord::OnRender
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?IR_OnMouseHold@CDemoRecord@@UAEXH@Z
_TEXT	SEGMENT
$T294267 = -24						; size = 12
_vT_delta$ = -12					; size = 12
_btn$ = 8						; size = 4
?IR_OnMouseHold@CDemoRecord@@UAEXH@Z PROC		; CDemoRecord::IR_OnMouseHold, COMDAT
; _this$ = ecx

; 486  : {

	sub	esp, 24					; 00000018H

; 487  : 	if(m_b_redirect_input_to_level)

	cmp	DWORD PTR [ecx+204], 0
	je	SHORT $LN5@IR_OnMouse

; 488  : 	{
; 489  : 		g_pGameLevel->IR_OnMouseHold(btn);

	mov	ecx, DWORD PTR ?g_pGameLevel@@3PAVIGame_Level@@A ; g_pGameLevel
	mov	eax, DWORD PTR [ecx+16]
	add	ecx, 16					; 00000010H

; 498  : }

	add	esp, 24					; 00000018H

; 488  : 	{
; 489  : 		g_pGameLevel->IR_OnMouseHold(btn);

	mov	eax, DWORD PTR [eax+16]
	jmp	eax
$LN5@IR_OnMouse:

; 490  : 		return;
; 491  : 	}
; 492  : 	Fvector		vT_delta = Fvector().set(0,0,0);

	xorps	xmm0, xmm0
	xor	eax, eax
	mov	DWORD PTR $T294267[esp+28], eax
	mov	DWORD PTR $T294267[esp+24], eax
	mov	DWORD PTR $T294267[esp+32], eax
	movss	DWORD PTR $T294267[esp+28], xmm0
	mov	eax, DWORD PTR $T294267[esp+28]
	movss	DWORD PTR $T294267[esp+24], xmm0
	mov	edx, DWORD PTR $T294267[esp+24]
	mov	DWORD PTR _vT_delta$[esp+28], eax

; 493  : 	switch (btn){

	mov	eax, DWORD PTR _btn$[esp+20]
	sub	eax, 0
	movss	DWORD PTR $T294267[esp+32], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	mov	DWORD PTR _vT_delta$[esp+24], edx
	mov	edx, DWORD PTR $T294267[esp+32]
	mov	DWORD PTR _vT_delta$[esp+32], edx
	je	SHORT $LN2@IR_OnMouse
	sub	eax, 1
	jne	SHORT $LN24@IR_OnMouse

; 495  : 	case 1:			vT_delta.z -= 1.0f; break; // Move Forward

	movss	xmm1, DWORD PTR __real@bf800000
	jmp	SHORT $LN3@IR_OnMouse
$LN2@IR_OnMouse:

; 494  : 	case 0:			vT_delta.z += 1.0f; break; // Move Backward

	movaps	xmm1, xmm0
	jmp	SHORT $LN3@IR_OnMouse
$LN24@IR_OnMouse:
	movss	xmm1, DWORD PTR _vT_delta$[esp+32]
$LN3@IR_OnMouse:

; 496  : 	}
; 497  : 	update_whith_timescale( m_vT, vT_delta );

	divss	xmm0, DWORD PTR ?Device@@3VCRenderDevice@@A+544
	movss	xmm2, DWORD PTR _vT_delta$[esp+24]
	mulss	xmm2, xmm0
	addss	xmm2, DWORD PTR [ecx+108]
	movss	DWORD PTR [ecx+108], xmm2
	movss	xmm2, DWORD PTR _vT_delta$[esp+28]
	mulss	xmm2, xmm0
	addss	xmm2, DWORD PTR [ecx+112]
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR [ecx+116]
	movss	DWORD PTR [ecx+112], xmm2
	movss	DWORD PTR [ecx+116], xmm0

; 498  : }

	add	esp, 24					; 00000018H
	ret	4
?IR_OnMouseHold@CDemoRecord@@UAEXH@Z ENDP		; CDemoRecord::IR_OnMouseHold
_TEXT	ENDS
PUBLIC	__real@3ec00000
;	COMDAT __real@3ec00000
; File d:\clearsky\sources\engine\xrcore\_vector3d.h
CONST	SEGMENT
__real@3ec00000 DD 03ec00000r			; 0.375
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\fdemorecord.cpp
CONST	ENDS
;	COMDAT ?IR_OnMouseMove@CDemoRecord@@UAEXHH@Z
_TEXT	SEGMENT
$T294307 = -24						; size = 12
_vR_delta$ = -12					; size = 12
_dx$ = 8						; size = 4
_dy$ = 12						; size = 4
?IR_OnMouseMove@CDemoRecord@@UAEXHH@Z PROC		; CDemoRecord::IR_OnMouseMove, COMDAT
; _this$ = ecx

; 468  : {

	sub	esp, 24					; 00000018H
	push	esi
	mov	esi, ecx

; 469  : 	if(m_b_redirect_input_to_level)

	cmp	DWORD PTR [esi+204], 0
	je	SHORT $LN3@IR_OnMouse@2

; 470  : 	{
; 471  : 		g_pGameLevel->IR_OnMouseMove(dx, dy);

	mov	ecx, DWORD PTR ?g_pGameLevel@@3PAVIGame_Level@@A ; g_pGameLevel
	mov	eax, DWORD PTR [ecx+16]
	add	ecx, 16					; 00000010H
	pop	esi

; 483  : }

	add	esp, 24					; 00000018H

; 470  : 	{
; 471  : 		g_pGameLevel->IR_OnMouseMove(dx, dy);

	mov	eax, DWORD PTR [eax+24]
	jmp	eax
$LN3@IR_OnMouse@2:

; 472  : 		return;
; 473  : 	}
; 474  : 
; 475  : 	Fvector		vR_delta = Fvector().set(0,0,0);

	xorps	xmm0, xmm0
	xor	eax, eax
	mov	DWORD PTR $T294307[esp+36], eax
	mov	DWORD PTR $T294307[esp+28], eax
	mov	DWORD PTR $T294307[esp+32], eax
	movss	DWORD PTR $T294307[esp+36], xmm0
	mov	eax, DWORD PTR $T294307[esp+36]
	mov	DWORD PTR _vR_delta$[esp+36], eax

; 476  : 
; 477  : 	float scale			= .5f;//psMouseSens;
; 478  : 	if (dx||dy){

	mov	eax, DWORD PTR _dx$[esp+24]
	test	eax, eax
	movss	DWORD PTR $T294307[esp+28], xmm0
	mov	ecx, DWORD PTR $T294307[esp+28]
	movss	DWORD PTR $T294307[esp+32], xmm0
	mov	edx, DWORD PTR $T294307[esp+32]
	push	edi
	mov	edi, DWORD PTR _dy$[esp+28]
	mov	DWORD PTR _vR_delta$[esp+32], ecx
	mov	DWORD PTR _vR_delta$[esp+36], edx
	jne	SHORT $LN1@IR_OnMouse@2
	test	edi, edi
	je	SHORT $LN24@IR_OnMouse@2
$LN1@IR_OnMouse@2:

; 479  : 		vR_delta.y			+= float(dx)*scale; // heading

	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3f000000

; 480  : 		vR_delta.x			+= ((psMouseInvert.test(1))?-1:1)*float(dy)*scale*(3.f/4.f); // pitch

	push	1
	mov	ecx, OFFSET ?psMouseInvert@@3U?$_flags@I@@A ; psMouseInvert
	movss	DWORD PTR _vR_delta$[esp+40], xmm0
	call	?test@?$_flags@I@@QBEHI@Z		; _flags<unsigned int>::test
	neg	eax
	sbb	eax, eax
	and	eax, -2					; fffffffeH
	add	eax, 1
	cvtsi2ss xmm1, eax
	cvtsi2ss xmm0, edi
	mulss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@3ec00000
	addss	xmm1, DWORD PTR _vR_delta$[esp+32]
	jmp	SHORT $LN2@IR_OnMouse@2
$LN24@IR_OnMouse@2:
	movss	xmm1, DWORD PTR _vR_delta$[esp+32]
$LN2@IR_OnMouse@2:

; 481  : 	}
; 482  : 	update_whith_timescale( m_vR, vR_delta );

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR ?Device@@3VCRenderDevice@@A+544
	movaps	xmm2, xmm0
	mulss	xmm2, xmm1
	addss	xmm2, DWORD PTR [esi+120]
	movaps	xmm1, xmm0
	mulss	xmm1, DWORD PTR _vR_delta$[esp+36]
	addss	xmm1, DWORD PTR [esi+124]
	movss	DWORD PTR [esi+124], xmm1
	movss	xmm1, DWORD PTR _vR_delta$[esp+40]
	mulss	xmm1, xmm0
	addss	xmm1, DWORD PTR [esi+128]
	pop	edi
	movss	DWORD PTR [esi+120], xmm2
	movss	DWORD PTR [esi+128], xmm1
	pop	esi

; 483  : }

	add	esp, 24					; 00000018H
	ret	8
?IR_OnMouseMove@CDemoRecord@@UAEXHH@Z ENDP		; CDemoRecord::IR_OnMouseMove
_TEXT	ENDS
PUBLIC	__real@c0000000
;	COMDAT __real@c0000000
; File d:\clearsky\sources\engine\xrcore\_vector3d.h
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\fdemorecord.cpp
CONST	ENDS
;	COMDAT ?IR_OnKeyboardHold@CDemoRecord@@UAEXH@Z
_TEXT	SEGMENT
_vR_delta$ = -36					; size = 12
$T294350 = -36						; size = 12
_vT_delta$ = -24					; size = 12
$T294351 = -12						; size = 12
_dik$ = 8						; size = 4
?IR_OnKeyboardHold@CDemoRecord@@UAEXH@Z PROC		; CDemoRecord::IR_OnKeyboardHold, COMDAT
; _this$ = ecx

; 433  : {

	sub	esp, 36					; 00000024H

; 434  : 	if(m_b_redirect_input_to_level)

	cmp	DWORD PTR [ecx+204], 0
	je	SHORT $LN13@IR_OnKeybo

; 435  : 	{
; 436  : 		g_pGameLevel->IR_OnKeyboardHold(dik);

	mov	ecx, DWORD PTR ?g_pGameLevel@@3PAVIGame_Level@@A ; g_pGameLevel
	mov	eax, DWORD PTR [ecx+16]
	add	ecx, 16					; 00000010H

; 464  : 
; 465  : }

	add	esp, 36					; 00000024H

; 435  : 	{
; 436  : 		g_pGameLevel->IR_OnKeyboardHold(dik);

	mov	eax, DWORD PTR [eax+40]
	jmp	eax
$LN13@IR_OnKeybo:

; 437  : 		return;
; 438  : 	}
; 439  : 	Fvector		vT_delta = Fvector().set(0,0,0);

	xorps	xmm0, xmm0
	xor	eax, eax
	mov	DWORD PTR $T294350[esp+40], eax
	mov	DWORD PTR $T294350[esp+36], eax
	mov	DWORD PTR $T294350[esp+44], eax
	movss	DWORD PTR $T294350[esp+40], xmm0
	mov	eax, DWORD PTR $T294350[esp+40]
	mov	DWORD PTR _vT_delta$[esp+40], eax

; 440  : 	Fvector		vR_delta = Fvector().set(0,0,0);

	xor	eax, eax
	mov	DWORD PTR $T294351[esp+36], eax
	mov	DWORD PTR $T294351[esp+40], eax
	mov	DWORD PTR $T294351[esp+44], eax
	movss	DWORD PTR $T294350[esp+36], xmm0
	mov	edx, DWORD PTR $T294350[esp+36]
	movss	DWORD PTR $T294351[esp+36], xmm0
	mov	eax, DWORD PTR $T294351[esp+36]
	mov	DWORD PTR _vR_delta$[esp+36], eax
	movss	DWORD PTR $T294350[esp+44], xmm0
	movss	DWORD PTR $T294351[esp+44], xmm0
	mov	eax, DWORD PTR $T294351[esp+44]
	mov	DWORD PTR _vT_delta$[esp+36], edx
	mov	edx, DWORD PTR $T294350[esp+44]
	mov	DWORD PTR _vR_delta$[esp+44], eax

; 441  : 
; 442  : 	switch(dik){

	mov	eax, DWORD PTR _dik$[esp+32]
	movss	DWORD PTR $T294351[esp+40], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	mov	DWORD PTR _vT_delta$[esp+44], edx
	mov	edx, DWORD PTR $T294351[esp+40]
	add	eax, -16				; fffffff0H
	cmp	eax, 189				; 000000bdH
	mov	DWORD PTR _vR_delta$[esp+40], edx
	ja	$LN11@IR_OnKeybo
	movzx	edx, BYTE PTR $LN48@IR_OnKeybo[eax]
	jmp	DWORD PTR $LN52@IR_OnKeybo[edx*4]
$LN10@IR_OnKeybo:

; 443  : 	case DIK_A:
; 444  : 	case DIK_NUMPAD1:
; 445  : 	case DIK_LEFT:		vT_delta.x -= 1.0f; break; // Slide Left

	movss	xmm1, DWORD PTR __real@bf800000
	movss	DWORD PTR _vT_delta$[esp+36], xmm1
	jmp	SHORT $LN11@IR_OnKeybo
$LN9@IR_OnKeybo:

; 446  : 	case DIK_D:
; 447  : 	case DIK_NUMPAD3:
; 448  : 	case DIK_RIGHT:		vT_delta.x += 1.0f; break; // Slide Right

	movss	DWORD PTR _vT_delta$[esp+36], xmm0
	jmp	SHORT $LN11@IR_OnKeybo
$LN8@IR_OnKeybo:

; 449  : 	case DIK_S:			vT_delta.y -= 1.0f; break; // Slide Down

	movss	xmm1, DWORD PTR __real@bf800000
	movss	DWORD PTR _vT_delta$[esp+40], xmm1
	jmp	SHORT $LN11@IR_OnKeybo
$LN7@IR_OnKeybo:

; 450  : 	case DIK_W:			vT_delta.y += 1.0f; break; // Slide Up

	movss	DWORD PTR _vT_delta$[esp+40], xmm0
	jmp	SHORT $LN11@IR_OnKeybo
$LN6@IR_OnKeybo:

; 451  : 	// rotate	
; 452  : 	case DIK_NUMPAD2:	vR_delta.x -= 1.0f; break; // Pitch Down

	movss	xmm1, DWORD PTR __real@bf800000
	movss	DWORD PTR _vR_delta$[esp+36], xmm1
	jmp	SHORT $LN11@IR_OnKeybo
$LN5@IR_OnKeybo:

; 453  : 	case DIK_NUMPAD8:	vR_delta.x += 1.0f; break; // Pitch Up

	movss	DWORD PTR _vR_delta$[esp+36], xmm0
	jmp	SHORT $LN11@IR_OnKeybo
$LN4@IR_OnKeybo:

; 454  : 	case DIK_E:	
; 455  : 	case DIK_NUMPAD6:	vR_delta.y += 1.0f; break; // Turn Left

	movss	DWORD PTR _vR_delta$[esp+40], xmm0
	jmp	SHORT $LN11@IR_OnKeybo
$LN3@IR_OnKeybo:

; 456  : 	case DIK_Q:	
; 457  : 	case DIK_NUMPAD4:	vR_delta.y -= 1.0f; break; // Turn Right

	movss	xmm1, DWORD PTR __real@bf800000
	movss	DWORD PTR _vR_delta$[esp+40], xmm1
	jmp	SHORT $LN11@IR_OnKeybo
$LN2@IR_OnKeybo:

; 458  : 	case DIK_NUMPAD9:	vR_delta.z -= 2.0f; break; // Turn Right

	movss	xmm1, DWORD PTR __real@c0000000
	jmp	SHORT $LN51@IR_OnKeybo
$LN1@IR_OnKeybo:

; 459  : 	case DIK_NUMPAD7:	vR_delta.z += 2.0f; break; // Turn Right

	movss	xmm1, DWORD PTR __real@40000000
$LN51@IR_OnKeybo:
	movss	DWORD PTR _vR_delta$[esp+44], xmm1
$LN11@IR_OnKeybo:

; 460  : 	}
; 461  : 
; 462  : 	update_whith_timescale( m_vT, vT_delta );

	movaps	xmm1, xmm0
	divss	xmm1, DWORD PTR ?Device@@3VCRenderDevice@@A+544
	movaps	xmm2, xmm1
	mulss	xmm2, DWORD PTR _vT_delta$[esp+36]
	addss	xmm2, DWORD PTR [ecx+108]
	movss	DWORD PTR [ecx+108], xmm2
	movaps	xmm2, xmm1
	mulss	xmm2, DWORD PTR _vT_delta$[esp+40]
	addss	xmm2, DWORD PTR [ecx+112]
	movss	DWORD PTR [ecx+112], xmm2
	movss	xmm2, DWORD PTR _vT_delta$[esp+44]
	mulss	xmm2, xmm1
	addss	xmm2, DWORD PTR [ecx+116]
	movss	DWORD PTR [ecx+116], xmm2

; 463  : 	update_whith_timescale( m_vR, vR_delta );

	divss	xmm0, DWORD PTR ?Device@@3VCRenderDevice@@A+544
	movaps	xmm1, xmm0
	mulss	xmm1, DWORD PTR _vR_delta$[esp+36]
	addss	xmm1, DWORD PTR [ecx+120]
	movss	DWORD PTR [ecx+120], xmm1
	movaps	xmm1, xmm0
	mulss	xmm1, DWORD PTR _vR_delta$[esp+40]
	mulss	xmm0, DWORD PTR _vR_delta$[esp+44]
	addss	xmm1, DWORD PTR [ecx+124]
	addss	xmm0, DWORD PTR [ecx+128]
	movss	DWORD PTR [ecx+124], xmm1
	movss	DWORD PTR [ecx+128], xmm0

; 464  : 
; 465  : }

	add	esp, 36					; 00000024H
	ret	4
	npad	1
$LN52@IR_OnKeybo:
	DD	$LN3@IR_OnKeybo
	DD	$LN7@IR_OnKeybo
	DD	$LN4@IR_OnKeybo
	DD	$LN10@IR_OnKeybo
	DD	$LN8@IR_OnKeybo
	DD	$LN9@IR_OnKeybo
	DD	$LN1@IR_OnKeybo
	DD	$LN5@IR_OnKeybo
	DD	$LN2@IR_OnKeybo
	DD	$LN6@IR_OnKeybo
	DD	$LN11@IR_OnKeybo
$LN48@IR_OnKeybo:
	DB	0
	DB	1
	DB	2
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	3
	DB	4
	DB	5
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	6
	DB	7
	DB	8
	DB	10					; 0000000aH
	DB	0
	DB	10					; 0000000aH
	DB	2
	DB	10					; 0000000aH
	DB	3
	DB	9
	DB	5
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	3
	DB	10					; 0000000aH
	DB	5
?IR_OnKeyboardHold@CDemoRecord@@UAEXH@Z ENDP		; CDemoRecord::IR_OnKeyboardHold
PUBLIC	??1CDemoRecord@@UAE@XZ				; CDemoRecord::~CDemoRecord
; Function compile flags: /Ogtpy
;	COMDAT ??1CDemoRecord@@UAE@XZ
_TEXT	SEGMENT
??1CDemoRecord@@UAE@XZ PROC				; CDemoRecord::~CDemoRecord, COMDAT
; _this$ = ecx

; 120  : {

	push	ebx
	push	esi
	mov	esi, ecx

; 121  : 	if (file) 

	cmp	DWORD PTR [esi+36], 0
	push	edi
	lea	edi, DWORD PTR [esi+36]
	lea	eax, DWORD PTR [esi+24]
	lea	ebx, DWORD PTR [esi+28]
	mov	DWORD PTR [esi], OFFSET ??_7CDemoRecord@@6BCEffectorCam@@@
	mov	DWORD PTR [eax], OFFSET ??_7CDemoRecord@@6BIInputReceiver@@@
	mov	DWORD PTR [ebx], OFFSET ??_7CDemoRecord@@6BpureRender@@@
	je	SHORT $LN1@CDemoRecor

; 122  : 	{
; 123  : 		IR_Release	();	// release input

	mov	ecx, DWORD PTR ?pInput@@3PAVCInput@@A	; pInput
	push	eax
	call	?iRelease@CInput@@QAEXPAVIInputReceiver@@@Z ; CInput::iRelease

; 124  : 		FS.w_close	(file);

	mov	eax, DWORD PTR __imp_?xr_FS@@3PAVCLocatorAPI@@A
	mov	ecx, DWORD PTR [eax]
	push	edi
	call	DWORD PTR __imp_?w_close@CLocatorAPI@@QAEXAAPAVIWriter@@@Z
$LN1@CDemoRecor:

; 125  : 	}
; 126  : 	g_bDisableRedText	= stored_red_text;

	mov	ecx, DWORD PTR ?stored_red_text@@3HA	; stored_red_text

; 127  : 
; 128  : 	Device.seqRender.Remove		( this		);

	mov	eax, OFFSET ?Device@@3VCRenderDevice@@A+648
	mov	DWORD PTR ?g_bDisableRedText@@3HA, ecx	; g_bDisableRedText
	call	?Remove@?$CRegistrator@VpureRender@@@@QAEXPAVpureRender@@@Z ; CRegistrator<pureRender>::Remove
	pop	edi

; 129  : }

	mov	DWORD PTR [esi], OFFSET ??_7SBaseEffector@@6B@
	pop	esi
	pop	ebx
	ret	0
??1CDemoRecord@@UAE@XZ ENDP				; CDemoRecord::~CDemoRecord
_TEXT	ENDS
PUBLIC	?setup_lm_screenshot_matrices@@YAXXZ		; setup_lm_screenshot_matrices
; Function compile flags: /Ogtpy
;	COMDAT ?setup_lm_screenshot_matrices@@YAXXZ
_TEXT	SEGMENT
_vx$370249 = -84					; size = 12
_vy$370250 = -72					; size = 12
_vz$370251 = -60					; size = 12
_bb$ = -48						; size = 24
_b$370300 = -24						; size = 24
?setup_lm_screenshot_matrices@@YAXXZ PROC		; setup_lm_screenshot_matrices, COMDAT

; 27   : {

	sub	esp, 88					; 00000058H

; 32   : 	bb.getcenter						(Device.vCameraPosition);

	push	ebx

; 33   : 
; 34   : 	Device.vCameraDirection.set			( 0.f,-1.f,0.f	);

	push	esi
	push	edi

; 28   : 	psHUD_Flags.assign	(0);
; 29   : 
; 30   : 	// build camera matrix
; 31   : 	Fbox bb								= curr_lm_fbox;

	mov	eax, DWORD PTR ?curr_lm_fbox@@3V?$_box3@M@@A

; 32   : 	bb.getcenter						(Device.vCameraPosition);

	movss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR ?curr_lm_fbox@@3V?$_box3@M@@A+4
	mov	edx, DWORD PTR ?curr_lm_fbox@@3V?$_box3@M@@A+8
	mov	DWORD PTR _bb$[esp+100], eax
	mov	eax, DWORD PTR ?curr_lm_fbox@@3V?$_box3@M@@A+12
	movss	xmm1, DWORD PTR _bb$[esp+100]
	mov	DWORD PTR _bb$[esp+112], eax
	addss	xmm1, DWORD PTR _bb$[esp+112]
	mulss	xmm1, xmm0
	movss	DWORD PTR ?Device@@3VCRenderDevice@@A+48, xmm1
	mov	DWORD PTR _bb$[esp+104], ecx
	mov	ecx, DWORD PTR ?curr_lm_fbox@@3V?$_box3@M@@A+16
	movss	xmm1, DWORD PTR _bb$[esp+104]
	mov	DWORD PTR _bb$[esp+108], edx
	mov	edx, DWORD PTR ?curr_lm_fbox@@3V?$_box3@M@@A+20
	mov	DWORD PTR _bb$[esp+116], ecx
	addss	xmm1, DWORD PTR _bb$[esp+116]
	mulss	xmm1, xmm0
	movss	DWORD PTR ?Device@@3VCRenderDevice@@A+52, xmm1
	movss	xmm1, DWORD PTR _bb$[esp+108]
	mov	DWORD PTR _bb$[esp+120], edx
	addss	xmm1, DWORD PTR _bb$[esp+120]
	mulss	xmm1, xmm0

; 33   : 
; 34   : 	Device.vCameraDirection.set			( 0.f,-1.f,0.f	);

	xorps	xmm0, xmm0
	movss	DWORD PTR ?Device@@3VCRenderDevice@@A+56, xmm1
	movss	xmm1, DWORD PTR __real@bf800000
	movss	DWORD PTR ?Device@@3VCRenderDevice@@A+64, xmm1

; 35   : 	Device.vCameraTop.set				( 0.f,0.f,1.f	);

	movss	xmm1, DWORD PTR __real@3f800000

; 36   : 	Device.vCameraRight.set				( 1.f,0.f,0.f	);
; 37   : 	Device.mView.build_camera_dir		(Device.vCameraPosition,Device.vCameraDirection,Device.vCameraTop);

	mov	eax, OFFSET ?Device@@3VCRenderDevice@@A+72
	mov	edi, OFFSET ?Device@@3VCRenderDevice@@A+60
	mov	ebx, OFFSET ?Device@@3VCRenderDevice@@A+48
	mov	esi, OFFSET ?Device@@3VCRenderDevice@@A+96
	mov	DWORD PTR ?psHUD_Flags@@3U?$_flags@I@@A, 0 ; psHUD_Flags
	movss	DWORD PTR ?Device@@3VCRenderDevice@@A+60, xmm0
	movss	DWORD PTR ?Device@@3VCRenderDevice@@A+68, xmm0
	movss	DWORD PTR ?Device@@3VCRenderDevice@@A+72, xmm0
	movss	DWORD PTR ?Device@@3VCRenderDevice@@A+76, xmm0
	movss	DWORD PTR ?Device@@3VCRenderDevice@@A+80, xmm1
	movss	DWORD PTR ?Device@@3VCRenderDevice@@A+84, xmm1
	movss	DWORD PTR ?Device@@3VCRenderDevice@@A+88, xmm0
	movss	DWORD PTR ?Device@@3VCRenderDevice@@A+92, xmm0
	call	?build_camera_dir@?$_matrix@M@@QAEAAU1@ABU?$_vector3@M@@00@Z ; _matrix<float>::build_camera_dir

; 38   : 
; 39   : 	bb.xform					(Device.mView);

	movss	xmm0, DWORD PTR _bb$[esp+100]
	movss	xmm1, DWORD PTR _bb$[esp+112]
	movss	xmm5, DWORD PTR ?Device@@3VCRenderDevice@@A+96
	movss	xmm3, DWORD PTR _bb$[esp+104]
	movss	xmm6, DWORD PTR _bb$[esp+120]
	subss	xmm1, xmm0
	movss	DWORD PTR _b$370300[esp+100], xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, xmm5
	movaps	xmm2, xmm1
	mulss	xmm1, DWORD PTR ?Device@@3VCRenderDevice@@A+104
	movss	DWORD PTR _vx$370249[esp+100], xmm0
	movss	xmm0, DWORD PTR ?Device@@3VCRenderDevice@@A+100
	mulss	xmm2, xmm0
	movss	DWORD PTR _vx$370249[esp+104], xmm2
	movss	xmm2, DWORD PTR _bb$[esp+116]
	subss	xmm2, xmm3
	movaps	xmm4, xmm2
	movss	DWORD PTR _vx$370249[esp+108], xmm1
	movss	xmm1, DWORD PTR ?Device@@3VCRenderDevice@@A+112
	mulss	xmm4, xmm1
	movss	DWORD PTR _vy$370250[esp+100], xmm4
	movaps	xmm4, xmm2
	mulss	xmm2, DWORD PTR ?Device@@3VCRenderDevice@@A+120
	mulss	xmm4, DWORD PTR ?Device@@3VCRenderDevice@@A+116
	movss	DWORD PTR _vy$370250[esp+108], xmm2
	movss	DWORD PTR _vy$370250[esp+104], xmm4
	movss	xmm4, DWORD PTR _bb$[esp+108]
	subss	xmm6, xmm4
	movaps	xmm2, xmm6
	mulss	xmm2, DWORD PTR ?Device@@3VCRenderDevice@@A+128
	movss	DWORD PTR _vz$370251[esp+100], xmm2
	movaps	xmm2, xmm6
	mulss	xmm2, DWORD PTR ?Device@@3VCRenderDevice@@A+132
	movss	DWORD PTR _b$370300[esp+104], xmm3
	mulss	xmm5, DWORD PTR _bb$[esp+100]
	movss	DWORD PTR _vz$370251[esp+104], xmm2
	movss	xmm2, DWORD PTR ?Device@@3VCRenderDevice@@A+136
	mulss	xmm1, xmm3
	movaps	xmm7, xmm2
	mulss	xmm7, xmm6
	movss	xmm6, DWORD PTR ?Device@@3VCRenderDevice@@A+128
	mulss	xmm6, xmm4
	addss	xmm1, xmm6
	movss	xmm6, DWORD PTR _b$370300[esp+100]
	addss	xmm1, xmm5
	movss	xmm5, DWORD PTR ?Device@@3VCRenderDevice@@A+116
	addss	xmm1, DWORD PTR ?Device@@3VCRenderDevice@@A+144
	mulss	xmm5, xmm3
	movss	xmm3, DWORD PTR ?Device@@3VCRenderDevice@@A+132
	mulss	xmm3, xmm4
	mulss	xmm0, xmm6
	addss	xmm0, xmm5
	addss	xmm0, xmm3
	movss	xmm3, DWORD PTR ?Device@@3VCRenderDevice@@A+104
	addss	xmm0, DWORD PTR ?Device@@3VCRenderDevice@@A+148
	mulss	xmm2, xmm4
	mulss	xmm3, xmm6
	addss	xmm2, xmm3
	movss	xmm3, DWORD PTR ?Device@@3VCRenderDevice@@A+120
	mulss	xmm3, DWORD PTR _b$370300[esp+104]
	addss	xmm2, xmm3
	addss	xmm2, DWORD PTR ?Device@@3VCRenderDevice@@A+152
	mov	eax, -2147483648			; 80000000H
	test	DWORD PTR _vx$370249[esp+100], eax
	movss	DWORD PTR _vz$370251[esp+108], xmm7
	movaps	xmm4, xmm1
	movaps	xmm3, xmm0
	movaps	xmm5, xmm2
	je	SHORT $LN38@setup_lm_s
	movss	xmm6, DWORD PTR _vx$370249[esp+100]
	addss	xmm6, xmm1
	movaps	xmm1, xmm6
	jmp	SHORT $LN37@setup_lm_s
$LN38@setup_lm_s:
	movss	xmm4, DWORD PTR _vx$370249[esp+100]
	addss	xmm4, xmm1
$LN37@setup_lm_s:
	test	DWORD PTR _vx$370249[esp+104], eax
	je	SHORT $LN36@setup_lm_s
	movss	xmm6, DWORD PTR _vx$370249[esp+104]
	addss	xmm6, xmm0
	movaps	xmm0, xmm6
	jmp	SHORT $LN35@setup_lm_s
$LN36@setup_lm_s:
	movss	xmm3, DWORD PTR _vx$370249[esp+104]
	addss	xmm3, xmm0
$LN35@setup_lm_s:
	test	DWORD PTR _vx$370249[esp+108], eax
	je	SHORT $LN34@setup_lm_s
	movss	xmm6, DWORD PTR _vx$370249[esp+108]
	addss	xmm6, xmm2
	movaps	xmm2, xmm6
	jmp	SHORT $LN33@setup_lm_s
$LN34@setup_lm_s:
	movss	xmm5, DWORD PTR _vx$370249[esp+108]
	addss	xmm5, xmm2
$LN33@setup_lm_s:
	test	DWORD PTR _vy$370250[esp+100], eax
	movss	xmm6, DWORD PTR _vy$370250[esp+100]
	je	SHORT $LN32@setup_lm_s
	addss	xmm6, xmm1
	movaps	xmm1, xmm6
	jmp	SHORT $LN31@setup_lm_s
$LN32@setup_lm_s:
	addss	xmm6, xmm4
	movaps	xmm4, xmm6
$LN31@setup_lm_s:
	test	DWORD PTR _vy$370250[esp+104], eax
	movss	xmm6, DWORD PTR _vy$370250[esp+104]
	je	SHORT $LN30@setup_lm_s
	addss	xmm6, xmm0
	movaps	xmm0, xmm6
	jmp	SHORT $LN29@setup_lm_s
$LN30@setup_lm_s:
	addss	xmm6, xmm3
	movaps	xmm3, xmm6
$LN29@setup_lm_s:
	test	DWORD PTR _vy$370250[esp+108], eax
	movss	xmm6, DWORD PTR _vy$370250[esp+108]
	je	SHORT $LN28@setup_lm_s
	addss	xmm6, xmm2
	movaps	xmm2, xmm6
	jmp	SHORT $LN27@setup_lm_s
$LN28@setup_lm_s:
	addss	xmm6, xmm5
	movaps	xmm5, xmm6
$LN27@setup_lm_s:
	test	DWORD PTR _vz$370251[esp+100], eax
	movss	xmm6, DWORD PTR _vz$370251[esp+100]
	je	SHORT $LN26@setup_lm_s
	addss	xmm6, xmm1
	movaps	xmm1, xmm6
	jmp	SHORT $LN25@setup_lm_s
$LN26@setup_lm_s:
	addss	xmm6, xmm4
	movaps	xmm4, xmm6
$LN25@setup_lm_s:
	test	DWORD PTR _vz$370251[esp+104], eax
	movss	xmm6, DWORD PTR _vz$370251[esp+104]
	je	SHORT $LN24@setup_lm_s
	addss	xmm6, xmm0
	movaps	xmm0, xmm6
	jmp	SHORT $LN23@setup_lm_s
$LN24@setup_lm_s:
	addss	xmm6, xmm3
	movaps	xmm3, xmm6
$LN23@setup_lm_s:
	test	DWORD PTR _vz$370251[esp+108], eax
	je	SHORT $LN22@setup_lm_s
	addss	xmm7, xmm2
	movaps	xmm2, xmm7
	jmp	SHORT $LN21@setup_lm_s
$LN22@setup_lm_s:
	addss	xmm7, xmm5
	movaps	xmm5, xmm7
$LN21@setup_lm_s:

; 40   : 	// build project matrix
; 41   : 	Device.mProject.build_projection_ortho(	bb.max.x-bb.min.x,
; 42   : 											bb.max.y-bb.min.y,
; 43   : 											bb.min.z,
; 44   : 											bb.max.z);

	movss	xmm6, DWORD PTR __real@40000000
	subss	xmm4, xmm1
	movaps	xmm1, xmm6
	divss	xmm1, xmm4
	movss	DWORD PTR ?Device@@3VCRenderDevice@@A+160, xmm1
	xorps	xmm1, xmm1
	subss	xmm3, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm6, xmm3
	movss	DWORD PTR ?Device@@3VCRenderDevice@@A+164, xmm1
	movss	DWORD PTR ?Device@@3VCRenderDevice@@A+168, xmm1
	movss	DWORD PTR ?Device@@3VCRenderDevice@@A+172, xmm1
	movss	DWORD PTR ?Device@@3VCRenderDevice@@A+176, xmm1
	movss	DWORD PTR ?Device@@3VCRenderDevice@@A+184, xmm1
	movss	DWORD PTR ?Device@@3VCRenderDevice@@A+188, xmm1
	movss	DWORD PTR ?Device@@3VCRenderDevice@@A+192, xmm1
	movss	DWORD PTR ?Device@@3VCRenderDevice@@A+196, xmm1
	movss	DWORD PTR ?Device@@3VCRenderDevice@@A+204, xmm1
	movss	DWORD PTR ?Device@@3VCRenderDevice@@A+208, xmm1
	movss	DWORD PTR ?Device@@3VCRenderDevice@@A+212, xmm1

; 45   : }

	pop	edi
	movaps	xmm1, xmm2
	movaps	xmm3, xmm5
	subss	xmm3, xmm2
	movaps	xmm4, xmm0
	subss	xmm1, xmm5
	pop	esi
	divss	xmm4, xmm3
	divss	xmm2, xmm1
	movss	DWORD PTR ?Device@@3VCRenderDevice@@A+180, xmm6
	movss	DWORD PTR ?Device@@3VCRenderDevice@@A+200, xmm4
	movss	DWORD PTR ?Device@@3VCRenderDevice@@A+216, xmm2
	movss	DWORD PTR ?Device@@3VCRenderDevice@@A+220, xmm0
	pop	ebx
	add	esp, 88					; 00000058H
	ret	0
?setup_lm_screenshot_matrices@@YAXXZ ENDP		; setup_lm_screenshot_matrices
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_ECDemoRecord@@UAEPAXI@Z
_TEXT	SEGMENT
tv194 = -4						; size = 4
___flags$ = 8						; size = 4
??_ECDemoRecord@@UAEPAXI@Z PROC				; CDemoRecord::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ecx
	test	BYTE PTR ___flags$[esp], 2
	push	esi
	mov	esi, ecx
	je	$LN3@vector@68
	push	ebx
	mov	ebx, DWORD PTR [esi-4]
	lea	eax, DWORD PTR [esi-4]
	push	edi
	mov	edi, ebx
	imul	edi, 232				; 000000e8H
	add	edi, esi
	sub	ebx, 1
	mov	DWORD PTR tv194[esp+16], eax
	js	$LN6@vector@68
	push	ebp
	npad	1
$LL7@vector@68:
	sub	edi, 232				; 000000e8H
	cmp	DWORD PTR [edi+36], 0
	lea	esi, DWORD PTR [edi+36]
	lea	eax, DWORD PTR [edi+24]
	lea	ebp, DWORD PTR [edi+28]
	mov	DWORD PTR [edi], OFFSET ??_7CDemoRecord@@6BCEffectorCam@@@
	mov	DWORD PTR [eax], OFFSET ??_7CDemoRecord@@6BIInputReceiver@@@
	mov	DWORD PTR [ebp], OFFSET ??_7CDemoRecord@@6BpureRender@@@
	je	SHORT $LN10@vector@68
	mov	ecx, DWORD PTR ?pInput@@3PAVCInput@@A	; pInput
	push	eax
	call	?iRelease@CInput@@QAEXPAVIInputReceiver@@@Z ; CInput::iRelease
	mov	eax, DWORD PTR __imp_?xr_FS@@3PAVCLocatorAPI@@A
	mov	ecx, DWORD PTR [eax]
	push	esi
	call	DWORD PTR __imp_?w_close@CLocatorAPI@@QAEXAAPAVIWriter@@@Z
$LN10@vector@68:
	mov	ecx, DWORD PTR ?stored_red_text@@3HA	; stored_red_text
	mov	DWORD PTR ?g_bDisableRedText@@3HA, ecx	; g_bDisableRedText
	mov	ecx, OFFSET ?Device@@3VCRenderDevice@@A+648
	xor	esi, esi
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	test	eax, eax
	jbe	SHORT $LN23@vector@68
	npad	2
$LL25@vector@68:
	push	esi
	mov	ecx, OFFSET ?Device@@3VCRenderDevice@@A+648
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	cmp	DWORD PTR [eax], ebp
	jne	SHORT $LN24@vector@68
	push	esi
	mov	ecx, OFFSET ?Device@@3VCRenderDevice@@A+648
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	mov	DWORD PTR [eax+4], -1
$LN24@vector@68:
	mov	ecx, OFFSET ?Device@@3VCRenderDevice@@A+648
	add	esi, 1
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	cmp	esi, eax
	jb	SHORT $LL25@vector@68
$LN23@vector@68:
	test	BYTE PTR ?Device@@3VCRenderDevice@@A+660, 1
	je	SHORT $LN21@vector@68
	or	DWORD PTR ?Device@@3VCRenderDevice@@A+660, 2
	jmp	SHORT $LN20@vector@68
$LN21@vector@68:
	mov	esi, OFFSET ?Device@@3VCRenderDevice@@A+648
	call	?Resort@?$CRegistrator@VpureRender@@@@QAEXXZ ; CRegistrator<pureRender>::Resort
$LN20@vector@68:
	sub	ebx, 1
	mov	DWORD PTR [edi], OFFSET ??_7SBaseEffector@@6B@
	jns	$LL7@vector@68
	mov	eax, DWORD PTR tv194[esp+20]
	pop	ebp
$LN6@vector@68:
	test	BYTE PTR ___flags$[esp+12], 1
	pop	edi
	pop	ebx
	je	SHORT $LN4@vector@68
	test	eax, eax
	je	SHORT $LN4@vector@68
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	eax, DWORD PTR tv194[esp+8]
	pop	esi
	pop	ecx
	ret	4
$LN3@vector@68:
	call	??1CDemoRecord@@UAE@XZ			; CDemoRecord::~CDemoRecord
	test	BYTE PTR ___flags$[esp+4], 1
	je	SHORT $LN67@vector@68
	test	esi, esi
	je	SHORT $LN67@vector@68
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN67@vector@68:
	mov	eax, esi
$LN4@vector@68:
	pop	esi
	pop	ecx
	ret	4
??_ECDemoRecord@@UAEPAXI@Z ENDP				; CDemoRecord::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_GCDemoRecord@@UAEPAXI@Z			; CDemoRecord::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_GCDemoRecord@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCDemoRecord@@UAEPAXI@Z PROC				; CDemoRecord::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	??1CDemoRecord@@UAE@XZ			; CDemoRecord::~CDemoRecord
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN10@scalar@41
	test	esi, esi
	je	SHORT $LN10@scalar@41
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN10@scalar@41:
	mov	eax, esi
	pop	esi
	ret	4
??_GCDemoRecord@@UAEPAXI@Z ENDP				; CDemoRecord::`scalar deleting destructor'
PUBLIC	??4CDemoRecord@@QAEAAV0@ABV0@@Z			; CDemoRecord::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4CDemoRecord@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4CDemoRecord@@QAEAAV0@ABV0@@Z PROC			; CDemoRecord::operator=, COMDAT
; _this$ = ecx
	mov	edx, DWORD PTR ___that$[esp-4]
	mov	eax, ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], ecx
	fld	DWORD PTR [edx+16]
	fstp	DWORD PTR [eax+16]
	mov	cl, BYTE PTR [edx+20]
	mov	BYTE PTR [eax+20], cl
	mov	ecx, DWORD PTR [edx+32]
	mov	DWORD PTR [eax+32], ecx
	mov	ecx, DWORD PTR [edx+36]
	mov	DWORD PTR [eax+36], ecx
	mov	ecx, DWORD PTR [edx+40]
	mov	DWORD PTR [eax+40], ecx
	mov	ecx, DWORD PTR [edx+44]
	mov	DWORD PTR [eax+44], ecx
	mov	ecx, DWORD PTR [edx+48]
	mov	DWORD PTR [eax+48], ecx
	mov	ecx, DWORD PTR [edx+52]
	mov	DWORD PTR [eax+52], ecx
	mov	ecx, DWORD PTR [edx+56]
	mov	DWORD PTR [eax+56], ecx
	mov	ecx, DWORD PTR [edx+60]
	mov	DWORD PTR [eax+60], ecx
	push	esi
	push	edi
	lea	esi, DWORD PTR [edx+64]
	lea	edi, DWORD PTR [eax+64]
	mov	ecx, 16					; 00000010H
	rep movsd
	mov	ecx, DWORD PTR [edx+128]
	mov	DWORD PTR [eax+128], ecx
	mov	ecx, DWORD PTR [edx+132]
	mov	DWORD PTR [eax+132], ecx
	mov	ecx, DWORD PTR [edx+136]
	mov	DWORD PTR [eax+136], ecx
	mov	ecx, DWORD PTR [edx+140]
	mov	DWORD PTR [eax+140], ecx
	mov	ecx, DWORD PTR [edx+144]
	mov	DWORD PTR [eax+144], ecx
	mov	ecx, DWORD PTR [edx+148]
	mov	DWORD PTR [eax+148], ecx
	mov	ecx, DWORD PTR [edx+152]
	mov	DWORD PTR [eax+152], ecx
	mov	ecx, DWORD PTR [edx+156]
	mov	DWORD PTR [eax+156], ecx
	mov	ecx, DWORD PTR [edx+160]
	mov	DWORD PTR [eax+160], ecx
	mov	ecx, DWORD PTR [edx+164]
	mov	DWORD PTR [eax+164], ecx
	mov	ecx, DWORD PTR [edx+168]
	mov	DWORD PTR [eax+168], ecx
	mov	ecx, DWORD PTR [edx+172]
	mov	DWORD PTR [eax+172], ecx
	mov	ecx, DWORD PTR [edx+176]
	mov	DWORD PTR [eax+176], ecx
	mov	ecx, DWORD PTR [edx+180]
	mov	DWORD PTR [eax+180], ecx
	mov	ecx, DWORD PTR [edx+184]
	mov	DWORD PTR [eax+184], ecx
	mov	ecx, DWORD PTR [edx+188]
	mov	DWORD PTR [eax+188], ecx
	mov	ecx, DWORD PTR [edx+192]
	mov	DWORD PTR [eax+192], ecx
	fld	DWORD PTR [edx+196]
	fstp	DWORD PTR [eax+196]
	fld	DWORD PTR [edx+200]
	fstp	DWORD PTR [eax+200]
	fld	DWORD PTR [edx+204]
	fstp	DWORD PTR [eax+204]
	fld	DWORD PTR [edx+208]
	fstp	DWORD PTR [eax+208]
	fld	DWORD PTR [edx+212]
	fstp	DWORD PTR [eax+212]
	fld	DWORD PTR [edx+216]
	fstp	DWORD PTR [eax+216]
	fld	DWORD PTR [edx+220]
	fstp	DWORD PTR [eax+220]
	pop	edi
	fld	DWORD PTR [edx+224]
	pop	esi
	fstp	DWORD PTR [eax+224]
	mov	edx, DWORD PTR [edx+228]
	mov	DWORD PTR [eax+228], edx
	ret	4
??4CDemoRecord@@QAEAAV0@ABV0@@Z ENDP			; CDemoRecord::operator=
PUBLIC	??0CDemoRecord@@QAE@ABV0@@Z			; CDemoRecord::CDemoRecord
; Function compile flags: /Ogtpy
;	COMDAT ??0CDemoRecord@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0CDemoRecord@@QAE@ABV0@@Z PROC			; CDemoRecord::CDemoRecord, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	edx, DWORD PTR ___that$[esp-4]
	mov	DWORD PTR [eax], OFFSET ??_7SBaseEffector@@6B@
	xor	ecx, ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax], OFFSET ??_7CEffectorCam@@6B@
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], ecx
	fld	DWORD PTR [edx+16]
	fstp	DWORD PTR [eax+16]
	mov	cl, BYTE PTR [edx+20]
	mov	BYTE PTR [eax+20], cl
	mov	DWORD PTR [eax+24], OFFSET ??_7IInputReceiver@@6B@
	mov	DWORD PTR [eax+28], OFFSET ??_7pureRender@@6B@
	mov	DWORD PTR [eax], OFFSET ??_7CDemoRecord@@6BCEffectorCam@@@
	mov	DWORD PTR [eax+24], OFFSET ??_7CDemoRecord@@6BIInputReceiver@@@
	mov	DWORD PTR [eax+28], OFFSET ??_7CDemoRecord@@6BpureRender@@@
	mov	ecx, DWORD PTR [edx+32]
	mov	DWORD PTR [eax+32], ecx
	mov	ecx, DWORD PTR [edx+36]
	mov	DWORD PTR [eax+36], ecx
	mov	ecx, DWORD PTR [edx+40]
	mov	DWORD PTR [eax+40], ecx
	mov	ecx, DWORD PTR [edx+44]
	mov	DWORD PTR [eax+44], ecx
	mov	ecx, DWORD PTR [edx+48]
	mov	DWORD PTR [eax+48], ecx
	mov	ecx, DWORD PTR [edx+52]
	mov	DWORD PTR [eax+52], ecx
	mov	ecx, DWORD PTR [edx+56]
	mov	DWORD PTR [eax+56], ecx
	mov	ecx, DWORD PTR [edx+60]
	mov	DWORD PTR [eax+60], ecx
	push	esi
	push	edi
	lea	esi, DWORD PTR [edx+64]
	lea	edi, DWORD PTR [eax+64]
	mov	ecx, 16					; 00000010H
	rep movsd
	mov	ecx, DWORD PTR [edx+128]
	mov	DWORD PTR [eax+128], ecx
	mov	ecx, DWORD PTR [edx+132]
	mov	DWORD PTR [eax+132], ecx
	mov	ecx, DWORD PTR [edx+136]
	mov	DWORD PTR [eax+136], ecx
	mov	ecx, DWORD PTR [edx+140]
	mov	DWORD PTR [eax+140], ecx
	mov	ecx, DWORD PTR [edx+144]
	mov	DWORD PTR [eax+144], ecx
	mov	ecx, DWORD PTR [edx+148]
	mov	DWORD PTR [eax+148], ecx
	mov	ecx, DWORD PTR [edx+152]
	mov	DWORD PTR [eax+152], ecx
	mov	ecx, DWORD PTR [edx+156]
	mov	DWORD PTR [eax+156], ecx
	mov	ecx, DWORD PTR [edx+160]
	mov	DWORD PTR [eax+160], ecx
	mov	ecx, DWORD PTR [edx+164]
	mov	DWORD PTR [eax+164], ecx
	mov	ecx, DWORD PTR [edx+168]
	mov	DWORD PTR [eax+168], ecx
	mov	ecx, DWORD PTR [edx+172]
	mov	DWORD PTR [eax+172], ecx
	mov	ecx, DWORD PTR [edx+176]
	mov	DWORD PTR [eax+176], ecx
	mov	ecx, DWORD PTR [edx+180]
	mov	DWORD PTR [eax+180], ecx
	mov	ecx, DWORD PTR [edx+184]
	mov	DWORD PTR [eax+184], ecx
	mov	ecx, DWORD PTR [edx+188]
	mov	DWORD PTR [eax+188], ecx
	mov	ecx, DWORD PTR [edx+192]
	mov	DWORD PTR [eax+192], ecx
	fld	DWORD PTR [edx+196]
	fstp	DWORD PTR [eax+196]
	fld	DWORD PTR [edx+200]
	fstp	DWORD PTR [eax+200]
	pop	edi
	fld	DWORD PTR [edx+204]
	pop	esi
	fstp	DWORD PTR [eax+204]
	fld	DWORD PTR [edx+208]
	fstp	DWORD PTR [eax+208]
	fld	DWORD PTR [edx+212]
	fstp	DWORD PTR [eax+212]
	fld	DWORD PTR [edx+216]
	fstp	DWORD PTR [eax+216]
	fld	DWORD PTR [edx+220]
	fstp	DWORD PTR [eax+220]
	fld	DWORD PTR [edx+224]
	fstp	DWORD PTR [eax+224]
	mov	edx, DWORD PTR [edx+228]
	mov	DWORD PTR [eax+228], edx
	ret	4
??0CDemoRecord@@QAE@ABV0@@Z ENDP			; CDemoRecord::CDemoRecord
PUBLIC	?MakeLevelMapScreenshot@CDemoRecord@@AAEXH@Z	; CDemoRecord::MakeLevelMapScreenshot
; Function compile flags: /Ogtpy
;	COMDAT ?MakeLevelMapScreenshot@CDemoRecord@@AAEXH@Z
_TEXT	SEGMENT
$T530081 = -24						; size = 24
_bHQ$ = 8						; size = 4
?MakeLevelMapScreenshot@CDemoRecord@@AAEXH@Z PROC	; CDemoRecord::MakeLevelMapScreenshot, COMDAT
; _this$ = ecx

; 522  : {

	sub	esp, 24					; 00000018H
	push	esi
	push	edi

; 523  : 	Console->Execute("run_string level.set_weather(\"map\",true)");

	push	0
	mov	edi, ecx
	mov	ecx, DWORD PTR ?Console@@3PAVCConsole@@A ; Console
	push	OFFSET ??_C@_0CJ@DNOMCCAO@run_string?5level?4set_weather?$CI?$CCma@
	call	?ExecuteCommand@CConsole@@QAEXPBD_N@Z	; CConsole::ExecuteCommand

; 524  : 
; 525  : 	if(!bHQ)

	cmp	DWORD PTR _bHQ$[esp+28], 0
	jne	SHORT $LN2@MakeLevelM

; 526  : 		m_iLMScreenshotFragment = -1;

	mov	DWORD PTR [edi+188], -1

; 527  : 	else

	jmp	SHORT $LN1@MakeLevelM
$LN2@MakeLevelM:

; 528  : 		m_iLMScreenshotFragment	= 0;

	mov	DWORD PTR [edi+188], 0
$LN1@MakeLevelM:

; 529  : 	
; 530  : 	curr_lm_fbox		= get_level_screenshot_bound();

	lea	esi, DWORD PTR $T530081[esp+32]
	call	?get_level_screenshot_bound@@YA?AV?$_box3@M@@XZ ; get_level_screenshot_bound
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR ?curr_lm_fbox@@3V?$_box3@M@@A, ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR ?curr_lm_fbox@@3V?$_box3@M@@A+4, edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR ?curr_lm_fbox@@3V?$_box3@M@@A+8, ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR ?curr_lm_fbox@@3V?$_box3@M@@A+12, edx
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR ?curr_lm_fbox@@3V?$_box3@M@@A+16, ecx
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR ?curr_lm_fbox@@3V?$_box3@M@@A+20, edx

; 531  : 	GetLM_BBox			(curr_lm_fbox, m_iLMScreenshotFragment);

	mov	eax, DWORD PTR [edi+188]
	call	?GetLM_BBox@@YAXAAV?$_box3@M@@H@Z	; GetLM_BBox

; 532  : 
; 533  : 	m_bMakeLevelMap		= TRUE;

	mov	DWORD PTR [edi+192], 1

; 534  : 	m_Stage				= 0;

	mov	DWORD PTR [edi+128], 0

; 535  : }

	pop	edi
	pop	esi
	add	esp, 24					; 00000018H
	ret	4
?MakeLevelMapScreenshot@CDemoRecord@@AAEXH@Z ENDP	; CDemoRecord::MakeLevelMapScreenshot
_TEXT	ENDS
PUBLIC	?MakeLevelMapProcess@CDemoRecord@@AAEXXZ	; CDemoRecord::MakeLevelMapProcess
; Function compile flags: /Ogtpy
;	COMDAT ?MakeLevelMapProcess@CDemoRecord@@AAEXXZ
_TEXT	SEGMENT
$T530089 = -556						; size = 4
$T530090 = -552						; size = 4
$T530092 = -544						; size = 24
_tmp$129016 = -520					; size = 520
?MakeLevelMapProcess@CDemoRecord@@AAEXXZ PROC		; CDemoRecord::MakeLevelMapProcess, COMDAT
; _this$ = ecx

; 187  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 556				; 0000022cH
	push	ebp
	push	esi
	push	edi
	mov	edi, ecx

; 188  : 	switch (m_Stage)

	mov	eax, DWORD PTR [edi+128]
	xor	ebp, ebp
	cmp	eax, ebp
	je	$LN11@MakeLevelM@2
	cmp	eax, 40					; 00000028H
	je	SHORT $LN9@MakeLevelM@2

; 232  : 				m_bMakeLevelMap				= FALSE;
; 233  : 				m_iLMScreenshotFragment		= -1;
; 234  : 			}
; 235  : 		}break;
; 236  : 	default:
; 237  : 		{
; 238  : 			setup_lm_screenshot_matrices		();

	call	?setup_lm_screenshot_matrices@@YAXXZ	; setup_lm_screenshot_matrices

; 239  : 		}break;
; 240  : 	}
; 241  : 	m_Stage++;

	add	DWORD PTR [edi+128], 1

; 242  : }

	pop	edi
	pop	esi
	pop	ebp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@MakeLevelM@2:

; 198  : 
; 199  : 		}break;
; 200  : 
; 201  : 	case DEVICE_RESET_PRECACHE_FRAME_COUNT+30:
; 202  : 		{
; 203  : 			setup_lm_screenshot_matrices		();

	call	?setup_lm_screenshot_matrices@@YAXXZ	; setup_lm_screenshot_matrices

; 204  : 
; 205  : 			string_path					tmp;
; 206  : 			if(m_iLMScreenshotFragment==-1)

	cmp	DWORD PTR [edi+188], -1

; 207  : 				xr_sprintf				(tmp, sizeof(tmp),"map_%s", *g_pGameLevel->name());

	mov	ecx, DWORD PTR ?g_pGameLevel@@3PAVIGame_Level@@A ; g_pGameLevel
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+8]
	jne	SHORT $LN8@MakeLevelM@2
	lea	edx, DWORD PTR $T530089[esp+568]
	push	edx
	call	eax
	mov	eax, DWORD PTR [eax]
	cmp	eax, ebp
	je	SHORT $LN28@MakeLevelM@2
	add	eax, 16					; 00000010H
	jmp	SHORT $LN29@MakeLevelM@2
$LN28@MakeLevelM@2:
	xor	eax, eax
$LN29@MakeLevelM@2:
	push	eax
	lea	ecx, DWORD PTR _tmp$129016[esp+572]
	push	OFFSET ??_C@_06BLHCIAFO@map_?$CFs?$AA@
	push	ecx
	mov	eax, 520				; 00000208H
	call	?xr_sprintf@@YAHPADIPBDZZ		; xr_sprintf
	mov	eax, DWORD PTR $T530089[esp+580]
	add	esp, 12					; 0000000cH
	cmp	eax, ebp
	je	SHORT $LN42@MakeLevelM@2
	add	DWORD PTR [eax], -1
	mov	edx, DWORD PTR $T530089[esp+568]
	cmp	DWORD PTR [edx], ebp
	jne	SHORT $LN42@MakeLevelM@2
	mov	DWORD PTR $T530089[esp+568], ebp

; 208  : 			else

	jmp	SHORT $LN42@MakeLevelM@2
$LN8@MakeLevelM@2:

; 209  : 				xr_sprintf				(tmp, sizeof(tmp),"map_%s#%d", *g_pGameLevel->name(), m_iLMScreenshotFragment);

	lea	edx, DWORD PTR $T530090[esp+568]
	push	edx
	call	eax
	mov	eax, DWORD PTR [eax]
	cmp	eax, ebp
	je	SHORT $LN38@MakeLevelM@2
	add	eax, 16					; 00000010H
	jmp	SHORT $LN39@MakeLevelM@2
$LN38@MakeLevelM@2:
	xor	eax, eax
$LN39@MakeLevelM@2:
	mov	ecx, DWORD PTR [edi+188]
	push	ecx
	push	eax
	lea	edx, DWORD PTR _tmp$129016[esp+576]
	push	OFFSET ??_C@_09GODKKBIC@map_?$CFs?$CD?$CFd?$AA@
	push	edx
	mov	eax, 520				; 00000208H
	call	?xr_sprintf@@YAHPADIPBDZZ		; xr_sprintf
	mov	eax, DWORD PTR $T530090[esp+584]
	add	esp, 16					; 00000010H
	cmp	eax, ebp
	je	SHORT $LN42@MakeLevelM@2
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR $T530090[esp+568]
	cmp	DWORD PTR [eax], ebp
	jne	SHORT $LN42@MakeLevelM@2
	mov	DWORD PTR $T530090[esp+568], ebp
$LN42@MakeLevelM@2:

; 210  : 
; 211  : 			if(m_iLMScreenshotFragment!=-1)

	mov	eax, DWORD PTR [edi+188]
	cmp	eax, -1
	je	SHORT $LN5@MakeLevelM@2

; 212  : 			{
; 213  : 				++m_iLMScreenshotFragment;

	add	eax, 1

; 214  : 				
; 215  : 				if(m_iLMScreenshotFragment!=4)

	cmp	eax, 4
	mov	DWORD PTR [edi+188], eax
	je	SHORT $LN5@MakeLevelM@2

; 216  : 				{
; 217  : 					curr_lm_fbox		= get_level_screenshot_bound();

	lea	esi, DWORD PTR $T530092[esp+568]
	call	?get_level_screenshot_bound@@YA?AV?$_box3@M@@XZ ; get_level_screenshot_bound
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR ?curr_lm_fbox@@3V?$_box3@M@@A, ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR ?curr_lm_fbox@@3V?$_box3@M@@A+4, edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR ?curr_lm_fbox@@3V?$_box3@M@@A+8, ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR ?curr_lm_fbox@@3V?$_box3@M@@A+12, edx
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR ?curr_lm_fbox@@3V?$_box3@M@@A+16, ecx
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR ?curr_lm_fbox@@3V?$_box3@M@@A+20, edx

; 218  : 					GetLM_BBox			(curr_lm_fbox, m_iLMScreenshotFragment);

	mov	eax, DWORD PTR [edi+188]
	call	?GetLM_BBox@@YAXAAV?$_box3@M@@H@Z	; GetLM_BBox

; 219  : 					m_Stage				-= 20;

	add	DWORD PTR [edi+128], -20		; ffffffecH
$LN5@MakeLevelM@2:

; 220  : 				}
; 221  : 			}
; 222  : 
; 223  : 			Render->Screenshot			(IRender_interface::SM_FOR_LEVELMAP,tmp);

	mov	eax, DWORD PTR __imp_?Render@@3PAVIRender_interface@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+196]
	lea	eax, DWORD PTR _tmp$129016[esp+568]
	push	eax
	push	3
	call	edx

; 224  : 
; 225  : 			if(m_iLMScreenshotFragment==-1 || m_iLMScreenshotFragment==4)

	mov	eax, DWORD PTR [edi+188]
	cmp	eax, -1
	je	SHORT $LN3@MakeLevelM@2
	cmp	eax, 4
	jne	$LN51@MakeLevelM@2
$LN3@MakeLevelM@2:

; 226  : 			{
; 227  : 				psHUD_Flags.assign			(s_hud_flag);

	mov	eax, DWORD PTR _s_hud_flag

; 228  : 
; 229  : 				BOOL bDevReset				= !psDeviceFlags.equal(s_dev_flags,rsFullscreen);

	mov	ecx, DWORD PTR ?psDeviceFlags@@3U?$_flags@I@@A ; psDeviceFlags
	mov	DWORD PTR ?psHUD_Flags@@3U?$_flags@I@@A, eax ; psHUD_Flags
	mov	eax, DWORD PTR _s_dev_flags
	xor	ecx, eax
	and	ecx, 1

; 230  : 				psDeviceFlags				= s_dev_flags;

	mov	DWORD PTR ?psDeviceFlags@@3U?$_flags@I@@A, eax ; psDeviceFlags

; 231  : 				if (bDevReset)				Device.Reset();

	je	SHORT $LN2@MakeLevelM@2
	push	1
	mov	ecx, OFFSET ?Device@@3VCRenderDevice@@A	; Device
	call	?Reset@CRenderDevice@@QAEX_N@Z		; CRenderDevice::Reset
$LN2@MakeLevelM@2:

; 239  : 		}break;
; 240  : 	}
; 241  : 	m_Stage++;

	add	DWORD PTR [edi+128], 1
	mov	DWORD PTR [edi+192], ebp
	mov	DWORD PTR [edi+188], -1

; 242  : }

	pop	edi
	pop	esi
	pop	ebp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@MakeLevelM@2:

; 189  : 	{
; 190  : 	case 0:
; 191  : 		{
; 192  : 			s_dev_flags			= psDeviceFlags;

	mov	edx, DWORD PTR ?psDeviceFlags@@3U?$_flags@I@@A ; psDeviceFlags

; 193  : 			s_hud_flag.assign	(psHUD_Flags);

	mov	eax, DWORD PTR ?psHUD_Flags@@3U?$_flags@I@@A ; psHUD_Flags

; 194  : 			psDeviceFlags.zero	();
; 195  : 			psDeviceFlags.set	(rsClearBB|rsFullscreen|rsDrawStatic,TRUE);

	push	1
	push	515					; 00000203H
	mov	ecx, OFFSET ?psDeviceFlags@@3U?$_flags@I@@A ; psDeviceFlags
	mov	DWORD PTR _s_dev_flags, edx
	mov	DWORD PTR _s_hud_flag, eax
	mov	DWORD PTR ?psDeviceFlags@@3U?$_flags@I@@A, ebp ; psDeviceFlags
	call	?set@?$_flags@I@@QAEAAU1@IH@Z		; _flags<unsigned int>::set

; 196  : 			if (!psDeviceFlags.equal(s_dev_flags,rsFullscreen))

	mov	ecx, DWORD PTR ?psDeviceFlags@@3U?$_flags@I@@A ; psDeviceFlags
	xor	ecx, DWORD PTR _s_dev_flags
	test	cl, 1
	je	SHORT $LN51@MakeLevelM@2

; 197  : 				Device.Reset();

	push	1
	mov	ecx, OFFSET ?Device@@3VCRenderDevice@@A	; Device
	call	?Reset@CRenderDevice@@QAEX_N@Z		; CRenderDevice::Reset
$LN51@MakeLevelM@2:

; 239  : 		}break;
; 240  : 	}
; 241  : 	m_Stage++;

	add	DWORD PTR [edi+128], 1

; 242  : }

	pop	edi
	pop	esi
	pop	ebp
	mov	esp, ebp
	pop	ebp
	ret	0
?MakeLevelMapProcess@CDemoRecord@@AAEXXZ ENDP		; CDemoRecord::MakeLevelMapProcess
; Function compile flags: /Ogtpy
;	COMDAT ?IR_OnKeyboardPress@CDemoRecord@@UAEXH@Z
_TEXT	SEGMENT
_g_matView$543618 = -64					; size = 64
_dik$ = 8						; size = 4
?IR_OnKeyboardPress@CDemoRecord@@UAEXH@Z PROC		; CDemoRecord::IR_OnKeyboardPress, COMDAT
; _this$ = ecx

; 392  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H

; 393  : 	if (dik == DIK_MULTIPLY)	m_b_redirect_input_to_level	= !m_b_redirect_input_to_level;

	mov	eax, DWORD PTR _dik$[ebp]
	sub	esp, 68					; 00000044H
	cmp	eax, 55					; 00000037H
	push	esi
	mov	esi, ecx
	jne	SHORT $LN9@IR_OnKeybo@2
	xor	ecx, ecx
	cmp	DWORD PTR [esi+204], ecx
	sete	cl
	mov	DWORD PTR [esi+204], ecx
$LN9@IR_OnKeybo@2:

; 394  : 
; 395  : 	if(m_b_redirect_input_to_level)

	cmp	DWORD PTR [esi+204], 0
	je	SHORT $LN8@IR_OnKeybo@2

; 396  : 	{
; 397  : 		g_pGameLevel->IR_OnKeyboardPress(dik);

	mov	ecx, DWORD PTR ?g_pGameLevel@@3PAVIGame_Level@@A ; g_pGameLevel
	mov	edx, DWORD PTR [ecx+16]
	add	ecx, 16					; 00000010H
	push	eax
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 421  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
$LN8@IR_OnKeybo@2:

; 398  : 		return;
; 399  : 	}
; 400  : 	if (dik == DIK_GRAVE)

	cmp	eax, 41					; 00000029H
	jne	SHORT $LN7@IR_OnKeybo@2

; 401  : 							Console->Show			();

	mov	ecx, DWORD PTR ?Console@@3PAVCConsole@@A ; Console
	call	?Show@CConsole@@QAEXXZ			; CConsole::Show

; 421  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
$LN7@IR_OnKeybo@2:

; 402  : 	if (dik == DIK_SPACE)	RecordKey				();

	cmp	eax, 57					; 00000039H
	jne	SHORT $LN12@IR_OnKeybo@2
	lea	ecx, DWORD PTR [esi+40]
	lea	eax, DWORD PTR _g_matView$543618[esp+72]
	call	?invert@?$_matrix@M@@QAEAAU1@ABU1@@Z	; _matrix<float>::invert
	mov	ecx, DWORD PTR [esi+12]
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+12]
	push	64					; 00000040H
	lea	eax, DWORD PTR _g_matView$543618[esp+76]
	push	eax
	call	edx
	add	DWORD PTR [esi+8], 1

; 421  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4

; 402  : 	if (dik == DIK_SPACE)	RecordKey				();

$LN12@IR_OnKeybo@2:

; 403  : 	if (dik == DIK_BACK)	MakeCubemap				();

	cmp	eax, 14					; 0000000eH
	jne	SHORT $LN14@IR_OnKeybo@2
	mov	DWORD PTR [esi+156], 1
	mov	DWORD PTR [esi+104], 0

; 421  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4

; 403  : 	if (dik == DIK_BACK)	MakeCubemap				();

$LN14@IR_OnKeybo@2:

; 404  : 	if (dik == DIK_F11)		MakeLevelMapScreenshot	(IR_GetKeyState(DIK_LCONTROL));

	cmp	eax, 87					; 00000057H
	jne	SHORT $LN4@IR_OnKeybo@2
	mov	ecx, DWORD PTR ?pInput@@3PAVCInput@@A	; pInput
	xor	eax, eax
	cmp	DWORD PTR [ecx+188], eax
	lea	ecx, DWORD PTR [esi-24]
	setne	al
	push	eax
	call	?MakeLevelMapScreenshot@CDemoRecord@@AAEXH@Z ; CDemoRecord::MakeLevelMapScreenshot

; 421  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
$LN4@IR_OnKeybo@2:

; 405  : 	if (dik == DIK_F12)		MakeScreenshot			();

	cmp	eax, 88					; 00000058H
	jne	SHORT $LN23@IR_OnKeybo@2
	mov	DWORD PTR [esi+160], 1
	mov	DWORD PTR [esi+104], 0

; 421  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4

; 405  : 	if (dik == DIK_F12)		MakeScreenshot			();

$LN23@IR_OnKeybo@2:

; 406  : 	if (dik == DIK_ESCAPE)	fLifeTime				= -1;

	cmp	eax, 1
	jne	SHORT $LN2@IR_OnKeybo@2
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esi-8], xmm0

; 421  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
$LN2@IR_OnKeybo@2:

; 407  : 
; 408  : #ifndef MASTER_GOLD
; 409  : 	if (dik == DIK_RETURN)
; 410  : 	{	
; 411  : 		if (g_pGameLevel->CurrentEntity())
; 412  : 		{
; 413  : 			g_pGameLevel->CurrentEntity()->ForceTransform(m_Camera);
; 414  : 			fLifeTime		= -1; 
; 415  : 		}
; 416  : 	}
; 417  : #endif // #ifndef MASTER_GOLD
; 418  : 
; 419  : 	if	(dik == DIK_PAUSE)		

	cmp	eax, 197				; 000000c5H
	jne	$LN30@IR_OnKeybo@2

; 420  : 		Device.Pause(!Device.Paused(), TRUE, TRUE, "demo_record");

	cmp	BYTE PTR ?g_bBenchmark@@3_NA, 0		; g_bBenchmark
	jne	$LN30@IR_OnKeybo@2
	mov	ecx, DWORD PTR __imp_?g_pauseMngr@@3VpauseMngr@@A
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN38@IR_OnKeybo@2
	mov	eax, DWORD PTR ?g_pGamePersistent@@3PAVIGame_Persistent@@A ; g_pGamePersistent
	test	eax, eax
	mov	DWORD PTR ?bShowPauseString@@3HA, 1	; bShowPauseString
	je	SHORT $LN35@IR_OnKeybo@2
	mov	edx, DWORD PTR [eax]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+76]
	call	eax
	test	al, al
	je	SHORT $LN36@IR_OnKeybo@2
	mov	ecx, DWORD PTR __imp_?g_pauseMngr@@3VpauseMngr@@A
$LN35@IR_OnKeybo@2:
	push	1
	call	DWORD PTR __imp_?Pause@pauseMngr@@QAEXH@Z
$LN36@IR_OnKeybo@2:
	mov	ecx, DWORD PTR __imp_?Sound@@3PAVCSound_manager_interface@@A
	mov	ecx, DWORD PTR [ecx]
	test	ecx, ecx
	je	SHORT $LN30@IR_OnKeybo@2
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+48]
	push	1
	call	eax
	mov	DWORD PTR ?snd_emitters_@?1??Pause@CRenderDevice@@QAEXHHHPBD@Z@4HA, eax

; 421  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4

; 420  : 		Device.Pause(!Device.Paused(), TRUE, TRUE, "demo_record");

$LN38@IR_OnKeybo@2:
	movss	xmm0, DWORD PTR __real@3456bf95
	push	0
	movss	DWORD PTR ?Device@@3VCRenderDevice@@A+28, xmm0
	call	DWORD PTR __imp_?Pause@pauseMngr@@QAEXH@Z
	cmp	DWORD PTR ?snd_emitters_@?1??Pause@CRenderDevice@@QAEXHHHPBD@Z@4HA, 0
	jle	SHORT $LN30@IR_OnKeybo@2
	mov	ecx, DWORD PTR __imp_?Sound@@3PAVCSound_manager_interface@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+48]
	push	0
	call	eax
	mov	DWORD PTR ?snd_emitters_@?1??Pause@CRenderDevice@@QAEXHHHPBD@Z@4HA, eax
$LN30@IR_OnKeybo@2:

; 421  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?IR_OnKeyboardPress@CDemoRecord@@UAEXH@Z ENDP		; CDemoRecord::IR_OnKeyboardPress
_TEXT	ENDS
PUBLIC	__real@be4ccccd
PUBLIC	__real@bd4ccccd
;	COMDAT __real@be4ccccd
; File d:\clearsky\sources\engine\xrcore\_vector3d.h
CONST	SEGMENT
__real@be4ccccd DD 0be4ccccdr			; -0.2
CONST	ENDS
;	COMDAT __real@bd4ccccd
CONST	SEGMENT
__real@bd4ccccd DD 0bd4ccccdr			; -0.05
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\fdemorecord.cpp
CONST	ENDS
;	COMDAT ?ProcessCam@CDemoRecord@@UAEHAAUSCamEffectorInfo@@@Z
_TEXT	SEGMENT
__cb$543954 = -32					; size = 4
$T543962 = -32						; size = 4
__cp$543953 = -28					; size = 4
$T543964 = -28						; size = 4
__sh$543955 = -24					; size = 4
__ch$543952 = -20					; size = 4
__sp$543956 = -16					; size = 4
_vmove$129085 = -12					; size = 12
__sb$543957 = 8						; size = 4
$T543963 = 8						; size = 4
_info$ = 8						; size = 4
?ProcessCam@CDemoRecord@@UAEHAAUSCamEffectorInfo@@@Z PROC ; CDemoRecord::ProcessCam, COMDAT
; _this$ = ecx

; 275  : {

	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi

; 276  : 	info.dont_apply					= false;

	mov	edi, DWORD PTR _info$[esp+40]
	xor	ebx, ebx
	mov	esi, ecx
	mov	BYTE PTR [edi+60], bl

; 277  : 	if (0==file)					return TRUE;

	cmp	DWORD PTR [esi+36], ebx
	je	$LN169@ProcessCam@2

; 278  : 
; 279  : 	if (m_bMakeScreenshot)

	cmp	DWORD PTR [esi+184], ebx
	je	SHORT $LN14@ProcessCam@2

; 280  : 	{
; 281  : 		MakeScreenshotFace();

	call	?MakeScreenshotFace@CDemoRecord@@AAEXXZ	; CDemoRecord::MakeScreenshotFace

; 282  : 		// update camera
; 283  : 		info.n.set(m_Camera.j);

	fld	DWORD PTR [esi+80]
	fstp	DWORD PTR [edi+24]

; 387  : 	}
; 388  : 	return TRUE;

	lea	eax, DWORD PTR [ebx+1]
	fld	DWORD PTR [esi+84]
	fstp	DWORD PTR [edi+28]
	fld	DWORD PTR [esi+88]
	fstp	DWORD PTR [edi+32]
	fld	DWORD PTR [esi+96]
	fstp	DWORD PTR [edi+12]
	fld	DWORD PTR [esi+100]
	fstp	DWORD PTR [edi+16]
	fld	DWORD PTR [esi+104]
	fstp	DWORD PTR [edi+20]
	fld	DWORD PTR [esi+112]
	fstp	DWORD PTR [edi]
	fld	DWORD PTR [esi+116]
	fstp	DWORD PTR [edi+4]
	fld	DWORD PTR [esi+120]
	fstp	DWORD PTR [edi+8]
	pop	edi
	pop	esi
	pop	ebx

; 389  : }

	add	esp, 32					; 00000020H
	ret	4
$LN14@ProcessCam@2:

; 284  : 		info.d.set(m_Camera.k);
; 285  : 		info.p.set(m_Camera.c);
; 286  : 	}else if (m_bMakeLevelMap)

	cmp	DWORD PTR [esi+192], ebx
	je	SHORT $LN12@ProcessCam@2

; 287  : 	{
; 288  : 		MakeLevelMapProcess();

	call	?MakeLevelMapProcess@CDemoRecord@@AAEXXZ ; CDemoRecord::MakeLevelMapProcess

; 289  : 		info.dont_apply = true;

	mov	BYTE PTR [edi+60], 1
	pop	edi
	pop	esi

; 387  : 	}
; 388  : 	return TRUE;

	mov	eax, 1
	pop	ebx

; 389  : }

	add	esp, 32					; 00000020H
	ret	4
$LN12@ProcessCam@2:

; 290  : 	}else if (m_bMakeCubeMap)

	cmp	DWORD PTR [esi+180], ebx
	je	SHORT $LN28@ProcessCam@2

; 291  : 	{
; 292  : 		MakeCubeMapFace	(info.d, info.n);

	lea	eax, DWORD PTR [edi+24]
	push	eax
	lea	ecx, DWORD PTR [edi+12]
	push	ecx
	mov	ecx, esi
	call	?MakeCubeMapFace@CDemoRecord@@AAEXAAU?$_vector3@M@@0@Z ; CDemoRecord::MakeCubeMapFace

; 293  : 		info.p.set		(m_Camera.c);

	fld	DWORD PTR [esi+112]

; 294  : 		info.fAspect	= 1.f;

	movss	xmm0, DWORD PTR __real@3f800000
	fstp	DWORD PTR [edi]
	fld	DWORD PTR [esi+116]

; 387  : 	}
; 388  : 	return TRUE;

	mov	eax, 1
	fstp	DWORD PTR [edi+4]
	fld	DWORD PTR [esi+120]
	movss	DWORD PTR [edi+56], xmm0
	fstp	DWORD PTR [edi+8]
	pop	edi
	pop	esi
	pop	ebx

; 389  : }

	add	esp, 32					; 00000020H
	ret	4

; 295  : 	}else
; 296  : 	{
; 297  : 		if(IR_GetKeyState(DIK_F1))

$LN28@ProcessCam@2:
	mov	edx, DWORD PTR ?pInput@@3PAVCInput@@A	; pInput
	cmp	DWORD PTR [edx+308], ebx
	je	$LN8@ProcessCam@2

; 298  : 		{
; 299  : 
; 300  : 			pApp->pFontSystem->SetColor	(color_rgba(255,0,0,255));

	mov	eax, DWORD PTR ?pApp@@3PAVCApplication@@A ; pApp

; 301  : 			pApp->pFontSystem->SetAligment(CGameFont::alCenter);
; 302  : 			pApp->pFontSystem->OutSetI	(0,-.05f);

	fld	DWORD PTR __real@bd4ccccd
	mov	ecx, DWORD PTR [eax+6192]
	mov	DWORD PTR [ecx+20], -65536		; ffff0000H
	mov	edx, DWORD PTR ?pApp@@3PAVCApplication@@A ; pApp
	mov	eax, DWORD PTR [edx+6192]
	sub	esp, 8
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [eax+16], 2
	mov	ecx, DWORD PTR ?pApp@@3PAVCApplication@@A ; pApp
	fldz
	mov	ecx, DWORD PTR [ecx+6192]
	fstp	DWORD PTR [esp]
	call	?OutSetI@CGameFont@@QAEXMM@Z		; CGameFont::OutSetI

; 303  : 			pApp->pFontSystem->OutNext	("%s","RECORDING");

	mov	edx, DWORD PTR ?pApp@@3PAVCApplication@@A ; pApp
	mov	eax, DWORD PTR [edx+6192]
	push	OFFSET ??_C@_09OPNFHOOA@RECORDING?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	eax
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 304  : 			pApp->pFontSystem->OutNext	("Key frames count: %d",iCount);

	mov	ecx, DWORD PTR [esi+32]
	mov	edx, DWORD PTR ?pApp@@3PAVCApplication@@A ; pApp
	mov	eax, DWORD PTR [edx+6192]
	push	ecx
	push	OFFSET ??_C@_0BF@DOGMJHO@Key?5frames?5count?3?5?$CFd?$AA@
	push	eax
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 305  : 			pApp->pFontSystem->SetAligment(CGameFont::alLeft);
; 306  : 			pApp->pFontSystem->OutSetI	(-0.2f,+.05f);

	fld	DWORD PTR _LDIST
	mov	ecx, DWORD PTR ?pApp@@3PAVCApplication@@A ; pApp
	fstp	DWORD PTR [esp+20]
	mov	edx, DWORD PTR [ecx+6192]
	fld	DWORD PTR __real@be4ccccd
	add	esp, 16					; 00000010H
	mov	DWORD PTR [edx+16], ebx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR ?pApp@@3PAVCApplication@@A ; pApp
	mov	ecx, DWORD PTR [eax+6192]
	call	?OutSetI@CGameFont@@QAEXMM@Z		; CGameFont::OutSetI

; 307  : 			pApp->pFontSystem->OutNext	("SPACE");

	mov	ecx, DWORD PTR ?pApp@@3PAVCApplication@@A ; pApp
	mov	edx, DWORD PTR [ecx+6192]
	push	OFFSET ??_C@_05CAEOFMEP@SPACE?$AA@
	push	edx
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 308  : 			pApp->pFontSystem->OutNext	("BACK");

	mov	eax, DWORD PTR ?pApp@@3PAVCApplication@@A ; pApp
	mov	ecx, DWORD PTR [eax+6192]
	push	OFFSET ??_C@_04FJBHJJME@BACK?$AA@
	push	ecx
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 309  : 			pApp->pFontSystem->OutNext	("ESC");

	mov	edx, DWORD PTR ?pApp@@3PAVCApplication@@A ; pApp
	mov	eax, DWORD PTR [edx+6192]
	push	OFFSET ??_C@_03MHNPAEMD@ESC?$AA@
	push	eax
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 310  : 			pApp->pFontSystem->OutNext	("F11");

	mov	ecx, DWORD PTR ?pApp@@3PAVCApplication@@A ; pApp
	mov	edx, DWORD PTR [ecx+6192]
	push	OFFSET ??_C@_03IDDAKPBH@F11?$AA@
	push	edx
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 311  : 			pApp->pFontSystem->OutNext	("LCONTROL+F11");

	mov	eax, DWORD PTR ?pApp@@3PAVCApplication@@A ; pApp
	mov	ecx, DWORD PTR [eax+6192]
	push	OFFSET ??_C@_0N@EMHMJELA@LCONTROL?$CLF11?$AA@
	push	ecx
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 312  : 			pApp->pFontSystem->OutNext	("F12");

	mov	edx, DWORD PTR ?pApp@@3PAVCApplication@@A ; pApp
	mov	eax, DWORD PTR [edx+6192]
	push	OFFSET ??_C@_03KIBNPMNE@F12?$AA@
	push	eax
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 313  : 			pApp->pFontSystem->SetAligment(CGameFont::alLeft);
; 314  : 			pApp->pFontSystem->OutSetI	(0,+.05f);

	fld	DWORD PTR _LDIST
	mov	ecx, DWORD PTR ?pApp@@3PAVCApplication@@A ; pApp
	fstp	DWORD PTR [esp+44]
	mov	edx, DWORD PTR [ecx+6192]
	fldz
	add	esp, 40					; 00000028H
	fstp	DWORD PTR [esp]
	mov	DWORD PTR [edx+16], ebx
	mov	eax, DWORD PTR ?pApp@@3PAVCApplication@@A ; pApp
	mov	ecx, DWORD PTR [eax+6192]
	call	?OutSetI@CGameFont@@QAEXMM@Z		; CGameFont::OutSetI

; 315  : 			pApp->pFontSystem->OutNext	("= Append Key");

	mov	ecx, DWORD PTR ?pApp@@3PAVCApplication@@A ; pApp
	push	OFFSET ??_C@_0N@FEBBIANB@?$DN?5Append?5Key?$AA@
	mov	edx, DWORD PTR [ecx+6192]
	push	edx
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 316  : 			pApp->pFontSystem->OutNext	("= Cube Map");

	mov	eax, DWORD PTR ?pApp@@3PAVCApplication@@A ; pApp
	mov	ecx, DWORD PTR [eax+6192]
	push	OFFSET ??_C@_0L@LBPBFPMO@?$DN?5Cube?5Map?$AA@
	push	ecx
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 317  : 			pApp->pFontSystem->OutNext	("= Quit");

	mov	edx, DWORD PTR ?pApp@@3PAVCApplication@@A ; pApp
	mov	eax, DWORD PTR [edx+6192]
	push	OFFSET ??_C@_06PJEMBLKN@?$DN?5Quit?$AA@
	push	eax
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 318  : 			pApp->pFontSystem->OutNext	("= Level Map ScreenShot");

	mov	ecx, DWORD PTR ?pApp@@3PAVCApplication@@A ; pApp
	mov	edx, DWORD PTR [ecx+6192]
	push	OFFSET ??_C@_0BH@DHPNDKLL@?$DN?5Level?5Map?5ScreenShot?$AA@
	push	edx
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 319  : 			pApp->pFontSystem->OutNext	("= Level Map ScreenShot(High Quality)");

	mov	eax, DWORD PTR ?pApp@@3PAVCApplication@@A ; pApp
	mov	ecx, DWORD PTR [eax+6192]
	push	OFFSET ??_C@_0CF@HIPFDMOH@?$DN?5Level?5Map?5ScreenShot?$CIHigh?5Qual@
	push	ecx
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 320  : 			pApp->pFontSystem->OutNext	("= ScreenShot");

	mov	edx, DWORD PTR ?pApp@@3PAVCApplication@@A ; pApp
	mov	eax, DWORD PTR [edx+6192]
	push	OFFSET ??_C@_0N@FHLEPJHO@?$DN?5ScreenShot?$AA@
	push	eax
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext
	add	esp, 48					; 00000030H
$LN8@ProcessCam@2:

; 321  : 
; 322  : 		}
; 323  : 
; 324  : 		m_vVelocity.lerp		(m_vVelocity,m_vT,0.3f);

	movss	xmm2, DWORD PTR [esi+156]
	movss	xmm0, DWORD PTR __real@3f333333
	movss	xmm3, DWORD PTR [esi+132]
	movss	xmm1, DWORD PTR _particles_time
	mulss	xmm2, xmm0
	mulss	xmm3, xmm1
	addss	xmm2, xmm3
	movss	DWORD PTR [esi+156], xmm2
	movss	xmm2, DWORD PTR [esi+160]
	movss	xmm3, DWORD PTR [esi+136]
	mulss	xmm2, xmm0
	mulss	xmm3, xmm1
	addss	xmm2, xmm3
	movss	DWORD PTR [esi+160], xmm2
	movss	xmm2, DWORD PTR [esi+164]
	movss	xmm3, DWORD PTR [esi+140]
	mulss	xmm2, xmm0
	mulss	xmm3, xmm1
	addss	xmm2, xmm3
	movss	DWORD PTR [esi+164], xmm2

; 325  : 		m_vAngularVelocity.lerp	(m_vAngularVelocity,m_vR,0.3f);

	movss	xmm2, DWORD PTR [esi+168]
	movss	xmm3, DWORD PTR [esi+144]
	mulss	xmm2, xmm0
	mulss	xmm3, xmm1
	addss	xmm2, xmm3
	movss	DWORD PTR [esi+168], xmm2
	movss	xmm2, DWORD PTR [esi+172]
	movss	xmm3, DWORD PTR [esi+148]
	mulss	xmm2, xmm0
	mulss	xmm3, xmm1
	addss	xmm2, xmm3
	movss	DWORD PTR [esi+172], xmm2
	movss	xmm2, DWORD PTR [esi+176]
	mulss	xmm2, xmm0
	movss	xmm0, DWORD PTR [esi+152]
	mulss	xmm0, xmm1
	addss	xmm2, xmm0
	movss	DWORD PTR [esi+176], xmm2

; 326  : 
; 327  : 		float speed = m_fSpeed1, ang_speed = m_fAngSpeed1;
; 328  : 
; 329  : 		if (IR_GetKeyState(DIK_LSHIFT))		

	mov	eax, DWORD PTR ?pInput@@3PAVCInput@@A	; pInput
	cmp	DWORD PTR [eax+240], ebx
	movss	xmm1, DWORD PTR [esi+200]
	movss	xmm2, DWORD PTR [esi+216]
	je	SHORT $LN58@ProcessCam@2

; 330  : 		{ 
; 331  : 			speed=m_fSpeed0; 

	movss	xmm1, DWORD PTR [esi+196]

; 332  : 			ang_speed=m_fAngSpeed0;

	movss	xmm2, DWORD PTR [esi+212]

; 333  : 		}else 

	jmp	SHORT $LN3@ProcessCam@2

; 334  : 		if (IR_GetKeyState(DIK_LALT))		

$LN58@ProcessCam@2:
	cmp	DWORD PTR [eax+296], ebx
	je	SHORT $LN65@ProcessCam@2

; 335  : 		{ 
; 336  : 			speed=m_fSpeed2; 

	movss	xmm1, DWORD PTR [esi+204]

; 337  : 			ang_speed=m_fAngSpeed2;

	movss	xmm2, DWORD PTR [esi+220]

; 338  : 		}else 

	jmp	SHORT $LN3@ProcessCam@2

; 339  : 		if (IR_GetKeyState(DIK_LCONTROL)) 

$LN65@ProcessCam@2:
	cmp	DWORD PTR [eax+188], ebx
	je	SHORT $LN3@ProcessCam@2

; 340  : 		{ 
; 341  : 			speed=m_fSpeed3; 

	movss	xmm1, DWORD PTR [esi+208]

; 342  : 			ang_speed=m_fAngSpeed3;

	movss	xmm2, DWORD PTR [esi+224]
$LN3@ProcessCam@2:

; 343  : 		}
; 344  : 		
; 345  : 		m_vT.mul				(m_vVelocity, Device.fTimeDelta * speed);

	movss	xmm0, DWORD PTR ?Device@@3VCRenderDevice@@A+28
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR [esi+156]
	mulss	xmm1, xmm0
	movss	DWORD PTR [esi+132], xmm1
	movss	xmm1, DWORD PTR [esi+160]
	mulss	xmm1, xmm0
	movss	DWORD PTR [esi+136], xmm1
	movss	xmm1, DWORD PTR [esi+164]
	mulss	xmm1, xmm0
	movss	DWORD PTR [esi+140], xmm1

; 346  : 		m_vR.mul				(m_vAngularVelocity, Device.fTimeDelta * ang_speed);

	movss	xmm0, DWORD PTR ?Device@@3VCRenderDevice@@A+28
	movss	xmm1, DWORD PTR [esi+168]
	mulss	xmm0, xmm2
	mulss	xmm1, xmm0
	movss	DWORD PTR [esi+144], xmm1
	movss	xmm1, DWORD PTR [esi+172]
	mulss	xmm1, xmm0
	movss	DWORD PTR [esi+148], xmm1
	movss	xmm1, DWORD PTR [esi+176]
	mulss	xmm1, xmm0
	movss	DWORD PTR [esi+152], xmm1

; 347  : 
; 348  : 		m_HPB.x -= m_vR.y;

	movss	xmm0, DWORD PTR [esi+40]
	subss	xmm0, DWORD PTR [esi+148]
	movss	DWORD PTR [esi+40], xmm0

; 349  : 		m_HPB.y -= m_vR.x;

	movss	xmm0, DWORD PTR [esi+44]
	subss	xmm0, DWORD PTR [esi+144]
	movss	DWORD PTR [esi+44], xmm0

; 350  : 		m_HPB.z += m_vR.z;

	movss	xmm0, DWORD PTR [esi+152]
	addss	xmm0, DWORD PTR [esi+48]
	movss	DWORD PTR [esi+48], xmm0

; 351  : 		if(g_position.set_position)

	cmp	BYTE PTR ?g_position@CDemoRecord@@0Uforce_position@1@A, bl
	je	SHORT $LN2@ProcessCam@2

; 352  : 		{
; 353  : 			m_Position.set(g_position.p);

	movss	xmm0, DWORD PTR ?g_position@CDemoRecord@@0Uforce_position@1@A+1
	movss	DWORD PTR [esi+52], xmm0
	movss	xmm0, DWORD PTR ?g_position@CDemoRecord@@0Uforce_position@1@A+5
	movss	DWORD PTR [esi+56], xmm0
	movss	xmm0, DWORD PTR ?g_position@CDemoRecord@@0Uforce_position@1@A+9
	movss	DWORD PTR [esi+60], xmm0

; 354  : 			g_position.set_position = false;

	mov	BYTE PTR ?g_position@CDemoRecord@@0Uforce_position@1@A, bl

; 355  : 		} else

	jmp	SHORT $LN76@ProcessCam@2
$LN2@ProcessCam@2:

; 356  : 			g_position.p.set( m_Position );

	movss	xmm0, DWORD PTR [esi+52]
	movss	DWORD PTR ?g_position@CDemoRecord@@0Uforce_position@1@A+1, xmm0
	movss	xmm0, DWORD PTR [esi+56]
	movss	DWORD PTR ?g_position@CDemoRecord@@0Uforce_position@1@A+5, xmm0
	movss	xmm0, DWORD PTR [esi+60]
	movss	DWORD PTR ?g_position@CDemoRecord@@0Uforce_position@1@A+9, xmm0
$LN76@ProcessCam@2:

; 357  : 		// move
; 358  : 		Fvector vmove;
; 359  : 
; 360  : 		vmove.set				(m_Camera.k);

	movss	xmm1, DWORD PTR [esi+100]
	movss	xmm0, DWORD PTR [esi+104]
	movss	xmm4, DWORD PTR [esi+96]

; 361  : 		vmove.normalize_safe	();

	movaps	xmm2, xmm1
	mulss	xmm2, xmm1
	movaps	xmm3, xmm0
	mulss	xmm3, xmm0
	addss	xmm2, xmm3
	movaps	xmm3, xmm4
	mulss	xmm3, xmm4
	addss	xmm2, xmm3
	comiss	xmm2, DWORD PTR __real@00800000
	movss	DWORD PTR _vmove$129085[esp+44], xmm4
	movss	DWORD PTR _vmove$129085[esp+48], xmm1
	movss	DWORD PTR _vmove$129085[esp+52], xmm0
	jbe	SHORT $LN80@ProcessCam@2
	movss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	divss	xmm0, xmm2
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	fld	DWORD PTR _vmove$129085[esp+48]
	fmul	ST(0), ST(1)
	add	esp, 4
	fstp	DWORD PTR _vmove$129085[esp+44]
	fld	DWORD PTR _vmove$129085[esp+48]
	movss	xmm4, DWORD PTR _vmove$129085[esp+44]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _vmove$129085[esp+48]
	movss	xmm1, DWORD PTR _vmove$129085[esp+48]
	fmul	DWORD PTR _vmove$129085[esp+52]
	fstp	DWORD PTR _vmove$129085[esp+52]
	movss	xmm0, DWORD PTR _vmove$129085[esp+52]
$LN80@ProcessCam@2:

; 362  : 		vmove.mul				(m_vT.z);

	movss	xmm2, DWORD PTR [esi+140]
	mulss	xmm0, xmm2

; 363  : 		m_Position.add			(vmove);

	addss	xmm0, DWORD PTR [esi+60]
	mulss	xmm1, xmm2
	addss	xmm1, DWORD PTR [esi+56]
	movaps	xmm3, xmm2
	movss	xmm2, DWORD PTR [esi+52]
	mulss	xmm3, xmm4
	addss	xmm2, xmm3
	movss	DWORD PTR [esi+60], xmm0
	movss	DWORD PTR [esi+52], xmm2
	movss	DWORD PTR [esi+56], xmm1

; 364  : 
; 365  : 		vmove.set				(m_Camera.i);

	movss	xmm2, DWORD PTR [esi+68]
	movss	xmm1, DWORD PTR [esi+72]
	movss	xmm4, DWORD PTR [esi+64]

; 366  : 		vmove.normalize_safe	();

	movaps	xmm0, xmm2
	mulss	xmm0, xmm2
	movaps	xmm3, xmm1
	mulss	xmm3, xmm1
	addss	xmm0, xmm3
	movaps	xmm3, xmm4
	mulss	xmm3, xmm4
	addss	xmm0, xmm3
	comiss	xmm0, DWORD PTR __real@00800000
	movss	DWORD PTR _vmove$129085[esp+44], xmm4
	movss	DWORD PTR _vmove$129085[esp+48], xmm2
	movss	DWORD PTR _vmove$129085[esp+52], xmm1
	jbe	SHORT $LN95@ProcessCam@2
	movss	xmm1, DWORD PTR __real@3f800000
	push	ecx
	divss	xmm1, xmm0
	movss	DWORD PTR [esp], xmm1
	call	_sqrtf
	fld	DWORD PTR _vmove$129085[esp+48]
	fmul	ST(0), ST(1)
	add	esp, 4
	fstp	DWORD PTR _vmove$129085[esp+44]
	fld	DWORD PTR _vmove$129085[esp+48]
	movss	xmm4, DWORD PTR _vmove$129085[esp+44]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _vmove$129085[esp+48]
	movss	xmm2, DWORD PTR _vmove$129085[esp+48]
	fmul	DWORD PTR _vmove$129085[esp+52]
	fstp	DWORD PTR _vmove$129085[esp+52]
	movss	xmm1, DWORD PTR _vmove$129085[esp+52]
$LN95@ProcessCam@2:

; 367  : 		vmove.mul				(m_vT.x);

	movss	xmm0, DWORD PTR [esi+132]
	mulss	xmm2, xmm0

; 368  : 		m_Position.add			(vmove);

	addss	xmm2, DWORD PTR [esi+56]
	mulss	xmm1, xmm0
	addss	xmm1, DWORD PTR [esi+60]
	movaps	xmm3, xmm0
	movss	xmm0, DWORD PTR [esi+52]
	mulss	xmm3, xmm4
	addss	xmm0, xmm3
	movss	DWORD PTR [esi+52], xmm0
	movss	DWORD PTR [esi+56], xmm2
	movss	DWORD PTR [esi+60], xmm1

; 369  : 
; 370  : 		vmove.set				(m_Camera.j);

	movss	xmm2, DWORD PTR [esi+84]
	movss	xmm1, DWORD PTR [esi+88]
	movss	xmm4, DWORD PTR [esi+80]

; 371  : 		vmove.normalize_safe	();

	movaps	xmm0, xmm2
	mulss	xmm0, xmm2
	movaps	xmm3, xmm1
	mulss	xmm3, xmm1
	addss	xmm0, xmm3
	movaps	xmm3, xmm4
	mulss	xmm3, xmm4
	addss	xmm0, xmm3
	comiss	xmm0, DWORD PTR __real@00800000
	movss	DWORD PTR _vmove$129085[esp+44], xmm4
	movss	DWORD PTR _vmove$129085[esp+48], xmm2
	movss	DWORD PTR _vmove$129085[esp+52], xmm1
	jbe	SHORT $LN110@ProcessCam@2
	movss	xmm1, DWORD PTR __real@3f800000
	push	ecx
	divss	xmm1, xmm0
	movss	DWORD PTR [esp], xmm1
	call	_sqrtf
	fld	DWORD PTR _vmove$129085[esp+48]
	fmul	ST(0), ST(1)
	add	esp, 4
	fstp	DWORD PTR _vmove$129085[esp+44]
	fld	DWORD PTR _vmove$129085[esp+48]
	movss	xmm4, DWORD PTR _vmove$129085[esp+44]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _vmove$129085[esp+48]
	movss	xmm2, DWORD PTR _vmove$129085[esp+48]
	fmul	DWORD PTR _vmove$129085[esp+52]
	fstp	DWORD PTR _vmove$129085[esp+52]
	movss	xmm1, DWORD PTR _vmove$129085[esp+52]
$LN110@ProcessCam@2:

; 372  : 		vmove.mul				(m_vT.y);

	movss	xmm3, DWORD PTR [esi+136]
	movaps	xmm0, xmm3
	mulss	xmm0, xmm4

; 373  : 		m_Position.add			(vmove);

	addss	xmm0, DWORD PTR [esi+52]
	movss	DWORD PTR [esi+52], xmm0
	movss	xmm0, DWORD PTR [esi+56]
	mulss	xmm2, xmm3
	addss	xmm0, xmm2
	movss	DWORD PTR [esi+56], xmm0
	movss	xmm0, DWORD PTR [esi+60]
	mulss	xmm1, xmm3
	addss	xmm0, xmm1
	movss	DWORD PTR [esi+60], xmm0

; 374  : 
; 375  : 		m_Camera.setHPB			(m_HPB.x,m_HPB.y,m_HPB.z);

	fld	DWORD PTR [esi+40]
	fst	DWORD PTR $T543964[esp+44]
	push	ecx
	fld	DWORD PTR [esi+44]
	fstp	DWORD PTR $T543963[esp+44]
	fld	DWORD PTR [esi+48]
	fstp	DWORD PTR $T543962[esp+48]
	fstp	DWORD PTR [esp]
	call	_sinf
	fstp	DWORD PTR __sh$543955[esp+48]
	fld	DWORD PTR $T543964[esp+48]
	fstp	DWORD PTR [esp]
	call	_cosf
	fstp	DWORD PTR __ch$543952[esp+48]
	fld	DWORD PTR $T543963[esp+44]
	fstp	DWORD PTR [esp]
	call	_sinf
	fstp	DWORD PTR __sp$543956[esp+48]
	fld	DWORD PTR $T543963[esp+44]
	fstp	DWORD PTR [esp]
	call	_cosf
	fstp	DWORD PTR __cp$543953[esp+48]
	fld	DWORD PTR $T543962[esp+48]
	fstp	DWORD PTR [esp]
	call	_sinf
	fstp	DWORD PTR __sb$543957[esp+44]
	fld	DWORD PTR $T543962[esp+48]
	fstp	DWORD PTR [esp]
	call	_cosf
	movss	xmm4, DWORD PTR __sb$543957[esp+44]
	fst	DWORD PTR __cb$543954[esp+48]
	fld	DWORD PTR __sb$543957[esp+44]
	movss	xmm2, DWORD PTR __cb$543954[esp+48]
	fld	DWORD PTR __cp$543953[esp+48]
	movss	xmm0, DWORD PTR __sh$543955[esp+48]
	movss	xmm5, DWORD PTR __sp$543956[esp+48]
	fmul	ST(1), ST(0)
	movss	xmm6, DWORD PTR __ch$543952[esp+48]
	fxch	ST(1)
	movaps	xmm1, xmm2
	mulss	xmm2, xmm0
	fchs
	movaps	xmm3, xmm4
	fstp	DWORD PTR [esi+68]
	mulss	xmm4, xmm0
	mulss	xmm1, xmm6
	fmulp	ST(1), ST(0)
	movaps	xmm0, xmm4
	mulss	xmm0, xmm5
	movaps	xmm7, xmm1
	subss	xmm7, xmm0
	mulss	xmm3, xmm6
	movaps	xmm0, xmm3
	mulss	xmm0, xmm5
	addss	xmm0, xmm2
	movss	DWORD PTR [esi+72], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [esi+64], xmm7
	movss	DWORD PTR [esi+76], xmm0
	fstp	DWORD PTR [esi+84]
	mulss	xmm2, xmm5
	mulss	xmm1, xmm5
	addss	xmm2, xmm3
	subss	xmm4, xmm1
	movss	DWORD PTR [esi+80], xmm2
	movss	DWORD PTR [esi+88], xmm4
	add	esp, 4
	movss	DWORD PTR [esi+92], xmm0
	movss	xmm1, DWORD PTR __cp$543953[esp+44]
	movss	DWORD PTR [esi+100], xmm5
	movss	xmm3, DWORD PTR __real@80000000
	movaps	xmm2, xmm1
	mulss	xmm2, DWORD PTR __sh$543955[esp+44]
	mulss	xmm1, xmm6
	movss	DWORD PTR [esi+104], xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm3, xmm2
	movss	DWORD PTR [esi+96], xmm3
	movss	DWORD PTR [esi+108], xmm0
	movss	DWORD PTR [esi+112], xmm0
	movss	DWORD PTR [esi+116], xmm0
	movss	DWORD PTR [esi+120], xmm0
	movss	DWORD PTR [esi+124], xmm1

; 376  : 		m_Camera.translate_over	(m_Position);

	fld	DWORD PTR [esi+52]
	movss	xmm1, DWORD PTR [esi+56]
	movss	xmm2, DWORD PTR [esi+60]
	fstp	DWORD PTR [esi+112]
	movss	DWORD PTR [esi+116], xmm1
	movss	DWORD PTR [esi+120], xmm2

; 377  : 
; 378  : 		// update camera
; 379  : 		info.n.set(m_Camera.j);

	fld	DWORD PTR [esi+80]
	fstp	DWORD PTR [edi+24]
	fld	DWORD PTR [esi+84]
	fstp	DWORD PTR [edi+28]
	fld	DWORD PTR [esi+88]
	fstp	DWORD PTR [edi+32]

; 380  : 		info.d.set(m_Camera.k);

	fld	DWORD PTR [esi+96]
	fstp	DWORD PTR [edi+12]
	fld	DWORD PTR [esi+100]
	fstp	DWORD PTR [edi+16]
	fld	DWORD PTR [esi+104]
	fstp	DWORD PTR [edi+20]

; 381  : 		info.p.set(m_Camera.c);

	fld	DWORD PTR [esi+112]
	fstp	DWORD PTR [edi]
	fld	DWORD PTR [esi+116]
	fstp	DWORD PTR [edi+4]
	fld	DWORD PTR [esi+120]
	fstp	DWORD PTR [edi+8]

; 382  : 
; 383  : 		fLifeTime-=Device.fTimeDelta;

	movss	xmm1, DWORD PTR [esi+16]
	subss	xmm1, DWORD PTR ?Device@@3VCRenderDevice@@A+28
	movss	DWORD PTR [esi+16], xmm1

; 384  : 
; 385  : 		m_vT.set(0,0,0);

	movss	DWORD PTR [esi+132], xmm0
	movss	DWORD PTR [esi+136], xmm0
	movss	DWORD PTR [esi+140], xmm0

; 386  : 		m_vR.set(0,0,0);

	movss	DWORD PTR [esi+144], xmm0
	movss	DWORD PTR [esi+148], xmm0
	movss	DWORD PTR [esi+152], xmm0
$LN169@ProcessCam@2:
	pop	edi
	pop	esi

; 387  : 	}
; 388  : 	return TRUE;

	mov	eax, 1
	pop	ebx

; 389  : }

	add	esp, 32					; 00000020H
	ret	4
?ProcessCam@CDemoRecord@@UAEHAAUSCamEffectorInfo@@@Z ENDP ; CDemoRecord::ProcessCam
_TEXT	ENDS
PUBLIC	??0CDemoRecord@@QAE@PBDM@Z			; CDemoRecord::CDemoRecord
; Function compile flags: /Ogtpy
;	COMDAT ??0CDemoRecord@@QAE@PBDM@Z
_TEXT	SEGMENT
tv318 = -24						; size = 4
tv344 = -20						; size = 4
tv321 = -16						; size = 4
_DYaw$128963 = -12					; size = 12
_name$ = 8						; size = 4
_life_time$ = 12					; size = 4
??0CDemoRecord@@QAE@PBDM@Z PROC				; CDemoRecord::CDemoRecord, COMDAT
; _this$ = ecx

; 64   : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	movss	xmm0, DWORD PTR _life_time$[ebp]

; 65   : 	stored_red_text = g_bDisableRedText;
; 66   : 	g_bDisableRedText = TRUE;
; 67   : 	m_iLMScreenshotFragment = -1;
; 68   : /*
; 69   : 	stored_weapon = psHUD_Flags.test(HUD_WEAPON);
; 70   : 	stored_cross = psHUD_Flags.test(HUD_CROSSHAIR);
; 71   : 	psHUD_Flags.set(HUD_WEAPON, FALSE);
; 72   : 	psHUD_Flags.set(HUD_CROSSHAIR, FALSE);
; 73   : */
; 74   : 	m_b_redirect_input_to_level = false;
; 75   : 	_unlink	(name);

	mov	edx, DWORD PTR _name$[ebp]
	sub	esp, 28					; 0000001cH
	push	ebx
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR ?g_bDisableRedText@@3HA	; g_bDisableRedText
	xor	ebx, ebx
	mov	DWORD PTR [esi+4], ebx
	mov	DWORD PTR [esi+8], ebx
	mov	eax, 1
	push	edi
	mov	DWORD PTR [esi+12], ebx
	movss	DWORD PTR [esi+16], xmm0
	mov	BYTE PTR [esi+20], al
	mov	DWORD PTR [esi+24], OFFSET ??_7IInputReceiver@@6B@
	mov	DWORD PTR [esi+28], OFFSET ??_7pureRender@@6B@
	lea	edi, DWORD PTR [esi+24]
	push	edx
	mov	DWORD PTR [esi], OFFSET ??_7CDemoRecord@@6BCEffectorCam@@@
	mov	DWORD PTR [edi], OFFSET ??_7CDemoRecord@@6BIInputReceiver@@@
	mov	DWORD PTR [esi+28], OFFSET ??_7CDemoRecord@@6BpureRender@@@
	mov	DWORD PTR ?stored_red_text@@3HA, ecx	; stored_red_text
	mov	DWORD PTR ?g_bDisableRedText@@3HA, eax	; g_bDisableRedText
	mov	DWORD PTR [esi+188], -1
	mov	DWORD PTR [esi+228], ebx
	call	DWORD PTR __imp___unlink

; 76   : 	file	= FS.w_open	(name);

	mov	eax, DWORD PTR _name$[ebp]
	mov	ecx, DWORD PTR __imp_?xr_FS@@3PAVCLocatorAPI@@A
	mov	ecx, DWORD PTR [ecx]
	add	esp, 4
	push	eax
	call	DWORD PTR __imp_?w_open@CLocatorAPI@@QAEPAVIWriter@@PBD@Z

; 77   : 	if (file) 

	cmp	eax, ebx
	mov	DWORD PTR [esi+36], eax
	je	$LN4@CDemoRecor@2

; 78   : 	{
; 79   : 		g_position.set_position  = false;
; 80   : 		IR_Capture		();	// capture input

	mov	ecx, DWORD PTR ?pInput@@3PAVCInput@@A	; pInput
	push	edi
	mov	BYTE PTR ?g_position@CDemoRecord@@0Uforce_position@1@A, bl
	call	?iCapture@CInput@@QAEXPAVIInputReceiver@@@Z ; CInput::iCapture

; 81   : 		m_Camera.invert	(Device.mView);

	lea	eax, DWORD PTR [esi+64]
	mov	ecx, OFFSET ?Device@@3VCRenderDevice@@A+96
	call	?invert@?$_matrix@M@@QAEAAU1@ABU1@@Z	; _matrix<float>::invert

; 82   : 
; 83   : 		// parse yaw
; 84   : 		Fvector& dir	= m_Camera.k;
; 85   : 		Fvector DYaw;	DYaw.set(dir.x,0.f,dir.z); DYaw.normalize_safe();

	movss	xmm1, DWORD PTR [esi+96]
	movss	xmm0, DWORD PTR [esi+104]
	movss	DWORD PTR _DYaw$128963[esp+48], xmm0
	movaps	xmm2, xmm1
	mulss	xmm0, xmm0
	mulss	xmm2, xmm1
	addss	xmm0, xmm2
	comiss	xmm0, DWORD PTR __real@00800000
	movss	DWORD PTR _DYaw$128963[esp+40], xmm1
	jbe	SHORT $LN66@CDemoRecor@2
	movss	xmm1, DWORD PTR __real@3f800000
	push	ecx
	divss	xmm1, xmm0
	movss	DWORD PTR [esp], xmm1
	call	_sqrtf
	fld	DWORD PTR _DYaw$128963[esp+44]
	fmul	ST(0), ST(1)
	add	esp, 4
	fstp	DWORD PTR _DYaw$128963[esp+40]
	movss	xmm1, DWORD PTR _DYaw$128963[esp+40]
	fmul	DWORD PTR _DYaw$128963[esp+48]
	jmp	SHORT $LN32@CDemoRecor@2
$LN66@CDemoRecor@2:
	fld	DWORD PTR _DYaw$128963[esp+48]
$LN32@CDemoRecor@2:

; 86   : 		if (DYaw.x<0)	m_HPB.x = acosf(DYaw.z);

	xorps	xmm0, xmm0
	comiss	xmm0, xmm1
	jbe	SHORT $LN3@CDemoRecor@2
	call	__CIacos
	jmp	SHORT $LN71@CDemoRecor@2
$LN3@CDemoRecor@2:

; 87   : 		else			m_HPB.x = 2*PI-acosf(DYaw.z);

	call	__CIacos
	fsubr	DWORD PTR _PI_MUL_2
$LN71@CDemoRecor@2:
	fstp	DWORD PTR [esi+40]

; 88   : 
; 89   : 		// parse pitch
; 90   : 		dir.normalize_safe	();

	movss	xmm2, DWORD PTR [esi+96]
	movss	xmm0, DWORD PTR [esi+104]
	movss	xmm1, DWORD PTR [esi+100]
	movaps	xmm3, xmm2
	movss	DWORD PTR tv321[esp+40], xmm0
	mulss	xmm3, xmm2
	movss	DWORD PTR tv318[esp+40], xmm2
	mulss	xmm0, xmm0
	movaps	xmm2, xmm1
	addss	xmm0, xmm3
	mulss	xmm2, xmm1
	addss	xmm0, xmm2
	comiss	xmm0, DWORD PTR __real@00800000
	movss	DWORD PTR tv344[esp+40], xmm1
	jbe	SHORT $LN45@CDemoRecor@2
	movss	xmm1, DWORD PTR __real@3f800000
	push	ecx
	divss	xmm1, xmm0
	movss	DWORD PTR [esp], xmm1
	call	_sqrtf
	fld	DWORD PTR tv318[esp+44]
	fmul	ST(0), ST(1)
	add	esp, 4
	fstp	DWORD PTR [esi+96]
	fld	DWORD PTR tv344[esp+40]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esi+100]
	fmul	DWORD PTR tv321[esp+40]
	fstp	DWORD PTR [esi+104]
$LN45@CDemoRecor@2:

; 91   : 		m_HPB.y			= asinf(dir.y);

	fld	DWORD PTR [esi+100]
	call	__CIasin
	fstp	DWORD PTR [esi+44]

; 92   : 		m_HPB.z			= 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR [esi+48], xmm0

; 93   : 
; 94   : 		m_Position.set	(m_Camera.c);

	fld	DWORD PTR [esi+112]
	fstp	DWORD PTR [esi+52]

; 95   : 
; 96   : 		m_vVelocity.set	(0,0,0);
; 97   : 		m_vAngularVelocity.set(0,0,0);
; 98   : 		iCount			= 0;
; 99   : 		
; 100  : 		m_vT.set(0,0,0);
; 101  : 		m_vR.set(0,0,0);
; 102  : 		m_bMakeCubeMap		= FALSE;
; 103  : 		m_bMakeScreenshot	= FALSE;
; 104  : 		m_bMakeLevelMap		= FALSE;
; 105  : 
; 106  : 		m_fSpeed0		= pSettings->r_float("demo_record","speed0");

	push	OFFSET ??_C@_06HJIDENPF@speed0?$AA@
	fld	DWORD PTR [esi+116]
	push	OFFSET ??_C@_0M@GNMFNDPM@demo_record?$AA@
	fstp	DWORD PTR [esi+56]
	fld	DWORD PTR [esi+120]
	fstp	DWORD PTR [esi+60]
	movss	DWORD PTR [esi+156], xmm0
	movss	DWORD PTR [esi+160], xmm0
	movss	DWORD PTR [esi+164], xmm0
	movss	DWORD PTR [esi+168], xmm0
	movss	DWORD PTR [esi+172], xmm0
	movss	DWORD PTR [esi+176], xmm0
	mov	DWORD PTR [esi+32], ebx
	movss	DWORD PTR [esi+132], xmm0
	movss	DWORD PTR [esi+136], xmm0
	movss	DWORD PTR [esi+140], xmm0
	movss	DWORD PTR [esi+144], xmm0
	movss	DWORD PTR [esi+148], xmm0
	movss	DWORD PTR [esi+152], xmm0
	mov	DWORD PTR [esi+180], ebx
	mov	DWORD PTR [esi+184], ebx
	mov	DWORD PTR [esi+192], ebx
	mov	edx, DWORD PTR __imp_?pSettings@@3PBVCInifile@@B
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?r_float@CInifile@@QBEMPBD0@Z
	fstp	DWORD PTR [esi+196]

; 107  : 		m_fSpeed1		= pSettings->r_float("demo_record","speed1");

	mov	eax, DWORD PTR __imp_?pSettings@@3PBVCInifile@@B
	mov	ecx, DWORD PTR [eax]
	push	OFFSET ??_C@_06GAJIHMLE@speed1?$AA@
	push	OFFSET ??_C@_0M@GNMFNDPM@demo_record?$AA@
	call	DWORD PTR __imp_?r_float@CInifile@@QBEMPBD0@Z
	fstp	DWORD PTR [esi+200]

; 108  : 		m_fSpeed2		= pSettings->r_float("demo_record","speed2");

	mov	ecx, DWORD PTR __imp_?pSettings@@3PBVCInifile@@B
	mov	ecx, DWORD PTR [ecx]
	push	OFFSET ??_C@_06ELLFCPHH@speed2?$AA@
	push	OFFSET ??_C@_0M@GNMFNDPM@demo_record?$AA@
	call	DWORD PTR __imp_?r_float@CInifile@@QBEMPBD0@Z
	fstp	DWORD PTR [esi+204]

; 109  : 		m_fSpeed3		= pSettings->r_float("demo_record","speed3");

	mov	edx, DWORD PTR __imp_?pSettings@@3PBVCInifile@@B
	mov	ecx, DWORD PTR [edx]
	push	OFFSET ??_C@_06FCKOBODG@speed3?$AA@
	push	OFFSET ??_C@_0M@GNMFNDPM@demo_record?$AA@
	call	DWORD PTR __imp_?r_float@CInifile@@QBEMPBD0@Z
	fstp	DWORD PTR [esi+208]

; 110  : 		m_fAngSpeed0	= pSettings->r_float("demo_record","ang_speed0");

	mov	eax, DWORD PTR __imp_?pSettings@@3PBVCInifile@@B
	mov	ecx, DWORD PTR [eax]
	push	OFFSET ??_C@_0L@GFBIFDFL@ang_speed0?$AA@
	push	OFFSET ??_C@_0M@GNMFNDPM@demo_record?$AA@
	call	DWORD PTR __imp_?r_float@CInifile@@QBEMPBD0@Z
	fstp	DWORD PTR [esi+212]

; 111  : 		m_fAngSpeed1	= pSettings->r_float("demo_record","ang_speed1");

	mov	ecx, DWORD PTR __imp_?pSettings@@3PBVCInifile@@B
	mov	ecx, DWORD PTR [ecx]
	push	OFFSET ??_C@_0L@HMADGCBK@ang_speed1?$AA@
	push	OFFSET ??_C@_0M@GNMFNDPM@demo_record?$AA@
	call	DWORD PTR __imp_?r_float@CInifile@@QBEMPBD0@Z
	fstp	DWORD PTR [esi+216]

; 112  : 		m_fAngSpeed2	= pSettings->r_float("demo_record","ang_speed2");

	mov	edx, DWORD PTR __imp_?pSettings@@3PBVCInifile@@B
	mov	ecx, DWORD PTR [edx]
	push	OFFSET ??_C@_0L@FHCODBNJ@ang_speed2?$AA@
	push	OFFSET ??_C@_0M@GNMFNDPM@demo_record?$AA@
	call	DWORD PTR __imp_?r_float@CInifile@@QBEMPBD0@Z
	fstp	DWORD PTR [esi+220]

; 113  : 		m_fAngSpeed3	= pSettings->r_float("demo_record","ang_speed3");

	mov	eax, DWORD PTR __imp_?pSettings@@3PBVCInifile@@B
	mov	ecx, DWORD PTR [eax]
	push	OFFSET ??_C@_0L@EODFAAJI@ang_speed3?$AA@
	push	OFFSET ??_C@_0M@GNMFNDPM@demo_record?$AA@
	call	DWORD PTR __imp_?r_float@CInifile@@QBEMPBD0@Z
	fstp	DWORD PTR [esi+224]

; 116  : 	}
; 117  : }

	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN4@CDemoRecor@2:

; 114  : 	} else {
; 115  : 		fLifeTime = -1;

	movss	xmm0, DWORD PTR __real@bf800000

; 116  : 	}
; 117  : }

	pop	edi
	movss	DWORD PTR [esi+16], xmm0
	mov	eax, esi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0CDemoRecord@@QAE@PBDM@Z ENDP				; CDemoRecord::CDemoRecord
END
