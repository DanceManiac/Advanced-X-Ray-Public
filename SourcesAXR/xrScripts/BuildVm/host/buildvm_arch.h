/*
** This file has been pre-processed with DynASM.
** http://luajit.org/dynasm.html
** DynASM version 1.4.0, DynASM x64 version 1.4.0
** DO NOT EDIT! The original file is in "vm_x64.dasc".
*/

#if DASM_VERSION != 10400
#error "Version mismatch between DynASM and included encoding engine"
#endif
#define DASM_SECTION_CODE_OP	0
#define DASM_SECTION_CODE_SUB	1
#define DASM_MAXSECTION		2
static const unsigned char build_actionlist[16162] = {
  254,1,248,10,252,247,198,237,15,132,244,11,72,131,230,252,248,72,41,252,242,
  72,141,76,49,252,248,72,139,114,252,248,73,187,237,237,76,137,28,10,248,12,
  131,192,1,15,132,244,13,137,68,36,32,72,252,247,198,237,15,132,244,14,248,
  15,72,129,252,246,239,252,247,198,237,15,133,244,10,199,131,233,237,255,72,
  131,230,252,248,72,41,214,72,252,247,222,131,232,1,15,132,244,248,248,1,72,
  139,44,10,72,137,106,252,240,72,131,194,8,131,232,1,15,133,244,1,248,2,72,
  139,108,36,88,72,137,181,233,248,3,139,68,36,32,139,76,36,80,248,4,57,193,
  15,133,244,252,248,5,72,131,252,234,16,72,137,149,233,248,16,72,139,76,36,
  104,72,137,141,233,49,192,248,17,72,131,196,40,91,94,95,93,195,248,6,15,130,
  244,253,255,72,59,149,233,15,135,244,254,72,199,66,252,240,237,72,131,194,
  8,131,192,1,252,233,244,4,248,7,133,201,15,132,244,5,72,41,193,72,141,20,
  202,252,233,244,5,248,8,72,137,149,233,137,68,36,32,137,202,72,137,252,233,
  232,251,1,0,72,139,149,233,252,233,244,3,248,13,176,235,252,233,244,18,248,
  19,255,137,208,72,137,204,248,18,72,139,108,36,88,72,139,173,233,199,133,
  233,237,252,233,244,17,248,20,248,21,72,129,225,239,72,137,204,248,22,72,
  139,108,36,88,184,237,72,139,149,233,72,139,157,233,72,129,195,239,72,139,
  114,252,248,72,185,237,237,72,139,42,72,137,74,252,240,72,137,106,252,248,
  72,199,193,252,240,252,255,252,255,252,255,199,131,233,237,252,233,244,12,
  248,23,255,186,237,252,233,244,248,248,24,72,131,232,16,252,233,244,247,248,
  25,72,141,68,194,252,248,248,1,15,182,142,233,72,131,198,4,72,137,149,233,
  72,137,133,233,72,137,116,36,96,72,137,202,248,2,72,137,252,233,232,251,1,
  0,72,139,149,233,72,139,133,233,72,139,106,252,240,72,193,229,17,72,193,252,
  237,17,72,41,208,193,232,3,131,192,1,72,139,181,233,139,14,15,182,252,233,
  15,182,205,72,131,198,4,252,255,36,252,235,248,26,85,87,86,83,72,131,252,
  236,40,72,137,205,72,137,76,36,88,72,137,209,190,237,49,192,72,141,188,253,
  36,233,72,139,157,233,255,72,129,195,239,72,137,68,36,96,72,137,68,36,104,
  137,68,36,80,137,68,36,84,72,137,189,233,56,133,233,15,132,244,248,72,137,
  171,233,199,131,233,237,136,133,233,72,139,149,233,72,139,133,233,72,41,200,
  193,232,3,131,192,1,72,41,209,72,139,114,252,248,137,68,36,32,252,247,198,
  237,15,132,244,14,252,233,244,15,248,27,85,87,86,83,72,131,252,236,40,190,
  237,68,137,76,36,84,252,233,244,247,248,28,255,85,87,86,83,72,131,252,236,
  40,190,237,248,1,68,137,68,36,80,72,137,205,72,137,76,36,88,72,137,209,72,
  139,157,233,72,139,189,233,72,137,124,36,104,72,137,108,36,96,72,129,195,
  239,72,137,165,233,248,2,72,137,171,233,199,131,233,237,72,139,149,233,72,
  1,206,72,41,214,72,139,133,233,72,41,200,193,232,3,131,192,1,248,29,72,139,
  105,252,240,73,137,252,235,72,193,229,17,72,193,252,237,17,73,193,252,251,
  47,65,129,252,251,239,15,133,244,30,248,31,72,137,202,72,137,114,252,248,
  72,139,181,233,139,14,15,182,252,233,15,182,205,72,131,198,4,252,255,36,252,
  235,248,32,255,85,87,86,83,72,131,252,236,40,72,137,205,72,137,76,36,88,72,
  137,108,36,96,72,139,189,233,72,43,189,233,72,139,157,233,199,68,36,84,0,
  0,0,0,137,124,36,80,72,129,195,239,72,139,189,233,72,137,124,36,104,72,137,
  165,233,72,137,171,233,65,252,255,209,72,133,192,15,132,244,16,72,137,193,
  190,237,252,233,244,2,248,11,72,1,209,72,131,230,252,248,72,137,213,72,41,
  252,242,72,199,68,193,252,248,237,72,137,200,72,139,117,232,72,139,77,224,
  72,131,252,249,1,15,134,244,247,72,139,122,252,240,72,193,231,17,72,193,252,
  239,17,72,139,191,233,72,139,191,233,252,255,225,248,1,255,15,132,244,33,
  72,41,213,193,252,237,3,141,69,252,253,252,233,244,34,248,35,15,182,78,252,
  255,72,131,252,237,32,72,141,12,202,72,41,252,233,15,132,244,36,72,252,247,
  217,193,252,233,3,65,137,200,72,139,76,36,88,72,137,145,233,72,139,0,72,137,
  69,0,72,137,252,234,252,233,244,37,248,38,73,187,237,237,76,9,216,72,137,
  68,36,32,72,141,68,36,32,128,126,252,252,235,15,133,244,247,72,185,237,237,
  72,9,252,233,72,141,171,233,255,72,137,77,0,252,233,244,248,248,39,15,182,
  70,252,254,252,242,15,42,192,252,242,15,17,68,36,32,72,141,68,36,32,252,233,
  244,247,248,40,15,182,70,252,254,72,141,4,194,248,1,15,182,110,252,255,72,
  141,44,252,234,248,2,72,139,76,36,88,72,137,145,233,72,137,252,234,73,137,
  192,72,137,205,72,137,116,36,96,232,251,1,1,72,139,149,233,72,133,192,15,
  132,244,249,248,36,15,182,78,252,253,72,139,40,72,137,44,202,139,6,15,182,
  204,15,182,232,72,131,198,4,193,232,16,252,255,36,252,235,248,3,72,139,141,
  233,72,137,113,232,72,141,177,233,72,41,214,72,139,105,252,240,184,237,72,
  193,229,17,72,193,252,237,17,252,233,244,31,248,41,255,72,137,252,233,72,
  137,213,137,194,232,251,1,2,15,182,78,252,253,72,137,252,234,72,133,192,15,
  133,244,42,73,199,195,237,252,233,244,43,248,44,73,187,237,237,76,9,216,72,
  137,68,36,32,72,141,68,36,32,128,126,252,252,235,15,133,244,247,72,185,237,
  237,72,9,252,233,72,141,171,233,72,137,77,0,252,233,244,248,248,45,15,182,
  70,252,254,252,242,15,42,192,252,242,15,17,68,36,32,72,141,68,36,32,252,233,
  244,247,248,46,255,15,182,70,252,254,72,141,4,194,248,1,15,182,110,252,255,
  72,141,44,252,234,248,2,72,139,76,36,88,72,137,145,233,72,137,252,234,73,
  137,192,72,137,205,72,137,116,36,96,232,251,1,3,72,139,149,233,72,133,192,
  15,132,244,249,15,182,78,252,253,72,139,44,202,72,137,40,248,47,139,6,15,
  182,204,15,182,232,72,131,198,4,193,232,16,252,255,36,252,235,248,3,72,139,
  141,233,72,137,113,232,15,182,70,252,253,72,139,44,194,72,137,105,16,72,141,
  177,233,72,41,214,72,139,105,252,240,184,237,72,193,229,17,72,193,252,237,
  17,252,233,244,31,248,48,72,139,76,36,88,65,137,192,72,137,145,233,72,135,
  213,72,137,116,36,96,232,251,1,4,15,182,78,252,253,72,137,252,234,252,233,
  244,49,248,50,15,183,70,252,254,15,182,78,252,253,72,139,108,36,88,72,137,
  149,233,255,76,141,4,194,72,141,20,202,72,137,252,233,68,15,182,78,252,252,
  72,137,116,36,96,232,251,1,5,248,3,72,139,149,233,72,131,252,248,1,15,135,
  244,51,248,4,72,141,118,4,15,130,244,252,248,5,15,183,70,252,254,72,141,180,
  253,134,233,248,6,139,6,15,182,204,15,182,232,72,131,198,4,193,232,16,252,
  255,36,252,235,248,52,72,131,198,4,76,139,24,73,193,252,251,47,65,129,252,
  251,239,15,130,244,5,252,233,244,6,248,53,76,139,24,73,193,252,251,47,65,
  129,252,251,239,252,233,244,4,248,54,255,72,193,224,17,72,193,232,17,72,131,
  252,238,4,73,137,192,65,137,252,233,72,139,108,36,88,72,137,149,233,72,137,
  202,72,137,252,233,72,137,116,36,96,232,251,1,6,252,233,244,3,248,55,72,131,
  252,238,4,72,139,108,36,88,72,137,149,233,72,137,252,233,139,86,252,252,72,
  137,116,36,96,232,251,1,7,252,233,244,3,248,56,72,139,108,36,88,72,137,149,
  233,137,202,65,137,192,72,137,252,233,72,137,116,36,96,232,251,1,8,72,139,
  149,233,252,233,244,6,248,57,248,58,72,141,4,199,252,233,244,247,248,59,248,
  60,76,141,20,199,72,141,4,252,234,76,137,213,252,233,244,248,248,61,255,72,
  141,4,194,72,137,197,252,233,244,248,248,62,248,63,72,141,4,194,248,1,72,
  141,44,252,234,248,2,72,141,12,202,73,137,232,73,137,193,15,182,70,252,252,
  137,68,36,32,72,139,108,36,88,72,137,149,233,72,137,202,72,137,252,233,72,
  137,116,36,96,232,251,1,9,72,139,149,233,72,133,192,15,132,244,47,248,51,
  72,137,193,72,41,208,72,137,113,232,72,141,176,233,184,237,252,233,244,29,
  248,64,15,183,70,252,254,72,139,108,36,88,72,137,149,233,72,141,20,194,72,
  137,252,233,72,137,116,36,96,232,251,1,10,72,139,149,233,255,72,133,192,15,
  133,244,51,15,183,70,252,254,72,139,12,194,72,193,225,17,72,193,252,233,17,
  252,233,244,65,255,252,233,244,51,255,248,66,72,141,76,202,16,248,30,137,
  68,36,32,72,137,205,76,139,84,36,88,73,137,146,233,72,141,81,252,240,76,141,
  68,193,252,248,76,137,209,72,137,116,36,96,232,251,1,11,72,137,252,233,72,
  139,108,36,88,72,139,149,233,139,68,36,32,72,139,105,252,240,131,192,1,72,
  57,215,15,132,244,67,72,193,229,17,72,193,252,237,17,72,137,202,72,137,114,
  252,248,72,139,181,233,139,14,15,182,252,233,15,182,205,72,131,198,4,252,
  255,36,252,235,248,68,72,139,108,36,88,72,137,149,233,72,137,202,72,137,252,
  233,72,137,116,36,96,232,251,1,12,72,139,149,233,139,70,252,252,15,182,204,
  15,182,232,193,232,16,252,255,164,253,252,235,233,248,69,129,252,248,239,
  15,130,244,70,76,139,26,76,137,221,73,193,252,251,47,65,129,252,251,239,15,
  131,244,70,72,139,114,252,248,137,68,36,32,72,139,42,72,137,106,252,240,131,
  232,2,15,132,244,248,255,72,137,209,248,1,72,131,193,8,72,139,41,72,137,105,
  252,240,131,232,1,15,133,244,1,248,2,139,68,36,32,252,233,244,71,248,72,129,
  252,248,239,15,130,244,70,72,139,2,72,193,252,248,47,189,237,57,232,15,66,
  197,252,247,208,248,2,72,139,106,252,240,72,193,229,17,72,193,252,237,17,
  72,139,132,253,197,233,72,139,114,252,248,73,187,237,237,76,9,216,72,137,
  66,252,240,252,233,244,73,248,74,129,252,248,239,255,15,130,244,70,72,139,
  42,72,139,114,252,248,73,137,252,235,72,193,229,17,72,193,252,237,17,73,193,
  252,251,47,65,129,252,251,239,15,133,244,252,248,1,72,139,173,233,248,2,72,
  133,252,237,72,199,66,252,240,237,15,132,244,73,72,184,237,237,72,9,232,72,
  137,66,252,240,72,139,131,233,139,141,233,35,136,233,73,187,237,237,76,9,
  216,105,201,239,255,72,3,141,233,248,3,72,57,129,233,15,132,244,251,248,4,
  72,139,137,233,72,133,201,15,133,244,3,252,233,244,73,248,5,72,139,169,233,
  72,129,252,253,239,15,132,244,73,72,137,106,252,240,252,233,244,73,248,6,
  255,65,129,252,251,239,15,132,244,1,65,129,252,251,239,15,135,244,253,65,
  187,237,248,7,65,252,247,211,74,139,172,253,219,233,252,233,244,2,248,75,
  129,252,248,239,15,130,244,70,72,139,42,73,137,252,234,73,137,252,235,72,
  193,229,17,72,193,252,237,17,73,193,252,251,47,65,129,252,251,239,15,133,
  244,70,72,131,189,233,0,255,15,133,244,70,72,139,74,8,73,137,203,72,193,225,
  17,72,193,252,233,17,73,193,252,251,47,65,129,252,251,239,15,133,244,70,72,
  137,141,233,72,139,114,252,248,76,137,82,252,240,252,246,133,233,235,15,132,
  244,247,128,165,233,235,72,139,131,233,72,137,171,233,72,137,133,233,248,
  1,252,233,244,73,248,76,255,129,252,248,239,15,130,244,70,72,139,10,73,137,
  203,72,193,225,17,72,193,252,233,17,73,193,252,251,47,65,129,252,251,239,
  15,133,244,70,72,137,213,76,141,66,8,72,137,202,72,139,76,36,88,232,251,1,
  13,72,137,252,234,72,139,40,72,139,114,252,248,72,137,106,252,240,252,233,
  244,73,248,77,129,252,248,239,15,133,244,70,72,139,42,73,137,252,235,73,193,
  252,251,47,65,129,252,251,239,15,135,244,70,72,139,114,252,248,72,137,106,
  252,240,252,233,244,73,248,78,129,252,248,239,255,15,130,244,70,72,139,114,
  252,248,72,139,42,73,137,252,235,73,193,252,251,47,65,129,252,251,239,15,
  133,244,249,248,2,72,137,106,252,240,252,233,244,73,248,3,65,129,252,251,
  239,15,135,244,79,72,131,187,233,0,15,133,244,70,72,139,171,233,72,59,171,
  233,15,130,244,247,255,232,244,80,248,1,72,139,108,36,88,72,137,149,233,72,
  137,116,36,96,72,137,252,233,232,251,1,14,72,139,149,233,72,189,237,237,72,
  9,197,252,233,244,2,248,81,129,252,248,239,15,130,244,70,15,132,244,248,248,
  1,72,139,10,73,137,203,72,193,225,17,72,193,252,233,17,73,193,252,251,47,
  65,129,252,251,239,15,133,244,70,255,72,139,108,36,88,72,137,149,233,72,137,
  149,233,72,139,114,252,248,76,141,66,8,72,137,202,72,137,252,233,72,137,116,
  36,96,232,251,1,15,72,139,149,233,133,192,15,132,244,249,72,139,106,8,72,
  139,66,16,72,137,106,252,240,72,137,66,252,248,248,82,184,237,252,233,244,
  83,248,2,72,199,66,8,237,252,233,244,1,248,3,72,199,66,252,240,237,252,233,
  244,73,248,84,129,252,248,239,255,15,130,244,70,72,139,42,73,137,252,234,
  73,137,252,235,72,193,229,17,72,193,252,237,17,73,193,252,251,47,65,129,252,
  251,239,15,133,244,70,255,72,131,189,233,0,15,133,244,70,255,72,139,66,252,
  240,72,193,224,17,72,193,232,17,72,139,128,233,73,187,237,237,76,9,216,72,
  139,114,252,248,72,137,66,252,240,76,137,82,252,248,72,199,2,237,184,237,
  252,233,244,83,248,85,129,252,248,239,15,130,244,70,72,139,42,73,137,252,
  235,72,193,229,17,72,193,252,237,17,73,193,252,251,47,65,129,252,251,239,
  15,133,244,70,76,139,90,8,73,193,252,251,47,65,129,252,251,239,15,131,244,
  70,252,242,15,16,66,8,72,139,114,252,248,73,186,237,237,255,102,73,15,110,
  202,252,242,15,88,193,252,242,15,44,200,252,242,15,17,66,252,240,59,141,233,
  15,131,244,248,72,139,133,233,72,141,4,200,248,1,72,129,56,239,15,132,244,
  86,72,139,40,72,137,106,252,248,252,233,244,82,248,2,131,189,233,0,15,132,
  244,86,73,137,210,137,202,72,137,252,233,76,137,213,232,251,1,2,72,137,252,
  234,72,133,192,15,133,244,1,248,86,184,237,252,233,244,83,248,87,255,129,
  252,248,239,15,130,244,70,72,139,42,73,137,252,234,73,137,252,235,72,193,
  229,17,72,193,252,237,17,73,193,252,251,47,65,129,252,251,239,15,133,244,
  70,255,72,139,66,252,240,72,193,224,17,72,193,232,17,72,139,128,233,73,187,
  237,237,76,9,216,72,139,114,252,248,72,137,66,252,240,76,137,82,252,248,72,
  199,2,0,0,0,0,184,237,252,233,244,83,248,88,129,252,248,239,15,130,244,70,
  72,141,74,16,131,232,1,190,237,248,1,15,182,171,233,72,193,252,237,235,72,
  131,229,1,72,1,252,238,72,137,199,248,2,72,139,108,252,249,232,72,137,108,
  252,249,252,240,72,131,252,239,1,15,135,244,2,252,233,244,29,248,89,255,129,
  252,248,239,15,130,244,70,72,139,74,8,73,137,203,73,193,252,251,47,65,129,
  252,251,239,15,133,244,70,72,139,42,72,137,10,72,137,106,8,72,141,74,24,131,
  232,2,190,237,252,233,244,1,248,90,129,252,248,239,15,130,244,70,72,139,42,
  72,193,229,17,72,193,252,237,17,72,139,114,252,248,72,137,116,36,96,72,137,
  108,36,32,76,139,26,73,193,252,251,47,65,129,252,251,239,15,133,244,70,72,
  131,189,233,0,15,133,244,70,255,128,189,233,235,15,135,244,70,72,139,141,
  233,15,132,244,247,72,59,141,233,15,132,244,70,72,139,113,252,248,72,137,
  49,72,131,193,8,248,1,72,141,116,193,252,240,72,59,181,233,15,135,244,70,
  72,137,181,233,72,139,108,36,88,72,137,149,233,72,131,194,8,72,137,149,233,
  72,141,108,194,232,72,41,252,245,72,57,206,15,132,244,249,248,2,255,72,139,
  4,46,72,137,70,252,248,72,131,252,238,8,72,57,206,15,133,244,2,248,3,72,137,
  202,72,139,76,36,32,232,244,26,72,139,108,36,88,72,139,116,36,32,72,139,149,
  233,72,137,171,233,199,131,233,237,129,252,248,239,15,135,244,254,248,4,72,
  139,142,233,72,139,190,233,72,137,142,233,72,137,252,254,72,41,206,15,132,
  244,252,72,141,4,50,193,252,238,3,72,59,133,233,255,15,135,244,255,72,137,
  213,72,41,205,248,5,72,139,1,72,137,4,41,72,131,193,8,72,57,252,249,15,133,
  244,5,248,6,141,70,2,73,187,237,237,76,137,90,252,248,248,7,72,139,116,36,
  96,137,68,36,32,72,199,193,252,248,252,255,252,255,252,255,252,247,198,237,
  15,132,244,14,252,233,244,15,248,8,73,187,237,237,76,137,90,252,248,72,139,
  142,233,72,131,252,233,8,72,137,142,233,255,72,139,1,72,137,2,184,237,252,
  233,244,7,248,9,72,139,76,36,32,72,137,185,233,72,137,252,242,72,137,252,
  233,232,251,1,0,72,139,116,36,32,72,139,149,233,252,233,244,4,248,91,72,139,
  106,252,240,72,193,229,17,72,193,252,237,17,72,139,173,233,72,193,229,17,
  72,193,252,237,17,72,139,114,252,248,72,137,116,36,96,72,137,108,36,32,72,
  131,189,233,0,15,133,244,70,128,189,233,235,15,135,244,70,72,139,141,233,
  15,132,244,247,255,72,59,141,233,15,132,244,70,72,139,113,252,248,72,137,
  49,72,131,193,8,248,1,72,141,116,193,252,248,72,59,181,233,15,135,244,70,
  72,137,181,233,72,139,108,36,88,72,137,149,233,72,137,149,233,72,141,108,
  194,252,240,72,41,252,245,72,57,206,15,132,244,249,248,2,72,139,4,46,72,137,
  70,252,248,72,131,252,238,8,72,57,206,15,133,244,2,248,3,72,137,202,72,139,
  76,36,32,232,244,26,72,139,108,36,88,72,139,116,36,32,72,139,149,233,255,
  72,137,171,233,199,131,233,237,129,252,248,239,15,135,244,254,248,4,72,139,
  142,233,72,139,190,233,72,137,142,233,72,137,252,254,72,41,206,15,132,244,
  252,72,141,4,50,193,252,238,3,72,59,133,233,15,135,244,255,72,137,213,72,
  41,205,248,5,72,139,1,72,137,4,41,72,131,193,8,72,57,252,249,15,133,244,5,
  248,6,255,141,70,1,248,7,72,139,116,36,96,137,68,36,32,49,201,252,247,198,
  237,15,132,244,14,252,233,244,15,248,8,72,137,252,242,72,137,252,233,232,
  251,1,16,248,9,72,139,76,36,32,72,137,185,233,72,137,252,242,72,137,252,233,
  232,251,1,0,72,139,116,36,32,72,139,149,233,252,233,244,4,248,92,72,139,108,
  36,88,72,252,247,133,233,237,15,132,244,70,72,137,149,233,72,141,68,194,252,
  248,72,137,133,233,255,49,192,72,137,133,233,176,235,136,133,233,252,233,
  244,17,248,93,129,252,248,239,15,130,244,70,72,139,42,73,137,252,235,73,193,
  252,251,47,65,129,252,251,239,15,131,244,70,72,209,229,72,209,252,237,72,
  139,114,252,248,72,137,106,252,240,252,233,244,73,248,94,129,252,248,239,
  15,130,244,70,76,139,26,73,193,252,251,47,65,129,252,251,239,255,15,131,244,
  70,252,242,15,81,2,248,95,72,139,114,252,248,252,242,15,17,66,252,240,248,
  73,184,237,248,83,137,68,36,32,248,71,252,247,198,237,15,133,244,253,248,
  5,56,70,252,255,15,135,244,252,15,182,78,252,253,72,252,247,217,72,141,84,
  202,252,240,139,6,15,182,204,15,182,232,72,131,198,4,193,232,16,252,255,36,
  252,235,248,6,72,199,68,194,232,237,72,131,192,1,252,233,244,5,248,7,72,199,
  193,252,240,252,255,252,255,252,255,252,233,244,15,248,96,255,76,139,26,73,
  193,252,251,47,65,129,252,251,239,15,131,244,70,252,242,15,16,2,232,244,97,
  252,233,244,95,248,98,76,139,26,73,193,252,251,47,65,129,252,251,239,15,131,
  244,70,252,242,15,16,2,232,244,99,252,233,244,95,248,100,129,252,248,239,
  15,133,244,70,255,76,139,26,73,193,252,251,47,65,129,252,251,239,15,131,244,
  70,252,242,15,16,2,72,137,213,232,251,1,17,72,137,252,234,252,233,244,95,
  248,101,129,252,248,239,15,130,244,70,76,139,26,73,193,252,251,47,65,129,
  252,251,239,15,131,244,70,252,242,15,16,2,72,137,213,232,251,1,18,72,137,
  252,234,252,233,244,95,248,102,129,252,248,239,15,130,244,70,76,139,26,73,
  193,252,251,47,65,129,252,251,239,255,15,131,244,70,252,242,15,16,2,72,137,
  213,232,251,1,19,72,137,252,234,252,233,244,95,248,103,129,252,248,239,15,
  130,244,70,76,139,26,73,193,252,251,47,65,129,252,251,239,15,131,244,70,252,
  242,15,16,2,72,137,213,232,251,1,20,72,137,252,234,252,233,244,95,248,104,
  129,252,248,239,15,130,244,70,76,139,26,73,193,252,251,47,65,129,252,251,
  239,15,131,244,70,255,252,242,15,16,2,72,137,213,232,251,1,21,72,137,252,
  234,252,233,244,95,248,105,129,252,248,239,15,130,244,70,76,139,26,73,193,
  252,251,47,65,129,252,251,239,15,131,244,70,252,242,15,16,2,72,137,213,232,
  251,1,22,72,137,252,234,252,233,244,95,248,106,129,252,248,239,15,130,244,
  70,76,139,26,73,193,252,251,47,65,129,252,251,239,15,131,244,70,252,242,15,
  16,2,72,137,213,232,251,1,23,72,137,252,234,252,233,244,95,248,107,255,129,
  252,248,239,15,130,244,70,76,139,26,73,193,252,251,47,65,129,252,251,239,
  15,131,244,70,252,242,15,16,2,72,137,213,232,251,1,24,72,137,252,234,252,
  233,244,95,248,108,129,252,248,239,15,130,244,70,76,139,26,73,193,252,251,
  47,65,129,252,251,239,15,131,244,70,252,242,15,16,2,72,137,213,232,251,1,
  25,72,137,252,234,252,233,244,95,248,109,129,252,248,239,255,15,130,244,70,
  76,139,26,73,193,252,251,47,65,129,252,251,239,15,131,244,70,252,242,15,16,
  2,72,137,213,232,251,1,26,72,137,252,234,252,233,244,95,248,110,129,252,248,
  239,15,130,244,70,76,139,26,73,193,252,251,47,65,129,252,251,239,15,131,244,
  70,252,242,15,16,2,72,137,213,232,251,1,27,72,137,252,234,252,233,244,95,
  248,111,129,252,248,239,15,130,244,70,255,76,139,26,73,193,252,251,47,65,
  129,252,251,239,15,131,244,70,252,242,15,16,2,72,137,213,232,251,1,28,72,
  137,252,234,252,233,244,95,248,112,129,252,248,239,15,130,244,70,76,139,26,
  73,193,252,251,47,65,129,252,251,239,15,131,244,70,76,139,90,8,73,193,252,
  251,47,65,129,252,251,239,15,131,244,70,252,242,15,16,2,252,242,15,16,74,
  8,72,137,213,232,251,1,29,72,137,252,234,252,233,244,95,248,113,129,252,248,
  239,255,15,130,244,70,76,139,26,73,193,252,251,47,65,129,252,251,239,15,131,
  244,70,76,139,90,8,73,193,252,251,47,65,129,252,251,239,15,131,244,70,252,
  242,15,16,2,252,242,15,16,74,8,72,137,213,232,251,1,30,72,137,252,234,252,
  233,244,95,248,114,129,252,248,239,15,130,244,70,76,139,26,73,193,252,251,
  47,65,129,252,251,239,15,131,244,70,76,139,90,8,73,193,252,251,47,65,129,
  252,251,239,15,131,244,70,255,252,242,15,16,2,252,242,15,16,74,8,72,137,213,
  232,251,1,31,72,137,252,234,252,233,244,95,248,115,129,252,248,239,15,130,
  244,70,76,139,26,73,193,252,251,47,65,129,252,251,239,15,131,244,70,76,139,
  90,8,73,193,252,251,47,65,129,252,251,239,15,131,244,70,221,66,8,221,2,217,
  252,253,221,217,72,139,114,252,248,221,90,252,240,252,233,244,73,248,116,
  129,252,248,239,15,130,244,70,76,139,26,73,193,252,251,47,65,129,252,251,
  239,255,15,131,244,70,252,242,15,16,2,72,137,213,72,141,84,36,32,232,251,
  1,32,72,137,252,234,139,108,36,32,72,139,114,252,248,252,242,15,17,66,252,
  240,252,242,15,42,205,252,242,15,17,74,252,248,184,237,252,233,244,83,248,
  117,129,252,248,239,15,130,244,70,76,139,26,73,193,252,251,47,65,129,252,
  251,239,15,131,244,70,252,242,15,16,2,72,137,213,72,141,82,252,240,232,251,
  1,33,72,137,252,234,72,139,114,252,248,252,242,15,17,66,252,248,184,237,252,
  233,244,83,248,118,129,252,248,239,15,130,244,70,255,185,2,0,0,0,76,139,26,
  73,193,252,251,47,65,129,252,251,239,15,131,244,70,252,242,15,16,2,248,5,
  57,193,15,131,244,95,76,139,92,202,252,248,73,193,252,251,47,65,129,252,251,
  239,15,131,244,70,248,6,252,242,15,16,76,202,252,248,248,7,252,242,15,93,
  193,131,193,1,252,233,244,5,248,119,129,252,248,239,15,130,244,70,185,2,0,
  0,0,76,139,26,73,193,252,251,47,65,129,252,251,239,15,131,244,70,255,252,
  242,15,16,2,248,5,57,193,15,131,244,95,76,139,92,202,252,248,73,193,252,251,
  47,65,129,252,251,239,15,131,244,70,248,6,252,242,15,16,76,202,252,248,248,
  7,252,242,15,95,193,131,193,1,252,233,244,5,248,120,129,252,248,239,15,133,
  244,70,72,139,42,73,137,252,235,72,193,229,17,72,193,252,237,17,73,193,252,
  251,47,65,129,252,251,239,15,133,244,70,72,139,114,252,248,131,189,233,1,
  15,130,244,86,255,15,182,173,233,252,242,15,42,197,252,233,244,95,248,121,
  72,139,171,233,72,59,171,233,15,130,244,247,232,244,80,248,1,129,252,248,
  239,15,133,244,70,76,139,26,73,193,252,251,47,65,129,252,251,239,15,131,244,
  70,252,242,15,44,42,129,252,253,252,255,0,0,0,15,135,244,70,255,137,108,36,
  32,65,186,1,0,0,0,72,141,68,36,32,248,122,72,139,108,36,88,72,137,149,233,
  69,137,208,72,137,194,72,137,252,233,72,137,116,36,96,232,251,1,34,248,123,
  72,139,149,233,72,139,114,252,248,73,187,237,237,76,9,216,72,137,66,252,240,
  252,233,244,73,248,124,72,139,171,233,72,59,171,233,15,130,244,247,232,244,
  80,248,1,65,186,252,255,252,255,252,255,252,255,129,252,248,239,15,130,244,
  70,255,15,134,244,247,76,139,90,16,73,193,252,251,47,65,129,252,251,239,15,
  131,244,70,252,242,68,15,44,82,16,248,1,72,139,42,73,137,252,235,72,193,229,
  17,72,193,252,237,17,73,193,252,251,47,65,129,252,251,239,15,133,244,70,76,
  139,90,8,73,193,252,251,47,65,129,252,251,239,15,131,244,70,252,242,15,44,
  74,8,139,133,233,68,57,208,15,130,244,251,248,2,133,201,15,142,244,253,248,
  3,255,65,41,202,15,140,244,125,72,141,132,253,13,233,65,131,194,1,248,4,252,
  233,244,122,248,5,15,140,244,252,69,141,84,2,1,252,233,244,2,248,6,65,137,
  194,252,233,244,2,248,7,15,132,244,254,1,193,131,193,1,15,143,244,3,248,8,
  255,185,1,0,0,0,252,233,244,3,248,125,69,49,210,252,233,244,4,248,126,129,
  252,248,239,15,130,244,70,72,139,171,233,72,59,171,233,15,130,244,247,232,
  244,80,248,1,76,139,18,77,137,211,73,193,226,17,73,193,252,234,17,73,193,
  252,251,47,65,129,252,251,239,15,133,244,70,255,72,139,108,36,88,72,141,139,
  233,72,137,149,233,76,137,210,72,139,129,233,72,137,169,233,72,137,129,233,
  72,137,116,36,96,232,251,1,35,72,137,193,232,251,1,36,252,233,244,123,248,
  127,129,252,248,239,15,130,244,70,72,139,171,233,72,59,171,233,15,130,244,
  247,232,244,80,248,1,76,139,18,77,137,211,73,193,226,17,73,193,252,234,17,
  73,193,252,251,47,65,129,252,251,239,255,15,133,244,70,72,139,108,36,88,72,
  141,139,233,72,137,149,233,76,137,210,72,139,129,233,72,137,169,233,72,137,
  129,233,72,137,116,36,96,232,251,1,37,72,137,193,232,251,1,36,252,233,244,
  123,248,128,129,252,248,239,15,130,244,70,72,139,171,233,72,59,171,233,15,
  130,244,247,232,244,80,248,1,255,76,139,18,77,137,211,73,193,226,17,73,193,
  252,234,17,73,193,252,251,47,65,129,252,251,239,15,133,244,70,72,139,108,
  36,88,72,141,139,233,72,137,149,233,76,137,210,72,139,129,233,72,137,169,
  233,72,137,129,233,72,137,116,36,96,232,251,1,38,72,137,193,232,251,1,36,
  252,233,244,123,248,129,129,252,248,239,15,130,244,70,76,139,26,73,193,252,
  251,47,65,129,252,251,239,15,131,244,70,252,242,15,16,2,72,189,237,237,255,
  102,72,15,110,205,252,242,15,88,193,102,15,126,197,248,2,252,233,244,130,
  248,131,129,252,248,239,15,130,244,70,72,189,237,237,102,72,15,110,205,76,
  139,26,73,193,252,251,47,65,129,252,251,239,15,131,244,70,252,242,15,16,2,
  252,242,15,88,193,102,15,126,197,248,2,65,137,194,72,141,68,194,252,240,248,
  1,72,57,208,15,134,244,130,76,139,24,73,193,252,251,47,65,129,252,251,239,
  15,131,244,132,255,252,242,15,16,0,252,242,15,88,193,102,15,126,193,33,205,
  72,131,232,8,252,233,244,1,248,133,129,252,248,239,15,130,244,70,72,189,237,
  237,102,72,15,110,205,76,139,26,73,193,252,251,47,65,129,252,251,239,15,131,
  244,70,252,242,15,16,2,252,242,15,88,193,102,15,126,197,248,2,65,137,194,
  72,141,68,194,252,240,248,1,72,57,208,15,134,244,130,76,139,24,73,193,252,
  251,47,65,129,252,251,239,15,131,244,132,252,242,15,16,0,252,242,15,88,193,
  102,15,126,193,9,205,72,131,232,8,252,233,244,1,248,134,255,129,252,248,239,
  15,130,244,70,72,189,237,237,102,72,15,110,205,76,139,26,73,193,252,251,47,
  65,129,252,251,239,15,131,244,70,252,242,15,16,2,252,242,15,88,193,102,15,
  126,197,248,2,65,137,194,72,141,68,194,252,240,248,1,72,57,208,15,134,244,
  130,76,139,24,73,193,252,251,47,65,129,252,251,239,15,131,244,132,252,242,
  15,16,0,252,242,15,88,193,102,15,126,193,49,205,72,131,232,8,252,233,244,
  1,248,135,129,252,248,239,255,15,130,244,70,76,139,26,73,193,252,251,47,65,
  129,252,251,239,15,131,244,70,252,242,15,16,2,72,189,237,237,102,72,15,110,
  205,252,242,15,88,193,102,15,126,197,248,2,15,205,252,233,244,130,248,136,
  129,252,248,239,15,130,244,70,76,139,26,73,193,252,251,47,65,129,252,251,
  239,15,131,244,70,252,242,15,16,2,72,189,237,237,255,102,72,15,110,205,252,
  242,15,88,193,102,15,126,197,248,2,252,247,213,248,130,252,242,15,42,197,
  252,233,244,95,248,132,68,137,208,252,233,244,70,248,137,129,252,248,239,
  15,130,244,70,76,139,26,73,193,252,251,47,65,129,252,251,239,15,131,244,70,
  76,139,90,8,73,193,252,251,47,65,129,252,251,239,15,131,244,70,252,242,15,
  16,2,252,242,15,16,74,8,72,189,237,237,255,102,72,15,110,213,252,242,15,88,
  194,252,242,15,88,202,102,15,126,197,102,15,126,201,211,229,252,233,244,130,
  248,138,129,252,248,239,15,130,244,70,76,139,26,73,193,252,251,47,65,129,
  252,251,239,15,131,244,70,76,139,90,8,73,193,252,251,47,65,129,252,251,239,
  15,131,244,70,252,242,15,16,2,252,242,15,16,74,8,72,189,237,237,102,72,15,
  110,213,252,242,15,88,194,252,242,15,88,202,102,15,126,197,102,15,126,201,
  211,252,237,252,233,244,130,248,139,129,252,248,239,15,130,244,70,255,76,
  139,26,73,193,252,251,47,65,129,252,251,239,15,131,244,70,76,139,90,8,73,
  193,252,251,47,65,129,252,251,239,15,131,244,70,252,242,15,16,2,252,242,15,
  16,74,8,72,189,237,237,102,72,15,110,213,252,242,15,88,194,252,242,15,88,
  202,102,15,126,197,102,15,126,201,211,252,253,252,233,244,130,248,140,129,
  252,248,239,15,130,244,70,76,139,26,73,193,252,251,47,65,129,252,251,239,
  15,131,244,70,76,139,90,8,73,193,252,251,47,65,129,252,251,239,15,131,244,
  70,255,252,242,15,16,2,252,242,15,16,74,8,72,189,237,237,102,72,15,110,213,
  252,242,15,88,194,252,242,15,88,202,102,15,126,197,102,15,126,201,211,197,
  252,233,244,130,248,141,129,252,248,239,15,130,244,70,76,139,26,73,193,252,
  251,47,65,129,252,251,239,15,131,244,70,76,139,90,8,73,193,252,251,47,65,
  129,252,251,239,15,131,244,70,252,242,15,16,2,252,242,15,16,74,8,72,189,237,
  237,102,72,15,110,213,252,242,15,88,194,252,242,15,88,202,102,15,126,197,
  102,15,126,201,211,205,252,233,244,130,248,142,255,184,237,252,233,244,70,
  248,79,184,237,248,70,72,139,108,36,88,72,139,114,252,248,72,137,116,36,96,
  72,137,149,233,72,141,68,194,252,248,72,141,136,233,72,137,133,233,72,139,
  66,252,240,72,193,224,17,72,193,232,17,72,59,141,233,15,135,244,251,72,137,
  252,233,252,255,144,233,72,139,149,233,133,192,15,143,244,83,248,1,72,139,
  141,233,72,41,209,193,252,233,3,133,192,141,65,1,72,139,106,252,240,15,133,
  244,34,255,72,193,229,17,72,193,252,237,17,72,139,181,233,139,14,15,182,252,
  233,15,182,205,72,131,198,4,252,255,36,252,235,248,34,72,137,209,252,247,
  198,237,15,133,244,249,15,182,110,252,253,72,252,247,221,72,141,84,252,234,
  252,240,252,233,244,29,248,3,72,137,252,245,72,131,229,252,248,72,41,252,
  234,252,233,244,29,248,5,186,237,72,137,252,233,232,251,1,0,72,139,149,233,
  49,192,252,233,244,1,248,80,93,72,137,108,36,32,72,139,108,36,88,72,137,116,
  36,96,72,137,149,233,72,141,68,194,252,248,72,137,252,233,72,137,133,233,
  232,251,1,39,72,139,149,233,255,72,139,133,233,72,41,208,193,232,3,131,192,
  1,72,139,108,36,32,85,195,248,143,15,182,131,233,168,235,15,133,244,251,168,
  235,15,133,244,247,168,235,15,132,244,247,252,255,139,233,252,233,244,247,
  248,144,15,182,131,233,168,235,15,133,244,251,255,252,233,244,247,248,145,
  15,182,131,233,168,235,15,133,244,251,168,235,15,132,244,251,252,255,139,
  233,15,132,244,247,168,235,15,132,244,251,248,1,72,139,108,36,88,72,137,149,
  233,72,137,252,242,72,137,252,233,232,251,1,40,248,3,255,72,139,149,233,248,
  4,15,182,78,252,253,248,5,15,182,110,252,252,15,183,70,252,254,252,255,164,
  253,252,235,233,248,146,72,131,198,4,72,139,77,216,137,76,36,32,252,233,244,
  4,248,147,72,139,106,252,240,72,193,229,17,72,193,252,237,17,72,139,173,233,
  15,182,133,233,72,141,4,194,72,139,108,36,88,72,137,149,233,72,137,133,233,
  72,137,252,242,72,141,139,233,72,137,171,233,72,137,116,36,96,232,251,1,41,
  252,233,244,3,248,148,72,137,116,36,96,252,233,244,247,248,149,255,72,137,
  116,36,96,72,131,206,1,248,1,72,141,68,194,252,248,72,139,108,36,88,72,137,
  149,233,72,137,133,233,72,137,252,242,72,137,252,233,232,251,1,42,72,199,
  68,36,96,0,0,0,0,72,131,230,252,254,72,139,149,233,72,137,193,72,139,133,
  233,72,41,208,72,137,205,15,182,78,252,253,193,232,3,131,192,1,252,255,229,
  248,150,76,139,93,216,73,193,227,17,73,193,252,235,17,68,139,84,36,32,15,
  182,78,252,253,72,141,12,202,65,131,252,234,1,15,132,244,248,248,1,72,139,
  40,72,137,41,72,131,192,8,72,131,193,8,65,131,252,234,1,15,133,244,1,248,
  2,15,182,70,252,253,15,182,110,252,255,72,1,232,72,141,68,194,252,248,248,
  3,72,57,200,15,135,244,255,77,133,219,15,132,244,47,65,15,183,171,233,65,
  15,183,131,233,255,57,232,15,132,244,47,133,192,15,133,245,72,137,171,233,
  72,139,108,36,88,72,137,149,233,72,137,252,242,72,141,139,233,72,137,171,
  233,232,251,1,43,72,139,149,233,252,233,244,47,248,9,72,199,1,237,72,131,
  193,8,252,233,244,3,248,151,255,72,139,108,36,88,72,137,149,233,72,137,252,
  242,72,137,252,233,232,251,1,44,72,139,149,233,72,131,252,238,4,252,233,244,
  47,255,248,152,65,85,65,84,65,83,65,82,65,81,65,80,87,86,85,72,141,108,36,
  88,85,83,82,81,80,15,182,69,252,248,138,101,252,240,76,137,125,252,248,76,
  137,117,252,240,139,139,233,199,131,233,237,137,131,233,137,139,233,72,129,
  252,236,239,72,131,197,128,252,242,68,15,17,125,252,248,252,242,68,15,17,
  117,252,240,252,242,68,15,17,109,232,252,242,68,15,17,101,224,252,242,68,
  15,17,93,216,252,242,68,15,17,85,208,252,242,68,15,17,77,200,252,242,68,15,
  17,69,192,252,242,15,17,125,184,252,242,15,17,117,176,252,242,15,17,109,168,
  252,242,15,17,101,160,252,242,15,17,93,152,252,242,15,17,85,144,252,242,15,
  17,77,136,252,242,15,17,69,128,72,139,171,233,72,139,147,233,72,137,171,233,
  72,137,149,233,72,141,148,253,36,233,72,141,139,233,72,199,131,233,0,0,0,
  0,232,251,1,45,72,139,141,233,72,129,225,239,72,137,169,233,72,139,149,233,
  72,139,177,233,255,252,233,244,247,248,153,72,141,140,253,36,233,248,1,102,
  68,15,111,185,233,102,68,15,111,177,233,102,68,15,111,169,233,102,68,15,111,
  161,233,102,68,15,111,153,233,102,68,15,111,145,233,102,68,15,111,137,233,
  102,68,15,111,129,233,102,15,111,185,233,72,137,204,102,15,111,177,233,76,
  139,60,36,76,139,116,36,8,76,139,108,36,16,76,139,100,36,24,133,192,15,136,
  244,255,72,139,108,36,88,137,68,36,32,72,139,122,252,240,72,193,231,17,72,
  193,252,239,17,72,139,191,233,72,139,191,233,255,72,137,149,233,72,199,131,
  233,0,0,0,0,199,131,233,237,139,6,15,182,204,15,182,232,72,131,198,4,193,
  232,16,129,252,253,239,15,130,244,249,129,252,253,239,15,131,244,250,248,
  2,139,68,36,32,248,3,252,255,36,252,235,248,4,72,139,66,252,248,169,237,15,
  133,244,2,15,182,64,252,253,72,252,247,216,72,139,124,194,224,72,193,231,
  17,72,193,252,239,17,72,139,191,233,72,139,191,233,252,233,244,2,248,9,255,
  137,194,72,137,252,233,252,247,218,232,251,1,46,248,154,248,97,72,184,237,
  237,102,72,15,110,208,72,184,237,237,102,72,15,110,216,15,40,200,102,15,84,
  202,102,15,46,217,15,134,244,247,102,15,85,208,252,242,15,88,203,252,242,
  15,92,203,102,15,86,202,72,184,237,237,102,72,15,110,208,252,242,15,194,193,
  1,102,15,84,194,252,242,15,92,200,15,40,193,248,1,195,248,155,248,99,72,184,
  237,237,102,72,15,110,208,72,184,237,237,102,72,15,110,216,15,40,200,102,
  15,84,202,102,15,46,217,15,134,244,247,255,102,15,85,208,252,242,15,88,203,
  252,242,15,92,203,102,15,86,202,72,184,237,237,102,72,15,110,208,252,242,
  15,194,193,6,102,15,84,194,252,242,15,92,200,15,40,193,248,1,195,248,156,
  248,157,72,184,237,237,102,72,15,110,208,72,184,237,237,102,72,15,110,216,
  15,40,200,102,15,84,202,102,15,46,217,15,134,244,247,102,15,85,208,15,40,
  193,252,242,15,88,203,252,242,15,92,203,72,184,237,237,102,72,15,110,216,
  252,242,15,194,193,1,102,15,84,195,252,242,15,92,200,102,15,86,202,15,40,
  193,248,1,195,248,158,15,40,232,252,242,15,94,193,72,184,237,237,102,72,15,
  110,208,72,184,237,237,255,102,72,15,110,216,15,40,224,102,15,84,226,102,
  15,46,220,15,134,244,247,102,15,85,208,252,242,15,88,227,252,242,15,92,227,
  102,15,86,226,72,184,237,237,102,72,15,110,208,252,242,15,194,196,1,102,15,
  84,194,252,242,15,92,224,15,40,197,252,242,15,89,204,252,242,15,92,193,195,
  248,1,252,242,15,89,200,15,40,197,252,242,15,92,193,195,248,159,131,252,248,
  1,15,142,244,252,248,1,169,1,0,0,0,15,133,244,248,252,242,15,89,192,209,232,
  252,233,244,1,248,2,209,232,15,132,244,251,15,40,200,248,3,252,242,15,89,
  192,209,232,15,132,244,250,255,15,131,244,3,252,242,15,89,200,252,233,244,
  3,248,4,252,242,15,89,193,248,5,195,248,6,15,132,244,5,15,130,244,253,252,
  247,216,232,244,1,72,184,237,237,102,72,15,110,200,252,242,15,94,200,15,40,
  193,195,248,7,72,184,237,237,102,72,15,110,192,195,248,160,255,137,200,86,
  72,137,214,83,49,201,15,162,137,6,137,94,4,137,78,8,137,86,12,91,94,195,248,
  161,255,204,255,204,248,162,87,86,83,72,131,252,236,40,72,141,157,233,72,
  139,181,233,15,183,192,137,134,233,72,137,142,233,72,137,150,233,76,137,134,
  233,76,137,142,233,252,242,15,17,134,233,252,242,15,17,142,233,252,242,15,
  17,150,233,252,242,15,17,158,233,72,141,132,253,36,233,72,137,134,233,72,
  137,226,72,137,116,36,96,72,137,252,241,232,251,1,47,199,131,233,237,72,139,
  144,233,72,139,128,233,72,41,208,72,139,106,252,240,72,193,229,17,72,193,
  252,237,17,72,193,232,3,72,131,192,1,72,139,181,233,255,139,14,15,182,252,
  233,15,182,205,72,131,198,4,252,255,36,252,235,248,33,72,139,76,36,88,72,
  139,179,233,72,137,142,233,72,137,145,233,72,137,169,233,72,137,252,241,72,
  137,194,232,251,1,48,72,139,134,233,252,242,15,16,134,233,252,233,244,17,
  248,163,85,72,137,229,83,72,137,203,139,131,233,72,41,196,15,182,139,233,
  131,252,233,1,15,136,244,248,248,1,72,139,132,253,203,233,72,137,132,253,
  204,233,131,252,233,1,15,137,244,1,248,2,255,15,182,131,233,72,139,139,233,
  72,139,147,233,76,139,131,233,76,139,139,233,133,192,15,132,244,251,15,40,
  131,233,15,40,139,233,15,40,147,233,15,40,155,233,248,5,252,255,147,233,72,
  137,131,233,15,41,131,233,72,139,93,252,248,201,195,255,249,255,76,139,28,
  202,72,139,44,194,76,137,217,72,137,232,73,193,252,251,47,72,193,252,253,
  47,65,129,252,251,239,15,131,244,50,129,252,253,239,15,131,244,50,248,1,102,
  72,15,110,192,248,2,102,72,15,110,201,248,3,72,131,198,4,102,15,46,193,255,
  15,135,244,247,255,15,131,244,247,255,15,183,70,252,254,72,141,180,253,134,
  233,248,1,139,6,15,182,204,15,182,232,72,131,198,4,193,232,16,252,255,36,
  252,235,255,72,139,44,194,76,139,28,202,72,131,198,4,72,137,232,76,137,217,
  72,193,252,253,47,73,193,252,251,47,255,129,252,253,239,15,131,244,251,65,
  129,252,251,239,15,131,244,251,102,72,15,110,200,248,1,102,72,15,110,193,
  248,2,102,15,46,193,248,4,255,15,138,244,248,15,133,244,248,255,15,138,244,
  248,15,132,244,247,255,248,1,15,183,70,252,254,72,141,180,253,134,233,248,
  2,255,248,2,15,183,70,252,254,72,141,180,253,134,233,248,1,255,252,233,244,
  9,255,248,5,129,252,253,239,15,132,244,55,65,129,252,251,239,15,132,244,55,
  72,57,193,15,132,244,1,68,57,221,15,133,244,2,129,252,253,239,15,135,244,
  2,72,193,225,17,72,193,252,233,17,72,139,169,233,72,133,252,237,15,132,244,
  2,252,246,133,233,235,255,15,133,244,2,255,49,252,237,255,189,1,0,0,0,255,
  252,233,244,54,255,248,3,65,129,252,251,239,255,15,133,244,9,255,252,233,
  244,55,255,72,252,247,208,72,139,44,202,72,131,198,4,73,137,252,235,72,193,
  229,17,72,193,252,237,17,73,193,252,251,47,65,129,252,251,239,15,133,244,
  249,72,59,44,199,255,72,139,44,202,72,131,198,4,255,73,137,252,235,73,193,
  252,251,47,65,129,252,251,239,15,131,244,249,248,1,252,242,15,16,4,199,248,
  2,102,15,46,4,202,248,4,255,72,252,247,208,72,139,44,202,72,193,252,253,47,
  72,131,198,4,57,197,255,15,133,244,249,15,183,70,252,254,72,141,180,253,134,
  233,248,2,139,6,15,182,204,15,182,232,72,131,198,4,193,232,16,252,255,36,
  252,235,248,3,129,252,253,239,15,133,244,2,252,233,244,55,255,15,132,244,
  248,129,252,253,239,15,132,244,55,15,183,70,252,254,72,141,180,253,134,233,
  248,2,139,6,15,182,204,15,182,232,72,131,198,4,193,232,16,252,255,36,252,
  235,255,76,139,28,194,72,131,198,4,255,76,137,221,255,72,137,44,202,255,72,
  139,44,202,72,193,252,253,47,1,197,15,133,244,56,139,6,15,182,204,15,182,
  232,72,131,198,4,193,232,16,252,255,36,252,235,255,76,139,28,202,73,193,252,
  251,47,65,129,252,251,239,15,131,244,56,139,6,15,182,204,15,182,232,72,131,
  198,4,193,232,16,252,255,36,252,235,255,72,139,44,194,72,137,44,202,139,6,
  15,182,204,15,182,232,72,131,198,4,193,232,16,252,255,36,252,235,255,72,139,
  44,194,72,193,252,253,47,184,2,0,0,0,72,129,252,253,239,131,216,0,72,193,
  224,47,72,252,247,208,72,137,4,202,139,6,15,182,204,15,182,232,72,131,198,
  4,193,232,16,252,255,36,252,235,255,72,139,44,194,73,137,252,235,73,193,252,
  251,47,65,129,252,251,239,15,131,244,61,72,184,237,237,72,49,197,72,137,44,
  202,139,6,15,182,204,15,182,232,72,131,198,4,193,232,16,252,255,36,252,235,
  255,72,139,4,194,73,137,195,72,193,224,17,72,193,232,17,73,193,252,251,47,
  65,129,252,251,239,15,133,244,248,15,87,192,252,242,15,42,128,233,248,1,252,
  242,15,17,4,202,139,6,15,182,204,15,182,232,72,131,198,4,193,232,16,252,255,
  36,252,235,248,2,65,129,252,251,239,15,133,244,64,72,137,193,255,72,139,168,
  233,72,131,252,253,0,15,133,244,255,248,3,255,248,65,72,137,213,232,251,1,
  49,252,242,15,42,192,72,137,252,234,15,182,78,252,253,252,233,244,1,255,248,
  9,252,246,133,233,235,15,133,244,3,252,233,244,64,255,15,182,252,236,15,182,
  192,255,76,139,28,252,234,73,193,252,251,47,65,129,252,251,239,15,131,244,
  58,252,242,15,16,4,252,234,252,242,15,88,4,199,255,76,139,28,252,234,73,193,
  252,251,47,65,129,252,251,239,15,131,244,60,252,242,15,16,4,199,252,242,15,
  88,4,252,234,255,76,139,28,252,234,73,193,252,251,47,65,129,252,251,239,15,
  131,244,63,76,139,28,194,73,193,252,251,47,65,129,252,251,239,15,131,244,
  63,252,242,15,16,4,252,234,252,242,15,88,4,194,255,252,242,15,17,4,202,139,
  6,15,182,204,15,182,232,72,131,198,4,193,232,16,252,255,36,252,235,255,76,
  139,28,252,234,73,193,252,251,47,65,129,252,251,239,15,131,244,58,252,242,
  15,16,4,252,234,252,242,15,92,4,199,255,76,139,28,252,234,73,193,252,251,
  47,65,129,252,251,239,15,131,244,60,252,242,15,16,4,199,252,242,15,92,4,252,
  234,255,76,139,28,252,234,73,193,252,251,47,65,129,252,251,239,15,131,244,
  63,76,139,28,194,73,193,252,251,47,65,129,252,251,239,15,131,244,63,252,242,
  15,16,4,252,234,252,242,15,92,4,194,255,76,139,28,252,234,73,193,252,251,
  47,65,129,252,251,239,15,131,244,58,252,242,15,16,4,252,234,252,242,15,89,
  4,199,255,76,139,28,252,234,73,193,252,251,47,65,129,252,251,239,15,131,244,
  60,252,242,15,16,4,199,252,242,15,89,4,252,234,255,76,139,28,252,234,73,193,
  252,251,47,65,129,252,251,239,15,131,244,63,76,139,28,194,73,193,252,251,
  47,65,129,252,251,239,15,131,244,63,252,242,15,16,4,252,234,252,242,15,89,
  4,194,255,76,139,28,252,234,73,193,252,251,47,65,129,252,251,239,15,131,244,
  58,252,242,15,16,4,252,234,252,242,15,94,4,199,255,76,139,28,252,234,73,193,
  252,251,47,65,129,252,251,239,15,131,244,60,252,242,15,16,4,199,252,242,15,
  94,4,252,234,255,76,139,28,252,234,73,193,252,251,47,65,129,252,251,239,15,
  131,244,63,76,139,28,194,73,193,252,251,47,65,129,252,251,239,15,131,244,
  63,252,242,15,16,4,252,234,252,242,15,94,4,194,255,76,139,28,252,234,73,193,
  252,251,47,65,129,252,251,239,15,131,244,58,252,242,15,16,4,252,234,252,242,
  15,16,12,199,255,76,139,28,252,234,73,193,252,251,47,65,129,252,251,239,15,
  131,244,60,252,242,15,16,4,199,252,242,15,16,12,252,234,255,76,139,28,252,
  234,73,193,252,251,47,65,129,252,251,239,15,131,244,63,76,139,28,194,73,193,
  252,251,47,65,129,252,251,239,15,131,244,63,252,242,15,16,4,252,234,252,242,
  15,16,12,194,255,248,164,232,244,158,252,242,15,17,4,202,139,6,15,182,204,
  15,182,232,72,131,198,4,193,232,16,252,255,36,252,235,255,252,233,244,164,
  255,72,137,213,232,251,1,29,15,182,78,252,253,72,137,252,234,252,242,15,17,
  4,202,139,6,15,182,204,15,182,232,72,131,198,4,193,232,16,252,255,36,252,
  235,255,15,182,252,236,15,182,192,72,139,76,36,88,72,137,145,233,72,141,20,
  194,65,137,192,65,41,232,248,37,72,137,205,72,137,116,36,96,232,251,1,50,
  72,139,149,233,72,133,192,15,133,244,51,15,182,110,252,255,15,182,78,252,
  253,72,139,4,252,234,72,137,4,202,139,6,15,182,204,15,182,232,72,131,198,
  4,193,232,16,252,255,36,252,235,255,72,252,247,208,72,139,4,199,73,187,237,
  237,76,9,216,72,137,4,202,139,6,15,182,204,15,182,232,72,131,198,4,193,232,
  16,252,255,36,252,235,255,15,191,192,252,242,15,42,192,252,242,15,17,4,202,
  139,6,15,182,204,15,182,232,72,131,198,4,193,232,16,252,255,36,252,235,255,
  252,242,15,16,4,199,252,242,15,17,4,202,139,6,15,182,204,15,182,232,72,131,
  198,4,193,232,16,252,255,36,252,235,255,72,141,76,202,8,72,141,4,194,72,199,
  197,237,72,137,105,252,248,248,1,72,137,41,72,131,193,8,72,57,193,15,134,
  244,1,139,6,15,182,204,15,182,232,72,131,198,4,193,232,16,252,255,36,252,
  235,255,72,139,106,252,240,72,193,229,17,72,193,252,237,17,72,139,172,253,
  197,233,72,139,173,233,72,139,69,0,72,137,4,202,139,6,15,182,204,15,182,232,
  72,131,198,4,193,232,16,252,255,36,252,235,255,72,139,106,252,240,72,193,
  229,17,72,193,252,237,17,72,139,172,253,205,233,128,189,233,0,72,139,173,
  233,72,139,12,194,72,137,77,0,15,132,244,247,252,246,133,233,235,15,133,244,
  248,248,1,139,6,15,182,204,15,182,232,72,131,198,4,193,232,16,252,255,36,
  252,235,248,2,72,137,200,72,193,252,248,47,129,232,239,129,252,248,239,15,
  134,244,1,72,193,225,17,72,193,252,233,17,252,246,129,233,235,15,132,244,
  1,255,72,135,213,72,141,139,233,232,251,1,51,72,137,252,234,252,233,244,1,
  255,72,252,247,208,72,139,106,252,240,72,193,229,17,72,193,252,237,17,72,
  139,172,253,205,233,72,139,12,199,72,139,133,233,73,187,237,237,73,9,203,
  76,137,24,252,246,133,233,235,15,133,244,248,248,1,139,6,15,182,204,15,182,
  232,72,131,198,4,193,232,16,252,255,36,252,235,248,2,252,246,129,233,235,
  15,132,244,1,128,189,233,0,15,132,244,1,72,137,213,72,137,194,72,141,139,
  233,232,251,1,51,72,137,252,234,252,233,244,1,255,72,139,106,252,240,72,193,
  229,17,72,193,252,237,17,252,242,15,16,4,199,72,139,172,253,205,233,72,139,
  141,233,252,242,15,17,1,139,6,15,182,204,15,182,232,72,131,198,4,193,232,
  16,252,255,36,252,235,255,72,139,106,252,240,72,193,229,17,72,193,252,237,
  17,72,139,172,253,205,233,72,193,224,47,72,252,247,208,72,139,141,233,72,
  137,1,139,6,15,182,204,15,182,232,72,131,198,4,193,232,16,252,255,36,252,
  235,255,72,141,180,253,134,233,72,139,108,36,88,72,131,189,233,0,15,132,244,
  247,72,137,149,233,72,141,20,202,72,137,252,233,232,251,1,52,72,139,149,233,
  248,1,139,6,15,182,204,15,182,232,72,131,198,4,193,232,16,252,255,36,252,
  235,255,72,252,247,208,72,139,108,36,88,72,137,149,233,76,139,66,252,240,
  73,193,224,17,73,193,232,17,72,139,20,199,72,137,252,233,72,137,116,36,96,
  232,251,1,53,72,139,149,233,15,182,78,252,253,73,187,237,237,76,9,216,72,
  137,4,202,139,6,15,182,204,15,182,232,72,131,198,4,193,232,16,252,255,36,
  252,235,255,72,139,108,36,88,72,137,149,233,72,139,139,233,72,59,139,233,
  72,137,116,36,96,15,131,244,251,248,1,65,137,192,37,252,255,7,0,0,65,193,
  232,11,61,252,255,7,0,0,15,132,244,249,248,2,72,137,252,233,137,194,232,251,
  1,54,72,139,149,233,15,182,78,252,253,73,187,237,237,76,9,216,72,137,4,202,
  139,6,15,182,204,15,182,232,72,131,198,4,193,232,16,252,255,36,252,235,248,
  3,184,1,8,0,0,252,233,244,2,248,5,72,137,252,233,232,251,1,55,15,183,70,252,
  254,252,233,244,1,255,72,252,247,208,72,139,108,36,88,72,139,139,233,72,137,
  116,36,96,72,59,139,233,72,137,149,233,15,131,244,249,248,2,72,139,20,199,
  72,137,252,233,232,251,1,56,72,139,149,233,15,182,78,252,253,73,187,237,237,
  76,9,216,72,137,4,202,139,6,15,182,204,15,182,232,72,131,198,4,193,232,16,
  252,255,36,252,235,248,3,72,137,252,233,232,251,1,55,15,183,70,252,254,72,
  252,247,208,252,233,244,2,255,72,252,247,208,72,139,106,252,240,72,193,229,
  17,72,193,252,237,17,72,139,173,233,72,139,4,199,252,233,244,165,255,72,252,
  247,208,72,139,106,252,240,72,193,229,17,72,193,252,237,17,72,139,173,233,
  72,139,4,199,252,233,244,166,255,15,182,252,236,15,182,192,72,139,44,252,
  234,72,139,4,194,73,137,252,235,72,193,229,17,72,193,252,237,17,73,193,252,
  251,47,65,129,252,251,239,15,133,244,40,73,137,195,73,193,252,251,47,65,129,
  252,251,239,15,131,244,251,102,72,15,110,192,252,242,15,44,192,252,242,15,
  42,200,102,15,46,193,15,133,244,40,59,133,233,15,131,244,40,193,224,3,72,
  3,133,233,76,139,24,73,129,252,251,239,15,132,244,248,248,1,76,137,28,202,
  139,6,15,182,204,15,182,232,72,131,198,4,193,232,16,252,255,36,252,235,248,
  2,76,139,149,233,77,133,210,15,132,244,1,255,65,252,246,130,233,235,15,132,
  244,40,252,233,244,1,248,5,65,129,252,251,239,15,133,244,40,72,193,224,17,
  72,193,232,17,252,233,244,165,255,15,182,252,236,15,182,192,72,139,44,252,
  234,72,252,247,208,72,139,4,199,73,137,252,235,72,193,229,17,72,193,252,237,
  17,73,193,252,251,47,65,129,252,251,239,15,133,244,38,248,165,68,139,149,
  233,68,35,144,233,69,105,210,239,76,3,149,233,73,187,237,237,73,9,195,248,
  1,77,57,154,233,15,133,244,250,77,139,154,233,73,129,252,251,239,15,132,244,
  251,248,2,255,76,137,28,202,139,6,15,182,204,15,182,232,72,131,198,4,193,
  232,16,252,255,36,252,235,248,4,77,139,146,233,77,133,210,15,133,244,1,73,
  199,195,237,248,5,76,139,149,233,77,133,210,15,132,244,2,65,252,246,130,233,
  235,15,133,244,2,252,233,244,38,255,15,182,252,236,15,182,192,72,139,44,252,
  234,73,137,252,235,72,193,229,17,72,193,252,237,17,73,193,252,251,47,65,129,
  252,251,239,15,133,244,39,59,133,233,15,131,244,39,193,224,3,72,3,133,233,
  76,139,24,73,129,252,251,239,15,132,244,248,248,1,76,137,28,202,139,6,15,
  182,204,15,182,232,72,131,198,4,193,232,16,252,255,36,252,235,248,2,76,139,
  149,233,77,133,210,15,132,244,1,65,252,246,130,233,235,15,132,244,39,255,
  15,182,252,236,15,182,192,72,139,44,252,234,72,193,229,17,72,193,252,237,
  17,252,242,15,44,4,194,59,133,233,15,131,244,41,193,224,3,72,3,133,233,248,
  42,76,139,24,248,43,76,137,28,202,139,6,15,182,204,15,182,232,72,131,198,
  4,193,232,16,252,255,36,252,235,255,15,182,252,236,15,182,192,72,139,44,252,
  234,72,139,4,194,73,137,252,235,72,193,229,17,72,193,252,237,17,73,193,252,
  251,47,65,129,252,251,239,15,133,244,46,73,137,195,73,193,252,251,47,65,129,
  252,251,239,15,131,244,251,102,72,15,110,192,252,242,15,44,192,252,242,15,
  42,200,102,15,46,193,15,133,244,46,59,133,233,15,131,244,46,193,224,3,72,
  3,133,233,72,129,56,239,15,132,244,249,248,1,252,246,133,233,235,15,133,244,
  253,248,2,255,72,139,44,202,72,137,40,139,6,15,182,204,15,182,232,72,131,
  198,4,193,232,16,252,255,36,252,235,248,3,76,139,149,233,77,133,210,15,132,
  244,1,65,252,246,130,233,235,15,132,244,46,252,233,244,1,248,5,65,129,252,
  251,239,15,133,244,46,72,193,224,17,72,193,232,17,252,233,244,166,248,7,128,
  165,233,235,255,76,139,147,233,72,137,171,233,76,137,149,233,252,233,244,
  2,255,15,182,252,236,15,182,192,72,139,44,252,234,72,252,247,208,72,139,4,
  199,73,137,252,235,72,193,229,17,72,193,252,237,17,73,193,252,251,47,65,129,
  252,251,239,15,133,244,44,248,166,68,139,149,233,68,35,144,233,69,105,210,
  239,198,133,233,0,76,3,149,233,73,187,237,237,73,9,195,248,1,77,57,154,233,
  15,133,244,251,73,129,58,239,15,132,244,250,248,2,255,252,246,133,233,235,
  15,133,244,253,248,3,76,139,28,202,77,137,26,139,6,15,182,204,15,182,232,
  72,131,198,4,193,232,16,252,255,36,252,235,248,4,76,139,157,233,77,133,219,
  15,132,244,2,65,252,246,131,233,235,15,132,244,44,252,233,244,2,248,5,77,
  139,146,233,77,133,210,15,133,244,1,255,76,139,149,233,77,133,210,15,132,
  244,252,65,252,246,130,233,235,15,132,244,44,248,6,76,137,92,36,32,72,139,
  76,36,88,72,137,145,233,76,141,68,36,32,72,137,252,234,72,137,116,36,96,232,
  251,1,57,72,139,76,36,88,72,139,145,233,73,137,194,15,182,78,252,253,252,
  233,244,2,248,7,128,165,233,235,76,139,155,233,72,137,171,233,76,137,157,
  233,252,233,244,3,255,15,182,252,236,15,182,192,72,139,44,252,234,73,137,
  252,235,72,193,229,17,72,193,252,237,17,73,193,252,251,47,65,129,252,251,
  239,15,133,244,45,59,133,233,15,131,244,45,193,224,3,72,3,133,233,72,129,
  56,239,15,132,244,249,248,1,252,246,133,233,235,15,133,244,253,248,2,76,139,
  28,202,76,137,24,139,6,15,182,204,15,182,232,72,131,198,4,193,232,16,252,
  255,36,252,235,248,3,76,139,149,233,77,133,210,15,132,244,1,255,65,252,246,
  130,233,235,15,132,244,45,252,233,244,1,248,7,128,165,233,235,76,139,147,
  233,72,137,171,233,76,137,149,233,252,233,244,2,255,15,182,252,236,15,182,
  192,72,139,44,252,234,72,193,229,17,72,193,252,237,17,252,242,15,44,4,194,
  252,246,133,233,235,15,133,244,253,248,2,59,133,233,15,131,244,48,193,224,
  3,72,3,133,233,248,49,76,139,28,202,76,137,24,139,6,15,182,204,15,182,232,
  72,131,198,4,193,232,16,252,255,36,252,235,248,7,128,165,233,235,76,139,147,
  233,72,137,171,233,76,137,149,233,252,233,244,2,255,248,1,68,139,20,199,72,
  141,12,202,72,139,105,252,248,72,193,229,17,72,193,252,237,17,252,246,133,
  233,235,15,133,244,253,248,2,139,68,36,32,131,232,1,15,132,244,250,68,1,208,
  59,133,233,15,135,244,251,68,41,208,65,193,226,3,76,3,149,233,248,3,72,139,
  41,72,131,193,8,73,137,42,73,131,194,8,131,232,1,15,133,244,3,248,4,139,6,
  15,182,204,15,182,232,72,131,198,4,193,232,16,252,255,36,252,235,248,5,72,
  139,76,36,88,72,137,145,233,72,137,252,234,65,137,192,72,137,205,72,137,116,
  36,96,232,251,1,58,72,139,149,233,255,15,182,78,252,253,15,183,70,252,254,
  252,233,244,1,248,7,128,165,233,235,72,139,131,233,72,137,171,233,72,137,
  133,233,252,233,244,2,255,3,68,36,32,255,72,139,44,202,73,137,252,235,72,
  193,229,17,72,193,252,237,17,73,193,252,251,47,65,129,252,251,239,15,133,
  244,66,72,141,84,202,16,72,137,114,252,248,72,139,181,233,139,14,15,182,252,
  233,15,182,205,72,131,198,4,252,255,36,252,235,255,72,141,76,202,16,72,137,
  215,72,139,105,252,240,73,137,252,235,73,193,252,251,47,65,129,252,251,239,
  15,133,244,30,248,67,72,139,114,252,248,252,247,198,237,15,133,244,253,248,
  1,72,137,106,252,240,137,68,36,32,131,232,1,15,132,244,249,248,2,72,139,41,
  72,131,193,8,72,137,47,72,131,199,8,131,232,1,15,133,244,2,72,139,106,252,
  240,248,3,72,193,229,17,72,193,252,237,17,139,68,36,32,128,189,233,1,15,135,
  244,251,248,4,72,139,181,233,255,139,14,15,182,252,233,15,182,205,72,131,
  198,4,252,255,36,252,235,248,5,252,247,198,237,15,133,244,4,15,182,78,252,
  253,72,252,247,217,72,139,124,202,224,72,193,231,17,72,193,252,239,17,72,
  139,191,233,72,139,191,233,252,233,244,4,248,7,72,129,252,238,239,252,247,
  198,237,15,133,244,254,72,41,252,242,72,137,215,72,139,114,252,248,252,233,
  244,1,248,8,129,198,239,252,233,244,1,255,72,141,76,202,16,72,139,105,224,
  72,139,65,232,72,137,41,72,137,65,8,72,139,105,216,72,137,105,252,240,184,
  237,73,137,252,235,72,193,229,17,72,193,252,237,17,73,193,252,251,47,65,129,
  252,251,239,15,133,244,30,72,137,202,72,137,114,252,248,72,139,181,233,139,
  14,15,182,252,233,15,182,205,72,131,198,4,252,255,36,252,235,255,72,139,108,
  202,252,240,72,193,229,17,72,193,252,237,17,139,68,202,252,248,68,139,149,
  233,72,131,198,4,76,139,157,233,248,1,68,57,208,15,131,244,251,73,129,60,
  253,195,239,15,132,244,250,252,242,15,42,192,73,139,44,195,72,137,108,202,
  8,252,242,15,17,4,202,131,192,1,137,68,202,252,248,248,2,15,183,70,252,254,
  72,141,180,253,134,233,248,3,139,6,15,182,204,15,182,232,72,131,198,4,193,
  232,16,252,255,36,252,235,248,4,131,192,1,252,233,244,1,248,5,68,41,208,248,
  6,59,133,233,15,135,244,3,255,68,105,216,239,76,3,157,233,73,129,187,233,
  239,15,132,244,253,70,141,84,16,1,73,139,171,233,73,139,131,233,72,137,44,
  202,72,137,68,202,8,68,137,84,202,252,248,252,233,244,2,248,7,131,192,1,252,
  233,244,6,255,72,139,108,202,232,73,137,252,235,72,193,229,17,72,193,252,
  237,17,73,193,252,251,47,65,129,252,251,239,15,133,244,251,76,139,92,202,
  252,240,73,193,252,251,47,65,129,252,251,239,15,133,244,251,72,129,124,253,
  202,252,248,239,15,133,244,251,128,189,233,235,15,133,244,251,72,141,180,
  253,134,233,73,186,237,237,76,137,84,202,252,248,248,1,139,6,15,182,204,15,
  182,232,72,131,198,4,193,232,16,252,255,36,252,235,248,5,198,70,252,252,235,
  255,72,141,180,253,134,233,198,6,235,252,233,244,1,255,15,182,252,236,15,
  182,192,76,141,148,253,194,233,72,141,12,202,76,43,82,252,248,72,133,252,
  237,15,132,244,251,72,141,108,252,233,252,248,73,57,210,15,131,244,248,248,
  1,73,139,66,252,240,73,131,194,8,72,137,1,72,131,193,8,72,57,252,233,15,131,
  244,249,73,57,210,15,130,244,1,248,2,72,199,1,237,72,131,193,8,72,57,252,
  233,15,130,244,2,248,3,139,6,15,182,204,15,182,232,72,131,198,4,193,232,16,
  252,255,36,252,235,248,5,199,68,36,32,1,0,0,0,72,137,208,76,41,208,15,134,
  244,3,137,197,193,252,237,3,131,197,1,137,108,36,32,72,139,108,36,88,72,1,
  200,72,59,133,233,255,15,135,244,253,248,6,73,139,66,252,240,73,131,194,8,
  72,137,1,72,131,193,8,73,57,210,15,130,244,6,252,233,244,3,248,7,72,137,149,
  233,72,137,141,233,72,137,116,36,96,73,41,210,68,137,84,36,36,139,84,36,32,
  131,252,234,1,72,137,252,233,232,251,1,0,72,139,149,233,76,99,84,36,36,72,
  139,141,233,73,1,210,252,233,244,6,255,193,225,3,255,248,1,72,139,114,252,
  248,137,68,36,32,252,247,198,237,15,133,244,253,255,248,14,72,137,215,131,
  232,1,15,132,244,249,248,2,72,139,44,15,72,137,111,252,240,72,131,199,8,131,
  232,1,15,133,244,2,248,3,139,68,36,32,15,182,110,252,255,248,5,57,197,15,
  135,244,252,255,72,139,44,10,72,137,106,252,240,255,248,5,56,70,252,255,15,
  135,244,252,255,15,182,78,252,253,72,252,247,217,72,141,84,202,252,240,72,
  139,122,252,240,72,193,231,17,72,193,252,239,17,72,139,191,233,72,139,191,
  233,139,6,15,182,204,15,182,232,72,131,198,4,193,232,16,252,255,36,252,235,
  248,6,255,72,199,71,252,240,237,72,131,199,8,255,72,199,68,194,232,237,255,
  72,131,192,1,252,233,244,5,248,7,72,141,174,233,252,247,197,237,15,133,244,
  15,72,41,252,234,255,72,1,252,233,255,137,252,245,209,252,237,129,229,239,
  102,129,172,253,43,233,238,15,130,244,147,255,72,141,12,202,255,72,139,41,
  73,137,252,235,73,193,252,251,47,65,129,252,251,239,15,133,244,255,76,139,
  81,8,255,77,137,211,73,193,252,251,47,65,129,252,251,239,15,133,244,68,76,
  139,89,16,69,133,219,15,136,244,251,73,193,252,251,47,65,129,252,251,239,
  15,133,244,68,255,76,139,89,8,73,193,252,251,47,65,129,252,251,239,15,133,
  244,161,76,139,89,16,73,193,252,251,47,65,129,252,251,239,15,133,244,161,
  255,76,139,89,16,69,133,219,15,136,244,251,68,1,221,15,128,244,247,73,187,
  237,237,76,9,221,72,137,41,255,68,57,213,72,137,105,24,255,15,142,244,253,
  248,1,248,6,72,141,180,253,134,233,255,72,141,180,253,134,233,15,183,70,252,
  254,15,142,245,248,1,248,6,255,15,143,244,253,248,6,72,141,180,253,134,233,
  248,1,255,248,7,139,6,15,182,204,15,182,232,72,131,198,4,193,232,16,252,255,
  36,252,235,248,5,255,68,1,221,15,128,244,1,73,187,237,237,76,9,221,72,137,
  41,255,15,141,244,7,255,72,141,180,253,134,233,15,183,70,252,254,15,141,245,
  255,15,140,244,7,255,252,233,244,6,248,9,255,15,131,244,68,255,76,139,25,
  73,193,252,251,47,65,129,252,251,239,15,131,244,68,255,76,139,89,8,73,193,
  252,251,47,65,129,252,251,239,15,131,244,68,255,76,139,89,8,73,193,252,251,
  47,65,129,252,251,239,15,131,244,161,76,139,89,16,73,193,252,251,47,65,129,
  252,251,239,15,131,244,161,255,72,139,105,16,255,73,137,252,235,73,193,252,
  251,47,65,129,252,251,239,15,131,244,68,255,252,242,15,16,1,252,242,15,16,
  73,8,255,252,242,15,88,65,16,252,242,15,17,1,72,133,252,237,15,136,244,249,
  255,15,140,244,249,255,102,15,46,200,248,1,252,242,15,17,65,24,255,15,131,
  244,248,72,141,180,253,134,233,255,72,141,180,253,134,233,15,183,70,252,254,
  15,131,245,255,15,130,244,248,72,141,180,253,134,233,255,248,2,139,6,15,182,
  204,15,182,232,72,131,198,4,193,232,16,252,255,36,252,235,248,3,102,15,46,
  193,252,233,244,1,255,72,141,12,202,72,139,41,72,129,252,253,239,15,132,244,
  247,255,72,137,105,252,248,252,233,245,255,72,141,180,253,134,233,72,137,
  105,252,248,255,72,139,139,233,72,139,4,193,72,139,128,233,72,139,108,36,
  88,72,137,147,233,72,137,171,233,76,137,100,36,24,76,137,108,36,16,76,137,
  116,36,8,76,137,60,36,72,137,225,72,129,252,236,239,102,15,127,177,233,102,
  15,127,185,233,102,68,15,127,129,233,102,68,15,127,137,233,102,68,15,127,
  145,233,102,68,15,127,153,233,102,68,15,127,161,233,102,68,15,127,169,233,
  102,68,15,127,177,233,102,68,15,127,185,233,252,255,224,255,72,141,180,253,
  134,233,139,6,15,182,204,15,182,232,72,131,198,4,193,232,16,252,255,36,252,
  235,255,137,252,245,209,252,237,129,229,239,102,129,172,253,43,233,238,15,
  130,244,149,255,72,139,190,233,72,139,108,36,88,72,141,12,202,72,59,141,233,
  15,135,244,25,15,182,142,233,57,200,15,134,244,249,248,2,255,15,183,70,252,
  254,252,233,245,255,248,3,72,199,68,194,252,248,237,131,192,1,57,200,15,134,
  244,3,252,233,244,2,255,141,44,197,237,72,141,68,194,8,72,139,122,252,240,
  72,137,104,252,248,72,137,120,252,240,72,139,108,36,88,72,141,12,200,72,59,
  141,233,15,135,244,24,72,137,209,72,137,194,15,182,174,233,133,252,237,15,
  132,244,248,72,131,193,8,248,1,72,131,193,8,72,57,209,15,131,244,249,72,139,
  121,252,240,72,137,56,72,131,192,8,72,199,65,252,240,237,131,252,237,1,15,
  133,244,1,248,2,255,72,139,190,233,139,6,15,182,204,15,182,232,72,131,198,
  4,193,232,16,252,255,36,252,235,255,248,3,72,199,0,237,72,131,192,8,131,252,
  237,1,15,133,244,3,252,233,244,2,255,72,139,106,252,240,72,193,229,17,72,
  193,252,237,17,72,139,189,233,72,139,108,36,88,72,141,68,194,252,248,72,137,
  149,233,72,141,136,233,72,59,141,233,72,137,133,233,255,72,137,252,233,255,
  72,137,252,250,72,137,252,233,255,15,135,244,23,199,131,233,237,255,252,255,
  215,255,252,255,147,233,255,72,139,149,233,72,137,171,233,199,131,233,237,
  72,141,12,194,72,252,247,217,72,3,141,233,72,139,114,252,248,252,233,244,
  12,255,254,0
};

enum {
  GLOB_vm_returnp,
  GLOB_cont_dispatch,
  GLOB_vm_returnc,
  GLOB_vm_unwind_yield,
  GLOB_BC_RET_Z,
  GLOB_vm_return,
  GLOB_vm_leave_cp,
  GLOB_vm_leave_unw,
  GLOB_vm_unwind_c_eh,
  GLOB_vm_unwind_c,
  GLOB_vm_unwind_rethrow,
  GLOB_vm_unwind_ff,
  GLOB_vm_unwind_ff_eh,
  GLOB_vm_growstack_c,
  GLOB_vm_growstack_v,
  GLOB_vm_growstack_f,
  GLOB_vm_resume,
  GLOB_vm_pcall,
  GLOB_vm_call,
  GLOB_vm_call_dispatch,
  GLOB_vmeta_call,
  GLOB_vm_call_dispatch_f,
  GLOB_vm_cpcall,
  GLOB_cont_ffi_callback,
  GLOB_vm_call_tail,
  GLOB_cont_cat,
  GLOB_cont_ra,
  GLOB_BC_CAT_Z,
  GLOB_vmeta_tgets,
  GLOB_vmeta_tgetb,
  GLOB_vmeta_tgetv,
  GLOB_vmeta_tgetr,
  GLOB_BC_TGETR_Z,
  GLOB_BC_TGETR2_Z,
  GLOB_vmeta_tsets,
  GLOB_vmeta_tsetb,
  GLOB_vmeta_tsetv,
  GLOB_cont_nop,
  GLOB_vmeta_tsetr,
  GLOB_BC_TSETR_Z,
  GLOB_vmeta_comp,
  GLOB_vmeta_binop,
  GLOB_cont_condt,
  GLOB_cont_condf,
  GLOB_vmeta_equal,
  GLOB_vmeta_equal_cd,
  GLOB_vmeta_istype,
  GLOB_vmeta_arith_vno,
  GLOB_vmeta_arith_vn,
  GLOB_vmeta_arith_nvo,
  GLOB_vmeta_arith_nv,
  GLOB_vmeta_unm,
  GLOB_vmeta_arith_vvo,
  GLOB_vmeta_arith_vv,
  GLOB_vmeta_len,
  GLOB_BC_LEN_Z,
  GLOB_vmeta_call_ra,
  GLOB_BC_CALLT_Z,
  GLOB_vmeta_for,
  GLOB_ff_assert,
  GLOB_fff_fallback,
  GLOB_fff_res_,
  GLOB_ff_type,
  GLOB_fff_res1,
  GLOB_ff_getmetatable,
  GLOB_ff_setmetatable,
  GLOB_ff_rawget,
  GLOB_ff_tonumber,
  GLOB_ff_tostring,
  GLOB_fff_fallback_1,
  GLOB_fff_gcstep,
  GLOB_ff_next,
  GLOB_fff_res2,
  GLOB_fff_res,
  GLOB_ff_pairs,
  GLOB_ff_ipairs_aux,
  GLOB_fff_res0,
  GLOB_ff_ipairs,
  GLOB_ff_pcall,
  GLOB_ff_xpcall,
  GLOB_ff_coroutine_resume,
  GLOB_ff_coroutine_wrap_aux,
  GLOB_ff_coroutine_yield,
  GLOB_ff_math_abs,
  GLOB_ff_math_sqrt,
  GLOB_fff_resxmm0,
  GLOB_ff_math_floor,
  GLOB_vm_floor_sse,
  GLOB_ff_math_ceil,
  GLOB_vm_ceil_sse,
  GLOB_ff_math_log,
  GLOB_ff_math_log10,
  GLOB_ff_math_exp,
  GLOB_ff_math_sin,
  GLOB_ff_math_cos,
  GLOB_ff_math_tan,
  GLOB_ff_math_asin,
  GLOB_ff_math_acos,
  GLOB_ff_math_atan,
  GLOB_ff_math_sinh,
  GLOB_ff_math_cosh,
  GLOB_ff_math_tanh,
  GLOB_ff_math_pow,
  GLOB_ff_math_atan2,
  GLOB_ff_math_fmod,
  GLOB_ff_math_ldexp,
  GLOB_ff_math_frexp,
  GLOB_ff_math_modf,
  GLOB_ff_math_min,
  GLOB_ff_math_max,
  GLOB_ff_string_byte,
  GLOB_ff_string_char,
  GLOB_fff_newstr,
  GLOB_fff_resstr,
  GLOB_ff_string_sub,
  GLOB_fff_emptystr,
  GLOB_ff_string_reverse,
  GLOB_ff_string_lower,
  GLOB_ff_string_upper,
  GLOB_ff_bit_tobit,
  GLOB_fff_resbit,
  GLOB_ff_bit_band,
  GLOB_fff_fallback_bit_op,
  GLOB_ff_bit_bor,
  GLOB_ff_bit_bxor,
  GLOB_ff_bit_bswap,
  GLOB_ff_bit_bnot,
  GLOB_ff_bit_lshift,
  GLOB_ff_bit_rshift,
  GLOB_ff_bit_arshift,
  GLOB_ff_bit_rol,
  GLOB_ff_bit_ror,
  GLOB_fff_fallback_2,
  GLOB_vm_record,
  GLOB_vm_rethook,
  GLOB_vm_inshook,
  GLOB_cont_hook,
  GLOB_vm_hotloop,
  GLOB_vm_callhook,
  GLOB_vm_hotcall,
  GLOB_cont_stitch,
  GLOB_vm_profhook,
  GLOB_vm_exit_handler,
  GLOB_vm_exit_interp,
  GLOB_vm_floor,
  GLOB_vm_ceil,
  GLOB_vm_trunc,
  GLOB_vm_trunc_sse,
  GLOB_vm_mod,
  GLOB_vm_powi_sse,
  GLOB_vm_cpuid,
  GLOB_assert_bad_for_arg_type,
  GLOB_vm_ffi_callback,
  GLOB_vm_ffi_call,
  GLOB_BC_MODVN_Z,
  GLOB_BC_TGETS_Z,
  GLOB_BC_TSETS_Z,
  GLOB__MAX
};
static const char *const globnames[] = {
  "vm_returnp",
  "cont_dispatch",
  "vm_returnc",
  "vm_unwind_yield",
  "BC_RET_Z",
  "vm_return",
  "vm_leave_cp",
  "vm_leave_unw",
  "vm_unwind_c_eh",
  "vm_unwind_c",
  "vm_unwind_rethrow",
  "vm_unwind_ff",
  "vm_unwind_ff_eh",
  "vm_growstack_c",
  "vm_growstack_v",
  "vm_growstack_f",
  "vm_resume",
  "vm_pcall",
  "vm_call",
  "vm_call_dispatch",
  "vmeta_call",
  "vm_call_dispatch_f",
  "vm_cpcall",
  "cont_ffi_callback",
  "vm_call_tail",
  "cont_cat",
  "cont_ra",
  "BC_CAT_Z",
  "vmeta_tgets",
  "vmeta_tgetb",
  "vmeta_tgetv",
  "vmeta_tgetr",
  "BC_TGETR_Z",
  "BC_TGETR2_Z",
  "vmeta_tsets",
  "vmeta_tsetb",
  "vmeta_tsetv",
  "cont_nop",
  "vmeta_tsetr",
  "BC_TSETR_Z",
  "vmeta_comp",
  "vmeta_binop",
  "cont_condt",
  "cont_condf",
  "vmeta_equal",
  "vmeta_equal_cd",
  "vmeta_istype",
  "vmeta_arith_vno",
  "vmeta_arith_vn",
  "vmeta_arith_nvo",
  "vmeta_arith_nv",
  "vmeta_unm",
  "vmeta_arith_vvo",
  "vmeta_arith_vv",
  "vmeta_len",
  "BC_LEN_Z",
  "vmeta_call_ra",
  "BC_CALLT_Z",
  "vmeta_for",
  "ff_assert",
  "fff_fallback",
  "fff_res_",
  "ff_type",
  "fff_res1",
  "ff_getmetatable",
  "ff_setmetatable",
  "ff_rawget",
  "ff_tonumber",
  "ff_tostring",
  "fff_fallback_1",
  "fff_gcstep",
  "ff_next",
  "fff_res2",
  "fff_res",
  "ff_pairs",
  "ff_ipairs_aux",
  "fff_res0",
  "ff_ipairs",
  "ff_pcall",
  "ff_xpcall",
  "ff_coroutine_resume",
  "ff_coroutine_wrap_aux",
  "ff_coroutine_yield",
  "ff_math_abs",
  "ff_math_sqrt",
  "fff_resxmm0",
  "ff_math_floor",
  "vm_floor_sse",
  "ff_math_ceil",
  "vm_ceil_sse",
  "ff_math_log",
  "ff_math_log10",
  "ff_math_exp",
  "ff_math_sin",
  "ff_math_cos",
  "ff_math_tan",
  "ff_math_asin",
  "ff_math_acos",
  "ff_math_atan",
  "ff_math_sinh",
  "ff_math_cosh",
  "ff_math_tanh",
  "ff_math_pow",
  "ff_math_atan2",
  "ff_math_fmod",
  "ff_math_ldexp",
  "ff_math_frexp",
  "ff_math_modf",
  "ff_math_min",
  "ff_math_max",
  "ff_string_byte",
  "ff_string_char",
  "fff_newstr",
  "fff_resstr",
  "ff_string_sub",
  "fff_emptystr",
  "ff_string_reverse",
  "ff_string_lower",
  "ff_string_upper",
  "ff_bit_tobit",
  "fff_resbit",
  "ff_bit_band",
  "fff_fallback_bit_op",
  "ff_bit_bor",
  "ff_bit_bxor",
  "ff_bit_bswap",
  "ff_bit_bnot",
  "ff_bit_lshift",
  "ff_bit_rshift",
  "ff_bit_arshift",
  "ff_bit_rol",
  "ff_bit_ror",
  "fff_fallback_2",
  "vm_record",
  "vm_rethook",
  "vm_inshook",
  "cont_hook",
  "vm_hotloop",
  "vm_callhook",
  "vm_hotcall",
  "cont_stitch",
  "vm_profhook",
  "vm_exit_handler",
  "vm_exit_interp",
  "vm_floor",
  "vm_ceil",
  "vm_trunc",
  "vm_trunc_sse",
  "vm_mod",
  "vm_powi_sse",
  "vm_cpuid",
  "assert_bad_for_arg_type",
  "vm_ffi_callback",
  "vm_ffi_call",
  "BC_MODVN_Z",
  "BC_TGETS_Z",
  "BC_TSETS_Z",
  (const char *)0
};
static const char *const extnames[] = {
  "lj_state_growstack",
  "lj_meta_tget",
  "lj_tab_getinth",
  "lj_meta_tset",
  "lj_tab_setinth",
  "lj_meta_comp",
  "lj_meta_equal",
  "lj_meta_equal_cd",
  "lj_meta_istype",
  "lj_meta_arith",
  "lj_meta_len",
  "lj_meta_call",
  "lj_meta_for",
  "lj_tab_get",
  "lj_strfmt_num",
  "lj_tab_next",
  "lj_ffh_coroutine_wrap_err",
  "log",
  "log10",
  "exp",
  "sin",
  "cos",
  "tan",
  "asin",
  "acos",
  "atan",
  "sinh",
  "cosh",
  "tanh",
  "pow",
  "atan2",
  "fmod",
  "frexp",
  "modf",
  "lj_str_new",
  "lj_buf_putstr_reverse",
  "lj_buf_tostr",
  "lj_buf_putstr_lower",
  "lj_buf_putstr_upper",
  "lj_gc_step",
  "lj_dispatch_ins",
  "lj_trace_hot",
  "lj_dispatch_call",
  "lj_dispatch_stitch",
  "lj_dispatch_profile",
  "lj_trace_exit",
  "lj_err_trace",
  "lj_ccallback_enter",
  "lj_ccallback_leave",
  "lj_tab_len",
  "lj_meta_cat",
  "lj_gc_barrieruv",
  "lj_func_closeuv",
  "lj_func_newL_gc",
  "lj_tab_new",
  "lj_gc_step_fixtop",
  "lj_tab_dup",
  "lj_tab_newkey",
  "lj_tab_reasize",
  (const char *)0
};
#define Dt1(_V) (int)(ptrdiff_t)&(((lua_State *)0)_V)
#define Dt2(_V) (int)(ptrdiff_t)&(((global_State *)0)_V)
#define Dt3(_V) (int)(ptrdiff_t)&(((TValue *)0)_V)
#define Dt4(_V) (int)(ptrdiff_t)&(((GCobj *)0)_V)
#define Dt5(_V) (int)(ptrdiff_t)&(((GCstr *)0)_V)
#define Dt6(_V) (int)(ptrdiff_t)&(((GCtab *)0)_V)
#define Dt7(_V) (int)(ptrdiff_t)&(((GCfuncL *)0)_V)
#define Dt8(_V) (int)(ptrdiff_t)&(((GCfuncC *)0)_V)
#define Dt9(_V) (int)(ptrdiff_t)&(((GCproto *)0)_V)
#define DtA(_V) (int)(ptrdiff_t)&(((GCupval *)0)_V)
#define DtB(_V) (int)(ptrdiff_t)&(((Node *)0)_V)
#define DtC(_V) (int)(ptrdiff_t)&(((int *)0)_V)
#define DtD(_V) (int)(ptrdiff_t)&(((GCtrace *)0)_V)
#define DtE(_V) (int)(ptrdiff_t)&(((SBuf *)0)_V)
#define DISPATCH_GL(field)	(GG_DISP2G + (int)offsetof(global_State, field))
#define DISPATCH_J(field)	(GG_DISP2J + (int)offsetof(jit_State, field))
#define PC2PROTO(field)  ((int)offsetof(GCproto, field)-(int)sizeof(GCproto))

/* Generate subroutines used by opcodes and other parts of the VM. */
/* The .code_sub section should be last to help static branch prediction. */
static void build_subroutines(BuildCtx *ctx)
{
  dasm_put(Dst, 0);
  dasm_put(Dst, 2, FRAME_P, (unsigned int)((int64_t)~((uint64_t)2<<47)), (unsigned int)(((int64_t)~((uint64_t)2<<47))>>32), FRAME_TYPE, FRAME_C, FRAME_TYPE, DISPATCH_GL(vmstate), ~LJ_VMST_C);
  dasm_put(Dst, 82, Dt1(->base), Dt1(->top), Dt1(->cframe));
  dasm_put(Dst, 194, Dt1(->maxstack), LJ_TNIL, Dt1(->top), Dt1(->top), LUA_YIELD);
  dasm_put(Dst, 277, Dt1(->glref), Dt2(->vmstate), ~LJ_VMST_C, CFRAME_RAWMASK, 1+1, Dt1(->base), Dt1(->glref), GG_G2DISP, (unsigned int)((int64_t)~((uint64_t)1<<47)), (unsigned int)(((int64_t)~((uint64_t)1<<47))>>32), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP);
  dasm_put(Dst, 377, LUA_MINSTACK, -4+PC2PROTO(framesize), Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top), Dt7(->pc), FRAME_CP, CFRAME_RESUME, Dt1(->glref));
  dasm_put(Dst, 527, GG_G2DISP, Dt1(->cframe), Dt1(->status), DISPATCH_GL(cur_L), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->status), Dt1(->base), Dt1(->top), FRAME_TYPE, FRAME_CP);
  dasm_put(Dst, 637, FRAME_C, Dt1(->glref), Dt1(->cframe), GG_G2DISP, Dt1(->cframe), DISPATCH_GL(cur_L), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->base), Dt1(->top), LJ_TFUNC, Dt7(->pc));
  dasm_put(Dst, 794, Dt1(->stack), Dt1(->top), Dt1(->glref), GG_G2DISP, Dt1(->cframe), Dt1(->cframe), DISPATCH_GL(cur_L), FRAME_CP, LJ_TNIL, Dt7(->pc), PC2PROTO(k));
  dasm_put(Dst, 953, Dt1(->base), (unsigned int)(((uint64_t)LJ_TSTR<<47)), (unsigned int)((((uint64_t)LJ_TSTR<<47))>>32), BC_GGET, (unsigned int)(((uint64_t)LJ_TTAB<<47)), (unsigned int)((((uint64_t)LJ_TTAB<<47))>>32), DISPATCH_GL(tmptv));
  dasm_put(Dst, 1072, Dt1(->base), Dt1(->base), Dt1(->top), FRAME_CONT, 2+1);
  dasm_put(Dst, 1246, LJ_TNIL, (unsigned int)(((uint64_t)LJ_TSTR<<47)), (unsigned int)((((uint64_t)LJ_TSTR<<47))>>32), BC_GSET, (unsigned int)(((uint64_t)LJ_TTAB<<47)), (unsigned int)((((uint64_t)LJ_TTAB<<47))>>32), DISPATCH_GL(tmptv));
  dasm_put(Dst, 1362, Dt1(->base), Dt1(->base), Dt1(->top), FRAME_CONT, 3+1, Dt1(->base), Dt1(->base));
  dasm_put(Dst, 1569, Dt1(->base), -BCBIAS_J*4, LJ_TISTRUECOND, LJ_TISTRUECOND);
  dasm_put(Dst, 1705, Dt1(->base), Dt1(->base), Dt1(->base), Dt1(->base));
  dasm_put(Dst, 1863, Dt1(->base), Dt1(->base), FRAME_CONT, 2+1, Dt1(->base), Dt1(->base));
#if LJ_52
  dasm_put(Dst, 2006);
#else
  dasm_put(Dst, 2036);
#endif
  dasm_put(Dst, 2041, Dt1(->base), Dt1(->base), Dt7(->pc), Dt1(->base), Dt1(->base), GG_DISP2STATIC, 1+1, LJ_TISTRUECOND);
  dasm_put(Dst, 2266, 1+1, LJ_TISNUM, ((char *)(&((GCfuncC *)0)->upvalue)), (unsigned int)(((uint64_t)LJ_TSTR<<47)), (unsigned int)((((uint64_t)LJ_TSTR<<47))>>32), 1+1);
  dasm_put(Dst, 2378, LJ_TTAB, Dt6(->metatable), LJ_TNIL, (unsigned int)(((uint64_t)LJ_TTAB<<47)), (unsigned int)((((uint64_t)LJ_TTAB<<47))>>32), DISPATCH_GL(gcroot)+8*(GCROOT_MMNAME+MM_metatable), Dt6(->hmask), Dt5(->sid), (unsigned int)(((uint64_t)LJ_TSTR<<47)), (unsigned int)((((uint64_t)LJ_TSTR<<47))>>32), sizeof(Node));
  dasm_put(Dst, 2472, Dt6(->node), DtB(->key), DtB(->next), DtB(->val), LJ_TNIL);
  dasm_put(Dst, 2530, LJ_TUDATA, LJ_TISNUM, LJ_TISNUM, DISPATCH_GL(gcroot[GCROOT_BASEMT]), 2+1, LJ_TTAB, Dt6(->metatable));
  dasm_put(Dst, 2617, LJ_TTAB, Dt6(->metatable), Dt6(->marked), LJ_GC_BLACK, Dt6(->marked), (uint8_t)~LJ_GC_BLACK, DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
  dasm_put(Dst, 2699, 2+1, LJ_TTAB, 1+1, LJ_TISNUM, 1+1);
  dasm_put(Dst, 2828, LJ_TSTR, LJ_TISNUM, DISPATCH_GL(gcroot[GCROOT_BASEMT_NUM]), DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold));
  dasm_put(Dst, 2902, Dt1(->base), Dt1(->base), (unsigned int)(((uint64_t)LJ_TSTR<<47)), (unsigned int)((((uint64_t)LJ_TSTR<<47))>>32), 1+1, LJ_TTAB);
  dasm_put(Dst, 2990, Dt1(->base), Dt1(->top), Dt1(->base), 1+2, LJ_TNIL, LJ_TNIL, 1+1);
  dasm_put(Dst, 3094, LJ_TTAB);
#if LJ_52
  dasm_put(Dst, 3133, Dt6(->metatable));
#endif
  dasm_put(Dst, 3143, Dt8(->upvalue[0]), (unsigned int)(((uint64_t)LJ_TFUNC<<47)), (unsigned int)((((uint64_t)LJ_TFUNC<<47))>>32), LJ_TNIL, 1+3, 2+1, LJ_TTAB, LJ_TISNUM, (unsigned int)(U64x(3ff00000,00000000)), (unsigned int)((U64x(3ff00000,00000000))>>32));
  dasm_put(Dst, 3266, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->hmask), 1+0);
  dasm_put(Dst, 3373, 1+1, LJ_TTAB);
#if LJ_52
  dasm_put(Dst, 3133, Dt6(->metatable));
#endif
  dasm_put(Dst, 3416, Dt8(->upvalue[0]), (unsigned int)(((uint64_t)LJ_TFUNC<<47)), (unsigned int)((((uint64_t)LJ_TFUNC<<47))>>32), 1+3, 1+1, 16+FRAME_PCALL, DISPATCH_GL(hookmask), HOOK_ACTIVE_SHIFT);
  dasm_put(Dst, 3540, 2+1, LJ_TFUNC, 24+FRAME_PCALL, 1+1, LJ_TTHREAD, Dt1(->cframe));
  dasm_put(Dst, 3656, Dt1(->status), LUA_YIELD, Dt1(->top), Dt1(->base), Dt1(->maxstack), Dt1(->top), Dt1(->base), Dt1(->top));
  dasm_put(Dst, 3748, Dt1(->base), DISPATCH_GL(cur_L), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, LUA_YIELD, Dt1(->base), Dt1(->top), Dt1(->top), Dt1(->maxstack));
  dasm_put(Dst, 3850, (unsigned int)((int64_t)~((uint64_t)2<<47)), (unsigned int)(((int64_t)~((uint64_t)2<<47))>>32), FRAME_TYPE, (unsigned int)((int64_t)~((uint64_t)1<<47)), (unsigned int)(((int64_t)~((uint64_t)1<<47))>>32), Dt1(->top), Dt1(->top));
  dasm_put(Dst, 3954, 1+2, Dt1(->top), Dt1(->base), Dt8(->upvalue[0].gcr), Dt1(->cframe), Dt1(->status), LUA_YIELD, Dt1(->top));
  dasm_put(Dst, 4072, Dt1(->base), Dt1(->maxstack), Dt1(->top), Dt1(->base), Dt1(->top), Dt1(->base));
  dasm_put(Dst, 4193, DISPATCH_GL(cur_L), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, LUA_YIELD, Dt1(->base), Dt1(->top), Dt1(->top), Dt1(->maxstack));
  dasm_put(Dst, 4280, FRAME_TYPE, Dt1(->top), Dt1(->base), Dt1(->cframe), CFRAME_RESUME, Dt1(->base), Dt1(->top));
  dasm_put(Dst, 4390, Dt1(->cframe), LUA_YIELD, Dt1(->status), 1+1, LJ_TISNUM, 1+1, LJ_TISNUM);
  dasm_put(Dst, 4481, 1+1, FRAME_TYPE, LJ_TNIL);
  dasm_put(Dst, 4605, LJ_TISNUM, LJ_TISNUM, 1+1);
  dasm_put(Dst, 4676, LJ_TISNUM, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM);
  dasm_put(Dst, 4784, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM);
  dasm_put(Dst, 4883, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM);
  dasm_put(Dst, 5000, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM, 1+1);
  dasm_put(Dst, 5099, LJ_TISNUM, 1+1, LJ_TISNUM, 1+1);
  dasm_put(Dst, 5198, LJ_TISNUM, 2+1, LJ_TISNUM, LJ_TISNUM, 2+1);
  dasm_put(Dst, 5313, LJ_TISNUM, LJ_TISNUM, 2+1, LJ_TISNUM, LJ_TISNUM);
  dasm_put(Dst, 5424, 2+1, LJ_TISNUM, LJ_TISNUM, 1+1, LJ_TISNUM);
  dasm_put(Dst, 5542, 1+2, 1+1, LJ_TISNUM, 1+2, 1+1);
  dasm_put(Dst, 5678, LJ_TISNUM, LJ_TISNUM, 1+1, LJ_TISNUM);
  dasm_put(Dst, 5790, LJ_TISNUM, 1+1, LJ_TSTR, Dt5(->len));
  dasm_put(Dst, 5901, Dt5([1]), DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), 1+1, LJ_TISNUM);
  dasm_put(Dst, 5976, Dt1(->base), Dt1(->base), (unsigned int)(((uint64_t)LJ_TSTR<<47)), (unsigned int)((((uint64_t)LJ_TSTR<<47))>>32), DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), 1+2);
  dasm_put(Dst, 6086, LJ_TISNUM, LJ_TSTR, LJ_TISNUM, Dt5(->len));
  dasm_put(Dst, 6192, sizeof(GCstr)-1);
  dasm_put(Dst, 6257, 1+1, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), LJ_TSTR);
  dasm_put(Dst, 6332, DISPATCH_GL(tmpbuf), Dt1(->base), DtE(->b), DtE(->L), DtE(->w), 1+1, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), LJ_TSTR);
  dasm_put(Dst, 6433, DISPATCH_GL(tmpbuf), Dt1(->base), DtE(->b), DtE(->L), DtE(->w), 1+1, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold));
  dasm_put(Dst, 6513, LJ_TSTR, DISPATCH_GL(tmpbuf), Dt1(->base), DtE(->b), DtE(->L), DtE(->w), 1+1, LJ_TISNUM, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  dasm_put(Dst, 6627, 1+1, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32), LJ_TISNUM, LJ_TISNUM);
  dasm_put(Dst, 6735, 1+1, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32), LJ_TISNUM, LJ_TISNUM);
  dasm_put(Dst, 6873, 1+1, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32), LJ_TISNUM, LJ_TISNUM, 1+1);
  dasm_put(Dst, 6989, LJ_TISNUM, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32), 1+1, LJ_TISNUM, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  dasm_put(Dst, 7078, 2+1, LJ_TISNUM, LJ_TISNUM, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  dasm_put(Dst, 7178, 2+1, LJ_TISNUM, LJ_TISNUM, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32), 2+1);
  dasm_put(Dst, 7308, LJ_TISNUM, LJ_TISNUM, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32), 2+1, LJ_TISNUM, LJ_TISNUM);
  dasm_put(Dst, 7434, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32), 2+1, LJ_TISNUM, LJ_TISNUM, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  dasm_put(Dst, 7570, 1+2, 1+1, Dt1(->base), 8*LUA_MINSTACK, Dt1(->top), Dt1(->maxstack), Dt8(->f), Dt1(->base), Dt1(->top));
  dasm_put(Dst, 7682, Dt7(->pc), FRAME_TYPE, LUA_MINSTACK, Dt1(->base), Dt1(->base), Dt1(->top), Dt1(->base));
  dasm_put(Dst, 7832, Dt1(->top), DISPATCH_GL(hookmask), HOOK_VMEVENT, HOOK_ACTIVE, LUA_MASKLINE|LUA_MASKCOUNT, DISPATCH_GL(hookcount), DISPATCH_GL(hookmask), HOOK_ACTIVE);
  dasm_put(Dst, 7897, DISPATCH_GL(hookmask), HOOK_ACTIVE, LUA_MASKLINE|LUA_MASKCOUNT, DISPATCH_GL(hookcount), LUA_MASKLINE, Dt1(->base));
  dasm_put(Dst, 7959, Dt1(->base), GG_DISP2STATIC, Dt7(->pc), PC2PROTO(framesize), Dt1(->base), Dt1(->top), GG_DISP2J, DISPATCH_J(L));
  dasm_put(Dst, 8087, Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top), DtD(->traceno), DtD(->link));
  dasm_put(Dst, 8285, BC_JLOOP, DISPATCH_J(exitno), Dt1(->base), GG_DISP2J, DISPATCH_J(L), Dt1(->base), LJ_TNIL);
#if LJ_HASPROFILE
  dasm_put(Dst, 8350, Dt1(->base), Dt1(->base));
#endif
  dasm_put(Dst, 8385, DISPATCH_GL(vmstate), DISPATCH_GL(vmstate), ~LJ_VMST_EXIT, DISPATCH_J(exitno), DISPATCH_J(parent), 16*8+4*8, DISPATCH_GL(cur_L), DISPATCH_GL(jit_base), DISPATCH_J(L), Dt1(->base), 4*8, GG_DISP2J, DISPATCH_GL(jit_base), Dt1(->cframe), CFRAME_RAWMASK, CFRAME_OFS_L, Dt1(->base), CFRAME_OFS_PC);
  dasm_put(Dst, 8618, 10*16+4*8, -10*16, -9*16, -8*16, -7*16, -6*16, -5*16, -4*16, -3*16, -2*16, -1*16, Dt7(->pc), PC2PROTO(k));
  dasm_put(Dst, 8750, Dt1(->base), DISPATCH_GL(jit_base), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, BC_FUNCF, BC_FUNCC+2, FRAME_TYPE, Dt7(->pc), PC2PROTO(k));
  dasm_put(Dst, 8861, (unsigned int)(U64x(7fffffff,ffffffff)), (unsigned int)((U64x(7fffffff,ffffffff))>>32), (unsigned int)(U64x(43300000,00000000)), (unsigned int)((U64x(43300000,00000000))>>32), (unsigned int)(U64x(3ff00000,00000000)), (unsigned int)((U64x(3ff00000,00000000))>>32), (unsigned int)(U64x(7fffffff,ffffffff)), (unsigned int)((U64x(7fffffff,ffffffff))>>32), (unsigned int)(U64x(43300000,00000000)), (unsigned int)((U64x(43300000,00000000))>>32));
  dasm_put(Dst, 8997, (unsigned int)(U64x(bff00000,00000000)), (unsigned int)((U64x(bff00000,00000000))>>32), (unsigned int)(U64x(7fffffff,ffffffff)), (unsigned int)((U64x(7fffffff,ffffffff))>>32), (unsigned int)(U64x(43300000,00000000)), (unsigned int)((U64x(43300000,00000000))>>32), (unsigned int)(U64x(3ff00000,00000000)), (unsigned int)((U64x(3ff00000,00000000))>>32), (unsigned int)(U64x(7fffffff,ffffffff)), (unsigned int)((U64x(7fffffff,ffffffff))>>32), (unsigned int)(U64x(43300000,00000000)), (unsigned int)((U64x(43300000,00000000))>>32));
  dasm_put(Dst, 9157, (unsigned int)(U64x(3ff00000,00000000)), (unsigned int)((U64x(3ff00000,00000000))>>32));
  dasm_put(Dst, 9306, (unsigned int)(U64x(3ff00000,00000000)), (unsigned int)((U64x(3ff00000,00000000))>>32), (unsigned int)(U64x(3ff00000,00000000)), (unsigned int)((U64x(3ff00000,00000000))>>32));
  dasm_put(Dst, 9378);
#ifdef LUA_USE_ASSERT
  dasm_put(Dst, 9406);
#endif
#define DtF(_V) (int)(ptrdiff_t)&(((CTState *)0)_V)
  dasm_put(Dst, 9408, GG_G2DISP, Dt2(->ctype_state), DtF(->cb.slot), DtF(->cb.gpr[0]), DtF(->cb.gpr[1]), DtF(->cb.gpr[2]), DtF(->cb.gpr[3]), DtF(->cb.fpr[0]), DtF(->cb.fpr[1]), DtF(->cb.fpr[2]), DtF(->cb.fpr[3]), CFRAME_SIZE+4*8, DtF(->cb.stack), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->base), Dt1(->top), Dt7(->pc));
#define Dt10(_V) (int)(ptrdiff_t)&(((CCallState *)0)_V)
  dasm_put(Dst, 9541, DISPATCH_GL(ctype_state), DtF(->L), Dt1(->base), Dt1(->top), DtF(->cb.gpr[0]), DtF(->cb.fpr[0]), Dt10(->spadj), Dt10(->nsp), offsetof(CCallState, stack), CCALL_SPS_EXTRA*8);
  dasm_put(Dst, 9660, Dt10(->nfpr), Dt10(->gpr[0]), Dt10(->gpr[1]), Dt10(->gpr[2]), Dt10(->gpr[3]), Dt10(->fpr[0]), Dt10(->fpr[1]), Dt10(->fpr[2]), Dt10(->fpr[3]), Dt10(->func), Dt10(->gpr[0]), Dt10(->fpr[0]));
}

/* Generate the code for a single instruction. */
static void build_ins(BuildCtx *ctx, BCOp op, int defop)
{
  int vk = 0;
  dasm_put(Dst, 9724, defop);

  switch (op) {

  /* -- Comparison ops ---------------------------------------------------- */

  /* Remember: all ops branch for a true comparison, fall through otherwise. */


  case BC_ISLT: case BC_ISGE: case BC_ISLE: case BC_ISGT:
    dasm_put(Dst, 9726, LJ_TISNUM, LJ_TISNUM);
    switch (op) {
    case BC_ISLT:
    dasm_put(Dst, 8992);
    break;
    case BC_ISGE:
    dasm_put(Dst, 9792);
    break;
    case BC_ISLE:
    dasm_put(Dst, 2897);
    break;
    case BC_ISGT:
    dasm_put(Dst, 9797);
    break;
    default: break;  /* Shut up GCC. */
    }
    dasm_put(Dst, 9802, -BCBIAS_J*4);
    break;

  case BC_ISEQV: case BC_ISNEV:
    vk = op == BC_ISEQV;
    dasm_put(Dst, 9836);
    if (vk) {
    } else {
    }
    dasm_put(Dst, 9865, LJ_TISNUM, LJ_TISNUM);
  iseqne_fp:
    if (vk) {
      dasm_put(Dst, 9903);
    } else {
      dasm_put(Dst, 9912);
    }
  iseqne_end:
    if (vk) {
      dasm_put(Dst, 9921, -BCBIAS_J*4);
    } else {
      dasm_put(Dst, 9937, -BCBIAS_J*4);
    }
    if (LJ_DUALNUM && (op == BC_ISEQV || op == BC_ISNEV ||
		       op == BC_ISEQN || op == BC_ISNEN)) {
      dasm_put(Dst, 9953);
    } else {
      dasm_put(Dst, 9815);
    }
    if (op == BC_ISEQV || op == BC_ISNEV) {
      dasm_put(Dst, 9958, LJ_TCDATA, LJ_TCDATA, LJ_TISTABUD, Dt6(->metatable), Dt6(->nomm), 1<<MM_eq);
      dasm_put(Dst, 10026);
      if (vk) {
	dasm_put(Dst, 10031);
      } else {
	dasm_put(Dst, 10035);
      }
      dasm_put(Dst, 10041);
    } else {
      dasm_put(Dst, 10046, LJ_TCDATA);
      if (LJ_DUALNUM && vk) {
	dasm_put(Dst, 10054);
      } else {
	dasm_put(Dst, 10026);
      }
      dasm_put(Dst, 10059);
    }
    break;
  case BC_ISEQS: case BC_ISNES:
    vk = op == BC_ISEQS;
    dasm_put(Dst, 10064, LJ_TSTR);
  iseqne_test:
    if (vk) {
      dasm_put(Dst, 9907);
    } else {
      dasm_put(Dst, 4067);
    }
    goto iseqne_end;
  case BC_ISEQN: case BC_ISNEN:
    vk = op == BC_ISEQN;
    dasm_put(Dst, 10108);
    if (vk) {
    } else {
    }
    dasm_put(Dst, 10117, LJ_TISNUM);
    goto iseqne_fp;
  case BC_ISEQP: case BC_ISNEP:
    vk = op == BC_ISEQP;
    dasm_put(Dst, 10153);
    if (!LJ_HASFFI) goto iseqne_test;
    if (vk) {
      dasm_put(Dst, 10173, -BCBIAS_J*4, LJ_TCDATA);
    } else {
      dasm_put(Dst, 10225, LJ_TCDATA, -BCBIAS_J*4);
    }
    break;

  /* -- Unary test and copy ops ------------------------------------------- */

  case BC_ISTC: case BC_ISFC: case BC_IST: case BC_ISF:
    dasm_put(Dst, 10271);
    if (op == BC_ISTC || op == BC_ISFC) {
      dasm_put(Dst, 10280);
    }
    dasm_put(Dst, 4470, LJ_TISTRUECOND);
    if (op == BC_IST || op == BC_ISTC) {
      dasm_put(Dst, 9797);
    } else {
      dasm_put(Dst, 2897);
    }
    if (op == BC_ISTC || op == BC_ISFC) {
      dasm_put(Dst, 10284);
    }
    dasm_put(Dst, 9802, -BCBIAS_J*4);
    break;

  case BC_ISTYPE:
    dasm_put(Dst, 10289);
    break;
  case BC_ISNUM:
    dasm_put(Dst, 10325, LJ_TISNUM);
    break;

  /* -- Unary ops --------------------------------------------------------- */

  case BC_MOV:
    dasm_put(Dst, 10364);
    break;
  case BC_NOT:
    dasm_put(Dst, 10393, LJ_TISTRUECOND);
    break;
  case BC_UNM:
    dasm_put(Dst, 10448, LJ_TISNUM, (unsigned int)(U64x(80000000,00000000)), (unsigned int)((U64x(80000000,00000000))>>32));
    break;
  case BC_LEN:
    dasm_put(Dst, 10502, LJ_TSTR, Dt5(->len), LJ_TTAB);
#if LJ_52
    dasm_put(Dst, 10583, Dt6(->metatable));
#endif
    dasm_put(Dst, 10599);
#if LJ_52
    dasm_put(Dst, 10627, Dt6(->nomm), 1<<MM_len);
#endif
    break;

  /* -- Binary ops -------------------------------------------------------- */


  case BC_ADDVN: case BC_ADDNV: case BC_ADDVV:
    dasm_put(Dst, 10643);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 10651, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 10684, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 10717, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 10768);
    break;
  case BC_SUBVN: case BC_SUBNV: case BC_SUBVV:
    dasm_put(Dst, 10643);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 10795, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 10828, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 10861, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 10768);
    break;
  case BC_MULVN: case BC_MULNV: case BC_MULVV:
    dasm_put(Dst, 10643);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 10912, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 10945, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 10978, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 10768);
    break;
  case BC_DIVVN: case BC_DIVNV: case BC_DIVVV:
    dasm_put(Dst, 10643);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 11029, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 11062, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 11095, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 10768);
    break;
  case BC_MODVN:
    dasm_put(Dst, 10643);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 11146, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 11179, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 11212, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 11263);
    break;
  case BC_MODNV: case BC_MODVV:
    dasm_put(Dst, 10643);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 11146, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 11179, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 11212, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 11295);
    break;
  case BC_POW:
    dasm_put(Dst, 10643);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 11146, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 11179, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 11212, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 11300);
    break;

  case BC_CAT:
    dasm_put(Dst, 11343, Dt1(->base), Dt1(->base));
    break;

  /* -- Constant ops ------------------------------------------------------ */

  case BC_KSTR:
    dasm_put(Dst, 11434, (unsigned int)(((uint64_t)LJ_TSTR<<47)), (unsigned int)((((uint64_t)LJ_TSTR<<47))>>32));
    break;
  case BC_KCDATA:
    dasm_put(Dst, 11434, (unsigned int)(((uint64_t)LJ_TCDATA<<47)), (unsigned int)((((uint64_t)LJ_TCDATA<<47))>>32));
    break;
  case BC_KSHORT:
    dasm_put(Dst, 11474);
    break;
  case BC_KNUM:
    dasm_put(Dst, 11509);
    break;
  case BC_KPRI:
    dasm_put(Dst, 10415);
    break;
  case BC_KNIL:
    dasm_put(Dst, 11542, LJ_TNIL);
    break;

  /* -- Upvalue and function ops ------------------------------------------ */

  case BC_UGET:
    dasm_put(Dst, 11597, offsetof(GCfuncL, uvptr), DtA(->v));
    break;
  case BC_USETV:
#define TV2MARKOFS \
 ((int32_t)offsetof(GCupval, marked)-(int32_t)offsetof(GCupval, tv))
    dasm_put(Dst, 11650, offsetof(GCfuncL, uvptr), DtA(->closed), DtA(->v), TV2MARKOFS, LJ_GC_BLACK, LJ_TISGCV, LJ_TNUMX - LJ_TISGCV, Dt4(->gch.marked), LJ_GC_WHITES);
    dasm_put(Dst, 11761, GG_DISP2G);
    break;
#undef TV2MARKOFS
  case BC_USETS:
    dasm_put(Dst, 11781, offsetof(GCfuncL, uvptr), DtA(->v), (unsigned int)(((uint64_t)LJ_TSTR<<47)), (unsigned int)((((uint64_t)LJ_TSTR<<47))>>32), DtA(->marked), LJ_GC_BLACK, Dt4(->gch.marked), LJ_GC_WHITES, DtA(->closed), GG_DISP2G);
    break;
  case BC_USETN:
    dasm_put(Dst, 11896, offsetof(GCfuncL, uvptr), DtA(->v));
    break;
  case BC_USETP:
    dasm_put(Dst, 11952, offsetof(GCfuncL, uvptr), DtA(->v));
    break;
  case BC_UCLO:
    dasm_put(Dst, 12008, -BCBIAS_J*4, Dt1(->openupval), Dt1(->base), Dt1(->base));
    break;

  case BC_FNEW:
    dasm_put(Dst, 12071, Dt1(->base), Dt1(->base), (unsigned int)(((uint64_t)LJ_TFUNC<<47)), (unsigned int)((((uint64_t)LJ_TFUNC<<47))>>32));
    break;

  /* -- Table ops --------------------------------------------------------- */

  case BC_TNEW:
    dasm_put(Dst, 12155, Dt1(->base), DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), Dt1(->base), (unsigned int)(((uint64_t)LJ_TTAB<<47)), (unsigned int)((((uint64_t)LJ_TTAB<<47))>>32));
    break;
  case BC_TDUP:
    dasm_put(Dst, 12289, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), Dt1(->base), Dt1(->base), (unsigned int)(((uint64_t)LJ_TTAB<<47)), (unsigned int)((((uint64_t)LJ_TTAB<<47))>>32));
    break;

  case BC_GGET:
    dasm_put(Dst, 12397, Dt7(->env));
    break;
  case BC_GSET:
    dasm_put(Dst, 12428, Dt7(->env));
    break;

  case BC_TGETV:
    dasm_put(Dst, 12459, LJ_TTAB, LJ_TISNUM, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->metatable));
    dasm_put(Dst, 12608, Dt6(->nomm), 1<<MM_index, LJ_TSTR);
    break;
  case BC_TGETS:
    dasm_put(Dst, 12646, LJ_TTAB, Dt6(->hmask), Dt5(->sid), sizeof(Node), Dt6(->node), (unsigned int)(((uint64_t)LJ_TSTR<<47)), (unsigned int)((((uint64_t)LJ_TSTR<<47))>>32), DtB(->key), DtB(->val), LJ_TNIL);
    dasm_put(Dst, 12744, DtB(->next), LJ_TNIL, Dt6(->metatable), Dt6(->nomm), 1<<MM_index);
    break;
  case BC_TGETB:
    dasm_put(Dst, 12813, LJ_TTAB, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->metatable), Dt6(->nomm), 1<<MM_index);
    dasm_put(Dst, 10622);
    break;
  case BC_TGETR:
    dasm_put(Dst, 12928, Dt6(->asize), Dt6(->array));
    break;

  case BC_TSETV:
    dasm_put(Dst, 13001, LJ_TTAB, LJ_TISNUM, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->marked), LJ_GC_BLACK);
    dasm_put(Dst, 13120, Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex, LJ_TSTR, Dt6(->marked), (uint8_t)~LJ_GC_BLACK);
    dasm_put(Dst, 13204, DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
    break;
  case BC_TSETS:
    dasm_put(Dst, 13221, LJ_TTAB, Dt6(->hmask), Dt5(->sid), sizeof(Node), Dt6(->nomm), Dt6(->node), (unsigned int)(((uint64_t)LJ_TSTR<<47)), (unsigned int)((((uint64_t)LJ_TSTR<<47))>>32), DtB(->key), LJ_TNIL);
    dasm_put(Dst, 13318, Dt6(->marked), LJ_GC_BLACK, Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex, DtB(->next));
    dasm_put(Dst, 13397, Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex, Dt1(->base), Dt1(->base), Dt6(->marked), (uint8_t)~LJ_GC_BLACK, DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
    break;
  case BC_TSETB:
    dasm_put(Dst, 13496, LJ_TTAB, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->marked), LJ_GC_BLACK, Dt6(->metatable));
    dasm_put(Dst, 13611, Dt6(->nomm), 1<<MM_newindex, Dt6(->marked), (uint8_t)~LJ_GC_BLACK, DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
    break;
  case BC_TSETR:
    dasm_put(Dst, 13648, Dt6(->marked), LJ_GC_BLACK, Dt6(->asize), Dt6(->array), Dt6(->marked), (uint8_t)~LJ_GC_BLACK, DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
    break;

  case BC_TSETM:
    dasm_put(Dst, 13752, Dt6(->marked), LJ_GC_BLACK, Dt6(->asize), Dt6(->array), Dt1(->base), Dt1(->base));
    dasm_put(Dst, 13899, Dt6(->marked), (uint8_t)~LJ_GC_BLACK, DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
    break;

  /* -- Calls and vararg handling ----------------------------------------- */

  case BC_CALL: case BC_CALLM:
    dasm_put(Dst, 10647);
    if (op == BC_CALLM) {
      dasm_put(Dst, 13936);
    }
    dasm_put(Dst, 13941, LJ_TFUNC, Dt7(->pc));
    break;

  case BC_CALLMT:
    dasm_put(Dst, 13936);
    break;
  case BC_CALLT:
    dasm_put(Dst, 14005, LJ_TFUNC, FRAME_TYPE, Dt7(->ffid), Dt7(->pc));
    dasm_put(Dst, 14127, FRAME_TYPE, Dt7(->pc), PC2PROTO(k), FRAME_VARG, FRAME_TYPEP, FRAME_VARG);
    break;

  case BC_ITERC:
    dasm_put(Dst, 14231, 2+1, LJ_TFUNC, Dt7(->pc));
    break;

  case BC_ITERN:
    dasm_put(Dst, 14320, Dt6(->asize), Dt6(->array), LJ_TNIL, -BCBIAS_J*4, Dt6(->hmask));
    dasm_put(Dst, 14458, sizeof(Node), Dt6(->node), DtB(->val), LJ_TNIL, DtB(->key), DtB(->val));
    break;

  case BC_ISNEXT:
    dasm_put(Dst, 14517, LJ_TFUNC, LJ_TTAB, LJ_TNIL, Dt8(->ffid), FF_next_N, -BCBIAS_J*4, (unsigned int)(U64x(fffe7fff, 00000000)), (unsigned int)((U64x(fffe7fff, 00000000))>>32), BC_JMP);
    dasm_put(Dst, 14635, -BCBIAS_J*4, BC_ITERC);
    break;

  case BC_VARG:
    dasm_put(Dst, 14649, (16+FRAME_VARG), LJ_TNIL, Dt1(->maxstack));
    dasm_put(Dst, 14812, Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top));
    break;

  /* -- Returns ----------------------------------------------------------- */

  case BC_RETM:
    dasm_put(Dst, 13936);
    break;

  case BC_RET: case BC_RET0: case BC_RET1:
    if (op != BC_RET0) {
      dasm_put(Dst, 14905);
    }
    dasm_put(Dst, 14909, FRAME_TYPE);
    switch (op) {
    case BC_RET:
      dasm_put(Dst, 14929);
      break;
    case BC_RET1:
      dasm_put(Dst, 14983);
      /* fallthrough */
    case BC_RET0:
      dasm_put(Dst, 14993);
    default:
      break;
    }
    dasm_put(Dst, 15004, Dt7(->pc), PC2PROTO(k));
    if (op == BC_RET) {
      dasm_put(Dst, 15064, LJ_TNIL);
    } else {
      dasm_put(Dst, 15075, LJ_TNIL);
    }
    dasm_put(Dst, 15082, -FRAME_VARG, FRAME_TYPEP);
    if (op != BC_RET0) {
      dasm_put(Dst, 15109);
    }
    dasm_put(Dst, 10622);
    break;

  /* -- Loops and branches ------------------------------------------------ */


  case BC_FORL:
    dasm_put(Dst, 15114, HOTCOUNT_PCMASK, GG_DISP2HOT, HOTCOUNT_LOOP);
    break;

  case BC_JFORI:
  case BC_JFORL:
#if !LJ_HASJIT
    break;
#endif
  case BC_FORI:
  case BC_IFORL:
    vk = (op == BC_IFORL || op == BC_JFORL);
    dasm_put(Dst, 15135);
    if (LJ_DUALNUM) {
      dasm_put(Dst, 15140, LJ_TISNUM);
      if (!vk) {
	dasm_put(Dst, 15166, LJ_TISNUM, LJ_TISNUM);
      } else {
#ifdef LUA_USE_ASSERT
	dasm_put(Dst, 15209, LJ_TISNUM, LJ_TISNUM);
#endif
	dasm_put(Dst, 15246, (unsigned int)(((uint64_t)LJ_TISNUM<<47)), (unsigned int)((((uint64_t)LJ_TISNUM<<47))>>32));
      }
      dasm_put(Dst, 15275);
      if (op == BC_FORI) {
	dasm_put(Dst, 15283, -BCBIAS_J*4);
      } else if (op == BC_JFORI) {
	dasm_put(Dst, 15298, -BCBIAS_J*4, BC_JLOOP);
      } else if (op == BC_IFORL) {
	dasm_put(Dst, 15317, -BCBIAS_J*4);
      } else {
	dasm_put(Dst, 15309, BC_JLOOP);
      }
      dasm_put(Dst, 15332);
      if (!vk) {
	dasm_put(Dst, 15194, LJ_TISNUM);
      } else {
	dasm_put(Dst, 15357, (unsigned int)(((uint64_t)LJ_TISNUM<<47)), (unsigned int)((((uint64_t)LJ_TISNUM<<47))>>32));
      }
      dasm_put(Dst, 15275);
      if (op == BC_FORI) {
	dasm_put(Dst, 15375);
      } else if (op == BC_JFORI) {
	dasm_put(Dst, 15380, -BCBIAS_J*4, BC_JLOOP);
      } else if (op == BC_IFORL) {
	dasm_put(Dst, 15395);
      } else {
	dasm_put(Dst, 15391, BC_JLOOP);
      }
      dasm_put(Dst, 15400);
      if (!vk) {
	dasm_put(Dst, 15407);
      }
    } else if (!vk) {
      dasm_put(Dst, 15412, LJ_TISNUM);
    }
    if (!vk) {
      dasm_put(Dst, 15430, LJ_TISNUM);
    } else {
#ifdef LUA_USE_ASSERT
      dasm_put(Dst, 15449, LJ_TISNUM, LJ_TISNUM);
#endif
    }
    dasm_put(Dst, 15486);
    if (!vk) {
      dasm_put(Dst, 15491, LJ_TISNUM);
    }
    dasm_put(Dst, 15510);
    if (vk) {
      dasm_put(Dst, 15522);
    } else {
      dasm_put(Dst, 15542);
    }
    dasm_put(Dst, 15547);
    if (op == BC_FORI) {
      dasm_put(Dst, 15560, -BCBIAS_J*4);
    } else if (op == BC_JFORI) {
      dasm_put(Dst, 15571, -BCBIAS_J*4, BC_JLOOP);
    } else if (op == BC_IFORL) {
      dasm_put(Dst, 15586, -BCBIAS_J*4);
    } else {
      dasm_put(Dst, 15582, BC_JLOOP);
    }
    dasm_put(Dst, 15597);
    break;

  case BC_ITERL:
    dasm_put(Dst, 15114, HOTCOUNT_PCMASK, GG_DISP2HOT, HOTCOUNT_LOOP);
    break;

  case BC_JITERL:
#if !LJ_HASJIT
    break;
#endif
  case BC_IITERL:
    dasm_put(Dst, 15630, LJ_TNIL);
    if (op == BC_JITERL) {
      dasm_put(Dst, 15647, BC_JLOOP);
    } else {
      dasm_put(Dst, 15656, -BCBIAS_J*4);
    }
    dasm_put(Dst, 9813);
    break;

  case BC_LOOP:
    dasm_put(Dst, 15114, HOTCOUNT_PCMASK, GG_DISP2HOT, HOTCOUNT_LOOP);
    break;

  case BC_ILOOP:
    dasm_put(Dst, 9815);
    break;

  case BC_JLOOP:
    dasm_put(Dst, 15668, DISPATCH_J(trace), DtD(->mcode), DISPATCH_GL(jit_base), DISPATCH_GL(tmpbuf.L), 10*16+4*8, -1*16, -2*16, -3*16, -4*16, -5*16, -6*16, -7*16, -8*16, -9*16, -10*16);
    break;

  case BC_JMP:
    dasm_put(Dst, 15782, -BCBIAS_J*4);
    break;

  /* -- Function headers -------------------------------------------------- */

   /*
   ** Reminder: A function may be called with func/args above L->maxstack,
   ** i.e. occupying EXTRA_STACK slots. And vmeta_call may add one extra slot,
   ** too. This means all FUNC* ops (including fast functions) must check
   ** for stack overflow _before_ adding more slots!
   */

  case BC_FUNCF:
    dasm_put(Dst, 15809, HOTCOUNT_PCMASK, GG_DISP2HOT, HOTCOUNT_CALL);
  case BC_FUNCV:  /* NYI: compiled vararg functions. */
    break;

  case BC_JFUNCF:
#if !LJ_HASJIT
    break;
#endif
  case BC_IFUNCF:
    dasm_put(Dst, 15830, -4+PC2PROTO(k), Dt1(->maxstack), -4+PC2PROTO(numparams));
    if (op == BC_JFUNCF) {
      dasm_put(Dst, 15864, BC_JLOOP);
    } else {
      dasm_put(Dst, 9815);
    }
    dasm_put(Dst, 15873, LJ_TNIL);
    break;

  case BC_JFUNCV:
#if !LJ_HASJIT
    break;
#endif
    dasm_put(Dst, 9406);
    break;  /* NYI: compiled vararg functions. */

  case BC_IFUNCV:
    dasm_put(Dst, 15896, FRAME_VARG+8, Dt1(->maxstack), -4+PC2PROTO(numparams), LJ_TNIL);
    if (op == BC_JFUNCV) {
      dasm_put(Dst, 15864, BC_JLOOP);
    } else {
      dasm_put(Dst, 16000, -4+PC2PROTO(k));
    }
    dasm_put(Dst, 16025, LJ_TNIL);
    break;

  case BC_FUNCC:
  case BC_FUNCCW:
    dasm_put(Dst, 16048, Dt8(->f), Dt1(->base), 8*LUA_MINSTACK, Dt1(->maxstack), Dt1(->top));
    if (op == BC_FUNCC) {
      dasm_put(Dst, 16094);
    } else {
      dasm_put(Dst, 16099);
    }
    dasm_put(Dst, 16108, DISPATCH_GL(vmstate), ~LJ_VMST_C);
    if (op == BC_FUNCC) {
      dasm_put(Dst, 16117);
    } else {
      dasm_put(Dst, 16121, DISPATCH_GL(wrapf));
    }
    dasm_put(Dst, 16126, Dt1(->base), DISPATCH_GL(cur_L), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->top));
    break;

  /* ---------------------------------------------------------------------- */

  default:
    fprintf(stderr, "Error: undefined opcode BC_%s\n", bc_names[op]);
    exit(2);
    break;
  }
}

static int build_backend(BuildCtx *ctx)
{
  int op;
  dasm_growpc(Dst, BC__MAX);
  build_subroutines(ctx);
  dasm_put(Dst, 16160);
  for (op = 0; op < BC__MAX; op++)
    build_ins(ctx, (BCOp)op, op);
  return BC__MAX;
}

/* Emit pseudo frame-info for all assembler functions. */
static void emit_asm_debug(BuildCtx *ctx)
{
  int fcofs = (int)((uint8_t *)ctx->glob[GLOB_vm_ffi_call] - ctx->code);
  switch (ctx->mode) {
  case BUILD_elfasm:
    fprintf(ctx->fp, "\t.section .debug_frame,\"\",@progbits\n");
    fprintf(ctx->fp,
	".Lframe0:\n"
	"\t.long .LECIE0-.LSCIE0\n"
	".LSCIE0:\n"
	"\t.long 0xffffffff\n"
	"\t.byte 0x1\n"
	"\t.string \"\"\n"
	"\t.uleb128 0x1\n"
	"\t.sleb128 -8\n"
	"\t.byte 0x10\n"
	"\t.byte 0xc\n\t.uleb128 0x7\n\t.uleb128 8\n"
	"\t.byte 0x80+0x10\n\t.uleb128 0x1\n"
	"\t.align 8\n"
	".LECIE0:\n\n");
    fprintf(ctx->fp,
	".LSFDE0:\n"
	"\t.long .LEFDE0-.LASFDE0\n"
	".LASFDE0:\n"
	"\t.long .Lframe0\n"
	"\t.quad .Lbegin\n"
	"\t.quad %d\n"
	"\t.byte 0xe\n\t.uleb128 %d\n"		/* def_cfa_offset */
	"\t.byte 0x86\n\t.uleb128 0x2\n"	/* offset rbp */
	"\t.byte 0x83\n\t.uleb128 0x3\n"	/* offset rbx */
	"\t.byte 0x8f\n\t.uleb128 0x4\n"	/* offset r15 */
	"\t.byte 0x8e\n\t.uleb128 0x5\n"	/* offset r14 */
#if LJ_NO_UNWIND
	"\t.byte 0x8d\n\t.uleb128 0x6\n"	/* offset r13 */
	"\t.byte 0x8c\n\t.uleb128 0x7\n"	/* offset r12 */
#endif
	"\t.align 8\n"
	".LEFDE0:\n\n", fcofs, CFRAME_SIZE);
#if LJ_HASFFI
    fprintf(ctx->fp,
	".LSFDE1:\n"
	"\t.long .LEFDE1-.LASFDE1\n"
	".LASFDE1:\n"
	"\t.long .Lframe0\n"
	"\t.quad lj_vm_ffi_call\n"
	"\t.quad %d\n"
	"\t.byte 0xe\n\t.uleb128 16\n"		/* def_cfa_offset */
	"\t.byte 0x86\n\t.uleb128 0x2\n"	/* offset rbp */
	"\t.byte 0xd\n\t.uleb128 0x6\n"		/* def_cfa_register rbp */
	"\t.byte 0x83\n\t.uleb128 0x3\n"	/* offset rbx */
	"\t.align 8\n"
	".LEFDE1:\n\n", (int)ctx->codesz - fcofs);
#endif
#if !LJ_NO_UNWIND
#if LJ_TARGET_SOLARIS
    fprintf(ctx->fp, "\t.section .eh_frame,\"a\",@unwind\n");
#else
    fprintf(ctx->fp, "\t.section .eh_frame,\"a\",@progbits\n");
#endif
    fprintf(ctx->fp,
	".Lframe1:\n"
	"\t.long .LECIE1-.LSCIE1\n"
	".LSCIE1:\n"
	"\t.long 0\n"
	"\t.byte 0x1\n"
	"\t.string \"zPR\"\n"
	"\t.uleb128 0x1\n"
	"\t.sleb128 -8\n"
	"\t.byte 0x10\n"
	"\t.uleb128 6\n"			/* augmentation length */
	"\t.byte 0x1b\n"			/* pcrel|sdata4 */
	"\t.long lj_err_unwind_dwarf-.\n"
	"\t.byte 0x1b\n"			/* pcrel|sdata4 */
	"\t.byte 0xc\n\t.uleb128 0x7\n\t.uleb128 8\n"
	"\t.byte 0x80+0x10\n\t.uleb128 0x1\n"
	"\t.align 8\n"
	".LECIE1:\n\n");
    fprintf(ctx->fp,
	".LSFDE2:\n"
	"\t.long .LEFDE2-.LASFDE2\n"
	".LASFDE2:\n"
	"\t.long .LASFDE2-.Lframe1\n"
	"\t.long .Lbegin-.\n"
	"\t.long %d\n"
	"\t.uleb128 0\n"			/* augmentation length */
	"\t.byte 0xe\n\t.uleb128 %d\n"		/* def_cfa_offset */
	"\t.byte 0x86\n\t.uleb128 0x2\n"	/* offset rbp */
	"\t.byte 0x83\n\t.uleb128 0x3\n"	/* offset rbx */
	"\t.byte 0x8f\n\t.uleb128 0x4\n"	/* offset r15 */
	"\t.byte 0x8e\n\t.uleb128 0x5\n"	/* offset r14 */
	"\t.align 8\n"
	".LEFDE2:\n\n", fcofs, CFRAME_SIZE);
#if LJ_HASFFI
    fprintf(ctx->fp,
	".Lframe2:\n"
	"\t.long .LECIE2-.LSCIE2\n"
	".LSCIE2:\n"
	"\t.long 0\n"
	"\t.byte 0x1\n"
	"\t.string \"zR\"\n"
	"\t.uleb128 0x1\n"
	"\t.sleb128 -8\n"
	"\t.byte 0x10\n"
	"\t.uleb128 1\n"			/* augmentation length */
	"\t.byte 0x1b\n"			/* pcrel|sdata4 */
	"\t.byte 0xc\n\t.uleb128 0x7\n\t.uleb128 8\n"
	"\t.byte 0x80+0x10\n\t.uleb128 0x1\n"
	"\t.align 8\n"
	".LECIE2:\n\n");
    fprintf(ctx->fp,
	".LSFDE3:\n"
	"\t.long .LEFDE3-.LASFDE3\n"
	".LASFDE3:\n"
	"\t.long .LASFDE3-.Lframe2\n"
	"\t.long lj_vm_ffi_call-.\n"
	"\t.long %d\n"
	"\t.uleb128 0\n"			/* augmentation length */
	"\t.byte 0xe\n\t.uleb128 16\n"		/* def_cfa_offset */
	"\t.byte 0x86\n\t.uleb128 0x2\n"	/* offset rbp */
	"\t.byte 0xd\n\t.uleb128 0x6\n"		/* def_cfa_register rbp */
	"\t.byte 0x83\n\t.uleb128 0x3\n"	/* offset rbx */
	"\t.align 8\n"
	".LEFDE3:\n\n", (int)ctx->codesz - fcofs);
#endif
#endif
    break;
#if !LJ_NO_UNWIND
  /* Mental note: never let Apple design an assembler.
  ** Or a linker. Or a plastic case. But I digress.
  */
  case BUILD_machasm: {
#if LJ_HASFFI
    int fcsize = 0;
#endif
    int i;
    fprintf(ctx->fp, "\t.section __TEXT,__eh_frame,coalesced,no_toc+strip_static_syms+live_support\n");
    fprintf(ctx->fp,
	"EH_frame1:\n"
	"\t.set L$set$x,LECIEX-LSCIEX\n"
	"\t.long L$set$x\n"
	"LSCIEX:\n"
	"\t.long 0\n"
	"\t.byte 0x1\n"
	"\t.ascii \"zPR\\0\"\n"
	"\t.byte 0x1\n"
	"\t.byte 128-8\n"
	"\t.byte 0x10\n"
	"\t.byte 6\n"				/* augmentation length */
	"\t.byte 0x9b\n"			/* indirect|pcrel|sdata4 */
	"\t.long _lj_err_unwind_dwarf+4@GOTPCREL\n"
	"\t.byte 0x1b\n"			/* pcrel|sdata4 */
	"\t.byte 0xc\n\t.byte 0x7\n\t.byte 8\n"
	"\t.byte 0x80+0x10\n\t.byte 0x1\n"
	"\t.align 3\n"
	"LECIEX:\n\n");
    for (i = 0; i < ctx->nsym; i++) {
      const char *name = ctx->sym[i].name;
      int32_t size = ctx->sym[i+1].ofs - ctx->sym[i].ofs;
      if (size == 0) continue;
#if LJ_HASFFI
      if (!strcmp(name, "_lj_vm_ffi_call")) { fcsize = size; continue; }
#endif
      fprintf(ctx->fp,
	  "%s.eh:\n"
	  "LSFDE%d:\n"
	  "\t.set L$set$%d,LEFDE%d-LASFDE%d\n"
	  "\t.long L$set$%d\n"
	  "LASFDE%d:\n"
	  "\t.long LASFDE%d-EH_frame1\n"
	  "\t.long %s-.\n"
	  "\t.long %d\n"
	  "\t.byte 0\n"				/* augmentation length */
	  "\t.byte 0xe\n\t.byte %d\n"		/* def_cfa_offset */
	  "\t.byte 0x86\n\t.byte 0x2\n"		/* offset rbp */
	  "\t.byte 0x83\n\t.byte 0x3\n"		/* offset rbx */
	  "\t.byte 0x8f\n\t.byte 0x4\n"		/* offset r15 */
	  "\t.byte 0x8e\n\t.byte 0x5\n"		/* offset r14 */
	  "\t.align 3\n"
	  "LEFDE%d:\n\n",
	  name, i, i, i, i, i, i, i, name, size, CFRAME_SIZE, i);
    }
#if LJ_HASFFI
    if (fcsize) {
      fprintf(ctx->fp,
	  "EH_frame2:\n"
	  "\t.set L$set$y,LECIEY-LSCIEY\n"
	  "\t.long L$set$y\n"
	  "LSCIEY:\n"
	  "\t.long 0\n"
	  "\t.byte 0x1\n"
	  "\t.ascii \"zR\\0\"\n"
	  "\t.byte 0x1\n"
	  "\t.byte 128-8\n"
	  "\t.byte 0x10\n"
	  "\t.byte 1\n"				/* augmentation length */
	  "\t.byte 0x1b\n"			/* pcrel|sdata4 */
	  "\t.byte 0xc\n\t.byte 0x7\n\t.byte 8\n"
	  "\t.byte 0x80+0x10\n\t.byte 0x1\n"
	  "\t.align 3\n"
	  "LECIEY:\n\n");
      fprintf(ctx->fp,
	  "_lj_vm_ffi_call.eh:\n"
	  "LSFDEY:\n"
	  "\t.set L$set$yy,LEFDEY-LASFDEY\n"
	  "\t.long L$set$yy\n"
	  "LASFDEY:\n"
	  "\t.long LASFDEY-EH_frame2\n"
	  "\t.long _lj_vm_ffi_call-.\n"
	  "\t.long %d\n"
	  "\t.byte 0\n"				/* augmentation length */
	  "\t.byte 0xe\n\t.byte 16\n"		/* def_cfa_offset */
	  "\t.byte 0x86\n\t.byte 0x2\n"		/* offset rbp */
	  "\t.byte 0xd\n\t.byte 0x6\n"		/* def_cfa_register rbp */
	  "\t.byte 0x83\n\t.byte 0x3\n"		/* offset rbx */
	  "\t.align 3\n"
	  "LEFDEY:\n\n", fcsize);
    }
#endif
    fprintf(ctx->fp, ".subsections_via_symbols\n");
    }
    break;
#endif
  default:  /* Difficult for other modes. */
    break;
  }
}

