; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	D:\CLEARSKY\sources\engine\xrEngine\Device_destroy.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?Process@?$CRegistrator@VpureScreenResolutionChanged@@@@QAEXP6IXPAX@Z@Z ; CRegistrator<pureScreenResolutionChanged>::Process
PUBLIC	?_REG_Compare@?$CRegistrator@VpureDeviceReset@@@@CAHPBX0@Z ; CRegistrator<pureDeviceReset>::_REG_Compare
PUBLIC	?Resort@?$CRegistrator@VpureDeviceReset@@@@QAEXXZ ; CRegistrator<pureDeviceReset>::Resort
PUBLIC	?Process@?$CRegistrator@VpureDeviceReset@@@@QAEXP6IXPAX@Z@Z ; CRegistrator<pureDeviceReset>::Process
PUBLIC	?clear@?$_Impl_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@priv@stlp_std@@QAEXXZ ; stlp_std::priv::_Impl_vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::clear
PUBLIC	?clear@?$vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@stlp_std@@QAEXXZ ; stlp_std::vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::clear
PUBLIC	?clear_and_free@?$xr_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@@QAEXXZ ; xr_vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::clear_and_free
PUBLIC	?clear@?$xr_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@@QAEXXZ ; xr_vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::clear
PUBLIC	??_GCStats@@QAEPAXI@Z				; CStats::`scalar deleting destructor'
PUBLIC	??R?$xr_special_free@$00VCStats@@@@QAEXAAPAVCStats@@@Z ; xr_special_free<1,CStats>::operator()
PUBLIC	??$xr_delete@VCStats@@@@YAXAAPAVCStats@@@Z	; xr_delete<CStats>
PUBLIC	??_C@_0BH@LGOLILEE@Destroying?5Direct3D?4?4?4?$AA@ ; `string'
PUBLIC	??_C@_0BC@EPFBKKAE@?$CK?$CK?$CK?5RESET?5?$FL?$CFd?5ms?$FN?$AA@ ; `string'
EXTRN	__imp_?DU@@3PAVCDUInterface@@A:DWORD
;	COMDAT ??_C@_0BC@EPFBKKAE@?$CK?$CK?$CK?5RESET?5?$FL?$CFd?5ms?$FN?$AA@
CONST	SEGMENT
??_C@_0BC@EPFBKKAE@?$CK?$CK?$CK?5RESET?5?$FL?$CFd?5ms?$FN?$AA@ DB '*** RE'
	DB	'SET [%d ms]', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LGOLILEE@Destroying?5Direct3D?4?4?4?$AA@
CONST	SEGMENT
??_C@_0BH@LGOLILEE@Destroying?5Direct3D?4?4?4?$AA@ DB 'Destroying Direct3'
	DB	'D...', 00H					; `string'
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\pure.h
;	COMDAT ?_REG_Compare@?$CRegistrator@VpureDeviceReset@@@@CAHPBX0@Z
_TEXT	SEGMENT
_e1$ = 8						; size = 4
_e2$ = 12						; size = 4
?_REG_Compare@?$CRegistrator@VpureDeviceReset@@@@CAHPBX0@Z PROC ; CRegistrator<pureDeviceReset>::_REG_Compare, COMDAT

; 42   : 	_REG_INFO *p1 = (_REG_INFO *)e1;
; 43   : 	_REG_INFO *p2 = (_REG_INFO *)e2;
; 44   : 	return (p2->Prio - p1->Prio);

	mov	eax, DWORD PTR _e2$[esp-4]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _e1$[esp-4]
	sub	eax, DWORD PTR [ecx+4]

; 45   : }

	ret	0
?_REG_Compare@?$CRegistrator@VpureDeviceReset@@@@CAHPBX0@Z ENDP ; CRegistrator<pureDeviceReset>::_REG_Compare
; Function compile flags: /Ogtpy
;	COMDAT ?Resort@?$CRegistrator@VpureDeviceReset@@@@QAEXXZ
_TEXT	SEGMENT
?Resort@?$CRegistrator@VpureDeviceReset@@@@QAEXXZ PROC	; CRegistrator<pureDeviceReset>::Resort, COMDAT
; _this$ = esi

; 96   : 		qsort	(&*R.begin(),R.size(),sizeof(_REG_INFO),_REG_Compare);

	push	OFFSET ?_REG_Compare@?$CRegistrator@VpureDeviceReset@@@@CAHPBX0@Z ; CRegistrator<pureDeviceReset>::_REG_Compare
	push	12					; 0000000cH
	mov	ecx, esi
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	push	eax
	mov	ecx, esi
	call	?begin@?$vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@stlp_std@@QAEPAU_REG_INFO@@XZ ; stlp_std::vector<_REG_INFO,xalloc<_REG_INFO> >::begin
	push	eax
	call	DWORD PTR __imp__qsort
	add	esp, 16					; 00000010H

; 97   : 		while	((R.size()) && (R[R.size()-1].Prio==REG_PRIORITY_INVALID)) R.pop_back();

	mov	ecx, esi
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	test	eax, eax
	je	SHORT $LN2@Resort@2
	npad	5
$LL3@Resort@2:
	mov	ecx, esi
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	sub	eax, 1
	push	eax
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	cmp	DWORD PTR [eax+4], -1
	jne	SHORT $LN2@Resort@2
	mov	ecx, esi
	call	?pop_back@?$vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@stlp_std@@QAEXXZ ; stlp_std::vector<_REG_INFO,xalloc<_REG_INFO> >::pop_back
	mov	ecx, esi
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	test	eax, eax
	jne	SHORT $LL3@Resort@2
$LN2@Resort@2:

; 98   : 		if (R.empty())		R.clear		();

	mov	ecx, esi
	call	?empty@?$vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@stlp_std@@QBE_NXZ ; stlp_std::vector<_REG_INFO,xalloc<_REG_INFO> >::empty
	test	al, al
	je	SHORT $LN78@Resort@2
	mov	ecx, esi
	call	?clear@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEXXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::clear
$LN78@Resort@2:

; 99   : 		changed				= false;

	and	DWORD PTR [esi+12], -3			; fffffffdH

; 100  : 	};

	ret	0
?Resort@?$CRegistrator@VpureDeviceReset@@@@QAEXXZ ENDP	; CRegistrator<pureDeviceReset>::Resort
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Process@?$CRegistrator@VpureDeviceReset@@@@QAEXP6IXPAX@Z@Z
_TEXT	SEGMENT
?Process@?$CRegistrator@VpureDeviceReset@@@@QAEXP6IXPAX@Z@Z PROC ; CRegistrator<pureDeviceReset>::Process, COMDAT
; _this$ = eax

; 81   : 	{

	push	esi
	mov	esi, eax

; 82   : 		in_process = true;

	or	DWORD PTR [esi+12], 1

; 83   :     	if (R.empty()) return;

	mov	ecx, esi
	call	?empty@?$vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@stlp_std@@QBE_NXZ ; stlp_std::vector<_REG_INFO,xalloc<_REG_INFO> >::empty
	test	al, al
	jne	SHORT $LN9@Process@2

; 84   : 		if (R[0].Prio==REG_PRIORITY_CAPTURE)	f(R[0].Object);

	push	0
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	cmp	DWORD PTR [eax+4], 2147483647		; 7fffffffH
	mov	ecx, esi
	jne	SHORT $LN7@Process@2
	push	0
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	call	edx

; 85   : 		else {

	jmp	SHORT $LN3@Process@2
$LN7@Process@2:
	push	edi

; 86   : 			for (u32 i=0; i<R.size(); i++)

	xor	edi, edi
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	test	eax, eax
	jbe	SHORT $LN71@Process@2
$LL5@Process@2:

; 87   : 				if(R[i].Prio!=REG_PRIORITY_INVALID)

	push	edi
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	cmp	DWORD PTR [eax+4], -1
	je	SHORT $LN4@Process@2

; 88   : 					f(R[i].Object);

	push	edi
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	call	edx
$LN4@Process@2:
	mov	ecx, esi
	add	edi, 1
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	cmp	edi, eax
	jb	SHORT $LL5@Process@2
$LN71@Process@2:
	pop	edi
$LN3@Process@2:

; 89   : 
; 90   : 		}
; 91   : 		if(changed)	Resort();

	test	BYTE PTR [esi+12], 2
	je	SHORT $LN1@Process@2
	call	?Resort@?$CRegistrator@VpureDeviceReset@@@@QAEXXZ ; CRegistrator<pureDeviceReset>::Resort
$LN1@Process@2:

; 92   : 		in_process = false;

	and	DWORD PTR [esi+12], -2			; fffffffeH
$LN9@Process@2:
	pop	esi

; 93   : 	};

	ret	0
?Process@?$CRegistrator@VpureDeviceReset@@@@QAEXP6IXPAX@Z@Z ENDP ; CRegistrator<pureDeviceReset>::Process
; Function compile flags: /Ogtpy
;	COMDAT ??_GCStats@@QAEPAXI@Z
_TEXT	SEGMENT
??_GCStats@@QAEPAXI@Z PROC				; CStats::`scalar deleting destructor', COMDAT
; _this$ = esi
	mov	ecx, esi
	call	??1CStats@@QAE@XZ			; CStats::~CStats
	mov	eax, esi
	ret	0
??_GCStats@@QAEPAXI@Z ENDP				; CStats::`scalar deleting destructor'
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrmemory_subst_msvc.h
_TEXT	ENDS
;	COMDAT ??R?$xr_special_free@$00VCStats@@@@QAEXAAPAVCStats@@@Z
_TEXT	SEGMENT
??R?$xr_special_free@$00VCStats@@@@QAEXAAPAVCStats@@@Z PROC ; xr_special_free<1,CStats>::operator(), COMDAT
; _ptr$ = esi

; 132  : 		void*	_real_ptr	= dynamic_cast<void*>(ptr);

	mov	eax, DWORD PTR [esi]
	push	edi
	push	eax
	call	___RTCastToVoid

; 133  : 		ptr->~T			();

	mov	ecx, DWORD PTR [esi]
	add	esp, 4
	mov	edi, eax
	call	??1CStats@@QAE@XZ			; CStats::~CStats

; 134  : 		Memory.mem_free	(_real_ptr);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	pop	edi

; 135  : 	}

	ret	0
??R?$xr_special_free@$00VCStats@@@@QAEXAAPAVCStats@@@Z ENDP ; xr_special_free<1,CStats>::operator()
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$xr_delete@VCStats@@@@YAXAAPAVCStats@@@Z
_TEXT	SEGMENT
??$xr_delete@VCStats@@@@YAXAAPAVCStats@@@Z PROC		; xr_delete<CStats>, COMDAT
; _ptr$ = esi

; 151  : 	if (ptr) 

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN1@xr_delete@30
	push	edi

; 152  : 	{
; 153  : 		xr_special_free<is_polymorphic<T>::result,T>()(ptr);

	push	eax
	call	___RTCastToVoid
	mov	ecx, DWORD PTR [esi]
	add	esp, 4
	mov	edi, eax
	call	??1CStats@@QAE@XZ			; CStats::~CStats
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z

; 154  : 		ptr = NULL;

	mov	DWORD PTR [esi], 0
	pop	edi
$LN1@xr_delete@30:

; 155  : 	}
; 156  : }

	ret	0
??$xr_delete@VCStats@@@@YAXAAPAVCStats@@@Z ENDP		; xr_delete<CStats>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?clear@?$_Impl_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@priv@stlp_std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Impl_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@priv@stlp_std@@QAEXXZ PROC ; stlp_std::priv::_Impl_vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::clear, COMDAT
; _this$ = esi

; 611  :     erase(begin(), end());

	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	cmp	eax, edx
	je	SHORT $LN10@clear@32
	mov	ecx, edx
	sub	ecx, edx
	sar	ecx, 3
	test	ecx, ecx
	jle	SHORT $LN14@clear@32
	sub	edx, eax
	push	edi
	npad	9
$LL16@clear@32:
	mov	edi, DWORD PTR [edx+eax+4]
	mov	DWORD PTR [eax+4], edi
	mov	edi, DWORD PTR [edx+eax]
	mov	DWORD PTR [eax], edi
	sub	ecx, 1
	add	eax, 8
	test	ecx, ecx
	jg	SHORT $LL16@clear@32
	pop	edi
$LN14@clear@32:
	mov	DWORD PTR [esi+4], eax
$LN10@clear@32:

; 612  :   }

	ret	0
?clear@?$_Impl_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@priv@stlp_std@@QAEXXZ ENDP ; stlp_std::priv::_Impl_vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::clear
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?clear@?$vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@stlp_std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@stlp_std@@QAEXXZ PROC ; stlp_std::vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::clear, COMDAT
; _this$ = esi

; 223  :   void clear() { _M_impl.clear(); }

	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	cmp	eax, edx
	je	SHORT $LN12@clear@33
	mov	ecx, edx
	sub	ecx, edx
	sar	ecx, 3
	test	ecx, ecx
	jle	SHORT $LN16@clear@33
	sub	edx, eax
	push	edi
	npad	9
$LL18@clear@33:
	mov	edi, DWORD PTR [edx+eax+4]
	mov	DWORD PTR [eax+4], edi
	mov	edi, DWORD PTR [edx+eax]
	mov	DWORD PTR [eax], edi
	sub	ecx, 1
	add	eax, 8
	test	ecx, ecx
	jg	SHORT $LL18@clear@33
	pop	edi
$LN16@clear@33:
	mov	DWORD PTR [esi+4], eax
$LN12@clear@33:
	ret	0
?clear@?$vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@stlp_std@@QAEXXZ ENDP ; stlp_std::vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::clear
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?clear_and_free@?$xr_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear_and_free@?$xr_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@@QAEXXZ PROC ; xr_vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::clear_and_free, COMDAT
; _this$ = esi

; 128  : 	void	clear_and_free		()									{ inherited::clear();			}

	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	cmp	eax, edx
	je	SHORT $LN14@clear_and_@9
	mov	ecx, edx
	sub	ecx, edx
	sar	ecx, 3
	test	ecx, ecx
	jle	SHORT $LN18@clear_and_@9
	sub	edx, eax
	push	edi
	npad	9
$LL20@clear_and_@9:
	mov	edi, DWORD PTR [edx+eax+4]
	mov	DWORD PTR [eax+4], edi
	mov	edi, DWORD PTR [edx+eax]
	mov	DWORD PTR [eax], edi
	sub	ecx, 1
	add	eax, 8
	test	ecx, ecx
	jg	SHORT $LL20@clear_and_@9
	pop	edi
$LN18@clear_and_@9:
	mov	DWORD PTR [esi+4], eax
$LN14@clear_and_@9:
	ret	0
?clear_and_free@?$xr_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@@QAEXXZ ENDP ; xr_vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::clear_and_free
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?clear@?$xr_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$xr_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@@QAEXXZ PROC ; xr_vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::clear, COMDAT
; _this$ = esi

; 133  : 	void	clear				()									{ clear_and_free	();			}

	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	cmp	eax, edx
	je	SHORT $LN16@clear@34
	mov	ecx, edx
	sub	ecx, edx
	sar	ecx, 3
	test	ecx, ecx
	jle	SHORT $LN20@clear@34
	sub	edx, eax
	push	edi
	npad	9
$LL22@clear@34:
	mov	edi, DWORD PTR [edx+eax+4]
	mov	DWORD PTR [eax+4], edi
	mov	edi, DWORD PTR [edx+eax]
	mov	DWORD PTR [eax], edi
	sub	ecx, 1
	add	eax, 8
	test	ecx, ecx
	jg	SHORT $LL22@clear@34
	pop	edi
$LN20@clear@34:
	mov	DWORD PTR [esi+4], eax
$LN16@clear@34:
	ret	0
?clear@?$xr_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@@QAEXXZ ENDP ; xr_vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::clear
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\pure.h
_TEXT	ENDS
;	COMDAT ?Process@?$CRegistrator@VpureScreenResolutionChanged@@@@QAEXP6IXPAX@Z@Z
_TEXT	SEGMENT
?Process@?$CRegistrator@VpureScreenResolutionChanged@@@@QAEXP6IXPAX@Z@Z PROC ; CRegistrator<pureScreenResolutionChanged>::Process, COMDAT
; _this$ = eax

; 81   : 	{

	push	esi
	mov	esi, eax

; 82   : 		in_process = true;

	or	DWORD PTR [esi+12], 1

; 83   :     	if (R.empty()) return;

	mov	ecx, esi
	call	?empty@?$vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@stlp_std@@QBE_NXZ ; stlp_std::vector<_REG_INFO,xalloc<_REG_INFO> >::empty
	test	al, al
	jne	SHORT $LN9@Process@3

; 84   : 		if (R[0].Prio==REG_PRIORITY_CAPTURE)	f(R[0].Object);

	push	0
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	cmp	DWORD PTR [eax+4], 2147483647		; 7fffffffH
	mov	ecx, esi
	jne	SHORT $LN7@Process@3
	push	0
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	call	edx

; 85   : 		else {

	jmp	SHORT $LN3@Process@3
$LN7@Process@3:
	push	edi

; 86   : 			for (u32 i=0; i<R.size(); i++)

	xor	edi, edi
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	test	eax, eax
	jbe	SHORT $LN71@Process@3
$LL5@Process@3:

; 87   : 				if(R[i].Prio!=REG_PRIORITY_INVALID)

	push	edi
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	cmp	DWORD PTR [eax+4], -1
	je	SHORT $LN4@Process@3

; 88   : 					f(R[i].Object);

	push	edi
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	call	edx
$LN4@Process@3:
	mov	ecx, esi
	add	edi, 1
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	cmp	edi, eax
	jb	SHORT $LL5@Process@3
$LN71@Process@3:
	pop	edi
$LN3@Process@3:

; 89   : 
; 90   : 		}
; 91   : 		if(changed)	Resort();

	test	BYTE PTR [esi+12], 2
	je	SHORT $LN1@Process@3
	call	?Resort@?$CRegistrator@VpureScreenResolutionChanged@@@@QAEXXZ ; CRegistrator<pureScreenResolutionChanged>::Resort
$LN1@Process@3:

; 92   : 		in_process = false;

	and	DWORD PTR [esi+12], -2			; fffffffeH
$LN9@Process@3:
	pop	esi

; 93   : 	};

	ret	0
?Process@?$CRegistrator@VpureScreenResolutionChanged@@@@QAEXP6IXPAX@Z@Z ENDP ; CRegistrator<pureScreenResolutionChanged>::Process
_TEXT	ENDS
PUBLIC	?_Destroy@CRenderDevice@@AAEXH@Z		; CRenderDevice::_Destroy
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\device_destroy.cpp
;	COMDAT ?_Destroy@CRenderDevice@@AAEXH@Z
_TEXT	SEGMENT
_bKeepTextures$ = 8					; size = 4
?_Destroy@CRenderDevice@@AAEXH@Z PROC			; CRenderDevice::_Destroy, COMDAT
; _this$ = ecx

; 10   : 	DU->OnDeviceDestroy();

	mov	eax, DWORD PTR __imp_?DU@@3PAVCDUInterface@@A
	mov	eax, DWORD PTR [eax]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+180]
	push	edi
	push	eax
	call	edx

; 11   : 
; 12   : 	// before destroy
; 13   : 	b_is_Ready					= FALSE;
; 14   : 	Statistic->OnDeviceDestroy	();

	mov	edi, DWORD PTR [esi+920]
	push	0
	mov	DWORD PTR [esi+16], 0
	call	DWORD PTR __imp_?SetLogCB@@YAP6AXPBD@ZP6AX0@Z@Z
	add	edi, 224				; 000000e0H
	push	edi
	call	??$xr_delete@VCGameFont@@@@YAXAAPAVCGameFont@@@Z ; xr_delete<CGameFont>

; 15   : 	::Render->destroy			();

	mov	eax, DWORD PTR __imp_?Render@@3PAVIRender_interface@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	add	esp, 8
	call	eax

; 16   : 	m_pRender->OnDeviceDestroy(bKeepTextures);

	mov	ecx, DWORD PTR [esi+868]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _bKeepTextures$[esp+4]
	mov	edx, DWORD PTR [edx+24]
	push	eax
	call	edx

; 17   : 	//Resources->OnDeviceDestroy	(bKeepTextures);
; 18   : 	//RCache.OnDeviceDestroy		();
; 19   : 
; 20   : 	Memory.mem_compact			();

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_compact@xrMemory@@QAEXXZ
	pop	edi
	pop	esi

; 21   : }

	ret	4
?_Destroy@CRenderDevice@@AAEXH@Z ENDP			; CRenderDevice::_Destroy
PUBLIC	?Destroy@CRenderDevice@@QAEXXZ			; CRenderDevice::Destroy
; Function compile flags: /Ogtpy
;	COMDAT ?Destroy@CRenderDevice@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CRenderDevice@@QAEXXZ PROC			; CRenderDevice::Destroy, COMDAT
; _this$ = ecx

; 23   : void CRenderDevice::Destroy	(void) {

	push	edi
	mov	edi, ecx

; 24   : 	if (!b_is_Ready)			return;

	cmp	DWORD PTR [edi+16], 0
	je	$LN188@Destroy@8
	push	esi

; 25   : 
; 26   : 	Log("Destroying Direct3D...");

	push	OFFSET ??_C@_0BH@LGOLILEE@Destroying?5Direct3D?4?4?4?$AA@
	call	DWORD PTR __imp_?Log@@YAXPBD@Z
	add	esp, 4

; 27   : 
; 28   : 	ShowCursor	(TRUE);

	push	1
	call	DWORD PTR __imp__ShowCursor@4

; 29   : 	m_pRender->ValidateHW();

	mov	ecx, DWORD PTR [edi+868]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+28]
	call	edx

; 30   : 
; 31   : 	_Destroy					(FALSE);

	push	0
	mov	ecx, edi
	call	?_Destroy@CRenderDevice@@AAEXH@Z	; CRenderDevice::_Destroy

; 32   : 
; 33   : 	// real destroy
; 34   : 	m_pRender->DestroyHW();

	mov	ecx, DWORD PTR [edi+868]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 35   : 
; 36   : 	//xr_delete					(Resources);
; 37   : 	//HW.DestroyDevice			();
; 38   : 
; 39   : 	seqRender.R.clear			();

	lea	ecx, DWORD PTR [edi+648]
	call	?clear@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEXXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::clear

; 40   : 	seqAppActivate.R.clear		();

	lea	ecx, DWORD PTR [edi+664]
	call	?clear@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEXXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::clear

; 41   : 	seqAppDeactivate.R.clear	();

	lea	ecx, DWORD PTR [edi+680]
	call	?clear@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEXXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::clear

; 42   : 	seqAppStart.R.clear			();

	lea	ecx, DWORD PTR [edi+696]
	call	?clear@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEXXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::clear

; 43   : 	seqAppEnd.R.clear			();

	lea	ecx, DWORD PTR [edi+712]
	call	?clear@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEXXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::clear

; 44   : 	seqFrame. R.clear			();

	lea	ecx, DWORD PTR [edi+728]
	call	?clear@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEXXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::clear

; 45   : 	seqFrameMT.R.clear			();

	lea	ecx, DWORD PTR [edi+876]
	call	?clear@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEXXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::clear

; 46   : 	seqDeviceReset.R.clear		();

	lea	ecx, DWORD PTR [edi+892]
	call	?clear@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEXXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::clear

; 47   : 	seqParallel.clear			();

	lea	esi, DWORD PTR [edi+908]
	call	?clear@?$xr_vector@V?$FastDelegate0@X@fastdelegate@@V?$xalloc@V?$FastDelegate0@X@fastdelegate@@@@@@QAEXXZ ; xr_vector<fastdelegate::FastDelegate0<void>,xalloc<fastdelegate::FastDelegate0<void> > >::clear

; 48   : 
; 49   : 	RenderFactory->DestroyRenderDeviceRender(m_pRender);

	mov	eax, DWORD PTR __imp_?RenderFactory@@3PAVIRenderFactory@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edi+868]
	mov	edx, DWORD PTR [edx+36]
	push	eax
	call	edx

; 50   : 	m_pRender = 0;

	mov	DWORD PTR [edi+868], 0

; 51   : 	xr_delete					(Statistic);

	mov	eax, DWORD PTR [edi+920]
	test	eax, eax
	je	SHORT $LN201@Destroy@8
	push	eax
	call	___RTCastToVoid
	mov	ecx, DWORD PTR [edi+920]
	add	esp, 4
	mov	esi, eax
	call	??1CStats@@QAE@XZ			; CStats::~CStats
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [edi+920], 0
$LN201@Destroy@8:
	pop	esi
$LN188@Destroy@8:
	pop	edi

; 52   : }

	ret	0
?Destroy@CRenderDevice@@QAEXXZ ENDP			; CRenderDevice::Destroy
PUBLIC	?Reset@CRenderDevice@@QAEX_N@Z			; CRenderDevice::Reset
; Function compile flags: /Ogtpy
;	COMDAT ?Reset@CRenderDevice@@QAEX_N@Z
_TEXT	SEGMENT
_tm_start$ = -12					; size = 4
_dwWidth_before$ = -8					; size = 4
_dwHeight_before$ = -4					; size = 4
_precache$ = 8						; size = 1
?Reset@CRenderDevice@@QAEX_N@Z PROC			; CRenderDevice::Reset, COMDAT
; _this$ = ecx

; 58   : {

	sub	esp, 12					; 0000000cH
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx

; 59   : 	u32 dwWidth_before		= dwWidth;

	mov	eax, DWORD PTR [esi+4]

; 60   : 	u32 dwHeight_before		= dwHeight;

	mov	ecx, DWORD PTR [esi+8]
	push	edi
	lea	edi, DWORD PTR [esi+4]
	lea	ebx, DWORD PTR [esi+8]

; 61   : 
; 62   : 	ShowCursor				(TRUE);

	push	1
	mov	DWORD PTR _dwWidth_before$[esp+32], eax
	mov	DWORD PTR _dwHeight_before$[esp+32], ecx
	call	DWORD PTR __imp__ShowCursor@4

; 63   : 	u32 tm_start			= TimerAsync();

	lea	ebp, DWORD PTR [esi+584]
	mov	ecx, ebp
	call	DWORD PTR __imp_?GetElapsed_ms@CTimer@@QBEIXZ

; 64   : 	if (g_pGamePersistent){
; 65   : 
; 66   : //.		g_pGamePersistent->Environment().OnDeviceDestroy();
; 67   : 	}
; 68   : 
; 69   : 	m_pRender->Reset( m_hWnd, dwWidth, dwHeight, fWidth_2, fHeight_2);

	mov	ecx, DWORD PTR [esi+868]
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+36]
	mov	DWORD PTR _tm_start$[esp+28], eax
	lea	eax, DWORD PTR [esi+864]
	push	eax
	lea	eax, DWORD PTR [esi+860]
	push	eax
	mov	eax, DWORD PTR [esi+760]
	push	ebx
	push	edi
	push	eax
	call	edx

; 70   : 
; 71   : 	if (g_pGamePersistent)

	mov	eax, DWORD PTR ?g_pGamePersistent@@3PAVIGame_Persistent@@A ; g_pGamePersistent
	test	eax, eax
	je	SHORT $LN4@Reset@2

; 72   : 	{
; 73   : //.		g_pGamePersistent->Environment().OnDeviceCreate();
; 74   : 		//bNeed_re_create_env = TRUE;
; 75   : 		g_pGamePersistent->Environment().bNeed_re_create_env = TRUE;

	mov	eax, DWORD PTR [eax+1128]
	mov	DWORD PTR [eax+36], 1
$LN4@Reset@2:

; 76   : 	}
; 77   : 	_SetupStates			();

	mov	ecx, esi
	call	?_SetupStates@CRenderDevice@@AAEXXZ	; CRenderDevice::_SetupStates

; 78   : 	if (precache)

	cmp	BYTE PTR _precache$[esp+24], 0
	je	SHORT $LN3@Reset@2

; 79   : 		PreCache			(20, true, false);

	push	0
	push	1
	push	20					; 00000014H
	mov	ecx, esi
	call	?PreCache@CRenderDevice@@QAEXI_N0@Z	; CRenderDevice::PreCache
$LN3@Reset@2:

; 80   : 	u32 tm_end				= TimerAsync();

	mov	ecx, ebp
	call	DWORD PTR __imp_?GetElapsed_ms@CTimer@@QBEIXZ

; 81   : 	Msg						("*** RESET [%d ms]",tm_end-tm_start);

	sub	eax, DWORD PTR _tm_start$[esp+28]
	push	eax
	push	OFFSET ??_C@_0BC@EPFBKKAE@?$CK?$CK?$CK?5RESET?5?$FL?$CFd?5ms?$FN?$AA@
	call	DWORD PTR __imp_?Msg@@YAXPBDZZ

; 82   : 
; 83   : 	//	TODO: Remove this! It may hide crash
; 84   : 	Memory.mem_compact();

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	esp, 8
	call	DWORD PTR __imp_?mem_compact@xrMemory@@QAEXXZ

; 85   : 
; 86   : #ifndef DEDICATED_SERVER
; 87   : 	ShowCursor	(FALSE);

	push	0
	call	DWORD PTR __imp__ShowCursor@4

; 88   : #endif
; 89   : 		
; 90   : 	seqDeviceReset.Process(rp_DeviceReset);

	lea	eax, DWORD PTR [esi+892]
	call	?Process@?$CRegistrator@VpureDeviceReset@@@@QAEXP6IXPAX@Z@Z ; CRegistrator<pureDeviceReset>::Process

; 91   : 
; 92   : 	if(dwWidth_before!=dwWidth || dwHeight_before!=dwHeight) 

	mov	ecx, DWORD PTR _dwWidth_before$[esp+28]
	cmp	ecx, DWORD PTR [edi]
	jne	SHORT $LN1@Reset@2
	mov	edx, DWORD PTR _dwHeight_before$[esp+28]
	cmp	edx, DWORD PTR [ebx]
	je	SHORT $LN2@Reset@2
$LN1@Reset@2:

; 93   : 	{
; 94   : 		seqResolutionChanged.Process(rp_ScreenResolutionChanged);

	lea	eax, DWORD PTR [esi+744]
	call	?Process@?$CRegistrator@VpureScreenResolutionChanged@@@@QAEXP6IXPAX@Z@Z ; CRegistrator<pureScreenResolutionChanged>::Process
$LN2@Reset@2:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 95   : 	}
; 96   : }

	add	esp, 12					; 0000000cH
	ret	4
?Reset@CRenderDevice@@QAEX_N@Z ENDP			; CRenderDevice::Reset
END
