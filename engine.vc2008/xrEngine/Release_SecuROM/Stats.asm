; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	D:\CLEARSKY\sources\engine\xrEngine\Stats.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?OnRender@CStats@@UAEXXZ			; CStats::OnRender
PUBLIC	??0?$FactoryPtr@VIStatsRender@@@@QAE@XZ		; FactoryPtr<IStatsRender>::FactoryPtr<IStatsRender>
PUBLIC	??0?$CRegistrator@VpureStats@@@@QAE@XZ		; CRegistrator<pureStats>::CRegistrator<pureStats>
PUBLIC	??C?$FactoryPtr@VIStatsRender@@@@QBEPAVIStatsRender@@XZ ; FactoryPtr<IStatsRender>::operator->
PUBLIC	?_REG_Compare@?$CRegistrator@VpureStats@@@@CAHPBX0@Z ; CRegistrator<pureStats>::_REG_Compare
PUBLIC	?Resort@?$CRegistrator@VpureStats@@@@QAEXXZ	; CRegistrator<pureStats>::Resort
PUBLIC	?Process@?$CRegistrator@VpureStats@@@@QAEXP6IXPAX@Z@Z ; CRegistrator<pureStats>::Process
PUBLIC	?enabled@optimizer@@QAEHXZ			; optimizer::enabled
PUBLIC	??$xr_new@VCGameFont@@$$BY09$$CBDW4<unnamed-tag>@1@@@YAPAVCGameFont@@AAY09$$CBDABW4<unnamed-tag>@0@@Z ; xr_new<CGameFont,char const [10],enum CGameFont::<unnamed-tag> >
PUBLIC	??0optimizer@@QAE@XZ				; optimizer::optimizer
PUBLIC	?g_bDisableRedText@@3HA				; g_bDisableRedText
PUBLIC	??_C@_0CG@BLCFDOLE@CAMERA?5POSITION?3?5?5?$FL?$CF3?42f?0?$CF3?42f?0?$CF@ ; `string'
PUBLIC	??_C@_0N@DHJEGJHD@?9?9?$DN?5tune?5?$DN?9?9?$AA@	; `string'
PUBLIC	??_C@_0BJ@IFJKDPI@FPS?1RFPS?3?5?5?5?5?$CF3?41f?1?$CF3?41f?$AA@ ; `string'
PUBLIC	??_C@_0BF@MNPNADDL@TPS?3?5?5?5?5?5?5?5?5?5?$CF2?42f?5M?$AA@ ; `string'
PUBLIC	??_C@_0BF@GAIFIFFN@?$CK?$CK?$CK?5ENGINE?3?5?5?$CF2?42fms?$AA@ ; `string'
PUBLIC	??_C@_0BE@PNKHDOA@Memory?3?5?5?5?5?5?5?$CF2?42fa?$AA@ ; `string'
PUBLIC	??_C@_0DN@KABIJPOM@uClients?3?5?5?5?5?$CF2?42fms?0?5?$CF2?41f?$CF?$CF?0?5c@ ; `string'
PUBLIC	??_C@_0BO@EPCLLDKC@uSheduler?3?5?5?5?$CF2?42fms?0?5?$CF2?41f?$CF?$CF?$AA@ ; `string'
PUBLIC	??_C@_0BF@CNLBCGFG@uSheduler_L?3?5?$CF2?42fms?$AA@ ; `string'
PUBLIC	??_C@_0DB@OJAPPLEC@uParticles?3?5?5Qstart?$FL?$CFd?$FN?5Qactive?$FL@ ; `string'
PUBLIC	??_C@_0DE@FDGFCPJF@spInsert?3?5?5?5?5o?$FL?$CF?42fms?0?5?$CF2?41f?$CF?$CF?$FN?0@ ; `string'
PUBLIC	??_C@_0DE@HMMIBILK@spRemove?3?5?5?5?5o?$FL?$CF?42fms?0?5?$CF2?41f?$CF?$CF?$FN?0@ ; `string'
PUBLIC	??_C@_0BO@ECLKJNIN@Physics?3?5?5?5?5?5?$CF2?42fms?0?5?$CF2?41f?$CF?$CF?$AA@ ; `string'
PUBLIC	??_C@_0BF@NNLLGFBJ@?5?5collider?3?5?5?$CF2?42fms?$AA@ ; `string'
PUBLIC	??_C@_0BJ@JBPMDCPI@?5?5solver?3?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BJ@HMJEEDJ@aiThink?3?5?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BJ@PPCHOGNC@?5?5aiRange?3?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BJ@BNMKCIFH@?5?5aiPath?3?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BJ@HMPAIJIN@?5?5aiNode?3?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BJ@MFHCPPNM@aiVision?3?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BF@JDLFIALP@?5?5Query?3?5?5?5?5?5?$CF2?42fms?$AA@ ; `string'
PUBLIC	??_C@_0BF@IDMJKLFF@?5?5RayCast?3?5?5?5?$CF2?42fms?$AA@ ; `string'
PUBLIC	??_C@_0BF@FDFMJHDC@?$CK?$CK?$CK?5RENDER?3?5?5?$CF2?42fms?$AA@ ; `string'
PUBLIC	??_C@_0BO@OPEPBDDK@R_CALC?3?5?5?5?5?5?5?$CF2?42fms?0?5?$CF2?41f?$CF?$CF?$AA@ ; `string'
PUBLIC	??_C@_0BJ@EFHBALAC@?5?5HOM?3?5?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BJ@FHBLOIPO@?5?5Skeletons?3?5?$CF2?42fms?0?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BO@FOJEBHND@R_DUMP?3?5?5?5?5?5?5?$CF2?42fms?0?5?$CF2?41f?$CF?$CF?$AA@ ; `string'
PUBLIC	??_C@_0BF@HFPLLIFJ@?5?5Wait?9L?3?5?5?5?5?$CF2?42fms?$AA@ ; `string'
PUBLIC	??_C@_0BF@EFNNDAMD@?5?5Wait?9S?3?5?5?5?5?$CF2?42fms?$AA@ ; `string'
PUBLIC	??_C@_0BF@MPFCGMOA@?5?5Skinning?3?5?5?$CF2?42fms?$AA@ ; `string'
PUBLIC	??_C@_0BF@BKKHFLPN@?5?5DT_Vis?1Cnt?3?$CF2?42fms?$AA@ ; `string'
PUBLIC	??_C@_0BF@OKBCALEJ@?5?5DT_Render?3?5?$CF2?42fms?$AA@ ; `string'
PUBLIC	??_C@_0BF@FJGGOBAO@?5?5DT_Cache?3?5?5?$CF2?42fms?$AA@ ; `string'
PUBLIC	??_C@_0CB@NKNAGCBE@?5?5Wallmarks?3?5?$CF2?42fms?0?5?$CFd?1?$CFd?5?9?5?$CFd@ ; `string'
PUBLIC	??_C@_0BF@OEPBILAK@?5?5Glows?3?5?5?5?5?5?$CF2?42fms?$AA@ ; `string'
PUBLIC	??_C@_0BJ@BKLKFPEA@?5?5Lights?3?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BJ@HGBJCLAG@?5?5RT?3?5?5?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BF@LLPEBLPO@?5?5HUD?3?5?5?5?5?5?5?5?$CF2?42fms?$AA@ ; `string'
PUBLIC	??_C@_0BF@BDKPJFNJ@?5?5P_calc?3?5?5?5?5?$CF2?42fms?$AA@ ; `string'
PUBLIC	??_C@_0BF@LAPJBDHA@?5?5S_calc?3?5?5?5?5?$CF2?42fms?$AA@ ; `string'
PUBLIC	??_C@_0BJ@PBMKFOC@?5?5S_render?3?5?5?$CF2?42fms?0?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BF@NHHJFKEL@?$CK?$CK?$CK?5SOUND?3?5?5?5?$CF2?42fms?$AA@ ; `string'
PUBLIC	??_C@_0BG@OIGJKNAK@?5?5TGT?1SIM?1E?3?5?$CFd?1?$CFd?1?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BD@BMCGFMBB@?5?5HIT?1MISS?3?5?5?$CFd?1?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BF@BGCGFBGC@Input?3?5?5?5?5?5?5?5?$CF2?42fms?$AA@ ; `string'
PUBLIC	??_C@_0CB@BPIDGGE@clRAY?3?5?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?0?5?$CF2?40fK@ ; `string'
PUBLIC	??_C@_0CB@DNLFDGGB@clBOX?3?5?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?0?5?$CF2?40fK@ ; `string'
PUBLIC	??_C@_0BJ@JGHNPLIH@clFRUSTUM?3?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BN@GEBICGEC@netClientRecv?3?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BN@DBLJNLFF@netClientSend?3?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BJ@DDFDIGEH@netServer?3?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BP@FIEGAGFH@netClientCompressor?3?5?5?5?$CF2?42fms?$AA@ ; `string'
PUBLIC	??_C@_0BP@OIBIPHKB@netServerCompressor?3?5?5?5?$CF2?42fms?$AA@ ; `string'
PUBLIC	??_C@_0BJ@HBKJBHGJ@TEST?50?3?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BJ@BEMOCMCP@TEST?51?3?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BJ@LLGHGBOF@TEST?52?3?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BJ@NOAAFKKD@TEST?53?3?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_08CFBNLEMF@qpc?$FL?$CF3d?$FN?$AA@		; `string'
PUBLIC	??_C@_06DFLLJHKA@?9xclsx?$AA@			; `string'
PUBLIC	??_C@_09CJNHOKJE@stat_font?$AA@			; `string'
PUBLIC	??_C@_0L@NIBLGGE@evaluation?$AA@		; `string'
PUBLIC	??_C@_05PGJBAKAI@line1?$AA@			; `string'
PUBLIC	??_C@_05NNLMFJML@line2?$AA@			; `string'
PUBLIC	??_C@_05MEKHGIIK@line3?$AA@			; `string'
PUBLIC	??_C@_0BH@BAJIDGHJ@CStats?3?3OnDeviceCreate?$AA@ ; `string'
PUBLIC	??_C@_0CO@MILJFDNJ@D?3?2CLEARSKY?2sources?2engine?2xrEng@ ; `string'
EXTRN	__imp_?SetLogCB@@YAP6AXPBD@ZP6AX0@Z@Z:PROC
EXTRN	__imp__div:PROC
EXTRN	__imp_?qpc_counter@CPU@@3IA:DWORD
?g_bDisableRedText@@3HA DD 01H DUP (?)			; g_bDisableRedText
;	COMDAT ?r_ps@?BI@??Show@CStats@@QAEXXZ@4MA
_BSS	SEGMENT
?r_ps@?BI@??Show@CStats@@QAEXXZ@4MA DD 01H DUP (?)	; `CStats::Show'::`24'::r_ps
_BSS	ENDS
;	COMDAT ?b_ps@?BI@??Show@CStats@@QAEXXZ@4MA
_BSS	SEGMENT
?b_ps@?BI@??Show@CStats@@QAEXXZ@4MA DD 01H DUP (?)	; `CStats::Show'::`24'::b_ps
;	COMDAT ??_C@_0CO@MILJFDNJ@D?3?2CLEARSKY?2sources?2engine?2xrEng@
CONST	SEGMENT
??_C@_0CO@MILJFDNJ@D?3?2CLEARSKY?2sources?2engine?2xrEng@ DB 'D:\CLEARSKY'
	DB	'\sources\engine\xrEngine\Stats.cpp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BAJIDGHJ@CStats?3?3OnDeviceCreate?$AA@
CONST	SEGMENT
??_C@_0BH@BAJIDGHJ@CStats?3?3OnDeviceCreate?$AA@ DB 'CStats::OnDeviceCrea'
	DB	'te', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05MEKHGIIK@line3?$AA@
CONST	SEGMENT
??_C@_05MEKHGIIK@line3?$AA@ DB 'line3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NNLMFJML@line2?$AA@
CONST	SEGMENT
??_C@_05NNLMFJML@line2?$AA@ DB 'line2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PGJBAKAI@line1?$AA@
CONST	SEGMENT
??_C@_05PGJBAKAI@line1?$AA@ DB 'line1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NIBLGGE@evaluation?$AA@
CONST	SEGMENT
??_C@_0L@NIBLGGE@evaluation?$AA@ DB 'evaluation', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09CJNHOKJE@stat_font?$AA@
CONST	SEGMENT
??_C@_09CJNHOKJE@stat_font?$AA@ DB 'stat_font', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06DFLLJHKA@?9xclsx?$AA@
CONST	SEGMENT
??_C@_06DFLLJHKA@?9xclsx?$AA@ DB '-xclsx', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CFBNLEMF@qpc?$FL?$CF3d?$FN?$AA@
CONST	SEGMENT
??_C@_08CFBNLEMF@qpc?$FL?$CF3d?$FN?$AA@ DB 'qpc[%3d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NOAAFKKD@TEST?53?3?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BJ@NOAAFKKD@TEST?53?3?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ DB 'TES'
	DB	'T 3:      %2.2fms, %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LLGHGBOF@TEST?52?3?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BJ@LLGHGBOF@TEST?52?3?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ DB 'TES'
	DB	'T 2:      %2.2fms, %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BEMOCMCP@TEST?51?3?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BJ@BEMOCMCP@TEST?51?3?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ DB 'TES'
	DB	'T 1:      %2.2fms, %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HBKJBHGJ@TEST?50?3?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BJ@HBKJBHGJ@TEST?50?3?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ DB 'TES'
	DB	'T 0:      %2.2fms, %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OIBIPHKB@netServerCompressor?3?5?5?5?$CF2?42fms?$AA@
CONST	SEGMENT
??_C@_0BP@OIBIPHKB@netServerCompressor?3?5?5?5?$CF2?42fms?$AA@ DB 'netSer'
	DB	'verCompressor:   %2.2fms', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@FIEGAGFH@netClientCompressor?3?5?5?5?$CF2?42fms?$AA@
CONST	SEGMENT
??_C@_0BP@FIEGAGFH@netClientCompressor?3?5?5?5?$CF2?42fms?$AA@ DB 'netCli'
	DB	'entCompressor:   %2.2fms', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DDFDIGEH@netServer?3?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BJ@DDFDIGEH@netServer?3?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ DB 'netServ'
	DB	'er:   %2.2fms, %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DBLJNLFF@netClientSend?3?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BN@DBLJNLFF@netClientSend?3?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ DB 'net'
	DB	'ClientSend:   %2.2fms, %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GEBICGEC@netClientRecv?3?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BN@GEBICGEC@netClientRecv?3?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ DB 'net'
	DB	'ClientRecv:   %2.2fms, %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JGHNPLIH@clFRUSTUM?3?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BJ@JGHNPLIH@clFRUSTUM?3?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ DB 'clFRUST'
	DB	'UM:   %2.2fms, %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@DNLFDGGB@clBOX?3?5?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?0?5?$CF2?40fK@
CONST	SEGMENT
??_C@_0CB@DNLFDGGB@clBOX?3?5?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?0?5?$CF2?40fK@ DB 'c'
	DB	'lBOX:       %2.2fms, %d, %2.0fK', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@BPIDGGE@clRAY?3?5?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?0?5?$CF2?40fK@
CONST	SEGMENT
??_C@_0CB@BPIDGGE@clRAY?3?5?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?0?5?$CF2?40fK@ DB 'c'
	DB	'lRAY:       %2.2fms, %d, %2.0fK', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BGCGFBGC@Input?3?5?5?5?5?5?5?5?$CF2?42fms?$AA@
CONST	SEGMENT
??_C@_0BF@BGCGFBGC@Input?3?5?5?5?5?5?5?5?$CF2?42fms?$AA@ DB 'Input:      '
	DB	' %2.2fms', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BMCGFMBB@?5?5HIT?1MISS?3?5?5?$CFd?1?$CFd?$AA@
CONST	SEGMENT
??_C@_0BD@BMCGFMBB@?5?5HIT?1MISS?3?5?5?$CFd?1?$CFd?$AA@ DB '  HIT/MISS:  '
	DB	'%d/%d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OIGJKNAK@?5?5TGT?1SIM?1E?3?5?$CFd?1?$CFd?1?$CFd?$AA@
CONST	SEGMENT
??_C@_0BG@OIGJKNAK@?5?5TGT?1SIM?1E?3?5?$CFd?1?$CFd?1?$CFd?$AA@ DB '  TGT/'
	DB	'SIM/E: %d/%d/%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NHHJFKEL@?$CK?$CK?$CK?5SOUND?3?5?5?5?$CF2?42fms?$AA@
CONST	SEGMENT
??_C@_0BF@NHHJFKEL@?$CK?$CK?$CK?5SOUND?3?5?5?5?$CF2?42fms?$AA@ DB '*** SO'
	DB	'UND:   %2.2fms', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PBMKFOC@?5?5S_render?3?5?5?$CF2?42fms?0?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BJ@PBMKFOC@?5?5S_render?3?5?5?$CF2?42fms?0?5?$CFd?$AA@ DB '  S_ren'
	DB	'der:  %2.2fms, %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LAPJBDHA@?5?5S_calc?3?5?5?5?5?$CF2?42fms?$AA@
CONST	SEGMENT
??_C@_0BF@LAPJBDHA@?5?5S_calc?3?5?5?5?5?$CF2?42fms?$AA@ DB '  S_calc:    '
	DB	'%2.2fms', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BDKPJFNJ@?5?5P_calc?3?5?5?5?5?$CF2?42fms?$AA@
CONST	SEGMENT
??_C@_0BF@BDKPJFNJ@?5?5P_calc?3?5?5?5?5?$CF2?42fms?$AA@ DB '  P_calc:    '
	DB	'%2.2fms', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LLPEBLPO@?5?5HUD?3?5?5?5?5?5?5?5?$CF2?42fms?$AA@
CONST	SEGMENT
??_C@_0BF@LLPEBLPO@?5?5HUD?3?5?5?5?5?5?5?5?$CF2?42fms?$AA@ DB '  HUD:    '
	DB	'   %2.2fms', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HGBJCLAG@?5?5RT?3?5?5?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BJ@HGBJCLAG@?5?5RT?3?5?5?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ DB ' '
	DB	' RT:        %2.2fms, %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BKLKFPEA@?5?5Lights?3?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BJ@BKLKFPEA@?5?5Lights?3?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ DB '  Li'
	DB	'ghts:    %2.2fms, %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OEPBILAK@?5?5Glows?3?5?5?5?5?5?$CF2?42fms?$AA@
CONST	SEGMENT
??_C@_0BF@OEPBILAK@?5?5Glows?3?5?5?5?5?5?$CF2?42fms?$AA@ DB '  Glows:    '
	DB	' %2.2fms', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NKNAGCBE@?5?5Wallmarks?3?5?$CF2?42fms?0?5?$CFd?1?$CFd?5?9?5?$CFd@
CONST	SEGMENT
??_C@_0CB@NKNAGCBE@?5?5Wallmarks?3?5?$CF2?42fms?0?5?$CFd?1?$CFd?5?9?5?$CFd@ DB ' '
	DB	' Wallmarks: %2.2fms, %d/%d - %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FJGGOBAO@?5?5DT_Cache?3?5?5?$CF2?42fms?$AA@
CONST	SEGMENT
??_C@_0BF@FJGGOBAO@?5?5DT_Cache?3?5?5?$CF2?42fms?$AA@ DB '  DT_Cache:  %2'
	DB	'.2fms', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OKBCALEJ@?5?5DT_Render?3?5?$CF2?42fms?$AA@
CONST	SEGMENT
??_C@_0BF@OKBCALEJ@?5?5DT_Render?3?5?$CF2?42fms?$AA@ DB '  DT_Render: %2.'
	DB	'2fms', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BKKHFLPN@?5?5DT_Vis?1Cnt?3?$CF2?42fms?$AA@
CONST	SEGMENT
??_C@_0BF@BKKHFLPN@?5?5DT_Vis?1Cnt?3?$CF2?42fms?$AA@ DB '  DT_Vis/Cnt:%2.'
	DB	'2fms', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MPFCGMOA@?5?5Skinning?3?5?5?$CF2?42fms?$AA@
CONST	SEGMENT
??_C@_0BF@MPFCGMOA@?5?5Skinning?3?5?5?$CF2?42fms?$AA@ DB '  Skinning:  %2'
	DB	'.2fms', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EFNNDAMD@?5?5Wait?9S?3?5?5?5?5?$CF2?42fms?$AA@
CONST	SEGMENT
??_C@_0BF@EFNNDAMD@?5?5Wait?9S?3?5?5?5?5?$CF2?42fms?$AA@ DB '  Wait-S:   '
	DB	' %2.2fms', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HFPLLIFJ@?5?5Wait?9L?3?5?5?5?5?$CF2?42fms?$AA@
CONST	SEGMENT
??_C@_0BF@HFPLLIFJ@?5?5Wait?9L?3?5?5?5?5?$CF2?42fms?$AA@ DB '  Wait-L:   '
	DB	' %2.2fms', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@FOJEBHND@R_DUMP?3?5?5?5?5?5?5?$CF2?42fms?0?5?$CF2?41f?$CF?$CF?$AA@
CONST	SEGMENT
??_C@_0BO@FOJEBHND@R_DUMP?3?5?5?5?5?5?5?$CF2?42fms?0?5?$CF2?41f?$CF?$CF?$AA@ DB 'R'
	DB	'_DUMP:      %2.2fms, %2.1f%%', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FHBLOIPO@?5?5Skeletons?3?5?$CF2?42fms?0?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BJ@FHBLOIPO@?5?5Skeletons?3?5?$CF2?42fms?0?5?$CFd?$AA@ DB '  Skele'
	DB	'tons: %2.2fms, %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EFHBALAC@?5?5HOM?3?5?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BJ@EFHBALAC@?5?5HOM?3?5?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ DB ' '
	DB	' HOM:       %2.2fms, %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@OPEPBDDK@R_CALC?3?5?5?5?5?5?5?$CF2?42fms?0?5?$CF2?41f?$CF?$CF?$AA@
CONST	SEGMENT
??_C@_0BO@OPEPBDDK@R_CALC?3?5?5?5?5?5?5?$CF2?42fms?0?5?$CF2?41f?$CF?$CF?$AA@ DB 'R'
	DB	'_CALC:      %2.2fms, %2.1f%%', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FDFMJHDC@?$CK?$CK?$CK?5RENDER?3?5?5?$CF2?42fms?$AA@
CONST	SEGMENT
??_C@_0BF@FDFMJHDC@?$CK?$CK?$CK?5RENDER?3?5?5?$CF2?42fms?$AA@ DB '*** REN'
	DB	'DER:  %2.2fms', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IDMJKLFF@?5?5RayCast?3?5?5?5?$CF2?42fms?$AA@
CONST	SEGMENT
??_C@_0BF@IDMJKLFF@?5?5RayCast?3?5?5?5?$CF2?42fms?$AA@ DB '  RayCast:   %'
	DB	'2.2fms', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JDLFIALP@?5?5Query?3?5?5?5?5?5?$CF2?42fms?$AA@
CONST	SEGMENT
??_C@_0BF@JDLFIALP@?5?5Query?3?5?5?5?5?5?$CF2?42fms?$AA@ DB '  Query:    '
	DB	' %2.2fms', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MFHCPPNM@aiVision?3?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BJ@MFHCPPNM@aiVision?3?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ DB 'aiVisi'
	DB	'on:    %2.2fms, %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HMPAIJIN@?5?5aiNode?3?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BJ@HMPAIJIN@?5?5aiNode?3?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ DB '  ai'
	DB	'Node:    %2.2fms, %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BNMKCIFH@?5?5aiPath?3?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BJ@BNMKCIFH@?5?5aiPath?3?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ DB '  ai'
	DB	'Path:    %2.2fms, %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PPCHOGNC@?5?5aiRange?3?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BJ@PPCHOGNC@?5?5aiRange?3?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ DB '  aiR'
	DB	'ange:   %2.2fms, %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HMJEEDJ@aiThink?3?5?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BJ@HMJEEDJ@aiThink?3?5?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ DB 'aiThin'
	DB	'k:     %2.2fms, %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JBPMDCPI@?5?5solver?3?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BJ@JBPMDCPI@?5?5solver?3?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@ DB '  so'
	DB	'lver:    %2.2fms, %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NNLLGFBJ@?5?5collider?3?5?5?$CF2?42fms?$AA@
CONST	SEGMENT
??_C@_0BF@NNLLGFBJ@?5?5collider?3?5?5?$CF2?42fms?$AA@ DB '  collider:  %2'
	DB	'.2fms', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@ECLKJNIN@Physics?3?5?5?5?5?5?$CF2?42fms?0?5?$CF2?41f?$CF?$CF?$AA@
CONST	SEGMENT
??_C@_0BO@ECLKJNIN@Physics?3?5?5?5?5?5?$CF2?42fms?0?5?$CF2?41f?$CF?$CF?$AA@ DB 'P'
	DB	'hysics:     %2.2fms, %2.1f%%', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@HMMIBILK@spRemove?3?5?5?5?5o?$FL?$CF?42fms?0?5?$CF2?41f?$CF?$CF?$FN?0@
CONST	SEGMENT
??_C@_0DE@HMMIBILK@spRemove?3?5?5?5?5o?$FL?$CF?42fms?0?5?$CF2?41f?$CF?$CF?$FN?0@ DB 's'
	DB	'pRemove:    o[%.2fms, %2.1f%%], p[%.2fms, %2.1f%%]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@FDGFCPJF@spInsert?3?5?5?5?5o?$FL?$CF?42fms?0?5?$CF2?41f?$CF?$CF?$FN?0@
CONST	SEGMENT
??_C@_0DE@FDGFCPJF@spInsert?3?5?5?5?5o?$FL?$CF?42fms?0?5?$CF2?41f?$CF?$CF?$FN?0@ DB 's'
	DB	'pInsert:    o[%.2fms, %2.1f%%], p[%.2fms, %2.1f%%]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@OJAPPLEC@uParticles?3?5?5Qstart?$FL?$CFd?$FN?5Qactive?$FL@
CONST	SEGMENT
??_C@_0DB@OJAPPLEC@uParticles?3?5?5Qstart?$FL?$CFd?$FN?5Qactive?$FL@ DB 'u'
	DB	'Particles:  Qstart[%d] Qactive[%d] Qdestroy[%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CNLBCGFG@uSheduler_L?3?5?$CF2?42fms?$AA@
CONST	SEGMENT
??_C@_0BF@CNLBCGFG@uSheduler_L?3?5?$CF2?42fms?$AA@ DB 'uSheduler_L: %2.2f'
	DB	'ms', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EPCLLDKC@uSheduler?3?5?5?5?$CF2?42fms?0?5?$CF2?41f?$CF?$CF?$AA@
CONST	SEGMENT
??_C@_0BO@EPCLLDKC@uSheduler?3?5?5?5?$CF2?42fms?0?5?$CF2?41f?$CF?$CF?$AA@ DB 'u'
	DB	'Sheduler:   %2.2fms, %2.1f%%', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@KABIJPOM@uClients?3?5?5?5?5?$CF2?42fms?0?5?$CF2?41f?$CF?$CF?0?5c@
CONST	SEGMENT
??_C@_0DN@KABIJPOM@uClients?3?5?5?5?5?$CF2?42fms?0?5?$CF2?41f?$CF?$CF?0?5c@ DB 'u'
	DB	'Clients:    %2.2fms, %2.1f%%, crow(%d)/active(%d)/total(%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PNKHDOA@Memory?3?5?5?5?5?5?5?$CF2?42fa?$AA@
CONST	SEGMENT
??_C@_0BE@PNKHDOA@Memory?3?5?5?5?5?5?5?$CF2?42fa?$AA@ DB 'Memory:      %2'
	DB	'.2fa', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GAIFIFFN@?$CK?$CK?$CK?5ENGINE?3?5?5?$CF2?42fms?$AA@
CONST	SEGMENT
??_C@_0BF@GAIFIFFN@?$CK?$CK?$CK?5ENGINE?3?5?5?$CF2?42fms?$AA@ DB '*** ENG'
	DB	'INE:  %2.2fms', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MNPNADDL@TPS?3?5?5?5?5?5?5?5?5?5?$CF2?42f?5M?$AA@
CONST	SEGMENT
??_C@_0BF@MNPNADDL@TPS?3?5?5?5?5?5?5?5?5?5?$CF2?42f?5M?$AA@ DB 'TPS:     '
	DB	'    %2.2f M', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IFJKDPI@FPS?1RFPS?3?5?5?5?5?$CF3?41f?1?$CF3?41f?$AA@
CONST	SEGMENT
??_C@_0BJ@IFJKDPI@FPS?1RFPS?3?5?5?5?5?$CF3?41f?1?$CF3?41f?$AA@ DB 'FPS/RF'
	DB	'PS:    %3.1f/%3.1f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DHJEGJHD@?9?9?$DN?5tune?5?$DN?9?9?$AA@
CONST	SEGMENT
??_C@_0N@DHJEGJHD@?9?9?$DN?5tune?5?$DN?9?9?$AA@ DB '--= tune =--', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@BLCFDOLE@CAMERA?5POSITION?3?5?5?$FL?$CF3?42f?0?$CF3?42f?0?$CF@
CONST	SEGMENT
??_C@_0CG@BLCFDOLE@CAMERA?5POSITION?3?5?5?$FL?$CF3?42f?0?$CF3?42f?0?$CF@ DB 'C'
	DB	'AMERA POSITION:  [%3.2f,%3.2f,%3.2f]', 00H	; `string'
_EPS_S	DD	033d6bf95r			; 1e-007
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\pure.h
;	COMDAT ?_REG_Compare@?$CRegistrator@VpureStats@@@@CAHPBX0@Z
_TEXT	SEGMENT
_e1$ = 8						; size = 4
_e2$ = 12						; size = 4
?_REG_Compare@?$CRegistrator@VpureStats@@@@CAHPBX0@Z PROC ; CRegistrator<pureStats>::_REG_Compare, COMDAT

; 42   : 	_REG_INFO *p1 = (_REG_INFO *)e1;
; 43   : 	_REG_INFO *p2 = (_REG_INFO *)e2;
; 44   : 	return (p2->Prio - p1->Prio);

	mov	eax, DWORD PTR _e2$[esp-4]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _e1$[esp-4]
	sub	eax, DWORD PTR [ecx+4]

; 45   : }

	ret	0
?_REG_Compare@?$CRegistrator@VpureStats@@@@CAHPBX0@Z ENDP ; CRegistrator<pureStats>::_REG_Compare
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\include\xrrender\factoryptr.h
_TEXT	ENDS
;	COMDAT ??C?$FactoryPtr@VIStatsRender@@@@QBEPAVIStatsRender@@XZ
_TEXT	SEGMENT
??C?$FactoryPtr@VIStatsRender@@@@QBEPAVIStatsRender@@XZ PROC ; FactoryPtr<IStatsRender>::operator->, COMDAT
; _this$ = eax

; 40   : 	T* operator->() const {return m_pObject;}

	mov	eax, DWORD PTR [eax]
	ret	0
??C?$FactoryPtr@VIStatsRender@@@@QBEPAVIStatsRender@@XZ ENDP ; FactoryPtr<IStatsRender>::operator->
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\stats.cpp
_TEXT	ENDS
;	COMDAT ?OnRender@CStats@@UAEXXZ
_TEXT	SEGMENT
?OnRender@CStats@@UAEXXZ PROC				; CStats::OnRender, COMDAT
; _this$ = ecx

; 480  : #ifdef DEBUG
; 481  : 	if (g_stats_flags.is(st_sound)){
; 482  : 		CSound_stats_ext				snd_stat_ext;
; 483  : 		::Sound->statistic				(0,&snd_stat_ext);
; 484  : 		CSound_stats_ext::item_vec_it	_I = snd_stat_ext.items.begin();
; 485  : 		CSound_stats_ext::item_vec_it	_E = snd_stat_ext.items.end();
; 486  : 		for (;_I!=_E;_I++){
; 487  : 			const CSound_stats_ext::SItem& item = *_I;
; 488  : 			if (item._3D)
; 489  : 			{
; 490  : 				m_pRender->SetDrawParams(&*Device.m_pRender);
; 491  : 				//RCache.set_xform_world(Fidentity);
; 492  : 				//RCache.set_Shader		(Device.m_SelectionShader);
; 493  : 				//RCache.set_c			("tfactor",1,1,1,1);
; 494  : 				DU->DrawCross			(item.params.position, 0.5f, 0xFF0000FF, true );
; 495  : 				if (g_stats_flags.is(st_sound_min_dist))
; 496  : 					DU->DrawSphere		(Fidentity, item.params.position, item.params.min_distance, 0x400000FF,	0xFF0000FF, true, true);
; 497  : 				if (g_stats_flags.is(st_sound_max_dist))
; 498  : 					DU->DrawSphere		(Fidentity, item.params.position, item.params.max_distance, 0x4000FF00,	0xFF008000, true, true);
; 499  : 				
; 500  : 				xr_string out_txt		= (out_txt.size() && g_stats_flags.is(st_sound_info_name)) ? item.name.c_str():"";
; 501  : 
; 502  : 				if (item.game_object)
; 503  : 				{
; 504  : 					if (g_stats_flags.is(st_sound_ai_dist))
; 505  : 						DU->DrawSphere	(Fidentity, item.params.position, item.params.max_ai_distance, 0x80FF0000,0xFF800000,true,true);
; 506  : 					if (g_stats_flags.is(st_sound_info_object)){
; 507  : 						out_txt			+= "  (";
; 508  : 						out_txt			+= item.game_object->cNameSect().c_str();
; 509  : 						out_txt			+= ")";
; 510  : 					}
; 511  : 				}
; 512  : 				if (g_stats_flags.is_any(st_sound_info_name|st_sound_info_object) && item.name.size())
; 513  : 					DU->OutText			(item.params.position, out_txt.c_str(),0xFFFFFFFF,0xFF000000);
; 514  : 			}
; 515  : 		}
; 516  : 	}
; 517  : #endif
; 518  : }

	ret	0
?OnRender@CStats@@UAEXXZ ENDP				; CStats::OnRender
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?enabled@optimizer@@QAEHXZ
_TEXT	SEGMENT
?enabled@optimizer@@QAEHXZ PROC				; optimizer::enabled, COMDAT

; 30   : 	BOOL	enabled	()	{ return enabled_;	}

	mov	eax, DWORD PTR _vtune+4
	ret	0
?enabled@optimizer@@QAEHXZ ENDP				; optimizer::enabled
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0optimizer@@QAE@XZ
_TEXT	SEGMENT
??0optimizer@@QAE@XZ PROC				; optimizer::optimizer, COMDAT

; 23   : 		average_	= 30.f;

	movss	xmm0, DWORD PTR _SAMPLE_FPS
	movss	DWORD PTR _vtune, xmm0

; 24   : //		enabled_	= TRUE;
; 25   : //		disable		();
; 26   : 		// because Engine is not exist
; 27   : 		enabled_	= FALSE;

	mov	DWORD PTR _vtune+4, 0

; 28   : 	}

	mov	eax, OFFSET _vtune
	ret	0
??0optimizer@@QAE@XZ ENDP				; optimizer::optimizer
_TEXT	ENDS
PUBLIC	?rp_Stats@@YIXPAX@Z				; rp_Stats
; Function compile flags: /Ogtpy
;	COMDAT ?rp_Stats@@YIXPAX@Z
_TEXT	SEGMENT
?rp_Stats@@YIXPAX@Z PROC				; rp_Stats, COMDAT
; _p$ = ecx

; 16   : DECLARE_RP(Stats);

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	jmp	edx
?rp_Stats@@YIXPAX@Z ENDP				; rp_Stats
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\include\xrrender\factoryptr.h
;	COMDAT ??0?$FactoryPtr@VIStatsRender@@@@QAE@XZ
_TEXT	SEGMENT
??0?$FactoryPtr@VIStatsRender@@@@QAE@XZ PROC		; FactoryPtr<IStatsRender>::FactoryPtr<IStatsRender>, COMDAT
; _this$ = esi

; 24   : 	FactoryPtr() { CreateObject();}

	mov	eax, DWORD PTR __imp_?RenderFactory@@3PAVIRenderFactory@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+56]
	call	eax
	mov	DWORD PTR [esi], eax
	mov	eax, esi
	ret	0
??0?$FactoryPtr@VIStatsRender@@@@QAE@XZ ENDP		; FactoryPtr<IStatsRender>::FactoryPtr<IStatsRender>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\pure.h
;	COMDAT ?Resort@?$CRegistrator@VpureStats@@@@QAEXXZ
_TEXT	SEGMENT
?Resort@?$CRegistrator@VpureStats@@@@QAEXXZ PROC	; CRegistrator<pureStats>::Resort, COMDAT
; _this$ = esi

; 96   : 		qsort	(&*R.begin(),R.size(),sizeof(_REG_INFO),_REG_Compare);

	push	OFFSET ?_REG_Compare@?$CRegistrator@VpureStats@@@@CAHPBX0@Z ; CRegistrator<pureStats>::_REG_Compare
	push	12					; 0000000cH
	mov	ecx, esi
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	push	eax
	mov	ecx, esi
	call	?begin@?$vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@stlp_std@@QAEPAU_REG_INFO@@XZ ; stlp_std::vector<_REG_INFO,xalloc<_REG_INFO> >::begin
	push	eax
	call	DWORD PTR __imp__qsort
	add	esp, 16					; 00000010H

; 97   : 		while	((R.size()) && (R[R.size()-1].Prio==REG_PRIORITY_INVALID)) R.pop_back();

	mov	ecx, esi
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	test	eax, eax
	je	SHORT $LN2@Resort
	npad	5
$LL3@Resort:
	mov	ecx, esi
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	sub	eax, 1
	push	eax
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	cmp	DWORD PTR [eax+4], -1
	jne	SHORT $LN2@Resort
	mov	ecx, esi
	call	?pop_back@?$vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@stlp_std@@QAEXXZ ; stlp_std::vector<_REG_INFO,xalloc<_REG_INFO> >::pop_back
	mov	ecx, esi
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	test	eax, eax
	jne	SHORT $LL3@Resort
$LN2@Resort:

; 98   : 		if (R.empty())		R.clear		();

	mov	ecx, esi
	call	?empty@?$vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@stlp_std@@QBE_NXZ ; stlp_std::vector<_REG_INFO,xalloc<_REG_INFO> >::empty
	test	al, al
	je	SHORT $LN78@Resort
	mov	ecx, esi
	call	?clear@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEXXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::clear
$LN78@Resort:

; 99   : 		changed				= false;

	and	DWORD PTR [esi+12], -3			; fffffffdH

; 100  : 	};

	ret	0
?Resort@?$CRegistrator@VpureStats@@@@QAEXXZ ENDP	; CRegistrator<pureStats>::Resort
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Process@?$CRegistrator@VpureStats@@@@QAEXP6IXPAX@Z@Z
_TEXT	SEGMENT
?Process@?$CRegistrator@VpureStats@@@@QAEXP6IXPAX@Z@Z PROC ; CRegistrator<pureStats>::Process, COMDAT
; _this$ = eax

; 81   : 	{

	push	esi
	mov	esi, eax

; 82   : 		in_process = true;

	or	DWORD PTR [esi+12], 1

; 83   :     	if (R.empty()) return;

	mov	ecx, esi
	call	?empty@?$vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@stlp_std@@QBE_NXZ ; stlp_std::vector<_REG_INFO,xalloc<_REG_INFO> >::empty
	test	al, al
	jne	SHORT $LN9@Process

; 84   : 		if (R[0].Prio==REG_PRIORITY_CAPTURE)	f(R[0].Object);

	push	0
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	cmp	DWORD PTR [eax+4], 2147483647		; 7fffffffH
	mov	ecx, esi
	jne	SHORT $LN7@Process
	push	0
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	call	edx

; 85   : 		else {

	jmp	SHORT $LN3@Process
$LN7@Process:
	push	edi

; 86   : 			for (u32 i=0; i<R.size(); i++)

	xor	edi, edi
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	test	eax, eax
	jbe	SHORT $LN71@Process
$LL5@Process:

; 87   : 				if(R[i].Prio!=REG_PRIORITY_INVALID)

	push	edi
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	cmp	DWORD PTR [eax+4], -1
	je	SHORT $LN4@Process

; 88   : 					f(R[i].Object);

	push	edi
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	call	edx
$LN4@Process:
	mov	ecx, esi
	add	edi, 1
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	cmp	edi, eax
	jb	SHORT $LL5@Process
$LN71@Process:
	pop	edi
$LN3@Process:

; 89   : 
; 90   : 		}
; 91   : 		if(changed)	Resort();

	test	BYTE PTR [esi+12], 2
	je	SHORT $LN1@Process
	call	?Resort@?$CRegistrator@VpureStats@@@@QAEXXZ ; CRegistrator<pureStats>::Resort
$LN1@Process:

; 92   : 		in_process = false;

	and	DWORD PTR [esi+12], -2			; fffffffeH
$LN9@Process:
	pop	esi

; 93   : 	};

	ret	0
?Process@?$CRegistrator@VpureStats@@@@QAEXP6IXPAX@Z@Z ENDP ; CRegistrator<pureStats>::Process
; Function compile flags: /Ogtpy
;	COMDAT ??0?$CRegistrator@VpureStats@@@@QAE@XZ
_TEXT	SEGMENT
??0?$CRegistrator@VpureStats@@@@QAE@XZ PROC		; CRegistrator<pureStats>::CRegistrator<pureStats>, COMDAT
; _this$ = eax

; 53   : 	CRegistrator()			{ in_process=false; changed=false;}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	and	DWORD PTR [eax+12], -4			; fffffffcH
	ret	0
??0?$CRegistrator@VpureStats@@@@QAE@XZ ENDP		; CRegistrator<pureStats>::CRegistrator<pureStats>
_TEXT	ENDS
PUBLIC	?OnDeviceDestroy@CStats@@QAEXXZ			; CStats::OnDeviceDestroy
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\stats.cpp
;	COMDAT ?OnDeviceDestroy@CStats@@QAEXXZ
_TEXT	SEGMENT
?OnDeviceDestroy@CStats@@QAEXXZ PROC			; CStats::OnDeviceDestroy, COMDAT
; _this$ = ecx

; 473  : {

	push	esi

; 474  : 	SetLogCB(0);

	push	0
	mov	esi, ecx
	call	DWORD PTR __imp_?SetLogCB@@YAP6AXPBD@ZP6AX0@Z@Z

; 475  : 	xr_delete	(pFont);

	add	esi, 224				; 000000e0H
	push	esi
	call	??$xr_delete@VCGameFont@@@@YAXAAPAVCGameFont@@@Z ; xr_delete<CGameFont>
	add	esp, 8
	pop	esi

; 476  : }

	ret	0
?OnDeviceDestroy@CStats@@QAEXXZ ENDP			; CStats::OnDeviceDestroy
_TEXT	ENDS
PUBLIC	??1CStats@@QAE@XZ				; CStats::~CStats
; Function compile flags: /Ogtpy
;	COMDAT ??1CStats@@QAE@XZ
_TEXT	SEGMENT
??1CStats@@QAE@XZ PROC					; CStats::~CStats, COMDAT
; _this$ = ecx

; 61   : {

	push	ebx
	push	esi
	mov	ebx, ecx
	push	edi

; 62   : 	Device.seqRender.Remove		(this);

	mov	eax, OFFSET ?Device@@3VCRenderDevice@@A+648
	mov	DWORD PTR [ebx], OFFSET ??_7CStats@@6B@
	call	?Remove@?$CRegistrator@VpureRender@@@@QAEXPAVpureRender@@@Z ; CRegistrator<pureRender>::Remove

; 63   : 	xr_delete		(pFont);

	lea	eax, DWORD PTR [ebx+224]
	push	eax
	call	??$xr_delete@VCGameFont@@@@YAXAAPAVCGameFont@@@Z ; xr_delete<CGameFont>

; 64   : }

	mov	ecx, DWORD PTR __imp_?RenderFactory@@3PAVIRenderFactory@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ebx+3528]
	mov	edx, DWORD PTR [edx+60]
	add	esp, 4
	push	eax
	call	edx
	mov	edi, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	xor	esi, esi
	mov	DWORD PTR [ebx+3528], esi
	mov	eax, DWORD PTR [ebx+3512]
	cmp	eax, esi
	je	SHORT $LN46@CStats
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
$LN46@CStats:
	mov	ecx, DWORD PTR [ebx+3504]
	mov	eax, DWORD PTR [ebx+3500]
	push	ecx
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range@V?$reverse_iterator@PAVshared_str@@@stlp_std@@Vshared_str@@@stlp_std@@YAXV?$reverse_iterator@PAVshared_str@@@0@0PAVshared_str@@@Z ; stlp_std::__destroy_range<stlp_std::reverse_iterator<shared_str *>,shared_str>
	mov	eax, DWORD PTR [ebx+3500]
	add	esp, 8
	cmp	eax, esi
	je	SHORT $LN78@CStats
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
$LN78@CStats:
	mov	eax, DWORD PTR [ebx+3496]
	cmp	eax, esi
	je	SHORT $LN83@CStats
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [ebx+3496]
	cmp	DWORD PTR [eax], esi
	jne	SHORT $LN83@CStats
	mov	DWORD PTR [ebx+3496], esi
$LN83@CStats:
	mov	eax, DWORD PTR [ebx+3492]
	cmp	eax, esi
	je	SHORT $LN89@CStats
	add	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR [ebx+3492]
	cmp	DWORD PTR [ecx], esi
	jne	SHORT $LN89@CStats
	mov	DWORD PTR [ebx+3492], esi
$LN89@CStats:
	mov	eax, DWORD PTR [ebx+3488]
	cmp	eax, esi
	je	SHORT $LN95@CStats
	add	DWORD PTR [eax], -1
	mov	edx, DWORD PTR [ebx+3488]
	cmp	DWORD PTR [edx], esi
	jne	SHORT $LN95@CStats
	mov	DWORD PTR [ebx+3488], esi
$LN95@CStats:
	pop	edi
	pop	esi
	pop	ebx
	ret	0
??1CStats@@QAE@XZ ENDP					; CStats::~CStats
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrmemory_subst_msvc.h
;	COMDAT ??$xr_new@VCGameFont@@$$BY09$$CBDW4<unnamed-tag>@1@@@YAPAVCGameFont@@AAY09$$CBDABW4<unnamed-tag>@0@@Z
_TEXT	SEGMENT
_p2$ = 8						; size = 4
??$xr_new@VCGameFont@@$$BY09$$CBDW4<unnamed-tag>@1@@@YAPAVCGameFont@@AAY09$$CBDABW4<unnamed-tag>@0@@Z PROC ; xr_new<CGameFont,char const [10],enum CGameFont::<unnamed-tag> >, COMDAT

; 80   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	88					; 00000058H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 81   : 	return new (ptr) T(p1,p2);

	test	eax, eax
	je	SHORT $LN3@xr_new@25
	mov	ecx, DWORD PTR _p2$[esp-4]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET ??_C@_09CJNHOKJE@stat_font?$AA@
	mov	ecx, eax
	call	??0CGameFont@@QAE@PBDI@Z		; CGameFont::CGameFont

; 82   : }

	ret	0
$LN3@xr_new@25:

; 81   : 	return new (ptr) T(p1,p2);

	xor	eax, eax

; 82   : }

	ret	0
??$xr_new@VCGameFont@@$$BY09$$CBDW4<unnamed-tag>@1@@@YAPAVCGameFont@@AAY09$$CBDABW4<unnamed-tag>@0@@Z ENDP ; xr_new<CGameFont,char const [10],enum CGameFont::<unnamed-tag> >
_TEXT	ENDS
PUBLIC	?OnDeviceCreate@CStats@@QAEXXZ			; CStats::OnDeviceCreate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\stats.cpp
;	COMDAT ?OnDeviceCreate@CStats@@QAEXXZ
_TEXT	SEGMENT
$T415842 = -4						; size = 4
$T415841 = -4						; size = 4
$T415840 = -4						; size = 4
?OnDeviceCreate@CStats@@QAEXXZ PROC			; CStats::OnDeviceCreate, COMDAT
; _this$ = ecx

; 448  : {

	push	ecx

; 449  : 	g_bDisableRedText				= strstr(Core.Params,"-xclsx")?TRUE:FALSE;

	mov	eax, DWORD PTR __imp_?Core@@3VxrCore@@A
	push	esi
	add	eax, 1232				; 000004d0H
	push	OFFSET ??_C@_06DFLLJHKA@?9xclsx?$AA@
	push	eax
	mov	esi, ecx
	call	DWORD PTR __imp__strstr

; 450  : 
; 451  : //	if (!strstr(Core.Params, "-dedicated"))
; 452  : #ifndef DEDICATED_SERVER
; 453  : 	pFont	= xr_new<CGameFont>		("stat_font", CGameFont::fsDeviceIndependent);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	esp, 8
	neg	eax
	sbb	eax, eax
	neg	eax
	push	88					; 00000058H
	mov	DWORD PTR ?g_bDisableRedText@@3HA, eax	; g_bDisableRedText
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	test	eax, eax
	je	SHORT $LN9@OnDeviceCr@3
	push	2
	push	OFFSET ??_C@_09CJNHOKJE@stat_font?$AA@
	mov	ecx, eax
	call	??0CGameFont@@QAE@PBDI@Z		; CGameFont::CGameFont
	jmp	SHORT $LN10@OnDeviceCr@3
$LN9@OnDeviceCr@3:
	xor	eax, eax
$LN10@OnDeviceCr@3:
	mov	DWORD PTR [esi+224], eax

; 454  : #endif
; 455  : 	
; 456  : 	if(!pSettings->section_exist("evaluation")
; 457  : 		||!pSettings->line_exist("evaluation","line1")
; 458  : 		||!pSettings->line_exist("evaluation","line2")
; 459  : 		||!pSettings->line_exist("evaluation","line3") )

	mov	eax, DWORD PTR __imp_?pSettings@@3PBVCInifile@@B
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	OFFSET ??_C@_0L@NIBLGGE@evaluation?$AA@
	call	DWORD PTR __imp_?section_exist@CInifile@@QBEHPBD@Z
	test	eax, eax
	je	SHORT $LN1@OnDeviceCr@3
	mov	ecx, DWORD PTR __imp_?pSettings@@3PBVCInifile@@B
	mov	ecx, DWORD PTR [ecx]
	mov	edi, DWORD PTR __imp_?line_exist@CInifile@@QBEHPBD0@Z
	push	OFFSET ??_C@_05PGJBAKAI@line1?$AA@
	push	OFFSET ??_C@_0L@NIBLGGE@evaluation?$AA@
	call	edi
	test	eax, eax
	je	SHORT $LN1@OnDeviceCr@3
	mov	edx, DWORD PTR __imp_?pSettings@@3PBVCInifile@@B
	mov	ecx, DWORD PTR [edx]
	push	OFFSET ??_C@_05NNLMFJML@line2?$AA@
	push	OFFSET ??_C@_0L@NIBLGGE@evaluation?$AA@
	call	edi
	test	eax, eax
	je	SHORT $LN1@OnDeviceCr@3
	mov	eax, DWORD PTR __imp_?pSettings@@3PBVCInifile@@B
	mov	ecx, DWORD PTR [eax]
	push	OFFSET ??_C@_05MEKHGIIK@line3?$AA@
	push	OFFSET ??_C@_0L@NIBLGGE@evaluation?$AA@
	call	edi
	test	eax, eax
	jne	SHORT $LN2@OnDeviceCr@3
$LN1@OnDeviceCr@3:

; 460  : 		FATAL	("");

	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	OFFSET ??_C@_0BH@BAJIDGHJ@CStats?3?3OnDeviceCreate?$AA@
	push	460					; 000001ccH
	push	OFFSET ??_C@_0CO@MILJFDNJ@D?3?2CLEARSKY?2sources?2engine?2xrEng@
	push	ecx
	call	DWORD PTR __imp_?fatal@xrDebug@@QAAXPBDH00ZZ
	add	esp, 20					; 00000014H
$LN2@OnDeviceCr@3:

; 461  : 
; 462  : 	eval_line_1 = pSettings->r_string_wb("evaluation","line1");

	mov	eax, DWORD PTR __imp_?pSettings@@3PBVCInifile@@B
	mov	ecx, DWORD PTR [eax]
	mov	edi, DWORD PTR __imp_?r_string_wb@CInifile@@QBE?AVshared_str@@PBD0@Z
	push	OFFSET ??_C@_05PGJBAKAI@line1?$AA@
	push	OFFSET ??_C@_0L@NIBLGGE@evaluation?$AA@
	lea	edx, DWORD PTR $T415840[esp+20]
	push	edx
	call	edi
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN15@OnDeviceCr@3
	add	DWORD PTR [eax], 1
$LN15@OnDeviceCr@3:
	mov	ecx, DWORD PTR [esi+3488]
	test	ecx, ecx
	je	SHORT $LN18@OnDeviceCr@3
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [esi+3488]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN18@OnDeviceCr@3
	mov	DWORD PTR [esi+3488], 0
$LN18@OnDeviceCr@3:
	mov	DWORD PTR [esi+3488], eax
	mov	eax, DWORD PTR $T415840[esp+12]
	test	eax, eax
	je	SHORT $LN24@OnDeviceCr@3
	add	DWORD PTR [eax], -1
$LN24@OnDeviceCr@3:

; 463  : 	eval_line_2 = pSettings->r_string_wb("evaluation","line2");

	mov	eax, DWORD PTR __imp_?pSettings@@3PBVCInifile@@B
	mov	ecx, DWORD PTR [eax]
	push	OFFSET ??_C@_05NNLMFJML@line2?$AA@
	push	OFFSET ??_C@_0L@NIBLGGE@evaluation?$AA@
	lea	edx, DWORD PTR $T415841[esp+20]
	push	edx
	call	edi
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN30@OnDeviceCr@3
	add	DWORD PTR [eax], 1
$LN30@OnDeviceCr@3:
	mov	ecx, DWORD PTR [esi+3492]
	test	ecx, ecx
	je	SHORT $LN33@OnDeviceCr@3
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [esi+3492]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN33@OnDeviceCr@3
	mov	DWORD PTR [esi+3492], 0
$LN33@OnDeviceCr@3:
	mov	DWORD PTR [esi+3492], eax
	mov	eax, DWORD PTR $T415841[esp+12]
	test	eax, eax
	je	SHORT $LN39@OnDeviceCr@3
	add	DWORD PTR [eax], -1
$LN39@OnDeviceCr@3:

; 464  : 	eval_line_3 = pSettings->r_string_wb("evaluation","line3");

	mov	eax, DWORD PTR __imp_?pSettings@@3PBVCInifile@@B
	mov	ecx, DWORD PTR [eax]
	push	OFFSET ??_C@_05MEKHGIIK@line3?$AA@
	push	OFFSET ??_C@_0L@NIBLGGE@evaluation?$AA@
	lea	edx, DWORD PTR $T415842[esp+20]
	push	edx
	call	edi
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	pop	edi
	je	SHORT $LN45@OnDeviceCr@3
	add	DWORD PTR [eax], 1
$LN45@OnDeviceCr@3:
	mov	ecx, DWORD PTR [esi+3496]
	test	ecx, ecx
	je	SHORT $LN48@OnDeviceCr@3
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [esi+3496]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN48@OnDeviceCr@3
	mov	DWORD PTR [esi+3496], 0
$LN48@OnDeviceCr@3:
	mov	DWORD PTR [esi+3496], eax
	mov	eax, DWORD PTR $T415842[esp+8]
	test	eax, eax
	pop	esi
	je	SHORT $LN54@OnDeviceCr@3
	add	DWORD PTR [eax], -1
$LN54@OnDeviceCr@3:

; 465  : 
; 466  : 	// 
; 467  : #ifdef DEBUG
; 468  : 	if (!g_bDisableRedText)			SetLogCB	(_LogCallback);
; 469  : #endif
; 470  : }

	pop	ecx
	ret	0
?OnDeviceCreate@CStats@@QAEXXZ ENDP			; CStats::OnDeviceCreate
PUBLIC	__real@44160000
PUBLIC	__real@3ca3d70a
PUBLIC	?_draw_cam_pos@@YAXPAVCGameFont@@@Z		; _draw_cam_pos
;	COMDAT __real@44160000
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_tools.h
CONST	SEGMENT
__real@44160000 DD 044160000r			; 600
CONST	ENDS
;	COMDAT __real@3ca3d70a
CONST	SEGMENT
__real@3ca3d70a DD 03ca3d70ar			; 0.02
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\stats.cpp
CONST	ENDS
;	COMDAT ?_draw_cam_pos@@YAXPAVCGameFont@@@Z
_TEXT	SEGMENT
_sz$ = -8						; size = 4
tv211 = -4						; size = 4
?_draw_cam_pos@@YAXPAVCGameFont@@@Z PROC		; _draw_cam_pos, COMDAT
; _pFont$ = eax

; 67   : {

	sub	esp, 8

; 68   : 	float sz		= pFont->GetHeight();
; 69   : 	pFont->SetHeightI(0.02f);

	fild	DWORD PTR ?Device@@3VCRenderDevice@@A+8
	push	esi
	mov	esi, eax
	mov	eax, DWORD PTR ?Device@@3VCRenderDevice@@A+8
	test	eax, eax
	movss	xmm0, DWORD PTR [esi+24]
	push	edi
	movss	DWORD PTR _sz$[esp+16], xmm0
	jge	SHORT $LN58@draw_cam_p
	fadd	DWORD PTR __real@4f800000
$LN58@draw_cam_p:
	fmul	DWORD PTR __real@3ca3d70a

; 70   : 	pFont->SetColor	(0xffffffff);
; 71   : 	pFont->Out		(10, 600, "CAMERA POSITION:  [%3.2f,%3.2f,%3.2f]",VPUSH(Device.vCameraPosition));

	sub	esp, 24					; 00000018H
	mov	DWORD PTR [esi+20], -1
	fstp	DWORD PTR [esi+24]
	fld	DWORD PTR ?Device@@3VCRenderDevice@@A+56
	fstp	QWORD PTR [esp+16]
	fld	DWORD PTR ?Device@@3VCRenderDevice@@A+52
	fstp	QWORD PTR [esp+8]
	fld	DWORD PTR ?Device@@3VCRenderDevice@@A+48
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CG@BLCFDOLE@CAMERA?5POSITION?3?5?5?$FL?$CF3?42f?0?$CF3?42f?0?$CF@
	fld	DWORD PTR __real@44160000
	sub	esp, 8
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR __real@41200000
	fstp	DWORD PTR [esp]
	push	esi
	call	?Out@CGameFont@@QAAXMMPBDZZ		; CGameFont::Out

; 72   : 	pFont->SetHeight(sz);

	movss	xmm0, DWORD PTR _sz$[esp+56]

; 73   : 	pFont->OnRender	();

	mov	ecx, DWORD PTR [esi+76]
	movss	DWORD PTR [esi+24], xmm0
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	add	esp, 40					; 00000028H
	push	esi
	call	eax
	add	esi, 64					; 00000040H
	mov	ecx, esi
	call	?end@?$_Impl_vector@UString@CGameFont@@V?$xalloc@UString@CGameFont@@@@@priv@stlp_std@@QAEPAUString@CGameFont@@XZ ; stlp_std::priv::_Impl_vector<CGameFont::String,xalloc<CGameFont::String> >::end
	mov	ecx, esi
	mov	edi, eax
	call	?begin@?$_Impl_vector@UString@CGameFont@@V?$xalloc@UString@CGameFont@@@@@priv@stlp_std@@QAEPAUString@CGameFont@@XZ ; stlp_std::priv::_Impl_vector<CGameFont::String,xalloc<CGameFont::String> >::begin
	push	edi
	push	eax
	mov	ecx, esi
	call	?erase@?$_Impl_vector@UString@CGameFont@@V?$xalloc@UString@CGameFont@@@@@priv@stlp_std@@QAEPAUString@CGameFont@@PAU45@0@Z ; stlp_std::priv::_Impl_vector<CGameFont::String,xalloc<CGameFont::String> >::erase

; 74   : }

	pop	edi
	pop	esi
	add	esp, 8
	ret	0
?_draw_cam_pos@@YAXPAVCGameFont@@@Z ENDP		; _draw_cam_pos
_TEXT	ENDS
PUBLIC	??0CStats@@QAE@XZ				; CStats::CStats
; Function compile flags: /Ogtpy
;	COMDAT ??0CStats@@QAE@XZ
_TEXT	SEGMENT
_I$482523 = -12						; size = 12
??0CStats@@QAE@XZ PROC					; CStats::CStats, COMDAT
; _this$ = ecx

; 50   : {

	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	mov	esi, DWORD PTR __imp_??0CStatTimer@@QAE@XZ
	push	edi
	mov	edi, ecx
	lea	ebx, DWORD PTR [edi+8]
	mov	ecx, ebx
	mov	DWORD PTR [edi], OFFSET ??_7pureRender@@6B@
	call	esi
	lea	ecx, DWORD PTR [ebx+72]
	call	esi
	lea	ecx, DWORD PTR [ebx+144]
	call	esi
	lea	ecx, DWORD PTR [edi+264]
	mov	DWORD PTR [edi], OFFSET ??_7CStats@@6B@
	call	esi
	lea	ecx, DWORD PTR [edi+336]
	call	esi
	lea	ecx, DWORD PTR [edi+408]
	call	esi
	lea	ecx, DWORD PTR [edi+512]
	call	esi
	lea	ecx, DWORD PTR [edi+584]
	call	esi
	lea	ecx, DWORD PTR [edi+656]
	call	esi
	lea	ecx, DWORD PTR [edi+728]
	call	esi
	lea	ecx, DWORD PTR [edi+800]
	call	esi
	lea	ecx, DWORD PTR [edi+872]
	call	esi
	lea	ecx, DWORD PTR [edi+944]
	call	esi
	lea	ecx, DWORD PTR [edi+1016]
	call	esi
	lea	ecx, DWORD PTR [edi+1088]
	call	esi
	lea	ecx, DWORD PTR [edi+1160]
	call	esi
	lea	ecx, DWORD PTR [edi+1232]
	call	esi
	lea	ecx, DWORD PTR [edi+1304]
	call	esi
	lea	ecx, DWORD PTR [edi+1376]
	call	esi
	lea	ecx, DWORD PTR [edi+1448]
	call	esi
	lea	ecx, DWORD PTR [edi+1520]
	call	esi
	lea	ecx, DWORD PTR [edi+1592]
	call	esi
	lea	ecx, DWORD PTR [edi+1664]
	call	esi
	lea	ecx, DWORD PTR [edi+1736]
	call	esi
	lea	ecx, DWORD PTR [edi+1808]
	call	esi
	lea	ecx, DWORD PTR [edi+1880]
	call	esi
	lea	ecx, DWORD PTR [edi+1952]
	call	esi
	lea	ecx, DWORD PTR [edi+2040]
	call	esi
	lea	ecx, DWORD PTR [edi+2112]
	call	esi
	lea	ecx, DWORD PTR [edi+2184]
	call	esi
	lea	ecx, DWORD PTR [edi+2264]
	call	esi
	lea	ecx, DWORD PTR [edi+2336]
	call	esi
	lea	ecx, DWORD PTR [edi+2408]
	call	esi
	lea	ecx, DWORD PTR [edi+2480]
	call	esi
	lea	ecx, DWORD PTR [edi+2552]
	call	esi
	lea	ecx, DWORD PTR [edi+2624]
	call	esi
	lea	ecx, DWORD PTR [edi+2696]
	call	esi
	lea	ecx, DWORD PTR [edi+2768]
	call	esi
	lea	ecx, DWORD PTR [edi+2840]
	call	esi
	lea	ecx, DWORD PTR [edi+2912]
	call	esi
	lea	ecx, DWORD PTR [edi+2984]
	call	esi
	lea	ecx, DWORD PTR [edi+3056]
	call	esi
	lea	ecx, DWORD PTR [edi+3128]
	call	esi
	lea	ecx, DWORD PTR [edi+3200]
	call	esi
	lea	ecx, DWORD PTR [edi+3272]
	call	esi
	lea	ecx, DWORD PTR [edi+3344]
	call	esi
	lea	ecx, DWORD PTR [edi+3416]
	call	esi
	xor	esi, esi
	mov	DWORD PTR [edi+3488], esi
	mov	DWORD PTR [edi+3492], esi
	lea	ecx, DWORD PTR [edi+3500]
	mov	DWORD PTR [edi+3496], esi
	call	??0?$xr_vector@Vshared_str@@V?$xalloc@Vshared_str@@@@@@QAE@XZ ; xr_vector<shared_str,xalloc<shared_str> >::xr_vector<shared_str,xalloc<shared_str> >
	mov	eax, DWORD PTR __imp_?RenderFactory@@3PAVIRenderFactory@@A
	mov	DWORD PTR [edi+3512], esi
	mov	DWORD PTR [edi+3516], esi
	mov	DWORD PTR [edi+3520], esi
	and	DWORD PTR [edi+3524], -4		; fffffffcH
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 51   : 	fFPS				= 30.f;

	movss	xmm0, DWORD PTR _SAMPLE_FPS
	mov	DWORD PTR [edi+3528], eax

; 52   : 	fRFPS				= 30.f;
; 53   : 	fTPS				= 0;
; 54   : 	pFont				= 0;
; 55   : 	fMem_calls			= 0;
; 56   : 	RenderDUMP_DT_Count = 0;
; 57   : 	Device.seqRender.Add		(this,REG_PRIORITY_LOW-1000);

	lea	ecx, DWORD PTR _I$482523[esp+24]
	movss	DWORD PTR [edi+228], xmm0
	movss	DWORD PTR [edi+232], xmm0
	xorps	xmm0, xmm0
	push	ecx
	mov	ecx, OFFSET ?Device@@3VCRenderDevice@@A+648
	movss	DWORD PTR [edi+236], xmm0
	mov	DWORD PTR [edi+224], esi
	movss	DWORD PTR [edi+240], xmm0
	mov	DWORD PTR [edi+2256], esi
	mov	DWORD PTR _I$482523[esp+28], edi
	mov	DWORD PTR _I$482523[esp+32], 286330153	; 11110d29H
	mov	DWORD PTR _I$482523[esp+36], esi
	call	?push_back@?$vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@stlp_std@@QAEXABU_REG_INFO@@@Z ; stlp_std::vector<_REG_INFO,xalloc<_REG_INFO> >::push_back
	test	BYTE PTR ?Device@@3VCRenderDevice@@A+660, 1
	je	SHORT $LN48@CStats@3
	or	DWORD PTR ?Device@@3VCRenderDevice@@A+660, 2

; 58   : }

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 12					; 0000000cH
	ret	0

; 52   : 	fRFPS				= 30.f;
; 53   : 	fTPS				= 0;
; 54   : 	pFont				= 0;
; 55   : 	fMem_calls			= 0;
; 56   : 	RenderDUMP_DT_Count = 0;
; 57   : 	Device.seqRender.Add		(this,REG_PRIORITY_LOW-1000);

$LN48@CStats@3:
	mov	esi, OFFSET ?Device@@3VCRenderDevice@@A+648
	call	?Resort@?$CRegistrator@VpureRender@@@@QAEXXZ ; CRegistrator<pureRender>::Resort

; 58   : }

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 12					; 0000000cH
	ret	0
??0CStats@@QAE@XZ ENDP					; CStats::CStats
PUBLIC	__real@43960000
PUBLIC	?Show@CStats@@QAEXXZ				; CStats::Show
;	COMDAT __real@43960000
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_tools.h
CONST	SEGMENT
__real@43960000 DD 043960000r			; 300
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\stats.cpp
CONST	ENDS
;	COMDAT ?Show@CStats@@QAEXXZ
_TEXT	SEGMENT
tv1548 = -36						; size = 4
tv1506 = -36						; size = 4
$T522333 = -36						; size = 4
$T522312 = -36						; size = 4
$T522115 = -36						; size = 4
_mem_count$126040 = -36					; size = 4
tv2060 = -32						; size = 4
tv2055 = -32						; size = 4
tv2053 = -32						; size = 4
$T522243 = -32						; size = 4
tv2092 = -28						; size = 4
tv2085 = -28						; size = 4
tv2063 = -28						; size = 4
tv2043 = -28						; size = 4
tv2039 = -28						; size = 4
tv1806 = -28						; size = 4
tv1801 = -28						; size = 4
tv1796 = -28						; size = 4
$T522562 = -28						; size = 4
$T522463 = -28						; size = 4
_sz$126051 = -28					; size = 4
$T522075 = -28						; size = 8
_snd_stat$126058 = -20					; size = 20
?Show@CStats@@QAEXXZ PROC				; CStats::Show, COMDAT
; _this$ = ecx

; 77   : {

	push	ebp
	mov	ebp, esp
	and	esp, -64				; ffffffc0H
	sub	esp, 48					; 00000030H
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx
	push	edi

; 78   : 	// Stop timers
; 79   : 	{
; 80   : 		EngineTOTAL.FrameEnd		();	

	mov	edi, DWORD PTR __imp_?FrameEnd@CStatTimer@@QAEXXZ
	lea	ebp, DWORD PTR [esi+264]
	mov	ecx, ebp
	call	edi

; 81   : 		Sheduler.FrameEnd			();	

	lea	ebx, DWORD PTR [esi+336]
	mov	ecx, ebx
	call	edi

; 82   : 		UpdateClient.FrameEnd		();	

	lea	ecx, DWORD PTR [esi+408]
	call	edi

; 83   : 		Physics.FrameEnd			();	

	lea	ecx, DWORD PTR [esi+152]
	call	edi

; 84   : 		ph_collision.FrameEnd		();

	lea	ecx, DWORD PTR [esi+8]
	call	edi

; 85   : 		ph_core.FrameEnd			();

	lea	ecx, DWORD PTR [esi+80]
	call	edi

; 86   : 		Animation.FrameEnd			();	

	lea	ecx, DWORD PTR [esi+1304]
	call	edi

; 87   : 		AI_Think.FrameEnd			();

	lea	ecx, DWORD PTR [esi+512]
	call	edi

; 88   : 		AI_Range.FrameEnd			();

	lea	ecx, DWORD PTR [esi+584]
	call	edi

; 89   : 		AI_Path.FrameEnd			();

	lea	ecx, DWORD PTR [esi+656]
	call	edi

; 90   : 		AI_Node.FrameEnd			();

	lea	ecx, DWORD PTR [esi+728]
	call	edi

; 91   : 		AI_Vis.FrameEnd				();

	lea	ecx, DWORD PTR [esi+800]
	call	edi

; 92   : 		AI_Vis_Query.FrameEnd		();

	lea	ecx, DWORD PTR [esi+872]
	call	edi

; 93   : 		AI_Vis_RayTests.FrameEnd	();

	lea	ecx, DWORD PTR [esi+944]
	call	edi

; 94   : 		
; 95   : 		RenderTOTAL.FrameEnd		();

	lea	ecx, DWORD PTR [esi+1016]
	call	edi

; 96   : 		RenderCALC.FrameEnd			();

	lea	ecx, DWORD PTR [esi+1160]
	call	edi

; 97   : 		RenderCALC_HOM.FrameEnd		();

	lea	ecx, DWORD PTR [esi+1232]
	call	edi

; 98   : 		RenderDUMP.FrameEnd			();	

	lea	ecx, DWORD PTR [esi+1376]
	call	edi

; 99   : 		RenderDUMP_RT.FrameEnd		();

	lea	ecx, DWORD PTR [esi+1592]
	call	edi

; 100  : 		RenderDUMP_SKIN.FrameEnd	();	

	lea	ecx, DWORD PTR [esi+1664]
	call	edi

; 101  : 		RenderDUMP_Wait.FrameEnd	();	

	lea	ecx, DWORD PTR [esi+1448]
	call	edi

; 102  : 		RenderDUMP_Wait_S.FrameEnd	();	

	lea	ecx, DWORD PTR [esi+1520]
	call	edi

; 103  : 		RenderDUMP_HUD.FrameEnd		();	

	lea	ecx, DWORD PTR [esi+1736]
	call	edi

; 104  : 		RenderDUMP_Glows.FrameEnd	();	

	lea	ecx, DWORD PTR [esi+1808]
	call	edi

; 105  : 		RenderDUMP_Lights.FrameEnd	();	

	lea	ecx, DWORD PTR [esi+1880]
	call	edi

; 106  : 		RenderDUMP_WM.FrameEnd		();	

	lea	ecx, DWORD PTR [esi+1952]
	call	edi

; 107  : 		RenderDUMP_DT_VIS.FrameEnd	();	

	lea	ecx, DWORD PTR [esi+2040]
	call	edi

; 108  : 		RenderDUMP_DT_Render.FrameEnd();	

	lea	ecx, DWORD PTR [esi+2112]
	call	edi

; 109  : 		RenderDUMP_DT_Cache.FrameEnd();

	lea	ecx, DWORD PTR [esi+2184]
	call	edi

; 110  : 		RenderDUMP_Pcalc.FrameEnd	();	

	lea	ecx, DWORD PTR [esi+2264]
	call	edi

; 111  : 		RenderDUMP_Scalc.FrameEnd	();	

	lea	ecx, DWORD PTR [esi+2336]
	call	edi

; 112  : 		RenderDUMP_Srender.FrameEnd	();	

	lea	ecx, DWORD PTR [esi+2408]
	call	edi

; 113  : 		
; 114  : 		Sound.FrameEnd				();

	lea	ecx, DWORD PTR [esi+2480]
	call	edi

; 115  : 		Input.FrameEnd				();

	lea	ecx, DWORD PTR [esi+2552]
	call	edi

; 116  : 		clRAY.FrameEnd				();	

	lea	ecx, DWORD PTR [esi+2624]
	call	edi

; 117  : 		clBOX.FrameEnd				();

	lea	ecx, DWORD PTR [esi+2696]
	call	edi

; 118  : 		clFRUSTUM.FrameEnd			();

	lea	ecx, DWORD PTR [esi+2768]
	call	edi

; 119  : 		
; 120  : 		netClient1.FrameEnd			();

	lea	ecx, DWORD PTR [esi+2840]
	call	edi

; 121  : 		netClient2.FrameEnd			();

	lea	ecx, DWORD PTR [esi+2912]
	call	edi

; 122  : 		netServer.FrameEnd			();

	lea	ecx, DWORD PTR [esi+2984]
	call	edi

; 123  : 
; 124  : 		netClientCompressor.FrameEnd();

	lea	ecx, DWORD PTR [esi+3056]
	call	edi

; 125  : 		netServerCompressor.FrameEnd();

	lea	ecx, DWORD PTR [esi+3128]
	call	edi

; 126  : 		
; 127  : 		TEST0.FrameEnd				();

	lea	ecx, DWORD PTR [esi+3200]
	call	edi

; 128  : 		TEST1.FrameEnd				();

	lea	ecx, DWORD PTR [esi+3272]
	call	edi

; 129  : 		TEST2.FrameEnd				();

	lea	ecx, DWORD PTR [esi+3344]
	call	edi

; 130  : 		TEST3.FrameEnd				();

	lea	ecx, DWORD PTR [esi+3416]
	call	edi

; 131  : 
; 132  : 		g_SpatialSpace->stat_insert.FrameEnd		();

	mov	eax, DWORD PTR __imp_?g_SpatialSpace@@3PAVISpatial_DB@@A
	mov	ecx, DWORD PTR [eax]
	add	ecx, 68					; 00000044H
	call	edi

; 133  : 		g_SpatialSpace->stat_remove.FrameEnd		();

	mov	ecx, DWORD PTR __imp_?g_SpatialSpace@@3PAVISpatial_DB@@A
	mov	ecx, DWORD PTR [ecx]
	add	ecx, 140				; 0000008cH
	call	edi

; 134  : 		g_SpatialSpacePhysic->stat_insert.FrameEnd	();

	mov	edx, DWORD PTR __imp_?g_SpatialSpacePhysic@@3PAVISpatial_DB@@A
	mov	ecx, DWORD PTR [edx]
	add	ecx, 68					; 00000044H
	call	edi

; 135  : 		g_SpatialSpacePhysic->stat_remove.FrameEnd	();

	mov	eax, DWORD PTR __imp_?g_SpatialSpacePhysic@@3PAVISpatial_DB@@A
	mov	ecx, DWORD PTR [eax]
	add	ecx, 140				; 0000008cH
	call	edi

; 136  : 	}
; 137  : 
; 138  : 	// calc FPS & TPS
; 139  : 	if (Device.fTimeDelta>EPS_S) {

	movss	xmm0, DWORD PTR ?Device@@3VCRenderDevice@@A+28
	movss	xmm1, DWORD PTR _EPS_S
	comiss	xmm0, xmm1
	jbe	$LN8@Show@2

; 140  : 		float fps  = 1.f/Device.fTimeDelta;

	movss	xmm2, DWORD PTR __real@3f800000
	divss	xmm2, xmm0

; 141  : 		//if (Engine.External.tune_enabled)	vtune.update	(fps);
; 142  : 		float fOne = 0.3f;
; 143  : 		float fInv = 1.f-fOne;
; 144  : 		fFPS = fInv*fFPS + fOne*fps;

	movss	xmm0, DWORD PTR [esi+228]
	mulss	xmm0, DWORD PTR __real@3f333333
	mulss	xmm2, DWORD PTR _particles_time
	addss	xmm2, xmm0

; 145  : 
; 146  : 		if (RenderTOTAL.result>EPS_S) {

	movss	xmm0, DWORD PTR [esi+1080]
	comiss	xmm0, xmm1
	movss	DWORD PTR [esi+228], xmm2
	jbe	SHORT $LN8@Show@2

; 147  : 			u32	rendered_polies = Device.m_pRender->GetCacheStatPolys();

	mov	ecx, DWORD PTR ?Device@@3VCRenderDevice@@A+868
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 148  : 			fTPS = fInv*fTPS + fOne*float(rendered_polies)/(RenderTOTAL.result*1000.f);

	test	eax, eax
	movss	xmm0, DWORD PTR [esi+1080]
	mov	DWORD PTR tv2092[esp+64], eax
	fild	DWORD PTR tv2092[esp+64]
	movss	DWORD PTR tv1506[esp+64], xmm0
	jge	SHORT $LN284@Show@2
	fadd	DWORD PTR __real@4f800000
$LN284@Show@2:
	fmul	DWORD PTR _particles_time

; 149  : 			//fTPS = fInv*fTPS + fOne*float(RCache.stat.polys)/(RenderTOTAL.result*1000.f);
; 150  : 			fRFPS= fInv*fRFPS+ fOne*1000.f/RenderTOTAL.result;

	movss	xmm1, DWORD PTR __real@43960000
	fld	DWORD PTR tv1506[esp+64]
	divss	xmm1, xmm0
	fmul	DWORD PTR _fuzzy_update_novis
	movss	xmm0, DWORD PTR [esi+232]
	mulss	xmm0, DWORD PTR __real@3f333333
	addss	xmm1, xmm0
	fdivp	ST(1), ST(0)
	movss	DWORD PTR [esi+232], xmm1
	fld	DWORD PTR [esi+236]
	fmul	DWORD PTR __real@3f333333
	faddp	ST(1), ST(0)
	fstp	DWORD PTR [esi+236]
$LN8@Show@2:

; 151  : 		}
; 152  : 	}
; 153  : 	{
; 154  : 		float mem_count		= float	(Memory.stat_calls);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	mov	edx, DWORD PTR [ecx]
	fild	DWORD PTR [ecx]
	test	edx, edx
	jge	SHORT $LN285@Show@2
	fadd	DWORD PTR __real@4f800000
$LN285@Show@2:

; 155  : 		if (mem_count>fMem_calls)	fMem_calls	=	mem_count;

	movss	xmm0, DWORD PTR [esi+240]
	fstp	DWORD PTR _mem_count$126040[esp+64]
	movss	xmm1, DWORD PTR _mem_count$126040[esp+64]
	comiss	xmm1, xmm0
	jbe	SHORT $LN7@Show@2
	movss	DWORD PTR [esi+240], xmm1
	jmp	SHORT $LN6@Show@2
$LN7@Show@2:

; 156  : 		else						fMem_calls	=	.9f*fMem_calls + .1f*mem_count;

	mulss	xmm0, DWORD PTR __real@3f666666
	mulss	xmm1, DWORD PTR _psShedulerReaction
	addss	xmm0, xmm1
	movss	DWORD PTR [esi+240], xmm0
$LN6@Show@2:

; 157  : 		Memory.stat_calls	= 0		;

	mov	eax, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	mov	DWORD PTR [eax], 0

; 158  : 	}
; 159  : 
; 160  : 	////////////////////////////////////////////////
; 161  : 	if (g_dedicated_server) return;

	cmp	BYTE PTR ?g_dedicated_server@@3_NA, 0	; g_dedicated_server
	jne	$LN10@Show@2

; 162  : 	////////////////////////////////////////////////
; 163  : 	int frm = 2000;
; 164  : 	div_t ddd = div(Device.dwFrame,frm);

	mov	ecx, DWORD PTR ?Device@@3VCRenderDevice@@A+24
	push	2000					; 000007d0H
	push	ecx
	call	DWORD PTR __imp__div

; 165  : 	if( ddd.rem < frm/2.0f ){

	movss	xmm1, DWORD PTR _fuzzy_update_novis
	cvtsi2ss xmm0, edx
	add	esp, 8
	comiss	xmm1, xmm0
	xorps	xmm0, xmm0
	mov	DWORD PTR $T522075[esp+64], eax
	jbe	$LN67@Show@2

; 166  : 		pFont->SetColor	(0xFFFFFFFF	);

	mov	edx, DWORD PTR [esi+224]
	mov	DWORD PTR [edx+20], -1

; 167  : 		pFont->OutSet	(0,0);

	mov	eax, DWORD PTR [esi+224]
	movss	DWORD PTR [eax+28], xmm0
	movss	DWORD PTR [eax+32], xmm0

; 168  : 		pFont->OutNext	(*eval_line_1);

	mov	eax, DWORD PTR [esi+3488]
	test	eax, eax
	je	SHORT $LN18@Show@2
	add	eax, 16					; 00000010H
	jmp	SHORT $LN19@Show@2
$LN18@Show@2:
	xor	eax, eax
$LN19@Show@2:
	push	eax
	mov	eax, DWORD PTR [esi+224]
	push	eax
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 169  : 		pFont->OutNext	(*eval_line_2);

	mov	eax, DWORD PTR [esi+3492]
	add	esp, 8
	test	eax, eax
	je	SHORT $LN22@Show@2
	add	eax, 16					; 00000010H
	jmp	SHORT $LN23@Show@2
$LN22@Show@2:
	xor	eax, eax
$LN23@Show@2:
	mov	ecx, DWORD PTR [esi+224]
	push	eax
	push	ecx
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 170  : 		pFont->OutNext	(*eval_line_3);

	mov	eax, DWORD PTR [esi+3496]
	add	esp, 8
	test	eax, eax
	je	SHORT $LN26@Show@2
	add	eax, 16					; 00000010H
	jmp	SHORT $LN27@Show@2
$LN26@Show@2:
	xor	eax, eax
$LN27@Show@2:
	mov	edx, DWORD PTR [esi+224]
	push	eax
	push	edx
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 171  : 		pFont->OnRender	();

	mov	edi, DWORD PTR [esi+224]
	mov	ecx, DWORD PTR [edi+76]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+8]
	add	esp, 8
	push	edi
	call	edx
	add	edi, 64					; 00000040H
	mov	ecx, edi
	call	?end@?$_Impl_vector@UString@CGameFont@@V?$xalloc@UString@CGameFont@@@@@priv@stlp_std@@QAEPAUString@CGameFont@@XZ ; stlp_std::priv::_Impl_vector<CGameFont::String,xalloc<CGameFont::String> >::end
	mov	ecx, edi
	mov	DWORD PTR $T522115[esp+64], eax
	call	?begin@?$_Impl_vector@UString@CGameFont@@V?$xalloc@UString@CGameFont@@@@@priv@stlp_std@@QAEPAUString@CGameFont@@XZ ; stlp_std::priv::_Impl_vector<CGameFont::String,xalloc<CGameFont::String> >::begin
	mov	ecx, DWORD PTR $T522115[esp+64]
	push	ecx
	push	eax
	mov	ecx, edi
	call	?erase@?$_Impl_vector@UString@CGameFont@@V?$xalloc@UString@CGameFont@@@@@priv@stlp_std@@QAEPAUString@CGameFont@@PAU45@0@Z ; stlp_std::priv::_Impl_vector<CGameFont::String,xalloc<CGameFont::String> >::erase
$LN67@Show@2:

; 172  : 	}
; 173  : 
; 174  : 	CGameFont& F = *pFont;
; 175  : 	float		f_base_size	= 0.01f;
; 176  : 				F.SetHeightI	(f_base_size);

	mov	edx, DWORD PTR ?Device@@3VCRenderDevice@@A+8
	fild	DWORD PTR ?Device@@3VCRenderDevice@@A+8
	test	edx, edx
	mov	edi, DWORD PTR [esi+224]
	jge	SHORT $LN286@Show@2
	fadd	DWORD PTR __real@4f800000
$LN286@Show@2:
	fmul	DWORD PTR __real@3c23d70a
	fstp	DWORD PTR [edi+24]

; 177  : 
; 178  : 	if (vtune.enabled())	{

	cmp	DWORD PTR _vtune+4, 0
	je	$LN131@Show@2

; 179  : 		float sz		= pFont->GetHeight();

	mov	eax, DWORD PTR [esi+224]

; 180  : 		pFont->SetHeightI(0.02f);

	fild	DWORD PTR ?Device@@3VCRenderDevice@@A+8
	mov	ecx, DWORD PTR ?Device@@3VCRenderDevice@@A+8
	test	ecx, ecx
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR _sz$126051[esp+64], xmm0
	jge	SHORT $LN287@Show@2
	fadd	DWORD PTR __real@4f800000
$LN287@Show@2:
	fmul	DWORD PTR __real@3ca3d70a

; 181  : 		pFont->SetColor	(0xFFFF0000	);
; 182  : 		pFont->OutSet	(Device.dwWidth/2.0f+(pFont->SizeOf_("--= tune =--")/2.0f),Device.dwHeight/2.0f);

	push	OFFSET ??_C@_0N@DHJEGJHD@?9?9?$DN?5tune?5?$DN?9?9?$AA@
	fstp	DWORD PTR [eax+24]
	mov	edx, DWORD PTR [esi+224]
	mov	DWORD PTR [edx+20], -65536		; ffff0000H
	mov	ecx, DWORD PTR [esi+224]
	mov	DWORD PTR tv1548[esp+68], ecx
	call	?SizeOf_@CGameFont@@QAEMPBD@Z		; CGameFont::SizeOf_
	fld	DWORD PTR __real@3f000000
	mov	eax, DWORD PTR ?Device@@3VCRenderDevice@@A+4
	fmul	ST(1), ST(0)
	test	eax, eax
	fild	DWORD PTR ?Device@@3VCRenderDevice@@A+4
	jge	SHORT $LN288@Show@2
	fadd	DWORD PTR __real@4f800000
$LN288@Show@2:
	mov	ecx, DWORD PTR ?Device@@3VCRenderDevice@@A+8
	fmul	ST(0), ST(1)
	test	ecx, ecx
	faddp	ST(2), ST(0)
	fild	DWORD PTR ?Device@@3VCRenderDevice@@A+8
	jge	SHORT $LN289@Show@2
	fadd	DWORD PTR __real@4f800000
$LN289@Show@2:
	mov	eax, DWORD PTR tv1548[esp+64]
	fmulp	ST(1), ST(0)
	fxch	ST(1)

; 183  : 		pFont->OutNext	("--= tune =--");

	push	OFFSET ??_C@_0N@DHJEGJHD@?9?9?$DN?5tune?5?$DN?9?9?$AA@
	fstp	DWORD PTR [eax+28]
	fstp	DWORD PTR [eax+32]
	mov	edx, DWORD PTR [esi+224]
	push	edx
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 184  : 		pFont->OnRender	();

	mov	eax, DWORD PTR [esi+224]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR [ecx]
	add	esp, 8
	mov	DWORD PTR $T522333[esp+64], eax
	push	eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	ecx, DWORD PTR $T522333[esp+64]
	add	ecx, 64					; 00000040H
	mov	DWORD PTR $T522312[esp+64], ecx
	call	?end@?$_Impl_vector@UString@CGameFont@@V?$xalloc@UString@CGameFont@@@@@priv@stlp_std@@QAEPAUString@CGameFont@@XZ ; stlp_std::priv::_Impl_vector<CGameFont::String,xalloc<CGameFont::String> >::end
	mov	ecx, DWORD PTR $T522312[esp+64]
	mov	DWORD PTR $T522243[esp+64], eax
	call	?begin@?$_Impl_vector@UString@CGameFont@@V?$xalloc@UString@CGameFont@@@@@priv@stlp_std@@QAEPAUString@CGameFont@@XZ ; stlp_std::priv::_Impl_vector<CGameFont::String,xalloc<CGameFont::String> >::begin
	mov	ecx, DWORD PTR $T522243[esp+64]
	push	ecx
	mov	ecx, DWORD PTR $T522312[esp+68]
	push	eax
	call	?erase@?$_Impl_vector@UString@CGameFont@@V?$xalloc@UString@CGameFont@@@@@priv@stlp_std@@QAEPAUString@CGameFont@@PAU45@0@Z ; stlp_std::priv::_Impl_vector<CGameFont::String,xalloc<CGameFont::String> >::erase

; 185  : 		pFont->SetHeight(sz);

	mov	edx, DWORD PTR [esi+224]
	movss	xmm0, DWORD PTR _sz$126051[esp+64]
	movss	DWORD PTR [edx+24], xmm0
$LN131@Show@2:

; 186  : 	};
; 187  : 
; 188  : 	// Show them
; 189  : 	if (psDeviceFlags.test(rsStatistic))

	push	32					; 00000020H
	mov	ecx, OFFSET ?psDeviceFlags@@3U?$_flags@I@@A ; psDeviceFlags
	call	?test@?$_flags@I@@QBEHI@Z		; _flags<unsigned int>::test
	test	eax, eax
	je	$LN239@Show@2

; 190  : 	{
; 191  : 		static float	r_ps		= 0;
; 192  : 		static float	b_ps		= 0;
; 193  : 		r_ps						= .99f*r_ps + .01f*(clRAY.count/clRAY.result);

	mov	eax, DWORD PTR [esi+2692]
	fild	DWORD PTR [esi+2692]
	test	eax, eax
	jge	SHORT $LN290@Show@2
	fadd	DWORD PTR __real@4f800000
$LN290@Show@2:
	fdiv	DWORD PTR [esi+2688]

; 194  : 		b_ps						= .99f*b_ps + .01f*(clBOX.count/clBOX.result);

	mov	ecx, DWORD PTR [esi+2764]
	test	ecx, ecx
	fld	DWORD PTR __real@3c23d70a
	fmul	ST(1), ST(0)
	fld	DWORD PTR ?r_ps@?BI@??Show@CStats@@QAEXXZ@4MA
	fld	DWORD PTR __real@3f7d70a4
	fmul	ST(1), ST(0)
	fxch	ST(3)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR ?r_ps@?BI@??Show@CStats@@QAEXXZ@4MA
	fild	DWORD PTR [esi+2764]
	jge	SHORT $LN291@Show@2
	fadd	DWORD PTR __real@4f800000
$LN291@Show@2:
	fdiv	DWORD PTR [esi+2760]

; 195  : 
; 196  : 		CSound_stats				snd_stat;
; 197  : 		::Sound->statistic			(&snd_stat,0);

	mov	edx, DWORD PTR __imp_?Sound@@3PAVCSound_manager_interface@@A
	mov	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+88]
	push	0
	lea	edx, DWORD PTR _snd_stat$126058[esp+68]
	push	edx
	fmulp	ST(1), ST(0)
	fld	DWORD PTR ?b_ps@?BI@??Show@CStats@@QAEXXZ@4MA
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR ?b_ps@?BI@??Show@CStats@@QAEXXZ@4MA
	call	eax

; 198  : 		F.SetColor	(0xFFFFFFFF	);
; 199  : 
; 200  : 		F.OutSet	(0,0);

	xorps	xmm0, xmm0
	mov	DWORD PTR [edi+20], -1
	movss	DWORD PTR [edi+28], xmm0
	movss	DWORD PTR [edi+32], xmm0

; 201  : 		F.OutNext	("FPS/RFPS:    %3.1f/%3.1f",fFPS,fRFPS);

	fld	DWORD PTR [esi+232]
	sub	esp, 16					; 00000010H
	fstp	QWORD PTR [esp+8]
	fld	DWORD PTR [esi+228]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BJ@IFJKDPI@FPS?1RFPS?3?5?5?5?5?$CF3?41f?1?$CF3?41f?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 202  : 		F.OutNext	("TPS:         %2.2f M",	fTPS);

	fld	DWORD PTR [esi+236]
	add	esp, 16					; 00000010H
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BF@MNPNADDL@TPS?3?5?5?5?5?5?5?5?5?5?$CF2?42f?5M?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 203  : 		m_pRender->OutData1(F);

	mov	ecx, DWORD PTR [esi+3528]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	add	esp, 16					; 00000010H
	push	edi
	call	eax

; 204  : 		//F.OutNext	("VERT:        %d/%d",		RCache.stat.verts,RCache.stat.calls?RCache.stat.verts/RCache.stat.calls:0);
; 205  : 		//F.OutNext	("POLY:        %d/%d",		RCache.stat.polys,RCache.stat.calls?RCache.stat.polys/RCache.stat.calls:0);
; 206  : 		//F.OutNext	("DIP/DP:      %d",			RCache.stat.calls);
; 207  : #ifdef DEBUG
; 208  : 		F.OutSkip	();
; 209  : 		F.OutNext	("mapped:      %d",			g_file_mapped_memory);
; 210  : 		F.OutSkip	();
; 211  : 		m_pRender->OutData2(F);
; 212  : 		//F.OutNext	("SH/T/M/C:    %d/%d/%d/%d",RCache.stat.states,RCache.stat.textures,RCache.stat.matrices,RCache.stat.constants);
; 213  : 		//F.OutNext	("RT/PS/VS:    %d/%d/%d",	RCache.stat.target_rt,RCache.stat.ps,RCache.stat.vs);
; 214  : 		//F.OutNext	("DCL/VB/IB:   %d/%d/%d",   RCache.stat.decl,RCache.stat.vb,RCache.stat.ib);
; 215  : #endif
; 216  : 		m_pRender->OutData3(F);

	mov	ecx, DWORD PTR [esi+3528]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	push	edi
	call	eax

; 217  : 		//F.OutNext	("xforms:      %d",			RCache.stat.xforms);
; 218  : 		F.OutSkip	();

	movss	xmm0, DWORD PTR [edi+40]
	mulss	xmm0, DWORD PTR [edi+24]
	addss	xmm0, DWORD PTR [edi+32]
	movss	DWORD PTR [edi+32], xmm0

; 219  : 
; 220  : #define PPP(a) (100.f*float(a)/float(EngineTOTAL.result))
; 221  : 		F.OutNext	("*** ENGINE:  %2.2fms",EngineTOTAL.result);	

	fld	DWORD PTR [esi+328]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BF@GAIFIFFN@?$CK?$CK?$CK?5ENGINE?3?5?5?$CF2?42fms?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 222  : 		F.OutNext	("Memory:      %2.2fa",fMem_calls);

	fld	DWORD PTR [esi+240]
	add	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BE@PNKHDOA@Memory?3?5?5?5?5?5?5?$CF2?42fa?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 223  : 		F.OutNext	("uClients:    %2.2fms, %2.1f%%, crow(%d)/active(%d)/total(%d)",UpdateClient.result,PPP(UpdateClient.result),UpdateClient_crows,UpdateClient_active,UpdateClient_total);

	fld	DWORD PTR [esi+472]
	fld	ST(0)
	mov	ecx, DWORD PTR [esi+492]
	fdiv	DWORD PTR [esi+328]
	mov	edx, DWORD PTR [esi+488]
	mov	eax, DWORD PTR [esi+484]
	add	esp, 16					; 00000010H
	push	ecx
	push	edx
	push	eax
	sub	esp, 16					; 00000010H
	fmul	DWORD PTR __real@42c80000
	fstp	QWORD PTR [esp+8]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0DN@KABIJPOM@uClients?3?5?5?5?5?$CF2?42fms?0?5?$CF2?41f?$CF?$CF?0?5c@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 224  : 		F.OutNext	("uSheduler:   %2.2fms, %2.1f%%",Sheduler.result,		PPP(Sheduler.result));

	fld	DWORD PTR [esi+400]
	fld	ST(0)
	add	esp, 20					; 00000014H
	fdiv	DWORD PTR [esi+328]
	fmul	DWORD PTR __real@42c80000
	fstp	QWORD PTR [esp+8]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BO@EPCLLDKC@uSheduler?3?5?5?5?$CF2?42fms?0?5?$CF2?41f?$CF?$CF?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 225  : 		F.OutNext	("uSheduler_L: %2.2fms",fShedulerLoad);

	fld	DWORD PTR [esi+256]
	add	esp, 16					; 00000010H
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BF@CNLBCGFG@uSheduler_L?3?5?$CF2?42fms?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 226  : 		F.OutNext	("uParticles:  Qstart[%d] Qactive[%d] Qdestroy[%d]",	Particles_starting,Particles_active,Particles_destroy);

	mov	ecx, DWORD PTR [esi+504]
	mov	edx, DWORD PTR [esi+500]
	mov	eax, DWORD PTR [esi+496]
	push	ecx
	push	edx
	push	eax
	push	OFFSET ??_C@_0DB@OJAPPLEC@uParticles?3?5?5Qstart?$FL?$CFd?$FN?5Qactive?$FL@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 227  : 		F.OutNext	("spInsert:    o[%.2fms, %2.1f%%], p[%.2fms, %2.1f%%]",	g_SpatialSpace->stat_insert.result, PPP(g_SpatialSpace->stat_insert.result),	g_SpatialSpacePhysic->stat_insert.result, PPP(g_SpatialSpacePhysic->stat_insert.result));

	mov	ecx, DWORD PTR __imp_?g_SpatialSpacePhysic@@3PAVISpatial_DB@@A
	mov	edx, DWORD PTR [ecx]
	fld	DWORD PTR [edx+132]
	mov	eax, DWORD PTR __imp_?g_SpatialSpace@@3PAVISpatial_DB@@A
	fld1
	mov	ecx, DWORD PTR [eax]
	fdiv	DWORD PTR [esi+328]
	add	esp, 4
	fld	DWORD PTR [ecx+132]
	fld	ST(2)
	fmul	ST(0), ST(2)
	fld	DWORD PTR __real@42c80000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [esp+24]
	fxch	ST(3)
	fstp	QWORD PTR [esp+16]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [esp+8]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0DE@FDGFCPJF@spInsert?3?5?5?5?5o?$FL?$CF?42fms?0?5?$CF2?41f?$CF?$CF?$FN?0@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 228  : 		F.OutNext	("spRemove:    o[%.2fms, %2.1f%%], p[%.2fms, %2.1f%%]",	g_SpatialSpace->stat_remove.result, PPP(g_SpatialSpace->stat_remove.result),	g_SpatialSpacePhysic->stat_remove.result, PPP(g_SpatialSpacePhysic->stat_remove.result));

	mov	edx, DWORD PTR __imp_?g_SpatialSpacePhysic@@3PAVISpatial_DB@@A
	mov	eax, DWORD PTR [edx]
	fld	DWORD PTR [eax+204]
	mov	ecx, DWORD PTR __imp_?g_SpatialSpace@@3PAVISpatial_DB@@A
	fld1
	mov	edx, DWORD PTR [ecx]
	fdiv	DWORD PTR [esi+328]
	add	esp, 8
	fld	DWORD PTR [edx+204]
	fld	ST(2)
	fmul	ST(0), ST(2)
	fld	DWORD PTR __real@42c80000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [esp+24]
	fxch	ST(3)
	fstp	QWORD PTR [esp+16]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR [esp+8]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0DE@HMMIBILK@spRemove?3?5?5?5?5o?$FL?$CF?42fms?0?5?$CF2?41f?$CF?$CF?$FN?0@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 229  : 		F.OutNext	("Physics:     %2.2fms, %2.1f%%",Physics.result,		PPP(Physics.result));	

	fld	DWORD PTR [esi+216]
	fld	ST(0)
	add	esp, 24					; 00000018H
	fdiv	DWORD PTR [esi+328]
	fmul	DWORD PTR __real@42c80000
	fstp	QWORD PTR [esp+8]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BO@ECLKJNIN@Physics?3?5?5?5?5?5?$CF2?42fms?0?5?$CF2?41f?$CF?$CF?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 230  : 		F.OutNext	("  collider:  %2.2fms", ph_collision.result);	

	fld	DWORD PTR [esi+72]
	add	esp, 16					; 00000010H
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BF@NNLLGFBJ@?5?5collider?3?5?5?$CF2?42fms?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 231  : 		F.OutNext	("  solver:    %2.2fms, %d",ph_core.result,ph_core.count);	

	fld	DWORD PTR [esi+144]
	mov	eax, DWORD PTR [esi+148]
	add	esp, 16					; 00000010H
	push	eax
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BJ@JBPMDCPI@?5?5solver?3?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 232  : 		F.OutNext	("aiThink:     %2.2fms, %d",AI_Think.result,AI_Think.count);	

	fld	DWORD PTR [esi+576]
	mov	ecx, DWORD PTR [esi+580]
	add	esp, 20					; 00000014H
	push	ecx
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BJ@HMJEEDJ@aiThink?3?5?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 233  : 		F.OutNext	("  aiRange:   %2.2fms, %d",AI_Range.result,AI_Range.count);

	fld	DWORD PTR [esi+648]
	mov	edx, DWORD PTR [esi+652]
	add	esp, 20					; 00000014H
	push	edx
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BJ@PPCHOGNC@?5?5aiRange?3?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 234  : 		F.OutNext	("  aiPath:    %2.2fms, %d",AI_Path.result,AI_Path.count);

	fld	DWORD PTR [esi+720]
	mov	eax, DWORD PTR [esi+724]
	add	esp, 20					; 00000014H
	push	eax
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BJ@BNMKCIFH@?5?5aiPath?3?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 235  : 		F.OutNext	("  aiNode:    %2.2fms, %d",AI_Node.result,AI_Node.count);

	fld	DWORD PTR [esi+792]
	mov	ecx, DWORD PTR [esi+796]
	add	esp, 20					; 00000014H
	push	ecx
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BJ@HMPAIJIN@?5?5aiNode?3?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 236  : 		F.OutNext	("aiVision:    %2.2fms, %d",AI_Vis.result,AI_Vis.count);

	fld	DWORD PTR [esi+864]
	mov	edx, DWORD PTR [esi+868]
	add	esp, 20					; 00000014H
	push	edx
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BJ@MFHCPPNM@aiVision?3?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 237  : 		F.OutNext	("  Query:     %2.2fms",	AI_Vis_Query.result);

	fld	DWORD PTR [esi+936]
	add	esp, 12					; 0000000cH
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BF@JDLFIALP@?5?5Query?3?5?5?5?5?5?$CF2?42fms?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 238  : 		F.OutNext	("  RayCast:   %2.2fms",	AI_Vis_RayTests.result);

	fld	DWORD PTR [esi+1008]
	add	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BF@IDMJKLFF@?5?5RayCast?3?5?5?5?$CF2?42fms?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 239  : 		F.OutSkip	();

	movss	xmm0, DWORD PTR [edi+40]
	mulss	xmm0, DWORD PTR [edi+24]
	addss	xmm0, DWORD PTR [edi+32]
	movss	DWORD PTR [edi+32], xmm0

; 240  : 								   
; 241  : #undef  PPP
; 242  : #define PPP(a) (100.f*float(a)/float(RenderTOTAL.result))
; 243  : 		F.OutNext	("*** RENDER:  %2.2fms",RenderTOTAL.result);

	fld	DWORD PTR [esi+1080]
	add	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BF@FDFMJHDC@?$CK?$CK?$CK?5RENDER?3?5?5?$CF2?42fms?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 244  : 		F.OutNext	("R_CALC:      %2.2fms, %2.1f%%",RenderCALC.result,	PPP(RenderCALC.result));	

	fld	DWORD PTR [esi+1224]
	fld	ST(0)
	fdiv	DWORD PTR [esi+1080]
	fmul	DWORD PTR __real@42c80000
	fstp	QWORD PTR [esp+8]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BO@OPEPBDDK@R_CALC?3?5?5?5?5?5?5?$CF2?42fms?0?5?$CF2?41f?$CF?$CF?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 245  : 		F.OutNext	("  HOM:       %2.2fms, %d",RenderCALC_HOM.result,	RenderCALC_HOM.count);

	fld	DWORD PTR [esi+1296]
	mov	eax, DWORD PTR [esi+1300]
	add	esp, 24					; 00000018H
	push	eax
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BJ@EFHBALAC@?5?5HOM?3?5?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 246  : 		F.OutNext	("  Skeletons: %2.2fms, %d",Animation.result,		Animation.count);

	fld	DWORD PTR [esi+1368]
	mov	ecx, DWORD PTR [esi+1372]
	add	esp, 20					; 00000014H
	push	ecx
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BJ@FHBLOIPO@?5?5Skeletons?3?5?$CF2?42fms?0?5?$CFd?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 247  : 		F.OutNext	("R_DUMP:      %2.2fms, %2.1f%%",RenderDUMP.result,	PPP(RenderDUMP.result));	

	fld	DWORD PTR [esi+1440]
	fld	ST(0)
	add	esp, 4
	fdiv	DWORD PTR [esi+1080]
	fmul	DWORD PTR __real@42c80000
	fstp	QWORD PTR [esp+8]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BO@FOJEBHND@R_DUMP?3?5?5?5?5?5?5?$CF2?42fms?0?5?$CF2?41f?$CF?$CF?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 248  : 		F.OutNext	("  Wait-L:    %2.2fms",RenderDUMP_Wait.result);	

	fld	DWORD PTR [esi+1512]
	add	esp, 16					; 00000010H
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BF@HFPLLIFJ@?5?5Wait?9L?3?5?5?5?5?$CF2?42fms?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 249  : 		F.OutNext	("  Wait-S:    %2.2fms",RenderDUMP_Wait_S.result);	

	fld	DWORD PTR [esi+1584]
	add	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BF@EFNNDAMD@?5?5Wait?9S?3?5?5?5?5?$CF2?42fms?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 250  : 		F.OutNext	("  Skinning:  %2.2fms",RenderDUMP_SKIN.result);	

	fld	DWORD PTR [esi+1728]
	add	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BF@MPFCGMOA@?5?5Skinning?3?5?5?$CF2?42fms?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 251  : 		F.OutNext	("  DT_Vis/Cnt:%2.2fms",RenderDUMP_DT_VIS.result,RenderDUMP_DT_Count);	

	fld	DWORD PTR [esi+2104]
	mov	edx, DWORD PTR [esi+2256]
	add	esp, 16					; 00000010H
	push	edx
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BF@BKKHFLPN@?5?5DT_Vis?1Cnt?3?$CF2?42fms?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 252  : 		F.OutNext	("  DT_Render: %2.2fms",RenderDUMP_DT_Render.result);	

	fld	DWORD PTR [esi+2176]
	add	esp, 12					; 0000000cH
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BF@OKBCALEJ@?5?5DT_Render?3?5?$CF2?42fms?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 253  : 		F.OutNext	("  DT_Cache:  %2.2fms",RenderDUMP_DT_Cache.result);	

	fld	DWORD PTR [esi+2248]
	add	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BF@FJGGOBAO@?5?5DT_Cache?3?5?5?$CF2?42fms?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext
	add	esp, 16					; 00000010H

; 254  : 		F.OutNext	("  Wallmarks: %2.2fms, %d/%d - %d",RenderDUMP_WM.result,RenderDUMP_WMS_Count,RenderDUMP_WMD_Count,RenderDUMP_WMT_Count);

	mov	eax, DWORD PTR [esi+2032]
	fld	DWORD PTR [esi+2016]
	mov	ecx, DWORD PTR [esi+2028]
	mov	edx, DWORD PTR [esi+2024]
	push	eax
	push	ecx
	push	edx
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CB@NKNAGCBE@?5?5Wallmarks?3?5?$CF2?42fms?0?5?$CFd?1?$CFd?5?9?5?$CFd@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 255  : 		F.OutNext	("  Glows:     %2.2fms",RenderDUMP_Glows.result);	

	fld	DWORD PTR [esi+1872]
	add	esp, 20					; 00000014H
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BF@OEPBILAK@?5?5Glows?3?5?5?5?5?5?$CF2?42fms?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 256  : 		F.OutNext	("  Lights:    %2.2fms, %d",RenderDUMP_Lights.result,RenderDUMP_Lights.count);

	fld	DWORD PTR [esi+1944]
	mov	eax, DWORD PTR [esi+1948]
	add	esp, 16					; 00000010H
	push	eax
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BJ@BKLKFPEA@?5?5Lights?3?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 257  : 		F.OutNext	("  RT:        %2.2fms, %d",RenderDUMP_RT.result,RenderDUMP_RT.count);

	fld	DWORD PTR [esi+1656]
	mov	ecx, DWORD PTR [esi+1660]
	add	esp, 20					; 00000014H
	push	ecx
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BJ@HGBJCLAG@?5?5RT?3?5?5?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 258  : 		F.OutNext	("  HUD:       %2.2fms",RenderDUMP_HUD.result);	

	fld	DWORD PTR [esi+1800]
	add	esp, 12					; 0000000cH
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BF@LLPEBLPO@?5?5HUD?3?5?5?5?5?5?5?5?$CF2?42fms?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 259  : 		F.OutNext	("  P_calc:    %2.2fms",RenderDUMP_Pcalc.result);

	fld	DWORD PTR [esi+2328]
	add	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BF@BDKPJFNJ@?5?5P_calc?3?5?5?5?5?$CF2?42fms?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 260  : 		F.OutNext	("  S_calc:    %2.2fms",RenderDUMP_Scalc.result);

	fld	DWORD PTR [esi+2400]
	add	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BF@LAPJBDHA@?5?5S_calc?3?5?5?5?5?$CF2?42fms?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 261  : 		F.OutNext	("  S_render:  %2.2fms, %d",RenderDUMP_Srender.result,RenderDUMP_Srender.count);

	fld	DWORD PTR [esi+2472]
	mov	edx, DWORD PTR [esi+2476]
	add	esp, 16					; 00000010H
	push	edx
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BJ@PBMKFOC@?5?5S_render?3?5?5?$CF2?42fms?0?5?$CFd?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 262  : 		F.OutSkip	();

	movss	xmm0, DWORD PTR [edi+40]
	mulss	xmm0, DWORD PTR [edi+24]
	addss	xmm0, DWORD PTR [edi+32]

; 263  : 		F.OutNext	("*** SOUND:   %2.2fms",Sound.result);

	add	esp, 12					; 0000000cH
	movss	DWORD PTR [edi+32], xmm0
	fld	DWORD PTR [esi+2544]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BF@NHHJFKEL@?$CK?$CK?$CK?5SOUND?3?5?5?5?$CF2?42fms?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 264  : 		F.OutNext	("  TGT/SIM/E: %d/%d/%d",  snd_stat._rendered, snd_stat._simulated, snd_stat._events);

	mov	eax, DWORD PTR _snd_stat$126058[esp+96]
	mov	ecx, DWORD PTR _snd_stat$126058[esp+84]
	mov	edx, DWORD PTR _snd_stat$126058[esp+80]
	push	eax
	push	ecx
	push	edx
	push	OFFSET ??_C@_0BG@OIGJKNAK@?5?5TGT?1SIM?1E?3?5?$CFd?1?$CFd?1?$CFd?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 265  : 		F.OutNext	("  HIT/MISS:  %d/%d",  snd_stat._cache_hits, snd_stat._cache_misses);

	mov	eax, DWORD PTR _snd_stat$126058[esp+112]
	mov	ecx, DWORD PTR _snd_stat$126058[esp+108]
	add	esp, 36					; 00000024H
	push	eax
	push	ecx
	push	OFFSET ??_C@_0BD@BMCGFMBB@?5?5HIT?1MISS?3?5?5?$CFd?1?$CFd?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 266  : 		F.OutSkip	();

	movss	xmm0, DWORD PTR [edi+40]
	mulss	xmm0, DWORD PTR [edi+24]
	addss	xmm0, DWORD PTR [edi+32]
	movss	DWORD PTR [edi+32], xmm0

; 267  : 		F.OutNext	("Input:       %2.2fms",Input.result);

	fld	DWORD PTR [esi+2616]
	add	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BF@BGCGFBGC@Input?3?5?5?5?5?5?5?5?$CF2?42fms?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 268  : 		F.OutNext	("clRAY:       %2.2fms, %d, %2.0fK",clRAY.result,		clRAY.count,r_ps);

	fld	DWORD PTR ?r_ps@?BI@??Show@CStats@@QAEXXZ@4MA
	mov	edx, DWORD PTR [esi+2692]
	fstp	QWORD PTR [esp+8]
	fld	DWORD PTR [esi+2688]
	add	esp, 8
	push	edx
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CB@BPIDGGE@clRAY?3?5?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?0?5?$CF2?40fK@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 269  : 		F.OutNext	("clBOX:       %2.2fms, %d, %2.0fK",clBOX.result,		clBOX.count,b_ps);

	fld	DWORD PTR ?b_ps@?BI@??Show@CStats@@QAEXXZ@4MA
	mov	eax, DWORD PTR [esi+2764]
	fstp	QWORD PTR [esp+20]
	fld	DWORD PTR [esi+2760]
	add	esp, 20					; 00000014H
	push	eax
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0CB@DNLFDGGB@clBOX?3?5?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?0?5?$CF2?40fK@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 270  : 		F.OutNext	("clFRUSTUM:   %2.2fms, %d",		clFRUSTUM.result,	clFRUSTUM.count	);

	fld	DWORD PTR [esi+2832]
	mov	ecx, DWORD PTR [esi+2836]
	add	esp, 28					; 0000001cH
	push	ecx
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BJ@JGHNPLIH@clFRUSTUM?3?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 271  : 		F.OutSkip	();

	movss	xmm0, DWORD PTR [edi+40]
	mulss	xmm0, DWORD PTR [edi+24]
	addss	xmm0, DWORD PTR [edi+32]
	add	esp, 20					; 00000014H
	movss	DWORD PTR [edi+32], xmm0

; 272  : 		F.OutNext	("netClientRecv:   %2.2fms, %d",	netClient1.result,netClient1.count);

	fld	DWORD PTR [esi+2904]
	mov	edx, DWORD PTR [esi+2908]
	push	edx
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BN@GEBICGEC@netClientRecv?3?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 273  : 		F.OutNext	("netClientSend:   %2.2fms, %d",	netClient2.result,netClient2.count);

	fld	DWORD PTR [esi+2976]
	mov	eax, DWORD PTR [esi+2980]
	add	esp, 20					; 00000014H
	push	eax
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BN@DBLJNLFF@netClientSend?3?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 274  : 		F.OutNext	("netServer:   %2.2fms, %d",		netServer.result,netServer.count);

	fld	DWORD PTR [esi+3048]
	mov	ecx, DWORD PTR [esi+3052]
	add	esp, 20					; 00000014H
	push	ecx
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BJ@DDFDIGEH@netServer?3?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 275  : 		F.OutNext	("netClientCompressor:   %2.2fms",	netClientCompressor.result);

	fld	DWORD PTR [esi+3120]
	add	esp, 12					; 0000000cH
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BP@FIEGAGFH@netClientCompressor?3?5?5?5?$CF2?42fms?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 276  : 		F.OutNext	("netServerCompressor:   %2.2fms",	netServerCompressor.result);

	fld	DWORD PTR [esi+3192]
	add	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BP@OIBIPHKB@netServerCompressor?3?5?5?5?$CF2?42fms?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 277  : 		
; 278  : 		F.OutSkip	();

	movss	xmm0, DWORD PTR [edi+40]
	mulss	xmm0, DWORD PTR [edi+24]

; 279  : 
; 280  : 		F.OutSkip	();

	mulss	xmm0, DWORD PTR __real@40000000
	addss	xmm0, DWORD PTR [edi+32]
	add	esp, 16					; 00000010H
	movss	DWORD PTR [edi+32], xmm0

; 281  : 		F.OutNext	("TEST 0:      %2.2fms, %d",TEST0.result,TEST0.count);

	fld	DWORD PTR [esi+3264]
	mov	edx, DWORD PTR [esi+3268]
	push	edx
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BJ@HBKJBHGJ@TEST?50?3?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 282  : 		F.OutNext	("TEST 1:      %2.2fms, %d",TEST1.result,TEST1.count);

	fld	DWORD PTR [esi+3336]
	mov	eax, DWORD PTR [esi+3340]
	add	esp, 20					; 00000014H
	push	eax
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BJ@BEMOCMCP@TEST?51?3?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 283  : 		F.OutNext	("TEST 2:      %2.2fms, %d",TEST2.result,TEST2.count);

	fld	DWORD PTR [esi+3408]
	mov	ecx, DWORD PTR [esi+3412]
	add	esp, 20					; 00000014H
	push	ecx
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BJ@LLGHGBOF@TEST?52?3?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 284  : 		F.OutNext	("TEST 3:      %2.2fms, %d",TEST3.result,TEST3.count);

	fld	DWORD PTR [esi+3480]
	mov	edx, DWORD PTR [esi+3484]
	add	esp, 20					; 00000014H
	push	edx
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BJ@NOAAFKKD@TEST?53?3?5?5?5?5?5?5?$CF2?42fms?0?5?$CFd?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 285  : #ifdef DEBUG_MEMORY_MANAGER
; 286  : 		F.OutSkip	();
; 287  : 		F.OutNext	("str: cmp[%3d], dock[%3d], qpc[%3d]",Memory.stat_strcmp,Memory.stat_strdock,CPU::qpc_counter);
; 288  : 		Memory.stat_strcmp	=	0		;
; 289  : 		Memory.stat_strdock	=	0		;
; 290  : 		CPU::qpc_counter	=	0		;
; 291  : #else // DEBUG_MEMORY_MANAGER
; 292  : 		F.OutSkip	();

	movss	xmm0, DWORD PTR [edi+40]
	mulss	xmm0, DWORD PTR [edi+24]
	addss	xmm0, DWORD PTR [edi+32]

; 293  : 		F.OutNext	("qpc[%3d]",CPU::qpc_counter);

	mov	eax, DWORD PTR __imp_?qpc_counter@CPU@@3IA
	add	esp, 20					; 00000014H
	movss	DWORD PTR [edi+32], xmm0
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_08CFBNLEMF@qpc?$FL?$CF3d?$FN?$AA@
	push	edi
	call	?OutNext@CGameFont@@QAAXPBDZZ		; CGameFont::OutNext

; 294  : 		CPU::qpc_counter	=	0		;

	mov	edx, DWORD PTR __imp_?qpc_counter@CPU@@3IA
	mov	DWORD PTR [edx], 0

; 295  : #endif // DEBUG_MEMORY_MANAGER
; 296  : //		F.OutSet	(640,0);
; 297  : 		F.OutSkip	();

	movss	xmm0, DWORD PTR [edi+40]
	mulss	xmm0, DWORD PTR [edi+24]
	addss	xmm0, DWORD PTR [edi+32]
	movss	DWORD PTR [edi+32], xmm0

; 298  : 		m_pRender->OutData4(F);

	mov	ecx, DWORD PTR [esi+3528]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+20]
	add	esp, 12					; 0000000cH
	push	edi
	call	edx

; 299  : 		/*
; 300  : 		F.OutNext	("static:        %3.1f/%d",	RCache.stat.r.s_static.verts/1024.f,		RCache.stat.r.s_static.dips );
; 301  : 		F.OutNext	("flora:         %3.1f/%d",	RCache.stat.r.s_flora.verts/1024.f,			RCache.stat.r.s_flora.dips );
; 302  : 		F.OutNext	("  flora_lods:  %3.1f/%d",	RCache.stat.r.s_flora_lods.verts/1024.f,	RCache.stat.r.s_flora_lods.dips );
; 303  : 		F.OutNext	("dynamic:       %3.1f/%d",	RCache.stat.r.s_dynamic.verts/1024.f,		RCache.stat.r.s_dynamic.dips );
; 304  : 		F.OutNext	("  dynamic_sw:  %3.1f/%d",	RCache.stat.r.s_dynamic_sw.verts/1024.f,	RCache.stat.r.s_dynamic_sw.dips );
; 305  : 		F.OutNext	("  dynamic_inst:%3.1f/%d",	RCache.stat.r.s_dynamic_inst.verts/1024.f,	RCache.stat.r.s_dynamic_inst.dips );
; 306  : 		F.OutNext	("  dynamic_1B:  %3.1f/%d",	RCache.stat.r.s_dynamic_1B.verts/1024.f,	RCache.stat.r.s_dynamic_1B.dips );
; 307  : 		F.OutNext	("  dynamic_2B:  %3.1f/%d",	RCache.stat.r.s_dynamic_2B.verts/1024.f,	RCache.stat.r.s_dynamic_2B.dips );
; 308  : 		F.OutNext	("details:       %3.1f/%d",	RCache.stat.r.s_details.verts/1024.f,		RCache.stat.r.s_details.dips );
; 309  : */
; 310  : 		//////////////////////////////////////////////////////////////////////////
; 311  : 		// Renderer specific
; 312  : 		F.SetHeightI						(f_base_size);

	fild	DWORD PTR ?Device@@3VCRenderDevice@@A+8
	mov	eax, DWORD PTR ?Device@@3VCRenderDevice@@A+8
	test	eax, eax
	jge	SHORT $LN292@Show@2
	fadd	DWORD PTR __real@4f800000
$LN292@Show@2:

; 313  : 		F.OutSet						(200,0);

	movss	xmm0, DWORD PTR __real@43480000
	fmul	DWORD PTR __real@3c23d70a

; 314  : 		Render->Statistics				(&F);

	mov	ecx, DWORD PTR __imp_?Render@@3PAVIRender_interface@@A
	movss	DWORD PTR [edi+28], xmm0
	xorps	xmm0, xmm0
	fstp	DWORD PTR [edi+24]
	movss	DWORD PTR [edi+32], xmm0
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+40]
	push	edi
	call	eax

; 315  : 
; 316  : 		//////////////////////////////////////////////////////////////////////////
; 317  : 		// Game specific
; 318  : 		F.SetHeightI						(f_base_size);

	fild	DWORD PTR ?Device@@3VCRenderDevice@@A+8
	mov	ecx, DWORD PTR ?Device@@3VCRenderDevice@@A+8
	test	ecx, ecx
	jge	SHORT $LN293@Show@2
	fadd	DWORD PTR __real@4f800000
$LN293@Show@2:

; 319  : 		F.OutSet						(400,0);

	movss	xmm0, DWORD PTR __real@43c80000
	fmul	DWORD PTR __real@3c23d70a
	movss	DWORD PTR [edi+28], xmm0
	xorps	xmm0, xmm0
	fstp	DWORD PTR [edi+24]
	movss	DWORD PTR [edi+32], xmm0

; 320  : 		g_pGamePersistent->Statistics	(&F);

	mov	ecx, DWORD PTR ?g_pGamePersistent@@3PAVIGame_Persistent@@A ; g_pGamePersistent
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+68]
	push	edi
	call	eax

; 321  : 
; 322  : 		//////////////////////////////////////////////////////////////////////////
; 323  : 		// process PURE STATS
; 324  : 		F.SetHeightI						(f_base_size);

	fild	DWORD PTR ?Device@@3VCRenderDevice@@A+8
	mov	ecx, DWORD PTR ?Device@@3VCRenderDevice@@A+8
	test	ecx, ecx
	jge	SHORT $LN294@Show@2
	fadd	DWORD PTR __real@4f800000
$LN294@Show@2:
	fmul	DWORD PTR __real@3c23d70a

; 325  : 		seqStats.Process				(rp_Stats);

	lea	eax, DWORD PTR [esi+3512]
	fstp	DWORD PTR [edi+24]
	call	?Process@?$CRegistrator@VpureStats@@@@QAEXP6IXPAX@Z@Z ; CRegistrator<pureStats>::Process

; 326  : 		pFont->OnRender					();

	mov	edi, DWORD PTR [esi+224]
	mov	ecx, DWORD PTR [edi+76]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	push	edi
	call	eax
	add	edi, 64					; 00000040H
	mov	ecx, edi
	call	?end@?$_Impl_vector@UString@CGameFont@@V?$xalloc@UString@CGameFont@@@@@priv@stlp_std@@QAEPAUString@CGameFont@@XZ ; stlp_std::priv::_Impl_vector<CGameFont::String,xalloc<CGameFont::String> >::end
	mov	ecx, edi
	mov	DWORD PTR $T522463[esp+64], eax
	call	?begin@?$_Impl_vector@UString@CGameFont@@V?$xalloc@UString@CGameFont@@@@@priv@stlp_std@@QAEPAUString@CGameFont@@XZ ; stlp_std::priv::_Impl_vector<CGameFont::String,xalloc<CGameFont::String> >::begin
	mov	ecx, DWORD PTR $T522463[esp+64]
	push	ecx
	push	eax
	mov	ecx, edi
	call	?erase@?$_Impl_vector@UString@CGameFont@@V?$xalloc@UString@CGameFont@@@@@priv@stlp_std@@QAEPAUString@CGameFont@@PAU45@0@Z ; stlp_std::priv::_Impl_vector<CGameFont::String,xalloc<CGameFont::String> >::erase
$LN239@Show@2:

; 327  : 	};
; 328  : 
; 329  : 	if( /*psDeviceFlags.test(rsStatistic) ||*/ psDeviceFlags.test(rsCameraPos) ){

	push	262144					; 00040000H
	mov	ecx, OFFSET ?psDeviceFlags@@3U?$_flags@I@@A ; psDeviceFlags
	call	?test@?$_flags@I@@QBEHI@Z		; _flags<unsigned int>::test
	test	eax, eax
	je	SHORT $LN282@Show@2

; 330  : 		_draw_cam_pos					(pFont);

	mov	eax, DWORD PTR [esi+224]
	call	?_draw_cam_pos@@YAXPAVCGameFont@@@Z	; _draw_cam_pos

; 331  : 		pFont->OnRender					();

	mov	edi, DWORD PTR [esi+224]
	mov	ecx, DWORD PTR [edi+76]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	push	edi
	call	eax
	add	edi, 64					; 00000040H
	mov	ecx, edi
	call	?end@?$_Impl_vector@UString@CGameFont@@V?$xalloc@UString@CGameFont@@@@@priv@stlp_std@@QAEPAUString@CGameFont@@XZ ; stlp_std::priv::_Impl_vector<CGameFont::String,xalloc<CGameFont::String> >::end
	mov	ecx, edi
	mov	DWORD PTR $T522562[esp+64], eax
	call	?begin@?$_Impl_vector@UString@CGameFont@@V?$xalloc@UString@CGameFont@@@@@priv@stlp_std@@QAEPAUString@CGameFont@@XZ ; stlp_std::priv::_Impl_vector<CGameFont::String,xalloc<CGameFont::String> >::begin
	mov	ecx, DWORD PTR $T522562[esp+64]
	push	ecx
	push	eax
	mov	ecx, edi
	call	?erase@?$_Impl_vector@UString@CGameFont@@V?$xalloc@UString@CGameFont@@@@@priv@stlp_std@@QAEPAUString@CGameFont@@PAU45@0@Z ; stlp_std::priv::_Impl_vector<CGameFont::String,xalloc<CGameFont::String> >::erase
$LN282@Show@2:

; 332  : 	};
; 333  : #ifdef DEBUG
; 334  : 	//////////////////////////////////////////////////////////////////////////
; 335  : 	// PERF ALERT
; 336  : 	if (!g_bDisableRedText)
; 337  : 	{
; 338  : 		CGameFont&	F = *((CGameFont*)pFont);
; 339  : 		F.SetColor						(color_rgba(255,16,16,255));
; 340  : 		F.OutSet						(300,300);
; 341  : 		F.SetHeightI						(f_base_size*2);
; 342  : 		if (fFPS<30)					F.OutNext	("FPS       < 30:   %3.1f",	fFPS);
; 343  : 		//if (RCache.stat.verts>500000)	F.OutNext	("Verts     > 500k: %d",	RCache.stat.verts);
; 344  : 		m_pRender->GuardVerts(F);
; 345  : 		////if (RCache.stat.polys>500000)	F.OutNext	("Polys     > 500k: %d",	RCache.stat.polys);
; 346  : 		if (psDeviceFlags.test(rsStatistic))
; 347  : 		{
; 348  : 			m_pRender->GuardDrawCalls(F);
; 349  : 			//if (RCache.stat.calls>1000)		F.OutNext	("DIP/DP    > 1k:   %d",	RCache.stat.calls);
; 350  : 			////if (RCache.stat.textures>1000)F.OutNext	("T_change  > 500:  %d",	RCache.stat.textures);
; 351  : 			if (RenderDUMP_DT_Count>1000)	F.OutNext	("DT_count  > 1000: %u",	RenderDUMP_DT_Count);
; 352  : 			F.OutSkip						();
; 353  : 			//if (fMem_calls>1500)			F.OutNext	("MMGR calls > 1500:%3.1f",	fMem_calls);
; 354  : 			if (Sheduler.result>3.f)		F.OutNext	("Update     > 3ms:	%3.1f",	Sheduler.result);
; 355  : 			if (UpdateClient.result>3.f)	F.OutNext	("UpdateCL   > 3ms: %3.1f",	UpdateClient.result);
; 356  : 			if (Physics.result>5.f)			F.OutNext	("Physics    > 5ms: %3.1f",	Physics.result);	
; 357  : 		}
; 358  : 	}
; 359  : 
; 360  : 	//////////////////////////////////////////////////////////////////////////
; 361  : 	// Show errors
; 362  : 	if (!g_bDisableRedText && errors.size())
; 363  : 	{
; 364  : 		CGameFont&	F = *((CGameFont*)pFont);
; 365  : 		F.SetColor	(color_rgba(255,16,16,191));
; 366  : 		F.OutSet	(200,0);
; 367  : 		F.SetHeightI	(f_base_size);
; 368  : #if 0
; 369  : 		for (u32 it=0; it<errors.size(); it++)
; 370  : 			F.OutNext("%s",errors[it].c_str());
; 371  : #else
; 372  : 		for (u32 it=(u32)_max(int(0),(int)errors.size() - g_ErrorLineCount); it<errors.size(); it++)
; 373  : 			F.OutNext("%s",errors[it].c_str());
; 374  : #endif
; 375  : 		F.OnRender	();
; 376  : 	}
; 377  : #endif
; 378  : 
; 379  : 	{
; 380  : 		EngineTOTAL.FrameStart		();	

	mov	edi, DWORD PTR __imp_?FrameStart@CStatTimer@@QAEXXZ
	mov	ecx, ebp
	call	edi

; 381  : 		Sheduler.FrameStart			();	

	mov	ecx, ebx
	call	edi

; 382  : 		UpdateClient.FrameStart		();	

	lea	ecx, DWORD PTR [esi+408]
	call	edi

; 383  : 		Physics.FrameStart			();	

	lea	ecx, DWORD PTR [esi+152]
	call	edi

; 384  : 		ph_collision.FrameStart		();

	lea	ecx, DWORD PTR [esi+8]
	call	edi

; 385  : 		ph_core.FrameStart			();

	lea	ecx, DWORD PTR [esi+80]
	call	edi

; 386  : 		Animation.FrameStart		();	

	lea	ecx, DWORD PTR [esi+1304]
	call	edi

; 387  : 		AI_Think.FrameStart			();

	lea	ecx, DWORD PTR [esi+512]
	call	edi

; 388  : 		AI_Range.FrameStart			();

	lea	ecx, DWORD PTR [esi+584]
	call	edi

; 389  : 		AI_Path.FrameStart			();

	lea	ecx, DWORD PTR [esi+656]
	call	edi

; 390  : 		AI_Node.FrameStart			();

	lea	ecx, DWORD PTR [esi+728]
	call	edi

; 391  : 		AI_Vis.FrameStart			();

	lea	ecx, DWORD PTR [esi+800]
	call	edi

; 392  : 		AI_Vis_Query.FrameStart		();

	lea	ecx, DWORD PTR [esi+872]
	call	edi

; 393  : 		AI_Vis_RayTests.FrameStart	();

	lea	ecx, DWORD PTR [esi+944]
	call	edi

; 394  : 		
; 395  : 		RenderTOTAL.FrameStart		();

	lea	ecx, DWORD PTR [esi+1016]
	call	edi

; 396  : 		RenderCALC.FrameStart		();

	lea	ecx, DWORD PTR [esi+1160]
	call	edi

; 397  : 		RenderCALC_HOM.FrameStart	();

	lea	ecx, DWORD PTR [esi+1232]
	call	edi

; 398  : 		RenderDUMP.FrameStart		();	

	lea	ecx, DWORD PTR [esi+1376]
	call	edi

; 399  : 		RenderDUMP_RT.FrameStart	();

	lea	ecx, DWORD PTR [esi+1592]
	call	edi

; 400  : 		RenderDUMP_SKIN.FrameStart	();	

	lea	ecx, DWORD PTR [esi+1664]
	call	edi

; 401  : 		RenderDUMP_Wait.FrameStart	();	

	lea	ecx, DWORD PTR [esi+1448]
	call	edi

; 402  : 		RenderDUMP_Wait_S.FrameStart();	

	lea	ecx, DWORD PTR [esi+1520]
	call	edi

; 403  : 		RenderDUMP_HUD.FrameStart	();	

	lea	ecx, DWORD PTR [esi+1736]
	call	edi

; 404  : 		RenderDUMP_Glows.FrameStart	();	

	lea	ecx, DWORD PTR [esi+1808]
	call	edi

; 405  : 		RenderDUMP_Lights.FrameStart();	

	lea	ecx, DWORD PTR [esi+1880]
	call	edi

; 406  : 		RenderDUMP_WM.FrameStart	();	

	lea	ecx, DWORD PTR [esi+1952]
	call	edi

; 407  : 		RenderDUMP_DT_VIS.FrameStart();	

	lea	ecx, DWORD PTR [esi+2040]
	call	edi

; 408  : 		RenderDUMP_DT_Render.FrameStart();	

	lea	ecx, DWORD PTR [esi+2112]
	call	edi

; 409  : 		RenderDUMP_DT_Cache.FrameStart();	

	lea	ecx, DWORD PTR [esi+2184]
	call	edi

; 410  : 		RenderDUMP_Pcalc.FrameStart	();	

	lea	ecx, DWORD PTR [esi+2264]
	call	edi

; 411  : 		RenderDUMP_Scalc.FrameStart	();	

	lea	ecx, DWORD PTR [esi+2336]
	call	edi

; 412  : 		RenderDUMP_Srender.FrameStart();	

	lea	ecx, DWORD PTR [esi+2408]
	call	edi

; 413  : 		
; 414  : 		Sound.FrameStart			();

	lea	ecx, DWORD PTR [esi+2480]
	call	edi

; 415  : 		Input.FrameStart			();

	lea	ecx, DWORD PTR [esi+2552]
	call	edi

; 416  : 		clRAY.FrameStart			();	

	lea	ecx, DWORD PTR [esi+2624]
	call	edi

; 417  : 		clBOX.FrameStart			();

	lea	ecx, DWORD PTR [esi+2696]
	call	edi

; 418  : 		clFRUSTUM.FrameStart		();

	lea	ecx, DWORD PTR [esi+2768]
	call	edi

; 419  : 		
; 420  : 		netClient1.FrameStart		();

	lea	ecx, DWORD PTR [esi+2840]
	call	edi

; 421  : 		netClient2.FrameStart		();

	lea	ecx, DWORD PTR [esi+2912]
	call	edi

; 422  : 		netServer.FrameStart		();

	lea	ecx, DWORD PTR [esi+2984]
	call	edi

; 423  : 		netClientCompressor.FrameStart();

	lea	ecx, DWORD PTR [esi+3056]
	call	edi

; 424  : 		netServerCompressor.FrameStart();

	lea	ecx, DWORD PTR [esi+3128]
	call	edi

; 425  : 
; 426  : 		TEST0.FrameStart			();

	lea	ecx, DWORD PTR [esi+3200]
	call	edi

; 427  : 		TEST1.FrameStart			();

	lea	ecx, DWORD PTR [esi+3272]
	call	edi

; 428  : 		TEST2.FrameStart			();

	lea	ecx, DWORD PTR [esi+3344]
	call	edi

; 429  : 		TEST3.FrameStart			();

	lea	ecx, DWORD PTR [esi+3416]
	call	edi

; 430  : 
; 431  : 		g_SpatialSpace->stat_insert.FrameStart		();

	mov	edx, DWORD PTR __imp_?g_SpatialSpace@@3PAVISpatial_DB@@A
	mov	ecx, DWORD PTR [edx]
	add	ecx, 68					; 00000044H
	call	edi

; 432  : 		g_SpatialSpace->stat_remove.FrameStart		();

	mov	eax, DWORD PTR __imp_?g_SpatialSpace@@3PAVISpatial_DB@@A
	mov	ecx, DWORD PTR [eax]
	add	ecx, 140				; 0000008cH
	call	edi

; 433  : 
; 434  : 		g_SpatialSpacePhysic->stat_insert.FrameStart();

	mov	ecx, DWORD PTR __imp_?g_SpatialSpacePhysic@@3PAVISpatial_DB@@A
	mov	ecx, DWORD PTR [ecx]
	add	ecx, 68					; 00000044H
	call	edi

; 435  : 		g_SpatialSpacePhysic->stat_remove.FrameStart();

	mov	edx, DWORD PTR __imp_?g_SpatialSpacePhysic@@3PAVISpatial_DB@@A
	mov	ecx, DWORD PTR [edx]
	add	ecx, 140				; 0000008cH
	call	edi

; 436  : 	}
; 437  : 	dwSND_Played = dwSND_Allocated = 0;

	xor	eax, eax
	mov	DWORD PTR [esi+252], eax
	mov	DWORD PTR [esi+248], eax

; 438  : 	Particles_starting = Particles_active = Particles_destroy = 0;

	mov	DWORD PTR [esi+504], eax
	mov	DWORD PTR [esi+500], eax
	mov	DWORD PTR [esi+496], eax
$LN10@Show@2:

; 439  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Show@CStats@@QAEXXZ ENDP				; CStats::Show
	ORG $+3
_vtune	DD	041f00000r			; 30
	DD	00H
END
