; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	D:\CLEARSKY\sources\engine\xrEngine\ObjectAnimator.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_ECObjectAnimator@@UAEPAXI@Z			; CObjectAnimator::`vector deleting destructor'
PUBLIC	??_R4CObjectAnimator@@6B@			; CObjectAnimator::`RTTI Complete Object Locator'
PUBLIC	??_R3CObjectAnimator@@8				; CObjectAnimator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObjectAnimator@@8				; CObjectAnimator::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CObjectAnimator@@8		; CObjectAnimator::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCObjectAnimator@@@8			; CObjectAnimator `RTTI Type Descriptor'
PUBLIC	?Stop@SAnimParams@@QAEXXZ			; SAnimParams::Stop
PUBLIC	?Pause@SAnimParams@@QAEX_N@Z			; SAnimParams::Pause
PUBLIC	??0?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::vector<COMotion *,xalloc<COMotion *> >::vector<COMotion *,xalloc<COMotion *> >
PUBLIC	??0?$xr_vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@@QAE@ABV0@@Z ; xr_vector<COMotion *,xalloc<COMotion *> >::xr_vector<COMotion *,xalloc<COMotion *> >
PUBLIC	??4?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAEAAV01@ABV01@@Z ; stlp_std::vector<COMotion *,xalloc<COMotion *> >::operator=
PUBLIC	??4?$xr_vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@@QAEAAV0@ABV0@@Z ; xr_vector<COMotion *,xalloc<COMotion *> >::operator=
PUBLIC	??M@YA_NABVshared_str@@0@Z			; operator<
PUBLIC	??0SAnimParams@@QAE@XZ				; SAnimParams::SAnimParams
PUBLIC	??0?$xalloc@PAVCOMotion@@@@QAE@XZ		; xalloc<COMotion *>::xalloc<COMotion *>
PUBLIC	??$?0PAVCOMotion@@@?$xalloc@PAX@@QAE@ABV?$xalloc@PAVCOMotion@@@@@Z ; xalloc<void *>::xalloc<void *><COMotion *>
PUBLIC	??0?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAE@ABV?$xalloc@PAVCOMotion@@@@@Z ; stlp_std::vector<COMotion *,xalloc<COMotion *> >::vector<COMotion *,xalloc<COMotion *> >
PUBLIC	??0?$xr_vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@@QAE@XZ ; xr_vector<COMotion *,xalloc<COMotion *> >::xr_vector<COMotion *,xalloc<COMotion *> >
PUBLIC	??1?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAE@XZ ; stlp_std::vector<COMotion *,xalloc<COMotion *> >::~vector<COMotion *,xalloc<COMotion *> >
PUBLIC	??1?$xr_vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@@QAE@XZ ; xr_vector<COMotion *,xalloc<COMotion *> >::~xr_vector<COMotion *,xalloc<COMotion *> >
PUBLIC	?clear@?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAEXXZ ; stlp_std::vector<COMotion *,xalloc<COMotion *> >::clear
PUBLIC	?clear_and_free@?$xr_vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@@QAEXXZ ; xr_vector<COMotion *,xalloc<COMotion *> >::clear_and_free
PUBLIC	?clear@?$xr_vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@@QAEXXZ ; xr_vector<COMotion *,xalloc<COMotion *> >::clear
PUBLIC	??R?$xr_special_free@$00VCOMotion@@@@QAEXAAPAVCOMotion@@@Z ; xr_special_free<1,COMotion>::operator()
PUBLIC	??$xr_delete@VCOMotion@@@@YAXAAPAVCOMotion@@@Z	; xr_delete<COMotion>
PUBLIC	?to_storage_type_cref@?$_CastTraits@PAXPAVCOMotion@@@priv@stlp_std@@SAABQAXABQAVCOMotion@@@Z ; stlp_std::priv::_CastTraits<void *,COMotion *>::to_storage_type_cref
PUBLIC	?push_back@?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAEXABQAVCOMotion@@@Z ; stlp_std::vector<COMotion *,xalloc<COMotion *> >::push_back
PUBLIC	??$xr_new@VCOMotion@@@@YAPAVCOMotion@@XZ	; xr_new<COMotion>
PUBLIC	??$__make_heap@PAPAVCOMotion@@P6A_NPAV1@0@ZPAV1@H@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV1@1@Z0PAH@Z ; stlp_std::__make_heap<COMotion * *,bool (__cdecl*)(COMotion *,COMotion *),COMotion *,int>
PUBLIC	??$make_heap@PAPAVCOMotion@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV1@1@Z@Z ; stlp_std::make_heap<COMotion * *,bool (__cdecl*)(COMotion *,COMotion *)>
PUBLIC	??$__push_heap@PAPAVCOMotion@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@HHPAV1@P6A_N11@Z@Z ; stlp_std::__push_heap<COMotion * *,int,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
PUBLIC	??$__adjust_heap@PAPAVCOMotion@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@HHPAV1@P6A_N11@Z@Z ; stlp_std::__adjust_heap<COMotion * *,int,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
PUBLIC	??$__pop_heap@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@ZH@stlp_std@@YAXPAPAVCOMotion@@00PAV1@P6A_N11@ZPAH@Z ; stlp_std::__pop_heap<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *),int>
PUBLIC	??$__pop_heap_aux@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@00P6A_NPAV1@1@Z@Z ; stlp_std::__pop_heap_aux<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
PUBLIC	??$pop_heap@PAPAVCOMotion@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV1@1@Z@Z ; stlp_std::pop_heap<COMotion * *,bool (__cdecl*)(COMotion *,COMotion *)>
PUBLIC	??$sort_heap@PAPAVCOMotion@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV1@1@Z@Z ; stlp_std::sort_heap<COMotion * *,bool (__cdecl*)(COMotion *,COMotion *)>
PUBLIC	??$__partial_sort@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@000P6A_NPAV2@1@Z@Z ; stlp_std::priv::__partial_sort<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
PUBLIC	??$partial_sort@PAPAVCOMotion@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@00P6A_NPAV1@1@Z@Z ; stlp_std::partial_sort<COMotion * *,bool (__cdecl*)(COMotion *,COMotion *)>
PUBLIC	??$__median@PAVCOMotion@@P6A_NPAV1@0@Z@priv@stlp_std@@YAABQAVCOMotion@@ABQAV2@00P6A_NPAV2@1@Z@Z ; stlp_std::priv::__median<COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
PUBLIC	?_Ret@?$_IsRefType@AAPAVCOMotion@@@stlp_std@@SA?AU__true_type@2@XZ ; stlp_std::_IsRefType<COMotion * &>::_Ret
PUBLIC	??$_IsOKToSwap@PAVCOMotion@@PAV1@U__true_type@stlp_std@@U23@@stlp_std@@YA?AU?$_OKToSwap@PAVCOMotion@@PAV1@U__true_type@stlp_std@@U23@@0@PAPAVCOMotion@@0ABU__true_type@0@1@Z ; stlp_std::_IsOKToSwap<COMotion *,COMotion *,stlp_std::__true_type,stlp_std::__true_type>
PUBLIC	?_Answer@?$_OKToSwap@PAVCOMotion@@PAV1@U__true_type@stlp_std@@U23@@stlp_std@@SA?AU__true_type@2@XZ ; stlp_std::_OKToSwap<COMotion *,COMotion *,stlp_std::__true_type,stlp_std::__true_type>::_Answer
PUBLIC	??$swap@PAVCOMotion@@@stlp_std@@YAXAAPAVCOMotion@@0@Z ; stlp_std::swap<COMotion *>
PUBLIC	??$__iter_swap_aux@PAPAVCOMotion@@PAPAV1@@priv@stlp_std@@YAXAAPAPAVCOMotion@@0ABU__true_type@1@@Z ; stlp_std::priv::__iter_swap_aux<COMotion * *,COMotion * *>
PUBLIC	??$iter_swap@PAPAVCOMotion@@PAPAV1@@stlp_std@@YAXPAPAVCOMotion@@0@Z ; stlp_std::iter_swap<COMotion * *,COMotion * *>
PUBLIC	??$__unguarded_partition@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAPAPAVCOMotion@@PAPAV2@0PAV2@P6A_N11@Z@Z ; stlp_std::priv::__unguarded_partition<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
PUBLIC	??$__introsort_loop@PAPAVCOMotion@@PAV1@HP6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@00HP6A_NPAV2@1@Z@Z ; stlp_std::priv::__introsort_loop<COMotion * *,COMotion *,int,bool (__cdecl*)(COMotion *,COMotion *)>
PUBLIC	?_Answer@?$_BothPtrType@PAPAVCOMotion@@PAPAV1@@stlp_std@@SA?AU__true_type@2@XZ ; stlp_std::_BothPtrType<COMotion * *,COMotion * *>::_Answer
PUBLIC	??$_UseTrivialCopy@PAVCOMotion@@PAV1@@stlp_std@@YA?AU?$_TrivialCopy@PAVCOMotion@@PAV1@@0@PAPAVCOMotion@@0@Z ; stlp_std::_UseTrivialCopy<COMotion *,COMotion *>
PUBLIC	?_Answer@?$_TrivialCopy@PAVCOMotion@@PAV1@@stlp_std@@SA?AU__true_type@2@XZ ; stlp_std::_TrivialCopy<COMotion *,COMotion *>::_Answer
PUBLIC	??$__copy_backward_ptrs@PAPAVCOMotion@@PAPAV1@@priv@stlp_std@@YAPAPAVCOMotion@@PAPAV2@00ABU__true_type@1@@Z ; stlp_std::priv::__copy_backward_ptrs<COMotion * *,COMotion * *>
PUBLIC	??$__copy_backward_aux@PAPAVCOMotion@@PAPAV1@@priv@stlp_std@@YAPAPAVCOMotion@@PAPAV2@00ABU__true_type@1@@Z ; stlp_std::priv::__copy_backward_aux<COMotion * *,COMotion * *>
PUBLIC	??$copy_backward@PAPAVCOMotion@@PAPAV1@@stlp_std@@YAPAPAVCOMotion@@PAPAV1@00@Z ; stlp_std::copy_backward<COMotion * *,COMotion * *>
PUBLIC	??$__linear_insert@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@0PAV2@P6A_N11@Z@Z ; stlp_std::priv::__linear_insert<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
PUBLIC	??$__insertion_sort@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@00P6A_NPAV2@1@Z@Z ; stlp_std::priv::__insertion_sort<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
PUBLIC	??$__unguarded_linear_insert@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@PAV2@P6A_N11@Z@Z ; stlp_std::priv::__unguarded_linear_insert<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
PUBLIC	??$__unguarded_insertion_sort_aux@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@00P6A_NPAV2@1@Z@Z ; stlp_std::priv::__unguarded_insertion_sort_aux<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
PUBLIC	??$__unguarded_insertion_sort@PAPAVCOMotion@@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV2@1@Z@Z ; stlp_std::priv::__unguarded_insertion_sort<COMotion * *,bool (__cdecl*)(COMotion *,COMotion *)>
PUBLIC	??$__final_insertion_sort@PAPAVCOMotion@@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV2@1@Z@Z ; stlp_std::priv::__final_insertion_sort<COMotion * *,bool (__cdecl*)(COMotion *,COMotion *)>
PUBLIC	??$sort@PAPAVCOMotion@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV1@1@Z@Z ; stlp_std::sort<COMotion * *,bool (__cdecl*)(COMotion *,COMotion *)>
PUBLIC	?setXYZi@?$_matrix@M@@QAEAAU1@MMM@Z		; _matrix<float>::setXYZi
PUBLIC	?Frame@SAnimParams@@QAEMXZ			; SAnimParams::Frame
PUBLIC	?Play@SAnimParams@@QAEXXZ			; SAnimParams::Play
PUBLIC	?begin@?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAEPAPAVCOMotion@@XZ ; stlp_std::vector<COMotion *,xalloc<COMotion *> >::begin
PUBLIC	?to_value_type_ptr@?$_CastTraits@PAXPAVCOMotion@@@priv@stlp_std@@SAPAPAVCOMotion@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,COMotion *>::to_value_type_ptr
PUBLIC	?end@?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAEPAPAVCOMotion@@XZ ; stlp_std::vector<COMotion *,xalloc<COMotion *> >::end
PUBLIC	?empty@?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QBE_NXZ ; stlp_std::vector<COMotion *,xalloc<COMotion *> >::empty
PUBLIC	?to_value_type_ref@?$_CastTraits@PAXPAVCOMotion@@@priv@stlp_std@@SAAAPAVCOMotion@@AAPAX@Z ; stlp_std::priv::_CastTraits<void *,COMotion *>::to_value_type_ref
PUBLIC	?front@?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAEAAPAVCOMotion@@XZ ; stlp_std::vector<COMotion *,xalloc<COMotion *> >::front
PUBLIC	??$__distance@PAPAVCOMotion@@@stlp_std@@YAHABQAPAVCOMotion@@0ABUrandom_access_iterator_tag@0@@Z ; stlp_std::__distance<COMotion * *>
PUBLIC	??$distance@PAPAVCOMotion@@@stlp_std@@YAHPAPAVCOMotion@@0@Z ; stlp_std::distance<COMotion * *>
PUBLIC	??$__advance@PAPAVCOMotion@@H@stlp_std@@YAXAAPAPAVCOMotion@@HABUrandom_access_iterator_tag@0@@Z ; stlp_std::__advance<COMotion * *,int>
PUBLIC	??$advance@PAPAVCOMotion@@H@stlp_std@@YAXAAPAPAVCOMotion@@H@Z ; stlp_std::advance<COMotion * *,int>
PUBLIC	??$__lower_bound@PAPAVCOMotion@@PBDP6A_NPAV1@Vshared_str@@@ZP6A_N01@ZH@priv@stlp_std@@YAPAPAVCOMotion@@PAPAV2@0ABQBDP6A_NPAV2@Vshared_str@@@Z4PAH@Z ; stlp_std::priv::__lower_bound<COMotion * *,char const *,bool (__cdecl*)(COMotion *,shared_str),bool (__cdecl*)(COMotion *,shared_str),int>
PUBLIC	??$lower_bound@PAPAVCOMotion@@PBDP6A_NPAV1@Vshared_str@@@Z@stlp_std@@YAPAPAVCOMotion@@PAPAV1@0ABQBDP6A_NPAV1@Vshared_str@@@Z@Z ; stlp_std::lower_bound<COMotion * *,char const *,bool (__cdecl*)(COMotion *,shared_str)>
PUBLIC	??_C@_0N@BFDJNKBG@$game_anims$?$AA@		; `string'
PUBLIC	??_C@_0BN@GBEPLNKH@Can?8t?5find?5motion?5file?5?8?$CFs?8?4?$AA@ ; `string'
PUBLIC	??_C@_0BN@NLNPFDIC@CObjectAnimator?3?3LoadMotions?$AA@ ; `string'
PUBLIC	??_C@_0DH@HIHJMPG@D?3?2CLEARSKY?2sources?2engine?2xrEng@ ; `string'
PUBLIC	??_C@_04FGKMPKCB@?4anm?$AA@			; `string'
PUBLIC	??_C@_0DC@DLEOIBDI@ERROR?3?5Can?8t?5load?5motion?4?5Incorr@ ; `string'
PUBLIC	??_C@_05EICNJGJB@?4anms?$AA@			; `string'
PUBLIC	??_C@_0CA@KAJBKBOB@OBJ?5ANIM?3?3Cycle?5?8?$CFs?8?5not?5found?4?$AA@ ; `string'
PUBLIC	??_C@_0BG@JICNBGNM@CObjectAnimator?3?3Play?$AA@	; `string'
PUBLIC	??_7CObjectAnimator@@6B@			; CObjectAnimator::`vftable'
;	COMDAT ??_7CObjectAnimator@@6B@
CONST	SEGMENT
??_7CObjectAnimator@@6B@ DD FLAT:??_R4CObjectAnimator@@6B@ ; CObjectAnimator::`vftable'
	DD	FLAT:??_ECObjectAnimator@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4CObjectAnimator@@6B@
rdata$r	SEGMENT
??_R4CObjectAnimator@@6B@ DD 00H			; CObjectAnimator::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCObjectAnimator@@@8
	DD	FLAT:??_R3CObjectAnimator@@8
rdata$r	ENDS
;	COMDAT ??_R3CObjectAnimator@@8
rdata$r	SEGMENT
??_R3CObjectAnimator@@8 DD 00H				; CObjectAnimator::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObjectAnimator@@8
rdata$r	ENDS
;	COMDAT ??_R2CObjectAnimator@@8
rdata$r	SEGMENT
??_R2CObjectAnimator@@8 DD FLAT:??_R1A@?0A@EA@CObjectAnimator@@8 ; CObjectAnimator::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CObjectAnimator@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObjectAnimator@@8 DD FLAT:??_R0?AVCObjectAnimator@@@8 ; CObjectAnimator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObjectAnimator@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObjectAnimator@@@8
_DATA	SEGMENT
??_R0?AVCObjectAnimator@@@8 DD FLAT:??_7type_info@@6B@	; CObjectAnimator `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObjectAnimator@@', 00H
_DATA	ENDS
;	COMDAT ??_C@_0BG@JICNBGNM@CObjectAnimator?3?3Play?$AA@
CONST	SEGMENT
??_C@_0BG@JICNBGNM@CObjectAnimator?3?3Play?$AA@ DB 'CObjectAnimator::Play'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KAJBKBOB@OBJ?5ANIM?3?3Cycle?5?8?$CFs?8?5not?5found?4?$AA@
CONST	SEGMENT
??_C@_0CA@KAJBKBOB@OBJ?5ANIM?3?3Cycle?5?8?$CFs?8?5not?5found?4?$AA@ DB 'O'
	DB	'BJ ANIM::Cycle ''%s'' not found.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05EICNJGJB@?4anms?$AA@
CONST	SEGMENT
??_C@_05EICNJGJB@?4anms?$AA@ DB '.anms', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@DLEOIBDI@ERROR?3?5Can?8t?5load?5motion?4?5Incorr@
CONST	SEGMENT
??_C@_0DC@DLEOIBDI@ERROR?3?5Can?8t?5load?5motion?4?5Incorr@ DB 'ERROR: Ca'
	DB	'n''t load motion. Incorrect file version.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04FGKMPKCB@?4anm?$AA@
CONST	SEGMENT
??_C@_04FGKMPKCB@?4anm?$AA@ DB '.anm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@HIHJMPG@D?3?2CLEARSKY?2sources?2engine?2xrEng@
CONST	SEGMENT
??_C@_0DH@HIHJMPG@D?3?2CLEARSKY?2sources?2engine?2xrEng@ DB 'D:\CLEARSKY\'
	DB	'sources\engine\xrEngine\ObjectAnimator.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NLNPFDIC@CObjectAnimator?3?3LoadMotions?$AA@
CONST	SEGMENT
??_C@_0BN@NLNPFDIC@CObjectAnimator?3?3LoadMotions?$AA@ DB 'CObjectAnimato'
	DB	'r::LoadMotions', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GBEPLNKH@Can?8t?5find?5motion?5file?5?8?$CFs?8?4?$AA@
CONST	SEGMENT
??_C@_0BN@GBEPLNKH@Can?8t?5find?5motion?5file?5?8?$CFs?8?4?$AA@ DB 'Can'''
	DB	't find motion file ''%s''.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BFDJNKBG@$game_anims$?$AA@
CONST	SEGMENT
??_C@_0N@BFDJNKBG@$game_anims$?$AA@ DB '$game_anims$', 00H ; `string'
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\type_traits.h
;	COMDAT ??$_UseTrivialCopy@PAVCOMotion@@PAV1@@stlp_std@@YA?AU?$_TrivialCopy@PAVCOMotion@@PAV1@@0@PAPAVCOMotion@@0@Z
_TEXT	SEGMENT
??$_UseTrivialCopy@PAVCOMotion@@PAV1@@stlp_std@@YA?AU?$_TrivialCopy@PAVCOMotion@@PAV1@@0@PAPAVCOMotion@@0@Z PROC ; stlp_std::_UseTrivialCopy<COMotion *,COMotion *>, COMDAT

; 485  : { return _TrivialCopy<_Src, _Dst>(); }

	xor	al, al
	ret	0
??$_UseTrivialCopy@PAVCOMotion@@PAV1@@stlp_std@@YA?AU?$_TrivialCopy@PAVCOMotion@@PAV1@@0@PAPAVCOMotion@@0@Z ENDP ; stlp_std::_UseTrivialCopy<COMotion *,COMotion *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_heap.c
_TEXT	ENDS
;	COMDAT ??$__push_heap@PAPAVCOMotion@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@HHPAV1@P6A_N11@Z@Z
_TEXT	SEGMENT
___topIndex$ = 8					; size = 4
___val$ = 12						; size = 4
___comp$ = 16						; size = 4
??$__push_heap@PAPAVCOMotion@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@HHPAV1@P6A_N11@Z@Z PROC ; stlp_std::__push_heap<COMotion * *,int,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>, COMDAT
; ___first$ = ebx
; ___holeIndex$ = eax

; 78   : {

	push	ebp
	mov	ebp, DWORD PTR ___val$[esp]
	push	esi
	push	edi
	mov	edi, eax

; 79   :   _Distance __parent = (__holeIndex - 1) / 2;

	lea	eax, DWORD PTR [edi-1]
	cdq
	sub	eax, edx
	mov	esi, eax
	sar	esi, 1

; 80   :   while (__holeIndex > __topIndex && __comp(*(__first + __parent), __val)) {

	cmp	edi, DWORD PTR ___topIndex$[esp+8]
	jle	SHORT $LN8@push_heap@2
	npad	7
$LL2@push_heap@2:
	mov	eax, DWORD PTR [ebx+esi*4]
	push	ebp
	push	eax
	call	DWORD PTR ___comp$[esp+16]
	add	esp, 8
	test	al, al
	je	SHORT $LN8@push_heap@2

; 81   :     _STLP_VERBOSE_ASSERT(!__comp(__val, *(__first + __parent)), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 82   :     *(__first + __holeIndex) = *(__first + __parent);

	mov	ecx, DWORD PTR [ebx+esi*4]

; 83   :     __holeIndex = __parent;
; 84   :     __parent = (__holeIndex - 1) / 2;

	lea	eax, DWORD PTR [esi-1]
	cdq
	sub	eax, edx
	mov	DWORD PTR [ebx+edi*4], ecx
	mov	edi, esi
	sar	eax, 1
	cmp	edi, DWORD PTR ___topIndex$[esp+8]
	mov	esi, eax
	jg	SHORT $LL2@push_heap@2
$LN8@push_heap@2:

; 85   :   }
; 86   :   *(__first + __holeIndex) = __val;

	mov	DWORD PTR [ebx+edi*4], ebp
	pop	edi
	pop	esi
	pop	ebp

; 87   : }

	ret	0
??$__push_heap@PAPAVCOMotion@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@HHPAV1@P6A_N11@Z@Z ENDP ; stlp_std::__push_heap<COMotion * *,int,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\type_traits.h
_TEXT	ENDS
;	COMDAT ?_Answer@?$_TrivialCopy@PAVCOMotion@@PAV1@@stlp_std@@SA?AU__true_type@2@XZ
_TEXT	SEGMENT
?_Answer@?$_TrivialCopy@PAVCOMotion@@PAV1@@stlp_std@@SA?AU__true_type@2@XZ PROC ; stlp_std::_TrivialCopy<COMotion *,COMotion *>::_Answer, COMDAT

; 390  :   static _Ret _Answer() { return _Ret(); }

	xor	al, al
	ret	0
?_Answer@?$_TrivialCopy@PAVCOMotion@@PAV1@@stlp_std@@SA?AU__true_type@2@XZ ENDP ; stlp_std::_TrivialCopy<COMotion *,COMotion *>::_Answer
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$swap@PAVCOMotion@@@stlp_std@@YAXAAPAVCOMotion@@0@Z
_TEXT	SEGMENT
??$swap@PAVCOMotion@@@stlp_std@@YAXAAPAVCOMotion@@0@Z PROC ; stlp_std::swap<COMotion *>, COMDAT
; ___a$ = ecx
; ___b$ = eax

; 82   : #if defined (_STLP_USE_PARTIAL_SPEC_WORKAROUND) && !defined (_STLP_FUNCTION_TMPL_PARTIAL_ORDER)
; 83   : #  if !defined(__BORLANDC__)
; 84   :   typedef typename _SwapImplemented<_Tp>::_Ret _Implemented;
; 85   : #  else
; 86   :   enum { _Is = _SwapImplemented<_Tp>::_Is };
; 87   :   typedef typename __bool2type<_Is>::_Ret _Implemented;
; 88   : #  endif
; 89   :   _STLP_PRIV __swap_aux(__a, __b, _Implemented());
; 90   : #else
; 91   :   _Tp __tmp = __a;

	mov	edx, DWORD PTR [ecx]
	push	esi

; 92   :   __a = __b;

	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [ecx], esi

; 93   :   __b = __tmp;

	mov	DWORD PTR [eax], edx
	pop	esi

; 94   : #endif /* _STLP_USE_PARTIAL_SPEC_WORKAROUND */
; 95   : }

	ret	0
??$swap@PAVCOMotion@@@stlp_std@@YAXAAPAVCOMotion@@0@Z ENDP ; stlp_std::swap<COMotion *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_heap.c
_TEXT	ENDS
;	COMDAT ??$__adjust_heap@PAPAVCOMotion@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@HHPAV1@P6A_N11@Z@Z
_TEXT	SEGMENT
___topIndex$ = 8					; size = 4
___len$ = 8						; size = 4
___val$ = 12						; size = 4
___comp$ = 16						; size = 4
??$__adjust_heap@PAPAVCOMotion@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@HHPAV1@P6A_N11@Z@Z PROC ; stlp_std::__adjust_heap<COMotion * *,int,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>, COMDAT
; ___first$ = ecx
; ___holeIndex$ = eax

; 148  : {

	push	ebx
	push	ebp
	mov	ebp, DWORD PTR ___len$[esp+4]
	push	esi
	push	edi
	mov	edi, eax

; 149  :   _Distance __topIndex = __holeIndex;
; 150  :   _Distance __secondChild = 2 * __holeIndex + 2;

	lea	esi, DWORD PTR [edi+edi+2]

; 151  :   while (__secondChild < __len) {

	cmp	esi, ebp
	mov	ebx, ecx
	mov	DWORD PTR ___topIndex$[esp+12], edi
	jge	SHORT $LN9@adjust_hea@2
$LL4@adjust_hea@2:

; 152  :     if (__comp(*(__first + __secondChild), *(__first + (__secondChild - 1)))) {

	mov	eax, DWORD PTR [ebx+esi*4-4]
	mov	ecx, DWORD PTR [ebx+esi*4]
	push	eax
	push	ecx
	call	DWORD PTR ___comp$[esp+20]
	add	esp, 8
	test	al, al
	je	SHORT $LN2@adjust_hea@2

; 153  :       _STLP_VERBOSE_ASSERT(!__comp(*(__first + (__secondChild - 1)), *(__first + __secondChild)),
; 154  :                            _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 155  :       __secondChild--;

	sub	esi, 1
$LN2@adjust_hea@2:

; 156  :     }
; 157  :     *(__first + __holeIndex) = *(__first + __secondChild);

	mov	edx, DWORD PTR [ebx+esi*4]
	mov	DWORD PTR [ebx+edi*4], edx

; 158  :     __holeIndex = __secondChild;

	mov	edi, esi

; 159  :     __secondChild = 2 * (__secondChild + 1);

	lea	esi, DWORD PTR [esi+esi+2]
	cmp	esi, ebp
	jl	SHORT $LL4@adjust_hea@2
$LN9@adjust_hea@2:

; 160  :   }
; 161  :   if (__secondChild == __len) {

	jne	SHORT $LN1@adjust_hea@2

; 162  :     *(__first + __holeIndex) = *(__first + (__secondChild - 1));

	mov	eax, DWORD PTR [ebx+esi*4-4]
	mov	DWORD PTR [ebx+edi*4], eax

; 163  :     __holeIndex = __secondChild - 1;

	lea	edi, DWORD PTR [esi-1]
$LN1@adjust_hea@2:

; 164  :   }
; 165  :   __push_heap(__first, __holeIndex, __topIndex, __val, __comp);

	mov	ecx, DWORD PTR ___comp$[esp+12]
	mov	edx, DWORD PTR ___val$[esp+12]
	mov	eax, DWORD PTR ___topIndex$[esp+12]
	push	ecx
	push	edx
	push	eax
	mov	eax, edi
	call	??$__push_heap@PAPAVCOMotion@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@HHPAV1@P6A_N11@Z@Z ; stlp_std::__push_heap<COMotion * *,int,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 166  : }

	ret	0
??$__adjust_heap@PAPAVCOMotion@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@HHPAV1@P6A_N11@Z@Z ENDP ; stlp_std::__adjust_heap<COMotion * *,int,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__make_heap@PAPAVCOMotion@@P6A_NPAV1@0@ZPAV1@H@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV1@1@Z0PAH@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 4
??$__make_heap@PAPAVCOMotion@@P6A_NPAV1@0@ZPAV1@H@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV1@1@Z0PAH@Z PROC ; stlp_std::__make_heap<COMotion * *,bool (__cdecl*)(COMotion *,COMotion *),COMotion *,int>, COMDAT
; ___first$ = edi
; ___last$ = eax

; 218  : {

	push	ebx
	mov	ebx, eax

; 219  :   if (__last - __first < 2) return;
; 220  :   _Distance __len = __last - __first;

	sub	ebx, edi
	sar	ebx, 2
	push	ebp
	mov	ebp, DWORD PTR ___comp$[esp+4]

; 221  :   _Distance __parent = (__len - 2)/2;

	lea	eax, DWORD PTR [ebx-2]
	cdq
	push	esi
	sub	eax, edx
	mov	esi, eax
	sar	esi, 1

; 222  : 
; 223  :   for (;;) {
; 224  :     __adjust_heap(__first, __parent, __len, _Tp(*(__first + __parent)),
; 225  :                   __comp);

	mov	eax, DWORD PTR [edi+esi*4]
	push	ebp
	push	eax
	push	ebx
	mov	eax, esi
	mov	ecx, edi
	call	??$__adjust_heap@PAPAVCOMotion@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@HHPAV1@P6A_N11@Z@Z ; stlp_std::__adjust_heap<COMotion * *,int,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
	add	esp, 12					; 0000000cH

; 226  :     if (__parent == 0) return;

	test	esi, esi
	je	SHORT $LN13@make_heap@3
	npad	2
$LL3@make_heap@3:

; 222  : 
; 223  :   for (;;) {
; 224  :     __adjust_heap(__first, __parent, __len, _Tp(*(__first + __parent)),
; 225  :                   __comp);

	mov	ecx, DWORD PTR [edi+esi*4-4]

; 227  :     __parent--;

	sub	esi, 1
	push	ebp
	push	ecx
	push	ebx
	mov	eax, esi
	mov	ecx, edi
	call	??$__adjust_heap@PAPAVCOMotion@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@HHPAV1@P6A_N11@Z@Z ; stlp_std::__adjust_heap<COMotion * *,int,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
	add	esp, 12					; 0000000cH
	test	esi, esi
	jne	SHORT $LL3@make_heap@3
$LN13@make_heap@3:
	pop	esi
	pop	ebp
	pop	ebx

; 228  :   }
; 229  : }

	ret	0
??$__make_heap@PAPAVCOMotion@@P6A_NPAV1@0@ZPAV1@H@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV1@1@Z0PAH@Z ENDP ; stlp_std::__make_heap<COMotion * *,bool (__cdecl*)(COMotion *,COMotion *),COMotion *,int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\type_traits.h
_TEXT	ENDS
;	COMDAT ?_Answer@?$_BothPtrType@PAPAVCOMotion@@PAPAV1@@stlp_std@@SA?AU__true_type@2@XZ
_TEXT	SEGMENT
?_Answer@?$_BothPtrType@PAPAVCOMotion@@PAPAV1@@stlp_std@@SA?AU__true_type@2@XZ PROC ; stlp_std::_BothPtrType<COMotion * *,COMotion * *>::_Answer, COMDAT

; 468  :   static _Ret _Answer() { return _Ret(); }

	xor	al, al
	ret	0
?_Answer@?$_BothPtrType@PAPAVCOMotion@@PAPAV1@@stlp_std@@SA?AU__true_type@2@XZ ENDP ; stlp_std::_BothPtrType<COMotion * *,COMotion * *>::_Answer
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.c
_TEXT	ENDS
;	COMDAT ??$__unguarded_linear_insert@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@PAV2@P6A_N11@Z@Z
_TEXT	SEGMENT
??$__unguarded_linear_insert@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@PAV2@P6A_N11@Z@Z PROC ; stlp_std::priv::__unguarded_linear_insert<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>, COMDAT
; ___last$ = edx
; ___val$ = esi

; 897  :   _RandomAccessIter __next = __last;
; 898  :   --__next;
; 899  :   while (__comp(__val, *__next)) {

	mov	ecx, DWORD PTR [edx-4]
	lea	eax, DWORD PTR [edx-4]
	push	edi
	mov	edi, DWORD PTR [esi+20]
	cmp	edi, DWORD PTR [ecx+20]
	jae	SHORT $LN15@unguarded_@5
	npad	1
$LL2@unguarded_@5:

; 900  :     _STLP_VERBOSE_ASSERT(!__comp(*__next, __val), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 901  :     *__last = *__next;

	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax-4]
	mov	edi, DWORD PTR [esi+20]

; 902  :     __last = __next;

	mov	edx, eax

; 903  :     --__next;

	sub	eax, 4
	cmp	edi, DWORD PTR [ecx+20]
	jb	SHORT $LL2@unguarded_@5
$LN15@unguarded_@5:

; 904  :   }
; 905  :   *__last = __val;

	mov	DWORD PTR [edx], esi
	pop	edi

; 906  : }

	ret	0
??$__unguarded_linear_insert@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@PAV2@P6A_N11@Z@Z ENDP ; stlp_std::priv::__unguarded_linear_insert<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__iter_swap_aux@PAPAVCOMotion@@PAPAV1@@priv@stlp_std@@YAXAAPAPAVCOMotion@@0ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__iter_swap_aux@PAPAVCOMotion@@PAPAV1@@priv@stlp_std@@YAXAAPAPAVCOMotion@@0ABU__true_type@1@@Z PROC ; stlp_std::priv::__iter_swap_aux<COMotion * *,COMotion * *>, COMDAT
; ___i1$ = ecx
; ___i2$ = eax

; 108  :   swap(*__i1, *__i2);

	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	esi
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [eax], edx
	pop	esi

; 109  : }

	ret	0
??$__iter_swap_aux@PAPAVCOMotion@@PAPAV1@@priv@stlp_std@@YAXAAPAPAVCOMotion@@0ABU__true_type@1@@Z ENDP ; stlp_std::priv::__iter_swap_aux<COMotion * *,COMotion * *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\type_traits.h
_TEXT	ENDS
;	COMDAT ??$_IsOKToSwap@PAVCOMotion@@PAV1@U__true_type@stlp_std@@U23@@stlp_std@@YA?AU?$_OKToSwap@PAVCOMotion@@PAV1@U__true_type@stlp_std@@U23@@0@PAPAVCOMotion@@0ABU__true_type@0@1@Z
_TEXT	SEGMENT
??$_IsOKToSwap@PAVCOMotion@@PAV1@U__true_type@stlp_std@@U23@@stlp_std@@YA?AU?$_OKToSwap@PAVCOMotion@@PAV1@U__true_type@stlp_std@@U23@@0@PAPAVCOMotion@@0ABU__true_type@0@1@Z PROC ; stlp_std::_IsOKToSwap<COMotion *,COMotion *,stlp_std::__true_type,stlp_std::__true_type>, COMDAT

; 481  : { return _OKToSwap<_Tp1, _Tp2, _IsRef1, _IsRef2>(); }

	xor	al, al
	ret	0
??$_IsOKToSwap@PAVCOMotion@@PAV1@U__true_type@stlp_std@@U23@@stlp_std@@YA?AU?$_OKToSwap@PAVCOMotion@@PAV1@U__true_type@stlp_std@@U23@@0@PAPAVCOMotion@@0ABU__true_type@0@1@Z ENDP ; stlp_std::_IsOKToSwap<COMotion *,COMotion *,stlp_std::__true_type,stlp_std::__true_type>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_heap.h
_TEXT	ENDS
;	COMDAT ??$__pop_heap@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@ZH@stlp_std@@YAXPAPAVCOMotion@@00PAV1@P6A_N11@ZPAH@Z
_TEXT	SEGMENT
___val$ = 8						; size = 4
___comp$ = 12						; size = 4
??$__pop_heap@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@ZH@stlp_std@@YAXPAPAVCOMotion@@00PAV1@P6A_N11@ZPAH@Z PROC ; stlp_std::__pop_heap<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *),int>, COMDAT
; ___first$ = ecx
; ___last$ = eax
; ___result$ = esi

; 78   :   *__result = *__first;

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [esi], edx

; 79   :   __adjust_heap(__first, _Distance(0), _Distance(__last - __first),
; 80   :                 __val, __comp);

	mov	edx, DWORD PTR ___comp$[esp-4]
	push	edx
	mov	edx, DWORD PTR ___val$[esp]
	sub	eax, ecx
	sar	eax, 2
	push	edx
	push	eax
	xor	eax, eax
	call	??$__adjust_heap@PAPAVCOMotion@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@HHPAV1@P6A_N11@Z@Z ; stlp_std::__adjust_heap<COMotion * *,int,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
	add	esp, 12					; 0000000cH

; 81   : }

	ret	0
??$__pop_heap@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@ZH@stlp_std@@YAXPAPAVCOMotion@@00PAV1@P6A_N11@ZPAH@Z ENDP ; stlp_std::__pop_heap<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *),int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_heap.c
_TEXT	ENDS
;	COMDAT ??$make_heap@PAPAVCOMotion@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV1@1@Z@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 4
??$make_heap@PAPAVCOMotion@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV1@1@Z@Z PROC ; stlp_std::make_heap<COMotion * *,bool (__cdecl*)(COMotion *,COMotion *)>, COMDAT
; ___first$ = edi
; ___last$ = eax

; 235  : {

	push	ebx
	mov	ebx, eax

; 236  :   __make_heap(__first, __last, __comp,
; 237  :               _STLP_VALUE_TYPE(__first, _RandomAccessIterator), _STLP_DISTANCE_TYPE(__first, _RandomAccessIterator));

	sub	ebx, edi
	sar	ebx, 2
	cmp	ebx, 2
	push	ebp
	mov	ebp, DWORD PTR ___comp$[esp+4]
	jl	SHORT $LN11@make_heap@4
	lea	eax, DWORD PTR [ebx-2]
	cdq
	push	esi
	sub	eax, edx
	mov	esi, eax
	sar	esi, 1
	mov	eax, DWORD PTR [edi+esi*4]
	push	ebp
	push	eax
	push	ebx
	mov	eax, esi
	mov	ecx, edi
	call	??$__adjust_heap@PAPAVCOMotion@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@HHPAV1@P6A_N11@Z@Z ; stlp_std::__adjust_heap<COMotion * *,int,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
	add	esp, 12					; 0000000cH
	test	esi, esi
	je	SHORT $LN13@make_heap@4
$LL5@make_heap@4:
	mov	ecx, DWORD PTR [edi+esi*4-4]
	sub	esi, 1
	push	ebp
	push	ecx
	push	ebx
	mov	eax, esi
	mov	ecx, edi
	call	??$__adjust_heap@PAPAVCOMotion@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@HHPAV1@P6A_N11@Z@Z ; stlp_std::__adjust_heap<COMotion * *,int,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
	add	esp, 12					; 0000000cH
	test	esi, esi
	jne	SHORT $LL5@make_heap@4
$LN13@make_heap@4:
	pop	esi
$LN11@make_heap@4:
	pop	ebp
	pop	ebx

; 238  : }

	ret	0
??$make_heap@PAPAVCOMotion@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV1@1@Z@Z ENDP ; stlp_std::make_heap<COMotion * *,bool (__cdecl*)(COMotion *,COMotion *)>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\type_traits.h
_TEXT	ENDS
;	COMDAT ?_Answer@?$_OKToSwap@PAVCOMotion@@PAV1@U__true_type@stlp_std@@U23@@stlp_std@@SA?AU__true_type@2@XZ
_TEXT	SEGMENT
?_Answer@?$_OKToSwap@PAVCOMotion@@PAV1@U__true_type@stlp_std@@U23@@stlp_std@@SA?AU__true_type@2@XZ PROC ; stlp_std::_OKToSwap<COMotion *,COMotion *,stlp_std::__true_type,stlp_std::__true_type>::_Answer, COMDAT

; 475  :   static _Type _Answer() { return _Type(); }

	xor	al, al
	ret	0
?_Answer@?$_OKToSwap@PAVCOMotion@@PAV1@U__true_type@stlp_std@@U23@@stlp_std@@SA?AU__true_type@2@XZ ENDP ; stlp_std::_OKToSwap<COMotion *,COMotion *,stlp_std::__true_type,stlp_std::__true_type>::_Answer
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Ret@?$_IsRefType@AAPAVCOMotion@@@stlp_std@@SA?AU__true_type@2@XZ
_TEXT	SEGMENT
?_Ret@?$_IsRefType@AAPAVCOMotion@@@stlp_std@@SA?AU__true_type@2@XZ PROC ; stlp_std::_IsRefType<COMotion * &>::_Ret, COMDAT

; 443  :   static _Type _Ret() { return _Type();}

	xor	al, al
	ret	0
?_Ret@?$_IsRefType@AAPAVCOMotion@@@stlp_std@@SA?AU__true_type@2@XZ ENDP ; stlp_std::_IsRefType<COMotion * &>::_Ret
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_iterator_base.h
_TEXT	ENDS
;	COMDAT ??$__advance@PAPAVCOMotion@@H@stlp_std@@YAXAAPAPAVCOMotion@@HABUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
??$__advance@PAPAVCOMotion@@H@stlp_std@@YAXAAPAPAVCOMotion@@HABUrandom_access_iterator_tag@0@@Z PROC ; stlp_std::__advance<COMotion * *,int>, COMDAT
; ___i$ = eax
; ___n$ = ecx

; 522  :   __i += __n;

	lea	edx, DWORD PTR [ecx*4]
	add	DWORD PTR [eax], edx

; 523  : }

	ret	0
??$__advance@PAPAVCOMotion@@H@stlp_std@@YAXAAPAPAVCOMotion@@HABUrandom_access_iterator_tag@0@@Z ENDP ; stlp_std::__advance<COMotion * *,int>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__distance@PAPAVCOMotion@@@stlp_std@@YAHABQAPAVCOMotion@@0ABUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
??$__distance@PAPAVCOMotion@@@stlp_std@@YAHABQAPAVCOMotion@@0ABUrandom_access_iterator_tag@0@@Z PROC ; stlp_std::__distance<COMotion * *>, COMDAT
; ___first$ = ecx
; ___last$ = eax

; 372  :   return __last - __first;

	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 373  : }

	ret	0
??$__distance@PAPAVCOMotion@@@stlp_std@@YAHABQAPAVCOMotion@@0ABUrandom_access_iterator_tag@0@@Z ENDP ; stlp_std::__distance<COMotion * *>
_TEXT	ENDS
PUBLIC	?motion_sort_pred@@YA_NPAVCOMotion@@0@Z		; motion_sort_pred
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.c
;	COMDAT ??$__unguarded_insertion_sort_aux@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@00P6A_NPAV2@1@Z@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$__unguarded_insertion_sort_aux@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@00P6A_NPAV2@1@Z@Z PROC ; stlp_std::priv::__unguarded_insertion_sort_aux<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>, COMDAT

; 934  :                                     _Tp*, _Compare __comp) {

	push	ebp
	mov	ebp, DWORD PTR ___first$[esp]

; 935  :   for (_RandomAccessIter __i = __first; __i != __last; ++__i)

	cmp	ebp, DWORD PTR ___last$[esp]
	je	SHORT $LN1@unguarded_@6
	push	ebx
	push	esi
	push	edi
	npad	2
$LL3@unguarded_@6:

; 936  :     __unguarded_linear_insert<_RandomAccessIter, _Tp, _Compare>(__i, *__i, __comp);

	mov	eax, DWORD PTR [ebp-4]
	mov	ebx, DWORD PTR [ebp]
	lea	esi, DWORD PTR [ebp-4]
	push	eax
	push	ebx
	mov	edi, ebp
	call	?motion_sort_pred@@YA_NPAVCOMotion@@0@Z	; motion_sort_pred
	add	esp, 8
	test	al, al
	je	SHORT $LN6@unguarded_@6
	npad	7
$LL7@unguarded_@6:
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
	mov	edx, DWORD PTR [esi-4]
	mov	edi, esi
	sub	esi, 4
	push	edx
	push	ebx
	call	?motion_sort_pred@@YA_NPAVCOMotion@@0@Z	; motion_sort_pred
	add	esp, 8
	test	al, al
	jne	SHORT $LL7@unguarded_@6
$LN6@unguarded_@6:
	add	ebp, 4
	cmp	ebp, DWORD PTR ___last$[esp+12]
	mov	DWORD PTR [edi], ebx
	jne	SHORT $LL3@unguarded_@6
	pop	edi
	pop	esi
	pop	ebx
$LN1@unguarded_@6:
	pop	ebp

; 937  : }

	ret	0
??$__unguarded_insertion_sort_aux@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@00P6A_NPAV2@1@Z@Z ENDP ; stlp_std::priv::__unguarded_insertion_sort_aux<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$iter_swap@PAPAVCOMotion@@PAPAV1@@stlp_std@@YAXPAPAVCOMotion@@0@Z
_TEXT	SEGMENT
??$iter_swap@PAPAVCOMotion@@PAPAV1@@stlp_std@@YAXPAPAVCOMotion@@0@Z PROC ; stlp_std::iter_swap<COMotion * *,COMotion * *>, COMDAT
; ___i1$ = ecx
; ___i2$ = eax

; 120  :   // swap(*__i1, *__i2);
; 121  :   _STLP_PRIV __iter_swap_aux( __i1, __i2, _IsOKToSwap(_STLP_VALUE_TYPE(__i1, _ForwardIter1), _STLP_VALUE_TYPE(__i2, _ForwardIter2),
; 122  :                                                       _STLP_IS_REF_TYPE_REAL_REF(__i1, _ForwardIter1),
; 123  :                                                       _STLP_IS_REF_TYPE_REAL_REF(__i2, _ForwardIter2))._Answer());

	mov	edx, DWORD PTR [ecx]
	push	esi
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [eax], edx
	pop	esi

; 124  : }

	ret	0
??$iter_swap@PAPAVCOMotion@@PAPAV1@@stlp_std@@YAXPAPAVCOMotion@@0@Z ENDP ; stlp_std::iter_swap<COMotion * *,COMotion * *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_iterator_base.h
_TEXT	ENDS
;	COMDAT ??$advance@PAPAVCOMotion@@H@stlp_std@@YAXAAPAPAVCOMotion@@H@Z
_TEXT	SEGMENT
??$advance@PAPAVCOMotion@@H@stlp_std@@YAXAAPAPAVCOMotion@@H@Z PROC ; stlp_std::advance<COMotion * *,int>, COMDAT
; ___i$ = eax
; ___n$ = ecx

; 527  :   __advance(__i, __n, _STLP_ITERATOR_CATEGORY(__i, _InputIterator));

	lea	edx, DWORD PTR [ecx*4]
	add	DWORD PTR [eax], edx

; 528  : }

	ret	0
??$advance@PAPAVCOMotion@@H@stlp_std@@YAXAAPAPAVCOMotion@@H@Z ENDP ; stlp_std::advance<COMotion * *,int>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$distance@PAPAVCOMotion@@@stlp_std@@YAHPAPAVCOMotion@@0@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
??$distance@PAPAVCOMotion@@@stlp_std@@YAHPAPAVCOMotion@@0@Z PROC ; stlp_std::distance<COMotion * *>, COMDAT
; ___last$ = eax

; 378  :   return __distance(__first, __last, _STLP_ITERATOR_CATEGORY(__first, _InputIterator));

	sub	eax, DWORD PTR ___first$[esp-4]
	sar	eax, 2

; 379  : }

	ret	0
??$distance@PAPAVCOMotion@@@stlp_std@@YAHPAPAVCOMotion@@0@Z ENDP ; stlp_std::distance<COMotion * *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.c
_TEXT	ENDS
;	COMDAT ??$__unguarded_insertion_sort@PAPAVCOMotion@@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV2@1@Z@Z
_TEXT	SEGMENT
??$__unguarded_insertion_sort@PAPAVCOMotion@@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV2@1@Z@Z PROC ; stlp_std::priv::__unguarded_insertion_sort<COMotion * *,bool (__cdecl*)(COMotion *,COMotion *)>, COMDAT
; ___first$ = ecx
; ___last$ = eax

; 943  :   __unguarded_insertion_sort_aux(__first, __last, _STLP_VALUE_TYPE(__first, _RandomAccessIter), __comp);

	push	eax
	push	ecx
	call	??$__unguarded_insertion_sort_aux@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@00P6A_NPAV2@1@Z@Z ; stlp_std::priv::__unguarded_insertion_sort_aux<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
	add	esp, 8

; 944  : }

	ret	0
??$__unguarded_insertion_sort@PAPAVCOMotion@@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV2@1@Z@Z ENDP ; stlp_std::priv::__unguarded_insertion_sort<COMotion * *,bool (__cdecl*)(COMotion *,COMotion *)>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__unguarded_partition@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAPAPAVCOMotion@@PAPAV2@0PAV2@P6A_N11@Z@Z
_TEXT	SEGMENT
___pivot$ = 8						; size = 4
??$__unguarded_partition@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAPAPAVCOMotion@@PAPAV2@0PAV2@P6A_N11@Z@Z PROC ; stlp_std::priv::__unguarded_partition<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>, COMDAT
; ___first$ = ecx
; ___last$ = eax
; ___comp$ = ebx

; 873  :                                         _Tp __pivot, _Compare __comp) {

	push	ebp
	mov	ebp, DWORD PTR ___pivot$[esp]
	push	esi
	push	edi
	mov	esi, eax
	mov	edi, ecx
	npad	5
$LL7@unguarded_@7:

; 874  :   for (;;) {
; 875  :     while (__comp(*__first, __pivot)) {

	mov	eax, DWORD PTR [edi]
	push	ebp
	push	eax
	call	ebx
	add	esp, 8
	test	al, al
	je	SHORT $LN4@unguarded_@7
	npad	3
$LL5@unguarded_@7:
	mov	ecx, DWORD PTR [edi+4]

; 876  :       _STLP_VERBOSE_ASSERT(!__comp(__pivot, *__first), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 877  :       ++__first;

	add	edi, 4
	push	ebp
	push	ecx
	call	ebx
	add	esp, 8
	test	al, al
	jne	SHORT $LL5@unguarded_@7
$LN4@unguarded_@7:

; 878  :     }
; 879  :     --__last;
; 880  :     while (__comp(__pivot, *__last)) {

	mov	edx, DWORD PTR [esi-4]
	sub	esi, 4
	push	edx
	push	ebp
	call	ebx
	add	esp, 8
	test	al, al
	je	SHORT $LN2@unguarded_@7
$LL3@unguarded_@7:
	mov	eax, DWORD PTR [esi-4]

; 881  :       _STLP_VERBOSE_ASSERT(!__comp(*__last, __pivot), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 882  :       --__last;

	sub	esi, 4
	push	eax
	push	ebp
	call	ebx
	add	esp, 8
	test	al, al
	jne	SHORT $LL3@unguarded_@7
$LN2@unguarded_@7:

; 883  :     }
; 884  :     if (!(__first < __last))

	cmp	edi, esi
	jae	SHORT $LN31@unguarded_@7

; 886  :     iter_swap(__first, __last);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
	mov	DWORD PTR [esi], eax

; 887  :     ++__first;

	add	edi, 4

; 888  :   }

	jmp	SHORT $LL7@unguarded_@7
$LN31@unguarded_@7:

; 885  :       return __first;

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp

; 889  : }

	ret	0
??$__unguarded_partition@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAPAPAVCOMotion@@PAPAV2@0PAV2@P6A_N11@Z@Z ENDP ; stlp_std::priv::__unguarded_partition<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__median@PAVCOMotion@@P6A_NPAV1@0@Z@priv@stlp_std@@YAABQAVCOMotion@@ABQAV2@00P6A_NPAV2@1@Z@Z
_TEXT	SEGMENT
___a$ = 8						; size = 4
??$__median@PAVCOMotion@@P6A_NPAV1@0@Z@priv@stlp_std@@YAABQAVCOMotion@@ABQAV2@00P6A_NPAV2@1@Z@Z PROC ; stlp_std::priv::__median<COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>, COMDAT
; ___b$ = ebx
; ___c$ = edi
; ___comp$ = esi

; 84   :   if (__comp(__a, __b)) {

	mov	eax, DWORD PTR [ebx]
	push	ebp
	mov	ebp, DWORD PTR ___a$[esp]
	mov	ecx, DWORD PTR [ebp]
	push	eax
	push	ecx
	call	esi
	add	esp, 8
	test	al, al
	je	SHORT $LN10@median@3

; 85   :     _STLP_VERBOSE_ASSERT(!__comp(__b, __a), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 86   :     if (__comp(__b, __c)) {

	mov	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR [ebx]
	push	edx
	push	eax
	call	esi
	add	esp, 8
	test	al, al

; 87   :       _STLP_VERBOSE_ASSERT(!__comp(__c, __b), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 88   :       return __b;

	jne	SHORT $LN2@median@3

; 89   :     }
; 90   :     else if (__comp(__a, __c)) {

	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR [ebp]
	push	ecx
	push	edx
	call	esi
	add	esp, 8
	test	al, al
	je	SHORT $LN7@median@3

; 91   :       _STLP_VERBOSE_ASSERT(!__comp(__c, __a), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 92   :       return __c;

	mov	eax, edi
	pop	ebp

; 107  : }

	ret	0
$LN7@median@3:

; 93   :     }
; 94   :     else
; 95   :       return __a;

	mov	eax, ebp
	pop	ebp

; 107  : }

	ret	0
$LN10@median@3:

; 96   :   }
; 97   :   else if (__comp(__a, __c)) {

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [ebp]
	push	eax
	push	ecx
	call	esi
	add	esp, 8
	test	al, al

; 98   :     _STLP_VERBOSE_ASSERT(!__comp(__c, __a), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 99   :     return __a;

	jne	SHORT $LN7@median@3

; 100  :   }
; 101  :   else if (__comp(__b, __c)) {

	mov	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR [ebx]
	push	edx
	push	eax
	call	esi
	add	esp, 8
	test	al, al

; 102  :     _STLP_VERBOSE_ASSERT(!__comp(__c, __b), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 103  :     return __c;

	mov	eax, edi
	jne	SHORT $LN1@median@3
$LN2@median@3:

; 104  :   }
; 105  :   else
; 106  :     return __b;

	mov	eax, ebx
$LN1@median@3:
	pop	ebp

; 107  : }

	ret	0
??$__median@PAVCOMotion@@P6A_NPAV1@0@Z@priv@stlp_std@@YAABQAVCOMotion@@ABQAV2@00P6A_NPAV2@1@Z@Z ENDP ; stlp_std::priv::__median<COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrmemory_subst_msvc.h
_TEXT	ENDS
;	COMDAT ??R?$xr_special_free@$00VCOMotion@@@@QAEXAAPAVCOMotion@@@Z
_TEXT	SEGMENT
??R?$xr_special_free@$00VCOMotion@@@@QAEXAAPAVCOMotion@@@Z PROC ; xr_special_free<1,COMotion>::operator(), COMDAT
; _ptr$ = esi

; 132  : 		void*	_real_ptr	= dynamic_cast<void*>(ptr);

	mov	eax, DWORD PTR [esi]
	push	edi
	push	eax
	call	___RTCastToVoid

; 133  : 		ptr->~T			();

	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx]
	add	esp, 4
	mov	edi, eax
	mov	eax, DWORD PTR [edx]
	push	0
	call	eax

; 134  : 		Memory.mem_free	(_real_ptr);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	pop	edi

; 135  : 	}

	ret	0
??R?$xr_special_free@$00VCOMotion@@@@QAEXAAPAVCOMotion@@@Z ENDP ; xr_special_free<1,COMotion>::operator()
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??$?0PAVCOMotion@@@?$xalloc@PAX@@QAE@ABV?$xalloc@PAVCOMotion@@@@@Z
_TEXT	SEGMENT
??$?0PAVCOMotion@@@?$xalloc@PAX@@QAE@ABV?$xalloc@PAVCOMotion@@@@@Z PROC ; xalloc<void *>::xalloc<void *><COMotion *>, COMDAT
; _this$ = eax

; 79   : 	template<class _Other>							xalloc			(const xalloc<_Other>&)					{	}

	ret	0
??$?0PAVCOMotion@@@?$xalloc@PAX@@QAE@ABV?$xalloc@PAVCOMotion@@@@@Z ENDP ; xalloc<void *>::xalloc<void *><COMotion *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrmemory_subst_msvc.h
_TEXT	ENDS
;	COMDAT ??$xr_delete@VCOMotion@@@@YAXAAPAVCOMotion@@@Z
_TEXT	SEGMENT
??$xr_delete@VCOMotion@@@@YAXAAPAVCOMotion@@@Z PROC	; xr_delete<COMotion>, COMDAT
; _ptr$ = esi

; 151  : 	if (ptr) 

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN1@xr_delete@7
	push	edi

; 152  : 	{
; 153  : 		xr_special_free<is_polymorphic<T>::result,T>()(ptr);

	push	eax
	call	___RTCastToVoid
	mov	ecx, DWORD PTR [esi]
	mov	edi, eax
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	add	esp, 4
	push	0
	call	edx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z

; 154  : 		ptr = NULL;

	mov	DWORD PTR [esi], 0
	pop	edi
$LN1@xr_delete@7:

; 155  : 	}
; 156  : }

	ret	0
??$xr_delete@VCOMotion@@@@YAXAAPAVCOMotion@@@Z ENDP	; xr_delete<COMotion>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xalloc@PAVCOMotion@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xalloc@PAVCOMotion@@@@QAE@XZ PROC			; xalloc<COMotion *>::xalloc<COMotion *>, COMDAT
; _this$ = eax

; 77   : 													xalloc			()										{	}

	ret	0
??0?$xalloc@PAVCOMotion@@@@QAE@XZ ENDP			; xalloc<COMotion *>::xalloc<COMotion *>
_TEXT	ENDS
PUBLIC	?XFORM@CObjectAnimator@@QAEABU?$_matrix@M@@XZ	; CObjectAnimator::XFORM
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\objectanimator.h
;	COMDAT ?XFORM@CObjectAnimator@@QAEABU?$_matrix@M@@XZ
_TEXT	SEGMENT
?XFORM@CObjectAnimator@@QAEABU?$_matrix@M@@XZ PROC	; CObjectAnimator::XFORM, COMDAT
; _this$ = ecx

; 40   :     IC const Fmatrix&	XFORM			(){return m_XFORM;}

	lea	eax, DWORD PTR [ecx+12]
	ret	0
?XFORM@CObjectAnimator@@QAEABU?$_matrix@M@@XZ ENDP	; CObjectAnimator::XFORM
_TEXT	ENDS
PUBLIC	?IsPlaying@CObjectAnimator@@QAEHXZ		; CObjectAnimator::IsPlaying
; Function compile flags: /Ogtpy
;	COMDAT ?IsPlaying@CObjectAnimator@@QAEHXZ
_TEXT	SEGMENT
?IsPlaying@CObjectAnimator@@QAEHXZ PROC			; CObjectAnimator::IsPlaying, COMDAT
; _this$ = ecx

; 38   : 	IC BOOL				IsPlaying		(){return m_MParam.bPlay;}

	mov	eax, DWORD PTR [ecx+92]
	ret	0
?IsPlaying@CObjectAnimator@@QAEHXZ ENDP			; CObjectAnimator::IsPlaying
_TEXT	ENDS
PUBLIC	?Speed@CObjectAnimator@@QAEAAMXZ		; CObjectAnimator::Speed
; Function compile flags: /Ogtpy
;	COMDAT ?Speed@CObjectAnimator@@QAEAAMXZ
_TEXT	SEGMENT
?Speed@CObjectAnimator@@QAEAAMXZ PROC			; CObjectAnimator::Speed, COMDAT
; _this$ = ecx

; 33   :     float&				Speed			(){return m_Speed;}

	lea	eax, DWORD PTR [ecx+112]
	ret	0
?Speed@CObjectAnimator@@QAEAAMXZ ENDP			; CObjectAnimator::Speed
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\motion.h
_TEXT	ENDS
;	COMDAT ?Pause@SAnimParams@@QAEX_N@Z
_TEXT	SEGMENT
_val$ = 8						; size = 1
?Pause@SAnimParams@@QAEX_N@Z PROC			; SAnimParams::Pause, COMDAT
; _this$ = ecx

; 191  :     void			Pause	(bool val){bPlay=!val;}

	xor	eax, eax
	cmp	BYTE PTR _val$[esp-4], al
	sete	al
	mov	DWORD PTR [ecx+16], eax
	ret	4
?Pause@SAnimParams@@QAEX_N@Z ENDP			; SAnimParams::Pause
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Stop@SAnimParams@@QAEXXZ
_TEXT	SEGMENT
?Stop@SAnimParams@@QAEXXZ PROC				; SAnimParams::Stop, COMDAT
; _this$ = eax

; 190  :     void			Stop	(){bPlay=false; t_current=min_t; tmp=min_t;}

	movss	xmm0, DWORD PTR [eax+8]
	mov	DWORD PTR [eax+16], 0
	movss	DWORD PTR [eax], xmm0
	movss	DWORD PTR [eax+4], xmm0
	ret	0
?Stop@SAnimParams@@QAEXXZ ENDP				; SAnimParams::Stop
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Play@SAnimParams@@QAEXXZ
_TEXT	SEGMENT
?Play@SAnimParams@@QAEXXZ PROC				; SAnimParams::Play, COMDAT
; _this$ = eax

; 189  :     void			Play	(){bPlay=true; t_current=min_t; tmp=min_t;}

	movss	xmm0, DWORD PTR [eax+8]
	mov	DWORD PTR [eax+16], 1
	movss	DWORD PTR [eax], xmm0
	movss	DWORD PTR [eax+4], xmm0
	ret	0
?Play@SAnimParams@@QAEXXZ ENDP				; SAnimParams::Play
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Frame@SAnimParams@@QAEMXZ
_TEXT	SEGMENT
?Frame@SAnimParams@@QAEMXZ PROC				; SAnimParams::Frame, COMDAT
; _this$ = eax

; 187  :     float			Frame	()			{ return t_current;}

	movss	xmm0, DWORD PTR [eax]
	ret	0
?Frame@SAnimParams@@QAEMXZ ENDP				; SAnimParams::Frame
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0SAnimParams@@QAE@XZ
_TEXT	SEGMENT
??0SAnimParams@@QAE@XZ PROC				; SAnimParams::SAnimParams, COMDAT
; _this$ = eax

; 184  : 					SAnimParams(){bWrapped=false;bPlay=false;t_current=0.f;min_t=0.f;max_t=0.f;tmp=0.f;}

	xorps	xmm0, xmm0
	xor	ecx, ecx
	mov	DWORD PTR [eax+20], ecx
	mov	DWORD PTR [eax+16], ecx
	movss	DWORD PTR [eax], xmm0
	movss	DWORD PTR [eax+8], xmm0
	movss	DWORD PTR [eax+12], xmm0
	movss	DWORD PTR [eax+4], xmm0
	ret	0
??0SAnimParams@@QAE@XZ ENDP				; SAnimParams::SAnimParams
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrstring.h
;	COMDAT ??M@YA_NABVshared_str@@0@Z
_TEXT	SEGMENT
??M@YA_NABVshared_str@@0@Z PROC				; operator<, COMDAT
; _a$ = eax
; _b$ = edx

; 110  : IC bool operator	<	(shared_str const & a, shared_str const & b)		{ return a._get() <  b._get();					}

	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR [edx]
	sbb	eax, eax
	neg	eax
	ret	0
??M@YA_NABVshared_str@@0@Z ENDP				; operator<
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__copy_backward_ptrs@PAPAVCOMotion@@PAPAV1@@priv@stlp_std@@YAPAPAVCOMotion@@PAPAV2@00ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__copy_backward_ptrs@PAPAVCOMotion@@PAPAV1@@priv@stlp_std@@YAPAPAVCOMotion@@PAPAV2@00ABU__true_type@1@@Z PROC ; stlp_std::priv::__copy_backward_ptrs<COMotion * *,COMotion * *>, COMDAT
; ___first$ = edx
; ___last$ = ecx
; ___result$ = eax

; 294  :   return (_OutputIter)__copy_trivial_backward(__first, __last, __result);

	sub	ecx, edx
	test	ecx, ecx
	jle	SHORT $LN6@copy_backw@22
	push	ecx
	push	edx
	sub	eax, ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN6@copy_backw@22:

; 295  : }

	ret	0
??$__copy_backward_ptrs@PAPAVCOMotion@@PAPAV1@@priv@stlp_std@@YAPAPAVCOMotion@@PAPAV2@00ABU__true_type@1@@Z ENDP ; stlp_std::priv::__copy_backward_ptrs<COMotion * *,COMotion * *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_heap.c
_TEXT	ENDS
;	COMDAT ??$__pop_heap_aux@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@00P6A_NPAV1@1@Z@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 4
??$__pop_heap_aux@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@00P6A_NPAV1@1@Z@Z PROC ; stlp_std::__pop_heap_aux<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>, COMDAT
; ___first$ = ecx
; ___last$ = eax

; 174  :   __pop_heap(__first, __last - 1, __last - 1, _Tp(*(__last - 1)), __comp,
; 175  :              _STLP_DISTANCE_TYPE(__first, _RandomAccessIterator));

	mov	edx, DWORD PTR [eax-4]
	push	esi
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax-4], esi
	mov	esi, DWORD PTR ___comp$[esp]
	sub	eax, ecx
	sub	eax, 4
	push	esi
	sar	eax, 2
	push	edx
	push	eax
	xor	eax, eax
	call	??$__adjust_heap@PAPAVCOMotion@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@HHPAV1@P6A_N11@Z@Z ; stlp_std::__adjust_heap<COMotion * *,int,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
	add	esp, 12					; 0000000cH
	pop	esi

; 176  : }

	ret	0
??$__pop_heap_aux@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@00P6A_NPAV1@1@Z@Z ENDP ; stlp_std::__pop_heap_aux<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__copy_backward_aux@PAPAVCOMotion@@PAPAV1@@priv@stlp_std@@YAPAPAVCOMotion@@PAPAV2@00ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__copy_backward_aux@PAPAVCOMotion@@PAPAV1@@priv@stlp_std@@YAPAPAVCOMotion@@PAPAV2@00ABU__true_type@1@@Z PROC ; stlp_std::priv::__copy_backward_aux<COMotion * *,COMotion * *>, COMDAT
; ___first$ = edx
; ___last$ = ecx
; ___result$ = eax

; 304  :   return __copy_backward_ptrs(__first, __last, __result,
; 305  :                               _UseTrivialCopy(_STLP_VALUE_TYPE(__first, _InputIter),
; 306  :                                               _STLP_VALUE_TYPE(__result, _OutputIter))._Answer());

	sub	ecx, edx
	test	ecx, ecx
	jle	SHORT $LN12@copy_backw@23
	push	ecx
	push	edx
	sub	eax, ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN12@copy_backw@23:

; 307  : }

	ret	0
??$__copy_backward_aux@PAPAVCOMotion@@PAPAV1@@priv@stlp_std@@YAPAPAVCOMotion@@PAPAV2@00ABU__true_type@1@@Z ENDP ; stlp_std::priv::__copy_backward_aux<COMotion * *,COMotion * *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_heap.c
_TEXT	ENDS
;	COMDAT ??$pop_heap@PAPAVCOMotion@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV1@1@Z@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 4
??$pop_heap@PAPAVCOMotion@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV1@1@Z@Z PROC ; stlp_std::pop_heap<COMotion * *,bool (__cdecl*)(COMotion *,COMotion *)>, COMDAT
; ___first$ = ecx
; ___last$ = eax

; 184  :     __pop_heap_aux(__first, __last, _STLP_VALUE_TYPE(__first, _RandomAccessIterator), __comp);

	mov	edx, DWORD PTR [eax-4]
	push	esi
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax-4], esi
	mov	esi, DWORD PTR ___comp$[esp]
	sub	eax, ecx
	sub	eax, 4
	push	esi
	sar	eax, 2
	push	edx
	push	eax
	xor	eax, eax
	call	??$__adjust_heap@PAPAVCOMotion@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@HHPAV1@P6A_N11@Z@Z ; stlp_std::__adjust_heap<COMotion * *,int,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
	add	esp, 12					; 0000000cH
	pop	esi

; 185  : }

	ret	0
??$pop_heap@PAPAVCOMotion@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV1@1@Z@Z ENDP ; stlp_std::pop_heap<COMotion * *,bool (__cdecl*)(COMotion *,COMotion *)>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$copy_backward@PAPAVCOMotion@@PAPAV1@@stlp_std@@YAPAPAVCOMotion@@PAPAV1@00@Z
_TEXT	SEGMENT
??$copy_backward@PAPAVCOMotion@@PAPAV1@@stlp_std@@YAPAPAVCOMotion@@PAPAV1@00@Z PROC ; stlp_std::copy_backward<COMotion * *,COMotion * *>, COMDAT
; ___first$ = edx
; ___last$ = ecx
; ___result$ = eax

; 313  :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__first, __last))
; 314  :   return _STLP_PRIV __copy_backward_aux(__first, __last, __result, _BothPtrType< _InputIter, _OutputIter>::_Answer() );

	sub	ecx, edx
	test	ecx, ecx
	jle	SHORT $LN16@copy_backw@24
	push	ecx
	push	edx
	sub	eax, ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN16@copy_backw@24:

; 315  : }

	ret	0
??$copy_backward@PAPAVCOMotion@@PAPAV1@@stlp_std@@YAPAPAVCOMotion@@PAPAV1@00@Z ENDP ; stlp_std::copy_backward<COMotion * *,COMotion * *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_heap.h
_TEXT	ENDS
;	COMDAT ??$sort_heap@PAPAVCOMotion@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV1@1@Z@Z
_TEXT	SEGMENT
??$sort_heap@PAPAVCOMotion@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV1@1@Z@Z PROC ; stlp_std::sort_heap<COMotion * *,bool (__cdecl*)(COMotion *,COMotion *)>, COMDAT
; ___first$ = esi
; ___last$ = eax
; ___comp$ = ebx

; 111  :   while (__last - __first > 1)

	sub	eax, esi
	mov	ecx, eax
	and	ecx, -4					; fffffffcH
	cmp	ecx, 4
	jle	SHORT $LN1@sort_heap@2
	push	edi
	npad	3
$LL2@sort_heap@2:

; 112  :     pop_heap(__first, __last--, __comp);

	mov	ecx, DWORD PTR [esi+eax-4]
	mov	edx, DWORD PTR [esi]
	lea	edi, DWORD PTR [eax-4]
	mov	DWORD PTR [esi+eax-4], edx
	push	ebx
	push	ecx
	mov	eax, edi
	sar	eax, 2
	push	eax
	xor	eax, eax
	mov	ecx, esi
	call	??$__adjust_heap@PAPAVCOMotion@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@HHPAV1@P6A_N11@Z@Z ; stlp_std::__adjust_heap<COMotion * *,int,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
	mov	eax, edi
	mov	ecx, edi
	and	ecx, -4					; fffffffcH
	add	esp, 12					; 0000000cH
	cmp	ecx, 4
	jg	SHORT $LL2@sort_heap@2
	pop	edi
$LN1@sort_heap@2:

; 113  : }

	ret	0
??$sort_heap@PAPAVCOMotion@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV1@1@Z@Z ENDP ; stlp_std::sort_heap<COMotion * *,bool (__cdecl*)(COMotion *,COMotion *)>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.c
_TEXT	ENDS
;	COMDAT ??$__linear_insert@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@0PAV2@P6A_N11@Z@Z
_TEXT	SEGMENT
??$__linear_insert@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@0PAV2@P6A_N11@Z@Z PROC ; stlp_std::priv::__linear_insert<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>, COMDAT
; ___first$ = ecx
; ___last$ = eax
; ___val$ = ebx

; 911  :   //*TY 12/26/1998 - added __val as a paramter
; 912  :   //  _Tp __val = *__last;        //*TY 12/26/1998 - __val supplied by caller
; 913  :   if (__comp(__val, *__first)) {

	mov	edx, DWORD PTR [ebx+20]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [esi]
	cmp	edx, DWORD PTR [ecx+20]
	jae	SHORT $LN2@linear_ins@4

; 914  :     _STLP_VERBOSE_ASSERT(!__comp(*__first, __val), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 915  :     copy_backward(__first, __last, __last + 1);

	mov	ecx, eax
	sub	ecx, esi
	test	ecx, ecx
	jle	SHORT $LN27@linear_ins@4
	push	ecx
	sub	eax, ecx
	add	eax, 4
	push	esi
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN27@linear_ins@4:

; 916  :     *__first = __val;

	mov	DWORD PTR [esi], ebx
	pop	esi

; 920  : }

	ret	0
$LN2@linear_ins@4:
	push	edi

; 917  :   }
; 918  :   else
; 919  :     __unguarded_linear_insert(__last, __val, __comp);

	lea	esi, DWORD PTR [eax-4]
	mov	edi, eax
	mov	eax, DWORD PTR [esi]
	push	eax
	push	ebx
	call	?motion_sort_pred@@YA_NPAVCOMotion@@0@Z	; motion_sort_pred
	add	esp, 8
	test	al, al
	je	SHORT $LN29@linear_ins@4
$LL30@linear_ins@4:
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
	mov	edx, DWORD PTR [esi-4]
	mov	edi, esi
	sub	esi, 4
	push	edx
	push	ebx
	call	?motion_sort_pred@@YA_NPAVCOMotion@@0@Z	; motion_sort_pred
	add	esp, 8
	test	al, al
	jne	SHORT $LL30@linear_ins@4
$LN29@linear_ins@4:
	mov	DWORD PTR [edi], ebx
	pop	edi
	pop	esi

; 920  : }

	ret	0
??$__linear_insert@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@0PAV2@P6A_N11@Z@Z ENDP ; stlp_std::priv::__linear_insert<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__partial_sort@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@000P6A_NPAV2@1@Z@Z
_TEXT	SEGMENT
___middle$ = 8						; size = 4
___last$ = 12						; size = 4
??$__partial_sort@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@000P6A_NPAV2@1@Z@Z PROC ; stlp_std::priv::__partial_sort<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>, COMDAT
; ___first$ = eax
; ___comp$ = ebx

; 1209 :                     _RandomAccessIter __last, _Tp*, _Compare __comp) {

	push	ebp
	mov	ebp, DWORD PTR ___middle$[esp]
	push	esi
	push	edi
	mov	edi, eax

; 1210 :   make_heap(__first, __middle, __comp);

	push	ebx
	mov	eax, ebp
	call	??$make_heap@PAPAVCOMotion@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV1@1@Z@Z ; stlp_std::make_heap<COMotion * *,bool (__cdecl*)(COMotion *,COMotion *)>
	add	esp, 4

; 1211 :   for (_RandomAccessIter __i = __middle; __i < __last; ++__i) {

	cmp	ebp, DWORD PTR ___last$[esp+8]
	mov	esi, ebp
	jae	SHORT $LN2@partial_so@2
	npad	4
$LL4@partial_so@2:

; 1212 :     if (__comp(*__i, *__first)) {

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [esi]
	push	eax
	push	ecx
	call	ebx
	add	esp, 8
	test	al, al
	je	SHORT $LN3@partial_so@2

; 1213 :       _STLP_VERBOSE_ASSERT(!__comp(*__first, *__i), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 1214 :       __pop_heap(__first, __middle, __i, _Tp(*__i), __comp,
; 1215 :                  _STLP_DISTANCE_TYPE(__first, _RandomAccessIter));

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [edi]
	push	ebx
	push	eax
	mov	eax, ebp
	sub	eax, edi
	sar	eax, 2
	push	eax
	xor	eax, eax
	mov	ecx, edi
	mov	DWORD PTR [esi], edx
	call	??$__adjust_heap@PAPAVCOMotion@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@HHPAV1@P6A_N11@Z@Z ; stlp_std::__adjust_heap<COMotion * *,int,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
	add	esp, 12					; 0000000cH
$LN3@partial_so@2:
	add	esi, 4
	cmp	esi, DWORD PTR ___last$[esp+8]
	jb	SHORT $LL4@partial_so@2
$LN2@partial_so@2:

; 1216 :     }
; 1217 :   }
; 1218 :   sort_heap(__first, __middle, __comp);

	sub	ebp, edi
	mov	ecx, ebp
	and	ecx, -4					; fffffffcH
	cmp	ecx, 4
	jle	SHORT $LN9@partial_so@2
	mov	eax, ebp
$LL10@partial_so@2:
	mov	ecx, DWORD PTR [edi+eax-4]
	mov	edx, DWORD PTR [edi]
	lea	esi, DWORD PTR [eax-4]
	mov	DWORD PTR [edi+eax-4], edx
	push	ebx
	push	ecx
	mov	eax, esi
	sar	eax, 2
	push	eax
	xor	eax, eax
	mov	ecx, edi
	call	??$__adjust_heap@PAPAVCOMotion@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@HHPAV1@P6A_N11@Z@Z ; stlp_std::__adjust_heap<COMotion * *,int,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
	mov	eax, esi
	mov	ecx, esi
	and	ecx, -4					; fffffffcH
	add	esp, 12					; 0000000cH
	cmp	ecx, 4
	jg	SHORT $LL10@partial_so@2
$LN9@partial_so@2:
	pop	edi
	pop	esi
	pop	ebp

; 1219 : }

	ret	0
??$__partial_sort@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@000P6A_NPAV2@1@Z@Z ENDP ; stlp_std::priv::__partial_sort<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__insertion_sort@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@00P6A_NPAV2@1@Z@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
??$__insertion_sort@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@00P6A_NPAV2@1@Z@Z PROC ; stlp_std::priv::__insertion_sort<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>, COMDAT
; ___last$ = edi

; 925  :                       _Tp *, _Compare __comp) {

	push	ebp
	mov	ebp, DWORD PTR ___first$[esp]
	push	esi

; 926  :   if (__first == __last) return;
; 927  :   for (_RandomAccessIter __i = __first + 1; __i != __last; ++__i)

	lea	esi, DWORD PTR [ebp+4]
	cmp	esi, edi
	je	SHORT $LN1@insertion_@4
	push	ebx
	npad	2
$LL3@insertion_@4:

; 928  :     __linear_insert<_RandomAccessIter, _Tp, _Compare>(__first, __i, *__i, __comp);  //*TY 12/26/1998 - supply *__i as __val

	mov	ebx, DWORD PTR [esi]
	mov	eax, esi
	mov	ecx, ebp
	call	??$__linear_insert@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@0PAV2@P6A_N11@Z@Z ; stlp_std::priv::__linear_insert<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
	add	esi, 4
	cmp	esi, edi
	jne	SHORT $LL3@insertion_@4
	pop	ebx
$LN1@insertion_@4:
	pop	esi
	pop	ebp

; 929  : }

	ret	0
??$__insertion_sort@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@00P6A_NPAV2@1@Z@Z ENDP ; stlp_std::priv::__insertion_sort<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$partial_sort@PAPAVCOMotion@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@00P6A_NPAV1@1@Z@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
??$partial_sort@PAPAVCOMotion@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@00P6A_NPAV1@1@Z@Z PROC ; stlp_std::partial_sort<COMotion * *,bool (__cdecl*)(COMotion *,COMotion *)>, COMDAT
; ___middle$ = ecx
; ___last$ = eax
; ___comp$ = ebx

; 1235 :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__first, __middle))
; 1236 :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__middle, __last))
; 1237 :   _STLP_PRIV __partial_sort(__first, __middle, __last, _STLP_VALUE_TYPE(__first, _RandomAccessIter), __comp);

	push	eax
	mov	eax, DWORD PTR ___first$[esp]
	push	ecx
	call	??$__partial_sort@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@000P6A_NPAV2@1@Z@Z ; stlp_std::priv::__partial_sort<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
	add	esp, 8

; 1238 : }

	ret	0
??$partial_sort@PAPAVCOMotion@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@00P6A_NPAV1@1@Z@Z ENDP ; stlp_std::partial_sort<COMotion * *,bool (__cdecl*)(COMotion *,COMotion *)>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__final_insertion_sort@PAPAVCOMotion@@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV2@1@Z@Z
_TEXT	SEGMENT
___last$ = 8						; size = 4
??$__final_insertion_sort@PAPAVCOMotion@@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV2@1@Z@Z PROC ; stlp_std::priv::__final_insertion_sort<COMotion * *,bool (__cdecl*)(COMotion *,COMotion *)>, COMDAT
; ___first$ = edi

; 949  :   if (__last - __first > __stl_threshold) {

	mov	eax, DWORD PTR ___last$[esp-4]
	mov	ecx, eax
	sub	ecx, edi
	and	ecx, -4					; fffffffcH
	cmp	ecx, 64					; 00000040H
	push	ebx
	push	esi
	jle	SHORT $LN2@final_inse@4
	push	ebp

; 950  :     __insertion_sort(__first, __first + __stl_threshold, _STLP_VALUE_TYPE(__first,_RandomAccessIter), __comp);

	lea	ebp, DWORD PTR [edi+64]
	cmp	edi, ebp
	je	SHORT $LN5@final_inse@4
	lea	esi, DWORD PTR [edi+4]
	cmp	esi, ebp
	je	SHORT $LN5@final_inse@4
$LL7@final_inse@4:
	mov	ebx, DWORD PTR [esi]
	mov	eax, esi
	mov	ecx, edi
	call	??$__linear_insert@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@0PAV2@P6A_N11@Z@Z ; stlp_std::priv::__linear_insert<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
	add	esi, 4
	cmp	esi, ebp
	jne	SHORT $LL7@final_inse@4
	mov	eax, DWORD PTR ___last$[esp+8]
$LN5@final_inse@4:

; 951  :     __unguarded_insertion_sort(__first + __stl_threshold, __last, __comp);

	push	eax
	push	ebp
	call	??$__unguarded_insertion_sort_aux@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@00P6A_NPAV2@1@Z@Z ; stlp_std::priv::__unguarded_insertion_sort_aux<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
	add	esp, 8
	pop	ebp
	pop	esi
	pop	ebx

; 955  : }

	ret	0
$LN2@final_inse@4:

; 952  :   }
; 953  :   else
; 954  :     __insertion_sort(__first, __last, _STLP_VALUE_TYPE(__first,_RandomAccessIter), __comp);

	cmp	edi, eax
	je	SHORT $LN13@final_inse@4
	lea	esi, DWORD PTR [edi+4]
	cmp	esi, eax
	je	SHORT $LN13@final_inse@4
$LL15@final_inse@4:
	mov	ebx, DWORD PTR [esi]
	mov	eax, esi
	mov	ecx, edi
	call	??$__linear_insert@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@0PAV2@P6A_N11@Z@Z ; stlp_std::priv::__linear_insert<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
	add	esi, 4
	cmp	esi, DWORD PTR ___last$[esp+4]
	jne	SHORT $LL15@final_inse@4
$LN13@final_inse@4:
	pop	esi
	pop	ebx

; 955  : }

	ret	0
??$__final_insertion_sort@PAPAVCOMotion@@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV2@1@Z@Z ENDP ; stlp_std::priv::__final_insertion_sort<COMotion * *,bool (__cdecl*)(COMotion *,COMotion *)>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__introsort_loop@PAPAVCOMotion@@PAV1@HP6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@00HP6A_NPAV2@1@Z@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
$T245874 = 12						; size = 4
___last$ = 12						; size = 4
___formal$ = 16						; size = 4
___depth_limit$ = 20					; size = 4
___comp$ = 24						; size = 4
??$__introsort_loop@PAPAVCOMotion@@PAV1@HP6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@00HP6A_NPAV2@1@Z@Z PROC ; stlp_std::priv::__introsort_loop<COMotion * *,COMotion *,int,bool (__cdecl*)(COMotion *,COMotion *)>, COMDAT

; 960  :                       _Size __depth_limit, _Compare __comp) {

	push	ebp

; 961  :   while (__last - __first > __stl_threshold) {

	mov	ebp, DWORD PTR ___last$[esp]
	push	edi
	mov	edi, DWORD PTR ___first$[esp+4]
	mov	eax, ebp
	sub	eax, edi
	and	eax, -4					; fffffffcH
	cmp	eax, 64					; 00000040H
	jle	$LN2@introsort_@2
	push	ebx
	mov	ebx, DWORD PTR ___comp$[esp+8]
	push	esi
$LL3@introsort_@2:

; 962  :     if (__depth_limit == 0) {

	cmp	DWORD PTR ___depth_limit$[esp+12], 0
	je	$LN21@introsort_@2

; 964  :       return;
; 965  :     }
; 966  :     --__depth_limit;

	sub	DWORD PTR ___depth_limit$[esp+12], 1

; 967  :     _RandomAccessIter __cut =
; 968  :       __unguarded_partition(__first, __last,
; 969  :                             _Tp(__median(*__first,
; 970  :                                          *(__first + (__last - __first)/2),
; 971  :                                          *(__last - 1), __comp)),
; 972  :        __comp);

	mov	eax, ebp
	sub	eax, edi
	sar	eax, 2
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR [edi]
	sar	eax, 1
	mov	ecx, DWORD PTR [edi+eax*4]
	lea	eax, DWORD PTR [edi+eax*4]
	push	ecx
	push	edx
	lea	esi, DWORD PTR [ebp-4]
	mov	DWORD PTR $T245874[esp+20], eax
	call	ebx
	add	esp, 8
	test	al, al
	je	SHORT $LN17@introsort_@2
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR $T245874[esp+12]
	mov	edx, DWORD PTR [ecx]
	push	eax
	push	edx
	call	ebx
	add	esp, 8
	test	al, al
	jne	SHORT $LN9@introsort_@2
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [edi]
	push	eax
	push	ecx
	call	ebx
	add	esp, 8
	test	al, al
	jne	SHORT $LN8@introsort_@2
	mov	esi, edi
	jmp	SHORT $LN8@introsort_@2
$LN17@introsort_@2:
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edi]
	push	edx
	push	eax
	call	ebx
	add	esp, 8
	test	al, al
	je	SHORT $LN11@introsort_@2
	mov	esi, edi
	jmp	SHORT $LN8@introsort_@2
$LN11@introsort_@2:
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR $T245874[esp+12]
	mov	eax, DWORD PTR [edx]
	push	ecx
	push	eax
	call	ebx
	add	esp, 8
	test	al, al
	jne	SHORT $LN8@introsort_@2
$LN9@introsort_@2:
	mov	esi, DWORD PTR $T245874[esp+12]
$LN8@introsort_@2:
	mov	ecx, DWORD PTR [esi]
	push	ecx
	mov	eax, ebp
	mov	ecx, edi
	call	??$__unguarded_partition@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAPAPAVCOMotion@@PAPAV2@0PAV2@P6A_N11@Z@Z ; stlp_std::priv::__unguarded_partition<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>

; 973  :     __introsort_loop(__cut, __last, (_Tp*) 0, __depth_limit, __comp);

	mov	edx, DWORD PTR ___depth_limit$[esp+16]
	push	ebx
	push	edx
	push	0
	mov	esi, eax
	push	ebp
	push	esi
	call	??$__introsort_loop@PAPAVCOMotion@@PAV1@HP6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@00HP6A_NPAV2@1@Z@Z ; stlp_std::priv::__introsort_loop<COMotion * *,COMotion *,int,bool (__cdecl*)(COMotion *,COMotion *)>

; 974  :     __last = __cut;

	mov	ebp, esi
	sub	esi, edi
	and	esi, -4					; fffffffcH
	add	esp, 24					; 00000018H
	cmp	esi, 64					; 00000040H
	jg	$LL3@introsort_@2
	pop	esi
	pop	ebx
	pop	edi
	pop	ebp

; 975  :   }
; 976  : }

	ret	0
$LN21@introsort_@2:

; 963  :       partial_sort(__first, __last, __last, __comp);

	push	ebp
	push	ebp
	mov	eax, edi
	call	??$__partial_sort@PAPAVCOMotion@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@000P6A_NPAV2@1@Z@Z ; stlp_std::priv::__partial_sort<COMotion * *,COMotion *,bool (__cdecl*)(COMotion *,COMotion *)>
	add	esp, 8
	pop	esi
	pop	ebx
$LN2@introsort_@2:
	pop	edi
	pop	ebp

; 975  :   }
; 976  : }

	ret	0
??$__introsort_loop@PAPAVCOMotion@@PAV1@HP6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@00HP6A_NPAV2@1@Z@Z ENDP ; stlp_std::priv::__introsort_loop<COMotion * *,COMotion *,int,bool (__cdecl*)(COMotion *,COMotion *)>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$sort@PAPAVCOMotion@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV1@1@Z@Z
_TEXT	SEGMENT
??$sort@PAPAVCOMotion@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV1@1@Z@Z PROC ; stlp_std::sort<COMotion * *,bool (__cdecl*)(COMotion *,COMotion *)>, COMDAT
; ___first$ = eax
; ___last$ = esi

; 994  : void sort(_RandomAccessIter __first, _RandomAccessIter __last, _Compare __comp) {

	push	edi
	mov	edi, eax

; 995  :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__first, __last))
; 996  :   if (__first != __last) {

	cmp	edi, esi
	je	SHORT $LN1@sort@2

; 997  :     _STLP_PRIV __introsort_loop(__first, __last,
; 998  :                                 _STLP_VALUE_TYPE(__first, _RandomAccessIter),
; 999  :                                 _STLP_PRIV __lg(__last - __first) * 2, __comp);

	mov	eax, esi
	sub	eax, edi
	sar	eax, 2
	xor	ecx, ecx
	cmp	eax, 1
	je	SHORT $LN4@sort@2
$LL6@sort@2:
	sar	eax, 1
	add	ecx, 1
	cmp	eax, 1
	jne	SHORT $LL6@sort@2
$LN4@sort@2:
	push	OFFSET ?motion_sort_pred@@YA_NPAVCOMotion@@0@Z ; motion_sort_pred
	lea	eax, DWORD PTR [ecx+ecx]
	push	eax
	push	0
	push	esi
	push	edi
	call	??$__introsort_loop@PAPAVCOMotion@@PAV1@HP6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@00HP6A_NPAV2@1@Z@Z ; stlp_std::priv::__introsort_loop<COMotion * *,COMotion *,int,bool (__cdecl*)(COMotion *,COMotion *)>

; 1000 :     _STLP_PRIV __final_insertion_sort(__first, __last, __comp);

	push	esi
	call	??$__final_insertion_sort@PAPAVCOMotion@@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV2@1@Z@Z ; stlp_std::priv::__final_insertion_sort<COMotion * *,bool (__cdecl*)(COMotion *,COMotion *)>
	add	esp, 24					; 00000018H
$LN1@sort@2:
	pop	edi

; 1001 :   }
; 1002 : }

	ret	0
??$sort@PAPAVCOMotion@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV1@1@Z@Z ENDP ; stlp_std::sort<COMotion * *,bool (__cdecl*)(COMotion *,COMotion *)>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_tools.h
_TEXT	ENDS
;	COMDAT ?to_storage_type_cref@?$_CastTraits@PAXPAVCOMotion@@@priv@stlp_std@@SAABQAXABQAVCOMotion@@@Z
_TEXT	SEGMENT
?to_storage_type_cref@?$_CastTraits@PAXPAVCOMotion@@@priv@stlp_std@@SAABQAXABQAVCOMotion@@@Z PROC ; stlp_std::priv::_CastTraits<void *,COMotion *>::to_storage_type_cref, COMDAT
; ___ref$ = eax

; 224  :   { return cv_traits::uncv_cref(__REINTERPRET_CAST(void_cv_type const&, __ref)); }

	ret	0
?to_storage_type_cref@?$_CastTraits@PAXPAVCOMotion@@@priv@stlp_std@@SAABQAXABQAVCOMotion@@@Z ENDP ; stlp_std::priv::_CastTraits<void *,COMotion *>::to_storage_type_cref
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_value_type_ref@?$_CastTraits@PAXPAVCOMotion@@@priv@stlp_std@@SAAAPAVCOMotion@@AAPAX@Z
_TEXT	SEGMENT
?to_value_type_ref@?$_CastTraits@PAXPAVCOMotion@@@priv@stlp_std@@SAAAPAVCOMotion@@AAPAX@Z PROC ; stlp_std::priv::_CastTraits<void *,COMotion *>::to_value_type_ref, COMDAT
; ___ref$ = eax

; 213  :   { return __REINTERPRET_CAST(value_type &, cv_traits::cv_ref(__ref)); }

	ret	0
?to_value_type_ref@?$_CastTraits@PAXPAVCOMotion@@@priv@stlp_std@@SAAAPAVCOMotion@@AAPAX@Z ENDP ; stlp_std::priv::_CastTraits<void *,COMotion *>::to_value_type_ref
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_value_type_ptr@?$_CastTraits@PAXPAVCOMotion@@@priv@stlp_std@@SAPAPAVCOMotion@@PAPAX@Z
_TEXT	SEGMENT
?to_value_type_ptr@?$_CastTraits@PAXPAVCOMotion@@@priv@stlp_std@@SAPAPAVCOMotion@@PAPAX@Z PROC ; stlp_std::priv::_CastTraits<void *,COMotion *>::to_value_type_ptr, COMDAT
; ___ptr$ = eax

; 207  :   { return __REINTERPRET_CAST(value_type *, cv_traits::cv_ptr(__ptr)); }

	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	ret	0
?to_value_type_ptr@?$_CastTraits@PAXPAVCOMotion@@@priv@stlp_std@@SAPAPAVCOMotion@@PAPAX@Z ENDP ; stlp_std::priv::_CastTraits<void *,COMotion *>::to_value_type_ptr
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?empty@?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QBE_NXZ PROC ; stlp_std::vector<COMotion *,xalloc<COMotion *> >::empty, COMDAT
; _this$ = ecx

; 93   :   bool empty() const            { return _M_impl.empty(); }

	jmp	?empty@?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QBE_NXZ ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::empty
?empty@?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QBE_NXZ ENDP ; stlp_std::vector<COMotion *,xalloc<COMotion *> >::empty
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAEPAPAVCOMotion@@XZ
_TEXT	SEGMENT
?end@?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAEPAPAVCOMotion@@XZ PROC ; stlp_std::vector<COMotion *,xalloc<COMotion *> >::end, COMDAT
; _this$ = eax

; 81   :   iterator end()               { return cast_traits::to_value_type_ptr(_M_impl.end()); }

	mov	eax, DWORD PTR [eax+4]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	ret	0
?end@?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAEPAPAVCOMotion@@XZ ENDP ; stlp_std::vector<COMotion *,xalloc<COMotion *> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAEPAPAVCOMotion@@XZ
_TEXT	SEGMENT
?begin@?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAEPAPAVCOMotion@@XZ PROC ; stlp_std::vector<COMotion *,xalloc<COMotion *> >::begin, COMDAT
; _this$ = eax

; 79   :   iterator begin()             { return cast_traits::to_value_type_ptr(_M_impl.begin()); }

	mov	eax, DWORD PTR [eax]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	ret	0
?begin@?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAEPAPAVCOMotion@@XZ ENDP ; stlp_std::vector<COMotion *,xalloc<COMotion *> >::begin
_TEXT	ENDS
PUBLIC	?GetLength@CObjectAnimator@@QAEMXZ		; CObjectAnimator::GetLength
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\objectanimator.cpp
;	COMDAT ?GetLength@CObjectAnimator@@QAEMXZ
_TEXT	SEGMENT
tv152 = -4						; size = 4
?GetLength@CObjectAnimator@@QAEMXZ PROC			; CObjectAnimator::GetLength, COMDAT
; _this$ = ecx

; 121  : {

	push	ecx

; 122  : 	if(!m_Current) return 0.0f;

	cmp	DWORD PTR [ecx+116], 0
	jne	SHORT $LN1@GetLength@2
	fldz

; 125  : }

	pop	ecx
	ret	0
$LN1@GetLength@2:

; 123  : 	float res = m_Current->Length()/m_Current->FPS();

	mov	eax, DWORD PTR [ecx+116]

; 124  : 	return res; 

	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	DWORD PTR tv152[esp+4], ecx
	fild	DWORD PTR tv152[esp+4]
	fdiv	DWORD PTR [eax+16]

; 125  : }

	pop	ecx
	ret	0
?GetLength@CObjectAnimator@@QAEMXZ ENDP			; CObjectAnimator::GetLength
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?motion_sort_pred@@YA_NPAVCOMotion@@0@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?motion_sort_pred@@YA_NPAVCOMotion@@0@Z PROC		; motion_sort_pred, COMDAT

; 7    : bool motion_sort_pred	(COMotion* a, 	COMotion* b)	{	return a->name<b->name;}

	mov	eax, DWORD PTR _a$[esp-4]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _b$[esp-4]
	cmp	ecx, DWORD PTR [edx+20]
	sbb	eax, eax
	neg	eax
	ret	0
?motion_sort_pred@@YA_NPAVCOMotion@@0@Z ENDP		; motion_sort_pred
_TEXT	ENDS
PUBLIC	?Pause@CObjectAnimator@@QAEX_N@Z		; CObjectAnimator::Pause
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\objectanimator.h
;	COMDAT ?Pause@CObjectAnimator@@QAEX_N@Z
_TEXT	SEGMENT
_val$ = 8						; size = 1
?Pause@CObjectAnimator@@QAEX_N@Z PROC			; CObjectAnimator::Pause, COMDAT
; _this$ = ecx

; 36   : 	void				Pause			(bool val){return m_MParam.Pause(val);}

	xor	eax, eax
	cmp	BYTE PTR _val$[esp-4], al
	sete	al
	mov	DWORD PTR [ecx+92], eax
	ret	4
?Pause@CObjectAnimator@@QAEX_N@Z ENDP			; CObjectAnimator::Pause
_TEXT	ENDS
PUBLIC	?Name@CObjectAnimator@@QAEPBDXZ			; CObjectAnimator::Name
; Function compile flags: /Ogtpy
;	COMDAT ?Name@CObjectAnimator@@QAEPBDXZ
_TEXT	SEGMENT
?Name@CObjectAnimator@@QAEPBDXZ PROC			; CObjectAnimator::Name, COMDAT
; _this$ = ecx

; 32   :     IC LPCSTR			Name			(){return *m_Name;}

	mov	eax, DWORD PTR [ecx+8]
	test	eax, eax
	je	SHORT $LN5@Name
	add	eax, 16					; 00000010H
	ret	0
$LN5@Name:
	xor	eax, eax
	ret	0
?Name@CObjectAnimator@@QAEPBDXZ ENDP			; CObjectAnimator::Name
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
;	COMDAT ??0?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAE@ABV?$xalloc@PAVCOMotion@@@@@Z
_TEXT	SEGMENT
??0?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAE@ABV?$xalloc@PAVCOMotion@@@@@Z PROC ; stlp_std::vector<COMotion *,xalloc<COMotion *> >::vector<COMotion *,xalloc<COMotion *> >, COMDAT
; _this$ = eax

; 106  :   explicit vector(const allocator_type& __a = allocator_type())

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAE@ABV?$xalloc@PAVCOMotion@@@@@Z ENDP ; stlp_std::vector<COMotion *,xalloc<COMotion *> >::vector<COMotion *,xalloc<COMotion *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?front@?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAEAAPAVCOMotion@@XZ
_TEXT	SEGMENT
?front@?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAEAAPAVCOMotion@@XZ PROC ; stlp_std::vector<COMotion *,xalloc<COMotion *> >::front, COMDAT
; _this$ = eax

; 98   :   reference front()             { return cast_traits::to_value_type_ref(_M_impl.front()); }

	mov	eax, DWORD PTR [eax]
	ret	0
?front@?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAEAAPAVCOMotion@@XZ ENDP ; stlp_std::vector<COMotion *,xalloc<COMotion *> >::front
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_matrix.h
_TEXT	ENDS
;	COMDAT ?setXYZi@?$_matrix@M@@QAEAAU1@MMM@Z
_TEXT	SEGMENT
__sh$298711 = -12					; size = 4
__ch$298708 = -8					; size = 4
$T298720 = -8						; size = 4
__sp$298712 = -4					; size = 4
__cb$298710 = 8						; size = 4
$T298718 = 8						; size = 4
_x$ = 8							; size = 4
__sb$298713 = 12					; size = 4
$T298719 = 12						; size = 4
_y$ = 12						; size = 4
__cp$298709 = 16					; size = 4
_z$ = 16						; size = 4
?setXYZi@?$_matrix@M@@QAEAAU1@MMM@Z PROC		; _matrix<float>::setXYZi, COMDAT
; _this$ = esi

; 577  : 	IC	SelfRef	setXYZi	(T x, T y, T z)	{return setHPB(-y,-x,-z);}

	sub	esp, 16					; 00000010H
	fld	DWORD PTR _y$[esp+12]
	push	ecx
	fchs
	fst	DWORD PTR $T298720[esp+20]
	fld	DWORD PTR _x$[esp+16]
	fchs
	fstp	DWORD PTR $T298719[esp+16]
	fld	DWORD PTR _z$[esp+16]
	fchs
	fstp	DWORD PTR $T298718[esp+16]
	fstp	DWORD PTR [esp]
	call	_sinf
	fstp	DWORD PTR __sh$298711[esp+20]
	fld	DWORD PTR $T298720[esp+20]
	fstp	DWORD PTR [esp]
	call	_cosf
	fstp	DWORD PTR __ch$298708[esp+20]
	fld	DWORD PTR $T298719[esp+16]
	fstp	DWORD PTR [esp]
	call	_sinf
	fstp	DWORD PTR __sp$298712[esp+20]
	fld	DWORD PTR $T298719[esp+16]
	fstp	DWORD PTR [esp]
	call	_cosf
	fstp	DWORD PTR __cp$298709[esp+16]
	fld	DWORD PTR $T298718[esp+16]
	fstp	DWORD PTR [esp]
	call	_sinf
	fstp	DWORD PTR __sb$298713[esp+16]
	fld	DWORD PTR $T298718[esp+16]
	fstp	DWORD PTR [esp]
	call	_cosf
	movss	xmm4, DWORD PTR __sb$298713[esp+16]
	fst	DWORD PTR __cb$298710[esp+16]
	fld	DWORD PTR __sb$298713[esp+16]
	movss	xmm1, DWORD PTR __cb$298710[esp+16]
	fld	DWORD PTR __cp$298709[esp+16]
	movss	xmm2, DWORD PTR __sh$298711[esp+20]
	movss	xmm5, DWORD PTR __sp$298712[esp+20]
	fmul	ST(1), ST(0)
	movss	xmm6, DWORD PTR __ch$298708[esp+20]
	fxch	ST(1)
	movaps	xmm0, xmm1
	mulss	xmm1, xmm2
	fchs
	movaps	xmm3, xmm4
	fstp	DWORD PTR [esi+4]
	mulss	xmm4, xmm2
	mulss	xmm0, xmm6
	fmulp	ST(1), ST(0)
	movaps	xmm7, xmm0
	mulss	xmm3, xmm6
	movaps	xmm2, xmm4
	mulss	xmm2, xmm5
	subss	xmm7, xmm2
	movaps	xmm2, xmm3
	movss	DWORD PTR [esi], xmm7
	mulss	xmm2, xmm5
	addss	xmm2, xmm1
	movss	DWORD PTR [esi+8], xmm2
	xorps	xmm2, xmm2
	movss	DWORD PTR [esi+12], xmm2
	fstp	DWORD PTR [esi+20]
	mulss	xmm1, xmm5
	addss	xmm1, xmm3
	movss	xmm3, DWORD PTR __real@80000000
	movss	DWORD PTR [esi+16], xmm1
	mulss	xmm0, xmm5
	subss	xmm4, xmm0
	movss	xmm0, DWORD PTR __cp$298709[esp+16]
	movss	DWORD PTR [esi+24], xmm4
	movss	DWORD PTR [esi+28], xmm2
	movaps	xmm1, xmm0
	mulss	xmm1, DWORD PTR __sh$298711[esp+20]
	subss	xmm3, xmm1
	movss	DWORD PTR [esi+32], xmm3
	movss	DWORD PTR [esi+36], xmm5
	mulss	xmm0, xmm6
	movss	DWORD PTR [esi+40], xmm0
	movss	DWORD PTR [esi+44], xmm2
	movss	DWORD PTR [esi+48], xmm2
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esi+52], xmm2
	movss	DWORD PTR [esi+56], xmm2
	movss	DWORD PTR [esi+60], xmm0
	mov	eax, esi
	add	esp, 20					; 00000014H
	ret	12					; 0000000cH
?setXYZi@?$_matrix@M@@QAEAAU1@MMM@Z ENDP		; _matrix<float>::setXYZi
_TEXT	ENDS
PUBLIC	?SetActiveMotion@CObjectAnimator@@IAEXPAVCOMotion@@@Z ; CObjectAnimator::SetActiveMotion
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\objectanimator.cpp
;	COMDAT ?SetActiveMotion@CObjectAnimator@@IAEXPAVCOMotion@@@Z
_TEXT	SEGMENT
_mot$ = 8						; size = 4
?SetActiveMotion@CObjectAnimator@@IAEXPAVCOMotion@@@Z PROC ; CObjectAnimator::SetActiveMotion, COMDAT
; _this$ = ecx

; 36   : 	m_Current			= mot;

	mov	eax, DWORD PTR _mot$[esp-4]

; 37   :     if (m_Current) 		m_MParam.Set(m_Current);

	test	eax, eax
	movss	xmm1, DWORD PTR __real@3f800000
	mov	DWORD PTR [ecx+116], eax
	je	SHORT $LN4@SetActiveM
	movss	xmm2, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [eax+12]
	movaps	xmm0, xmm1
	divss	xmm0, xmm2
	cvtsi2ss xmm2, DWORD PTR [eax+8]
	mulss	xmm2, xmm0
	movss	DWORD PTR [ecx+84], xmm2
	cvtsi2ss xmm2, edx
	mulss	xmm2, xmm0
	movss	xmm0, DWORD PTR [ecx+84]
	movss	DWORD PTR [ecx+88], xmm2
	movss	DWORD PTR [ecx+76], xmm0
	movss	DWORD PTR [ecx+80], xmm0
$LN4@SetActiveM:

; 38   : 	m_XFORM.identity	();

	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	DWORD PTR [ecx+20], xmm0
	movss	DWORD PTR [ecx+24], xmm0
	movss	DWORD PTR [ecx+28], xmm0
	movss	DWORD PTR [ecx+32], xmm1
	movss	DWORD PTR [ecx+36], xmm0
	movss	DWORD PTR [ecx+40], xmm0
	movss	DWORD PTR [ecx+44], xmm0
	movss	DWORD PTR [ecx+48], xmm0
	movss	DWORD PTR [ecx+52], xmm1
	movss	DWORD PTR [ecx+56], xmm0
	movss	DWORD PTR [ecx+60], xmm0
	movss	DWORD PTR [ecx+64], xmm0
	movss	DWORD PTR [ecx+68], xmm0
	movss	DWORD PTR [ecx+72], xmm1

; 39   : }

	ret	4
?SetActiveMotion@CObjectAnimator@@IAEXPAVCOMotion@@@Z ENDP ; CObjectAnimator::SetActiveMotion
_TEXT	ENDS
PUBLIC	?motion_find_pred@@YA_NPAVCOMotion@@Vshared_str@@@Z ; motion_find_pred
; Function compile flags: /Ogtpy
;	COMDAT ?motion_find_pred@@YA_NPAVCOMotion@@Vshared_str@@@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?motion_find_pred@@YA_NPAVCOMotion@@Vshared_str@@@Z PROC ; motion_find_pred, COMDAT

; 8    : bool motion_find_pred	(COMotion* a, 	shared_str b)	{	return a->name<b;}

	mov	ecx, DWORD PTR _b$[esp-4]
	mov	eax, DWORD PTR _a$[esp-4]
	cmp	DWORD PTR [eax+20], ecx
	setb	al
	test	ecx, ecx
	je	SHORT $LN11@motion_fin
	add	DWORD PTR [ecx], -1
$LN11@motion_fin:
	ret	0
?motion_find_pred@@YA_NPAVCOMotion@@Vshared_str@@@Z ENDP ; motion_find_pred
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAE@XZ PROC ; stlp_std::vector<COMotion *,xalloc<COMotion *> >::~vector<COMotion *,xalloc<COMotion *> >, COMDAT
; _this$ = eax
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN36@vector@25
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN36@vector@25:
	ret	0
??1?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAE@XZ ENDP ; stlp_std::vector<COMotion *,xalloc<COMotion *> >::~vector<COMotion *,xalloc<COMotion *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$xr_vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@@QAE@XZ
_TEXT	SEGMENT
??1?$xr_vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@@QAE@XZ PROC ; xr_vector<COMotion *,xalloc<COMotion *> >::~xr_vector<COMotion *,xalloc<COMotion *> >, COMDAT
; _this$ = eax
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN38@xr_vector@20
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN38@xr_vector@20:
	ret	0
??1?$xr_vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@@QAE@XZ ENDP ; xr_vector<COMotion *,xalloc<COMotion *> >::~xr_vector<COMotion *,xalloc<COMotion *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.c
;	COMDAT ??$__lower_bound@PAPAVCOMotion@@PBDP6A_NPAV1@Vshared_str@@@ZP6A_N01@ZH@priv@stlp_std@@YAPAPAVCOMotion@@PAPAV2@0ABQBDP6A_NPAV2@Vshared_str@@@Z4PAH@Z
_TEXT	SEGMENT
___val$ = 8						; size = 4
??$__lower_bound@PAPAVCOMotion@@PBDP6A_NPAV1@Vshared_str@@@ZP6A_N01@ZH@priv@stlp_std@@YAPAPAVCOMotion@@PAPAV2@0ABQBDP6A_NPAV2@Vshared_str@@@Z4PAH@Z PROC ; stlp_std::priv::__lower_bound<COMotion * *,char const *,bool (__cdecl*)(COMotion *,shared_str),bool (__cdecl*)(COMotion *,shared_str),int>, COMDAT
; ___first$ = ecx
; ___last$ = eax

; 374  :                            _Compare1 __comp1, _Compare2 __comp2, _Distance*) {

	push	ebx
	push	edi
	mov	edi, eax
	mov	ebx, ecx

; 375  :   _Distance __len = distance(__first, __last);

	sub	edi, ebx
	sar	edi, 2

; 376  :   _Distance __half;
; 377  :   _ForwardIter __middle;
; 378  : 
; 379  :   while (__len > 0) {

	test	edi, edi
	jle	SHORT $LN39@lower_boun@6
	push	ebp
	mov	ebp, DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	push	esi
	npad	9
$LL4@lower_boun@6:

; 380  :     __half = __len >> 1;
; 381  :     __middle = __first;
; 382  :     advance(__middle, __half);
; 383  :     if (__comp1(*__middle, __val)) {

	mov	eax, DWORD PTR ___val$[esp+12]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
	mov	ecx, DWORD PTR [ecx]
	mov	esi, edi
	push	eax
	sar	esi, 1
	call	ebp
	test	eax, eax
	je	SHORT $LN17@lower_boun@6
	add	DWORD PTR [eax], 1
$LN17@lower_boun@6:
	mov	edx, DWORD PTR [ebx+esi*4]
	cmp	DWORD PTR [edx+20], eax
	setb	cl
	test	eax, eax
	je	SHORT $LN40@lower_boun@6
	add	DWORD PTR [eax], -1
$LN40@lower_boun@6:
	test	cl, cl
	je	SHORT $LN2@lower_boun@6

; 384  :       _STLP_VERBOSE_ASSERT(!__comp2(__val, *__middle), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 385  :       __first = __middle;
; 386  :       ++__first;
; 387  :       __len = __len - __half - 1;

	or	eax, -1
	sub	eax, esi
	lea	ebx, DWORD PTR [ebx+esi*4+4]
	add	edi, eax

; 388  :     }
; 389  :     else

	jmp	SHORT $LN1@lower_boun@6
$LN2@lower_boun@6:

; 390  :       __len = __half;

	mov	edi, esi
$LN1@lower_boun@6:

; 376  :   _Distance __half;
; 377  :   _ForwardIter __middle;
; 378  : 
; 379  :   while (__len > 0) {

	test	edi, edi
	jg	SHORT $LL4@lower_boun@6
	pop	esi
	pop	ebp
$LN39@lower_boun@6:
	pop	edi

; 391  :   }
; 392  :   return __first;

	mov	eax, ebx
	pop	ebx

; 393  : }

	ret	0
??$__lower_bound@PAPAVCOMotion@@PBDP6A_NPAV1@Vshared_str@@@ZP6A_N01@ZH@priv@stlp_std@@YAPAPAVCOMotion@@PAPAV2@0ABQBDP6A_NPAV2@Vshared_str@@@Z4PAH@Z ENDP ; stlp_std::priv::__lower_bound<COMotion * *,char const *,bool (__cdecl*)(COMotion *,shared_str),bool (__cdecl*)(COMotion *,shared_str),int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.h
_TEXT	ENDS
;	COMDAT ??$lower_bound@PAPAVCOMotion@@PBDP6A_NPAV1@Vshared_str@@@Z@stlp_std@@YAPAPAVCOMotion@@PAPAV1@0ABQBDP6A_NPAV1@Vshared_str@@@Z@Z
_TEXT	SEGMENT
___last$ = 8						; size = 4
??$lower_bound@PAPAVCOMotion@@PBDP6A_NPAV1@Vshared_str@@@Z@stlp_std@@YAPAPAVCOMotion@@PAPAV1@0ABQBDP6A_NPAV1@Vshared_str@@@Z@Z PROC ; stlp_std::lower_bound<COMotion * *,char const *,bool (__cdecl*)(COMotion *,shared_str)>, COMDAT
; ___first$ = ecx
; ___val$ = eax

; 508  :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__first, __last))
; 509  :   return _STLP_PRIV __lower_bound(__first, __last, __val, __comp, __comp,
; 510  :                                   _STLP_DISTANCE_TYPE(__first, _ForwardIter));

	push	eax
	mov	eax, DWORD PTR ___last$[esp]
	call	??$__lower_bound@PAPAVCOMotion@@PBDP6A_NPAV1@Vshared_str@@@ZP6A_N01@ZH@priv@stlp_std@@YAPAPAVCOMotion@@PAPAV2@0ABQBDP6A_NPAV2@Vshared_str@@@Z4PAH@Z ; stlp_std::priv::__lower_bound<COMotion * *,char const *,bool (__cdecl*)(COMotion *,shared_str),bool (__cdecl*)(COMotion *,shared_str),int>
	add	esp, 4

; 511  : }

	ret	0
??$lower_bound@PAPAVCOMotion@@PBDP6A_NPAV1@Vshared_str@@@Z@stlp_std@@YAPAPAVCOMotion@@PAPAV1@0ABQBDP6A_NPAV1@Vshared_str@@@Z@Z ENDP ; stlp_std::lower_bound<COMotion * *,char const *,bool (__cdecl*)(COMotion *,shared_str)>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ??4?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
??4?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAEAAV01@ABV01@@Z PROC ; stlp_std::vector<COMotion *,xalloc<COMotion *> >::operator=, COMDAT
; _this$ = ecx
; ___x$ = eax

; 149  :   _Self& operator=(const _Self& __x) { _M_impl = __x._M_impl; return *this; }

	push	ebx
	mov	ebx, ecx
	push	eax
	call	??4?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::operator=
	mov	eax, ebx
	pop	ebx
	ret	0
??4?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAEAAV01@ABV01@@Z ENDP ; stlp_std::vector<COMotion *,xalloc<COMotion *> >::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAE@ABV01@@Z PROC ; stlp_std::vector<COMotion *,xalloc<COMotion *> >::vector<COMotion *,xalloc<COMotion *> >, COMDAT
; _this$ = esi
; ___x$ = eax

; 123  :   vector(const _Self& __x)

	push	eax
	mov	ecx, esi
	call	??0?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::_Impl_vector<void *,xalloc<void *> >
	mov	eax, esi
	ret	0
??0?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAE@ABV01@@Z ENDP ; stlp_std::vector<COMotion *,xalloc<COMotion *> >::vector<COMotion *,xalloc<COMotion *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xr_vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xr_vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@@QAE@XZ PROC ; xr_vector<COMotion *,xalloc<COMotion *> >::xr_vector<COMotion *,xalloc<COMotion *> >, COMDAT
; _this$ = eax

; 123  : 			xr_vector			()									: inherited	()					{}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$xr_vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@@QAE@XZ ENDP ; xr_vector<COMotion *,xalloc<COMotion *> >::xr_vector<COMotion *,xalloc<COMotion *> >
_TEXT	ENDS
PUBLIC	?Stop@CObjectAnimator@@QAEXXZ			; CObjectAnimator::Stop
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\objectanimator.cpp
;	COMDAT ?Stop@CObjectAnimator@@QAEXXZ
_TEXT	SEGMENT
?Stop@CObjectAnimator@@QAEXXZ PROC			; CObjectAnimator::Stop, COMDAT
; _this$ = ecx

; 116  : 	SetActiveMotion		(0);

	xorps	xmm0, xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	xor	eax, eax
	mov	DWORD PTR [ecx+116], eax
	movss	DWORD PTR [ecx+12], xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	DWORD PTR [ecx+20], xmm0
	movss	DWORD PTR [ecx+24], xmm0
	movss	DWORD PTR [ecx+28], xmm0
	movss	DWORD PTR [ecx+32], xmm1
	movss	DWORD PTR [ecx+36], xmm0
	movss	DWORD PTR [ecx+40], xmm0
	movss	DWORD PTR [ecx+44], xmm0
	movss	DWORD PTR [ecx+48], xmm0
	movss	DWORD PTR [ecx+52], xmm1
	movss	DWORD PTR [ecx+56], xmm0
	movss	DWORD PTR [ecx+60], xmm0
	movss	DWORD PTR [ecx+64], xmm0
	movss	DWORD PTR [ecx+68], xmm0
	movss	DWORD PTR [ecx+72], xmm1

; 117  : 	m_MParam.Stop		();

	movss	xmm0, DWORD PTR [ecx+84]
	mov	DWORD PTR [ecx+92], eax
	movss	DWORD PTR [ecx+76], xmm0
	movss	DWORD PTR [ecx+80], xmm0

; 118  : }

	ret	0
?Stop@CObjectAnimator@@QAEXXZ ENDP			; CObjectAnimator::Stop
_TEXT	ENDS
PUBLIC	?Play@CObjectAnimator@@QAEPAVCOMotion@@_NPBD@Z	; CObjectAnimator::Play
; Function compile flags: /Ogtpy
;	COMDAT ?Play@CObjectAnimator@@QAEPAVCOMotion@@_NPBD@Z
_TEXT	SEGMENT
_loop$ = 8						; size = 1
_name$ = 12						; size = 4
?Play@CObjectAnimator@@QAEPAVCOMotion@@_NPBD@Z PROC	; CObjectAnimator::Play, COMDAT
; _this$ = ecx

; 89   : {

	push	ebx

; 90   : 	if (name&&name[0]){

	mov	ebx, DWORD PTR _name$[esp]
	test	ebx, ebx
	push	esi
	push	edi
	mov	esi, ecx
	je	$LN6@Play
	cmp	BYTE PTR [ebx], 0
	je	$LN6@Play

; 91   : 		MotionIt it = std::lower_bound(m_Motions.begin(),m_Motions.end(),name,motion_find_pred);

	mov	eax, DWORD PTR [esi+104]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	edi, eax
	mov	eax, DWORD PTR [esi+100]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	ecx, eax
	lea	eax, DWORD PTR _name$[esp+16]
	push	eax
	mov	eax, edi
	call	??$__lower_bound@PAPAVCOMotion@@PBDP6A_NPAV1@Vshared_str@@@ZP6A_N01@ZH@priv@stlp_std@@YAPAPAVCOMotion@@PAPAV2@0ABQBDP6A_NPAV2@Vshared_str@@@Z4PAH@Z ; stlp_std::priv::__lower_bound<COMotion * *,char const *,bool (__cdecl*)(COMotion *,shared_str),bool (__cdecl*)(COMotion *,shared_str),int>
	mov	edi, eax

; 92   :         if ((it!=m_Motions.end())&&(0==xr_strcmp((*it)->Name(),name))){

	mov	eax, DWORD PTR [esi+104]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 16					; 00000010H
	cmp	edi, eax
	je	SHORT $LN5@Play
	mov	eax, DWORD PTR [edi]
	add	eax, 20					; 00000014H
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN39@Play
	add	eax, 16					; 00000010H
	jmp	SHORT $LN40@Play
$LN39@Play:
	xor	eax, eax
$LN40@Play:
	mov	ecx, ebx
$LL86@Play:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN87@Play
	test	dl, dl
	je	SHORT $LN88@Play
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN87@Play
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL86@Play
$LN88@Play:
	xor	eax, eax
	jmp	SHORT $LN89@Play
$LN87@Play:
	sbb	eax, eax
	sbb	eax, -1
$LN89@Play:
	test	eax, eax
	jne	SHORT $LN5@Play

; 93   :             bLoop 		= loop;

	mov	cl, BYTE PTR _loop$[esp+8]
	mov	BYTE PTR [esi+4], cl

; 94   :             SetActiveMotion(*it);

	mov	edx, DWORD PTR [edi]
	push	edx
	mov	ecx, esi
	call	?SetActiveMotion@CObjectAnimator@@IAEXPAVCOMotion@@@Z ; CObjectAnimator::SetActiveMotion

; 95   : 			m_MParam.Play	();

	movss	xmm0, DWORD PTR [esi+84]
	mov	DWORD PTR [esi+92], 1
	movss	DWORD PTR [esi+76], xmm0
	movss	DWORD PTR [esi+80], xmm0

; 96   :             return 		*it;

	mov	eax, DWORD PTR [edi]
	pop	edi
	pop	esi
	pop	ebx

; 110  :         }
; 111  :     }
; 112  : }

	ret	8
$LN5@Play:

; 97   :         }else{
; 98   :             Debug.fatal	(DEBUG_INFO,"OBJ ANIM::Cycle '%s' not found.",name);

	mov	eax, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	ebx
	push	OFFSET ??_C@_0CA@KAJBKBOB@OBJ?5ANIM?3?3Cycle?5?8?$CFs?8?5not?5found?4?$AA@
	push	OFFSET ??_C@_0BG@JICNBGNM@CObjectAnimator?3?3Play?$AA@
	push	98					; 00000062H
	push	OFFSET ??_C@_0DH@HIHJMPG@D?3?2CLEARSKY?2sources?2engine?2xrEng@
	push	eax

; 107  :         }else{
; 108  :             Debug.fatal	(DEBUG_INFO,"OBJ ANIM::Cycle '%s' not found.",name);

	call	DWORD PTR __imp_?fatal@xrDebug@@QAAXPBDH00ZZ
	add	esp, 24					; 00000018H
	pop	edi
	pop	esi

; 109  :             return NULL;

	xor	eax, eax
	pop	ebx

; 110  :         }
; 111  :     }
; 112  : }

	ret	8
$LN6@Play:

; 99   :             return NULL;
; 100  :         }
; 101  :     }else{
; 102  :         if (!m_Motions.empty()){

	lea	edi, DWORD PTR [esi+100]
	mov	ecx, edi
	call	?empty@?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QBE_NXZ ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::empty
	test	al, al
	jne	$LN2@Play

; 103  :             bLoop 		= loop;

	mov	cl, BYTE PTR _loop$[esp+8]

; 104  :             SetActiveMotion(m_Motions.front());

	mov	edx, DWORD PTR [edi]
	movss	xmm1, DWORD PTR __real@3f800000
	mov	BYTE PTR [esi+4], cl
	mov	eax, DWORD PTR [edx]
	test	eax, eax
	mov	DWORD PTR [esi+116], eax
	je	SHORT $LN62@Play
	movss	xmm2, DWORD PTR [eax+16]
	mov	ecx, DWORD PTR [eax+12]
	movaps	xmm0, xmm1
	divss	xmm0, xmm2
	cvtsi2ss xmm2, DWORD PTR [eax+8]
	mulss	xmm2, xmm0
	movss	DWORD PTR [esi+84], xmm2
	cvtsi2ss xmm2, ecx
	mulss	xmm2, xmm0
	movss	xmm0, DWORD PTR [esi+84]
	movss	DWORD PTR [esi+88], xmm2
	movss	DWORD PTR [esi+76], xmm0
	movss	DWORD PTR [esi+80], xmm0
$LN62@Play:
	xorps	xmm0, xmm0
	movss	DWORD PTR [esi+12], xmm1
	movss	DWORD PTR [esi+16], xmm0
	movss	DWORD PTR [esi+20], xmm0
	movss	DWORD PTR [esi+24], xmm0
	movss	DWORD PTR [esi+28], xmm0
	movss	DWORD PTR [esi+32], xmm1
	movss	DWORD PTR [esi+36], xmm0
	movss	DWORD PTR [esi+40], xmm0
	movss	DWORD PTR [esi+44], xmm0
	movss	DWORD PTR [esi+48], xmm0
	movss	DWORD PTR [esi+52], xmm1
	movss	DWORD PTR [esi+56], xmm0
	movss	DWORD PTR [esi+60], xmm0
	movss	DWORD PTR [esi+64], xmm0
	movss	DWORD PTR [esi+68], xmm0
	movss	DWORD PTR [esi+72], xmm1

; 105  : 			m_MParam.Play	();

	movss	xmm0, DWORD PTR [esi+84]
	mov	DWORD PTR [esi+92], 1
	movss	DWORD PTR [esi+76], xmm0
	movss	DWORD PTR [esi+80], xmm0

; 106  :             return 		m_Motions.front();

	mov	eax, DWORD PTR [edi]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx

; 110  :         }
; 111  :     }
; 112  : }

	ret	8
$LN2@Play:

; 107  :         }else{
; 108  :             Debug.fatal	(DEBUG_INFO,"OBJ ANIM::Cycle '%s' not found.",name);

	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	ebx
	push	OFFSET ??_C@_0CA@KAJBKBOB@OBJ?5ANIM?3?3Cycle?5?8?$CFs?8?5not?5found?4?$AA@
	push	OFFSET ??_C@_0BG@JICNBGNM@CObjectAnimator?3?3Play?$AA@
	push	108					; 0000006cH
	push	OFFSET ??_C@_0DH@HIHJMPG@D?3?2CLEARSKY?2sources?2engine?2xrEng@
	push	ecx
	call	DWORD PTR __imp_?fatal@xrDebug@@QAAXPBDH00ZZ
	add	esp, 24					; 00000018H
	pop	edi
	pop	esi

; 109  :             return NULL;

	xor	eax, eax
	pop	ebx

; 110  :         }
; 111  :     }
; 112  : }

	ret	8
?Play@CObjectAnimator@@QAEPAVCOMotion@@_NPBD@Z ENDP	; CObjectAnimator::Play
_TEXT	ENDS
PUBLIC	??0CObjectAnimator@@QAE@XZ			; CObjectAnimator::CObjectAnimator
; Function compile flags: /Ogtpy
;	COMDAT ??0CObjectAnimator@@QAE@XZ
_TEXT	SEGMENT
??0CObjectAnimator@@QAE@XZ PROC				; CObjectAnimator::CObjectAnimator, COMDAT
; _this$ = ecx

; 14   : {

	xorps	xmm0, xmm0

; 15   : 	bLoop			= false;
; 16   :     m_Current		= 0;
; 17   :     m_Speed			= 1.f;
; 18   : 	m_Name			= "";

	mov	eax, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
	push	ebx
	xor	ebx, ebx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7CObjectAnimator@@6B@
	mov	DWORD PTR [esi+8], ebx
	movss	DWORD PTR [esi+76], xmm0
	movss	DWORD PTR [esi+84], xmm0
	movss	DWORD PTR [esi+88], xmm0
	movss	DWORD PTR [esi+80], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	mov	DWORD PTR [esi+96], ebx
	mov	DWORD PTR [esi+92], ebx
	mov	DWORD PTR [esi+100], ebx
	mov	DWORD PTR [esi+104], ebx
	mov	DWORD PTR [esi+108], ebx
	mov	BYTE PTR [esi+4], bl
	mov	DWORD PTR [esi+116], ebx
	movss	DWORD PTR [esi+112], xmm0
	mov	ecx, DWORD PTR [eax]
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	call	DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	cmp	eax, ebx
	je	SHORT $LN25@CObjectAni
	add	DWORD PTR [eax], 1
$LN25@CObjectAni:
	mov	ecx, DWORD PTR [esi+8]
	cmp	ecx, ebx
	je	SHORT $LN33@CObjectAni
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [esi+8]
	cmp	DWORD PTR [ecx], ebx
$LN33@CObjectAni:
	mov	DWORD PTR [esi+8], eax

; 19   : }

	mov	eax, esi
	pop	esi
	pop	ebx
	ret	0
??0CObjectAnimator@@QAE@XZ ENDP				; CObjectAnimator::CObjectAnimator
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$xr_vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
??4?$xr_vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@@QAEAAV0@ABV0@@Z PROC ; xr_vector<COMotion *,xalloc<COMotion *> >::operator=, COMDAT
; _this$ = ecx
; ___that$ = eax
	push	ebx
	mov	ebx, ecx
	push	eax
	call	??4?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::operator=
	mov	eax, ebx
	pop	ebx
	ret	0
??4?$xr_vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@@QAEAAV0@ABV0@@Z ENDP ; xr_vector<COMotion *,xalloc<COMotion *> >::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$xr_vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xr_vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@@QAE@ABV0@@Z PROC ; xr_vector<COMotion *,xalloc<COMotion *> >::xr_vector<COMotion *,xalloc<COMotion *> >, COMDAT
; _this$ = esi
; ___that$ = eax
	push	eax
	mov	ecx, esi
	call	??0?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::_Impl_vector<void *,xalloc<void *> >
	mov	eax, esi
	ret	0
??0?$xr_vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@@QAE@ABV0@@Z ENDP ; xr_vector<COMotion *,xalloc<COMotion *> >::xr_vector<COMotion *,xalloc<COMotion *> >
_TEXT	ENDS
PUBLIC	??4CObjectAnimator@@QAEAAV0@ABV0@@Z		; CObjectAnimator::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4CObjectAnimator@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4CObjectAnimator@@QAEAAV0@ABV0@@Z PROC		; CObjectAnimator::operator=, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR ___that$[esp-4]
	push	ebx
	push	ebp
	mov	ebp, ecx
	mov	cl, BYTE PTR [eax+4]
	mov	BYTE PTR [ebp+4], cl
	mov	edx, DWORD PTR [eax+8]
	test	edx, edx
	push	esi
	push	edi
	je	SHORT $LN5@operator@83
	add	DWORD PTR [edx], 1
$LN5@operator@83:
	mov	ecx, DWORD PTR [ebp+8]
	test	ecx, ecx
	je	SHORT $LN8@operator@83
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [ebp+8]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN8@operator@83
	mov	DWORD PTR [ebp+8], 0
$LN8@operator@83:
	mov	DWORD PTR [ebp+8], edx
	lea	esi, DWORD PTR [eax+12]
	lea	edi, DWORD PTR [ebp+12]
	mov	ecx, 16					; 00000010H
	rep movsd
	mov	edx, DWORD PTR [eax+76]
	mov	DWORD PTR [ebp+76], edx
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR [ebp+80], ecx
	mov	edx, DWORD PTR [eax+84]
	mov	DWORD PTR [ebp+84], edx
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR [ebp+88], ecx
	mov	edx, DWORD PTR [eax+92]
	mov	DWORD PTR [ebp+92], edx
	mov	ecx, DWORD PTR [eax+96]
	add	eax, 100				; 00000064H
	push	eax
	lea	ebx, DWORD PTR [ebp+100]
	mov	DWORD PTR [ebp+96], ecx
	call	??4?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::operator=
	mov	eax, DWORD PTR ___that$[esp+12]
	pop	edi
	fld	DWORD PTR [eax+112]
	pop	esi
	fstp	DWORD PTR [ebp+112]
	mov	edx, DWORD PTR [eax+116]
	mov	DWORD PTR [ebp+116], edx
	mov	eax, ebp
	pop	ebp
	pop	ebx
	ret	4
??4CObjectAnimator@@QAEAAV0@ABV0@@Z ENDP		; CObjectAnimator::operator=
_TEXT	ENDS
PUBLIC	??0CObjectAnimator@@QAE@ABV0@@Z			; CObjectAnimator::CObjectAnimator
; Function compile flags: /Ogtpy
;	COMDAT ??0CObjectAnimator@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0CObjectAnimator@@QAE@ABV0@@Z PROC			; CObjectAnimator::CObjectAnimator, COMDAT
; _this$ = ecx
	push	ebx
	mov	ebx, ecx
	push	ebp
	mov	ebp, DWORD PTR ___that$[esp+4]
	mov	DWORD PTR [ebx], OFFSET ??_7CObjectAnimator@@6B@
	mov	al, BYTE PTR [ebp+4]
	xor	edx, edx
	mov	BYTE PTR [ebx+4], al
	mov	DWORD PTR [ebx+8], edx
	mov	ecx, DWORD PTR [ebp+8]
	cmp	ecx, edx
	push	esi
	push	edi
	je	SHORT $LN5@CObjectAni@2
	add	DWORD PTR [ecx], 1
$LN5@CObjectAni@2:
	mov	eax, DWORD PTR [ebx+8]
	cmp	eax, edx
	je	SHORT $LN8@CObjectAni@2
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [ebx+8]
	cmp	DWORD PTR [eax], edx
	jne	SHORT $LN8@CObjectAni@2
	mov	DWORD PTR [ebx+8], edx
$LN8@CObjectAni@2:
	mov	DWORD PTR [ebx+8], ecx
	lea	esi, DWORD PTR [ebp+12]
	lea	edi, DWORD PTR [ebx+12]
	mov	ecx, 16					; 00000010H
	rep movsd
	mov	ecx, DWORD PTR [ebp+76]
	mov	DWORD PTR [ebx+76], ecx
	mov	edx, DWORD PTR [ebp+80]
	mov	DWORD PTR [ebx+80], edx
	mov	eax, DWORD PTR [ebp+84]
	mov	DWORD PTR [ebx+84], eax
	mov	ecx, DWORD PTR [ebp+88]
	mov	DWORD PTR [ebx+88], ecx
	mov	edx, DWORD PTR [ebp+92]
	mov	DWORD PTR [ebx+92], edx
	mov	eax, DWORD PTR [ebp+96]
	lea	ecx, DWORD PTR [ebp+100]
	push	ecx
	lea	ecx, DWORD PTR [ebx+100]
	mov	DWORD PTR [ebx+96], eax
	call	??0?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::_Impl_vector<void *,xalloc<void *> >
	pop	edi
	fld	DWORD PTR [ebp+112]
	pop	esi
	fstp	DWORD PTR [ebx+112]
	mov	edx, DWORD PTR [ebp+116]
	pop	ebp
	mov	DWORD PTR [ebx+116], edx
	mov	eax, ebx
	pop	ebx
	ret	4
??0CObjectAnimator@@QAE@ABV0@@Z ENDP			; CObjectAnimator::CObjectAnimator
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
;	COMDAT ?clear@?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAEXXZ PROC ; stlp_std::vector<COMotion *,xalloc<COMotion *> >::clear, COMDAT
; _this$ = edi

; 223  :   void clear() { _M_impl.clear(); }

	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ecx
	je	SHORT $LN12@clear@44
	push	esi
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN18@clear@44
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN18@clear@44:
	mov	DWORD PTR [edi+4], eax
	pop	esi
$LN12@clear@44:
	ret	0
?clear@?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAEXXZ ENDP ; stlp_std::vector<COMotion *,xalloc<COMotion *> >::clear
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?clear_and_free@?$xr_vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear_and_free@?$xr_vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@@QAEXXZ PROC ; xr_vector<COMotion *,xalloc<COMotion *> >::clear_and_free, COMDAT
; _this$ = edi

; 128  : 	void	clear_and_free		()									{ inherited::clear();			}

	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ecx
	je	SHORT $LN14@clear_and_@13
	push	esi
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN20@clear_and_@13
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN20@clear_and_@13:
	mov	DWORD PTR [edi+4], eax
	pop	esi
$LN14@clear_and_@13:
	ret	0
?clear_and_free@?$xr_vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@@QAEXXZ ENDP ; xr_vector<COMotion *,xalloc<COMotion *> >::clear_and_free
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?push_back@?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAEXABQAVCOMotion@@@Z
_TEXT	SEGMENT
?push_back@?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAEXABQAVCOMotion@@@Z PROC ; stlp_std::vector<COMotion *,xalloc<COMotion *> >::push_back, COMDAT
; _this$ = ecx
; ___x$ = eax

; 171  :   { _M_impl.push_back(cast_traits::to_storage_type_cref(__x)); }

	push	edi
	mov	edi, ecx
	mov	ecx, DWORD PTR [edi+4]
	cmp	ecx, DWORD PTR [edi+8]
	je	SHORT $LN8@push_back@47
	push	eax
	push	ecx
	call	??$_Copy_Construct@PAX@stlp_std@@YAXPAPAXABQAX@Z ; stlp_std::_Copy_Construct<void *>
	add	esp, 8
	add	DWORD PTR [edi+4], 4
	pop	edi
	ret	0
$LN8@push_back@47:
	push	1
	push	1
	push	ecx
	call	?_M_insert_overflow@?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@AAEXPAPAXABQAXABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::_M_insert_overflow
	pop	edi
	ret	0
?push_back@?$vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@stlp_std@@QAEXABQAVCOMotion@@@Z ENDP ; stlp_std::vector<COMotion *,xalloc<COMotion *> >::push_back
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?clear@?$xr_vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$xr_vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@@QAEXXZ PROC ; xr_vector<COMotion *,xalloc<COMotion *> >::clear, COMDAT
; _this$ = edi

; 133  : 	void	clear				()									{ clear_and_free	();			}

	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ecx
	je	SHORT $LN16@clear@45
	push	esi
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN22@clear@45
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN22@clear@45:
	mov	DWORD PTR [edi+4], eax
	pop	esi
$LN16@clear@45:
	ret	0
?clear@?$xr_vector@PAVCOMotion@@V?$xalloc@PAVCOMotion@@@@@@QAEXXZ ENDP ; xr_vector<COMotion *,xalloc<COMotion *> >::clear
_TEXT	ENDS
PUBLIC	?Clear@CObjectAnimator@@QAEXXZ			; CObjectAnimator::Clear
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\objectanimator.cpp
;	COMDAT ?Clear@CObjectAnimator@@QAEXXZ
_TEXT	SEGMENT
?Clear@CObjectAnimator@@QAEXXZ PROC			; CObjectAnimator::Clear, COMDAT
; _this$ = ecx

; 27   : {

	push	esi
	push	edi
	mov	edi, ecx

; 28   : 	for(MotionIt m_it=m_Motions.begin(); m_it!=m_Motions.end(); m_it++)

	mov	eax, DWORD PTR [edi+100]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	esi, eax
	mov	eax, DWORD PTR [edi+104]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 8
	cmp	esi, eax
	je	SHORT $LN67@Clear@3
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LL3@Clear@3:

; 29   : 		xr_delete		(*m_it);

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN2@Clear@3
	push	eax
	call	___RTCastToVoid
	mov	ecx, DWORD PTR [esi]
	mov	ebx, eax
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	add	esp, 4
	push	0
	call	edx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	ebx
	call	ebp
	mov	DWORD PTR [esi], 0
$LN2@Clear@3:
	mov	eax, DWORD PTR [edi+104]
	push	eax
	add	esi, 4
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	cmp	esi, eax
	jne	SHORT $LL3@Clear@3
	pop	ebp
	pop	ebx
$LN67@Clear@3:

; 30   : 	m_Motions.clear		();

	mov	ecx, DWORD PTR [edi+104]
	mov	eax, DWORD PTR [edi+100]
	cmp	eax, ecx
	je	SHORT $LN42@Clear@3
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN48@Clear@3
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN48@Clear@3:
	mov	DWORD PTR [edi+104], eax
$LN42@Clear@3:

; 31   :     SetActiveMotion		(0);

	xorps	xmm0, xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	mov	DWORD PTR [edi+116], 0
	movss	DWORD PTR [edi+12], xmm1
	movss	DWORD PTR [edi+16], xmm0
	movss	DWORD PTR [edi+20], xmm0
	movss	DWORD PTR [edi+24], xmm0
	movss	DWORD PTR [edi+28], xmm0
	movss	DWORD PTR [edi+32], xmm1
	movss	DWORD PTR [edi+36], xmm0
	movss	DWORD PTR [edi+40], xmm0
	movss	DWORD PTR [edi+44], xmm0
	movss	DWORD PTR [edi+48], xmm0
	movss	DWORD PTR [edi+52], xmm1
	movss	DWORD PTR [edi+56], xmm0
	movss	DWORD PTR [edi+60], xmm0
	movss	DWORD PTR [edi+64], xmm0
	movss	DWORD PTR [edi+68], xmm0
	movss	DWORD PTR [edi+72], xmm1
	pop	edi
	pop	esi

; 32   : }

	ret	0
?Clear@CObjectAnimator@@QAEXXZ ENDP			; CObjectAnimator::Clear
_TEXT	ENDS
PUBLIC	??1CObjectAnimator@@UAE@XZ			; CObjectAnimator::~CObjectAnimator
; Function compile flags: /Ogtpy
;	COMDAT ??1CObjectAnimator@@UAE@XZ
_TEXT	SEGMENT
??1CObjectAnimator@@UAE@XZ PROC				; CObjectAnimator::~CObjectAnimator, COMDAT
; _this$ = ecx

; 22   : {	

	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7CObjectAnimator@@6B@

; 23   : 	Clear				();

	call	?Clear@CObjectAnimator@@QAEXXZ		; CObjectAnimator::Clear

; 24   : }

	mov	eax, DWORD PTR [esi+100]
	test	eax, eax
	je	SHORT $LN40@CObjectAni@3
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN40@CObjectAni@3:
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	SHORT $LN45@CObjectAni@3
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [esi+8]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN45@CObjectAni@3
	mov	DWORD PTR [esi+8], 0
$LN45@CObjectAni@3:
	pop	esi
	ret	0
??1CObjectAnimator@@UAE@XZ ENDP				; CObjectAnimator::~CObjectAnimator
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_ECObjectAnimator@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_ECObjectAnimator@@UAEPAXI@Z PROC			; CObjectAnimator::`vector deleting destructor', COMDAT
; _this$ = ecx
	test	BYTE PTR ___flags$[esp-4], 2
	push	ebp
	push	esi
	push	edi
	mov	esi, ecx
	je	SHORT $LN3@vector@84
	mov	edi, DWORD PTR [esi-4]
	lea	ebp, DWORD PTR [esi-4]
	mov	eax, edi
	shl	eax, 4
	sub	eax, edi
	sub	edi, 1
	lea	esi, DWORD PTR [esi+eax*8]
	js	SHORT $LN6@vector@84
$LL7@vector@84:
	sub	esi, 120				; 00000078H
	mov	ecx, esi
	mov	DWORD PTR [esi], OFFSET ??_7CObjectAnimator@@6B@
	call	?Clear@CObjectAnimator@@QAEXXZ		; CObjectAnimator::Clear
	mov	eax, DWORD PTR [esi+100]
	test	eax, eax
	je	SHORT $LN49@vector@84
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN49@vector@84:
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	SHORT $LN54@vector@84
	add	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR [esi+8]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN54@vector@84
	mov	DWORD PTR [esi+8], 0
$LN54@vector@84:
	sub	edi, 1
	jns	SHORT $LL7@vector@84
$LN6@vector@84:
	test	BYTE PTR ___flags$[esp+8], 1
	je	SHORT $LN60@vector@84
	test	ebp, ebp
	je	SHORT $LN60@vector@84
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	ebp
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN60@vector@84:
	mov	eax, ebp
	pop	edi
	pop	esi
	pop	ebp
	ret	4
$LN3@vector@84:
	mov	DWORD PTR [esi], OFFSET ??_7CObjectAnimator@@6B@
	call	?Clear@CObjectAnimator@@QAEXXZ		; CObjectAnimator::Clear
	mov	eax, DWORD PTR [esi+100]
	test	eax, eax
	mov	edi, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	je	SHORT $LN102@vector@84
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
$LN102@vector@84:
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	SHORT $LN107@vector@84
	add	DWORD PTR [eax], -1
	mov	edx, DWORD PTR [esi+8]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN107@vector@84
	mov	DWORD PTR [esi+8], 0
$LN107@vector@84:
	test	BYTE PTR ___flags$[esp+8], 1
	je	SHORT $LN113@vector@84
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	edi
$LN113@vector@84:
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_ECObjectAnimator@@UAEPAXI@Z ENDP			; CObjectAnimator::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_GCObjectAnimator@@UAEPAXI@Z			; CObjectAnimator::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_GCObjectAnimator@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCObjectAnimator@@UAEPAXI@Z PROC			; CObjectAnimator::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR [esi], OFFSET ??_7CObjectAnimator@@6B@
	call	?Clear@CObjectAnimator@@QAEXXZ		; CObjectAnimator::Clear
	mov	eax, DWORD PTR [esi+100]
	test	eax, eax
	mov	edi, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	je	SHORT $LN43@scalar@68
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
$LN43@scalar@68:
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	SHORT $LN48@scalar@68
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [esi+8]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN48@scalar@68
	mov	DWORD PTR [esi+8], 0
$LN48@scalar@68:
	test	BYTE PTR ___flags$[esp+4], 1
	je	SHORT $LN57@scalar@68
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	edi
$LN57@scalar@68:
	pop	edi
	mov	eax, esi
	pop	esi
	ret	4
??_GCObjectAnimator@@UAEPAXI@Z ENDP			; CObjectAnimator::`scalar deleting destructor'
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrmemory_subst_msvc.h
;	COMDAT ??$xr_new@VCOMotion@@@@YAPAVCOMotion@@XZ
_TEXT	SEGMENT
??$xr_new@VCOMotion@@@@YAPAVCOMotion@@XZ PROC		; xr_new<COMotion>, COMDAT

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	48					; 00000030H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 69   : 	return new (ptr) T();

	test	eax, eax
	je	SHORT $LN3@xr_new@38
	mov	ecx, eax
	jmp	??0COMotion@@QAE@XZ			; COMotion::COMotion
$LN3@xr_new@38:
	xor	eax, eax

; 70   : }

	ret	0
??$xr_new@VCOMotion@@@@YAPAVCOMotion@@XZ ENDP		; xr_new<COMotion>
_TEXT	ENDS
PUBLIC	?Update@CObjectAnimator@@QAEXM@Z		; CObjectAnimator::Update
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\objectanimator.cpp
;	COMDAT ?Update@CObjectAnimator@@QAEXM@Z
_TEXT	SEGMENT
_R$118629 = -24						; size = 12
_P$118630 = -12						; size = 12
_dt$ = 8						; size = 4
?Update@CObjectAnimator@@QAEXM@Z PROC			; CObjectAnimator::Update, COMDAT
; _this$ = ecx

; 78   : {

	sub	esp, 24					; 00000018H
	push	ebx
	mov	ebx, ecx

; 79   : 	if (m_Current){

	mov	ecx, DWORD PTR [ebx+116]
	test	ecx, ecx
	je	SHORT $LN8@Update@4

; 80   : 		Fvector R,P;
; 81   : 		m_Current->_Evaluate(m_MParam.Frame(),P,R);

	fld	DWORD PTR [ebx+76]
	push	esi
	push	edi
	lea	eax, DWORD PTR _R$118629[esp+36]
	push	eax
	lea	edx, DWORD PTR _P$118630[esp+40]
	push	edx
	lea	edi, DWORD PTR [ebx+76]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?_Evaluate@COMotion@@QAEXMAAU?$_vector3@M@@0@Z ; COMotion::_Evaluate

; 82   : 		m_MParam.Update	(dt,m_Speed,bLoop);

	movzx	eax, BYTE PTR [ebx+4]
	fld	DWORD PTR [ebx+112]
	movss	xmm0, DWORD PTR _dt$[esp+32]
	push	eax
	push	ecx
	fstp	DWORD PTR [esp]
	call	?Update@SAnimParams@@QAEXMM_N@Z		; SAnimParams::Update

; 83   : 		m_XFORM.setXYZi	(R.x,R.y,R.z);

	fld	DWORD PTR _R$118629[esp+44]
	sub	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp+8]
	lea	esi, DWORD PTR [ebx+12]
	fld	DWORD PTR _R$118629[esp+52]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _R$118629[esp+48]
	fstp	DWORD PTR [esp]
	call	?setXYZi@?$_matrix@M@@QAEAAU1@MMM@Z	; _matrix<float>::setXYZi

; 84   :         m_XFORM.translate_over(P);

	movss	xmm0, DWORD PTR _P$118630[esp+36]
	movss	DWORD PTR [ebx+60], xmm0
	movss	xmm0, DWORD PTR _P$118630[esp+40]
	movss	DWORD PTR [ebx+64], xmm0
	movss	xmm0, DWORD PTR _P$118630[esp+44]
	pop	edi
	movss	DWORD PTR [ebx+68], xmm0
	pop	esi
$LN8@Update@4:
	pop	ebx

; 85   : 	}
; 86   : }

	add	esp, 24					; 00000018H
	ret	4
?Update@CObjectAnimator@@QAEXM@Z ENDP			; CObjectAnimator::Update
_TEXT	ENDS
PUBLIC	?LoadMotions@CObjectAnimator@@IAEXPBD@Z		; CObjectAnimator::LoadMotions
; Function compile flags: /Ogtpy
;	COMDAT ?LoadMotions@CObjectAnimator@@IAEXPBD@Z
_TEXT	SEGMENT
_M$118609 = -532					; size = 4
_M$118589 = -532					; size = 4
_F$118600 = -528					; size = 4
_this$ = -524						; size = 4
_full_path$ = -520					; size = 520
_fname$ = 8						; size = 4
?LoadMotions@CObjectAnimator@@IAEXPBD@Z PROC		; CObjectAnimator::LoadMotions, COMDAT
; _this$ = ecx

; 42   : {

	sub	esp, 532				; 00000214H
	push	ebx
	push	ebp
	push	esi

; 43   : 	string_path			full_path;
; 44   : 	if (!FS.exist( full_path, "$level$", fname ))

	mov	esi, DWORD PTR _fname$[esp+540]
	push	edi
	mov	edi, DWORD PTR __imp_?exist@CLocatorAPI@@QAEPBUfile@1@AAY0CAI@DPBD1@Z
	mov	ebp, ecx
	mov	ecx, DWORD PTR __imp_?xr_FS@@3PAVCLocatorAPI@@A
	mov	ecx, DWORD PTR [ecx]
	push	esi
	push	OFFSET ??_C@_07DJIBDFPO@$level$?$AA@
	lea	eax, DWORD PTR _full_path$[esp+556]
	push	eax
	mov	DWORD PTR _this$[esp+560], ebp
	call	edi
	test	eax, eax
	jne	SHORT $LN100@LoadMotion@2

; 45   : 		if (!FS.exist( full_path, "$game_anims$", fname ))

	mov	eax, DWORD PTR __imp_?xr_FS@@3PAVCLocatorAPI@@A
	mov	ecx, DWORD PTR [eax]
	push	esi
	push	OFFSET ??_C@_0N@BFDJNKBG@$game_anims$?$AA@
	lea	edx, DWORD PTR _full_path$[esp+556]
	push	edx
	call	edi
	test	eax, eax
	jne	SHORT $LN100@LoadMotion@2

; 46   : 			Debug.fatal(DEBUG_INFO,"Can't find motion file '%s'.",fname);

	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	esi
	push	OFFSET ??_C@_0BN@GBEPLNKH@Can?8t?5find?5motion?5file?5?8?$CFs?8?4?$AA@
	push	OFFSET ??_C@_0BN@NLNPFDIC@CObjectAnimator?3?3LoadMotions?$AA@
	push	46					; 0000002eH
	push	OFFSET ??_C@_0DH@HIHJMPG@D?3?2CLEARSKY?2sources?2engine?2xrEng@
	push	ecx
	call	DWORD PTR __imp_?fatal@xrDebug@@QAAXPBDH00ZZ
	add	esp, 24					; 00000018H
$LN100@LoadMotion@2:

; 47   :             
; 48   :     LPCSTR  ext			= strext(full_path);

	lea	edx, DWORD PTR _full_path$[esp+548]
	push	46					; 0000002eH
	push	edx
	call	DWORD PTR __imp__strrchr
	mov	ebx, eax
	add	esp, 8

; 49   :     if (ext){

	test	ebx, ebx
	je	$LN86@LoadMotion@2

; 50   : 		Clear			();

	mov	ecx, ebp
	call	?Clear@CObjectAnimator@@QAEXXZ		; CObjectAnimator::Clear

; 51   :     	if (0==xr_strcmp(ext,".anm")){

	mov	edi, OFFSET ??_C@_04FGKMPKCB@?4anm?$AA@
	mov	esi, ebx
	mov	ecx, 5
	xor	eax, eax
	repe cmpsb
	je	SHORT $LN98@LoadMotion@2
	sbb	eax, eax
	sbb	eax, -1
$LN98@LoadMotion@2:
	test	eax, eax
	jne	$LN12@LoadMotion@2

; 52   :             COMotion* M	= xr_new<COMotion> ();

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	48					; 00000030H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	test	eax, eax
	je	SHORT $LN24@LoadMotion@2
	mov	ecx, eax
	call	??0COMotion@@QAE@XZ			; COMotion::COMotion
	jmp	SHORT $LN102@LoadMotion@2
$LN24@LoadMotion@2:
	xor	eax, eax
$LN102@LoadMotion@2:
	mov	DWORD PTR _M$118589[esp+548], eax

; 53   :             if (M->LoadMotion(full_path)) m_Motions.push_back(M);

	mov	edx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+16]
	lea	ecx, DWORD PTR _full_path$[esp+548]
	push	ecx
	mov	ecx, eax
	call	edx
	test	al, al
	je	SHORT $LN11@LoadMotion@2
	mov	eax, DWORD PTR [ebp+104]
	cmp	eax, DWORD PTR [ebp+108]
	lea	edi, DWORD PTR [ebp+100]
	je	SHORT $LN35@LoadMotion@2
	lea	ecx, DWORD PTR _M$118589[esp+548]
	push	ecx
	push	eax
	call	??$_Copy_Construct@PAX@stlp_std@@YAXPAPAXABQAX@Z ; stlp_std::_Copy_Construct<void *>
	add	esp, 8
	add	DWORD PTR [edi+4], 4
	jmp	$LN101@LoadMotion@2
$LN35@LoadMotion@2:
	push	1
	push	1
	push	eax
	lea	eax, DWORD PTR _M$118589[esp+560]
	call	?_M_insert_overflow@?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@AAEXPAPAXABQAXABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::_M_insert_overflow
	jmp	$LN101@LoadMotion@2
$LN11@LoadMotion@2:

; 54   :             else				FATAL("ERROR: Can't load motion. Incorrect file version.");

	mov	edx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ??_C@_0DC@DLEOIBDI@ERROR?3?5Can?8t?5load?5motion?4?5Incorr@
	push	OFFSET ??_C@_0BN@NLNPFDIC@CObjectAnimator?3?3LoadMotions?$AA@
	push	54					; 00000036H
	push	OFFSET ??_C@_0DH@HIHJMPG@D?3?2CLEARSKY?2sources?2engine?2xrEng@
	push	edx
	call	DWORD PTR __imp_?fatal@xrDebug@@QAAXPBDH00ZZ
	add	esp, 20					; 00000014H
	jmp	$LN101@LoadMotion@2
$LN12@LoadMotion@2:

; 55   :         }else if (0==xr_strcmp(ext,".anms")){

	mov	edi, OFFSET ??_C@_05EICNJGJB@?4anms?$AA@
	mov	esi, ebx
	mov	ecx, 6
	xor	eax, eax
	repe cmpsb
	je	SHORT $LN99@LoadMotion@2
	sbb	eax, eax
	sbb	eax, -1
$LN99@LoadMotion@2:
	test	eax, eax
	jne	$LN101@LoadMotion@2

; 56   :             IReader* F			= FS.r_open(full_path);

	mov	eax, DWORD PTR __imp_?xr_FS@@3PAVCLocatorAPI@@A
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _full_path$[esp+548]
	push	edx
	push	0
	call	DWORD PTR __imp_?r_open@CLocatorAPI@@QAEPAVIReader@@PBD0@Z

; 57   :             u32 dwMCnt			= F->r_u32(); VERIFY(dwMCnt);

	mov	ecx, eax
	mov	DWORD PTR _F$118600[esp+548], eax
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ

; 58   :             for (u32 i=0; i<dwMCnt; i++){

	test	eax, eax
	jbe	$LN2@LoadMotion@2
	mov	esi, DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	lea	edi, DWORD PTR [ebp+100]
	mov	ebx, eax
	mov	ebp, 4
$LL4@LoadMotion@2:

; 59   :                 COMotion* M		= xr_new<COMotion> ();

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	48					; 00000030H
	call	esi
	test	eax, eax
	je	SHORT $LN50@LoadMotion@2
	mov	ecx, eax
	call	??0COMotion@@QAE@XZ			; COMotion::COMotion
	jmp	SHORT $LN103@LoadMotion@2
$LN50@LoadMotion@2:
	xor	eax, eax
$LN103@LoadMotion@2:

; 60   :                 bool bRes		= M->Load(*F);

	mov	ecx, DWORD PTR _F$118600[esp+548]
	mov	DWORD PTR _M$118609[esp+548], eax
	mov	edx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+8]
	push	ecx
	mov	ecx, eax
	call	edx

; 61   :                 if (!bRes)		FATAL("ERROR: Can't load motion. Incorrect file version.");

	test	al, al
	jne	SHORT $LN1@LoadMotion@2
	mov	eax, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ??_C@_0DC@DLEOIBDI@ERROR?3?5Can?8t?5load?5motion?4?5Incorr@
	push	OFFSET ??_C@_0BN@NLNPFDIC@CObjectAnimator?3?3LoadMotions?$AA@
	push	61					; 0000003dH
	push	OFFSET ??_C@_0DH@HIHJMPG@D?3?2CLEARSKY?2sources?2engine?2xrEng@
	push	eax
	call	DWORD PTR __imp_?fatal@xrDebug@@QAAXPBDH00ZZ
	add	esp, 20					; 00000014H
$LN1@LoadMotion@2:

; 62   :                 m_Motions.push_back(M);

	mov	eax, DWORD PTR [edi+4]
	cmp	eax, DWORD PTR [edi+8]
	je	SHORT $LN61@LoadMotion@2
	lea	ecx, DWORD PTR _M$118609[esp+548]
	push	ecx
	push	eax
	call	??$_Copy_Construct@PAX@stlp_std@@YAXPAPAXABQAX@Z ; stlp_std::_Copy_Construct<void *>
	add	esp, 8
	add	DWORD PTR [edi+4], ebp
	jmp	SHORT $LN3@LoadMotion@2
$LN61@LoadMotion@2:
	push	1
	push	1
	push	eax
	lea	eax, DWORD PTR _M$118609[esp+560]
	call	?_M_insert_overflow@?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@AAEXPAPAXABQAXABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::_M_insert_overflow
$LN3@LoadMotion@2:

; 58   :             for (u32 i=0; i<dwMCnt; i++){

	sub	ebx, 1
	jne	SHORT $LL4@LoadMotion@2
	mov	ebp, DWORD PTR _this$[esp+548]
$LN2@LoadMotion@2:

; 63   :             }
; 64   :             FS.r_close		(F);

	mov	eax, DWORD PTR __imp_?xr_FS@@3PAVCLocatorAPI@@A
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _F$118600[esp+548]
	push	edx
	call	DWORD PTR __imp_?r_close@CLocatorAPI@@QAEXAAPAVIReader@@@Z
$LN101@LoadMotion@2:

; 65   :         }
; 66   :         std::sort(m_Motions.begin(),m_Motions.end(),motion_sort_pred);

	mov	eax, DWORD PTR [ebp+104]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	esi, eax
	mov	eax, DWORD PTR [ebp+100]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	edi, eax
	add	esp, 8
	cmp	edi, esi
	je	SHORT $LN86@LoadMotion@2
	mov	eax, esi
	sub	eax, edi
	sar	eax, 2
	xor	ecx, ecx
	cmp	eax, 1
	je	SHORT $LN89@LoadMotion@2
$LL91@LoadMotion@2:
	sar	eax, 1
	add	ecx, 1
	cmp	eax, 1
	jne	SHORT $LL91@LoadMotion@2
$LN89@LoadMotion@2:
	push	OFFSET ?motion_sort_pred@@YA_NPAVCOMotion@@0@Z ; motion_sort_pred
	add	ecx, ecx
	push	ecx
	push	0
	push	esi
	push	edi
	call	??$__introsort_loop@PAPAVCOMotion@@PAV1@HP6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@00HP6A_NPAV2@1@Z@Z ; stlp_std::priv::__introsort_loop<COMotion * *,COMotion *,int,bool (__cdecl*)(COMotion *,COMotion *)>
	push	esi
	call	??$__final_insertion_sort@PAPAVCOMotion@@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCOMotion@@0P6A_NPAV2@1@Z@Z ; stlp_std::priv::__final_insertion_sort<COMotion * *,bool (__cdecl*)(COMotion *,COMotion *)>
	add	esp, 24					; 00000018H
$LN86@LoadMotion@2:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 67   :     }
; 68   : }

	add	esp, 532				; 00000214H
	ret	4
?LoadMotions@CObjectAnimator@@IAEXPBD@Z ENDP		; CObjectAnimator::LoadMotions
PUBLIC	?Load@CObjectAnimator@@QAEXPBD@Z		; CObjectAnimator::Load
; Function compile flags: /Ogtpy
;	COMDAT ?Load@CObjectAnimator@@QAEXPBD@Z
_TEXT	SEGMENT
_name$ = 8						; size = 4
?Load@CObjectAnimator@@QAEXPBD@Z PROC			; CObjectAnimator::Load, COMDAT
; _this$ = ecx

; 72   : 	m_Name				= name;

	mov	eax, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
	push	esi
	push	edi
	mov	edi, DWORD PTR _name$[esp+4]
	mov	esi, ecx
	mov	ecx, DWORD PTR [eax]
	push	edi
	call	DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	test	eax, eax
	je	SHORT $LN5@Load@12
	add	DWORD PTR [eax], 1
$LN5@Load@12:
	mov	ecx, DWORD PTR [esi+8]
	test	ecx, ecx
	je	SHORT $LN8@Load@12
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [esi+8]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN8@Load@12
	mov	DWORD PTR [esi+8], 0
$LN8@Load@12:

; 73   : 	LoadMotions			(name); 

	push	edi
	mov	ecx, esi
	mov	DWORD PTR [esi+8], eax
	call	?LoadMotions@CObjectAnimator@@IAEXPBD@Z	; CObjectAnimator::LoadMotions

; 74   : 	SetActiveMotion		(0);

	xorps	xmm0, xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	mov	DWORD PTR [esi+116], 0
	pop	edi
	movss	DWORD PTR [esi+12], xmm1
	movss	DWORD PTR [esi+16], xmm0
	movss	DWORD PTR [esi+20], xmm0
	movss	DWORD PTR [esi+24], xmm0
	movss	DWORD PTR [esi+28], xmm0
	movss	DWORD PTR [esi+32], xmm1
	movss	DWORD PTR [esi+36], xmm0
	movss	DWORD PTR [esi+40], xmm0
	movss	DWORD PTR [esi+44], xmm0
	movss	DWORD PTR [esi+48], xmm0
	movss	DWORD PTR [esi+52], xmm1
	movss	DWORD PTR [esi+56], xmm0
	movss	DWORD PTR [esi+60], xmm0
	movss	DWORD PTR [esi+64], xmm0
	movss	DWORD PTR [esi+68], xmm0
	movss	DWORD PTR [esi+72], xmm1
	pop	esi

; 75   : }

	ret	4
?Load@CObjectAnimator@@QAEXPBD@Z ENDP			; CObjectAnimator::Load
END
