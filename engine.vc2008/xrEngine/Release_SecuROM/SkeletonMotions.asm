; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	D:\CLEARSKY\sources\engine\xrEngine\SkeletonMotions.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?size@?$ref_smem@UCKeyQR@@@@QAEIXZ		; ref_smem<CKeyQR>::size
PUBLIC	?ref_count@?$ref_smem@UCKeyQR@@@@QAEIXZ		; ref_smem<CKeyQR>::ref_count
PUBLIC	?size@?$ref_smem@UCKeyQT8@@@@QAEIXZ		; ref_smem<CKeyQT8>::size
PUBLIC	?ref_count@?$ref_smem@UCKeyQT8@@@@QAEIXZ	; ref_smem<CKeyQT8>::ref_count
PUBLIC	?size@?$ref_smem@UCKeyQT16@@@@QAEIXZ		; ref_smem<CKeyQT16>::size
PUBLIC	?ref_count@?$ref_smem@UCKeyQT16@@@@QAEIXZ	; ref_smem<CKeyQT16>::ref_count
PUBLIC	??$?0U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@?$xalloc@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@@QAE@ABV?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@@Z ; xalloc<stlp_std::pair<shared_str const ,motions_value *> >::xalloc<stlp_std::pair<shared_str const ,motions_value *> ><stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > >
PUBLIC	?get_allocator@?$_Rb_tree_base@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QBE?AV?$xalloc@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@@XZ ; stlp_std::priv::_Rb_tree_base<stlp_std::pair<shared_str const ,motions_value *>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::get_allocator
PUBLIC	??0?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >
PUBLIC	??0?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >
PUBLIC	??0?$xr_map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@@QAE@ABV0@@Z ; xr_map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::xr_map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >
PUBLIC	??0?$ref_smem@UCKeyQR@@@@QAE@XZ			; ref_smem<CKeyQR>::ref_smem<CKeyQR>
PUBLIC	??0?$ref_smem@UCKeyQT8@@@@QAE@XZ		; ref_smem<CKeyQT8>::ref_smem<CKeyQT8>
PUBLIC	??0?$ref_smem@UCKeyQT16@@@@QAE@XZ		; ref_smem<CKeyQT16>::ref_smem<CKeyQT16>
PUBLIC	??0?$_Vector_base@IV?$xalloc@I@@@priv@stlp_std@@QAE@IABV?$xalloc@I@@@Z ; stlp_std::priv::_Vector_base<unsigned int,xalloc<unsigned int> >::_Vector_base<unsigned int,xalloc<unsigned int> >
PUBLIC	?get_allocator@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QBE?AV?$xalloc@I@@XZ ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::get_allocator
PUBLIC	?begin@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QBEPBIXZ ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::begin
PUBLIC	?end@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QBEPBIXZ ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::end
PUBLIC	??0?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_Impl_vector<unsigned int,xalloc<unsigned int> >
PUBLIC	??0?$vector@IV?$xalloc@I@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::vector<unsigned int,xalloc<unsigned int> >::vector<unsigned int,xalloc<unsigned int> >
PUBLIC	??0?$xr_vector@IV?$xalloc@I@@@@QAE@ABV0@@Z	; xr_vector<unsigned int,xalloc<unsigned int> >::xr_vector<unsigned int,xalloc<unsigned int> >
PUBLIC	?_S_minimum@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAPAU_Rb_tree_node_base@23@PAU423@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_S_minimum
PUBLIC	?_S_maximum@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAPAU_Rb_tree_node_base@23@PAU423@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_S_maximum
PUBLIC	?_S_color@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAAA_NPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_S_color
PUBLIC	?_M_clone_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@PAU423@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_clone_node
PUBLIC	?_M_copy@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@AAEPAU_Rb_tree_node_base@23@PAU423@0@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_copy
PUBLIC	??4?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::operator=
PUBLIC	??4?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAEAAV01@ABV01@@Z ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::operator=
PUBLIC	??4?$xr_map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@@QAEAAV0@ABV0@@Z ; xr_map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::operator=
PUBLIC	?capacity@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::capacity
PUBLIC	?_Answer@?$_BothPtrType@PBIPAI@stlp_std@@SA?AU__true_type@2@XZ ; stlp_std::_BothPtrType<unsigned int const *,unsigned int *>::_Answer
PUBLIC	??$__ucopy_ptrs@PBIPAI@priv@stlp_std@@YAPAIPBI0PAIABU__true_type@1@@Z ; stlp_std::priv::__ucopy_ptrs<unsigned int const *,unsigned int *>
PUBLIC	??$_UseTrivialUCopy@II@stlp_std@@YA?AU?$_TrivialUCopy@II@0@PAI0@Z ; stlp_std::_UseTrivialUCopy<unsigned int,unsigned int>
PUBLIC	?_Answer@?$_TrivialUCopy@II@stlp_std@@SA?AU__true_type@2@XZ ; stlp_std::_TrivialUCopy<unsigned int,unsigned int>::_Answer
PUBLIC	??$__ucopy_aux@PBIPAI@priv@stlp_std@@YAPAIPBI0PAIABU__true_type@1@@Z ; stlp_std::priv::__ucopy_aux<unsigned int const *,unsigned int *>
PUBLIC	??$uninitialized_copy@PBIPAI@stlp_std@@YAPAIPBI0PAI@Z ; stlp_std::uninitialized_copy<unsigned int const *,unsigned int *>
PUBLIC	??$_M_allocate_and_copy@PBI@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEPAIAAIPBI1@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_allocate_and_copy<unsigned int const *>
PUBLIC	??$__copy_ptrs@PBIPAI@priv@stlp_std@@YAPAIPBI0PAIABU__true_type@1@@Z ; stlp_std::priv::__copy_ptrs<unsigned int const *,unsigned int *>
PUBLIC	??4?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::operator=
PUBLIC	??4?$vector@IV?$xalloc@I@@@stlp_std@@QAEAAV01@ABV01@@Z ; stlp_std::vector<unsigned int,xalloc<unsigned int> >::operator=
PUBLIC	??4?$xr_vector@IV?$xalloc@I@@@@QAEAAV0@ABV0@@Z	; xr_vector<unsigned int,xalloc<unsigned int> >::operator=
PUBLIC	??0?$_Impl_vector@GV?$xalloc@G@@@priv@stlp_std@@QAE@IABGABV?$xalloc@G@@@Z ; stlp_std::priv::_Impl_vector<unsigned short,xalloc<unsigned short> >::_Impl_vector<unsigned short,xalloc<unsigned short> >
PUBLIC	??0?$vector@GV?$xalloc@G@@@stlp_std@@QAE@IABGABV?$xalloc@G@@@Z ; stlp_std::vector<unsigned short,xalloc<unsigned short> >::vector<unsigned short,xalloc<unsigned short> >
PUBLIC	??0?$xr_vector@GV?$xalloc@G@@@@QAE@IABG@Z	; xr_vector<unsigned short,xalloc<unsigned short> >::xr_vector<unsigned short,xalloc<unsigned short> >
PUBLIC	?to_value_type_ptr@?$_CastTraits@GG@priv@stlp_std@@SAPAGPAG@Z ; stlp_std::priv::_CastTraits<unsigned short,unsigned short>::to_value_type_ptr
PUBLIC	?begin@?$vector@GV?$xalloc@G@@@stlp_std@@QAEPAGXZ ; stlp_std::vector<unsigned short,xalloc<unsigned short> >::begin
PUBLIC	??A?$xr_vector@GV?$xalloc@G@@@@QAEAAGI@Z	; xr_vector<unsigned short,xalloc<unsigned short> >::operator[]
PUBLIC	?_M_is_inside@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@ABE_NABI@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_is_inside
PUBLIC	??$__ucopy_ptrs@PAIPAI@priv@stlp_std@@YAPAIPAI00ABU__true_type@1@@Z ; stlp_std::priv::__ucopy_ptrs<unsigned int *,unsigned int *>
PUBLIC	??$__copy_backward_ptrs@PAIPAI@priv@stlp_std@@YAPAIPAI00ABU__true_type@1@@Z ; stlp_std::priv::__copy_backward_ptrs<unsigned int *,unsigned int *>
PUBLIC	??$fill@PAII@stlp_std@@YAXPAI0ABI@Z		; stlp_std::fill<unsigned int *,unsigned int>
PUBLIC	??$_Param_Construct@II@stlp_std@@YAXPAIABI@Z	; stlp_std::_Param_Construct<unsigned int,unsigned int>
PUBLIC	??$__ufill@PAIIH@priv@stlp_std@@YAXPAI0ABIABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ufill<unsigned int *,unsigned int,int>
PUBLIC	??$__uninitialized_fill_n@PAIII@priv@stlp_std@@YAPAIPAIIABI@Z ; stlp_std::priv::__uninitialized_fill_n<unsigned int *,unsigned int,unsigned int>
PUBLIC	?_M_fill_insert_aux@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEXPAIIABIABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_fill_insert_aux
PUBLIC	?_M_fill_insert@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEXPAIIABI@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_fill_insert
PUBLIC	?insert@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEXPAIIABI@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::insert
PUBLIC	?resize@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEXIABI@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::resize
PUBLIC	?resize@?$vector@IV?$xalloc@I@@@stlp_std@@QAEXIABI@Z ; stlp_std::vector<unsigned int,xalloc<unsigned int> >::resize
PUBLIC	?size@?$vector@IV?$xalloc@I@@@stlp_std@@QBEIXZ	; stlp_std::vector<unsigned int,xalloc<unsigned int> >::size
PUBLIC	?size@?$xr_vector@IV?$xalloc@I@@@@QBEIXZ	; xr_vector<unsigned int,xalloc<unsigned int> >::size
PUBLIC	?to_value_type_ref@?$_CastTraits@PAXPAVCBoneData@@@priv@stlp_std@@SAAAPAVCBoneData@@AAPAX@Z ; stlp_std::priv::_CastTraits<void *,CBoneData *>::to_value_type_ref
PUBLIC	?at@?$vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@stlp_std@@QAEAAPAVCBoneData@@I@Z ; stlp_std::vector<CBoneData *,xalloc<CBoneData *> >::at
PUBLIC	?create@?$ref_smem@UCKeyQR@@@@QAEXIIPAUCKeyQR@@@Z ; ref_smem<CKeyQR>::create
PUBLIC	?create@?$ref_smem@UCKeyQT8@@@@QAEXIIPAUCKeyQT8@@@Z ; ref_smem<CKeyQT8>::create
PUBLIC	?create@?$ref_smem@UCKeyQT16@@@@QAEXIIPAUCKeyQT16@@@Z ; ref_smem<CKeyQT16>::create
PUBLIC	??$__destroy_mv_srcs@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@VCMotionDef@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0PAVCMotionDef@@@Z ; stlp_std::__destroy_mv_srcs<stlp_std::reverse_iterator<CMotionDef *>,CMotionDef>
PUBLIC	??$_Destroy_Moved_Range@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0@Z ; stlp_std::_Destroy_Moved_Range<stlp_std::reverse_iterator<CMotionDef *> >
PUBLIC	?_M_clear_after_move@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXXZ ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_clear_after_move
PUBLIC	?_M_set@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXPAVCMotionDef@@00@Z ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_set
PUBLIC	??$__uninitialized_move@PAVCMotionDef@@PAV1@U__false_type@stlp_std@@@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00U__false_type@1@ABU31@@Z ; stlp_std::priv::__uninitialized_move<CMotionDef *,CMotionDef *,stlp_std::__false_type>
PUBLIC	??$_Copy_Construct@VCMotionDef@@@stlp_std@@YAXPAVCMotionDef@@ABV1@@Z ; stlp_std::_Copy_Construct<CMotionDef>
PUBLIC	?_M_insert_overflow_aux@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXPAVCMotionDef@@ABV4@ABU__false_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_insert_overflow_aux
PUBLIC	?_M_insert_overflow@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXPAVCMotionDef@@ABV4@ABU__false_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_insert_overflow
PUBLIC	?_M_is_inside@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@ABE_NABVCMotionDef@@@Z ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_is_inside
PUBLIC	??$__ufill@PAVCMotionDef@@V1@H@priv@stlp_std@@YAXPAVCMotionDef@@0ABV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ufill<CMotionDef *,CMotionDef,int>
PUBLIC	??$__uninitialized_fill_n@PAVCMotionDef@@IV1@@priv@stlp_std@@YAPAVCMotionDef@@PAV2@IABV2@@Z ; stlp_std::priv::__uninitialized_fill_n<CMotionDef *,unsigned int,CMotionDef>
PUBLIC	??$__ucopy@PAVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<CMotionDef *,CMotionDef *,int>
PUBLIC	??$__ucopy_ptrs@PAVCMotionDef@@PAV1@@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABU__false_type@1@@Z ; stlp_std::priv::__ucopy_ptrs<CMotionDef *,CMotionDef *>
PUBLIC	??$__copy_backward@PAVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__copy_backward<CMotionDef *,CMotionDef *,int>
PUBLIC	??$__copy_backward_ptrs@PAVCMotionDef@@PAV1@@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABU__false_type@1@@Z ; stlp_std::priv::__copy_backward_ptrs<CMotionDef *,CMotionDef *>
PUBLIC	??$fill@PAVCMotionDef@@V1@@stlp_std@@YAXPAVCMotionDef@@0ABV1@@Z ; stlp_std::fill<CMotionDef *,CMotionDef>
PUBLIC	?_M_fill_insert_aux@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXPAVCMotionDef@@IABV4@ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_fill_insert_aux
PUBLIC	?_M_fill_insert@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXPAVCMotionDef@@IABV4@@Z ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_fill_insert
PUBLIC	?insert@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEXPAVCMotionDef@@IABV4@@Z ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::insert
PUBLIC	??$__copy@PAVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__copy<CMotionDef *,CMotionDef *,int>
PUBLIC	??$__copy_ptrs@PAVCMotionDef@@PAV1@@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABU__false_type@1@@Z ; stlp_std::priv::__copy_ptrs<CMotionDef *,CMotionDef *>
PUBLIC	?_M_erase@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEPAVCMotionDef@@PAV4@0ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_erase
PUBLIC	?erase@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEPAVCMotionDef@@PAV4@0@Z ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::erase
PUBLIC	?resize@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEXIABVCMotionDef@@@Z ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::resize
PUBLIC	?to_storage_type_cref@?$_CastTraits@VCMotionDef@@V1@@priv@stlp_std@@SAABVCMotionDef@@ABV4@@Z ; stlp_std::priv::_CastTraits<CMotionDef,CMotionDef>::to_storage_type_cref
PUBLIC	?resize@?$vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@stlp_std@@QAEXIABVCMotionDef@@@Z ; stlp_std::vector<CMotionDef,xalloc<CMotionDef> >::resize
PUBLIC	??$__destroy_mv_srcs@V?$reverse_iterator@PAVCMotion@@@stlp_std@@VCMotion@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0PAVCMotion@@@Z ; stlp_std::__destroy_mv_srcs<stlp_std::reverse_iterator<CMotion *>,CMotion>
PUBLIC	??$_Destroy_Moved_Range@V?$reverse_iterator@PAVCMotion@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0@Z ; stlp_std::_Destroy_Moved_Range<stlp_std::reverse_iterator<CMotion *> >
PUBLIC	?_M_clear_after_move@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXXZ ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_clear_after_move
PUBLIC	?_M_set@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXPAVCMotion@@00@Z ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_set
PUBLIC	??$__uninitialized_move@PAVCMotion@@PAV1@U__false_type@stlp_std@@@priv@stlp_std@@YAPAVCMotion@@PAV2@00U__false_type@1@ABU31@@Z ; stlp_std::priv::__uninitialized_move<CMotion *,CMotion *,stlp_std::__false_type>
PUBLIC	??$_Copy_Construct@VCMotion@@@stlp_std@@YAXPAVCMotion@@ABV1@@Z ; stlp_std::_Copy_Construct<CMotion>
PUBLIC	?_M_insert_overflow_aux@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXPAVCMotion@@ABV4@ABU__false_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_insert_overflow_aux
PUBLIC	?_M_insert_overflow@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXPAVCMotion@@ABV4@ABU__false_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_insert_overflow
PUBLIC	?_M_is_inside@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@ABE_NABVCMotion@@@Z ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_is_inside
PUBLIC	??$__ufill@PAVCMotion@@V1@H@priv@stlp_std@@YAXPAVCMotion@@0ABV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ufill<CMotion *,CMotion,int>
PUBLIC	??$__uninitialized_fill_n@PAVCMotion@@IV1@@priv@stlp_std@@YAPAVCMotion@@PAV2@IABV2@@Z ; stlp_std::priv::__uninitialized_fill_n<CMotion *,unsigned int,CMotion>
PUBLIC	??$__ucopy@PAVCMotion@@PAV1@H@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<CMotion *,CMotion *,int>
PUBLIC	??$__ucopy_ptrs@PAVCMotion@@PAV1@@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABU__false_type@1@@Z ; stlp_std::priv::__ucopy_ptrs<CMotion *,CMotion *>
PUBLIC	??$__copy_backward@PAVCMotion@@PAV1@H@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__copy_backward<CMotion *,CMotion *,int>
PUBLIC	??$__copy_backward_ptrs@PAVCMotion@@PAV1@@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABU__false_type@1@@Z ; stlp_std::priv::__copy_backward_ptrs<CMotion *,CMotion *>
PUBLIC	??$fill@PAVCMotion@@V1@@stlp_std@@YAXPAVCMotion@@0ABV1@@Z ; stlp_std::fill<CMotion *,CMotion>
PUBLIC	?_M_fill_insert_aux@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXPAVCMotion@@IABV4@ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_fill_insert_aux
PUBLIC	?_M_fill_insert@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXPAVCMotion@@IABV4@@Z ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_fill_insert
PUBLIC	?insert@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAEXPAVCMotion@@IABV4@@Z ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::insert
PUBLIC	??$__copy@PAVCMotion@@PAV1@H@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__copy<CMotion *,CMotion *,int>
PUBLIC	??$__copy_ptrs@PAVCMotion@@PAV1@@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABU__false_type@1@@Z ; stlp_std::priv::__copy_ptrs<CMotion *,CMotion *>
PUBLIC	??$__destroy_range_aux@PAVCMotion@@V1@@stlp_std@@YAXPAVCMotion@@00ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<CMotion *,CMotion>
PUBLIC	??$__destroy_range@PAVCMotion@@V1@@stlp_std@@YAXPAVCMotion@@00@Z ; stlp_std::__destroy_range<CMotion *,CMotion>
PUBLIC	??$_Destroy_Range@PAVCMotion@@@stlp_std@@YAXPAVCMotion@@0@Z ; stlp_std::_Destroy_Range<CMotion *>
PUBLIC	?_M_erase@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEPAVCMotion@@PAV4@0ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_erase
PUBLIC	?erase@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAEPAVCMotion@@PAV4@0@Z ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::erase
PUBLIC	?resize@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAEXIABVCMotion@@@Z ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::resize
PUBLIC	?to_storage_type_cref@?$_CastTraits@VCMotion@@V1@@priv@stlp_std@@SAABVCMotion@@ABV4@@Z ; stlp_std::priv::_CastTraits<CMotion,CMotion>::to_storage_type_cref
PUBLIC	?resize@?$vector@VCMotion@@V?$xalloc@VCMotion@@@@@stlp_std@@QAEXIABVCMotion@@@Z ; stlp_std::vector<CMotion,xalloc<CMotion> >::resize
PUBLIC	??A?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@QAEAAVCMotion@@I@Z ; xr_vector<CMotion,xalloc<CMotion> >::operator[]
PUBLIC	??Raccel_str_pred@@QBE_NABVshared_str@@0@Z	; accel_str_pred::operator()
PUBLIC	?_S_key@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAABVshared_str@@PAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_S_key
PUBLIC	?_M_insert@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@AAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@23@PAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@G@3@00@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_insert
PUBLIC	?begin@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@23@XZ ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::begin
PUBLIC	??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@QAE@PAU_Rb_tree_node_base@12@@Z ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> > >::_Rb_tree_iterator<stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> > >
PUBLIC	??F?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@QAEAAU012@XZ ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> > >::operator--
PUBLIC	??8?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@QBE_NU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@12@@Z ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> > >::operator==
PUBLIC	??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@QAE@ABU012@@Z ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> > >::_Rb_tree_iterator<stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> > >
PUBLIC	??0?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@_N@stlp_std@@QAE@ABU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@1@AB_N@Z ; stlp_std::pair<stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> > >,bool>::pair<stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> > >,bool>
PUBLIC	??R?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@QBEABVshared_str@@ABU?$pair@$$CBVshared_str@@G@2@@Z ; stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >::operator()
PUBLIC	??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@QAE@ABU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@12@@Z ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_ConstMapTraitsT<stlp_std::pair<shared_str const ,unsigned short> > >::_Rb_tree_iterator<stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_ConstMapTraitsT<stlp_std::pair<shared_str const ,unsigned short> > >
PUBLIC	?insert_unique@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAE?AU?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@_N@3@ABU?$pair@$$CBVshared_str@@G@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::insert_unique
PUBLIC	?insert@?$map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@stlp_std@@QAE?AU?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@_N@2@ABU?$pair@$$CBVshared_str@@G@2@@Z ; stlp_std::map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::insert
PUBLIC	??0?$pair@Vshared_str@@G@stlp_std@@QAE@ABVshared_str@@ABG@Z ; stlp_std::pair<shared_str,unsigned short>::pair<shared_str,unsigned short>
PUBLIC	??$mk_pair@Vshared_str@@G@@YA?AU?$pair@Vshared_str@@G@stlp_std@@Vshared_str@@G@Z ; mk_pair<shared_str,unsigned short>
PUBLIC	??1?$pair@Vshared_str@@G@stlp_std@@QAE@XZ	; stlp_std::pair<shared_str,unsigned short>::~pair<shared_str,unsigned short>
PUBLIC	??$?0Vshared_str@@G@?$pair@$$CBVshared_str@@G@stlp_std@@QAE@ABU?$pair@Vshared_str@@G@1@@Z ; stlp_std::pair<shared_str const ,unsigned short>::pair<shared_str const ,unsigned short><shared_str,unsigned short>
PUBLIC	??0?$xalloc@VCMotion@@@@QAE@XZ			; xalloc<CMotion>::xalloc<CMotion>
PUBLIC	??0?$_Vector_base@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@ABV?$xalloc@VCMotion@@@@@Z ; stlp_std::priv::_Vector_base<CMotion,xalloc<CMotion> >::_Vector_base<CMotion,xalloc<CMotion> >
PUBLIC	??0?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@ABV?$xalloc@VCMotion@@@@@Z ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_Impl_vector<CMotion,xalloc<CMotion> >
PUBLIC	??0?$vector@VCMotion@@V?$xalloc@VCMotion@@@@@stlp_std@@QAE@ABV?$xalloc@VCMotion@@@@@Z ; stlp_std::vector<CMotion,xalloc<CMotion> >::vector<CMotion,xalloc<CMotion> >
PUBLIC	??0?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@QAE@XZ ; xr_vector<CMotion,xalloc<CMotion> >::xr_vector<CMotion,xalloc<CMotion> >
PUBLIC	?key_comp@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QBE?AU?$less@Vshared_str@@@3@XZ ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::key_comp
PUBLIC	?key_comp@?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QBE?AU?$less@Vshared_str@@@2@XZ ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::key_comp
PUBLIC	?empty@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QBE_NXZ ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::empty
PUBLIC	?_M_insert@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@AAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@23@PAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@00@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_insert
PUBLIC	??0?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@_N@stlp_std@@QAE@ABU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@1@AB_N@Z ; stlp_std::pair<stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >,bool>::pair<stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >,bool>
PUBLIC	?insert_unique@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@_N@3@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::insert_unique
PUBLIC	??F?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QAEAAU012@XZ ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::operator--
PUBLIC	?insert_unique@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@23@U423@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::insert_unique
PUBLIC	?insert@?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@2@U342@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@2@@Z ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::insert
PUBLIC	??0?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@QAE@ABVshared_str@@ABV?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@Z ; stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >
PUBLIC	??$_M_lower_bound@Vshared_str@@@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@ABEPAU_Rb_tree_node_base@12@ABVshared_str@@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_lower_bound<shared_str>
PUBLIC	??$lower_bound@Vshared_str@@@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@12@ABVshared_str@@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::lower_bound<shared_str>
PUBLIC	??$lower_bound@Vshared_str@@@?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@1@ABVshared_str@@@Z ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::lower_bound<shared_str>
PUBLIC	??$?AVshared_str@@@?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAEAAV?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@ABVshared_str@@@Z ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::operator[]<shared_str>
PUBLIC	??0?$ref_smem@UCKeyQR@@@@QAE@ABV0@@Z		; ref_smem<CKeyQR>::ref_smem<CKeyQR>
PUBLIC	??1?$ref_smem@UCKeyQR@@@@QAE@XZ			; ref_smem<CKeyQR>::~ref_smem<CKeyQR>
PUBLIC	??0?$ref_smem@UCKeyQT8@@@@QAE@ABV0@@Z		; ref_smem<CKeyQT8>::ref_smem<CKeyQT8>
PUBLIC	??1?$ref_smem@UCKeyQT8@@@@QAE@XZ		; ref_smem<CKeyQT8>::~ref_smem<CKeyQT8>
PUBLIC	??0?$ref_smem@UCKeyQT16@@@@QAE@ABV0@@Z		; ref_smem<CKeyQT16>::ref_smem<CKeyQT16>
PUBLIC	??1?$ref_smem@UCKeyQT16@@@@QAE@XZ		; ref_smem<CKeyQT16>::~ref_smem<CKeyQT16>
PUBLIC	?_dec@?$ref_smem@UCKeyQR@@@@IAEXXZ		; ref_smem<CKeyQR>::_dec
PUBLIC	?_set@?$ref_smem@UCKeyQR@@@@QAEXABV1@@Z		; ref_smem<CKeyQR>::_set
PUBLIC	??4?$ref_smem@UCKeyQR@@@@QAEAAV0@ABV0@@Z	; ref_smem<CKeyQR>::operator=
PUBLIC	?_dec@?$ref_smem@UCKeyQT8@@@@IAEXXZ		; ref_smem<CKeyQT8>::_dec
PUBLIC	?_set@?$ref_smem@UCKeyQT8@@@@QAEXABV1@@Z	; ref_smem<CKeyQT8>::_set
PUBLIC	??4?$ref_smem@UCKeyQT8@@@@QAEAAV0@ABV0@@Z	; ref_smem<CKeyQT8>::operator=
PUBLIC	?_dec@?$ref_smem@UCKeyQT16@@@@IAEXXZ		; ref_smem<CKeyQT16>::_dec
PUBLIC	?_set@?$ref_smem@UCKeyQT16@@@@QAEXABV1@@Z	; ref_smem<CKeyQT16>::_set
PUBLIC	??4?$ref_smem@UCKeyQT16@@@@QAEAAV0@ABV0@@Z	; ref_smem<CKeyQT16>::operator=
PUBLIC	?empty@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QBE_NXZ ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::empty
PUBLIC	?empty@?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QBE_NXZ ; stlp_std::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::empty
PUBLIC	??8?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QBE_NU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@12@@Z ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::operator==
PUBLIC	??R?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@QBEABVshared_str@@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@2@@Z ; stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >::operator()
PUBLIC	?_S_key@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAABVshared_str@@PAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_S_key
PUBLIC	??$_M_find@Vshared_str@@@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@ABEPAU_Rb_tree_node_base@12@ABVshared_str@@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_find<shared_str>
PUBLIC	??$find@Vshared_str@@@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@12@ABVshared_str@@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::find<shared_str>
PUBLIC	??$find@Vshared_str@@@?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@1@ABVshared_str@@@Z ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::find<shared_str>
PUBLIC	??0?$xalloc@U?$pair@MM@stlp_std@@@@QAE@XZ	; xalloc<stlp_std::pair<float,float> >::xalloc<stlp_std::pair<float,float> >
PUBLIC	??0?$_Vector_base@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@ABV?$xalloc@U?$pair@MM@stlp_std@@@@@Z ; stlp_std::priv::_Vector_base<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_Vector_base<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
PUBLIC	??0?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@ABV?$xalloc@U?$pair@MM@stlp_std@@@@@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
PUBLIC	??0?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QAE@ABV?$xalloc@U?$pair@MM@stlp_std@@@@@Z ; stlp_std::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
PUBLIC	??0?$xr_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@@QAE@XZ ; xr_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::xr_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
PUBLIC	?_M_empty_initialize@?$_Rb_tree_base@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAEXXZ ; stlp_std::priv::_Rb_tree_base<stlp_std::pair<shared_str const ,motions_value *>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_empty_initialize
PUBLIC	??0?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@QAE@ABV0@@Z ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > >::xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > >
PUBLIC	??0?$_STLP_alloc_proxy@U_Rb_tree_node_base@priv@stlp_std@@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@23@V?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@@priv@stlp_std@@QAE@ABV?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@U_Rb_tree_node_base@12@@Z ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::priv::_Rb_tree_node_base,stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > > >::_STLP_alloc_proxy<stlp_std::priv::_Rb_tree_node_base,stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > > >
PUBLIC	??$?0U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@QAE@ABV?$xalloc@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@@@Z ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > >::xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > ><stlp_std::pair<shared_str const ,motions_value *> >
PUBLIC	??0?$_Rb_tree_base@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAE@ABV?$xalloc@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@@@Z ; stlp_std::priv::_Rb_tree_base<stlp_std::pair<shared_str const ,motions_value *>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_Rb_tree_base<stlp_std::pair<shared_str const ,motions_value *>,xalloc<stlp_std::pair<shared_str,motions_value *> > >
PUBLIC	??0?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE@ABU?$less@Vshared_str@@@2@ABV?$xalloc@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >
PUBLIC	??0?$xalloc@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@@QAE@XZ ; xalloc<stlp_std::pair<shared_str const ,motions_value *> >::xalloc<stlp_std::pair<shared_str const ,motions_value *> >
PUBLIC	??0?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAE@XZ ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >
PUBLIC	??0?$xr_map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@@QAE@XZ ; xr_map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::xr_map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >
PUBLIC	??1?$xr_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@@QAE@XZ ; xr_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::~xr_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
PUBLIC	??0?$_STLP_alloc_proxy@PAU?$pair@MM@stlp_std@@U12@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@ABV?$xalloc@U?$pair@MM@stlp_std@@@@PAU?$pair@MM@2@@Z ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::pair<float,float> *,stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_STLP_alloc_proxy<stlp_std::pair<float,float> *,stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
PUBLIC	??0?$_Vector_base@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@IABV?$xalloc@U?$pair@MM@stlp_std@@@@@Z ; stlp_std::priv::_Vector_base<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_Vector_base<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
PUBLIC	??0?$xalloc@U?$pair@MM@stlp_std@@@@QAE@ABV0@@Z	; xalloc<stlp_std::pair<float,float> >::xalloc<stlp_std::pair<float,float> >
PUBLIC	?get_allocator@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QBE?AV?$xalloc@U?$pair@MM@stlp_std@@@@XZ ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::get_allocator
PUBLIC	??0?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
PUBLIC	??0?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
PUBLIC	??1?$_Vector_base@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@XZ ; stlp_std::priv::_Vector_base<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::~_Vector_base<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
PUBLIC	??1?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@XZ ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::~_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
PUBLIC	??1?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QAE@XZ ; stlp_std::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::~vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
PUBLIC	??0?$xr_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@@QAE@ABV0@@Z ; xr_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::xr_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
PUBLIC	??1?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE@XZ ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::~_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >
PUBLIC	??1?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAE@XZ ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::~map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >
PUBLIC	??1?$xr_map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@@QAE@XZ ; xr_map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::~xr_map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >
PUBLIC	?capacity@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::capacity
PUBLIC	?_Answer@?$_BothPtrType@PBU?$pair@MM@stlp_std@@PAU12@@stlp_std@@SA?AU__true_type@2@XZ ; stlp_std::_BothPtrType<stlp_std::pair<float,float> const *,stlp_std::pair<float,float> *>::_Answer
PUBLIC	??$__ucopy_ptrs@PBU?$pair@MM@stlp_std@@PAU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PBU21@0PAU21@ABU__true_type@1@@Z ; stlp_std::priv::__ucopy_ptrs<stlp_std::pair<float,float> const *,stlp_std::pair<float,float> *>
PUBLIC	??$_UseTrivialUCopy@U?$pair@MM@stlp_std@@U12@@stlp_std@@YA?AU?$_TrivialUCopy@U?$pair@MM@stlp_std@@U12@@0@PAU?$pair@MM@0@0@Z ; stlp_std::_UseTrivialUCopy<stlp_std::pair<float,float>,stlp_std::pair<float,float> >
PUBLIC	?_Answer@?$_TrivialUCopy@U?$pair@MM@stlp_std@@U12@@stlp_std@@SA?AU__true_type@2@XZ ; stlp_std::_TrivialUCopy<stlp_std::pair<float,float>,stlp_std::pair<float,float> >::_Answer
PUBLIC	??$__ucopy_aux@PBU?$pair@MM@stlp_std@@PAU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PBU21@0PAU21@ABU__true_type@1@@Z ; stlp_std::priv::__ucopy_aux<stlp_std::pair<float,float> const *,stlp_std::pair<float,float> *>
PUBLIC	??$uninitialized_copy@PBU?$pair@MM@stlp_std@@PAU12@@stlp_std@@YAPAU?$pair@MM@0@PBU10@0PAU10@@Z ; stlp_std::uninitialized_copy<stlp_std::pair<float,float> const *,stlp_std::pair<float,float> *>
PUBLIC	??$_M_allocate_and_copy@PBU?$pair@MM@stlp_std@@@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEPAU?$pair@MM@2@AAIPBU32@1@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_allocate_and_copy<stlp_std::pair<float,float> const *>
PUBLIC	??$__copy_ptrs@PBU?$pair@MM@stlp_std@@PAU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PBU21@0PAU21@ABU__true_type@1@@Z ; stlp_std::priv::__copy_ptrs<stlp_std::pair<float,float> const *,stlp_std::pair<float,float> *>
PUBLIC	??4?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::operator=
PUBLIC	??4?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QAEAAV01@ABV01@@Z ; stlp_std::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::operator=
PUBLIC	??4?$xr_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@@QAEAAV0@ABV0@@Z ; xr_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::operator=
PUBLIC	??$xr_alloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@YAPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@I@Z ; xr_alloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > >
PUBLIC	?allocate@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@QBEPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@IPBX@Z ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > >::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@U_Rb_tree_node_base@priv@stlp_std@@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@23@V?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@@priv@stlp_std@@QAEPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@23@I@Z ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::priv::_Rb_tree_node_base,stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > > >::allocate
PUBLIC	??0?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@QAE@ABU01@@Z ; stlp_std::pair<shared_str const ,motions_value *>::pair<shared_str const ,motions_value *>
PUBLIC	??$_Copy_Construct@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@PAUmotions_value@@@0@ABU10@@Z ; stlp_std::_Copy_Construct<stlp_std::pair<shared_str const ,motions_value *> >
PUBLIC	?_M_create_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@PAUmotions_value@@@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_create_node
PUBLIC	?_S_parent@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_S_parent
PUBLIC	?_M_insert@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@AAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@23@PAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@PAUmotions_value@@@3@00@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_insert
PUBLIC	??F?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QAEAAU012@XZ ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >::operator--
PUBLIC	??8?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QBE_NU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@12@@Z ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >::operator==
PUBLIC	??0?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@_N@stlp_std@@QAE@ABU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@1@AB_N@Z ; stlp_std::pair<stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >,bool>::pair<stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >,bool>
PUBLIC	?insert_unique@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@_N@3@ABU?$pair@$$CBVshared_str@@PAUmotions_value@@@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::insert_unique
PUBLIC	?insert@?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAE?AU?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@_N@2@ABU?$pair@$$CBVshared_str@@PAUmotions_value@@@2@@Z ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::insert
PUBLIC	??R?$less@Vshared_str@@@stlp_std@@QBE_NABVshared_str@@0@Z ; stlp_std::less<shared_str>::operator()
PUBLIC	?_M_root@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IBEPAU_Rb_tree_node_base@23@XZ ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_root
PUBLIC	??R?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@QBEABVshared_str@@ABU?$pair@$$CBVshared_str@@PAUmotions_value@@@2@@Z ; stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >::operator()
PUBLIC	?_S_key@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAABVshared_str@@PAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_S_key
PUBLIC	??$_M_find@Vshared_str@@@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@ABEPAU_Rb_tree_node_base@12@ABVshared_str@@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_find<shared_str>
PUBLIC	??$find@Vshared_str@@@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@12@ABVshared_str@@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::find<shared_str>
PUBLIC	??$find@Vshared_str@@@?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@1@ABVshared_str@@@Z ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::find<shared_str>
PUBLIC	??$xr_new@Umotions_value@@@@YAPAUmotions_value@@XZ ; xr_new<motions_value>
PUBLIC	??0?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@QAE@ABVshared_str@@ABQAUmotions_value@@@Z ; stlp_std::pair<shared_str,motions_value *>::pair<shared_str,motions_value *>
PUBLIC	??$mk_pair@Vshared_str@@PAUmotions_value@@@@YA?AU?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@Vshared_str@@PAUmotions_value@@@Z ; mk_pair<shared_str,motions_value *>
PUBLIC	??1?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@QAE@XZ ; stlp_std::pair<shared_str,motions_value *>::~pair<shared_str,motions_value *>
PUBLIC	??$?0Vshared_str@@PAUmotions_value@@@?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@QAE@ABU?$pair@Vshared_str@@PAUmotions_value@@@1@@Z ; stlp_std::pair<shared_str const ,motions_value *>::pair<shared_str const ,motions_value *><shared_str,motions_value *>
PUBLIC	?end@?$vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@stlp_std@@QAEPAVCMotionDef@@XZ ; stlp_std::vector<CMotionDef,xalloc<CMotionDef> >::end
PUBLIC	?begin@?$vector@VCMotion@@V?$xalloc@VCMotion@@@@@stlp_std@@QAEPAVCMotion@@XZ ; stlp_std::vector<CMotion,xalloc<CMotion> >::begin
PUBLIC	?to_value_type_ptr@?$_CastTraits@VCMotion@@V1@@priv@stlp_std@@SAPAVCMotion@@PAV4@@Z ; stlp_std::priv::_CastTraits<CMotion,CMotion>::to_value_type_ptr
PUBLIC	?end@?$vector@VCMotion@@V?$xalloc@VCMotion@@@@@stlp_std@@QAEPAVCMotion@@XZ ; stlp_std::vector<CMotion,xalloc<CMotion> >::end
PUBLIC	?begin@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@23@XZ ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::begin
PUBLIC	?begin@?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@2@XZ ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::begin
PUBLIC	??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE@PAU_Rb_tree_node_base@12@@Z ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >
PUBLIC	?end@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@23@XZ ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::end
PUBLIC	?end@?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@2@XZ ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::end
PUBLIC	?size@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::size
PUBLIC	?size@?$map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@stlp_std@@QBEIXZ ; stlp_std::map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::size
PUBLIC	?size@?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@QBEIXZ ; xr_map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::size
PUBLIC	??D?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QBEAAU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@2@XZ ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::operator*
PUBLIC	??C?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QBEPAU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@2@XZ ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::operator->
PUBLIC	??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE@ABU012@@Z ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >
PUBLIC	??E?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QAEAAU012@XZ ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::operator++
PUBLIC	??E?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE?AU012@H@Z ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::operator++
PUBLIC	??9?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QBE_NU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@12@@Z ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::operator!=
PUBLIC	??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE@ABU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@12@@Z ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_ConstMapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_ConstMapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >
PUBLIC	?erase@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAEXU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::erase
PUBLIC	?erase@?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAEXU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@2@@Z ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::erase
PUBLIC	?_M_root@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_root
PUBLIC	?_M_rightmost@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_rightmost
PUBLIC	??$xr_free@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@YAXAAPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@Z ; xr_free<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > >
PUBLIC	?deallocate@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@QBEXPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@I@Z ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > >::deallocate
PUBLIC	?_S_left@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_S_left
PUBLIC	?_S_right@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_S_right
PUBLIC	?_S_value@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAAAU?$pair@$$CBVshared_str@@PAUmotions_value@@@3@PAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_S_value
PUBLIC	??1?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@QAE@XZ ; stlp_std::pair<shared_str const ,motions_value *>::~pair<shared_str const ,motions_value *>
PUBLIC	??_G?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@QAEPAXI@Z ; stlp_std::pair<shared_str const ,motions_value *>::`scalar deleting destructor'
PUBLIC	??$__destroy_aux@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@PAUmotions_value@@@0@ABU__false_type@0@@Z ; stlp_std::__destroy_aux<stlp_std::pair<shared_str const ,motions_value *> >
PUBLIC	??$_Destroy@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@PAUmotions_value@@@0@@Z ; stlp_std::_Destroy<stlp_std::pair<shared_str const ,motions_value *> >
PUBLIC	?_M_erase@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_erase
PUBLIC	?clear@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAEXXZ ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::clear
PUBLIC	?clear@?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAEXXZ ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::clear
PUBLIC	??_Gmotions_value@@QAEPAXI@Z			; motions_value::`scalar deleting destructor'
PUBLIC	??R?$xr_special_free@$0A@Umotions_value@@@@QAEXAAPAUmotions_value@@@Z ; xr_special_free<0,motions_value>::operator()
PUBLIC	??$xr_delete@Umotions_value@@@@YAXAAPAUmotions_value@@@Z ; xr_delete<motions_value>
PUBLIC	??0?$xalloc@VCMotionDef@@@@QAE@XZ		; xalloc<CMotionDef>::xalloc<CMotionDef>
PUBLIC	??0?$_Vector_base@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@ABV?$xalloc@VCMotionDef@@@@@Z ; stlp_std::priv::_Vector_base<CMotionDef,xalloc<CMotionDef> >::_Vector_base<CMotionDef,xalloc<CMotionDef> >
PUBLIC	??0?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@ABV?$xalloc@VCMotionDef@@@@@Z ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_Impl_vector<CMotionDef,xalloc<CMotionDef> >
PUBLIC	??0?$vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@stlp_std@@QAE@ABV?$xalloc@VCMotionDef@@@@@Z ; stlp_std::vector<CMotionDef,xalloc<CMotionDef> >::vector<CMotionDef,xalloc<CMotionDef> >
PUBLIC	??0?$xr_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@@QAE@XZ ; xr_vector<CMotionDef,xalloc<CMotionDef> >::xr_vector<CMotionDef,xalloc<CMotionDef> >
PUBLIC	??0?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE@ABU?$less@Vshared_str@@@2@ABV?$xalloc@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >
PUBLIC	??0?$xalloc@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@QAE@XZ ; xalloc<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >::xalloc<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >
PUBLIC	??0?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE@XZ ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >
PUBLIC	??0?$xr_map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@@QAE@XZ ; xr_map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::xr_map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >
PUBLIC	??0?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAE@ABUaccel_str_pred@@ABV?$xalloc@U?$pair@$$CBVshared_str@@G@stlp_std@@@@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >
PUBLIC	??0?$xalloc@U?$pair@$$CBVshared_str@@G@stlp_std@@@@QAE@XZ ; xalloc<stlp_std::pair<shared_str const ,unsigned short> >::xalloc<stlp_std::pair<shared_str const ,unsigned short> >
PUBLIC	??0?$map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@stlp_std@@QAE@XZ ; stlp_std::map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >
PUBLIC	??0?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@QAE@XZ ; xr_map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::xr_map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >
PUBLIC	?_M_leftmost@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_leftmost
PUBLIC	?begin@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@23@XZ ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::begin
PUBLIC	?begin@?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@2@XZ ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::begin
PUBLIC	??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE@PAU_Rb_tree_node_base@12@@Z ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >
PUBLIC	?end@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@23@XZ ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::end
PUBLIC	?end@?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@2@XZ ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::end
PUBLIC	?size@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::size
PUBLIC	?size@?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QBEIXZ ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::size
PUBLIC	?size@?$xr_map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@@QBEIXZ ; xr_map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::size
PUBLIC	??D?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QBEAAU?$pair@$$CBVshared_str@@PAUmotions_value@@@2@XZ ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >::operator*
PUBLIC	??C?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QBEPAU?$pair@$$CBVshared_str@@PAUmotions_value@@@2@XZ ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >::operator->
PUBLIC	??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE@ABU012@@Z ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >
PUBLIC	??E?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QAEAAU012@XZ ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >::operator++
PUBLIC	??E?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE?AU012@H@Z ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >::operator++
PUBLIC	??9?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QBE_NU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@12@@Z ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >::operator!=
PUBLIC	??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE@ABU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@12@@Z ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_ConstMapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_ConstMapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >
PUBLIC	??$__destroy_mv_srcs@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@Vmotion_marks@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0PAVmotion_marks@@@Z ; stlp_std::__destroy_mv_srcs<stlp_std::reverse_iterator<motion_marks *>,motion_marks>
PUBLIC	??$_Destroy_Moved_Range@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0@Z ; stlp_std::_Destroy_Moved_Range<stlp_std::reverse_iterator<motion_marks *> >
PUBLIC	?_M_clear_after_move@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXXZ ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_clear_after_move
PUBLIC	?_M_set@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXPAVmotion_marks@@00@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_set
PUBLIC	??$__uninitialized_move@PAVmotion_marks@@PAV1@U__false_type@stlp_std@@@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00U__false_type@1@ABU31@@Z ; stlp_std::priv::__uninitialized_move<motion_marks *,motion_marks *,stlp_std::__false_type>
PUBLIC	??$_Copy_Construct@Vmotion_marks@@@stlp_std@@YAXPAVmotion_marks@@ABV1@@Z ; stlp_std::_Copy_Construct<motion_marks>
PUBLIC	?_M_insert_overflow_aux@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXPAVmotion_marks@@ABV4@ABU__false_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_insert_overflow_aux
PUBLIC	?_M_insert_overflow@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXPAVmotion_marks@@ABV4@ABU__false_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_insert_overflow
PUBLIC	?_M_is_inside@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@ABE_NABVmotion_marks@@@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_is_inside
PUBLIC	??$__ufill@PAVmotion_marks@@V1@H@priv@stlp_std@@YAXPAVmotion_marks@@0ABV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ufill<motion_marks *,motion_marks,int>
PUBLIC	??$__uninitialized_fill_n@PAVmotion_marks@@IV1@@priv@stlp_std@@YAPAVmotion_marks@@PAV2@IABV2@@Z ; stlp_std::priv::__uninitialized_fill_n<motion_marks *,unsigned int,motion_marks>
PUBLIC	??$__ucopy@PAVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<motion_marks *,motion_marks *,int>
PUBLIC	??$__ucopy_ptrs@PAVmotion_marks@@PAV1@@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABU__false_type@1@@Z ; stlp_std::priv::__ucopy_ptrs<motion_marks *,motion_marks *>
PUBLIC	??$__copy_backward@PAVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__copy_backward<motion_marks *,motion_marks *,int>
PUBLIC	??$__copy_backward_ptrs@PAVmotion_marks@@PAV1@@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABU__false_type@1@@Z ; stlp_std::priv::__copy_backward_ptrs<motion_marks *,motion_marks *>
PUBLIC	??$fill@PAVmotion_marks@@V1@@stlp_std@@YAXPAVmotion_marks@@0ABV1@@Z ; stlp_std::fill<motion_marks *,motion_marks>
PUBLIC	?_M_fill_insert_aux@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXPAVmotion_marks@@IABV4@ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_fill_insert_aux
PUBLIC	?_M_fill_insert@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXPAVmotion_marks@@IABV4@@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_fill_insert
PUBLIC	?insert@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEXPAVmotion_marks@@IABV4@@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::insert
PUBLIC	??$__copy@PAVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__copy<motion_marks *,motion_marks *,int>
PUBLIC	??$__copy_ptrs@PAVmotion_marks@@PAV1@@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABU__false_type@1@@Z ; stlp_std::priv::__copy_ptrs<motion_marks *,motion_marks *>
PUBLIC	?_M_erase@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEPAVmotion_marks@@PAV4@0ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_erase
PUBLIC	?erase@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEPAVmotion_marks@@PAV4@0@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::erase
PUBLIC	?resize@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEXIABVmotion_marks@@@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::resize
PUBLIC	?to_storage_type_cref@?$_CastTraits@Vmotion_marks@@V1@@priv@stlp_std@@SAABVmotion_marks@@ABV4@@Z ; stlp_std::priv::_CastTraits<motion_marks,motion_marks>::to_storage_type_cref
PUBLIC	?resize@?$vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@stlp_std@@QAEXIABVmotion_marks@@@Z ; stlp_std::vector<motion_marks,xalloc<motion_marks> >::resize
PUBLIC	?to_value_type_ptr@?$_CastTraits@Vmotion_marks@@V1@@priv@stlp_std@@SAPAVmotion_marks@@PAV4@@Z ; stlp_std::priv::_CastTraits<motion_marks,motion_marks>::to_value_type_ptr
PUBLIC	?begin@?$vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@stlp_std@@QAEPAVmotion_marks@@XZ ; stlp_std::vector<motion_marks,xalloc<motion_marks> >::begin
PUBLIC	??A?$xr_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@@QAEAAVmotion_marks@@I@Z ; xr_vector<motion_marks,xalloc<motion_marks> >::operator[]
PUBLIC	??1?$xr_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@@QAE@XZ ; xr_vector<CMotionDef,xalloc<CMotionDef> >::~xr_vector<CMotionDef,xalloc<CMotionDef> >
PUBLIC	??0?$_STLP_alloc_proxy@PAVCMotionDef@@V1@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@ABV?$xalloc@VCMotionDef@@@@PAVCMotionDef@@@Z ; stlp_std::priv::_STLP_alloc_proxy<CMotionDef *,CMotionDef,xalloc<CMotionDef> >::_STLP_alloc_proxy<CMotionDef *,CMotionDef,xalloc<CMotionDef> >
PUBLIC	??0?$_Vector_base@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@IABV?$xalloc@VCMotionDef@@@@@Z ; stlp_std::priv::_Vector_base<CMotionDef,xalloc<CMotionDef> >::_Vector_base<CMotionDef,xalloc<CMotionDef> >
PUBLIC	??0?$xalloc@VCMotionDef@@@@QAE@ABV0@@Z		; xalloc<CMotionDef>::xalloc<CMotionDef>
PUBLIC	?get_allocator@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QBE?AV?$xalloc@VCMotionDef@@@@XZ ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::get_allocator
PUBLIC	?begin@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QBEPBVCMotionDef@@XZ ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::begin
PUBLIC	?end@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QBEPBVCMotionDef@@XZ ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::end
PUBLIC	??0?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_Impl_vector<CMotionDef,xalloc<CMotionDef> >
PUBLIC	??0?$vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::vector<CMotionDef,xalloc<CMotionDef> >::vector<CMotionDef,xalloc<CMotionDef> >
PUBLIC	??1?$_Vector_base@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@XZ ; stlp_std::priv::_Vector_base<CMotionDef,xalloc<CMotionDef> >::~_Vector_base<CMotionDef,xalloc<CMotionDef> >
PUBLIC	??1?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@XZ ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::~_Impl_vector<CMotionDef,xalloc<CMotionDef> >
PUBLIC	??1?$vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@stlp_std@@QAE@XZ ; stlp_std::vector<CMotionDef,xalloc<CMotionDef> >::~vector<CMotionDef,xalloc<CMotionDef> >
PUBLIC	??0?$xr_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@@QAE@ABV0@@Z ; xr_vector<CMotionDef,xalloc<CMotionDef> >::xr_vector<CMotionDef,xalloc<CMotionDef> >
PUBLIC	??1?$xr_map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@@QAE@XZ ; xr_map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::~xr_map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >
PUBLIC	??$?0U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@?$xalloc@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@QAE@ABV?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@@Z ; xalloc<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >::xalloc<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > ><stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >
PUBLIC	?get_allocator@?$_Rb_tree_base@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QBE?AV?$xalloc@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@XZ ; stlp_std::priv::_Rb_tree_base<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::get_allocator
PUBLIC	?_M_empty_initialize@?$_Rb_tree_base@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEXXZ ; stlp_std::priv::_Rb_tree_base<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_empty_initialize
PUBLIC	??0?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@QAE@ABV0@@Z ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >
PUBLIC	??0?$_STLP_alloc_proxy@U_Rb_tree_node_base@priv@stlp_std@@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@23@V?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@@priv@stlp_std@@QAE@ABV?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@U_Rb_tree_node_base@12@@Z ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::priv::_Rb_tree_node_base,stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > > >::_STLP_alloc_proxy<stlp_std::priv::_Rb_tree_node_base,stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > > >
PUBLIC	??$?0U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@QAE@ABV?$xalloc@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@Z ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > ><stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >
PUBLIC	??0?$_Rb_tree_base@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAE@ABV?$xalloc@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@Z ; stlp_std::priv::_Rb_tree_base<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_Rb_tree_base<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >
PUBLIC	??0?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >
PUBLIC	??0?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >
PUBLIC	??1?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE@XZ ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::~_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >
PUBLIC	??1?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE@XZ ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::~map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >
PUBLIC	??0?$xr_map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@@QAE@ABV0@@Z ; xr_map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::xr_map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >
PUBLIC	??1?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@QAE@XZ ; xr_map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::~xr_map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >
PUBLIC	??$?0U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@?$xalloc@U?$pair@$$CBVshared_str@@G@stlp_std@@@@QAE@ABV?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@@Z ; xalloc<stlp_std::pair<shared_str const ,unsigned short> >::xalloc<stlp_std::pair<shared_str const ,unsigned short> ><stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > >
PUBLIC	?get_allocator@?$_Rb_tree_base@U?$pair@$$CBVshared_str@@G@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QBE?AV?$xalloc@U?$pair@$$CBVshared_str@@G@stlp_std@@@@XZ ; stlp_std::priv::_Rb_tree_base<stlp_std::pair<shared_str const ,unsigned short>,xalloc<stlp_std::pair<shared_str,unsigned short> > >::get_allocator
PUBLIC	?_M_empty_initialize@?$_Rb_tree_base@U?$pair@$$CBVshared_str@@G@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAEXXZ ; stlp_std::priv::_Rb_tree_base<stlp_std::pair<shared_str const ,unsigned short>,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_empty_initialize
PUBLIC	??0?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@QAE@ABV0@@Z ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > >::xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > >
PUBLIC	??0?$_STLP_alloc_proxy@U_Rb_tree_node_base@priv@stlp_std@@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@23@V?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@@priv@stlp_std@@QAE@ABV?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@U_Rb_tree_node_base@12@@Z ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::priv::_Rb_tree_node_base,stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > > >::_STLP_alloc_proxy<stlp_std::priv::_Rb_tree_node_base,stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > > >
PUBLIC	??$?0U?$pair@$$CBVshared_str@@G@stlp_std@@@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@QAE@ABV?$xalloc@U?$pair@$$CBVshared_str@@G@stlp_std@@@@@Z ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > >::xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > ><stlp_std::pair<shared_str const ,unsigned short> >
PUBLIC	??0?$_Rb_tree_base@U?$pair@$$CBVshared_str@@G@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAE@ABV?$xalloc@U?$pair@$$CBVshared_str@@G@stlp_std@@@@@Z ; stlp_std::priv::_Rb_tree_base<stlp_std::pair<shared_str const ,unsigned short>,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_Rb_tree_base<stlp_std::pair<shared_str const ,unsigned short>,xalloc<stlp_std::pair<shared_str,unsigned short> > >
PUBLIC	??0?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >
PUBLIC	??0?$map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >
PUBLIC	??1?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAE@XZ ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::~_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >
PUBLIC	??1?$map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@stlp_std@@QAE@XZ ; stlp_std::map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::~map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >
PUBLIC	??0?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@QAE@ABV0@@Z ; xr_map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::xr_map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >
PUBLIC	?size@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::size
PUBLIC	?capacity@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::capacity
PUBLIC	??$xr_free@VCMotionDef@@@@YAXAAPAVCMotionDef@@@Z ; xr_free<CMotionDef>
PUBLIC	?deallocate@?$xalloc@VCMotionDef@@@@QBEXPAVCMotionDef@@I@Z ; xalloc<CMotionDef>::deallocate
PUBLIC	?end@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEPAVCMotionDef@@XZ ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::end
PUBLIC	?rbegin@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAVCMotionDef@@@3@XZ ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::rbegin
PUBLIC	??0?$reverse_iterator@PAVCMotionDef@@@stlp_std@@QAE@PAVCMotionDef@@@Z ; stlp_std::reverse_iterator<CMotionDef *>::reverse_iterator<CMotionDef *>
PUBLIC	?rend@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAVCMotionDef@@@3@XZ ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::rend
PUBLIC	??0?$reverse_iterator@PAVCMotionDef@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::reverse_iterator<CMotionDef *>::reverse_iterator<CMotionDef *>
PUBLIC	??D?$reverse_iterator@PAVCMotionDef@@@stlp_std@@QBEAAVCMotionDef@@XZ ; stlp_std::reverse_iterator<CMotionDef *>::operator*
PUBLIC	??E?$reverse_iterator@PAVCMotionDef@@@stlp_std@@QAEAAV01@XZ ; stlp_std::reverse_iterator<CMotionDef *>::operator++
PUBLIC	?base@?$reverse_iterator@PAVCMotionDef@@@stlp_std@@QBEPAVCMotionDef@@XZ ; stlp_std::reverse_iterator<CMotionDef *>::base
PUBLIC	??$?8PAVCMotionDef@@@stlp_std@@YA_NABV?$reverse_iterator@PAVCMotionDef@@@0@0@Z ; stlp_std::operator==<CMotionDef *>
PUBLIC	??$?9PAVCMotionDef@@@stlp_std@@YA_NABV?$reverse_iterator@PAVCMotionDef@@@0@0@Z ; stlp_std::operator!=<CMotionDef *>
PUBLIC	??$__destroy_range_aux@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@VCMotionDef@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0PAVCMotionDef@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotionDef *>,CMotionDef>
PUBLIC	??$__destroy_range@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@VCMotionDef@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0PAVCMotionDef@@@Z ; stlp_std::__destroy_range<stlp_std::reverse_iterator<CMotionDef *>,CMotionDef>
PUBLIC	??$_Destroy_Range@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0@Z ; stlp_std::_Destroy_Range<stlp_std::reverse_iterator<CMotionDef *> >
PUBLIC	?_M_clear@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXXZ ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_clear
PUBLIC	??_GCMotionDef@@QAEPAXI@Z			; CMotionDef::`scalar deleting destructor'
PUBLIC	??$__destroy_aux@VCMotionDef@@@stlp_std@@YAXPAVCMotionDef@@ABU__false_type@0@@Z ; stlp_std::__destroy_aux<CMotionDef>
PUBLIC	??$__destroy_range_aux@PAVCMotionDef@@V1@@stlp_std@@YAXPAVCMotionDef@@00ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<CMotionDef *,CMotionDef>
PUBLIC	??$__destroy_range@PAVCMotionDef@@V1@@stlp_std@@YAXPAVCMotionDef@@00@Z ; stlp_std::__destroy_range<CMotionDef *,CMotionDef>
PUBLIC	??$_Destroy_Range@PAVCMotionDef@@@stlp_std@@YAXPAVCMotionDef@@0@Z ; stlp_std::_Destroy_Range<CMotionDef *>
PUBLIC	??$xr_alloc@VCMotionDef@@@@YAPAVCMotionDef@@I@Z	; xr_alloc<CMotionDef>
PUBLIC	?allocate@?$xalloc@VCMotionDef@@@@QBEPAVCMotionDef@@IPBX@Z ; xalloc<CMotionDef>::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@PAVCMotionDef@@V1@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEPAVCMotionDef@@I@Z ; stlp_std::priv::_STLP_alloc_proxy<CMotionDef *,CMotionDef,xalloc<CMotionDef> >::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@PAVCMotionDef@@V1@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEPAVCMotionDef@@IAAIABU__false_type@3@@Z ; stlp_std::priv::_STLP_alloc_proxy<CMotionDef *,CMotionDef,xalloc<CMotionDef> >::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@PAVCMotionDef@@V1@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEPAVCMotionDef@@IAAI@Z ; stlp_std::priv::_STLP_alloc_proxy<CMotionDef *,CMotionDef,xalloc<CMotionDef> >::allocate
PUBLIC	?_Answer@?$_BothPtrType@PBVCMotionDef@@PAV1@@stlp_std@@SA?AU__true_type@2@XZ ; stlp_std::_BothPtrType<CMotionDef const *,CMotionDef *>::_Answer
PUBLIC	??$_Param_Construct@VCMotionDef@@V1@@stlp_std@@YAXPAVCMotionDef@@ABV1@@Z ; stlp_std::_Param_Construct<CMotionDef,CMotionDef>
PUBLIC	??$__ucopy@PBVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<CMotionDef const *,CMotionDef *,int>
PUBLIC	??$__ucopy_ptrs@PBVCMotionDef@@PAV1@@priv@stlp_std@@YAPAVCMotionDef@@PBV2@0PAV2@ABU__false_type@1@@Z ; stlp_std::priv::__ucopy_ptrs<CMotionDef const *,CMotionDef *>
PUBLIC	??$_UseTrivialUCopy@VCMotionDef@@V1@@stlp_std@@YA?AU?$_TrivialUCopy@VCMotionDef@@V1@@0@PAVCMotionDef@@0@Z ; stlp_std::_UseTrivialUCopy<CMotionDef,CMotionDef>
PUBLIC	?_Answer@?$_TrivialUCopy@VCMotionDef@@V1@@stlp_std@@SA?AU__false_type@2@XZ ; stlp_std::_TrivialUCopy<CMotionDef,CMotionDef>::_Answer
PUBLIC	??$__ucopy_aux@PBVCMotionDef@@PAV1@@priv@stlp_std@@YAPAVCMotionDef@@PBV2@0PAV2@ABU__true_type@1@@Z ; stlp_std::priv::__ucopy_aux<CMotionDef const *,CMotionDef *>
PUBLIC	??$uninitialized_copy@PBVCMotionDef@@PAV1@@stlp_std@@YAPAVCMotionDef@@PBV1@0PAV1@@Z ; stlp_std::uninitialized_copy<CMotionDef const *,CMotionDef *>
PUBLIC	??$_M_allocate_and_copy@PBVCMotionDef@@@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEPAVCMotionDef@@AAIPBV3@1@Z ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_allocate_and_copy<CMotionDef const *>
PUBLIC	??$__copy@PBVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__copy<CMotionDef const *,CMotionDef *,int>
PUBLIC	??$__copy_ptrs@PBVCMotionDef@@PAV1@@priv@stlp_std@@YAPAVCMotionDef@@PBV2@0PAV2@ABU__false_type@1@@Z ; stlp_std::priv::__copy_ptrs<CMotionDef const *,CMotionDef *>
PUBLIC	??4?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::operator=
PUBLIC	??4?$vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@stlp_std@@QAEAAV01@ABV01@@Z ; stlp_std::vector<CMotionDef,xalloc<CMotionDef> >::operator=
PUBLIC	??4?$xr_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@@QAEAAV0@ABV0@@Z ; xr_vector<CMotionDef,xalloc<CMotionDef> >::operator=
PUBLIC	?_M_root@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IBEPAU_Rb_tree_node_base@23@XZ ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_root
PUBLIC	?_S_minimum@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAPAU_Rb_tree_node_base@23@PAU423@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_S_minimum
PUBLIC	?_S_maximum@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAPAU_Rb_tree_node_base@23@PAU423@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_S_maximum
PUBLIC	??$xr_alloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@YAPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@I@Z ; xr_alloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >
PUBLIC	?allocate@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@QBEPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@IPBX@Z ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@U_Rb_tree_node_base@priv@stlp_std@@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@23@V?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@@priv@stlp_std@@QAEPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@23@I@Z ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::priv::_Rb_tree_node_base,stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > > >::allocate
PUBLIC	??0?$_STLP_alloc_proxy@PAVCMotion@@V1@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@ABV?$xalloc@VCMotion@@@@PAVCMotion@@@Z ; stlp_std::priv::_STLP_alloc_proxy<CMotion *,CMotion,xalloc<CMotion> >::_STLP_alloc_proxy<CMotion *,CMotion,xalloc<CMotion> >
PUBLIC	??$xr_alloc@VCMotion@@@@YAPAVCMotion@@I@Z	; xr_alloc<CMotion>
PUBLIC	?allocate@?$xalloc@VCMotion@@@@QBEPAVCMotion@@IPBX@Z ; xalloc<CMotion>::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@PAVCMotion@@V1@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAEPAVCMotion@@I@Z ; stlp_std::priv::_STLP_alloc_proxy<CMotion *,CMotion,xalloc<CMotion> >::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@PAVCMotion@@V1@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEPAVCMotion@@IAAIABU__false_type@3@@Z ; stlp_std::priv::_STLP_alloc_proxy<CMotion *,CMotion,xalloc<CMotion> >::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@PAVCMotion@@V1@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAEPAVCMotion@@IAAI@Z ; stlp_std::priv::_STLP_alloc_proxy<CMotion *,CMotion,xalloc<CMotion> >::allocate
PUBLIC	??0?$_Vector_base@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@IABV?$xalloc@VCMotion@@@@@Z ; stlp_std::priv::_Vector_base<CMotion,xalloc<CMotion> >::_Vector_base<CMotion,xalloc<CMotion> >
PUBLIC	??0?$xalloc@VCMotion@@@@QAE@ABV0@@Z		; xalloc<CMotion>::xalloc<CMotion>
PUBLIC	?get_allocator@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QBE?AV?$xalloc@VCMotion@@@@XZ ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::get_allocator
PUBLIC	?begin@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QBEPBVCMotion@@XZ ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::begin
PUBLIC	?end@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QBEPBVCMotion@@XZ ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::end
PUBLIC	?size@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::size
PUBLIC	??$_Param_Construct@VCMotion@@V1@@stlp_std@@YAXPAVCMotion@@ABV1@@Z ; stlp_std::_Param_Construct<CMotion,CMotion>
PUBLIC	??$__ucopy@PBVCMotion@@PAV1@H@priv@stlp_std@@YAPAVCMotion@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<CMotion const *,CMotion *,int>
PUBLIC	??$__ucopy_ptrs@PBVCMotion@@PAV1@@priv@stlp_std@@YAPAVCMotion@@PBV2@0PAV2@ABU__false_type@1@@Z ; stlp_std::priv::__ucopy_ptrs<CMotion const *,CMotion *>
PUBLIC	??0?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_Impl_vector<CMotion,xalloc<CMotion> >
PUBLIC	??0?$vector@VCMotion@@V?$xalloc@VCMotion@@@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::vector<CMotion,xalloc<CMotion> >::vector<CMotion,xalloc<CMotion> >
PUBLIC	??0?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@QAE@ABV0@@Z ; xr_vector<CMotion,xalloc<CMotion> >::xr_vector<CMotion,xalloc<CMotion> >
PUBLIC	??0?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@QAE@ABU01@@Z ; stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >
PUBLIC	??$_Copy_Construct@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@0@ABU10@@Z ; stlp_std::_Copy_Construct<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >
PUBLIC	?_M_create_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_create_node
PUBLIC	?_S_color@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAAA_NPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_S_color
PUBLIC	?_M_clone_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@PAU423@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_clone_node
PUBLIC	?_S_parent@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_S_parent
PUBLIC	?_M_copy@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@AAEPAU_Rb_tree_node_base@23@PAU423@0@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_copy
PUBLIC	?_M_root@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_root
PUBLIC	?_M_leftmost@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_leftmost
PUBLIC	?_M_rightmost@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_rightmost
PUBLIC	??$xr_free@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@YAXAAPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@Z ; xr_free<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >
PUBLIC	?deallocate@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@QBEXPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@I@Z ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::deallocate
PUBLIC	?_S_left@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_S_left
PUBLIC	?_S_right@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_S_right
PUBLIC	?_S_value@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAAAU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@PAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_S_value
PUBLIC	??$xr_free@VCMotion@@@@YAXAAPAVCMotion@@@Z	; xr_free<CMotion>
PUBLIC	?deallocate@?$xalloc@VCMotion@@@@QBEXPAVCMotion@@I@Z ; xalloc<CMotion>::deallocate
PUBLIC	??1?$_Vector_base@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@XZ ; stlp_std::priv::_Vector_base<CMotion,xalloc<CMotion> >::~_Vector_base<CMotion,xalloc<CMotion> >
PUBLIC	?end@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAEPAVCMotion@@XZ ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::end
PUBLIC	?rbegin@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAVCMotion@@@3@XZ ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::rbegin
PUBLIC	?begin@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAEPAVCMotion@@XZ ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::begin
PUBLIC	??0?$reverse_iterator@PAVCMotion@@@stlp_std@@QAE@PAVCMotion@@@Z ; stlp_std::reverse_iterator<CMotion *>::reverse_iterator<CMotion *>
PUBLIC	?rend@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAVCMotion@@@3@XZ ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::rend
PUBLIC	??0?$reverse_iterator@PAVCMotion@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::reverse_iterator<CMotion *>::reverse_iterator<CMotion *>
PUBLIC	??D?$reverse_iterator@PAVCMotion@@@stlp_std@@QBEAAVCMotion@@XZ ; stlp_std::reverse_iterator<CMotion *>::operator*
PUBLIC	??E?$reverse_iterator@PAVCMotion@@@stlp_std@@QAEAAV01@XZ ; stlp_std::reverse_iterator<CMotion *>::operator++
PUBLIC	??_GCMotion@@QAEPAXI@Z				; CMotion::`scalar deleting destructor'
PUBLIC	??$__destroy_aux@VCMotion@@@stlp_std@@YAXPAVCMotion@@ABU__false_type@0@@Z ; stlp_std::__destroy_aux<CMotion>
PUBLIC	?base@?$reverse_iterator@PAVCMotion@@@stlp_std@@QBEPAVCMotion@@XZ ; stlp_std::reverse_iterator<CMotion *>::base
PUBLIC	??$?8PAVCMotion@@@stlp_std@@YA_NABV?$reverse_iterator@PAVCMotion@@@0@0@Z ; stlp_std::operator==<CMotion *>
PUBLIC	??$?9PAVCMotion@@@stlp_std@@YA_NABV?$reverse_iterator@PAVCMotion@@@0@0@Z ; stlp_std::operator!=<CMotion *>
PUBLIC	??$__destroy_range_aux@V?$reverse_iterator@PAVCMotion@@@stlp_std@@VCMotion@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0PAVCMotion@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotion *>,CMotion>
PUBLIC	??$__destroy_range@V?$reverse_iterator@PAVCMotion@@@stlp_std@@VCMotion@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0PAVCMotion@@@Z ; stlp_std::__destroy_range<stlp_std::reverse_iterator<CMotion *>,CMotion>
PUBLIC	??$_Destroy_Range@V?$reverse_iterator@PAVCMotion@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0@Z ; stlp_std::_Destroy_Range<stlp_std::reverse_iterator<CMotion *> >
PUBLIC	??1?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@XZ ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::~_Impl_vector<CMotion,xalloc<CMotion> >
PUBLIC	??1?$vector@VCMotion@@V?$xalloc@VCMotion@@@@@stlp_std@@QAE@XZ ; stlp_std::vector<CMotion,xalloc<CMotion> >::~vector<CMotion,xalloc<CMotion> >
PUBLIC	??1?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@QAE@XZ ; xr_vector<CMotion,xalloc<CMotion> >::~xr_vector<CMotion,xalloc<CMotion> >
PUBLIC	??1?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@QAE@XZ ; stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >::~pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >
PUBLIC	??_G?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@QAEPAXI@Z ; stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >::`scalar deleting destructor'
PUBLIC	??$__destroy_aux@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@0@ABU__false_type@0@@Z ; stlp_std::__destroy_aux<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >
PUBLIC	??$_Destroy@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@0@@Z ; stlp_std::_Destroy<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >
PUBLIC	?_M_erase@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_erase
PUBLIC	?clear@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAEXXZ ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::clear
PUBLIC	??4?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::operator=
PUBLIC	??4?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAEAAV01@ABV01@@Z ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::operator=
PUBLIC	??4?$xr_map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@@QAEAAV0@ABV0@@Z ; xr_map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::operator=
PUBLIC	?_M_root@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IBEPAU_Rb_tree_node_base@23@XZ ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_root
PUBLIC	?_S_minimum@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAPAU_Rb_tree_node_base@23@PAU423@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_S_minimum
PUBLIC	?_S_maximum@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAPAU_Rb_tree_node_base@23@PAU423@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_S_maximum
PUBLIC	??$xr_alloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@YAPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@I@Z ; xr_alloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > >
PUBLIC	?allocate@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@QBEPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@IPBX@Z ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > >::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@U_Rb_tree_node_base@priv@stlp_std@@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@23@V?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@@priv@stlp_std@@QAEPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@23@I@Z ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::priv::_Rb_tree_node_base,stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > > >::allocate
PUBLIC	??0?$pair@$$CBVshared_str@@G@stlp_std@@QAE@ABU01@@Z ; stlp_std::pair<shared_str const ,unsigned short>::pair<shared_str const ,unsigned short>
PUBLIC	??$_Copy_Construct@U?$pair@$$CBVshared_str@@G@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@G@0@ABU10@@Z ; stlp_std::_Copy_Construct<stlp_std::pair<shared_str const ,unsigned short> >
PUBLIC	?_M_create_node@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@G@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_create_node
PUBLIC	?_S_color@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAAA_NPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_S_color
PUBLIC	?_M_clone_node@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@PAU423@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_clone_node
PUBLIC	?_S_parent@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_S_parent
PUBLIC	?_M_copy@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@AAEPAU_Rb_tree_node_base@23@PAU423@0@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_copy
PUBLIC	?_M_root@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_root
PUBLIC	?_M_leftmost@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_leftmost
PUBLIC	?_M_rightmost@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_rightmost
PUBLIC	??$xr_free@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@YAXAAPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@Z ; xr_free<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > >
PUBLIC	?deallocate@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@QBEXPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@I@Z ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > >::deallocate
PUBLIC	?_S_left@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_S_left
PUBLIC	?_S_right@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_S_right
PUBLIC	?_S_value@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAAAU?$pair@$$CBVshared_str@@G@3@PAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_S_value
PUBLIC	??1?$pair@$$CBVshared_str@@G@stlp_std@@QAE@XZ	; stlp_std::pair<shared_str const ,unsigned short>::~pair<shared_str const ,unsigned short>
PUBLIC	??_G?$pair@$$CBVshared_str@@G@stlp_std@@QAEPAXI@Z ; stlp_std::pair<shared_str const ,unsigned short>::`scalar deleting destructor'
PUBLIC	??$__destroy_aux@U?$pair@$$CBVshared_str@@G@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@G@0@ABU__false_type@0@@Z ; stlp_std::__destroy_aux<stlp_std::pair<shared_str const ,unsigned short> >
PUBLIC	??$_Destroy@U?$pair@$$CBVshared_str@@G@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@G@0@@Z ; stlp_std::_Destroy<stlp_std::pair<shared_str const ,unsigned short> >
PUBLIC	?_M_erase@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_erase
PUBLIC	?clear@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAEXXZ ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::clear
PUBLIC	??4?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::operator=
PUBLIC	??4?$map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@stlp_std@@QAEAAV01@ABV01@@Z ; stlp_std::map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::operator=
PUBLIC	??4?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@QAEAAV0@ABV0@@Z ; xr_map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::operator=
PUBLIC	?begin@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEPAVCMotionDef@@XZ ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::begin
PUBLIC	?to_value_type_ptr@?$_CastTraits@VCMotionDef@@V1@@priv@stlp_std@@SAPAVCMotionDef@@PAV4@@Z ; stlp_std::priv::_CastTraits<CMotionDef,CMotionDef>::to_value_type_ptr
PUBLIC	?begin@?$vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@stlp_std@@QAEPAVCMotionDef@@XZ ; stlp_std::vector<CMotionDef,xalloc<CMotionDef> >::begin
PUBLIC	??A?$xr_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@@QAEAAVCMotionDef@@I@Z ; xr_vector<CMotionDef,xalloc<CMotionDef> >::operator[]
PUBLIC	??0?$xalloc@Vmotion_marks@@@@QAE@XZ		; xalloc<motion_marks>::xalloc<motion_marks>
PUBLIC	??0?$_Vector_base@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Vmotion_marks@@@@@Z ; stlp_std::priv::_Vector_base<motion_marks,xalloc<motion_marks> >::_Vector_base<motion_marks,xalloc<motion_marks> >
PUBLIC	??0?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Vmotion_marks@@@@@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_Impl_vector<motion_marks,xalloc<motion_marks> >
PUBLIC	??0?$vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@stlp_std@@QAE@ABV?$xalloc@Vmotion_marks@@@@@Z ; stlp_std::vector<motion_marks,xalloc<motion_marks> >::vector<motion_marks,xalloc<motion_marks> >
PUBLIC	??0?$xr_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@@QAE@XZ ; xr_vector<motion_marks,xalloc<motion_marks> >::xr_vector<motion_marks,xalloc<motion_marks> >
PUBLIC	?begin@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QBEPBU?$pair@MM@3@XZ ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::begin
PUBLIC	?begin@?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QBEPBU?$pair@MM@2@XZ ; stlp_std::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::begin
PUBLIC	?end@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QBEPBU?$pair@MM@3@XZ ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::end
PUBLIC	?to_value_type_cptr@?$_CastTraits@U?$pair@MM@stlp_std@@U12@@priv@stlp_std@@SAPBU?$pair@MM@3@PBU43@@Z ; stlp_std::priv::_CastTraits<stlp_std::pair<float,float>,stlp_std::pair<float,float> >::to_value_type_cptr
PUBLIC	?end@?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QBEPBU?$pair@MM@2@XZ ; stlp_std::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::end
PUBLIC	??0?$xalloc@D@@QAE@XZ				; xalloc<char>::xalloc<char>
PUBLIC	??0?$xalloc@D@@QAE@ABV0@@Z			; xalloc<char>::xalloc<char>
PUBLIC	??0?$_STLP_alloc_proxy@PADDV?$xalloc@D@@@priv@stlp_std@@QAE@ABV?$xalloc@D@@PAD@Z ; stlp_std::priv::_STLP_alloc_proxy<char *,char,xalloc<char> >::_STLP_alloc_proxy<char *,char,xalloc<char> >
PUBLIC	?allocate@?$xalloc@D@@QBEPADIPBX@Z		; xalloc<char>::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@PADDV?$xalloc@D@@@priv@stlp_std@@QAEPADI@Z ; stlp_std::priv::_STLP_alloc_proxy<char *,char,xalloc<char> >::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@PADDV?$xalloc@D@@@priv@stlp_std@@AAEPADIAAIABU__false_type@3@@Z ; stlp_std::priv::_STLP_alloc_proxy<char *,char,xalloc<char> >::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@PADDV?$xalloc@D@@@priv@stlp_std@@QAEPADIAAI@Z ; stlp_std::priv::_STLP_alloc_proxy<char *,char,xalloc<char> >::allocate
PUBLIC	?max_size@?$xalloc@D@@QBEIXZ			; xalloc<char>::max_size
PUBLIC	?max_size@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IBEIXZ ; stlp_std::priv::_String_base<char,xalloc<char> >::max_size
PUBLIC	?_M_throw_length_error@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IBEXXZ ; stlp_std::priv::_String_base<char,xalloc<char> >::_M_throw_length_error
PUBLIC	?_M_allocate_block@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IAEXI@Z ; stlp_std::priv::_String_base<char,xalloc<char> >::_M_allocate_block
PUBLIC	??0?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IAE@ABV?$xalloc@D@@I@Z ; stlp_std::priv::_String_base<char,xalloc<char> >::_String_base<char,xalloc<char> >
PUBLIC	?_M_Finish@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IAEPADXZ ; stlp_std::priv::_String_base<char,xalloc<char> >::_M_Finish
PUBLIC	?_M_construct_null_aux@?$basic_string@DV?$char_traits@D@stlp_std@@V?$xalloc@D@@@stlp_std@@IBEXPADABU__true_type@2@@Z ; stlp_std::basic_string<char,stlp_std::char_traits<char>,xalloc<char> >::_M_construct_null_aux
PUBLIC	?_M_terminate_string_aux@?$basic_string@DV?$char_traits@D@stlp_std@@V?$xalloc@D@@@stlp_std@@IAEXABU__true_type@2@@Z ; stlp_std::basic_string<char,stlp_std::char_traits<char>,xalloc<char> >::_M_terminate_string_aux
PUBLIC	?_M_force_terminate_string@?$basic_string@DV?$char_traits@D@stlp_std@@V?$xalloc@D@@@stlp_std@@IAEXABU__false_type@2@@Z ; stlp_std::basic_string<char,stlp_std::char_traits<char>,xalloc<char> >::_M_force_terminate_string
PUBLIC	?_M_terminate_string@?$basic_string@DV?$char_traits@D@stlp_std@@V?$xalloc@D@@@stlp_std@@IAEXXZ ; stlp_std::basic_string<char,stlp_std::char_traits<char>,xalloc<char> >::_M_terminate_string
PUBLIC	??0?$basic_string@DV?$char_traits@D@stlp_std@@V?$xalloc@D@@@stlp_std@@QAE@ABV?$xalloc@D@@@Z ; stlp_std::basic_string<char,stlp_std::char_traits<char>,xalloc<char> >::basic_string<char,stlp_std::char_traits<char>,xalloc<char> >
PUBLIC	?deallocate@?$xalloc@D@@QBEXPADI@Z		; xalloc<char>::deallocate
PUBLIC	?_M_deallocate_block@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IAEXXZ ; stlp_std::priv::_String_base<char,xalloc<char> >::_M_deallocate_block
PUBLIC	??1?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IAE@XZ ; stlp_std::priv::_String_base<char,xalloc<char> >::~_String_base<char,xalloc<char> >
PUBLIC	?_M_destroy_range@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IAEXII@Z ; stlp_std::priv::_String_base<char,xalloc<char> >::_M_destroy_range
PUBLIC	??1?$basic_string@DV?$char_traits@D@stlp_std@@V?$xalloc@D@@@stlp_std@@QAE@XZ ; stlp_std::basic_string<char,stlp_std::char_traits<char>,xalloc<char> >::~basic_string<char,stlp_std::char_traits<char>,xalloc<char> >
PUBLIC	?_M_using_static_buf@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IBE_NXZ ; stlp_std::priv::_String_base<char,xalloc<char> >::_M_using_static_buf
PUBLIC	?_M_Start@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IBEPBDXZ ; stlp_std::priv::_String_base<char,xalloc<char> >::_M_Start
PUBLIC	?c_str@?$basic_string@DV?$char_traits@D@stlp_std@@V?$xalloc@D@@@stlp_std@@QBEPBDXZ ; stlp_std::basic_string<char,stlp_std::char_traits<char>,xalloc<char> >::c_str
PUBLIC	??0?$pair@MM@stlp_std@@QAE@XZ			; stlp_std::pair<float,float>::pair<float,float>
PUBLIC	??$xr_alloc@U?$pair@MM@stlp_std@@@@YAPAU?$pair@MM@stlp_std@@I@Z ; xr_alloc<stlp_std::pair<float,float> >
PUBLIC	?allocate@?$xalloc@U?$pair@MM@stlp_std@@@@QBEPAU?$pair@MM@stlp_std@@IPBX@Z ; xalloc<stlp_std::pair<float,float> >::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@PAU?$pair@MM@stlp_std@@U12@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEPAU?$pair@MM@3@I@Z ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::pair<float,float> *,stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@PAU?$pair@MM@stlp_std@@U12@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEPAU?$pair@MM@3@IAAIABU__false_type@3@@Z ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::pair<float,float> *,stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@PAU?$pair@MM@stlp_std@@U12@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEPAU?$pair@MM@3@IAAI@Z ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::pair<float,float> *,stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::allocate
PUBLIC	?size@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::size
PUBLIC	??$xr_free@U?$pair@MM@stlp_std@@@@YAXAAPAU?$pair@MM@stlp_std@@@Z ; xr_free<stlp_std::pair<float,float> >
PUBLIC	?deallocate@?$xalloc@U?$pair@MM@stlp_std@@@@QBEXPAU?$pair@MM@stlp_std@@I@Z ; xalloc<stlp_std::pair<float,float> >::deallocate
PUBLIC	?end@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEPAU?$pair@MM@3@XZ ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::end
PUBLIC	?rbegin@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAU?$pair@MM@stlp_std@@@3@XZ ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::rbegin
PUBLIC	??0?$reverse_iterator@PAU?$pair@MM@stlp_std@@@stlp_std@@QAE@PAU?$pair@MM@1@@Z ; stlp_std::reverse_iterator<stlp_std::pair<float,float> *>::reverse_iterator<stlp_std::pair<float,float> *>
PUBLIC	?rend@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAU?$pair@MM@stlp_std@@@3@XZ ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::rend
PUBLIC	??0?$reverse_iterator@PAU?$pair@MM@stlp_std@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::reverse_iterator<stlp_std::pair<float,float> *>::reverse_iterator<stlp_std::pair<float,float> *>
PUBLIC	??$__destroy_range_aux@V?$reverse_iterator@PAU?$pair@MM@stlp_std@@@stlp_std@@U?$pair@MM@2@@stlp_std@@YAXV?$reverse_iterator@PAU?$pair@MM@stlp_std@@@0@0PAU?$pair@MM@0@ABU__true_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<stlp_std::pair<float,float> *>,stlp_std::pair<float,float> >
PUBLIC	??$__destroy_range@V?$reverse_iterator@PAU?$pair@MM@stlp_std@@@stlp_std@@U?$pair@MM@2@@stlp_std@@YAXV?$reverse_iterator@PAU?$pair@MM@stlp_std@@@0@0PAU?$pair@MM@0@@Z ; stlp_std::__destroy_range<stlp_std::reverse_iterator<stlp_std::pair<float,float> *>,stlp_std::pair<float,float> >
PUBLIC	??$_Destroy_Range@V?$reverse_iterator@PAU?$pair@MM@stlp_std@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAU?$pair@MM@stlp_std@@@0@0@Z ; stlp_std::_Destroy_Range<stlp_std::reverse_iterator<stlp_std::pair<float,float> *> >
PUBLIC	?_M_clear@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEXXZ ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_clear
PUBLIC	?_M_set@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEXPAU?$pair@MM@3@00@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_set
PUBLIC	??$__fill_n@PAU?$pair@MM@stlp_std@@IU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PAU21@IABU21@@Z ; stlp_std::priv::__fill_n<stlp_std::pair<float,float> *,unsigned int,stlp_std::pair<float,float> >
PUBLIC	?_M_insert_overflow@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEXPAU?$pair@MM@3@ABU43@ABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_insert_overflow
PUBLIC	?_M_is_inside@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@ABE_NABU?$pair@MM@3@@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_is_inside
PUBLIC	??$__ucopy_ptrs@PAU?$pair@MM@stlp_std@@PAU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PAU21@00ABU__true_type@1@@Z ; stlp_std::priv::__ucopy_ptrs<stlp_std::pair<float,float> *,stlp_std::pair<float,float> *>
PUBLIC	??$__copy_backward_ptrs@PAU?$pair@MM@stlp_std@@PAU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PAU21@00ABU__true_type@1@@Z ; stlp_std::priv::__copy_backward_ptrs<stlp_std::pair<float,float> *,stlp_std::pair<float,float> *>
PUBLIC	??$fill@PAU?$pair@MM@stlp_std@@U12@@stlp_std@@YAXPAU?$pair@MM@0@0ABU10@@Z ; stlp_std::fill<stlp_std::pair<float,float> *,stlp_std::pair<float,float> >
PUBLIC	??0?$pair@MM@stlp_std@@QAE@ABU01@@Z		; stlp_std::pair<float,float>::pair<float,float>
PUBLIC	??$_Param_Construct@U?$pair@MM@stlp_std@@U12@@stlp_std@@YAXPAU?$pair@MM@0@ABU10@@Z ; stlp_std::_Param_Construct<stlp_std::pair<float,float>,stlp_std::pair<float,float> >
PUBLIC	??$__ufill@PAU?$pair@MM@stlp_std@@U12@H@priv@stlp_std@@YAXPAU?$pair@MM@1@0ABU21@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ufill<stlp_std::pair<float,float> *,stlp_std::pair<float,float>,int>
PUBLIC	??$__uninitialized_fill_n@PAU?$pair@MM@stlp_std@@IU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PAU21@IABU21@@Z ; stlp_std::priv::__uninitialized_fill_n<stlp_std::pair<float,float> *,unsigned int,stlp_std::pair<float,float> >
PUBLIC	?_M_fill_insert_aux@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEXPAU?$pair@MM@3@IABU43@ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_fill_insert_aux
PUBLIC	?_M_fill_insert@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEXPAU?$pair@MM@3@IABU43@@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_fill_insert
PUBLIC	?insert@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEXPAU?$pair@MM@3@IABU43@@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::insert
PUBLIC	??$__copy_ptrs@PAU?$pair@MM@stlp_std@@PAU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PAU21@00ABU__true_type@1@@Z ; stlp_std::priv::__copy_ptrs<stlp_std::pair<float,float> *,stlp_std::pair<float,float> *>
PUBLIC	??$__destroy_range_aux@PAU?$pair@MM@stlp_std@@U12@@stlp_std@@YAXPAU?$pair@MM@0@00ABU__true_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::pair<float,float> *,stlp_std::pair<float,float> >
PUBLIC	??$__destroy_range@PAU?$pair@MM@stlp_std@@U12@@stlp_std@@YAXPAU?$pair@MM@0@00@Z ; stlp_std::__destroy_range<stlp_std::pair<float,float> *,stlp_std::pair<float,float> >
PUBLIC	??$_Destroy_Range@PAU?$pair@MM@stlp_std@@@stlp_std@@YAXPAU?$pair@MM@0@0@Z ; stlp_std::_Destroy_Range<stlp_std::pair<float,float> *>
PUBLIC	?_M_erase@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEPAU?$pair@MM@3@PAU43@0ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_erase
PUBLIC	?erase@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEPAU?$pair@MM@3@PAU43@0@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::erase
PUBLIC	?resize@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEXIABU?$pair@MM@3@@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::resize
PUBLIC	?to_storage_type_cref@?$_CastTraits@U?$pair@MM@stlp_std@@U12@@priv@stlp_std@@SAABU?$pair@MM@3@ABU43@@Z ; stlp_std::priv::_CastTraits<stlp_std::pair<float,float>,stlp_std::pair<float,float> >::to_storage_type_cref
PUBLIC	?resize@?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QAEXIABU?$pair@MM@2@@Z ; stlp_std::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::resize
PUBLIC	?begin@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEPAU?$pair@MM@3@XZ ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::begin
PUBLIC	?to_value_type_ptr@?$_CastTraits@U?$pair@MM@stlp_std@@U12@@priv@stlp_std@@SAPAU?$pair@MM@3@PAU43@@Z ; stlp_std::priv::_CastTraits<stlp_std::pair<float,float>,stlp_std::pair<float,float> >::to_value_type_ptr
PUBLIC	?begin@?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QAEPAU?$pair@MM@2@XZ ; stlp_std::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::begin
PUBLIC	??A?$xr_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@@QAEAAU?$pair@MM@stlp_std@@I@Z ; xr_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::operator[]
PUBLIC	??1?$xr_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@@QAE@XZ ; xr_vector<motion_marks,xalloc<motion_marks> >::~xr_vector<motion_marks,xalloc<motion_marks> >
PUBLIC	??0?$_STLP_alloc_proxy@PAVmotion_marks@@V1@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Vmotion_marks@@@@PAVmotion_marks@@@Z ; stlp_std::priv::_STLP_alloc_proxy<motion_marks *,motion_marks,xalloc<motion_marks> >::_STLP_alloc_proxy<motion_marks *,motion_marks,xalloc<motion_marks> >
PUBLIC	??0?$_Vector_base@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE@IABV?$xalloc@Vmotion_marks@@@@@Z ; stlp_std::priv::_Vector_base<motion_marks,xalloc<motion_marks> >::_Vector_base<motion_marks,xalloc<motion_marks> >
PUBLIC	??0?$xalloc@Vmotion_marks@@@@QAE@ABV0@@Z	; xalloc<motion_marks>::xalloc<motion_marks>
PUBLIC	?get_allocator@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QBE?AV?$xalloc@Vmotion_marks@@@@XZ ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::get_allocator
PUBLIC	?begin@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QBEPBVmotion_marks@@XZ ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::begin
PUBLIC	?end@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QBEPBVmotion_marks@@XZ ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::end
PUBLIC	??0?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_Impl_vector<motion_marks,xalloc<motion_marks> >
PUBLIC	??0?$vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::vector<motion_marks,xalloc<motion_marks> >::vector<motion_marks,xalloc<motion_marks> >
PUBLIC	??1?$_Vector_base@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE@XZ ; stlp_std::priv::_Vector_base<motion_marks,xalloc<motion_marks> >::~_Vector_base<motion_marks,xalloc<motion_marks> >
PUBLIC	??1?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE@XZ ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::~_Impl_vector<motion_marks,xalloc<motion_marks> >
PUBLIC	??1?$vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@stlp_std@@QAE@XZ ; stlp_std::vector<motion_marks,xalloc<motion_marks> >::~vector<motion_marks,xalloc<motion_marks> >
PUBLIC	??0?$xr_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@@QAE@ABV0@@Z ; xr_vector<motion_marks,xalloc<motion_marks> >::xr_vector<motion_marks,xalloc<motion_marks> >
PUBLIC	?size@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::size
PUBLIC	?capacity@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::capacity
PUBLIC	??$xr_free@Vmotion_marks@@@@YAXAAPAVmotion_marks@@@Z ; xr_free<motion_marks>
PUBLIC	?deallocate@?$xalloc@Vmotion_marks@@@@QBEXPAVmotion_marks@@I@Z ; xalloc<motion_marks>::deallocate
PUBLIC	?end@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEPAVmotion_marks@@XZ ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::end
PUBLIC	?rbegin@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAVmotion_marks@@@3@XZ ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::rbegin
PUBLIC	?begin@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEPAVmotion_marks@@XZ ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::begin
PUBLIC	??0?$reverse_iterator@PAVmotion_marks@@@stlp_std@@QAE@PAVmotion_marks@@@Z ; stlp_std::reverse_iterator<motion_marks *>::reverse_iterator<motion_marks *>
PUBLIC	?rend@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAVmotion_marks@@@3@XZ ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::rend
PUBLIC	??0?$reverse_iterator@PAVmotion_marks@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::reverse_iterator<motion_marks *>::reverse_iterator<motion_marks *>
PUBLIC	??D?$reverse_iterator@PAVmotion_marks@@@stlp_std@@QBEAAVmotion_marks@@XZ ; stlp_std::reverse_iterator<motion_marks *>::operator*
PUBLIC	??E?$reverse_iterator@PAVmotion_marks@@@stlp_std@@QAEAAV01@XZ ; stlp_std::reverse_iterator<motion_marks *>::operator++
PUBLIC	?base@?$reverse_iterator@PAVmotion_marks@@@stlp_std@@QBEPAVmotion_marks@@XZ ; stlp_std::reverse_iterator<motion_marks *>::base
PUBLIC	??$?8PAVmotion_marks@@@stlp_std@@YA_NABV?$reverse_iterator@PAVmotion_marks@@@0@0@Z ; stlp_std::operator==<motion_marks *>
PUBLIC	??$?9PAVmotion_marks@@@stlp_std@@YA_NABV?$reverse_iterator@PAVmotion_marks@@@0@0@Z ; stlp_std::operator!=<motion_marks *>
PUBLIC	??$__destroy_range_aux@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@Vmotion_marks@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0PAVmotion_marks@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<motion_marks *>,motion_marks>
PUBLIC	??$__destroy_range@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@Vmotion_marks@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0PAVmotion_marks@@@Z ; stlp_std::__destroy_range<stlp_std::reverse_iterator<motion_marks *>,motion_marks>
PUBLIC	??$_Destroy_Range@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0@Z ; stlp_std::_Destroy_Range<stlp_std::reverse_iterator<motion_marks *> >
PUBLIC	?_M_clear@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXXZ ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_clear
PUBLIC	??_Gmotion_marks@@QAEPAXI@Z			; motion_marks::`scalar deleting destructor'
PUBLIC	??$__destroy_aux@Vmotion_marks@@@stlp_std@@YAXPAVmotion_marks@@ABU__false_type@0@@Z ; stlp_std::__destroy_aux<motion_marks>
PUBLIC	??$__destroy_range_aux@PAVmotion_marks@@V1@@stlp_std@@YAXPAVmotion_marks@@00ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<motion_marks *,motion_marks>
PUBLIC	??$__destroy_range@PAVmotion_marks@@V1@@stlp_std@@YAXPAVmotion_marks@@00@Z ; stlp_std::__destroy_range<motion_marks *,motion_marks>
PUBLIC	??$_Destroy_Range@PAVmotion_marks@@@stlp_std@@YAXPAVmotion_marks@@0@Z ; stlp_std::_Destroy_Range<motion_marks *>
PUBLIC	??$xr_alloc@Vmotion_marks@@@@YAPAVmotion_marks@@I@Z ; xr_alloc<motion_marks>
PUBLIC	?allocate@?$xalloc@Vmotion_marks@@@@QBEPAVmotion_marks@@IPBX@Z ; xalloc<motion_marks>::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@PAVmotion_marks@@V1@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEPAVmotion_marks@@I@Z ; stlp_std::priv::_STLP_alloc_proxy<motion_marks *,motion_marks,xalloc<motion_marks> >::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@PAVmotion_marks@@V1@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEPAVmotion_marks@@IAAIABU__false_type@3@@Z ; stlp_std::priv::_STLP_alloc_proxy<motion_marks *,motion_marks,xalloc<motion_marks> >::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@PAVmotion_marks@@V1@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEPAVmotion_marks@@IAAI@Z ; stlp_std::priv::_STLP_alloc_proxy<motion_marks *,motion_marks,xalloc<motion_marks> >::allocate
PUBLIC	?_Answer@?$_BothPtrType@PBVmotion_marks@@PAV1@@stlp_std@@SA?AU__true_type@2@XZ ; stlp_std::_BothPtrType<motion_marks const *,motion_marks *>::_Answer
PUBLIC	??$_Param_Construct@Vmotion_marks@@V1@@stlp_std@@YAXPAVmotion_marks@@ABV1@@Z ; stlp_std::_Param_Construct<motion_marks,motion_marks>
PUBLIC	??$__ucopy@PBVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<motion_marks const *,motion_marks *,int>
PUBLIC	??$__ucopy_ptrs@PBVmotion_marks@@PAV1@@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABU__false_type@1@@Z ; stlp_std::priv::__ucopy_ptrs<motion_marks const *,motion_marks *>
PUBLIC	??$_UseTrivialUCopy@Vmotion_marks@@V1@@stlp_std@@YA?AU?$_TrivialUCopy@Vmotion_marks@@V1@@0@PAVmotion_marks@@0@Z ; stlp_std::_UseTrivialUCopy<motion_marks,motion_marks>
PUBLIC	?_Answer@?$_TrivialUCopy@Vmotion_marks@@V1@@stlp_std@@SA?AU__false_type@2@XZ ; stlp_std::_TrivialUCopy<motion_marks,motion_marks>::_Answer
PUBLIC	??$__ucopy_aux@PBVmotion_marks@@PAV1@@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABU__true_type@1@@Z ; stlp_std::priv::__ucopy_aux<motion_marks const *,motion_marks *>
PUBLIC	??$uninitialized_copy@PBVmotion_marks@@PAV1@@stlp_std@@YAPAVmotion_marks@@PBV1@0PAV1@@Z ; stlp_std::uninitialized_copy<motion_marks const *,motion_marks *>
PUBLIC	??$_M_allocate_and_copy@PBVmotion_marks@@@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEPAVmotion_marks@@AAIPBV3@1@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_allocate_and_copy<motion_marks const *>
PUBLIC	??$__copy@PBVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__copy<motion_marks const *,motion_marks *,int>
PUBLIC	??$__copy_ptrs@PBVmotion_marks@@PAV1@@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABU__false_type@1@@Z ; stlp_std::priv::__copy_ptrs<motion_marks const *,motion_marks *>
PUBLIC	??4?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::operator=
PUBLIC	??4?$vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@stlp_std@@QAEAAV01@ABV01@@Z ; stlp_std::vector<motion_marks,xalloc<motion_marks> >::operator=
PUBLIC	??4?$xr_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@@QAEAAV0@ABV0@@Z ; xr_vector<motion_marks,xalloc<motion_marks> >::operator=
PUBLIC	??$xr_alloc@I@@YAPAII@Z				; xr_alloc<unsigned int>
PUBLIC	?allocate@?$xalloc@I@@QBEPAIIPBX@Z		; xalloc<unsigned int>::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@PAIIV?$xalloc@I@@@priv@stlp_std@@QAEPAII@Z ; stlp_std::priv::_STLP_alloc_proxy<unsigned int *,unsigned int,xalloc<unsigned int> >::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@PAIIV?$xalloc@I@@@priv@stlp_std@@AAEPAIIAAIABU__false_type@3@@Z ; stlp_std::priv::_STLP_alloc_proxy<unsigned int *,unsigned int,xalloc<unsigned int> >::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@PAIIV?$xalloc@I@@@priv@stlp_std@@QAEPAIIAAI@Z ; stlp_std::priv::_STLP_alloc_proxy<unsigned int *,unsigned int,xalloc<unsigned int> >::allocate
PUBLIC	?size@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::size
PUBLIC	?_M_clear@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEXXZ ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_clear
PUBLIC	?_M_set@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEXPAI00@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_set
PUBLIC	??$__fill_n@PAIII@priv@stlp_std@@YAPAIPAIIABI@Z	; stlp_std::priv::__fill_n<unsigned int *,unsigned int,unsigned int>
PUBLIC	?_M_insert_overflow@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEXPAIABIABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_insert_overflow
PUBLIC	??$_Copy_Construct@I@stlp_std@@YAXPAIABI@Z	; stlp_std::_Copy_Construct<unsigned int>
PUBLIC	?push_back@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEXABI@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::push_back
PUBLIC	?to_storage_type_cref@?$_CastTraits@II@priv@stlp_std@@SAABIABI@Z ; stlp_std::priv::_CastTraits<unsigned int,unsigned int>::to_storage_type_cref
PUBLIC	?push_back@?$vector@IV?$xalloc@I@@@stlp_std@@QAEXABI@Z ; stlp_std::vector<unsigned int,xalloc<unsigned int> >::push_back
PUBLIC	?begin@?$vector@IV?$xalloc@I@@@stlp_std@@QAEPAIXZ ; stlp_std::vector<unsigned int,xalloc<unsigned int> >::begin
PUBLIC	?end@?$vector@IV?$xalloc@I@@@stlp_std@@QAEPAIXZ	; stlp_std::vector<unsigned int,xalloc<unsigned int> >::end
PUBLIC	??$__copy_ptrs@PAIPAI@priv@stlp_std@@YAPAIPAI00ABU__true_type@1@@Z ; stlp_std::priv::__copy_ptrs<unsigned int *,unsigned int *>
PUBLIC	??$__destroy_range_aux@PAII@stlp_std@@YAXPAI00ABU__true_type@0@@Z ; stlp_std::__destroy_range_aux<unsigned int *,unsigned int>
PUBLIC	??$__destroy_range@PAII@stlp_std@@YAXPAI00@Z	; stlp_std::__destroy_range<unsigned int *,unsigned int>
PUBLIC	??$_Destroy_Range@PAI@stlp_std@@YAXPAI0@Z	; stlp_std::_Destroy_Range<unsigned int *>
PUBLIC	?_M_erase@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEPAIPAI0ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_erase
PUBLIC	?erase@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEPAIPAI0@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::erase
PUBLIC	?to_value_type_ptr@?$_CastTraits@II@priv@stlp_std@@SAPAIPAI@Z ; stlp_std::priv::_CastTraits<unsigned int,unsigned int>::to_value_type_ptr
PUBLIC	?to_storage_type_ptr@?$_CastTraits@II@priv@stlp_std@@SAPAIPAI@Z ; stlp_std::priv::_CastTraits<unsigned int,unsigned int>::to_storage_type_ptr
PUBLIC	?erase@?$vector@IV?$xalloc@I@@@stlp_std@@QAEPAIPAI0@Z ; stlp_std::vector<unsigned int,xalloc<unsigned int> >::erase
PUBLIC	?clear_not_free@?$xr_vector@IV?$xalloc@I@@@@QAEXXZ ; xr_vector<unsigned int,xalloc<unsigned int> >::clear_not_free
PUBLIC	?begin@?$_Impl_vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@priv@stlp_std@@QAEPAUItem@CInifile@@XZ ; stlp_std::priv::_Impl_vector<CInifile::Item,xalloc<CInifile::Item> >::begin
PUBLIC	?begin@?$vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@stlp_std@@QAEPAUItem@CInifile@@XZ ; stlp_std::vector<CInifile::Item,xalloc<CInifile::Item> >::begin
PUBLIC	?end@?$_Impl_vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@priv@stlp_std@@QAEPAUItem@CInifile@@XZ ; stlp_std::priv::_Impl_vector<CInifile::Item,xalloc<CInifile::Item> >::end
PUBLIC	?to_value_type_ptr@?$_CastTraits@UItem@CInifile@@U12@@priv@stlp_std@@SAPAUItem@CInifile@@PAU45@@Z ; stlp_std::priv::_CastTraits<CInifile::Item,CInifile::Item>::to_value_type_ptr
PUBLIC	?end@?$vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@stlp_std@@QAEPAUItem@CInifile@@XZ ; stlp_std::vector<CInifile::Item,xalloc<CInifile::Item> >::end
PUBLIC	?size@?$_Impl_vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<CInifile::Item,xalloc<CInifile::Item> >::size
PUBLIC	?size@?$vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@stlp_std@@QBEIXZ ; stlp_std::vector<CInifile::Item,xalloc<CInifile::Item> >::size
PUBLIC	?size@?$xr_vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@@QBEIXZ ; xr_vector<CInifile::Item,xalloc<CInifile::Item> >::size
PUBLIC	??0?$xalloc@I@@QAE@XZ				; xalloc<unsigned int>::xalloc<unsigned int>
PUBLIC	??0?$xalloc@I@@QAE@ABV0@@Z			; xalloc<unsigned int>::xalloc<unsigned int>
PUBLIC	??0?$_STLP_alloc_proxy@PAIIV?$xalloc@I@@@priv@stlp_std@@QAE@ABV?$xalloc@I@@PAI@Z ; stlp_std::priv::_STLP_alloc_proxy<unsigned int *,unsigned int,xalloc<unsigned int> >::_STLP_alloc_proxy<unsigned int *,unsigned int,xalloc<unsigned int> >
PUBLIC	??0?$_Vector_base@IV?$xalloc@I@@@priv@stlp_std@@QAE@ABV?$xalloc@I@@@Z ; stlp_std::priv::_Vector_base<unsigned int,xalloc<unsigned int> >::_Vector_base<unsigned int,xalloc<unsigned int> >
PUBLIC	??0?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAE@ABV?$xalloc@I@@@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_Impl_vector<unsigned int,xalloc<unsigned int> >
PUBLIC	??0?$vector@IV?$xalloc@I@@@stlp_std@@QAE@ABV?$xalloc@I@@@Z ; stlp_std::vector<unsigned int,xalloc<unsigned int> >::vector<unsigned int,xalloc<unsigned int> >
PUBLIC	??0?$xr_vector@IV?$xalloc@I@@@@QAE@XZ		; xr_vector<unsigned int,xalloc<unsigned int> >::xr_vector<unsigned int,xalloc<unsigned int> >
PUBLIC	?deallocate@?$xalloc@I@@QBEXPAII@Z		; xalloc<unsigned int>::deallocate
PUBLIC	??1?$_Vector_base@IV?$xalloc@I@@@priv@stlp_std@@QAE@XZ ; stlp_std::priv::_Vector_base<unsigned int,xalloc<unsigned int> >::~_Vector_base<unsigned int,xalloc<unsigned int> >
PUBLIC	?end@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEPAIXZ ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::end
PUBLIC	?rbegin@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAI@3@XZ ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::rbegin
PUBLIC	?begin@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEPAIXZ ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::begin
PUBLIC	??0?$reverse_iterator@PAI@stlp_std@@QAE@PAI@Z	; stlp_std::reverse_iterator<unsigned int *>::reverse_iterator<unsigned int *>
PUBLIC	?rend@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAI@3@XZ ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::rend
PUBLIC	??0?$reverse_iterator@PAI@stlp_std@@QAE@ABV01@@Z ; stlp_std::reverse_iterator<unsigned int *>::reverse_iterator<unsigned int *>
PUBLIC	??$__destroy_range_aux@V?$reverse_iterator@PAI@stlp_std@@I@stlp_std@@YAXV?$reverse_iterator@PAI@0@0PAIABU__true_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<unsigned int *>,unsigned int>
PUBLIC	??$__destroy_range@V?$reverse_iterator@PAI@stlp_std@@I@stlp_std@@YAXV?$reverse_iterator@PAI@0@0PAI@Z ; stlp_std::__destroy_range<stlp_std::reverse_iterator<unsigned int *>,unsigned int>
PUBLIC	??$_Destroy_Range@V?$reverse_iterator@PAI@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAI@0@0@Z ; stlp_std::_Destroy_Range<stlp_std::reverse_iterator<unsigned int *> >
PUBLIC	??1?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAE@XZ ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::~_Impl_vector<unsigned int,xalloc<unsigned int> >
PUBLIC	??1?$vector@IV?$xalloc@I@@@stlp_std@@QAE@XZ	; stlp_std::vector<unsigned int,xalloc<unsigned int> >::~vector<unsigned int,xalloc<unsigned int> >
PUBLIC	??1?$xr_vector@IV?$xalloc@I@@@@QAE@XZ		; xr_vector<unsigned int,xalloc<unsigned int> >::~xr_vector<unsigned int,xalloc<unsigned int> >
PUBLIC	?g_pMotionsContainer@@3PAVmotions_container@@A	; g_pMotionsContainer
PUBLIC	??_C@_0BN@HECBOIOO@?$CBthere?5is?5no?5part?5named?5?$FL?$CFs?$FN?$AA@ ; `string'
PUBLIC	??_C@_0O@CGKNLCGD@$game_meshes$?$AA@		; `string'
PUBLIC	??_C@_0P@DEDKCAFJ@partition_name?$AA@		; `string'
PUBLIC	??_C@_07PNINCJMO@part_?$CFd?$AA@		; `string'
PUBLIC	??_C@_0BE@FMNFMAHB@motions_value?3?3load?$AA@	; `string'
PUBLIC	??_C@_0DI@HJAAPJIP@D?3?2CLEARSKY?2sources?2engine?2xrEng@ ; `string'
PUBLIC	??_C@_0BJ@HPKGBJIM@Invalid?5OGF?1OMF?5version?3?$AA@ ; `string'
PUBLIC	??_C@_0BM@CILJEIME@vers?$DM?$DNxrOGF_SMParamsVersion?$AA@ ; `string'
PUBLIC	??_C@_0CM@GCPKLGHM@Old?5skinned?5model?5version?5unsupp@ ; `string'
PUBLIC	??_C@_0BI@DHGIHFMH@MS?9?$DOfind_chunk?$CIm_idx?$CL1?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0CA@EHACPEFG@?9?9?9?5motion?5container?5?9?9?9?5begin?3?$AA@ ; `string'
PUBLIC	??_C@_0BI@BMBKIPKJ@?$CD?$CF3d?3?5?$FL?$CF3d?1?$CF5d?5Kb?$FN?5?9?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0CB@GLOCMOBE@?9?9?9?5items?3?5?$CFd?0?5mem?5usage?3?5?$CFd?5Kb?5@ ; `string'
PUBLIC	??_C@_0BO@JJOELMJF@?9?9?9?5motion?5container?5?9?9?9?5end?4?$AA@ ; `string'
EXTRN	__imp___strlwr:PROC
EXTRN	__imp_?crc32@@YAIPBXI@Z:PROC
EXTRN	__imp_?advance@IReader@@QAEXH@Z:PROC
EXTRN	__imp_?r_stringZ@IReader@@QAEXPADI@Z:PROC
EXTRN	__imp_?dock@smem_container@@QAEPAUsmem_value@@IIPAX@Z:PROC
EXTRN	__imp_?g_pSharedMemoryContainer@@3PAVsmem_container@@A:DWORD
EXTRN	__imp_?r_string@IReader@@QAEXAAV?$basic_string@DV?$char_traits@D@stlp_std@@V?$xalloc@D@@@stlp_std@@@Z:PROC
EXTRN	__imp_??1Sect@CInifile@@QAE@XZ:PROC
EXTRN	__imp_??0Sect@CInifile@@QAE@ABU01@@Z:PROC
?g_pMotionsContainer@@3PAVmotions_container@@A DD 01H DUP (?) ; g_pMotionsContainer
;	COMDAT ?ignore_always@?6??load@motions_value@@QAEHPBDPAVIReader@@PAV?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@@Z@4_NA
_BSS	SEGMENT
?ignore_always@?6??load@motions_value@@QAEHPBDPAVIReader@@PAV?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@@Z@4_NA DB 01H DUP (?) ; `motions_value::load'::`7'::ignore_always
_BSS	ENDS
;	COMDAT ?ignore_always@?CI@??load@motions_value@@QAEHPBDPAVIReader@@PAV?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@@Z@4_NA
_BSS	SEGMENT
?ignore_always@?CI@??load@motions_value@@QAEHPBDPAVIReader@@PAV?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@@Z@4_NA DB 01H DUP (?) ; `motions_value::load'::`40'::ignore_always
;	COMDAT ??_C@_0BO@JJOELMJF@?9?9?9?5motion?5container?5?9?9?9?5end?4?$AA@
CONST	SEGMENT
??_C@_0BO@JJOELMJF@?9?9?9?5motion?5container?5?9?9?9?5end?4?$AA@ DB '--- '
	DB	'motion container --- end.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@GLOCMOBE@?9?9?9?5items?3?5?$CFd?0?5mem?5usage?3?5?$CFd?5Kb?5@
CONST	SEGMENT
??_C@_0CB@GLOCMOBE@?9?9?9?5items?3?5?$CFd?0?5mem?5usage?3?5?$CFd?5Kb?5@ DB '-'
	DB	'-- items: %d, mem usage: %d Kb ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BMBKIPKJ@?$CD?$CF3d?3?5?$FL?$CF3d?1?$CF5d?5Kb?$FN?5?9?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BI@BMBKIPKJ@?$CD?$CF3d?3?5?$FL?$CF3d?1?$CF5d?5Kb?$FN?5?9?5?$CFs?$AA@ DB '#'
	DB	'%3d: [%3d/%5d Kb] - %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@EHACPEFG@?9?9?9?5motion?5container?5?9?9?9?5begin?3?$AA@
CONST	SEGMENT
??_C@_0CA@EHACPEFG@?9?9?9?5motion?5container?5?9?9?9?5begin?3?$AA@ DB '--'
	DB	'- motion container --- begin:', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DHGIHFMH@MS?9?$DOfind_chunk?$CIm_idx?$CL1?$CJ?$AA@
CONST	SEGMENT
??_C@_0BI@DHGIHFMH@MS?9?$DOfind_chunk?$CIm_idx?$CL1?$CJ?$AA@ DB 'MS->find'
	DB	'_chunk(m_idx+1)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@GCPKLGHM@Old?5skinned?5model?5version?5unsupp@
CONST	SEGMENT
??_C@_0CM@GCPKLGHM@Old?5skinned?5model?5version?5unsupp@ DB 'Old skinned '
	DB	'model version unsupported! (%s)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@CILJEIME@vers?$DM?$DNxrOGF_SMParamsVersion?$AA@
CONST	SEGMENT
??_C@_0BM@CILJEIME@vers?$DM?$DNxrOGF_SMParamsVersion?$AA@ DB 'vers<=xrOGF'
	DB	'_SMParamsVersion', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HPKGBJIM@Invalid?5OGF?1OMF?5version?3?$AA@
CONST	SEGMENT
??_C@_0BJ@HPKGBJIM@Invalid?5OGF?1OMF?5version?3?$AA@ DB 'Invalid OGF/OMF '
	DB	'version:', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@HJAAPJIP@D?3?2CLEARSKY?2sources?2engine?2xrEng@
CONST	SEGMENT
??_C@_0DI@HJAAPJIP@D?3?2CLEARSKY?2sources?2engine?2xrEng@ DB 'D:\CLEARSKY'
	DB	'\sources\engine\xrEngine\SkeletonMotions.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FMNFMAHB@motions_value?3?3load?$AA@
CONST	SEGMENT
??_C@_0BE@FMNFMAHB@motions_value?3?3load?$AA@ DB 'motions_value::load', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07PNINCJMO@part_?$CFd?$AA@
CONST	SEGMENT
??_C@_07PNINCJMO@part_?$CFd?$AA@ DB 'part_%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DEDKCAFJ@partition_name?$AA@
CONST	SEGMENT
??_C@_0P@DEDKCAFJ@partition_name?$AA@ DB 'partition_name', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CGKNLCGD@$game_meshes$?$AA@
CONST	SEGMENT
??_C@_0O@CGKNLCGD@$game_meshes$?$AA@ DB '$game_meshes$', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HECBOIOO@?$CBthere?5is?5no?5part?5named?5?$FL?$CFs?$FN?$AA@
CONST	SEGMENT
??_C@_0BN@HECBOIOO@?$CBthere?5is?5no?5part?5named?5?$FL?$CFs?$FN?$AA@ DB '!'
	DB	'there is no part named [%s]', 00H		; `string'
_SAMPLE_FPS DD	041f00000r			; 30
_KEY_Quant DD	046fffe00r			; 32767
_fQuantizerRangeExt DD 03fc00000r		; 1.5
_EPS	DD	03727c5acr			; 1e-005
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
;	COMDAT ??0?$xalloc@I@@QAE@XZ
_TEXT	SEGMENT
??0?$xalloc@I@@QAE@XZ PROC				; xalloc<unsigned int>::xalloc<unsigned int>, COMDAT
; _this$ = eax

; 77   : 													xalloc			()										{	}

	ret	0
??0?$xalloc@I@@QAE@XZ ENDP				; xalloc<unsigned int>::xalloc<unsigned int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_string_base.h
_TEXT	ENDS
;	COMDAT ?_M_Finish@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IAEPADXZ
_TEXT	SEGMENT
?_M_Finish@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IAEPADXZ PROC ; stlp_std::priv::_String_base<char,xalloc<char> >::_M_Finish, COMDAT
; _this$ = eax

; 85   :   _Tp* _M_Finish() {return _M_finish;}

	mov	eax, DWORD PTR [eax+16]
	ret	0
?_M_Finish@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IAEPADXZ ENDP ; stlp_std::priv::_String_base<char,xalloc<char> >::_M_Finish
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_string.h
_TEXT	ENDS
;	COMDAT ?_M_construct_null_aux@?$basic_string@DV?$char_traits@D@stlp_std@@V?$xalloc@D@@@stlp_std@@IBEXPADABU__true_type@2@@Z
_TEXT	SEGMENT
?_M_construct_null_aux@?$basic_string@DV?$char_traits@D@stlp_std@@V?$xalloc@D@@@stlp_std@@IBEXPADABU__true_type@2@@Z PROC ; stlp_std::basic_string<char,stlp_std::char_traits<char>,xalloc<char> >::_M_construct_null_aux, COMDAT
; ___p$ = eax

; 406  :   { *__p = 0; }

	mov	BYTE PTR [eax], 0
	ret	0
?_M_construct_null_aux@?$basic_string@DV?$char_traits@D@stlp_std@@V?$xalloc@D@@@stlp_std@@IBEXPADABU__true_type@2@@Z ENDP ; stlp_std::basic_string<char,stlp_std::char_traits<char>,xalloc<char> >::_M_construct_null_aux
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_terminate_string_aux@?$basic_string@DV?$char_traits@D@stlp_std@@V?$xalloc@D@@@stlp_std@@IAEXABU__true_type@2@@Z
_TEXT	SEGMENT
?_M_terminate_string_aux@?$basic_string@DV?$char_traits@D@stlp_std@@V?$xalloc@D@@@stlp_std@@IAEXABU__true_type@2@@Z PROC ; stlp_std::basic_string<char,stlp_std::char_traits<char>,xalloc<char> >::_M_terminate_string_aux, COMDAT
; _this$ = eax

; 430  :   { _M_construct_null_aux(this->_M_Finish(), __is_integral); }

	mov	ecx, DWORD PTR [eax+16]
	mov	BYTE PTR [ecx], 0
	ret	0
?_M_terminate_string_aux@?$basic_string@DV?$char_traits@D@stlp_std@@V?$xalloc@D@@@stlp_std@@IAEXABU__true_type@2@@Z ENDP ; stlp_std::basic_string<char,stlp_std::char_traits<char>,xalloc<char> >::_M_terminate_string_aux
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_force_terminate_string@?$basic_string@DV?$char_traits@D@stlp_std@@V?$xalloc@D@@@stlp_std@@IAEXABU__false_type@2@@Z
_TEXT	SEGMENT
?_M_force_terminate_string@?$basic_string@DV?$char_traits@D@stlp_std@@V?$xalloc@D@@@stlp_std@@IAEXABU__false_type@2@@Z PROC ; stlp_std::basic_string<char,stlp_std::char_traits<char>,xalloc<char> >::_M_force_terminate_string, COMDAT
; _this$ = eax

; 435  :   { _M_terminate_string_aux(_Char_Is_Integral()); }

	mov	ecx, DWORD PTR [eax+16]
	mov	BYTE PTR [ecx], 0
	ret	0
?_M_force_terminate_string@?$basic_string@DV?$char_traits@D@stlp_std@@V?$xalloc@D@@@stlp_std@@IAEXABU__false_type@2@@Z ENDP ; stlp_std::basic_string<char,stlp_std::char_traits<char>,xalloc<char> >::_M_force_terminate_string
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_terminate_string@?$basic_string@DV?$char_traits@D@stlp_std@@V?$xalloc@D@@@stlp_std@@IAEXXZ
_TEXT	SEGMENT
?_M_terminate_string@?$basic_string@DV?$char_traits@D@stlp_std@@V?$xalloc@D@@@stlp_std@@IAEXXZ PROC ; stlp_std::basic_string<char,stlp_std::char_traits<char>,xalloc<char> >::_M_terminate_string, COMDAT
; _this$ = eax

; 438  :     typedef __false_type _Answer;
; 439  : 
; 440  :     _M_force_terminate_string(_Answer());

	mov	ecx, DWORD PTR [eax+16]
	mov	BYTE PTR [ecx], 0

; 441  :   }

	ret	0
?_M_terminate_string@?$basic_string@DV?$char_traits@D@stlp_std@@V?$xalloc@D@@@stlp_std@@IAEXXZ ENDP ; stlp_std::basic_string<char,stlp_std::char_traits<char>,xalloc<char> >::_M_terminate_string
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xalloc@D@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xalloc@D@@QAE@ABV0@@Z PROC				; xalloc<char>::xalloc<char>, COMDAT
; _this$ = eax

; 78   : 													xalloc			(const xalloc<T>&)						{	}

	ret	0
??0?$xalloc@D@@QAE@ABV0@@Z ENDP				; xalloc<char>::xalloc<char>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_alloc.h
_TEXT	ENDS
;	COMDAT ??0?$_STLP_alloc_proxy@PADDV?$xalloc@D@@@priv@stlp_std@@QAE@ABV?$xalloc@D@@PAD@Z
_TEXT	SEGMENT
??0?$_STLP_alloc_proxy@PADDV?$xalloc@D@@@priv@stlp_std@@QAE@ABV?$xalloc@D@@PAD@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<char *,char,xalloc<char> >::_STLP_alloc_proxy<char *,char,xalloc<char> >, COMDAT
; _this$ = eax
; ___p$ = ecx

; 571  :     _MaybeReboundAlloc(__a), _M_data(__p) {}

	mov	DWORD PTR [eax], ecx
	ret	0
??0?$_STLP_alloc_proxy@PADDV?$xalloc@D@@@priv@stlp_std@@QAE@ABV?$xalloc@D@@PAD@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<char *,char,xalloc<char> >::_STLP_alloc_proxy<char *,char,xalloc<char> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xalloc@D@@QAE@XZ
_TEXT	SEGMENT
??0?$xalloc@D@@QAE@XZ PROC				; xalloc<char>::xalloc<char>, COMDAT
; _this$ = eax

; 77   : 													xalloc			()										{	}

	ret	0
??0?$xalloc@D@@QAE@XZ ENDP				; xalloc<char>::xalloc<char>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_string_base.h
_TEXT	ENDS
;	COMDAT ?_M_using_static_buf@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IBE_NXZ
_TEXT	SEGMENT
?_M_using_static_buf@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IBE_NXZ PROC ; stlp_std::priv::_String_base<char,xalloc<char> >::_M_using_static_buf, COMDAT
; _this$ = eax

; 68   :     return (_M_end_of_storage._M_data == _M_buffers._M_static_buf + _DEFAULT_SIZE);

	lea	ecx, DWORD PTR [eax+16]
	xor	edx, edx
	cmp	DWORD PTR [eax+20], ecx
	sete	dl
	mov	al, dl

; 69   :   }

	ret	0
?_M_using_static_buf@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IBE_NXZ ENDP ; stlp_std::priv::_String_base<char,xalloc<char> >::_M_using_static_buf
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_Start@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IBEPBDXZ
_TEXT	SEGMENT
?_M_Start@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IBEPBDXZ PROC ; stlp_std::priv::_String_base<char,xalloc<char> >::_M_Start, COMDAT
; _this$ = eax

; 71   :     return _M_using_static_buf()?_M_buffers._M_static_buf:_M_buffers._M_dynamic_buf;

	lea	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [eax+20], ecx
	je	SHORT $LN4@M_Start
	mov	eax, DWORD PTR [eax]
$LN4@M_Start:

; 72   :   }

	ret	0
?_M_Start@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IBEPBDXZ ENDP ; stlp_std::priv::_String_base<char,xalloc<char> >::_M_Start
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_string.h
_TEXT	ENDS
;	COMDAT ?c_str@?$basic_string@DV?$char_traits@D@stlp_std@@V?$xalloc@D@@@stlp_std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DV?$char_traits@D@stlp_std@@V?$xalloc@D@@@stlp_std@@QBEPBDXZ PROC ; stlp_std::basic_string<char,stlp_std::char_traits<char>,xalloc<char> >::c_str, COMDAT
; _this$ = eax

; 1172 :   const _CharT* c_str() const { return this->_M_Start(); }

	lea	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [eax+20], ecx
	je	SHORT $LN6@c_str
	mov	eax, DWORD PTR [eax]
$LN6@c_str:
	ret	0
?c_str@?$basic_string@DV?$char_traits@D@stlp_std@@V?$xalloc@D@@@stlp_std@@QBEPBDXZ ENDP ; stlp_std::basic_string<char,stlp_std::char_traits<char>,xalloc<char> >::c_str
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_tools.h
_TEXT	ENDS
;	COMDAT ?to_value_type_ptr@?$_CastTraits@II@priv@stlp_std@@SAPAIPAI@Z
_TEXT	SEGMENT
?to_value_type_ptr@?$_CastTraits@II@priv@stlp_std@@SAPAIPAI@Z PROC ; stlp_std::priv::_CastTraits<unsigned int,unsigned int>::to_value_type_ptr, COMDAT
; ___ptr$ = eax

; 237  :   { return __ptr; }

	ret	0
?to_value_type_ptr@?$_CastTraits@II@priv@stlp_std@@SAPAIPAI@Z ENDP ; stlp_std::priv::_CastTraits<unsigned int,unsigned int>::to_value_type_ptr
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?end@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEPAIXZ
_TEXT	SEGMENT
?end@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEPAIXZ PROC ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::end, COMDAT
; _this$ = eax

; 172  :   iterator end()               { return this->_M_finish; }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?end@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEPAIXZ ENDP ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEPAIXZ
_TEXT	SEGMENT
?begin@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEPAIXZ PROC ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::begin, COMDAT
; _this$ = eax

; 170  :   iterator begin()             { return this->_M_start; }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEPAIXZ ENDP ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::begin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xalloc@I@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xalloc@I@@QAE@ABV0@@Z PROC				; xalloc<unsigned int>::xalloc<unsigned int>, COMDAT
; _this$ = eax

; 78   : 													xalloc			(const xalloc<T>&)						{	}

	ret	0
??0?$xalloc@I@@QAE@ABV0@@Z ENDP				; xalloc<unsigned int>::xalloc<unsigned int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_alloc.h
_TEXT	ENDS
;	COMDAT ??0?$_STLP_alloc_proxy@PAIIV?$xalloc@I@@@priv@stlp_std@@QAE@ABV?$xalloc@I@@PAI@Z
_TEXT	SEGMENT
??0?$_STLP_alloc_proxy@PAIIV?$xalloc@I@@@priv@stlp_std@@QAE@ABV?$xalloc@I@@PAI@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<unsigned int *,unsigned int,xalloc<unsigned int> >::_STLP_alloc_proxy<unsigned int *,unsigned int,xalloc<unsigned int> >, COMDAT
; _this$ = eax

; 571  :     _MaybeReboundAlloc(__a), _M_data(__p) {}

	mov	DWORD PTR [eax], 0
	ret	0
??0?$_STLP_alloc_proxy@PAIIV?$xalloc@I@@@priv@stlp_std@@QAE@ABV?$xalloc@I@@PAI@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<unsigned int *,unsigned int,xalloc<unsigned int> >::_STLP_alloc_proxy<unsigned int *,unsigned int,xalloc<unsigned int> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_iterator.h
_TEXT	ENDS
;	COMDAT ??0?$reverse_iterator@PAI@stlp_std@@QAE@PAI@Z
_TEXT	SEGMENT
??0?$reverse_iterator@PAI@stlp_std@@QAE@PAI@Z PROC	; stlp_std::reverse_iterator<unsigned int *>::reverse_iterator<unsigned int *>, COMDAT
; _this$ = eax
; ___x$ = ecx

; 65   :   explicit reverse_iterator(iterator_type __x) : current(__x) {}

	mov	DWORD PTR [eax], ecx
	ret	0
??0?$reverse_iterator@PAI@stlp_std@@QAE@PAI@Z ENDP	; stlp_std::reverse_iterator<unsigned int *>::reverse_iterator<unsigned int *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?rbegin@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAI@3@XZ
_TEXT	SEGMENT
?rbegin@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAI@3@XZ PROC ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::rbegin, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 175  :   reverse_iterator rbegin()              { return reverse_iterator(end()); }

	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
	ret	0
?rbegin@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAI@3@XZ ENDP ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::rbegin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_iterator.h
_TEXT	ENDS
;	COMDAT ?base@?$reverse_iterator@PAVCMotion@@@stlp_std@@QBEPAVCMotion@@XZ
_TEXT	SEGMENT
?base@?$reverse_iterator@PAVCMotion@@@stlp_std@@QBEPAVCMotion@@XZ PROC ; stlp_std::reverse_iterator<CMotion *>::base, COMDAT
; _this$ = eax

; 75   :   iterator_type base() const { return current; }

	mov	eax, DWORD PTR [eax]
	ret	0
?base@?$reverse_iterator@PAVCMotion@@@stlp_std@@QBEPAVCMotion@@XZ ENDP ; stlp_std::reverse_iterator<CMotion *>::base
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$?8PAVCMotion@@@stlp_std@@YA_NABV?$reverse_iterator@PAVCMotion@@@0@0@Z
_TEXT	SEGMENT
??$?8PAVCMotion@@@stlp_std@@YA_NABV?$reverse_iterator@PAVCMotion@@@0@0@Z PROC ; stlp_std::operator==<CMotion *>, COMDAT
; ___x$ = eax
; ___y$ = edx

; 116  : { return __x.base() == __y.base(); }

	mov	ecx, DWORD PTR [eax]
	xor	eax, eax
	cmp	ecx, DWORD PTR [edx]
	sete	al
	ret	0
??$?8PAVCMotion@@@stlp_std@@YA_NABV?$reverse_iterator@PAVCMotion@@@0@0@Z ENDP ; stlp_std::operator==<CMotion *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?base@?$reverse_iterator@PAVCMotionDef@@@stlp_std@@QBEPAVCMotionDef@@XZ
_TEXT	SEGMENT
?base@?$reverse_iterator@PAVCMotionDef@@@stlp_std@@QBEPAVCMotionDef@@XZ PROC ; stlp_std::reverse_iterator<CMotionDef *>::base, COMDAT
; _this$ = eax

; 75   :   iterator_type base() const { return current; }

	mov	eax, DWORD PTR [eax]
	ret	0
?base@?$reverse_iterator@PAVCMotionDef@@@stlp_std@@QBEPAVCMotionDef@@XZ ENDP ; stlp_std::reverse_iterator<CMotionDef *>::base
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?base@?$reverse_iterator@PAVmotion_marks@@@stlp_std@@QBEPAVmotion_marks@@XZ
_TEXT	SEGMENT
?base@?$reverse_iterator@PAVmotion_marks@@@stlp_std@@QBEPAVmotion_marks@@XZ PROC ; stlp_std::reverse_iterator<motion_marks *>::base, COMDAT
; _this$ = eax

; 75   :   iterator_type base() const { return current; }

	mov	eax, DWORD PTR [eax]
	ret	0
?base@?$reverse_iterator@PAVmotion_marks@@@stlp_std@@QBEPAVmotion_marks@@XZ ENDP ; stlp_std::reverse_iterator<motion_marks *>::base
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$?9PAVCMotion@@@stlp_std@@YA_NABV?$reverse_iterator@PAVCMotion@@@0@0@Z
_TEXT	SEGMENT
??$?9PAVCMotion@@@stlp_std@@YA_NABV?$reverse_iterator@PAVCMotion@@@0@0@Z PROC ; stlp_std::operator!=<CMotion *>, COMDAT
; ___x$ = eax
; ___y$ = edx

; 127  : { return !(__x == __y); }

	mov	ecx, DWORD PTR [eax]
	xor	eax, eax
	cmp	ecx, DWORD PTR [edx]
	setne	al
	ret	0
??$?9PAVCMotion@@@stlp_std@@YA_NABV?$reverse_iterator@PAVCMotion@@@0@0@Z ENDP ; stlp_std::operator!=<CMotion *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$?8PAVCMotionDef@@@stlp_std@@YA_NABV?$reverse_iterator@PAVCMotionDef@@@0@0@Z
_TEXT	SEGMENT
??$?8PAVCMotionDef@@@stlp_std@@YA_NABV?$reverse_iterator@PAVCMotionDef@@@0@0@Z PROC ; stlp_std::operator==<CMotionDef *>, COMDAT
; ___x$ = eax
; ___y$ = edx

; 116  : { return __x.base() == __y.base(); }

	mov	ecx, DWORD PTR [eax]
	xor	eax, eax
	cmp	ecx, DWORD PTR [edx]
	sete	al
	ret	0
??$?8PAVCMotionDef@@@stlp_std@@YA_NABV?$reverse_iterator@PAVCMotionDef@@@0@0@Z ENDP ; stlp_std::operator==<CMotionDef *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$?8PAVmotion_marks@@@stlp_std@@YA_NABV?$reverse_iterator@PAVmotion_marks@@@0@0@Z
_TEXT	SEGMENT
??$?8PAVmotion_marks@@@stlp_std@@YA_NABV?$reverse_iterator@PAVmotion_marks@@@0@0@Z PROC ; stlp_std::operator==<motion_marks *>, COMDAT
; ___x$ = eax
; ___y$ = edx

; 116  : { return __x.base() == __y.base(); }

	mov	ecx, DWORD PTR [eax]
	xor	eax, eax
	cmp	ecx, DWORD PTR [edx]
	sete	al
	ret	0
??$?8PAVmotion_marks@@@stlp_std@@YA_NABV?$reverse_iterator@PAVmotion_marks@@@0@0@Z ENDP ; stlp_std::operator==<motion_marks *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\type_traits.h
_TEXT	ENDS
;	COMDAT ??$_UseTrivialUCopy@II@stlp_std@@YA?AU?$_TrivialUCopy@II@0@PAI0@Z
_TEXT	SEGMENT
??$_UseTrivialUCopy@II@stlp_std@@YA?AU?$_TrivialUCopy@II@0@PAI0@Z PROC ; stlp_std::_UseTrivialUCopy<unsigned int,unsigned int>, COMDAT

; 489  : { return _TrivialUCopy<_Src, _Dst>(); }

	xor	al, al
	ret	0
??$_UseTrivialUCopy@II@stlp_std@@YA?AU?$_TrivialUCopy@II@0@PAI0@Z ENDP ; stlp_std::_UseTrivialUCopy<unsigned int,unsigned int>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_UseTrivialUCopy@VCMotionDef@@V1@@stlp_std@@YA?AU?$_TrivialUCopy@VCMotionDef@@V1@@0@PAVCMotionDef@@0@Z
_TEXT	SEGMENT
??$_UseTrivialUCopy@VCMotionDef@@V1@@stlp_std@@YA?AU?$_TrivialUCopy@VCMotionDef@@V1@@0@PAVCMotionDef@@0@Z PROC ; stlp_std::_UseTrivialUCopy<CMotionDef,CMotionDef>, COMDAT

; 489  : { return _TrivialUCopy<_Src, _Dst>(); }

	xor	al, al
	ret	0
??$_UseTrivialUCopy@VCMotionDef@@V1@@stlp_std@@YA?AU?$_TrivialUCopy@VCMotionDef@@V1@@0@PAVCMotionDef@@0@Z ENDP ; stlp_std::_UseTrivialUCopy<CMotionDef,CMotionDef>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_UseTrivialUCopy@Vmotion_marks@@V1@@stlp_std@@YA?AU?$_TrivialUCopy@Vmotion_marks@@V1@@0@PAVmotion_marks@@0@Z
_TEXT	SEGMENT
??$_UseTrivialUCopy@Vmotion_marks@@V1@@stlp_std@@YA?AU?$_TrivialUCopy@Vmotion_marks@@V1@@0@PAVmotion_marks@@0@Z PROC ; stlp_std::_UseTrivialUCopy<motion_marks,motion_marks>, COMDAT

; 489  : { return _TrivialUCopy<_Src, _Dst>(); }

	xor	al, al
	ret	0
??$_UseTrivialUCopy@Vmotion_marks@@V1@@stlp_std@@YA?AU?$_TrivialUCopy@Vmotion_marks@@V1@@0@PAVmotion_marks@@0@Z ENDP ; stlp_std::_UseTrivialUCopy<motion_marks,motion_marks>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_UseTrivialUCopy@U?$pair@MM@stlp_std@@U12@@stlp_std@@YA?AU?$_TrivialUCopy@U?$pair@MM@stlp_std@@U12@@0@PAU?$pair@MM@0@0@Z
_TEXT	SEGMENT
??$_UseTrivialUCopy@U?$pair@MM@stlp_std@@U12@@stlp_std@@YA?AU?$_TrivialUCopy@U?$pair@MM@stlp_std@@U12@@0@PAU?$pair@MM@0@0@Z PROC ; stlp_std::_UseTrivialUCopy<stlp_std::pair<float,float>,stlp_std::pair<float,float> >, COMDAT

; 489  : { return _TrivialUCopy<_Src, _Dst>(); }

	xor	al, al
	ret	0
??$_UseTrivialUCopy@U?$pair@MM@stlp_std@@U12@@stlp_std@@YA?AU?$_TrivialUCopy@U?$pair@MM@stlp_std@@U12@@0@PAU?$pair@MM@0@0@Z ENDP ; stlp_std::_UseTrivialUCopy<stlp_std::pair<float,float>,stlp_std::pair<float,float> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Answer@?$_TrivialUCopy@II@stlp_std@@SA?AU__true_type@2@XZ
_TEXT	SEGMENT
?_Answer@?$_TrivialUCopy@II@stlp_std@@SA?AU__true_type@2@XZ PROC ; stlp_std::_TrivialUCopy<unsigned int,unsigned int>::_Answer, COMDAT

; 407  :   static _Ret _Answer() { return _Ret(); }

	xor	al, al
	ret	0
?_Answer@?$_TrivialUCopy@II@stlp_std@@SA?AU__true_type@2@XZ ENDP ; stlp_std::_TrivialUCopy<unsigned int,unsigned int>::_Answer
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Answer@?$_TrivialUCopy@VCMotionDef@@V1@@stlp_std@@SA?AU__false_type@2@XZ
_TEXT	SEGMENT
?_Answer@?$_TrivialUCopy@VCMotionDef@@V1@@stlp_std@@SA?AU__false_type@2@XZ PROC ; stlp_std::_TrivialUCopy<CMotionDef,CMotionDef>::_Answer, COMDAT

; 407  :   static _Ret _Answer() { return _Ret(); }

	xor	al, al
	ret	0
?_Answer@?$_TrivialUCopy@VCMotionDef@@V1@@stlp_std@@SA?AU__false_type@2@XZ ENDP ; stlp_std::_TrivialUCopy<CMotionDef,CMotionDef>::_Answer
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Answer@?$_TrivialUCopy@Vmotion_marks@@V1@@stlp_std@@SA?AU__false_type@2@XZ
_TEXT	SEGMENT
?_Answer@?$_TrivialUCopy@Vmotion_marks@@V1@@stlp_std@@SA?AU__false_type@2@XZ PROC ; stlp_std::_TrivialUCopy<motion_marks,motion_marks>::_Answer, COMDAT

; 407  :   static _Ret _Answer() { return _Ret(); }

	xor	al, al
	ret	0
?_Answer@?$_TrivialUCopy@Vmotion_marks@@V1@@stlp_std@@SA?AU__false_type@2@XZ ENDP ; stlp_std::_TrivialUCopy<motion_marks,motion_marks>::_Answer
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Answer@?$_TrivialUCopy@U?$pair@MM@stlp_std@@U12@@stlp_std@@SA?AU__true_type@2@XZ
_TEXT	SEGMENT
?_Answer@?$_TrivialUCopy@U?$pair@MM@stlp_std@@U12@@stlp_std@@SA?AU__true_type@2@XZ PROC ; stlp_std::_TrivialUCopy<stlp_std::pair<float,float>,stlp_std::pair<float,float> >::_Answer, COMDAT

; 407  :   static _Ret _Answer() { return _Ret(); }

	xor	al, al
	ret	0
?_Answer@?$_TrivialUCopy@U?$pair@MM@stlp_std@@U12@@stlp_std@@SA?AU__true_type@2@XZ ENDP ; stlp_std::_TrivialUCopy<stlp_std::pair<float,float>,stlp_std::pair<float,float> >::_Answer
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_iterator.h
_TEXT	ENDS
;	COMDAT ??E?$reverse_iterator@PAVCMotion@@@stlp_std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$reverse_iterator@PAVCMotion@@@stlp_std@@QAEAAV01@XZ PROC ; stlp_std::reverse_iterator<CMotion *>::operator++, COMDAT
; _this$ = eax

; 82   :     --current;

	add	DWORD PTR [eax], -40			; ffffffd8H

; 83   :     return *this;
; 84   :   }

	ret	0
??E?$reverse_iterator@PAVCMotion@@@stlp_std@@QAEAAV01@XZ ENDP ; stlp_std::reverse_iterator<CMotion *>::operator++
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??D?$reverse_iterator@PAVCMotion@@@stlp_std@@QBEAAVCMotion@@XZ
_TEXT	SEGMENT
??D?$reverse_iterator@PAVCMotion@@@stlp_std@@QBEAAVCMotion@@XZ PROC ; stlp_std::reverse_iterator<CMotion *>::operator*, COMDAT
; _this$ = eax

; 77   :     _Iterator __tmp = current;
; 78   :     return *--__tmp;

	mov	eax, DWORD PTR [eax]
	sub	eax, 40					; 00000028H

; 79   :   }

	ret	0
??D?$reverse_iterator@PAVCMotion@@@stlp_std@@QBEAAVCMotion@@XZ ENDP ; stlp_std::reverse_iterator<CMotion *>::operator*
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$?9PAVCMotionDef@@@stlp_std@@YA_NABV?$reverse_iterator@PAVCMotionDef@@@0@0@Z
_TEXT	SEGMENT
??$?9PAVCMotionDef@@@stlp_std@@YA_NABV?$reverse_iterator@PAVCMotionDef@@@0@0@Z PROC ; stlp_std::operator!=<CMotionDef *>, COMDAT
; ___x$ = eax
; ___y$ = edx

; 127  : { return !(__x == __y); }

	mov	ecx, DWORD PTR [eax]
	xor	eax, eax
	cmp	ecx, DWORD PTR [edx]
	setne	al
	ret	0
??$?9PAVCMotionDef@@@stlp_std@@YA_NABV?$reverse_iterator@PAVCMotionDef@@@0@0@Z ENDP ; stlp_std::operator!=<CMotionDef *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$?9PAVmotion_marks@@@stlp_std@@YA_NABV?$reverse_iterator@PAVmotion_marks@@@0@0@Z
_TEXT	SEGMENT
??$?9PAVmotion_marks@@@stlp_std@@YA_NABV?$reverse_iterator@PAVmotion_marks@@@0@0@Z PROC ; stlp_std::operator!=<motion_marks *>, COMDAT
; ___x$ = eax
; ___y$ = edx

; 127  : { return !(__x == __y); }

	mov	ecx, DWORD PTR [eax]
	xor	eax, eax
	cmp	ecx, DWORD PTR [edx]
	setne	al
	ret	0
??$?9PAVmotion_marks@@@stlp_std@@YA_NABV?$reverse_iterator@PAVmotion_marks@@@0@0@Z ENDP ; stlp_std::operator!=<motion_marks *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\type_traits.h
_TEXT	ENDS
;	COMDAT ?_Answer@?$_BothPtrType@PBIPAI@stlp_std@@SA?AU__true_type@2@XZ
_TEXT	SEGMENT
?_Answer@?$_BothPtrType@PBIPAI@stlp_std@@SA?AU__true_type@2@XZ PROC ; stlp_std::_BothPtrType<unsigned int const *,unsigned int *>::_Answer, COMDAT

; 468  :   static _Ret _Answer() { return _Ret(); }

	xor	al, al
	ret	0
?_Answer@?$_BothPtrType@PBIPAI@stlp_std@@SA?AU__true_type@2@XZ ENDP ; stlp_std::_BothPtrType<unsigned int const *,unsigned int *>::_Answer
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Answer@?$_BothPtrType@PBVCMotionDef@@PAV1@@stlp_std@@SA?AU__true_type@2@XZ
_TEXT	SEGMENT
?_Answer@?$_BothPtrType@PBVCMotionDef@@PAV1@@stlp_std@@SA?AU__true_type@2@XZ PROC ; stlp_std::_BothPtrType<CMotionDef const *,CMotionDef *>::_Answer, COMDAT

; 468  :   static _Ret _Answer() { return _Ret(); }

	xor	al, al
	ret	0
?_Answer@?$_BothPtrType@PBVCMotionDef@@PAV1@@stlp_std@@SA?AU__true_type@2@XZ ENDP ; stlp_std::_BothPtrType<CMotionDef const *,CMotionDef *>::_Answer
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Answer@?$_BothPtrType@PBVmotion_marks@@PAV1@@stlp_std@@SA?AU__true_type@2@XZ
_TEXT	SEGMENT
?_Answer@?$_BothPtrType@PBVmotion_marks@@PAV1@@stlp_std@@SA?AU__true_type@2@XZ PROC ; stlp_std::_BothPtrType<motion_marks const *,motion_marks *>::_Answer, COMDAT

; 468  :   static _Ret _Answer() { return _Ret(); }

	xor	al, al
	ret	0
?_Answer@?$_BothPtrType@PBVmotion_marks@@PAV1@@stlp_std@@SA?AU__true_type@2@XZ ENDP ; stlp_std::_BothPtrType<motion_marks const *,motion_marks *>::_Answer
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Answer@?$_BothPtrType@PBU?$pair@MM@stlp_std@@PAU12@@stlp_std@@SA?AU__true_type@2@XZ
_TEXT	SEGMENT
?_Answer@?$_BothPtrType@PBU?$pair@MM@stlp_std@@PAU12@@stlp_std@@SA?AU__true_type@2@XZ PROC ; stlp_std::_BothPtrType<stlp_std::pair<float,float> const *,stlp_std::pair<float,float> *>::_Answer, COMDAT

; 468  :   static _Ret _Answer() { return _Ret(); }

	xor	al, al
	ret	0
?_Answer@?$_BothPtrType@PBU?$pair@MM@stlp_std@@PAU12@@stlp_std@@SA?AU__true_type@2@XZ ENDP ; stlp_std::_BothPtrType<stlp_std::pair<float,float> const *,stlp_std::pair<float,float> *>::_Answer
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_iterator.h
_TEXT	ENDS
;	COMDAT ??E?$reverse_iterator@PAVCMotionDef@@@stlp_std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$reverse_iterator@PAVCMotionDef@@@stlp_std@@QAEAAV01@XZ PROC ; stlp_std::reverse_iterator<CMotionDef *>::operator++, COMDAT
; _this$ = eax

; 82   :     --current;

	add	DWORD PTR [eax], -28			; ffffffe4H

; 83   :     return *this;
; 84   :   }

	ret	0
??E?$reverse_iterator@PAVCMotionDef@@@stlp_std@@QAEAAV01@XZ ENDP ; stlp_std::reverse_iterator<CMotionDef *>::operator++
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??D?$reverse_iterator@PAVCMotionDef@@@stlp_std@@QBEAAVCMotionDef@@XZ
_TEXT	SEGMENT
??D?$reverse_iterator@PAVCMotionDef@@@stlp_std@@QBEAAVCMotionDef@@XZ PROC ; stlp_std::reverse_iterator<CMotionDef *>::operator*, COMDAT
; _this$ = eax

; 77   :     _Iterator __tmp = current;
; 78   :     return *--__tmp;

	mov	eax, DWORD PTR [eax]
	sub	eax, 28					; 0000001cH

; 79   :   }

	ret	0
??D?$reverse_iterator@PAVCMotionDef@@@stlp_std@@QBEAAVCMotionDef@@XZ ENDP ; stlp_std::reverse_iterator<CMotionDef *>::operator*
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??E?$reverse_iterator@PAVmotion_marks@@@stlp_std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$reverse_iterator@PAVmotion_marks@@@stlp_std@@QAEAAV01@XZ PROC ; stlp_std::reverse_iterator<motion_marks *>::operator++, COMDAT
; _this$ = eax

; 82   :     --current;

	add	DWORD PTR [eax], -16			; fffffff0H

; 83   :     return *this;
; 84   :   }

	ret	0
??E?$reverse_iterator@PAVmotion_marks@@@stlp_std@@QAEAAV01@XZ ENDP ; stlp_std::reverse_iterator<motion_marks *>::operator++
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??D?$reverse_iterator@PAVmotion_marks@@@stlp_std@@QBEAAVmotion_marks@@XZ
_TEXT	SEGMENT
??D?$reverse_iterator@PAVmotion_marks@@@stlp_std@@QBEAAVmotion_marks@@XZ PROC ; stlp_std::reverse_iterator<motion_marks *>::operator*, COMDAT
; _this$ = eax

; 77   :     _Iterator __tmp = current;
; 78   :     return *--__tmp;

	mov	eax, DWORD PTR [eax]
	sub	eax, 16					; 00000010H

; 79   :   }

	ret	0
??D?$reverse_iterator@PAVmotion_marks@@@stlp_std@@QBEAAVmotion_marks@@XZ ENDP ; stlp_std::reverse_iterator<motion_marks *>::operator*
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$__destroy_range_aux@PAU?$pair@MM@stlp_std@@U12@@stlp_std@@YAXPAU?$pair@MM@0@00ABU__true_type@0@@Z
_TEXT	SEGMENT
??$__destroy_range_aux@PAU?$pair@MM@stlp_std@@U12@@stlp_std@@YAXPAU?$pair@MM@0@00ABU__true_type@0@@Z PROC ; stlp_std::__destroy_range_aux<stlp_std::pair<float,float> *,stlp_std::pair<float,float> >, COMDAT

; 169  : __destroy_range_aux(_ForwardIterator, _ForwardIterator, _Tp*, const __true_type& /*_Trivial_destructor*/) {}

	ret	0
??$__destroy_range_aux@PAU?$pair@MM@stlp_std@@U12@@stlp_std@@YAXPAU?$pair@MM@0@00ABU__true_type@0@@Z ENDP ; stlp_std::__destroy_range_aux<stlp_std::pair<float,float> *,stlp_std::pair<float,float> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__destroy_range_aux@PAII@stlp_std@@YAXPAI00ABU__true_type@0@@Z
_TEXT	SEGMENT
??$__destroy_range_aux@PAII@stlp_std@@YAXPAI00ABU__true_type@0@@Z PROC ; stlp_std::__destroy_range_aux<unsigned int *,unsigned int>, COMDAT

; 169  : __destroy_range_aux(_ForwardIterator, _ForwardIterator, _Tp*, const __true_type& /*_Trivial_destructor*/) {}

	ret	0
??$__destroy_range_aux@PAII@stlp_std@@YAXPAI00ABU__true_type@0@@Z ENDP ; stlp_std::__destroy_range_aux<unsigned int *,unsigned int>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__destroy_range_aux@V?$reverse_iterator@PAU?$pair@MM@stlp_std@@@stlp_std@@U?$pair@MM@2@@stlp_std@@YAXV?$reverse_iterator@PAU?$pair@MM@stlp_std@@@0@0PAU?$pair@MM@0@ABU__true_type@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$__destroy_range_aux@V?$reverse_iterator@PAU?$pair@MM@stlp_std@@@stlp_std@@U?$pair@MM@2@@stlp_std@@YAXV?$reverse_iterator@PAU?$pair@MM@stlp_std@@@0@0PAU?$pair@MM@0@ABU__true_type@0@@Z PROC ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<stlp_std::pair<float,float> *>,stlp_std::pair<float,float> >, COMDAT

; 169  : __destroy_range_aux(_ForwardIterator, _ForwardIterator, _Tp*, const __true_type& /*_Trivial_destructor*/) {}

	ret	0
??$__destroy_range_aux@V?$reverse_iterator@PAU?$pair@MM@stlp_std@@@stlp_std@@U?$pair@MM@2@@stlp_std@@YAXV?$reverse_iterator@PAU?$pair@MM@stlp_std@@@0@0PAU?$pair@MM@0@ABU__true_type@0@@Z ENDP ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<stlp_std::pair<float,float> *>,stlp_std::pair<float,float> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$fill@PAII@stlp_std@@YAXPAI0ABI@Z
_TEXT	SEGMENT
??$fill@PAII@stlp_std@@YAXPAI0ABI@Z PROC		; stlp_std::fill<unsigned int *,unsigned int>, COMDAT
; ___first$ = eax
; ___last$ = ecx
; ___val$ = edx

; 393  :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__first, __last))
; 394  :   for ( ; __first != __last; ++__first)

	cmp	eax, ecx
	je	SHORT $LN1@fill
	push	esi
$LL3@fill:

; 395  :     *__first = __val;

	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [eax], esi
	add	eax, 4
	cmp	eax, ecx
	jne	SHORT $LL3@fill
	pop	esi
$LN1@fill:

; 396  : }

	ret	0
??$fill@PAII@stlp_std@@YAXPAI0ABI@Z ENDP		; stlp_std::fill<unsigned int *,unsigned int>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$fill@PAU?$pair@MM@stlp_std@@U12@@stlp_std@@YAXPAU?$pair@MM@0@0ABU10@@Z
_TEXT	SEGMENT
??$fill@PAU?$pair@MM@stlp_std@@U12@@stlp_std@@YAXPAU?$pair@MM@0@0ABU10@@Z PROC ; stlp_std::fill<stlp_std::pair<float,float> *,stlp_std::pair<float,float> >, COMDAT
; ___first$ = eax
; ___last$ = edx
; ___val$ = ecx

; 393  :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__first, __last))
; 394  :   for ( ; __first != __last; ++__first)

	cmp	eax, edx
	je	SHORT $LN1@fill@2
	push	esi
$LL3@fill@2:

; 395  :     *__first = __val;

	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	add	eax, 8
	cmp	eax, edx
	jne	SHORT $LL3@fill@2
	pop	esi
$LN1@fill@2:

; 396  : }

	ret	0
??$fill@PAU?$pair@MM@stlp_std@@U12@@stlp_std@@YAXPAU?$pair@MM@0@0ABU10@@Z ENDP ; stlp_std::fill<stlp_std::pair<float,float> *,stlp_std::pair<float,float> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__fill_n@PAU?$pair@MM@stlp_std@@IU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PAU21@IABU21@@Z
_TEXT	SEGMENT
??$__fill_n@PAU?$pair@MM@stlp_std@@IU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PAU21@IABU21@@Z PROC ; stlp_std::priv::__fill_n<stlp_std::pair<float,float> *,unsigned int,stlp_std::pair<float,float> >, COMDAT
; ___first$ = eax
; ___n$ = ecx
; ___val$ = edx

; 403  :   _STLP_FIX_LITERAL_BUG(__first)
; 404  :   for ( ; __n > 0; --__n, ++__first)

	test	ecx, ecx
	jbe	SHORT $LN1@fill_n
	push	esi
$LL3@fill_n:

; 405  :     *__first = __val;

	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], esi
	sub	ecx, 1
	add	eax, 8
	test	ecx, ecx
	ja	SHORT $LL3@fill_n
	pop	esi
$LN1@fill_n:

; 406  :   return __first;
; 407  : }

	ret	0
??$__fill_n@PAU?$pair@MM@stlp_std@@IU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PAU21@IABU21@@Z ENDP ; stlp_std::priv::__fill_n<stlp_std::pair<float,float> *,unsigned int,stlp_std::pair<float,float> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_function_base.h
_TEXT	ENDS
;	COMDAT ??R?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@QBEABVshared_str@@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@2@@Z
_TEXT	SEGMENT
??R?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@QBEABVshared_str@@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@2@@Z PROC ; stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >::operator(), COMDAT
; ___x$ = eax

; 133  :     return __x.first;
; 134  :   }

	ret	0
??R?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@QBEABVshared_str@@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@2@@Z ENDP ; stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >::operator()
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_iterator.h
_TEXT	ENDS
;	COMDAT ??0?$reverse_iterator@PAVCMotion@@@stlp_std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$reverse_iterator@PAVCMotion@@@stlp_std@@QAE@ABV01@@Z PROC ; stlp_std::reverse_iterator<CMotion *>::reverse_iterator<CMotion *>, COMDAT
; _this$ = eax
; ___x$ = ecx

; 66   :   reverse_iterator(const _Self& __x) : current(__x.current) {}

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	ret	0
??0?$reverse_iterator@PAVCMotion@@@stlp_std@@QAE@ABV01@@Z ENDP ; stlp_std::reverse_iterator<CMotion *>::reverse_iterator<CMotion *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ?empty@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QBE_NXZ PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::empty, COMDAT
; _this$ = ecx

; 427  :   bool empty() const { return _M_node_count == 0; }

	xor	eax, eax
	cmp	DWORD PTR [ecx+16], eax
	sete	al
	ret	0
?empty@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QBE_NXZ ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::empty
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?_M_set@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXPAVCMotion@@00@Z
_TEXT	SEGMENT
___e$ = 8						; size = 4
?_M_set@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXPAVCMotion@@00@Z PROC ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_set, COMDAT
; _this$ = eax
; ___s$ = ecx
; ___f$ = edx

; 626  :     this->_M_start = __s;

	mov	DWORD PTR [eax], ecx

; 627  :     this->_M_finish = __f;
; 628  :     this->_M_end_of_storage._M_data = __e;

	mov	ecx, DWORD PTR ___e$[esp-4]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx

; 629  :   }

	ret	4
?_M_set@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXPAVCMotion@@00@Z ENDP ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_set
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_is_inside@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@ABE_NABVCMotion@@@Z
_TEXT	SEGMENT
?_M_is_inside@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@ABE_NABVCMotion@@@Z PROC ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_is_inside, COMDAT
; _this$ = ecx
; ___x$ = eax

; 393  :     return (&__x >= this->_M_start && &__x < this->_M_finish);

	cmp	eax, DWORD PTR [ecx]
	jb	SHORT $LN3@M_is_insid
	cmp	eax, DWORD PTR [ecx+4]
	jae	SHORT $LN3@M_is_insid
	mov	eax, 1

; 394  :   }

	ret	0
$LN3@M_is_insid:

; 393  :     return (&__x >= this->_M_start && &__x < this->_M_finish);

	xor	eax, eax

; 394  :   }

	ret	0
?_M_is_inside@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@ABE_NABVCMotion@@@Z ENDP ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_is_inside
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_set@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXPAVCMotionDef@@00@Z
_TEXT	SEGMENT
___e$ = 8						; size = 4
?_M_set@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXPAVCMotionDef@@00@Z PROC ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_set, COMDAT
; _this$ = eax
; ___s$ = ecx
; ___f$ = edx

; 626  :     this->_M_start = __s;

	mov	DWORD PTR [eax], ecx

; 627  :     this->_M_finish = __f;
; 628  :     this->_M_end_of_storage._M_data = __e;

	mov	ecx, DWORD PTR ___e$[esp-4]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx

; 629  :   }

	ret	4
?_M_set@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXPAVCMotionDef@@00@Z ENDP ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_set
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_is_inside@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@ABE_NABVCMotionDef@@@Z
_TEXT	SEGMENT
?_M_is_inside@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@ABE_NABVCMotionDef@@@Z PROC ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_is_inside, COMDAT
; _this$ = ecx
; ___x$ = eax

; 393  :     return (&__x >= this->_M_start && &__x < this->_M_finish);

	cmp	eax, DWORD PTR [ecx]
	jb	SHORT $LN3@M_is_insid@2
	cmp	eax, DWORD PTR [ecx+4]
	jae	SHORT $LN3@M_is_insid@2
	mov	eax, 1

; 394  :   }

	ret	0
$LN3@M_is_insid@2:

; 393  :     return (&__x >= this->_M_start && &__x < this->_M_finish);

	xor	eax, eax

; 394  :   }

	ret	0
?_M_is_inside@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@ABE_NABVCMotionDef@@@Z ENDP ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_is_inside
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_set@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXPAVmotion_marks@@00@Z
_TEXT	SEGMENT
___e$ = 8						; size = 4
?_M_set@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXPAVmotion_marks@@00@Z PROC ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_set, COMDAT
; _this$ = eax
; ___s$ = ecx
; ___f$ = edx

; 626  :     this->_M_start = __s;

	mov	DWORD PTR [eax], ecx

; 627  :     this->_M_finish = __f;
; 628  :     this->_M_end_of_storage._M_data = __e;

	mov	ecx, DWORD PTR ___e$[esp-4]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx

; 629  :   }

	ret	4
?_M_set@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXPAVmotion_marks@@00@Z ENDP ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_set
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_is_inside@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@ABE_NABVmotion_marks@@@Z
_TEXT	SEGMENT
?_M_is_inside@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@ABE_NABVmotion_marks@@@Z PROC ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_is_inside, COMDAT
; _this$ = ecx
; ___x$ = eax

; 393  :     return (&__x >= this->_M_start && &__x < this->_M_finish);

	cmp	eax, DWORD PTR [ecx]
	jb	SHORT $LN3@M_is_insid@3
	cmp	eax, DWORD PTR [ecx+4]
	jae	SHORT $LN3@M_is_insid@3
	mov	eax, 1

; 394  :   }

	ret	0
$LN3@M_is_insid@3:

; 393  :     return (&__x >= this->_M_start && &__x < this->_M_finish);

	xor	eax, eax

; 394  :   }

	ret	0
?_M_is_inside@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@ABE_NABVmotion_marks@@@Z ENDP ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_is_inside
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_set@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEXPAU?$pair@MM@3@00@Z
_TEXT	SEGMENT
___e$ = 8						; size = 4
?_M_set@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEXPAU?$pair@MM@3@00@Z PROC ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_set, COMDAT
; _this$ = eax
; ___s$ = ecx
; ___f$ = edx

; 626  :     this->_M_start = __s;

	mov	DWORD PTR [eax], ecx

; 627  :     this->_M_finish = __f;
; 628  :     this->_M_end_of_storage._M_data = __e;

	mov	ecx, DWORD PTR ___e$[esp-4]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx

; 629  :   }

	ret	4
?_M_set@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEXPAU?$pair@MM@3@00@Z ENDP ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_set
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_is_inside@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@ABE_NABU?$pair@MM@3@@Z
_TEXT	SEGMENT
?_M_is_inside@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@ABE_NABU?$pair@MM@3@@Z PROC ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_is_inside, COMDAT
; _this$ = ecx
; ___x$ = eax

; 393  :     return (&__x >= this->_M_start && &__x < this->_M_finish);

	cmp	eax, DWORD PTR [ecx]
	jb	SHORT $LN3@M_is_insid@4
	cmp	eax, DWORD PTR [ecx+4]
	jae	SHORT $LN3@M_is_insid@4
	mov	eax, 1

; 394  :   }

	ret	0
$LN3@M_is_insid@4:

; 393  :     return (&__x >= this->_M_start && &__x < this->_M_finish);

	xor	eax, eax

; 394  :   }

	ret	0
?_M_is_inside@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@ABE_NABU?$pair@MM@3@@Z ENDP ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_is_inside
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_pair.h
_TEXT	ENDS
;	COMDAT ??0?$pair@MM@stlp_std@@QAE@ABU01@@Z
_TEXT	SEGMENT
??0?$pair@MM@stlp_std@@QAE@ABU01@@Z PROC		; stlp_std::pair<float,float>::pair<float,float>, COMDAT
; _this$ = eax
; ___o$ = ecx

; 62   :   pair(const pair<_T1,_T2>& __o) : first(__o.first), second(__o.second) {}

	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+4]
	ret	0
??0?$pair@MM@stlp_std@@QAE@ABU01@@Z ENDP		; stlp_std::pair<float,float>::pair<float,float>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?_M_is_inside@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@ABE_NABI@Z
_TEXT	SEGMENT
?_M_is_inside@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@ABE_NABI@Z PROC ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_is_inside, COMDAT
; _this$ = ecx
; ___x$ = eax

; 393  :     return (&__x >= this->_M_start && &__x < this->_M_finish);

	cmp	eax, DWORD PTR [ecx]
	jb	SHORT $LN3@M_is_insid@5
	cmp	eax, DWORD PTR [ecx+4]
	jae	SHORT $LN3@M_is_insid@5
	mov	eax, 1

; 394  :   }

	ret	0
$LN3@M_is_insid@5:

; 393  :     return (&__x >= this->_M_start && &__x < this->_M_finish);

	xor	eax, eax

; 394  :   }

	ret	0
?_M_is_inside@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@ABE_NABI@Z ENDP ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_is_inside
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrmemory.h
_TEXT	ENDS
;	COMDAT ??$xr_alloc@VCMotion@@@@YAPAVCMotion@@I@Z
_TEXT	SEGMENT
??$xr_alloc@VCMotion@@@@YAPAVCMotion@@I@Z PROC		; xr_alloc<CMotion>, COMDAT
; _count$ = eax

; 109  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	lea	eax, DWORD PTR [eax+eax*4]
	add	eax, eax
	add	eax, eax
	add	eax, eax
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
??$xr_alloc@VCMotion@@@@YAPAVCMotion@@I@Z ENDP		; xr_alloc<CMotion>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$xr_alloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@YAPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@I@Z
_TEXT	SEGMENT
??$xr_alloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@YAPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@I@Z PROC ; xr_alloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > >, COMDAT

; 109  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
??$xr_alloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@YAPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@I@Z ENDP ; xr_alloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$xr_alloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@YAPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@I@Z
_TEXT	SEGMENT
??$xr_alloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@YAPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@I@Z PROC ; xr_alloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > >, COMDAT

; 109  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
??$xr_alloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@YAPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@I@Z ENDP ; xr_alloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$xr_alloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@YAPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@I@Z
_TEXT	SEGMENT
??$xr_alloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@YAPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@I@Z PROC ; xr_alloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >, COMDAT

; 109  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	32					; 00000020H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
??$xr_alloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@YAPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@I@Z ENDP ; xr_alloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$xr_free@VCMotion@@@@YAXAAPAVCMotion@@@Z
_TEXT	SEGMENT
??$xr_free@VCMotion@@@@YAXAAPAVCMotion@@@Z PROC		; xr_free<CMotion>, COMDAT
; _P$ = esi

; 111  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN1@xr_free
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi], 0
$LN1@xr_free:
	ret	0
??$xr_free@VCMotion@@@@YAXAAPAVCMotion@@@Z ENDP		; xr_free<CMotion>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$xr_free@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@YAXAAPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@Z
_TEXT	SEGMENT
??$xr_free@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@YAXAAPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@Z PROC ; xr_free<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > >, COMDAT
; _P$ = esi

; 111  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN1@xr_free@2
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi], 0
$LN1@xr_free@2:
	ret	0
??$xr_free@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@YAXAAPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@Z ENDP ; xr_free<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$xr_free@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@YAXAAPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@Z
_TEXT	SEGMENT
??$xr_free@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@YAXAAPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@Z PROC ; xr_free<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >, COMDAT
; _P$ = esi

; 111  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN1@xr_free@3
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi], 0
$LN1@xr_free@3:
	ret	0
??$xr_free@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@YAXAAPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@Z ENDP ; xr_free<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$__destroy_range@PAU?$pair@MM@stlp_std@@U12@@stlp_std@@YAXPAU?$pair@MM@0@00@Z
_TEXT	SEGMENT
??$__destroy_range@PAU?$pair@MM@stlp_std@@U12@@stlp_std@@YAXPAU?$pair@MM@0@00@Z PROC ; stlp_std::__destroy_range<stlp_std::pair<float,float> *,stlp_std::pair<float,float> >, COMDAT

; 175  :   typedef typename __type_traits<_Tp>::has_trivial_destructor _Trivial_destructor;
; 176  :   __destroy_range_aux(__first, __last, __ptr, _Trivial_destructor());
; 177  : }

	ret	0
??$__destroy_range@PAU?$pair@MM@stlp_std@@U12@@stlp_std@@YAXPAU?$pair@MM@0@00@Z ENDP ; stlp_std::__destroy_range<stlp_std::pair<float,float> *,stlp_std::pair<float,float> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__destroy_range@PAII@stlp_std@@YAXPAI00@Z
_TEXT	SEGMENT
??$__destroy_range@PAII@stlp_std@@YAXPAI00@Z PROC	; stlp_std::__destroy_range<unsigned int *,unsigned int>, COMDAT

; 175  :   typedef typename __type_traits<_Tp>::has_trivial_destructor _Trivial_destructor;
; 176  :   __destroy_range_aux(__first, __last, __ptr, _Trivial_destructor());
; 177  : }

	ret	0
??$__destroy_range@PAII@stlp_std@@YAXPAI00@Z ENDP	; stlp_std::__destroy_range<unsigned int *,unsigned int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__fill_n@PAIII@priv@stlp_std@@YAPAIPAIIABI@Z
_TEXT	SEGMENT
??$__fill_n@PAIII@priv@stlp_std@@YAPAIPAIIABI@Z PROC	; stlp_std::priv::__fill_n<unsigned int *,unsigned int,unsigned int>, COMDAT
; ___first$ = eax
; ___n$ = ecx
; ___val$ = edx

; 403  :   _STLP_FIX_LITERAL_BUG(__first)
; 404  :   for ( ; __n > 0; --__n, ++__first)

	test	ecx, ecx
	jbe	SHORT $LN1@fill_n@2
	push	esi
$LL3@fill_n@2:

; 405  :     *__first = __val;

	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [eax], esi
	sub	ecx, 1
	add	eax, 4
	test	ecx, ecx
	ja	SHORT $LL3@fill_n@2
	pop	esi
$LN1@fill_n@2:

; 406  :   return __first;
; 407  : }

	ret	0
??$__fill_n@PAIII@priv@stlp_std@@YAPAIPAIIABI@Z ENDP	; stlp_std::priv::__fill_n<unsigned int *,unsigned int,unsigned int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$__destroy_range_aux@V?$reverse_iterator@PAI@stlp_std@@I@stlp_std@@YAXV?$reverse_iterator@PAI@0@0PAIABU__true_type@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$__destroy_range_aux@V?$reverse_iterator@PAI@stlp_std@@I@stlp_std@@YAXV?$reverse_iterator@PAI@0@0PAIABU__true_type@0@@Z PROC ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<unsigned int *>,unsigned int>, COMDAT

; 169  : __destroy_range_aux(_ForwardIterator, _ForwardIterator, _Tp*, const __true_type& /*_Trivial_destructor*/) {}

	ret	0
??$__destroy_range_aux@V?$reverse_iterator@PAI@stlp_std@@I@stlp_std@@YAXV?$reverse_iterator@PAI@0@0PAIABU__true_type@0@@Z ENDP ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<unsigned int *>,unsigned int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?allocate@?$xalloc@VCMotion@@@@QBEPAVCMotion@@IPBX@Z
_TEXT	SEGMENT
?allocate@?$xalloc@VCMotion@@@@QBEPAVCMotion@@IPBX@Z PROC ; xalloc<CMotion>::allocate, COMDAT
; _n$ = eax

; 81   : 							pointer					allocate		(size_type n, const void* p=0) const	{	return xr_alloc<T>((u32)n);	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	lea	eax, DWORD PTR [eax+eax*4]
	add	eax, eax
	add	eax, eax
	add	eax, eax
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$xalloc@VCMotion@@@@QBEPAVCMotion@@IPBX@Z ENDP ; xalloc<CMotion>::allocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_alloc.h
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@PAVCMotion@@V1@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAEPAVCMotion@@I@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@PAVCMotion@@V1@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAEPAVCMotion@@I@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<CMotion *,CMotion,xalloc<CMotion> >::allocate, COMDAT
; ___n$ = eax

; 633  :   { return _Base::allocate(__n); }

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	lea	eax, DWORD PTR [eax+eax*4]
	add	eax, eax
	add	eax, eax
	add	eax, eax
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$_STLP_alloc_proxy@PAVCMotion@@V1@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAEPAVCMotion@@I@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<CMotion *,CMotion,xalloc<CMotion> >::allocate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@PAVCMotion@@V1@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEPAVCMotion@@IAAIABU__false_type@3@@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@PAVCMotion@@V1@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEPAVCMotion@@IAAIABU__false_type@3@@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<CMotion *,CMotion,xalloc<CMotion> >::allocate, COMDAT
; ___n$ = eax
; ___allocated_n$ = ecx

; 640  :   { __allocated_n = __n; return allocate(__n); }

	lea	edx, DWORD PTR [eax+eax*4]
	add	edx, edx
	add	edx, edx
	add	edx, edx
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edx
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$_STLP_alloc_proxy@PAVCMotion@@V1@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEPAVCMotion@@IAAIABU__false_type@3@@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<CMotion *,CMotion,xalloc<CMotion> >::allocate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@PAVCMotion@@V1@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAEPAVCMotion@@IAAI@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@PAVCMotion@@V1@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAEPAVCMotion@@IAAI@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<CMotion *,CMotion,xalloc<CMotion> >::allocate, COMDAT
; ___n$ = eax
; ___allocated_n$ = ecx

; 611  : #if !defined (__BORLANDC__)
; 612  :     typedef typename _IsSTLportClass<_MaybeReboundAlloc>::_Ret _STLportAlloc;
; 613  : #else
; 614  :     typedef typename __bool2type<_IsSTLportClass<_MaybeReboundAlloc>::_Is>::_Ret _STLportAlloc;
; 615  : #endif
; 616  :     return allocate(__n, __allocated_n, _STLportAlloc());

	lea	edx, DWORD PTR [eax+eax*4]
	add	edx, edx
	add	edx, edx
	add	edx, edx
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edx
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 617  :   }

	ret	0
?allocate@?$_STLP_alloc_proxy@PAVCMotion@@V1@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAEPAVCMotion@@IAAI@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<CMotion *,CMotion,xalloc<CMotion> >::allocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xalloc@VCMotion@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xalloc@VCMotion@@@@QAE@ABV0@@Z PROC		; xalloc<CMotion>::xalloc<CMotion>, COMDAT
; _this$ = eax

; 78   : 													xalloc			(const xalloc<T>&)						{	}

	ret	0
??0?$xalloc@VCMotion@@@@QAE@ABV0@@Z ENDP		; xalloc<CMotion>::xalloc<CMotion>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?allocate@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@QBEPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@IPBX@Z
_TEXT	SEGMENT
?allocate@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@QBEPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@IPBX@Z PROC ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > >::allocate, COMDAT

; 81   : 							pointer					allocate		(size_type n, const void* p=0) const	{	return xr_alloc<T>((u32)n);	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@QBEPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@IPBX@Z ENDP ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > >::allocate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?allocate@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@QBEPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@IPBX@Z
_TEXT	SEGMENT
?allocate@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@QBEPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@IPBX@Z PROC ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > >::allocate, COMDAT

; 81   : 							pointer					allocate		(size_type n, const void* p=0) const	{	return xr_alloc<T>((u32)n);	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@QBEPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@IPBX@Z ENDP ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > >::allocate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?allocate@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@QBEPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@IPBX@Z
_TEXT	SEGMENT
?allocate@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@QBEPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@IPBX@Z PROC ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::allocate, COMDAT

; 81   : 							pointer					allocate		(size_type n, const void* p=0) const	{	return xr_alloc<T>((u32)n);	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	32					; 00000020H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@QBEPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@IPBX@Z ENDP ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::allocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?end@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QBEPBVCMotion@@XZ
_TEXT	SEGMENT
?end@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QBEPBVCMotion@@XZ PROC ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::end, COMDAT
; _this$ = eax

; 173  :   const_iterator end() const   { return this->_M_finish; }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?end@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QBEPBVCMotion@@XZ ENDP ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QBEPBVCMotion@@XZ
_TEXT	SEGMENT
?begin@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QBEPBVCMotion@@XZ PROC ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::begin, COMDAT
; _this$ = eax

; 171  :   const_iterator begin() const { return this->_M_start; }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QBEPBVCMotion@@XZ ENDP ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::begin
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?get_allocator@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QBE?AV?$xalloc@VCMotion@@@@XZ
_TEXT	SEGMENT
?get_allocator@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QBE?AV?$xalloc@VCMotion@@@@XZ PROC ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::get_allocator, COMDAT
; ___$ReturnUdt$ = eax

; 134  :   { return _STLP_CONVERT_ALLOCATOR((const allocator_type&)this->_M_end_of_storage, _Tp); }

	ret	0
?get_allocator@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QBE?AV?$xalloc@VCMotion@@@@XZ ENDP ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::get_allocator
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_iterator.h
_TEXT	ENDS
;	COMDAT ??0?$reverse_iterator@PAVCMotion@@@stlp_std@@QAE@PAVCMotion@@@Z
_TEXT	SEGMENT
??0?$reverse_iterator@PAVCMotion@@@stlp_std@@QAE@PAVCMotion@@@Z PROC ; stlp_std::reverse_iterator<CMotion *>::reverse_iterator<CMotion *>, COMDAT
; _this$ = eax
; ___x$ = ecx

; 65   :   explicit reverse_iterator(iterator_type __x) : current(__x) {}

	mov	DWORD PTR [eax], ecx
	ret	0
??0?$reverse_iterator@PAVCMotion@@@stlp_std@@QAE@PAVCMotion@@@Z ENDP ; stlp_std::reverse_iterator<CMotion *>::reverse_iterator<CMotion *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_alloc.h
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@U_Rb_tree_node_base@priv@stlp_std@@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@23@V?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@@priv@stlp_std@@QAEPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@23@I@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@U_Rb_tree_node_base@priv@stlp_std@@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@23@V?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@@priv@stlp_std@@QAEPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@23@I@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::priv::_Rb_tree_node_base,stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > > >::allocate, COMDAT

; 633  :   { return _Base::allocate(__n); }

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$_STLP_alloc_proxy@U_Rb_tree_node_base@priv@stlp_std@@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@23@V?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@@priv@stlp_std@@QAEPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@23@I@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::priv::_Rb_tree_node_base,stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > > >::allocate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@U_Rb_tree_node_base@priv@stlp_std@@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@23@V?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@@priv@stlp_std@@QAEPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@23@I@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@U_Rb_tree_node_base@priv@stlp_std@@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@23@V?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@@priv@stlp_std@@QAEPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@23@I@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::priv::_Rb_tree_node_base,stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > > >::allocate, COMDAT

; 633  :   { return _Base::allocate(__n); }

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$_STLP_alloc_proxy@U_Rb_tree_node_base@priv@stlp_std@@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@23@V?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@@priv@stlp_std@@QAEPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@23@I@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::priv::_Rb_tree_node_base,stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > > >::allocate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@U_Rb_tree_node_base@priv@stlp_std@@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@23@V?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@@priv@stlp_std@@QAEPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@23@I@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@U_Rb_tree_node_base@priv@stlp_std@@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@23@V?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@@priv@stlp_std@@QAEPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@23@I@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::priv::_Rb_tree_node_base,stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > > >::allocate, COMDAT

; 633  :   { return _Base::allocate(__n); }

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	32					; 00000020H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$_STLP_alloc_proxy@U_Rb_tree_node_base@priv@stlp_std@@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@23@V?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@@priv@stlp_std@@QAEPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@23@I@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::priv::_Rb_tree_node_base,stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > > >::allocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?deallocate@?$xalloc@VCMotion@@@@QBEXPAVCMotion@@I@Z
_TEXT	SEGMENT
?deallocate@?$xalloc@VCMotion@@@@QBEXPAVCMotion@@I@Z PROC ; xalloc<CMotion>::deallocate, COMDAT
; _p$ = eax

; 83   : 							void					deallocate		(pointer p, size_type n) const			{	xr_free	(p);				}

	test	eax, eax
	je	SHORT $LN3@deallocate
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN3@deallocate:
	ret	0
?deallocate@?$xalloc@VCMotion@@@@QBEXPAVCMotion@@I@Z ENDP ; xalloc<CMotion>::deallocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ?key_comp@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QBE?AU?$less@Vshared_str@@@3@XZ
_TEXT	SEGMENT
?key_comp@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QBE?AU?$less@Vshared_str@@@3@XZ PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::key_comp, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 414  :   _Compare key_comp() const { return _M_key_compare; }

	mov	dl, BYTE PTR [ecx+20]
	mov	BYTE PTR [eax], dl
	ret	0
?key_comp@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QBE?AU?$less@Vshared_str@@@3@XZ ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::key_comp
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ??1?$_Vector_base@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_base@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@XZ PROC ; stlp_std::priv::_Vector_base<CMotion,xalloc<CMotion> >::~_Vector_base<CMotion,xalloc<CMotion> >, COMDAT
; _this$ = eax

; 85   :     if (_M_start != _STLP_DEFAULT_CONSTRUCTED(pointer))

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN6@Vector_bas

; 86   :       _M_end_of_storage.deallocate(_M_start, _M_end_of_storage._M_data - _M_start);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN6@Vector_bas:

; 87   :   }

	ret	0
??1?$_Vector_base@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@XZ ENDP ; stlp_std::priv::_Vector_base<CMotion,xalloc<CMotion> >::~_Vector_base<CMotion,xalloc<CMotion> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xalloc@VCMotion@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xalloc@VCMotion@@@@QAE@XZ PROC			; xalloc<CMotion>::xalloc<CMotion>, COMDAT
; _this$ = eax

; 77   : 													xalloc			()										{	}

	ret	0
??0?$xalloc@VCMotion@@@@QAE@XZ ENDP			; xalloc<CMotion>::xalloc<CMotion>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_function_base.h
_TEXT	ENDS
;	COMDAT ??R?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@QBEABVshared_str@@ABU?$pair@$$CBVshared_str@@PAUmotions_value@@@2@@Z
_TEXT	SEGMENT
??R?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@QBEABVshared_str@@ABU?$pair@$$CBVshared_str@@PAUmotions_value@@@2@@Z PROC ; stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >::operator(), COMDAT
; ___x$ = eax

; 133  :     return __x.first;
; 134  :   }

	ret	0
??R?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@QBEABVshared_str@@ABU?$pair@$$CBVshared_str@@PAUmotions_value@@@2@@Z ENDP ; stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >::operator()
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??R?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@QBEABVshared_str@@ABU?$pair@$$CBVshared_str@@G@2@@Z
_TEXT	SEGMENT
??R?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@QBEABVshared_str@@ABU?$pair@$$CBVshared_str@@G@2@@Z PROC ; stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >::operator(), COMDAT
; ___x$ = eax

; 133  :     return __x.first;
; 134  :   }

	ret	0
??R?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@QBEABVshared_str@@ABU?$pair@$$CBVshared_str@@G@2@@Z ENDP ; stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >::operator()
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_iterator.h
_TEXT	ENDS
;	COMDAT ??0?$reverse_iterator@PAVCMotionDef@@@stlp_std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$reverse_iterator@PAVCMotionDef@@@stlp_std@@QAE@ABV01@@Z PROC ; stlp_std::reverse_iterator<CMotionDef *>::reverse_iterator<CMotionDef *>, COMDAT
; _this$ = eax
; ___x$ = ecx

; 66   :   reverse_iterator(const _Self& __x) : current(__x.current) {}

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	ret	0
??0?$reverse_iterator@PAVCMotionDef@@@stlp_std@@QAE@ABV01@@Z ENDP ; stlp_std::reverse_iterator<CMotionDef *>::reverse_iterator<CMotionDef *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$reverse_iterator@PAVmotion_marks@@@stlp_std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$reverse_iterator@PAVmotion_marks@@@stlp_std@@QAE@ABV01@@Z PROC ; stlp_std::reverse_iterator<motion_marks *>::reverse_iterator<motion_marks *>, COMDAT
; _this$ = eax
; ___x$ = ecx

; 66   :   reverse_iterator(const _Self& __x) : current(__x.current) {}

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	ret	0
??0?$reverse_iterator@PAVmotion_marks@@@stlp_std@@QAE@ABV01@@Z ENDP ; stlp_std::reverse_iterator<motion_marks *>::reverse_iterator<motion_marks *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$reverse_iterator@PAU?$pair@MM@stlp_std@@@stlp_std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$reverse_iterator@PAU?$pair@MM@stlp_std@@@stlp_std@@QAE@ABV01@@Z PROC ; stlp_std::reverse_iterator<stlp_std::pair<float,float> *>::reverse_iterator<stlp_std::pair<float,float> *>, COMDAT
; _this$ = eax
; ___x$ = ecx

; 66   :   reverse_iterator(const _Self& __x) : current(__x.current) {}

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	ret	0
??0?$reverse_iterator@PAU?$pair@MM@stlp_std@@@stlp_std@@QAE@ABV01@@Z ENDP ; stlp_std::reverse_iterator<stlp_std::pair<float,float> *>::reverse_iterator<stlp_std::pair<float,float> *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ??8?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QBE_NU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@12@@Z
_TEXT	SEGMENT
___rhs$ = 8						; size = 4
??8?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QBE_NU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@12@@Z PROC ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >::operator==, COMDAT
; _this$ = ecx

; 197  :     return _M_node == __rhs._M_node;

	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	cmp	edx, DWORD PTR ___rhs$[esp-4]
	sete	al

; 198  :   }

	ret	4
??8?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QBE_NU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@12@@Z ENDP ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >::operator==
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??8?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@QBE_NU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@12@@Z
_TEXT	SEGMENT
___rhs$ = 8						; size = 4
??8?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@QBE_NU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@12@@Z PROC ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> > >::operator==, COMDAT
; _this$ = ecx

; 197  :     return _M_node == __rhs._M_node;

	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	cmp	edx, DWORD PTR ___rhs$[esp-4]
	sete	al

; 198  :   }

	ret	4
??8?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@QBE_NU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@12@@Z ENDP ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> > >::operator==
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_S_parent@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z
_TEXT	SEGMENT
?_S_parent@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_S_parent, COMDAT
; ___x$ = eax

; 350  :   { return __x->_M_parent; }

	add	eax, 4
	ret	0
?_S_parent@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_S_parent
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_S_right@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z
_TEXT	SEGMENT
?_S_right@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_S_right, COMDAT
; ___x$ = eax

; 348  :   { return __x->_M_right; }

	add	eax, 12					; 0000000cH
	ret	0
?_S_right@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_S_right
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_S_left@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z
_TEXT	SEGMENT
?_S_left@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_S_left, COMDAT
; ___x$ = eax

; 346  :   { return __x->_M_left; }

	add	eax, 8
	ret	0
?_S_left@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_S_left
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?deallocate@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@QBEXPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@I@Z
_TEXT	SEGMENT
?deallocate@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@QBEXPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@I@Z PROC ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > >::deallocate, COMDAT
; _p$ = eax

; 83   : 							void					deallocate		(pointer p, size_type n) const			{	xr_free	(p);				}

	test	eax, eax
	je	SHORT $LN3@deallocate@2
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN3@deallocate@2:
	ret	0
?deallocate@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@QBEXPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@I@Z ENDP ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > >::deallocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ?_S_value@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAAAU?$pair@$$CBVshared_str@@G@3@PAU_Rb_tree_node_base@23@@Z
_TEXT	SEGMENT
?_S_value@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAAAU?$pair@$$CBVshared_str@@G@3@PAU_Rb_tree_node_base@23@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_S_value, COMDAT
; ___x$ = eax

; 352  :   { return __STATIC_CAST(_Link_type, __x)->_M_value_field; }

	add	eax, 16					; 00000010H
	ret	0
?_S_value@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAAAU?$pair@$$CBVshared_str@@G@3@PAU_Rb_tree_node_base@23@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_S_value
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_S_parent@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z
_TEXT	SEGMENT
?_S_parent@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_S_parent, COMDAT
; ___x$ = eax

; 350  :   { return __x->_M_parent; }

	add	eax, 4
	ret	0
?_S_parent@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_S_parent
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_S_right@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z
_TEXT	SEGMENT
?_S_right@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_S_right, COMDAT
; ___x$ = eax

; 348  :   { return __x->_M_right; }

	add	eax, 12					; 0000000cH
	ret	0
?_S_right@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_S_right
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_S_left@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z
_TEXT	SEGMENT
?_S_left@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_S_left, COMDAT
; ___x$ = eax

; 346  :   { return __x->_M_left; }

	add	eax, 8
	ret	0
?_S_left@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_S_left
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?deallocate@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@QBEXPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@I@Z
_TEXT	SEGMENT
?deallocate@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@QBEXPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@I@Z PROC ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::deallocate, COMDAT
; _p$ = eax

; 83   : 							void					deallocate		(pointer p, size_type n) const			{	xr_free	(p);				}

	test	eax, eax
	je	SHORT $LN3@deallocate@3
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN3@deallocate@3:
	ret	0
?deallocate@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@QBEXPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@I@Z ENDP ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::deallocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ?_S_value@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAAAU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@PAU_Rb_tree_node_base@23@@Z
_TEXT	SEGMENT
?_S_value@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAAAU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@PAU_Rb_tree_node_base@23@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_S_value, COMDAT
; ___x$ = eax

; 352  :   { return __STATIC_CAST(_Link_type, __x)->_M_value_field; }

	add	eax, 16					; 00000010H
	ret	0
?_S_value@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAAAU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@PAU_Rb_tree_node_base@23@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_S_value
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_S_parent@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z
_TEXT	SEGMENT
?_S_parent@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_S_parent, COMDAT
; ___x$ = eax

; 350  :   { return __x->_M_parent; }

	add	eax, 4
	ret	0
?_S_parent@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_S_parent
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_S_right@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z
_TEXT	SEGMENT
?_S_right@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_S_right, COMDAT
; ___x$ = eax

; 348  :   { return __x->_M_right; }

	add	eax, 12					; 0000000cH
	ret	0
?_S_right@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_S_right
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_S_left@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z
_TEXT	SEGMENT
?_S_left@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_S_left, COMDAT
; ___x$ = eax

; 346  :   { return __x->_M_left; }

	add	eax, 8
	ret	0
?_S_left@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAAAPAU_Rb_tree_node_base@23@PAU423@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_S_left
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_map.h
_TEXT	ENDS
;	COMDAT ?key_comp@?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QBE?AU?$less@Vshared_str@@@2@XZ
_TEXT	SEGMENT
?key_comp@?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QBE?AU?$less@Vshared_str@@@2@XZ PROC ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::key_comp, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 157  :   key_compare key_comp() const { return _M_t.key_comp(); }

	mov	dl, BYTE PTR [ecx+20]
	mov	BYTE PTR [eax], dl
	ret	0
?key_comp@?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QBE?AU?$less@Vshared_str@@@2@XZ ENDP ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::key_comp
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?capacity@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QBEIXZ PROC ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::capacity, COMDAT
; _this$ = eax

; 187  :   size_type capacity() const    { return size_type(this->_M_end_of_storage._M_data - this->_M_start); }

	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR [eax]
	mov	eax, -1840700269			; 92492493H
	imul	ecx
	add	edx, ecx
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	ret	0
?capacity@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QBEIXZ ENDP ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::capacity
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?capacity@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QBEIXZ PROC ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::capacity, COMDAT
; _this$ = ecx

; 187  :   size_type capacity() const    { return size_type(this->_M_end_of_storage._M_data - this->_M_start); }

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 4
	ret	0
?capacity@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QBEIXZ ENDP ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::capacity
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?capacity@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QBEIXZ PROC ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::capacity, COMDAT
; _this$ = ecx

; 187  :   size_type capacity() const    { return size_type(this->_M_end_of_storage._M_data - this->_M_start); }

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 3
	ret	0
?capacity@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QBEIXZ ENDP ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::capacity
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_set@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEXPAI00@Z
_TEXT	SEGMENT
___e$ = 8						; size = 4
?_M_set@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEXPAI00@Z PROC ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_set, COMDAT
; _this$ = eax
; ___s$ = ecx
; ___f$ = edx

; 626  :     this->_M_start = __s;

	mov	DWORD PTR [eax], ecx

; 627  :     this->_M_finish = __f;
; 628  :     this->_M_end_of_storage._M_data = __e;

	mov	ecx, DWORD PTR ___e$[esp-4]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx

; 629  :   }

	ret	4
?_M_set@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEXPAI00@Z ENDP ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_set
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?capacity@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QBEIXZ PROC ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::capacity, COMDAT
; _this$ = ecx

; 187  :   size_type capacity() const    { return size_type(this->_M_end_of_storage._M_data - this->_M_start); }

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
	ret	0
?capacity@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QBEIXZ ENDP ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::capacity
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrmemory.h
_TEXT	ENDS
;	COMDAT ??$xr_alloc@VCMotionDef@@@@YAPAVCMotionDef@@I@Z
_TEXT	SEGMENT
??$xr_alloc@VCMotionDef@@@@YAPAVCMotionDef@@I@Z PROC	; xr_alloc<CMotionDef>, COMDAT
; _count$ = eax

; 109  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	lea	ecx, DWORD PTR [eax*8]
	sub	ecx, eax
	add	ecx, ecx
	add	ecx, ecx
	push	ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
??$xr_alloc@VCMotionDef@@@@YAPAVCMotionDef@@I@Z ENDP	; xr_alloc<CMotionDef>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$xr_alloc@Vmotion_marks@@@@YAPAVmotion_marks@@I@Z
_TEXT	SEGMENT
??$xr_alloc@Vmotion_marks@@@@YAPAVmotion_marks@@I@Z PROC ; xr_alloc<motion_marks>, COMDAT
; _count$ = eax

; 109  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	eax, 4
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
??$xr_alloc@Vmotion_marks@@@@YAPAVmotion_marks@@I@Z ENDP ; xr_alloc<motion_marks>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$xr_alloc@U?$pair@MM@stlp_std@@@@YAPAU?$pair@MM@stlp_std@@I@Z
_TEXT	SEGMENT
??$xr_alloc@U?$pair@MM@stlp_std@@@@YAPAU?$pair@MM@stlp_std@@I@Z PROC ; xr_alloc<stlp_std::pair<float,float> >, COMDAT
; _count$ = eax

; 109  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	lea	ecx, DWORD PTR [eax*8]
	push	ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
??$xr_alloc@U?$pair@MM@stlp_std@@@@YAPAU?$pair@MM@stlp_std@@I@Z ENDP ; xr_alloc<stlp_std::pair<float,float> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$xr_alloc@I@@YAPAII@Z
_TEXT	SEGMENT
??$xr_alloc@I@@YAPAII@Z PROC				; xr_alloc<unsigned int>, COMDAT
; _count$ = eax

; 109  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	lea	ecx, DWORD PTR [eax*4]
	push	ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
??$xr_alloc@I@@YAPAII@Z ENDP				; xr_alloc<unsigned int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$_Destroy_Range@PAU?$pair@MM@stlp_std@@@stlp_std@@YAXPAU?$pair@MM@0@0@Z
_TEXT	SEGMENT
??$_Destroy_Range@PAU?$pair@MM@stlp_std@@@stlp_std@@YAXPAU?$pair@MM@0@0@Z PROC ; stlp_std::_Destroy_Range<stlp_std::pair<float,float> *>, COMDAT

; 181  :   __destroy_range(__first, __last, _STLP_VALUE_TYPE(__first, _ForwardIterator));
; 182  : }

	ret	0
??$_Destroy_Range@PAU?$pair@MM@stlp_std@@@stlp_std@@YAXPAU?$pair@MM@0@0@Z ENDP ; stlp_std::_Destroy_Range<stlp_std::pair<float,float> *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Destroy_Range@PAI@stlp_std@@YAXPAI0@Z
_TEXT	SEGMENT
??$_Destroy_Range@PAI@stlp_std@@YAXPAI0@Z PROC		; stlp_std::_Destroy_Range<unsigned int *>, COMDAT

; 181  :   __destroy_range(__first, __last, _STLP_VALUE_TYPE(__first, _ForwardIterator));
; 182  : }

	ret	0
??$_Destroy_Range@PAI@stlp_std@@YAXPAI0@Z ENDP		; stlp_std::_Destroy_Range<unsigned int *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrmemory.h
_TEXT	ENDS
;	COMDAT ??$xr_free@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@YAXAAPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@Z
_TEXT	SEGMENT
??$xr_free@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@YAXAAPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@Z PROC ; xr_free<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > >, COMDAT
; _P$ = esi

; 111  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN1@xr_free@4
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi], 0
$LN1@xr_free@4:
	ret	0
??$xr_free@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@YAXAAPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@Z ENDP ; xr_free<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??$?0U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@QAE@ABV?$xalloc@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@@@Z
_TEXT	SEGMENT
??$?0U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@QAE@ABV?$xalloc@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@@@Z PROC ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > >::xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > ><stlp_std::pair<shared_str const ,motions_value *> >, COMDAT
; _this$ = eax

; 79   : 	template<class _Other>							xalloc			(const xalloc<_Other>&)					{	}

	ret	0
??$?0U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@QAE@ABV?$xalloc@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@@@Z ENDP ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > >::xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > ><stlp_std::pair<shared_str const ,motions_value *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$?0U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@?$xalloc@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@@QAE@ABV?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@@Z
_TEXT	SEGMENT
??$?0U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@?$xalloc@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@@QAE@ABV?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@@Z PROC ; xalloc<stlp_std::pair<shared_str const ,motions_value *> >::xalloc<stlp_std::pair<shared_str const ,motions_value *> ><stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > >, COMDAT
; _this$ = eax

; 79   : 	template<class _Other>							xalloc			(const xalloc<_Other>&)					{	}

	ret	0
??$?0U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@?$xalloc@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@@QAE@ABV?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@@Z ENDP ; xalloc<stlp_std::pair<shared_str const ,motions_value *> >::xalloc<stlp_std::pair<shared_str const ,motions_value *> ><stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$?0U?$pair@$$CBVshared_str@@G@stlp_std@@@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@QAE@ABV?$xalloc@U?$pair@$$CBVshared_str@@G@stlp_std@@@@@Z
_TEXT	SEGMENT
??$?0U?$pair@$$CBVshared_str@@G@stlp_std@@@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@QAE@ABV?$xalloc@U?$pair@$$CBVshared_str@@G@stlp_std@@@@@Z PROC ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > >::xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > ><stlp_std::pair<shared_str const ,unsigned short> >, COMDAT
; _this$ = eax

; 79   : 	template<class _Other>							xalloc			(const xalloc<_Other>&)					{	}

	ret	0
??$?0U?$pair@$$CBVshared_str@@G@stlp_std@@@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@QAE@ABV?$xalloc@U?$pair@$$CBVshared_str@@G@stlp_std@@@@@Z ENDP ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > >::xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > ><stlp_std::pair<shared_str const ,unsigned short> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$?0U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@?$xalloc@U?$pair@$$CBVshared_str@@G@stlp_std@@@@QAE@ABV?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@@Z
_TEXT	SEGMENT
??$?0U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@?$xalloc@U?$pair@$$CBVshared_str@@G@stlp_std@@@@QAE@ABV?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@@Z PROC ; xalloc<stlp_std::pair<shared_str const ,unsigned short> >::xalloc<stlp_std::pair<shared_str const ,unsigned short> ><stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > >, COMDAT
; _this$ = eax

; 79   : 	template<class _Other>							xalloc			(const xalloc<_Other>&)					{	}

	ret	0
??$?0U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@?$xalloc@U?$pair@$$CBVshared_str@@G@stlp_std@@@@QAE@ABV?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@@Z ENDP ; xalloc<stlp_std::pair<shared_str const ,unsigned short> >::xalloc<stlp_std::pair<shared_str const ,unsigned short> ><stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$?0U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@QAE@ABV?$xalloc@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@Z
_TEXT	SEGMENT
??$?0U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@QAE@ABV?$xalloc@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@Z PROC ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > ><stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >, COMDAT
; _this$ = eax

; 79   : 	template<class _Other>							xalloc			(const xalloc<_Other>&)					{	}

	ret	0
??$?0U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@QAE@ABV?$xalloc@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@Z ENDP ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > ><stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$?0U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@?$xalloc@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@QAE@ABV?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@@Z
_TEXT	SEGMENT
??$?0U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@?$xalloc@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@QAE@ABV?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@@Z PROC ; xalloc<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >::xalloc<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > ><stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >, COMDAT
; _this$ = eax

; 79   : 	template<class _Other>							xalloc			(const xalloc<_Other>&)					{	}

	ret	0
??$?0U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@?$xalloc@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@QAE@ABV?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@@Z ENDP ; xalloc<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >::xalloc<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > ><stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrmemory.h
_TEXT	ENDS
;	COMDAT ??$xr_free@VCMotionDef@@@@YAXAAPAVCMotionDef@@@Z
_TEXT	SEGMENT
??$xr_free@VCMotionDef@@@@YAXAAPAVCMotionDef@@@Z PROC	; xr_free<CMotionDef>, COMDAT
; _P$ = esi

; 111  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN1@xr_free@5
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi], 0
$LN1@xr_free@5:
	ret	0
??$xr_free@VCMotionDef@@@@YAXAAPAVCMotionDef@@@Z ENDP	; xr_free<CMotionDef>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$xr_free@Vmotion_marks@@@@YAXAAPAVmotion_marks@@@Z
_TEXT	SEGMENT
??$xr_free@Vmotion_marks@@@@YAXAAPAVmotion_marks@@@Z PROC ; xr_free<motion_marks>, COMDAT
; _P$ = esi

; 111  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN1@xr_free@6
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi], 0
$LN1@xr_free@6:
	ret	0
??$xr_free@Vmotion_marks@@@@YAXAAPAVmotion_marks@@@Z ENDP ; xr_free<motion_marks>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$xr_free@U?$pair@MM@stlp_std@@@@YAXAAPAU?$pair@MM@stlp_std@@@Z
_TEXT	SEGMENT
??$xr_free@U?$pair@MM@stlp_std@@@@YAXAAPAU?$pair@MM@stlp_std@@@Z PROC ; xr_free<stlp_std::pair<float,float> >, COMDAT
; _P$ = esi

; 111  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN1@xr_free@7
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi], 0
$LN1@xr_free@7:
	ret	0
??$xr_free@U?$pair@MM@stlp_std@@@@YAXAAPAU?$pair@MM@stlp_std@@@Z ENDP ; xr_free<stlp_std::pair<float,float> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?allocate@?$xalloc@VCMotionDef@@@@QBEPAVCMotionDef@@IPBX@Z
_TEXT	SEGMENT
?allocate@?$xalloc@VCMotionDef@@@@QBEPAVCMotionDef@@IPBX@Z PROC ; xalloc<CMotionDef>::allocate, COMDAT
; _n$ = eax

; 81   : 							pointer					allocate		(size_type n, const void* p=0) const	{	return xr_alloc<T>((u32)n);	}

	lea	ecx, DWORD PTR [eax*8]
	sub	ecx, eax
	add	ecx, ecx
	add	ecx, ecx
	push	ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$xalloc@VCMotionDef@@@@QBEPAVCMotionDef@@IPBX@Z ENDP ; xalloc<CMotionDef>::allocate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?allocate@?$xalloc@Vmotion_marks@@@@QBEPAVmotion_marks@@IPBX@Z
_TEXT	SEGMENT
?allocate@?$xalloc@Vmotion_marks@@@@QBEPAVmotion_marks@@IPBX@Z PROC ; xalloc<motion_marks>::allocate, COMDAT
; _n$ = eax

; 81   : 							pointer					allocate		(size_type n, const void* p=0) const	{	return xr_alloc<T>((u32)n);	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	eax, 4
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$xalloc@Vmotion_marks@@@@QBEPAVmotion_marks@@IPBX@Z ENDP ; xalloc<motion_marks>::allocate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?allocate@?$xalloc@U?$pair@MM@stlp_std@@@@QBEPAU?$pair@MM@stlp_std@@IPBX@Z
_TEXT	SEGMENT
?allocate@?$xalloc@U?$pair@MM@stlp_std@@@@QBEPAU?$pair@MM@stlp_std@@IPBX@Z PROC ; xalloc<stlp_std::pair<float,float> >::allocate, COMDAT
; _n$ = eax

; 81   : 							pointer					allocate		(size_type n, const void* p=0) const	{	return xr_alloc<T>((u32)n);	}

	lea	ecx, DWORD PTR [eax*8]
	push	ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$xalloc@U?$pair@MM@stlp_std@@@@QBEPAU?$pair@MM@stlp_std@@IPBX@Z ENDP ; xalloc<stlp_std::pair<float,float> >::allocate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?allocate@?$xalloc@I@@QBEPAIIPBX@Z
_TEXT	SEGMENT
?allocate@?$xalloc@I@@QBEPAIIPBX@Z PROC			; xalloc<unsigned int>::allocate, COMDAT
; _n$ = eax

; 81   : 							pointer					allocate		(size_type n, const void* p=0) const	{	return xr_alloc<T>((u32)n);	}

	lea	ecx, DWORD PTR [eax*4]
	push	ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$xalloc@I@@QBEPAIIPBX@Z ENDP			; xalloc<unsigned int>::allocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_alloc.h
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@PAVCMotionDef@@V1@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEPAVCMotionDef@@I@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@PAVCMotionDef@@V1@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEPAVCMotionDef@@I@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<CMotionDef *,CMotionDef,xalloc<CMotionDef> >::allocate, COMDAT
; ___n$ = eax

; 633  :   { return _Base::allocate(__n); }

	lea	ecx, DWORD PTR [eax*8]
	sub	ecx, eax
	add	ecx, ecx
	add	ecx, ecx
	push	ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$_STLP_alloc_proxy@PAVCMotionDef@@V1@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEPAVCMotionDef@@I@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<CMotionDef *,CMotionDef,xalloc<CMotionDef> >::allocate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@PAVmotion_marks@@V1@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEPAVmotion_marks@@I@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@PAVmotion_marks@@V1@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEPAVmotion_marks@@I@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<motion_marks *,motion_marks,xalloc<motion_marks> >::allocate, COMDAT
; ___n$ = eax

; 633  :   { return _Base::allocate(__n); }

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	eax, 4
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$_STLP_alloc_proxy@PAVmotion_marks@@V1@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEPAVmotion_marks@@I@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<motion_marks *,motion_marks,xalloc<motion_marks> >::allocate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@PAU?$pair@MM@stlp_std@@U12@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEPAU?$pair@MM@3@I@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@PAU?$pair@MM@stlp_std@@U12@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEPAU?$pair@MM@3@I@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::pair<float,float> *,stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::allocate, COMDAT
; ___n$ = eax

; 633  :   { return _Base::allocate(__n); }

	lea	ecx, DWORD PTR [eax*8]
	push	ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$_STLP_alloc_proxy@PAU?$pair@MM@stlp_std@@U12@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEPAU?$pair@MM@3@I@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::pair<float,float> *,stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::allocate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@PAIIV?$xalloc@I@@@priv@stlp_std@@QAEPAII@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@PAIIV?$xalloc@I@@@priv@stlp_std@@QAEPAII@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<unsigned int *,unsigned int,xalloc<unsigned int> >::allocate, COMDAT
; ___n$ = eax

; 633  :   { return _Base::allocate(__n); }

	lea	ecx, DWORD PTR [eax*4]
	push	ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$_STLP_alloc_proxy@PAIIV?$xalloc@I@@@priv@stlp_std@@QAEPAII@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<unsigned int *,unsigned int,xalloc<unsigned int> >::allocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@QAE@ABV0@@Z PROC ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > >::xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > >, COMDAT
; _this$ = eax

; 78   : 													xalloc			(const xalloc<T>&)						{	}

	ret	0
??0?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@QAE@ABV0@@Z ENDP ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > >::xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@QAE@ABV0@@Z PROC ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > >::xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > >, COMDAT
; _this$ = eax

; 78   : 													xalloc			(const xalloc<T>&)						{	}

	ret	0
??0?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@QAE@ABV0@@Z ENDP ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > >::xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@QAE@ABV0@@Z PROC ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >, COMDAT
; _this$ = eax

; 78   : 													xalloc			(const xalloc<T>&)						{	}

	ret	0
??0?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@QAE@ABV0@@Z ENDP ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_alloc.h
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@PAVCMotionDef@@V1@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEPAVCMotionDef@@IAAIABU__false_type@3@@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@PAVCMotionDef@@V1@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEPAVCMotionDef@@IAAIABU__false_type@3@@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<CMotionDef *,CMotionDef,xalloc<CMotionDef> >::allocate, COMDAT
; ___n$ = eax
; ___allocated_n$ = ecx

; 640  :   { __allocated_n = __n; return allocate(__n); }

	lea	edx, DWORD PTR [eax*8]
	sub	edx, eax
	add	edx, edx
	add	edx, edx
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edx
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$_STLP_alloc_proxy@PAVCMotionDef@@V1@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEPAVCMotionDef@@IAAIABU__false_type@3@@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<CMotionDef *,CMotionDef,xalloc<CMotionDef> >::allocate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@PAVmotion_marks@@V1@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEPAVmotion_marks@@IAAIABU__false_type@3@@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@PAVmotion_marks@@V1@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEPAVmotion_marks@@IAAIABU__false_type@3@@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<motion_marks *,motion_marks,xalloc<motion_marks> >::allocate, COMDAT
; ___n$ = eax
; ___allocated_n$ = ecx

; 640  :   { __allocated_n = __n; return allocate(__n); }

	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	eax, 4
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$_STLP_alloc_proxy@PAVmotion_marks@@V1@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEPAVmotion_marks@@IAAIABU__false_type@3@@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<motion_marks *,motion_marks,xalloc<motion_marks> >::allocate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@PAU?$pair@MM@stlp_std@@U12@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEPAU?$pair@MM@3@IAAIABU__false_type@3@@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@PAU?$pair@MM@stlp_std@@U12@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEPAU?$pair@MM@3@IAAIABU__false_type@3@@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::pair<float,float> *,stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::allocate, COMDAT
; ___n$ = eax
; ___allocated_n$ = ecx

; 640  :   { __allocated_n = __n; return allocate(__n); }

	lea	edx, DWORD PTR [eax*8]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edx
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$_STLP_alloc_proxy@PAU?$pair@MM@stlp_std@@U12@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEPAU?$pair@MM@3@IAAIABU__false_type@3@@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::pair<float,float> *,stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::allocate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@PAIIV?$xalloc@I@@@priv@stlp_std@@AAEPAIIAAIABU__false_type@3@@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@PAIIV?$xalloc@I@@@priv@stlp_std@@AAEPAIIAAIABU__false_type@3@@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<unsigned int *,unsigned int,xalloc<unsigned int> >::allocate, COMDAT
; ___n$ = eax
; ___allocated_n$ = ecx

; 640  :   { __allocated_n = __n; return allocate(__n); }

	lea	edx, DWORD PTR [eax*4]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edx
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$_STLP_alloc_proxy@PAIIV?$xalloc@I@@@priv@stlp_std@@AAEPAIIAAIABU__false_type@3@@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<unsigned int *,unsigned int,xalloc<unsigned int> >::allocate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_STLP_alloc_proxy@U_Rb_tree_node_base@priv@stlp_std@@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@23@V?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@@priv@stlp_std@@QAE@ABV?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@U_Rb_tree_node_base@12@@Z
_TEXT	SEGMENT
___p$ = 8						; size = 16
??0?$_STLP_alloc_proxy@U_Rb_tree_node_base@priv@stlp_std@@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@23@V?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@@priv@stlp_std@@QAE@ABV?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@U_Rb_tree_node_base@12@@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::priv::_Rb_tree_node_base,stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > > >::_STLP_alloc_proxy<stlp_std::priv::_Rb_tree_node_base,stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > > >, COMDAT
; _this$ = eax

; 571  :     _MaybeReboundAlloc(__a), _M_data(__p) {}

	mov	ecx, DWORD PTR ___p$[esp-4]
	mov	edx, DWORD PTR ___p$[esp]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR ___p$[esp+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR ___p$[esp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
	ret	16					; 00000010H
??0?$_STLP_alloc_proxy@U_Rb_tree_node_base@priv@stlp_std@@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@23@V?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@@priv@stlp_std@@QAE@ABV?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@U_Rb_tree_node_base@12@@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::priv::_Rb_tree_node_base,stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > > >::_STLP_alloc_proxy<stlp_std::priv::_Rb_tree_node_base,stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ?_M_empty_initialize@?$_Rb_tree_base@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAEXXZ
_TEXT	SEGMENT
?_M_empty_initialize@?$_Rb_tree_base@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAEXXZ PROC ; stlp_std::priv::_Rb_tree_base<stlp_std::pair<shared_str const ,motions_value *>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_empty_initialize, COMDAT
; _this$ = eax

; 259  :     _M_header._M_data._M_color = _S_rb_tree_red; // used to distinguish header from

	mov	BYTE PTR [eax], 0

; 260  :                                                  // __root, in iterator.operator++
; 261  :     _M_header._M_data._M_parent = 0;

	mov	DWORD PTR [eax+4], 0

; 262  :     _M_header._M_data._M_left = &_M_header._M_data;

	mov	DWORD PTR [eax+8], eax

; 263  :     _M_header._M_data._M_right = &_M_header._M_data;

	mov	DWORD PTR [eax+12], eax

; 264  :   }

	ret	0
?_M_empty_initialize@?$_Rb_tree_base@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAEXXZ ENDP ; stlp_std::priv::_Rb_tree_base<stlp_std::pair<shared_str const ,motions_value *>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_empty_initialize
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_alloc.h
_TEXT	ENDS
;	COMDAT ??0?$_STLP_alloc_proxy@U_Rb_tree_node_base@priv@stlp_std@@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@23@V?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@@priv@stlp_std@@QAE@ABV?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@U_Rb_tree_node_base@12@@Z
_TEXT	SEGMENT
___p$ = 8						; size = 16
??0?$_STLP_alloc_proxy@U_Rb_tree_node_base@priv@stlp_std@@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@23@V?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@@priv@stlp_std@@QAE@ABV?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@U_Rb_tree_node_base@12@@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::priv::_Rb_tree_node_base,stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > > >::_STLP_alloc_proxy<stlp_std::priv::_Rb_tree_node_base,stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > > >, COMDAT
; _this$ = eax

; 571  :     _MaybeReboundAlloc(__a), _M_data(__p) {}

	mov	ecx, DWORD PTR ___p$[esp-4]
	mov	edx, DWORD PTR ___p$[esp]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR ___p$[esp+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR ___p$[esp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
	ret	16					; 00000010H
??0?$_STLP_alloc_proxy@U_Rb_tree_node_base@priv@stlp_std@@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@23@V?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@@priv@stlp_std@@QAE@ABV?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@stlp_std@@@@U_Rb_tree_node_base@12@@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::priv::_Rb_tree_node_base,stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > > >::_STLP_alloc_proxy<stlp_std::priv::_Rb_tree_node_base,stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,unsigned short> > > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ?_M_empty_initialize@?$_Rb_tree_base@U?$pair@$$CBVshared_str@@G@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAEXXZ
_TEXT	SEGMENT
?_M_empty_initialize@?$_Rb_tree_base@U?$pair@$$CBVshared_str@@G@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAEXXZ PROC ; stlp_std::priv::_Rb_tree_base<stlp_std::pair<shared_str const ,unsigned short>,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_empty_initialize, COMDAT
; _this$ = eax

; 259  :     _M_header._M_data._M_color = _S_rb_tree_red; // used to distinguish header from

	mov	BYTE PTR [eax], 0

; 260  :                                                  // __root, in iterator.operator++
; 261  :     _M_header._M_data._M_parent = 0;

	mov	DWORD PTR [eax+4], 0

; 262  :     _M_header._M_data._M_left = &_M_header._M_data;

	mov	DWORD PTR [eax+8], eax

; 263  :     _M_header._M_data._M_right = &_M_header._M_data;

	mov	DWORD PTR [eax+12], eax

; 264  :   }

	ret	0
?_M_empty_initialize@?$_Rb_tree_base@U?$pair@$$CBVshared_str@@G@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAEXXZ ENDP ; stlp_std::priv::_Rb_tree_base<stlp_std::pair<shared_str const ,unsigned short>,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_empty_initialize
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_alloc.h
_TEXT	ENDS
;	COMDAT ??0?$_STLP_alloc_proxy@U_Rb_tree_node_base@priv@stlp_std@@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@23@V?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@@priv@stlp_std@@QAE@ABV?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@U_Rb_tree_node_base@12@@Z
_TEXT	SEGMENT
___p$ = 8						; size = 16
??0?$_STLP_alloc_proxy@U_Rb_tree_node_base@priv@stlp_std@@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@23@V?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@@priv@stlp_std@@QAE@ABV?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@U_Rb_tree_node_base@12@@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::priv::_Rb_tree_node_base,stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > > >::_STLP_alloc_proxy<stlp_std::priv::_Rb_tree_node_base,stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > > >, COMDAT
; _this$ = eax

; 571  :     _MaybeReboundAlloc(__a), _M_data(__p) {}

	mov	ecx, DWORD PTR ___p$[esp-4]
	mov	edx, DWORD PTR ___p$[esp]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR ___p$[esp+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR ___p$[esp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
	ret	16					; 00000010H
??0?$_STLP_alloc_proxy@U_Rb_tree_node_base@priv@stlp_std@@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@23@V?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@@priv@stlp_std@@QAE@ABV?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@stlp_std@@@@U_Rb_tree_node_base@12@@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::priv::_Rb_tree_node_base,stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > > >::_STLP_alloc_proxy<stlp_std::priv::_Rb_tree_node_base,stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ?_M_empty_initialize@?$_Rb_tree_base@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEXXZ
_TEXT	SEGMENT
?_M_empty_initialize@?$_Rb_tree_base@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEXXZ PROC ; stlp_std::priv::_Rb_tree_base<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_empty_initialize, COMDAT
; _this$ = eax

; 259  :     _M_header._M_data._M_color = _S_rb_tree_red; // used to distinguish header from

	mov	BYTE PTR [eax], 0

; 260  :                                                  // __root, in iterator.operator++
; 261  :     _M_header._M_data._M_parent = 0;

	mov	DWORD PTR [eax+4], 0

; 262  :     _M_header._M_data._M_left = &_M_header._M_data;

	mov	DWORD PTR [eax+8], eax

; 263  :     _M_header._M_data._M_right = &_M_header._M_data;

	mov	DWORD PTR [eax+12], eax

; 264  :   }

	ret	0
?_M_empty_initialize@?$_Rb_tree_base@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEXXZ ENDP ; stlp_std::priv::_Rb_tree_base<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_empty_initialize
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_alloc.h
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@PAVCMotionDef@@V1@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEPAVCMotionDef@@IAAI@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@PAVCMotionDef@@V1@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEPAVCMotionDef@@IAAI@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<CMotionDef *,CMotionDef,xalloc<CMotionDef> >::allocate, COMDAT
; ___n$ = eax
; ___allocated_n$ = ecx

; 611  : #if !defined (__BORLANDC__)
; 612  :     typedef typename _IsSTLportClass<_MaybeReboundAlloc>::_Ret _STLportAlloc;
; 613  : #else
; 614  :     typedef typename __bool2type<_IsSTLportClass<_MaybeReboundAlloc>::_Is>::_Ret _STLportAlloc;
; 615  : #endif
; 616  :     return allocate(__n, __allocated_n, _STLportAlloc());

	lea	edx, DWORD PTR [eax*8]
	sub	edx, eax
	add	edx, edx
	add	edx, edx
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edx
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 617  :   }

	ret	0
?allocate@?$_STLP_alloc_proxy@PAVCMotionDef@@V1@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEPAVCMotionDef@@IAAI@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<CMotionDef *,CMotionDef,xalloc<CMotionDef> >::allocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xalloc@VCMotionDef@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xalloc@VCMotionDef@@@@QAE@ABV0@@Z PROC		; xalloc<CMotionDef>::xalloc<CMotionDef>, COMDAT
; _this$ = eax

; 78   : 													xalloc			(const xalloc<T>&)						{	}

	ret	0
??0?$xalloc@VCMotionDef@@@@QAE@ABV0@@Z ENDP		; xalloc<CMotionDef>::xalloc<CMotionDef>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_alloc.h
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@PAVmotion_marks@@V1@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEPAVmotion_marks@@IAAI@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@PAVmotion_marks@@V1@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEPAVmotion_marks@@IAAI@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<motion_marks *,motion_marks,xalloc<motion_marks> >::allocate, COMDAT
; ___n$ = eax
; ___allocated_n$ = ecx

; 611  : #if !defined (__BORLANDC__)
; 612  :     typedef typename _IsSTLportClass<_MaybeReboundAlloc>::_Ret _STLportAlloc;
; 613  : #else
; 614  :     typedef typename __bool2type<_IsSTLportClass<_MaybeReboundAlloc>::_Is>::_Ret _STLportAlloc;
; 615  : #endif
; 616  :     return allocate(__n, __allocated_n, _STLportAlloc());

	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	eax, 4
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 617  :   }

	ret	0
?allocate@?$_STLP_alloc_proxy@PAVmotion_marks@@V1@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEPAVmotion_marks@@IAAI@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<motion_marks *,motion_marks,xalloc<motion_marks> >::allocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xalloc@Vmotion_marks@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xalloc@Vmotion_marks@@@@QAE@ABV0@@Z PROC		; xalloc<motion_marks>::xalloc<motion_marks>, COMDAT
; _this$ = eax

; 78   : 													xalloc			(const xalloc<T>&)						{	}

	ret	0
??0?$xalloc@Vmotion_marks@@@@QAE@ABV0@@Z ENDP		; xalloc<motion_marks>::xalloc<motion_marks>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_alloc.h
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@PAU?$pair@MM@stlp_std@@U12@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEPAU?$pair@MM@3@IAAI@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@PAU?$pair@MM@stlp_std@@U12@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEPAU?$pair@MM@3@IAAI@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::pair<float,float> *,stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::allocate, COMDAT
; ___n$ = eax
; ___allocated_n$ = ecx

; 611  : #if !defined (__BORLANDC__)
; 612  :     typedef typename _IsSTLportClass<_MaybeReboundAlloc>::_Ret _STLportAlloc;
; 613  : #else
; 614  :     typedef typename __bool2type<_IsSTLportClass<_MaybeReboundAlloc>::_Is>::_Ret _STLportAlloc;
; 615  : #endif
; 616  :     return allocate(__n, __allocated_n, _STLportAlloc());

	lea	edx, DWORD PTR [eax*8]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edx
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 617  :   }

	ret	0
?allocate@?$_STLP_alloc_proxy@PAU?$pair@MM@stlp_std@@U12@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEPAU?$pair@MM@3@IAAI@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::pair<float,float> *,stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::allocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xalloc@U?$pair@MM@stlp_std@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xalloc@U?$pair@MM@stlp_std@@@@QAE@ABV0@@Z PROC	; xalloc<stlp_std::pair<float,float> >::xalloc<stlp_std::pair<float,float> >, COMDAT
; _this$ = eax

; 78   : 													xalloc			(const xalloc<T>&)						{	}

	ret	0
??0?$xalloc@U?$pair@MM@stlp_std@@@@QAE@ABV0@@Z ENDP	; xalloc<stlp_std::pair<float,float> >::xalloc<stlp_std::pair<float,float> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_alloc.h
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@PAIIV?$xalloc@I@@@priv@stlp_std@@QAEPAIIAAI@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@PAIIV?$xalloc@I@@@priv@stlp_std@@QAEPAIIAAI@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<unsigned int *,unsigned int,xalloc<unsigned int> >::allocate, COMDAT
; ___n$ = eax
; ___allocated_n$ = ecx

; 611  : #if !defined (__BORLANDC__)
; 612  :     typedef typename _IsSTLportClass<_MaybeReboundAlloc>::_Ret _STLportAlloc;
; 613  : #else
; 614  :     typedef typename __bool2type<_IsSTLportClass<_MaybeReboundAlloc>::_Is>::_Ret _STLportAlloc;
; 615  : #endif
; 616  :     return allocate(__n, __allocated_n, _STLportAlloc());

	lea	edx, DWORD PTR [eax*4]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edx
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 617  :   }

	ret	0
?allocate@?$_STLP_alloc_proxy@PAIIV?$xalloc@I@@@priv@stlp_std@@QAEPAIIAAI@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<unsigned int *,unsigned int,xalloc<unsigned int> >::allocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_iterator.h
_TEXT	ENDS
;	COMDAT ??0?$reverse_iterator@PAVCMotionDef@@@stlp_std@@QAE@PAVCMotionDef@@@Z
_TEXT	SEGMENT
??0?$reverse_iterator@PAVCMotionDef@@@stlp_std@@QAE@PAVCMotionDef@@@Z PROC ; stlp_std::reverse_iterator<CMotionDef *>::reverse_iterator<CMotionDef *>, COMDAT
; _this$ = eax
; ___x$ = ecx

; 65   :   explicit reverse_iterator(iterator_type __x) : current(__x) {}

	mov	DWORD PTR [eax], ecx
	ret	0
??0?$reverse_iterator@PAVCMotionDef@@@stlp_std@@QAE@PAVCMotionDef@@@Z ENDP ; stlp_std::reverse_iterator<CMotionDef *>::reverse_iterator<CMotionDef *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$reverse_iterator@PAVmotion_marks@@@stlp_std@@QAE@PAVmotion_marks@@@Z
_TEXT	SEGMENT
??0?$reverse_iterator@PAVmotion_marks@@@stlp_std@@QAE@PAVmotion_marks@@@Z PROC ; stlp_std::reverse_iterator<motion_marks *>::reverse_iterator<motion_marks *>, COMDAT
; _this$ = eax
; ___x$ = ecx

; 65   :   explicit reverse_iterator(iterator_type __x) : current(__x) {}

	mov	DWORD PTR [eax], ecx
	ret	0
??0?$reverse_iterator@PAVmotion_marks@@@stlp_std@@QAE@PAVmotion_marks@@@Z ENDP ; stlp_std::reverse_iterator<motion_marks *>::reverse_iterator<motion_marks *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_tools.h
_TEXT	ENDS
;	COMDAT ?to_value_type_ptr@?$_CastTraits@Vmotion_marks@@V1@@priv@stlp_std@@SAPAVmotion_marks@@PAV4@@Z
_TEXT	SEGMENT
?to_value_type_ptr@?$_CastTraits@Vmotion_marks@@V1@@priv@stlp_std@@SAPAVmotion_marks@@PAV4@@Z PROC ; stlp_std::priv::_CastTraits<motion_marks,motion_marks>::to_value_type_ptr, COMDAT
; ___ptr$ = eax

; 237  :   { return __ptr; }

	ret	0
?to_value_type_ptr@?$_CastTraits@Vmotion_marks@@V1@@priv@stlp_std@@SAPAVmotion_marks@@PAV4@@Z ENDP ; stlp_std::priv::_CastTraits<motion_marks,motion_marks>::to_value_type_ptr
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_iterator.h
_TEXT	ENDS
;	COMDAT ??0?$reverse_iterator@PAU?$pair@MM@stlp_std@@@stlp_std@@QAE@PAU?$pair@MM@1@@Z
_TEXT	SEGMENT
??0?$reverse_iterator@PAU?$pair@MM@stlp_std@@@stlp_std@@QAE@PAU?$pair@MM@1@@Z PROC ; stlp_std::reverse_iterator<stlp_std::pair<float,float> *>::reverse_iterator<stlp_std::pair<float,float> *>, COMDAT
; _this$ = eax
; ___x$ = ecx

; 65   :   explicit reverse_iterator(iterator_type __x) : current(__x) {}

	mov	DWORD PTR [eax], ecx
	ret	0
??0?$reverse_iterator@PAU?$pair@MM@stlp_std@@@stlp_std@@QAE@PAU?$pair@MM@1@@Z ENDP ; stlp_std::reverse_iterator<stlp_std::pair<float,float> *>::reverse_iterator<stlp_std::pair<float,float> *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_tools.h
_TEXT	ENDS
;	COMDAT ?to_value_type_ptr@?$_CastTraits@U?$pair@MM@stlp_std@@U12@@priv@stlp_std@@SAPAU?$pair@MM@3@PAU43@@Z
_TEXT	SEGMENT
?to_value_type_ptr@?$_CastTraits@U?$pair@MM@stlp_std@@U12@@priv@stlp_std@@SAPAU?$pair@MM@3@PAU43@@Z PROC ; stlp_std::priv::_CastTraits<stlp_std::pair<float,float>,stlp_std::pair<float,float> >::to_value_type_ptr, COMDAT
; ___ptr$ = eax

; 237  :   { return __ptr; }

	ret	0
?to_value_type_ptr@?$_CastTraits@U?$pair@MM@stlp_std@@U12@@priv@stlp_std@@SAPAU?$pair@MM@3@PAU43@@Z ENDP ; stlp_std::priv::_CastTraits<stlp_std::pair<float,float>,stlp_std::pair<float,float> >::to_value_type_ptr
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_value_type_ptr@?$_CastTraits@GG@priv@stlp_std@@SAPAGPAG@Z
_TEXT	SEGMENT
?to_value_type_ptr@?$_CastTraits@GG@priv@stlp_std@@SAPAGPAG@Z PROC ; stlp_std::priv::_CastTraits<unsigned short,unsigned short>::to_value_type_ptr, COMDAT
; ___ptr$ = eax

; 237  :   { return __ptr; }

	ret	0
?to_value_type_ptr@?$_CastTraits@GG@priv@stlp_std@@SAPAGPAG@Z ENDP ; stlp_std::priv::_CastTraits<unsigned short,unsigned short>::to_value_type_ptr
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?deallocate@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@QBEXPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@I@Z
_TEXT	SEGMENT
?deallocate@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@QBEXPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@I@Z PROC ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > >::deallocate, COMDAT
; _p$ = eax

; 83   : 							void					deallocate		(pointer p, size_type n) const			{	xr_free	(p);				}

	test	eax, eax
	je	SHORT $LN3@deallocate@4
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN3@deallocate@4:
	ret	0
?deallocate@?$xalloc@U?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@@@QBEXPAU?$_Rb_tree_node@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@stlp_std@@I@Z ENDP ; xalloc<stlp_std::priv::_Rb_tree_node<stlp_std::pair<shared_str const ,motions_value *> > >::deallocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ??0?$_Rb_tree_base@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAE@ABV?$xalloc@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@@@Z
_TEXT	SEGMENT
??0?$_Rb_tree_base@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAE@ABV?$xalloc@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@@@Z PROC ; stlp_std::priv::_Rb_tree_base<stlp_std::pair<shared_str const ,motions_value *>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_Rb_tree_base<stlp_std::pair<shared_str const ,motions_value *>,xalloc<stlp_std::pair<shared_str,motions_value *> > >, COMDAT
; _this$ = eax

; 250  :     _M_header(_STLP_CONVERT_ALLOCATOR(__a, _Node), _Node_base() ) {

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx

; 251  :     _M_empty_initialize();

	mov	BYTE PTR [eax], cl
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], eax
	mov	DWORD PTR [eax+12], eax

; 252  :   }

	ret	0
??0?$_Rb_tree_base@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAE@ABV?$xalloc@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@@@Z ENDP ; stlp_std::priv::_Rb_tree_base<stlp_std::pair<shared_str const ,motions_value *>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_Rb_tree_base<stlp_std::pair<shared_str const ,motions_value *>,xalloc<stlp_std::pair<shared_str,motions_value *> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?get_allocator@?$_Rb_tree_base@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QBE?AV?$xalloc@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@@XZ
_TEXT	SEGMENT
?get_allocator@?$_Rb_tree_base@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QBE?AV?$xalloc@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@@XZ PROC ; stlp_std::priv::_Rb_tree_base<stlp_std::pair<shared_str const ,motions_value *>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::get_allocator, COMDAT
; ___$ReturnUdt$ = eax

; 245  :     return _STLP_CONVERT_ALLOCATOR(_M_header, _Tp);
; 246  :   }

	ret	0
?get_allocator@?$_Rb_tree_base@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QBE?AV?$xalloc@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@@XZ ENDP ; stlp_std::priv::_Rb_tree_base<stlp_std::pair<shared_str const ,motions_value *>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::get_allocator
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?size@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QBEIXZ PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::size, COMDAT
; _this$ = eax

; 428  :   size_type size() const { return _M_node_count; }

	mov	eax, DWORD PTR [eax+16]
	ret	0
?size@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QBEIXZ ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_S_color@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAAA_NPAU_Rb_tree_node_base@23@@Z
_TEXT	SEGMENT
?_S_color@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAAA_NPAU_Rb_tree_node_base@23@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_S_color, COMDAT
; ___x$ = eax

; 356  :   { return (_Color_type&)(__x->_M_color); }

	ret	0
?_S_color@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAAA_NPAU_Rb_tree_node_base@23@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_S_color
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_S_value@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAAAU?$pair@$$CBVshared_str@@PAUmotions_value@@@3@PAU_Rb_tree_node_base@23@@Z
_TEXT	SEGMENT
?_S_value@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAAAU?$pair@$$CBVshared_str@@PAUmotions_value@@@3@PAU_Rb_tree_node_base@23@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_S_value, COMDAT
; ___x$ = eax

; 352  :   { return __STATIC_CAST(_Link_type, __x)->_M_value_field; }

	add	eax, 16					; 00000010H
	ret	0
?_S_value@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAAAU?$pair@$$CBVshared_str@@PAUmotions_value@@@3@PAU_Rb_tree_node_base@23@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_S_value
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_rightmost@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ
_TEXT	SEGMENT
?_M_rightmost@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_rightmost, COMDAT
; _this$ = eax

; 343  :   { return this->_M_header._M_data._M_right; }

	add	eax, 12					; 0000000cH
	ret	0
?_M_rightmost@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_rightmost
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_leftmost@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ
_TEXT	SEGMENT
?_M_leftmost@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_leftmost, COMDAT
; _this$ = eax

; 341  :   { return this->_M_header._M_data._M_left; }

	add	eax, 8
	ret	0
?_M_leftmost@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_leftmost
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_root@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ
_TEXT	SEGMENT
?_M_root@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_root, COMDAT
; _this$ = eax

; 339  :   { return this->_M_header._M_data._M_parent; }

	add	eax, 4
	ret	0
?_M_root@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_root
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_root@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IBEPAU_Rb_tree_node_base@23@XZ
_TEXT	SEGMENT
?_M_root@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IBEPAU_Rb_tree_node_base@23@XZ PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_root, COMDAT
; _this$ = eax

; 332  :   { return this->_M_header._M_data._M_parent; }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?_M_root@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IBEPAU_Rb_tree_node_base@23@XZ ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_root
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Rb_tree_base@U?$pair@$$CBVshared_str@@G@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAE@ABV?$xalloc@U?$pair@$$CBVshared_str@@G@stlp_std@@@@@Z
_TEXT	SEGMENT
??0?$_Rb_tree_base@U?$pair@$$CBVshared_str@@G@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAE@ABV?$xalloc@U?$pair@$$CBVshared_str@@G@stlp_std@@@@@Z PROC ; stlp_std::priv::_Rb_tree_base<stlp_std::pair<shared_str const ,unsigned short>,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_Rb_tree_base<stlp_std::pair<shared_str const ,unsigned short>,xalloc<stlp_std::pair<shared_str,unsigned short> > >, COMDAT
; _this$ = eax

; 250  :     _M_header(_STLP_CONVERT_ALLOCATOR(__a, _Node), _Node_base() ) {

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx

; 251  :     _M_empty_initialize();

	mov	BYTE PTR [eax], cl
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], eax
	mov	DWORD PTR [eax+12], eax

; 252  :   }

	ret	0
??0?$_Rb_tree_base@U?$pair@$$CBVshared_str@@G@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAE@ABV?$xalloc@U?$pair@$$CBVshared_str@@G@stlp_std@@@@@Z ENDP ; stlp_std::priv::_Rb_tree_base<stlp_std::pair<shared_str const ,unsigned short>,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_Rb_tree_base<stlp_std::pair<shared_str const ,unsigned short>,xalloc<stlp_std::pair<shared_str,unsigned short> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?get_allocator@?$_Rb_tree_base@U?$pair@$$CBVshared_str@@G@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QBE?AV?$xalloc@U?$pair@$$CBVshared_str@@G@stlp_std@@@@XZ
_TEXT	SEGMENT
?get_allocator@?$_Rb_tree_base@U?$pair@$$CBVshared_str@@G@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QBE?AV?$xalloc@U?$pair@$$CBVshared_str@@G@stlp_std@@@@XZ PROC ; stlp_std::priv::_Rb_tree_base<stlp_std::pair<shared_str const ,unsigned short>,xalloc<stlp_std::pair<shared_str,unsigned short> > >::get_allocator, COMDAT
; ___$ReturnUdt$ = eax

; 245  :     return _STLP_CONVERT_ALLOCATOR(_M_header, _Tp);
; 246  :   }

	ret	0
?get_allocator@?$_Rb_tree_base@U?$pair@$$CBVshared_str@@G@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QBE?AV?$xalloc@U?$pair@$$CBVshared_str@@G@stlp_std@@@@XZ ENDP ; stlp_std::priv::_Rb_tree_base<stlp_std::pair<shared_str const ,unsigned short>,xalloc<stlp_std::pair<shared_str,unsigned short> > >::get_allocator
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?size@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QBEIXZ PROC ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::size, COMDAT
; _this$ = eax

; 428  :   size_type size() const { return _M_node_count; }

	mov	eax, DWORD PTR [eax+16]
	ret	0
?size@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QBEIXZ ENDP ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_S_color@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAAA_NPAU_Rb_tree_node_base@23@@Z
_TEXT	SEGMENT
?_S_color@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAAA_NPAU_Rb_tree_node_base@23@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_S_color, COMDAT
; ___x$ = eax

; 356  :   { return (_Color_type&)(__x->_M_color); }

	ret	0
?_S_color@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAAA_NPAU_Rb_tree_node_base@23@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_S_color
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_rightmost@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ
_TEXT	SEGMENT
?_M_rightmost@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ PROC ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_rightmost, COMDAT
; _this$ = eax

; 343  :   { return this->_M_header._M_data._M_right; }

	add	eax, 12					; 0000000cH
	ret	0
?_M_rightmost@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ ENDP ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_rightmost
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_leftmost@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ
_TEXT	SEGMENT
?_M_leftmost@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ PROC ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_leftmost, COMDAT
; _this$ = eax

; 341  :   { return this->_M_header._M_data._M_left; }

	add	eax, 8
	ret	0
?_M_leftmost@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ ENDP ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_leftmost
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_root@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ
_TEXT	SEGMENT
?_M_root@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ PROC ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_root, COMDAT
; _this$ = eax

; 339  :   { return this->_M_header._M_data._M_parent; }

	add	eax, 4
	ret	0
?_M_root@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ ENDP ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_root
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_root@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IBEPAU_Rb_tree_node_base@23@XZ
_TEXT	SEGMENT
?_M_root@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IBEPAU_Rb_tree_node_base@23@XZ PROC ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_root, COMDAT
; _this$ = eax

; 332  :   { return this->_M_header._M_data._M_parent; }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?_M_root@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IBEPAU_Rb_tree_node_base@23@XZ ENDP ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_root
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Rb_tree_base@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAE@ABV?$xalloc@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@Z
_TEXT	SEGMENT
??0?$_Rb_tree_base@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAE@ABV?$xalloc@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@Z PROC ; stlp_std::priv::_Rb_tree_base<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_Rb_tree_base<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >, COMDAT
; _this$ = eax

; 250  :     _M_header(_STLP_CONVERT_ALLOCATOR(__a, _Node), _Node_base() ) {

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx

; 251  :     _M_empty_initialize();

	mov	BYTE PTR [eax], cl
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], eax
	mov	DWORD PTR [eax+12], eax

; 252  :   }

	ret	0
??0?$_Rb_tree_base@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAE@ABV?$xalloc@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@Z ENDP ; stlp_std::priv::_Rb_tree_base<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_Rb_tree_base<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?get_allocator@?$_Rb_tree_base@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QBE?AV?$xalloc@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@XZ
_TEXT	SEGMENT
?get_allocator@?$_Rb_tree_base@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QBE?AV?$xalloc@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@XZ PROC ; stlp_std::priv::_Rb_tree_base<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::get_allocator, COMDAT
; ___$ReturnUdt$ = eax

; 245  :     return _STLP_CONVERT_ALLOCATOR(_M_header, _Tp);
; 246  :   }

	ret	0
?get_allocator@?$_Rb_tree_base@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QBE?AV?$xalloc@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@XZ ENDP ; stlp_std::priv::_Rb_tree_base<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::get_allocator
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_S_color@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAAA_NPAU_Rb_tree_node_base@23@@Z
_TEXT	SEGMENT
?_S_color@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAAA_NPAU_Rb_tree_node_base@23@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_S_color, COMDAT
; ___x$ = eax

; 356  :   { return (_Color_type&)(__x->_M_color); }

	ret	0
?_S_color@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAAA_NPAU_Rb_tree_node_base@23@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_S_color
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_rightmost@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ
_TEXT	SEGMENT
?_M_rightmost@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_rightmost, COMDAT
; _this$ = eax

; 343  :   { return this->_M_header._M_data._M_right; }

	add	eax, 12					; 0000000cH
	ret	0
?_M_rightmost@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_rightmost
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_leftmost@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ
_TEXT	SEGMENT
?_M_leftmost@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_leftmost, COMDAT
; _this$ = eax

; 341  :   { return this->_M_header._M_data._M_left; }

	add	eax, 8
	ret	0
?_M_leftmost@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_leftmost
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_root@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ
_TEXT	SEGMENT
?_M_root@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_root, COMDAT
; _this$ = eax

; 339  :   { return this->_M_header._M_data._M_parent; }

	add	eax, 4
	ret	0
?_M_root@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_root
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_root@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IBEPAU_Rb_tree_node_base@23@XZ
_TEXT	SEGMENT
?_M_root@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IBEPAU_Rb_tree_node_base@23@XZ PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_root, COMDAT
; _this$ = eax

; 332  :   { return this->_M_header._M_data._M_parent; }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?_M_root@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IBEPAU_Rb_tree_node_base@23@XZ ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_root
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?size@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QBEIXZ PROC ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::size, COMDAT
; _this$ = eax

; 180  :   size_type size() const        { return size_type(this->_M_finish - this->_M_start); }

	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR [eax]
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	ret	0
?size@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QBEIXZ ENDP ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?size@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QBEIXZ PROC ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::size, COMDAT
; _this$ = eax

; 180  :   size_type size() const        { return size_type(this->_M_finish - this->_M_start); }

	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR [eax]
	mov	eax, -1840700269			; 92492493H
	imul	ecx
	add	edx, ecx
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	ret	0
?size@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QBEIXZ ENDP ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?end@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QBEPBVCMotionDef@@XZ
_TEXT	SEGMENT
?end@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QBEPBVCMotionDef@@XZ PROC ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::end, COMDAT
; _this$ = eax

; 173  :   const_iterator end() const   { return this->_M_finish; }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?end@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QBEPBVCMotionDef@@XZ ENDP ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QBEPBVCMotionDef@@XZ
_TEXT	SEGMENT
?begin@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QBEPBVCMotionDef@@XZ PROC ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::begin, COMDAT
; _this$ = eax

; 171  :   const_iterator begin() const { return this->_M_start; }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QBEPBVCMotionDef@@XZ ENDP ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::begin
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?get_allocator@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QBE?AV?$xalloc@VCMotionDef@@@@XZ
_TEXT	SEGMENT
?get_allocator@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QBE?AV?$xalloc@VCMotionDef@@@@XZ PROC ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::get_allocator, COMDAT
; ___$ReturnUdt$ = eax

; 134  :   { return _STLP_CONVERT_ALLOCATOR((const allocator_type&)this->_M_end_of_storage, _Tp); }

	ret	0
?get_allocator@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QBE?AV?$xalloc@VCMotionDef@@@@XZ ENDP ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::get_allocator
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?deallocate@?$xalloc@VCMotionDef@@@@QBEXPAVCMotionDef@@I@Z
_TEXT	SEGMENT
?deallocate@?$xalloc@VCMotionDef@@@@QBEXPAVCMotionDef@@I@Z PROC ; xalloc<CMotionDef>::deallocate, COMDAT
; _p$ = eax

; 83   : 							void					deallocate		(pointer p, size_type n) const			{	xr_free	(p);				}

	test	eax, eax
	je	SHORT $LN3@deallocate@5
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN3@deallocate@5:
	ret	0
?deallocate@?$xalloc@VCMotionDef@@@@QBEXPAVCMotionDef@@I@Z ENDP ; xalloc<CMotionDef>::deallocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?size@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QBEIXZ PROC ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::size, COMDAT
; _this$ = ecx

; 180  :   size_type size() const        { return size_type(this->_M_finish - this->_M_start); }

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 4
	ret	0
?size@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QBEIXZ ENDP ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?end@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QBEPBVmotion_marks@@XZ
_TEXT	SEGMENT
?end@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QBEPBVmotion_marks@@XZ PROC ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::end, COMDAT
; _this$ = eax

; 173  :   const_iterator end() const   { return this->_M_finish; }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?end@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QBEPBVmotion_marks@@XZ ENDP ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?end@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEPAVmotion_marks@@XZ
_TEXT	SEGMENT
?end@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEPAVmotion_marks@@XZ PROC ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::end, COMDAT
; _this$ = eax

; 172  :   iterator end()               { return this->_M_finish; }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?end@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEPAVmotion_marks@@XZ ENDP ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QBEPBVmotion_marks@@XZ
_TEXT	SEGMENT
?begin@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QBEPBVmotion_marks@@XZ PROC ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::begin, COMDAT
; _this$ = eax

; 171  :   const_iterator begin() const { return this->_M_start; }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QBEPBVmotion_marks@@XZ ENDP ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::begin
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEPAVmotion_marks@@XZ
_TEXT	SEGMENT
?begin@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEPAVmotion_marks@@XZ PROC ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::begin, COMDAT
; _this$ = eax

; 170  :   iterator begin()             { return this->_M_start; }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEPAVmotion_marks@@XZ ENDP ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::begin
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?get_allocator@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QBE?AV?$xalloc@Vmotion_marks@@@@XZ
_TEXT	SEGMENT
?get_allocator@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QBE?AV?$xalloc@Vmotion_marks@@@@XZ PROC ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::get_allocator, COMDAT
; ___$ReturnUdt$ = eax

; 134  :   { return _STLP_CONVERT_ALLOCATOR((const allocator_type&)this->_M_end_of_storage, _Tp); }

	ret	0
?get_allocator@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QBE?AV?$xalloc@Vmotion_marks@@@@XZ ENDP ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::get_allocator
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?deallocate@?$xalloc@Vmotion_marks@@@@QBEXPAVmotion_marks@@I@Z
_TEXT	SEGMENT
?deallocate@?$xalloc@Vmotion_marks@@@@QBEXPAVmotion_marks@@I@Z PROC ; xalloc<motion_marks>::deallocate, COMDAT
; _p$ = eax

; 83   : 							void					deallocate		(pointer p, size_type n) const			{	xr_free	(p);				}

	test	eax, eax
	je	SHORT $LN3@deallocate@6
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN3@deallocate@6:
	ret	0
?deallocate@?$xalloc@Vmotion_marks@@@@QBEXPAVmotion_marks@@I@Z ENDP ; xalloc<motion_marks>::deallocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?size@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QBEIXZ PROC ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::size, COMDAT
; _this$ = ecx

; 180  :   size_type size() const        { return size_type(this->_M_finish - this->_M_start); }

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 3
	ret	0
?size@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QBEIXZ ENDP ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?end@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEPAU?$pair@MM@3@XZ
_TEXT	SEGMENT
?end@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEPAU?$pair@MM@3@XZ PROC ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::end, COMDAT
; _this$ = eax

; 172  :   iterator end()               { return this->_M_finish; }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?end@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEPAU?$pair@MM@3@XZ ENDP ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEPAU?$pair@MM@3@XZ
_TEXT	SEGMENT
?begin@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEPAU?$pair@MM@3@XZ PROC ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::begin, COMDAT
; _this$ = eax

; 170  :   iterator begin()             { return this->_M_start; }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEPAU?$pair@MM@3@XZ ENDP ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::begin
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?get_allocator@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QBE?AV?$xalloc@U?$pair@MM@stlp_std@@@@XZ
_TEXT	SEGMENT
?get_allocator@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QBE?AV?$xalloc@U?$pair@MM@stlp_std@@@@XZ PROC ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::get_allocator, COMDAT
; ___$ReturnUdt$ = eax

; 134  :   { return _STLP_CONVERT_ALLOCATOR((const allocator_type&)this->_M_end_of_storage, _Tp); }

	ret	0
?get_allocator@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QBE?AV?$xalloc@U?$pair@MM@stlp_std@@@@XZ ENDP ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::get_allocator
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?deallocate@?$xalloc@U?$pair@MM@stlp_std@@@@QBEXPAU?$pair@MM@stlp_std@@I@Z
_TEXT	SEGMENT
?deallocate@?$xalloc@U?$pair@MM@stlp_std@@@@QBEXPAU?$pair@MM@stlp_std@@I@Z PROC ; xalloc<stlp_std::pair<float,float> >::deallocate, COMDAT
; _p$ = eax

; 83   : 							void					deallocate		(pointer p, size_type n) const			{	xr_free	(p);				}

	test	eax, eax
	je	SHORT $LN3@deallocate@7
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN3@deallocate@7:
	ret	0
?deallocate@?$xalloc@U?$pair@MM@stlp_std@@@@QBEXPAU?$pair@MM@stlp_std@@I@Z ENDP ; xalloc<stlp_std::pair<float,float> >::deallocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_tools.h
_TEXT	ENDS
;	COMDAT ?to_storage_type_ptr@?$_CastTraits@II@priv@stlp_std@@SAPAIPAI@Z
_TEXT	SEGMENT
?to_storage_type_ptr@?$_CastTraits@II@priv@stlp_std@@SAPAIPAI@Z PROC ; stlp_std::priv::_CastTraits<unsigned int,unsigned int>::to_storage_type_ptr, COMDAT
; ___ptr$ = eax

; 248  :   { return __ptr; }

	ret	0
?to_storage_type_ptr@?$_CastTraits@II@priv@stlp_std@@SAPAIPAI@Z ENDP ; stlp_std::priv::_CastTraits<unsigned int,unsigned int>::to_storage_type_ptr
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?size@?$_Impl_vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@priv@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Impl_vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@priv@stlp_std@@QBEIXZ PROC ; stlp_std::priv::_Impl_vector<CInifile::Item,xalloc<CInifile::Item> >::size, COMDAT
; _this$ = ecx

; 180  :   size_type size() const        { return size_type(this->_M_finish - this->_M_start); }

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 3
	ret	0
?size@?$_Impl_vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@priv@stlp_std@@QBEIXZ ENDP ; stlp_std::priv::_Impl_vector<CInifile::Item,xalloc<CInifile::Item> >::size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Vector_base@IV?$xalloc@I@@@priv@stlp_std@@QAE@IABV?$xalloc@I@@@Z
_TEXT	SEGMENT
??0?$_Vector_base@IV?$xalloc@I@@@priv@stlp_std@@QAE@IABV?$xalloc@I@@@Z PROC ; stlp_std::priv::_Vector_base<unsigned int,xalloc<unsigned int> >::_Vector_base<unsigned int,xalloc<unsigned int> >, COMDAT
; _this$ = esi
; ___n$ = ecx

; 70   :     : _M_start(0), _M_finish(0), _M_end_of_storage(__a, 0) {

	push	edi

; 71   :     _M_start = _M_end_of_storage.allocate(__n, __n);

	mov	edi, ecx
	xor	eax, eax
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	add	edi, edi
	mov	DWORD PTR [esi+8], eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	edi, edi
	push	edi
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 72   :     _M_finish = _M_start;
; 73   :     _M_end_of_storage._M_data = _M_start + __n;

	add	edi, eax
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], edi

; 74   :     _STLP_MPWFIX_TRY _STLP_MPWFIX_CATCH
; 75   :   }

	mov	eax, esi
	pop	edi
	ret	0
??0?$_Vector_base@IV?$xalloc@I@@@priv@stlp_std@@QAE@IABV?$xalloc@I@@@Z ENDP ; stlp_std::priv::_Vector_base<unsigned int,xalloc<unsigned int> >::_Vector_base<unsigned int,xalloc<unsigned int> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?size@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QBEIXZ PROC ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::size, COMDAT
; _this$ = ecx

; 180  :   size_type size() const        { return size_type(this->_M_finish - this->_M_start); }

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
	ret	0
?size@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QBEIXZ ENDP ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?end@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QBEPBIXZ
_TEXT	SEGMENT
?end@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QBEPBIXZ PROC ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::end, COMDAT
; _this$ = eax

; 173  :   const_iterator end() const   { return this->_M_finish; }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?end@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QBEPBIXZ ENDP ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QBEPBIXZ
_TEXT	SEGMENT
?begin@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QBEPBIXZ PROC ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::begin, COMDAT
; _this$ = eax

; 171  :   const_iterator begin() const { return this->_M_start; }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QBEPBIXZ ENDP ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::begin
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?get_allocator@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QBE?AV?$xalloc@I@@XZ
_TEXT	SEGMENT
?get_allocator@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QBE?AV?$xalloc@I@@XZ PROC ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::get_allocator, COMDAT
; ___$ReturnUdt$ = eax

; 134  :   { return _STLP_CONVERT_ALLOCATOR((const allocator_type&)this->_M_end_of_storage, _Tp); }

	ret	0
?get_allocator@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QBE?AV?$xalloc@I@@XZ ENDP ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::get_allocator
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xalloc@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xalloc@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@@QAE@XZ PROC ; xalloc<stlp_std::pair<shared_str const ,motions_value *> >::xalloc<stlp_std::pair<shared_str const ,motions_value *> >, COMDAT
; _this$ = eax

; 77   : 													xalloc			()										{	}

	ret	0
??0?$xalloc@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@@QAE@XZ ENDP ; xalloc<stlp_std::pair<shared_str const ,motions_value *> >::xalloc<stlp_std::pair<shared_str const ,motions_value *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$xalloc@U?$pair@$$CBVshared_str@@G@stlp_std@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xalloc@U?$pair@$$CBVshared_str@@G@stlp_std@@@@QAE@XZ PROC ; xalloc<stlp_std::pair<shared_str const ,unsigned short> >::xalloc<stlp_std::pair<shared_str const ,unsigned short> >, COMDAT
; _this$ = eax

; 77   : 													xalloc			()										{	}

	ret	0
??0?$xalloc@U?$pair@$$CBVshared_str@@G@stlp_std@@@@QAE@XZ ENDP ; xalloc<stlp_std::pair<shared_str const ,unsigned short> >::xalloc<stlp_std::pair<shared_str const ,unsigned short> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$xalloc@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xalloc@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@QAE@XZ PROC ; xalloc<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >::xalloc<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >, COMDAT
; _this$ = eax

; 77   : 													xalloc			()										{	}

	ret	0
??0?$xalloc@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@QAE@XZ ENDP ; xalloc<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >::xalloc<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_tools.h
_TEXT	ENDS
;	COMDAT ?to_storage_type_cref@?$_CastTraits@VCMotion@@V1@@priv@stlp_std@@SAABVCMotion@@ABV4@@Z
_TEXT	SEGMENT
?to_storage_type_cref@?$_CastTraits@VCMotion@@V1@@priv@stlp_std@@SAABVCMotion@@ABV4@@Z PROC ; stlp_std::priv::_CastTraits<CMotion,CMotion>::to_storage_type_cref, COMDAT
; ___ref$ = eax

; 254  :   { return __ref; }

	ret	0
?to_storage_type_cref@?$_CastTraits@VCMotion@@V1@@priv@stlp_std@@SAABVCMotion@@ABV4@@Z ENDP ; stlp_std::priv::_CastTraits<CMotion,CMotion>::to_storage_type_cref
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_value_type_ptr@?$_CastTraits@VCMotion@@V1@@priv@stlp_std@@SAPAVCMotion@@PAV4@@Z
_TEXT	SEGMENT
?to_value_type_ptr@?$_CastTraits@VCMotion@@V1@@priv@stlp_std@@SAPAVCMotion@@PAV4@@Z PROC ; stlp_std::priv::_CastTraits<CMotion,CMotion>::to_value_type_ptr, COMDAT
; ___ptr$ = eax

; 237  :   { return __ptr; }

	ret	0
?to_value_type_ptr@?$_CastTraits@VCMotion@@V1@@priv@stlp_std@@SAPAVCMotion@@PAV4@@Z ENDP ; stlp_std::priv::_CastTraits<CMotion,CMotion>::to_value_type_ptr
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_storage_type_cref@?$_CastTraits@VCMotionDef@@V1@@priv@stlp_std@@SAABVCMotionDef@@ABV4@@Z
_TEXT	SEGMENT
?to_storage_type_cref@?$_CastTraits@VCMotionDef@@V1@@priv@stlp_std@@SAABVCMotionDef@@ABV4@@Z PROC ; stlp_std::priv::_CastTraits<CMotionDef,CMotionDef>::to_storage_type_cref, COMDAT
; ___ref$ = eax

; 254  :   { return __ref; }

	ret	0
?to_storage_type_cref@?$_CastTraits@VCMotionDef@@V1@@priv@stlp_std@@SAABVCMotionDef@@ABV4@@Z ENDP ; stlp_std::priv::_CastTraits<CMotionDef,CMotionDef>::to_storage_type_cref
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_value_type_ptr@?$_CastTraits@VCMotionDef@@V1@@priv@stlp_std@@SAPAVCMotionDef@@PAV4@@Z
_TEXT	SEGMENT
?to_value_type_ptr@?$_CastTraits@VCMotionDef@@V1@@priv@stlp_std@@SAPAVCMotionDef@@PAV4@@Z PROC ; stlp_std::priv::_CastTraits<CMotionDef,CMotionDef>::to_value_type_ptr, COMDAT
; ___ptr$ = eax

; 237  :   { return __ptr; }

	ret	0
?to_value_type_ptr@?$_CastTraits@VCMotionDef@@V1@@priv@stlp_std@@SAPAVCMotionDef@@PAV4@@Z ENDP ; stlp_std::priv::_CastTraits<CMotionDef,CMotionDef>::to_value_type_ptr
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_storage_type_cref@?$_CastTraits@Vmotion_marks@@V1@@priv@stlp_std@@SAABVmotion_marks@@ABV4@@Z
_TEXT	SEGMENT
?to_storage_type_cref@?$_CastTraits@Vmotion_marks@@V1@@priv@stlp_std@@SAABVmotion_marks@@ABV4@@Z PROC ; stlp_std::priv::_CastTraits<motion_marks,motion_marks>::to_storage_type_cref, COMDAT
; ___ref$ = eax

; 254  :   { return __ref; }

	ret	0
?to_storage_type_cref@?$_CastTraits@Vmotion_marks@@V1@@priv@stlp_std@@SAABVmotion_marks@@ABV4@@Z ENDP ; stlp_std::priv::_CastTraits<motion_marks,motion_marks>::to_storage_type_cref
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_storage_type_cref@?$_CastTraits@U?$pair@MM@stlp_std@@U12@@priv@stlp_std@@SAABU?$pair@MM@3@ABU43@@Z
_TEXT	SEGMENT
?to_storage_type_cref@?$_CastTraits@U?$pair@MM@stlp_std@@U12@@priv@stlp_std@@SAABU?$pair@MM@3@ABU43@@Z PROC ; stlp_std::priv::_CastTraits<stlp_std::pair<float,float>,stlp_std::pair<float,float> >::to_storage_type_cref, COMDAT
; ___ref$ = eax

; 254  :   { return __ref; }

	ret	0
?to_storage_type_cref@?$_CastTraits@U?$pair@MM@stlp_std@@U12@@priv@stlp_std@@SAABU?$pair@MM@3@ABU43@@Z ENDP ; stlp_std::priv::_CastTraits<stlp_std::pair<float,float>,stlp_std::pair<float,float> >::to_storage_type_cref
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_value_type_cptr@?$_CastTraits@U?$pair@MM@stlp_std@@U12@@priv@stlp_std@@SAPBU?$pair@MM@3@PBU43@@Z
_TEXT	SEGMENT
?to_value_type_cptr@?$_CastTraits@U?$pair@MM@stlp_std@@U12@@priv@stlp_std@@SAPBU?$pair@MM@3@PBU43@@Z PROC ; stlp_std::priv::_CastTraits<stlp_std::pair<float,float>,stlp_std::pair<float,float> >::to_value_type_cptr, COMDAT
; ___ptr$ = eax

; 239  :   { return __ptr; }

	ret	0
?to_value_type_cptr@?$_CastTraits@U?$pair@MM@stlp_std@@U12@@priv@stlp_std@@SAPBU?$pair@MM@3@PBU43@@Z ENDP ; stlp_std::priv::_CastTraits<stlp_std::pair<float,float>,stlp_std::pair<float,float> >::to_value_type_cptr
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_value_type_ptr@?$_CastTraits@UItem@CInifile@@U12@@priv@stlp_std@@SAPAUItem@CInifile@@PAU45@@Z
_TEXT	SEGMENT
?to_value_type_ptr@?$_CastTraits@UItem@CInifile@@U12@@priv@stlp_std@@SAPAUItem@CInifile@@PAU45@@Z PROC ; stlp_std::priv::_CastTraits<CInifile::Item,CInifile::Item>::to_value_type_ptr, COMDAT
; ___ptr$ = eax

; 237  :   { return __ptr; }

	ret	0
?to_value_type_ptr@?$_CastTraits@UItem@CInifile@@U12@@priv@stlp_std@@SAPAUItem@CInifile@@PAU45@@Z ENDP ; stlp_std::priv::_CastTraits<CInifile::Item,CInifile::Item>::to_value_type_ptr
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ??D?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QBEAAU?$pair@$$CBVshared_str@@PAUmotions_value@@@2@XZ
_TEXT	SEGMENT
??D?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QBEAAU?$pair@$$CBVshared_str@@PAUmotions_value@@@2@XZ PROC ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >::operator*, COMDAT
; _this$ = eax

; 171  :     return __STATIC_CAST(_Link_type, _M_node)->_M_value_field;

	mov	eax, DWORD PTR [eax]
	add	eax, 16					; 00000010H

; 172  :   }

	ret	0
??D?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QBEAAU?$pair@$$CBVshared_str@@PAUmotions_value@@@2@XZ ENDP ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >::operator*
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE@ABU?$less@Vshared_str@@@2@ABV?$xalloc@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@@@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 4
??0?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE@ABU?$less@Vshared_str@@@2@ABV?$xalloc@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >, COMDAT
; _this$ = eax

; 388  :     {}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	BYTE PTR [eax], cl
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	ecx, DWORD PTR ___comp$[esp-4]
	mov	DWORD PTR [eax+8], eax
	mov	DWORD PTR [eax+12], eax
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax+20], dl
	ret	4
??0?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE@ABU?$less@Vshared_str@@@2@ABV?$xalloc@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_map.h
_TEXT	ENDS
;	COMDAT ?size@?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?size@?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QBEIXZ PROC ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::size, COMDAT
; _this$ = eax

; 170  :   size_type size() const { return _M_t.size(); }

	mov	eax, DWORD PTR [eax+16]
	ret	0
?size@?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QBEIXZ ENDP ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::size
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ??0?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAE@ABUaccel_str_pred@@ABV?$xalloc@U?$pair@$$CBVshared_str@@G@stlp_std@@@@@Z
_TEXT	SEGMENT
??0?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAE@ABUaccel_str_pred@@ABV?$xalloc@U?$pair@$$CBVshared_str@@G@stlp_std@@@@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >, COMDAT
; _this$ = eax

; 388  :     {}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	BYTE PTR [eax], cl
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], eax
	mov	DWORD PTR [eax+12], eax
	mov	DWORD PTR [eax+16], ecx
	ret	0
??0?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAE@ABUaccel_str_pred@@ABV?$xalloc@U?$pair@$$CBVshared_str@@G@stlp_std@@@@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_map.h
_TEXT	ENDS
;	COMDAT ?size@?$map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?size@?$map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@stlp_std@@QBEIXZ PROC ; stlp_std::map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::size, COMDAT
; _this$ = eax

; 170  :   size_type size() const { return _M_t.size(); }

	mov	eax, DWORD PTR [eax+16]
	ret	0
?size@?$map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@stlp_std@@QBEIXZ ENDP ; stlp_std::map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::size
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ??0?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE@ABU?$less@Vshared_str@@@2@ABV?$xalloc@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 4
??0?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE@ABU?$less@Vshared_str@@@2@ABV?$xalloc@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >, COMDAT
; _this$ = eax

; 388  :     {}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	BYTE PTR [eax], cl
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	ecx, DWORD PTR ___comp$[esp-4]
	mov	DWORD PTR [eax+8], eax
	mov	DWORD PTR [eax+12], eax
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax+20], dl
	ret	4
??0?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE@ABU?$less@Vshared_str@@@2@ABV?$xalloc@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?end@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAEPAVCMotion@@XZ
_TEXT	SEGMENT
?end@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAEPAVCMotion@@XZ PROC ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::end, COMDAT
; _this$ = eax

; 172  :   iterator end()               { return this->_M_finish; }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?end@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAEPAVCMotion@@XZ ENDP ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAEPAVCMotion@@XZ
_TEXT	SEGMENT
?begin@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAEPAVCMotion@@XZ PROC ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::begin, COMDAT
; _this$ = eax

; 170  :   iterator begin()             { return this->_M_start; }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAEPAVCMotion@@XZ ENDP ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::begin
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$_Vector_base@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_base@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@XZ PROC ; stlp_std::priv::_Vector_base<CMotionDef,xalloc<CMotionDef> >::~_Vector_base<CMotionDef,xalloc<CMotionDef> >, COMDAT
; _this$ = eax

; 85   :     if (_M_start != _STLP_DEFAULT_CONSTRUCTED(pointer))

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN6@Vector_bas@2

; 86   :       _M_end_of_storage.deallocate(_M_start, _M_end_of_storage._M_data - _M_start);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN6@Vector_bas@2:

; 87   :   }

	ret	0
??1?$_Vector_base@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@XZ ENDP ; stlp_std::priv::_Vector_base<CMotionDef,xalloc<CMotionDef> >::~_Vector_base<CMotionDef,xalloc<CMotionDef> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?end@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEPAVCMotionDef@@XZ
_TEXT	SEGMENT
?end@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEPAVCMotionDef@@XZ PROC ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::end, COMDAT
; _this$ = eax

; 172  :   iterator end()               { return this->_M_finish; }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?end@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEPAVCMotionDef@@XZ ENDP ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEPAVCMotionDef@@XZ
_TEXT	SEGMENT
?begin@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEPAVCMotionDef@@XZ PROC ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::begin, COMDAT
; _this$ = eax

; 170  :   iterator begin()             { return this->_M_start; }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEPAVCMotionDef@@XZ ENDP ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::begin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xalloc@VCMotionDef@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xalloc@VCMotionDef@@@@QAE@XZ PROC			; xalloc<CMotionDef>::xalloc<CMotionDef>, COMDAT
; _this$ = eax

; 77   : 													xalloc			()										{	}

	ret	0
??0?$xalloc@VCMotionDef@@@@QAE@XZ ENDP			; xalloc<CMotionDef>::xalloc<CMotionDef>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ??1?$_Vector_base@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_base@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE@XZ PROC ; stlp_std::priv::_Vector_base<motion_marks,xalloc<motion_marks> >::~_Vector_base<motion_marks,xalloc<motion_marks> >, COMDAT
; _this$ = eax

; 85   :     if (_M_start != _STLP_DEFAULT_CONSTRUCTED(pointer))

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN6@Vector_bas@3

; 86   :       _M_end_of_storage.deallocate(_M_start, _M_end_of_storage._M_data - _M_start);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN6@Vector_bas@3:

; 87   :   }

	ret	0
??1?$_Vector_base@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE@XZ ENDP ; stlp_std::priv::_Vector_base<motion_marks,xalloc<motion_marks> >::~_Vector_base<motion_marks,xalloc<motion_marks> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?rend@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAVmotion_marks@@@3@XZ
_TEXT	SEGMENT
?rend@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAVmotion_marks@@@3@XZ PROC ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::rend, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 177  :   reverse_iterator rend()                { return reverse_iterator(begin()); }

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	ret	0
?rend@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAVmotion_marks@@@3@XZ ENDP ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::rend
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?rbegin@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAVmotion_marks@@@3@XZ
_TEXT	SEGMENT
?rbegin@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAVmotion_marks@@@3@XZ PROC ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::rbegin, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 175  :   reverse_iterator rbegin()              { return reverse_iterator(end()); }

	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
	ret	0
?rbegin@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAVmotion_marks@@@3@XZ ENDP ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::rbegin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xalloc@Vmotion_marks@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xalloc@Vmotion_marks@@@@QAE@XZ PROC		; xalloc<motion_marks>::xalloc<motion_marks>, COMDAT
; _this$ = eax

; 77   : 													xalloc			()										{	}

	ret	0
??0?$xalloc@Vmotion_marks@@@@QAE@XZ ENDP		; xalloc<motion_marks>::xalloc<motion_marks>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?begin@?$vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@stlp_std@@QAEPAVmotion_marks@@XZ
_TEXT	SEGMENT
?begin@?$vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@stlp_std@@QAEPAVmotion_marks@@XZ PROC ; stlp_std::vector<motion_marks,xalloc<motion_marks> >::begin, COMDAT
; _this$ = eax

; 79   :   iterator begin()             { return cast_traits::to_value_type_ptr(_M_impl.begin()); }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@stlp_std@@QAEPAVmotion_marks@@XZ ENDP ; stlp_std::vector<motion_marks,xalloc<motion_marks> >::begin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ??1?$_Vector_base@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_base@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@XZ PROC ; stlp_std::priv::_Vector_base<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::~_Vector_base<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >, COMDAT
; _this$ = eax

; 85   :     if (_M_start != _STLP_DEFAULT_CONSTRUCTED(pointer))

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN6@Vector_bas@4

; 86   :       _M_end_of_storage.deallocate(_M_start, _M_end_of_storage._M_data - _M_start);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN6@Vector_bas@4:

; 87   :   }

	ret	0
??1?$_Vector_base@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@XZ ENDP ; stlp_std::priv::_Vector_base<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::~_Vector_base<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?empty@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QBE_NXZ PROC ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::empty, COMDAT
; _this$ = eax

; 188  :   bool empty() const            { return this->_M_start == this->_M_finish; }

	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	sete	dl
	mov	al, dl
	ret	0
?empty@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QBE_NXZ ENDP ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::empty
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?rend@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAU?$pair@MM@stlp_std@@@3@XZ
_TEXT	SEGMENT
?rend@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAU?$pair@MM@stlp_std@@@3@XZ PROC ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::rend, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 177  :   reverse_iterator rend()                { return reverse_iterator(begin()); }

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	ret	0
?rend@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAU?$pair@MM@stlp_std@@@3@XZ ENDP ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::rend
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?rbegin@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAU?$pair@MM@stlp_std@@@3@XZ
_TEXT	SEGMENT
?rbegin@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAU?$pair@MM@stlp_std@@@3@XZ PROC ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::rbegin, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 175  :   reverse_iterator rbegin()              { return reverse_iterator(end()); }

	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
	ret	0
?rbegin@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAU?$pair@MM@stlp_std@@@3@XZ ENDP ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::rbegin
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?end@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QBEPBU?$pair@MM@3@XZ
_TEXT	SEGMENT
?end@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QBEPBU?$pair@MM@3@XZ PROC ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::end, COMDAT
; _this$ = eax

; 173  :   const_iterator end() const   { return this->_M_finish; }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?end@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QBEPBU?$pair@MM@3@XZ ENDP ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QBEPBU?$pair@MM@3@XZ
_TEXT	SEGMENT
?begin@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QBEPBU?$pair@MM@3@XZ PROC ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::begin, COMDAT
; _this$ = eax

; 171  :   const_iterator begin() const { return this->_M_start; }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QBEPBU?$pair@MM@3@XZ ENDP ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::begin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xalloc@U?$pair@MM@stlp_std@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xalloc@U?$pair@MM@stlp_std@@@@QAE@XZ PROC		; xalloc<stlp_std::pair<float,float> >::xalloc<stlp_std::pair<float,float> >, COMDAT
; _this$ = eax

; 77   : 													xalloc			()										{	}

	ret	0
??0?$xalloc@U?$pair@MM@stlp_std@@@@QAE@XZ ENDP		; xalloc<stlp_std::pair<float,float> >::xalloc<stlp_std::pair<float,float> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?begin@?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QAEPAU?$pair@MM@2@XZ
_TEXT	SEGMENT
?begin@?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QAEPAU?$pair@MM@2@XZ PROC ; stlp_std::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::begin, COMDAT
; _this$ = eax

; 79   :   iterator begin()             { return cast_traits::to_value_type_ptr(_M_impl.begin()); }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QAEPAU?$pair@MM@2@XZ ENDP ; stlp_std::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::begin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrsharedmem.h
_TEXT	ENDS
;	COMDAT ?_dec@?$ref_smem@UCKeyQT16@@@@IAEXXZ
_TEXT	SEGMENT
?_dec@?$ref_smem@UCKeyQT16@@@@IAEXXZ PROC		; ref_smem<CKeyQT16>::_dec, COMDAT
; _this$ = ecx

; 68   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN1@dec
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@dec
	mov	DWORD PTR [ecx], 0
$LN1@dec:
	ret	0
?_dec@?$ref_smem@UCKeyQT16@@@@IAEXXZ ENDP		; ref_smem<CKeyQT16>::_dec
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_dec@?$ref_smem@UCKeyQT8@@@@IAEXXZ
_TEXT	SEGMENT
?_dec@?$ref_smem@UCKeyQT8@@@@IAEXXZ PROC		; ref_smem<CKeyQT8>::_dec, COMDAT
; _this$ = ecx

; 68   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN1@dec@2
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@dec@2
	mov	DWORD PTR [ecx], 0
$LN1@dec@2:
	ret	0
?_dec@?$ref_smem@UCKeyQT8@@@@IAEXXZ ENDP		; ref_smem<CKeyQT8>::_dec
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_dec@?$ref_smem@UCKeyQR@@@@IAEXXZ
_TEXT	SEGMENT
?_dec@?$ref_smem@UCKeyQR@@@@IAEXXZ PROC			; ref_smem<CKeyQR>::_dec, COMDAT
; _this$ = ecx

; 68   : 	void				_dec		()								{	if (0==p_) return;	p_->dwReference--; 	if (0==p_->dwReference)	p_=0;						}

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN1@dec@3
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@dec@3
	mov	DWORD PTR [ecx], 0
$LN1@dec@3:
	ret	0
?_dec@?$ref_smem@UCKeyQR@@@@IAEXXZ ENDP			; ref_smem<CKeyQR>::_dec
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_tools.h
_TEXT	ENDS
;	COMDAT ?to_storage_type_cref@?$_CastTraits@II@priv@stlp_std@@SAABIABI@Z
_TEXT	SEGMENT
?to_storage_type_cref@?$_CastTraits@II@priv@stlp_std@@SAABIABI@Z PROC ; stlp_std::priv::_CastTraits<unsigned int,unsigned int>::to_storage_type_cref, COMDAT
; ___ref$ = eax

; 254  :   { return __ref; }

	ret	0
?to_storage_type_cref@?$_CastTraits@II@priv@stlp_std@@SAABIABI@Z ENDP ; stlp_std::priv::_CastTraits<unsigned int,unsigned int>::to_storage_type_cref
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?end@?$_Impl_vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@priv@stlp_std@@QAEPAUItem@CInifile@@XZ
_TEXT	SEGMENT
?end@?$_Impl_vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@priv@stlp_std@@QAEPAUItem@CInifile@@XZ PROC ; stlp_std::priv::_Impl_vector<CInifile::Item,xalloc<CInifile::Item> >::end, COMDAT
; _this$ = eax

; 172  :   iterator end()               { return this->_M_finish; }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?end@?$_Impl_vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@priv@stlp_std@@QAEPAUItem@CInifile@@XZ ENDP ; stlp_std::priv::_Impl_vector<CInifile::Item,xalloc<CInifile::Item> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$_Impl_vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@priv@stlp_std@@QAEPAUItem@CInifile@@XZ
_TEXT	SEGMENT
?begin@?$_Impl_vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@priv@stlp_std@@QAEPAUItem@CInifile@@XZ PROC ; stlp_std::priv::_Impl_vector<CInifile::Item,xalloc<CInifile::Item> >::begin, COMDAT
; _this$ = eax

; 170  :   iterator begin()             { return this->_M_start; }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$_Impl_vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@priv@stlp_std@@QAEPAUItem@CInifile@@XZ ENDP ; stlp_std::priv::_Impl_vector<CInifile::Item,xalloc<CInifile::Item> >::begin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?size@?$vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@stlp_std@@QBEIXZ PROC ; stlp_std::vector<CInifile::Item,xalloc<CInifile::Item> >::size, COMDAT
; _this$ = ecx

; 89   :   size_type size() const        { return _M_impl.size(); }

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 3
	ret	0
?size@?$vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@stlp_std@@QBEIXZ ENDP ; stlp_std::vector<CInifile::Item,xalloc<CInifile::Item> >::size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?size@?$vector@IV?$xalloc@I@@@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@IV?$xalloc@I@@@stlp_std@@QBEIXZ PROC	; stlp_std::vector<unsigned int,xalloc<unsigned int> >::size, COMDAT
; _this$ = ecx

; 89   :   size_type size() const        { return _M_impl.size(); }

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
	ret	0
?size@?$vector@IV?$xalloc@I@@@stlp_std@@QBEIXZ ENDP	; stlp_std::vector<unsigned int,xalloc<unsigned int> >::size
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?max_size@?$xalloc@D@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$xalloc@D@@QBEIXZ PROC			; xalloc<char>::max_size, COMDAT

; 87   : 							size_type				max_size		() const								{	size_type _Count = (size_type)(-1) / sizeof (T);	return (0 < _Count ? _Count : 1);	}

	or	eax, -1
	ret	0
?max_size@?$xalloc@D@@QBEIXZ ENDP			; xalloc<char>::max_size
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ??9?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QBE_NU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@12@@Z
_TEXT	SEGMENT
___rhs$ = 8						; size = 4
??9?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QBE_NU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@12@@Z PROC ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >::operator!=, COMDAT
; _this$ = ecx

; 200  :     return _M_node != __rhs._M_node;

	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	cmp	edx, DWORD PTR ___rhs$[esp-4]
	setne	al

; 201  :   }

	ret	4
??9?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QBE_NU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@12@@Z ENDP ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >::operator!=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??C?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QBEPAU?$pair@$$CBVshared_str@@PAUmotions_value@@@2@XZ
_TEXT	SEGMENT
??C?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QBEPAU?$pair@$$CBVshared_str@@PAUmotions_value@@@2@XZ PROC ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >::operator->, COMDAT
; _this$ = eax

; 174  :   _STLP_DEFINE_ARROW_OPERATOR

	mov	eax, DWORD PTR [eax]
	add	eax, 16					; 00000010H
	ret	0
??C?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QBEPAU?$pair@$$CBVshared_str@@PAUmotions_value@@@2@XZ ENDP ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >::operator->
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?size@?$xr_map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@@QBEIXZ
_TEXT	SEGMENT
?size@?$xr_map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@@QBEIXZ PROC ; xr_map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::size, COMDAT
; _this$ = eax

; 203  : template	<typename K, class V, class P=std::less<K>, typename allocator = xalloc<std::pair<K,V> > >	class	xr_map 			: public std::map<K,V,P,allocator>		{ public: u32 size() const {return (u32)__super::size(); } };

	mov	eax, DWORD PTR [eax+16]
	ret	0
?size@?$xr_map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@@QBEIXZ ENDP ; xr_map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::size
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ??9?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QBE_NU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@12@@Z
_TEXT	SEGMENT
___rhs$ = 8						; size = 4
??9?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QBE_NU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@12@@Z PROC ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::operator!=, COMDAT
; _this$ = ecx

; 200  :     return _M_node != __rhs._M_node;

	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	cmp	edx, DWORD PTR ___rhs$[esp-4]
	setne	al

; 201  :   }

	ret	4
??9?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QBE_NU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@12@@Z ENDP ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::operator!=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??8?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QBE_NU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@12@@Z
_TEXT	SEGMENT
___rhs$ = 8						; size = 4
??8?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QBE_NU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@12@@Z PROC ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::operator==, COMDAT
; _this$ = ecx

; 197  :     return _M_node == __rhs._M_node;

	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	cmp	edx, DWORD PTR ___rhs$[esp-4]
	sete	al

; 198  :   }

	ret	4
??8?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QBE_NU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@12@@Z ENDP ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::operator==
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??D?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QBEAAU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@2@XZ
_TEXT	SEGMENT
??D?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QBEAAU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@2@XZ PROC ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::operator*, COMDAT
; _this$ = eax

; 171  :     return __STATIC_CAST(_Link_type, _M_node)->_M_value_field;

	mov	eax, DWORD PTR [eax]
	add	eax, 16					; 00000010H

; 172  :   }

	ret	0
??D?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QBEAAU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@2@XZ ENDP ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::operator*
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?size@?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@QBEIXZ
_TEXT	SEGMENT
?size@?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@QBEIXZ PROC ; xr_map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::size, COMDAT
; _this$ = eax

; 203  : template	<typename K, class V, class P=std::less<K>, typename allocator = xalloc<std::pair<K,V> > >	class	xr_map 			: public std::map<K,V,P,allocator>		{ public: u32 size() const {return (u32)__super::size(); } };

	mov	eax, DWORD PTR [eax+16]
	ret	0
?size@?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@QBEIXZ ENDP ; xr_map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::size
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?end@?$vector@VCMotion@@V?$xalloc@VCMotion@@@@@stlp_std@@QAEPAVCMotion@@XZ
_TEXT	SEGMENT
?end@?$vector@VCMotion@@V?$xalloc@VCMotion@@@@@stlp_std@@QAEPAVCMotion@@XZ PROC ; stlp_std::vector<CMotion,xalloc<CMotion> >::end, COMDAT
; _this$ = eax

; 81   :   iterator end()               { return cast_traits::to_value_type_ptr(_M_impl.end()); }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?end@?$vector@VCMotion@@V?$xalloc@VCMotion@@@@@stlp_std@@QAEPAVCMotion@@XZ ENDP ; stlp_std::vector<CMotion,xalloc<CMotion> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$vector@VCMotion@@V?$xalloc@VCMotion@@@@@stlp_std@@QAEPAVCMotion@@XZ
_TEXT	SEGMENT
?begin@?$vector@VCMotion@@V?$xalloc@VCMotion@@@@@stlp_std@@QAEPAVCMotion@@XZ PROC ; stlp_std::vector<CMotion,xalloc<CMotion> >::begin, COMDAT
; _this$ = eax

; 79   :   iterator begin()             { return cast_traits::to_value_type_ptr(_M_impl.begin()); }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$vector@VCMotion@@V?$xalloc@VCMotion@@@@@stlp_std@@QAEPAVCMotion@@XZ ENDP ; stlp_std::vector<CMotion,xalloc<CMotion> >::begin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??A?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@QAEAAVCMotion@@I@Z
_TEXT	SEGMENT
??A?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@QAEAAVCMotion@@I@Z PROC ; xr_vector<CMotion,xalloc<CMotion> >::operator[], COMDAT
; _this$ = ecx
; __Pos$ = eax

; 139  : 	reference operator[]		(size_type _Pos)					{ {VERIFY2(_Pos<size(),make_string("index is out of range: index requested[%d], size of container[%d]", _Pos, size()).c_str());} return (*(begin() + _Pos)); }

	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR [edx+eax*8]
	ret	0
??A?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@QAEAAVCMotion@@I@Z ENDP ; xr_vector<CMotion,xalloc<CMotion> >::operator[]
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?end@?$vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@stlp_std@@QAEPAVCMotionDef@@XZ
_TEXT	SEGMENT
?end@?$vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@stlp_std@@QAEPAVCMotionDef@@XZ PROC ; stlp_std::vector<CMotionDef,xalloc<CMotionDef> >::end, COMDAT
; _this$ = eax

; 81   :   iterator end()               { return cast_traits::to_value_type_ptr(_M_impl.end()); }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?end@?$vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@stlp_std@@QAEPAVCMotionDef@@XZ ENDP ; stlp_std::vector<CMotionDef,xalloc<CMotionDef> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@stlp_std@@QAEPAVCMotionDef@@XZ
_TEXT	SEGMENT
?begin@?$vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@stlp_std@@QAEPAVCMotionDef@@XZ PROC ; stlp_std::vector<CMotionDef,xalloc<CMotionDef> >::begin, COMDAT
; _this$ = eax

; 79   :   iterator begin()             { return cast_traits::to_value_type_ptr(_M_impl.begin()); }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@stlp_std@@QAEPAVCMotionDef@@XZ ENDP ; stlp_std::vector<CMotionDef,xalloc<CMotionDef> >::begin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??A?$xr_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@@QAEAAVCMotionDef@@I@Z
_TEXT	SEGMENT
??A?$xr_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@@QAEAAVCMotionDef@@I@Z PROC ; xr_vector<CMotionDef,xalloc<CMotionDef> >::operator[], COMDAT
; _this$ = edx
; __Pos$ = eax

; 139  : 	reference operator[]		(size_type _Pos)					{ {VERIFY2(_Pos<size(),make_string("index is out of range: index requested[%d], size of container[%d]", _Pos, size()).c_str());} return (*(begin() + _Pos)); }

	lea	ecx, DWORD PTR [eax*8]
	sub	ecx, eax
	mov	eax, DWORD PTR [edx]
	lea	eax, DWORD PTR [eax+ecx*4]
	ret	0
??A?$xr_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@@QAEAAVCMotionDef@@I@Z ENDP ; xr_vector<CMotionDef,xalloc<CMotionDef> >::operator[]
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??A?$xr_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@@QAEAAVmotion_marks@@I@Z
_TEXT	SEGMENT
??A?$xr_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@@QAEAAVmotion_marks@@I@Z PROC ; xr_vector<motion_marks,xalloc<motion_marks> >::operator[], COMDAT
; _this$ = ecx
; __Pos$ = eax

; 139  : 	reference operator[]		(size_type _Pos)					{ {VERIFY2(_Pos<size(),make_string("index is out of range: index requested[%d], size of container[%d]", _Pos, size()).c_str());} return (*(begin() + _Pos)); }

	shl	eax, 4
	add	eax, DWORD PTR [ecx]
	ret	0
??A?$xr_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@@QAEAAVmotion_marks@@I@Z ENDP ; xr_vector<motion_marks,xalloc<motion_marks> >::operator[]
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_pair.h
_TEXT	ENDS
;	COMDAT ??0?$pair@MM@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??0?$pair@MM@stlp_std@@QAE@XZ PROC			; stlp_std::pair<float,float>::pair<float,float>, COMDAT
; _this$ = eax

; 54   :   pair() : first(_T1()), second(_T2()) {}

	xorps	xmm0, xmm0
	movss	DWORD PTR [eax], xmm0
	movss	DWORD PTR [eax+4], xmm0
	ret	0
??0?$pair@MM@stlp_std@@QAE@XZ ENDP			; stlp_std::pair<float,float>::pair<float,float>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?empty@?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QBE_NXZ PROC ; stlp_std::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::empty, COMDAT
; _this$ = eax

; 93   :   bool empty() const            { return _M_impl.empty(); }

	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	sete	dl
	mov	al, dl
	ret	0
?empty@?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QBE_NXZ ENDP ; stlp_std::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::empty
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?end@?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QBEPBU?$pair@MM@2@XZ
_TEXT	SEGMENT
?end@?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QBEPBU?$pair@MM@2@XZ PROC ; stlp_std::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::end, COMDAT
; _this$ = eax

; 82   :   const_iterator end() const   { return cast_traits::to_value_type_cptr(_M_impl.end()); }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?end@?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QBEPBU?$pair@MM@2@XZ ENDP ; stlp_std::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QBEPBU?$pair@MM@2@XZ
_TEXT	SEGMENT
?begin@?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QBEPBU?$pair@MM@2@XZ PROC ; stlp_std::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::begin, COMDAT
; _this$ = eax

; 80   :   const_iterator begin() const { return cast_traits::to_value_type_cptr(_M_impl.begin()); }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QBEPBU?$pair@MM@2@XZ ENDP ; stlp_std::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::begin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??A?$xr_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@@QAEAAU?$pair@MM@stlp_std@@I@Z
_TEXT	SEGMENT
??A?$xr_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@@QAEAAU?$pair@MM@stlp_std@@I@Z PROC ; xr_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::operator[], COMDAT
; _this$ = eax
; __Pos$ = edx

; 139  : 	reference operator[]		(size_type _Pos)					{ {VERIFY2(_Pos<size(),make_string("index is out of range: index requested[%d], size of container[%d]", _Pos, size()).c_str());} return (*(begin() + _Pos)); }

	mov	ecx, DWORD PTR [eax]
	lea	eax, DWORD PTR [ecx+edx*8]
	ret	0
??A?$xr_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@@QAEAAU?$pair@MM@stlp_std@@I@Z ENDP ; xr_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::operator[]
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrsharedmem.h
_TEXT	ENDS
;	COMDAT ?ref_count@?$ref_smem@UCKeyQT16@@@@QAEIXZ
_TEXT	SEGMENT
?ref_count@?$ref_smem@UCKeyQT16@@@@QAEIXZ PROC		; ref_smem<CKeyQT16>::ref_count, COMDAT
; _this$ = eax

; 94   : 	u32					ref_count	()								{	if (0==p_) return 0; else return p_->dwReference;			}

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	jne	SHORT $LN2@ref_count
	ret	0
$LN2@ref_count:
	mov	eax, DWORD PTR [eax]
	ret	0
?ref_count@?$ref_smem@UCKeyQT16@@@@QAEIXZ ENDP		; ref_smem<CKeyQT16>::ref_count
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?size@?$ref_smem@UCKeyQT16@@@@QAEIXZ
_TEXT	SEGMENT
?size@?$ref_smem@UCKeyQT16@@@@QAEIXZ PROC		; ref_smem<CKeyQT16>::size, COMDAT
; _this$ = eax

; 91   : 	u32					size		()								{	if (0==p_) return 0; else return p_->dwLength/sizeof(T);	}

	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN2@size
	xor	eax, eax
	ret	0
$LN2@size:
	mov	eax, -1431655765			; aaaaaaabH
	mul	DWORD PTR [ecx+8]
	mov	eax, edx
	shr	eax, 2
	ret	0
?size@?$ref_smem@UCKeyQT16@@@@QAEIXZ ENDP		; ref_smem<CKeyQT16>::size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?create@?$ref_smem@UCKeyQT16@@@@QAEXIIPAUCKeyQT16@@@Z
_TEXT	SEGMENT
_dwCRC$ = 8						; size = 4
?create@?$ref_smem@UCKeyQT16@@@@QAEXIIPAUCKeyQT16@@@Z PROC ; ref_smem<CKeyQT16>::create, COMDAT
; _this$ = esi
; _dwLength$ = eax
; _ptr$ = ecx

; 80   : 		smem_value* v	= g_pSharedMemoryContainer->dock(dwCRC,dwLength*sizeof(T),ptr); 

	push	ecx
	mov	ecx, DWORD PTR __imp_?g_pSharedMemoryContainer@@3PAVsmem_container@@A
	mov	ecx, DWORD PTR [ecx]
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR _dwCRC$[esp]
	add	edx, edx
	push	edx
	push	eax
	call	DWORD PTR __imp_?dock@smem_container@@QAEPAUsmem_value@@IIPAX@Z

; 81   : 		if (0!=v)		v->dwReference++; _dec(); p_ = v;	

	test	eax, eax
	je	SHORT $LN1@create
	add	DWORD PTR [eax], 1
$LN1@create:
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN9@create
	add	DWORD PTR [ecx], -1
	mov	edx, DWORD PTR [esi]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN9@create
	mov	DWORD PTR [esi], 0
$LN9@create:
	mov	DWORD PTR [esi], eax

; 82   : 	}

	ret	4
?create@?$ref_smem@UCKeyQT16@@@@QAEXIIPAUCKeyQT16@@@Z ENDP ; ref_smem<CKeyQT16>::create
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$ref_smem@UCKeyQT16@@@@QAE@XZ
_TEXT	SEGMENT
??1?$ref_smem@UCKeyQT16@@@@QAE@XZ PROC			; ref_smem<CKeyQT16>::~ref_smem<CKeyQT16>, COMDAT
; _this$ = ecx

; 76   : 	~ref_smem			()											{	_dec();														}

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN3@ref_smem
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@ref_smem
	mov	DWORD PTR [ecx], 0
$LN3@ref_smem:
	ret	0
??1?$ref_smem@UCKeyQT16@@@@QAE@XZ ENDP			; ref_smem<CKeyQT16>::~ref_smem<CKeyQT16>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$ref_smem@UCKeyQT16@@@@QAE@XZ
_TEXT	SEGMENT
??0?$ref_smem@UCKeyQT16@@@@QAE@XZ PROC			; ref_smem<CKeyQT16>::ref_smem<CKeyQT16>, COMDAT
; _this$ = eax

; 74   : 	ref_smem			()											{	p_ = 0;														}

	mov	DWORD PTR [eax], 0
	ret	0
??0?$ref_smem@UCKeyQT16@@@@QAE@XZ ENDP			; ref_smem<CKeyQT16>::ref_smem<CKeyQT16>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?ref_count@?$ref_smem@UCKeyQT8@@@@QAEIXZ
_TEXT	SEGMENT
?ref_count@?$ref_smem@UCKeyQT8@@@@QAEIXZ PROC		; ref_smem<CKeyQT8>::ref_count, COMDAT
; _this$ = eax

; 94   : 	u32					ref_count	()								{	if (0==p_) return 0; else return p_->dwReference;			}

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	jne	SHORT $LN2@ref_count@2
	ret	0
$LN2@ref_count@2:
	mov	eax, DWORD PTR [eax]
	ret	0
?ref_count@?$ref_smem@UCKeyQT8@@@@QAEIXZ ENDP		; ref_smem<CKeyQT8>::ref_count
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?size@?$ref_smem@UCKeyQT8@@@@QAEIXZ
_TEXT	SEGMENT
?size@?$ref_smem@UCKeyQT8@@@@QAEIXZ PROC		; ref_smem<CKeyQT8>::size, COMDAT
; _this$ = eax

; 91   : 	u32					size		()								{	if (0==p_) return 0; else return p_->dwLength/sizeof(T);	}

	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN2@size@2
	xor	eax, eax
	ret	0
$LN2@size@2:
	mov	eax, -1431655765			; aaaaaaabH
	mul	DWORD PTR [ecx+8]
	mov	eax, edx
	shr	eax, 1
	ret	0
?size@?$ref_smem@UCKeyQT8@@@@QAEIXZ ENDP		; ref_smem<CKeyQT8>::size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?create@?$ref_smem@UCKeyQT8@@@@QAEXIIPAUCKeyQT8@@@Z
_TEXT	SEGMENT
_dwCRC$ = 8						; size = 4
?create@?$ref_smem@UCKeyQT8@@@@QAEXIIPAUCKeyQT8@@@Z PROC ; ref_smem<CKeyQT8>::create, COMDAT
; _this$ = esi
; _dwLength$ = eax
; _ptr$ = ecx

; 80   : 		smem_value* v	= g_pSharedMemoryContainer->dock(dwCRC,dwLength*sizeof(T),ptr); 

	push	ecx
	mov	ecx, DWORD PTR __imp_?g_pSharedMemoryContainer@@3PAVsmem_container@@A
	mov	ecx, DWORD PTR [ecx]
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR _dwCRC$[esp]
	push	edx
	push	eax
	call	DWORD PTR __imp_?dock@smem_container@@QAEPAUsmem_value@@IIPAX@Z

; 81   : 		if (0!=v)		v->dwReference++; _dec(); p_ = v;	

	test	eax, eax
	je	SHORT $LN1@create@2
	add	DWORD PTR [eax], 1
$LN1@create@2:
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN9@create@2
	add	DWORD PTR [ecx], -1
	mov	edx, DWORD PTR [esi]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN9@create@2
	mov	DWORD PTR [esi], 0
$LN9@create@2:
	mov	DWORD PTR [esi], eax

; 82   : 	}

	ret	4
?create@?$ref_smem@UCKeyQT8@@@@QAEXIIPAUCKeyQT8@@@Z ENDP ; ref_smem<CKeyQT8>::create
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$ref_smem@UCKeyQT8@@@@QAE@XZ
_TEXT	SEGMENT
??1?$ref_smem@UCKeyQT8@@@@QAE@XZ PROC			; ref_smem<CKeyQT8>::~ref_smem<CKeyQT8>, COMDAT
; _this$ = ecx

; 76   : 	~ref_smem			()											{	_dec();														}

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN3@ref_smem@2
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@ref_smem@2
	mov	DWORD PTR [ecx], 0
$LN3@ref_smem@2:
	ret	0
??1?$ref_smem@UCKeyQT8@@@@QAE@XZ ENDP			; ref_smem<CKeyQT8>::~ref_smem<CKeyQT8>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$ref_smem@UCKeyQT8@@@@QAE@XZ
_TEXT	SEGMENT
??0?$ref_smem@UCKeyQT8@@@@QAE@XZ PROC			; ref_smem<CKeyQT8>::ref_smem<CKeyQT8>, COMDAT
; _this$ = eax

; 74   : 	ref_smem			()											{	p_ = 0;														}

	mov	DWORD PTR [eax], 0
	ret	0
??0?$ref_smem@UCKeyQT8@@@@QAE@XZ ENDP			; ref_smem<CKeyQT8>::ref_smem<CKeyQT8>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?ref_count@?$ref_smem@UCKeyQR@@@@QAEIXZ
_TEXT	SEGMENT
?ref_count@?$ref_smem@UCKeyQR@@@@QAEIXZ PROC		; ref_smem<CKeyQR>::ref_count, COMDAT
; _this$ = eax

; 94   : 	u32					ref_count	()								{	if (0==p_) return 0; else return p_->dwReference;			}

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	jne	SHORT $LN2@ref_count@3
	ret	0
$LN2@ref_count@3:
	mov	eax, DWORD PTR [eax]
	ret	0
?ref_count@?$ref_smem@UCKeyQR@@@@QAEIXZ ENDP		; ref_smem<CKeyQR>::ref_count
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?size@?$ref_smem@UCKeyQR@@@@QAEIXZ
_TEXT	SEGMENT
?size@?$ref_smem@UCKeyQR@@@@QAEIXZ PROC			; ref_smem<CKeyQR>::size, COMDAT
; _this$ = eax

; 91   : 	u32					size		()								{	if (0==p_) return 0; else return p_->dwLength/sizeof(T);	}

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	jne	SHORT $LN2@size@3
	ret	0
$LN2@size@3:
	mov	eax, DWORD PTR [eax+8]
	shr	eax, 3
	ret	0
?size@?$ref_smem@UCKeyQR@@@@QAEIXZ ENDP			; ref_smem<CKeyQR>::size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?create@?$ref_smem@UCKeyQR@@@@QAEXIIPAUCKeyQR@@@Z
_TEXT	SEGMENT
_dwCRC$ = 8						; size = 4
?create@?$ref_smem@UCKeyQR@@@@QAEXIIPAUCKeyQR@@@Z PROC	; ref_smem<CKeyQR>::create, COMDAT
; _this$ = esi
; _dwLength$ = ecx
; _ptr$ = eax

; 80   : 		smem_value* v	= g_pSharedMemoryContainer->dock(dwCRC,dwLength*sizeof(T),ptr); 

	push	eax
	mov	eax, DWORD PTR _dwCRC$[esp]
	lea	edx, DWORD PTR [ecx*8]
	mov	ecx, DWORD PTR __imp_?g_pSharedMemoryContainer@@3PAVsmem_container@@A
	mov	ecx, DWORD PTR [ecx]
	push	edx
	push	eax
	call	DWORD PTR __imp_?dock@smem_container@@QAEPAUsmem_value@@IIPAX@Z

; 81   : 		if (0!=v)		v->dwReference++; _dec(); p_ = v;	

	test	eax, eax
	je	SHORT $LN1@create@3
	add	DWORD PTR [eax], 1
$LN1@create@3:
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN9@create@3
	add	DWORD PTR [ecx], -1
	mov	edx, DWORD PTR [esi]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN9@create@3
	mov	DWORD PTR [esi], 0
$LN9@create@3:
	mov	DWORD PTR [esi], eax

; 82   : 	}

	ret	4
?create@?$ref_smem@UCKeyQR@@@@QAEXIIPAUCKeyQR@@@Z ENDP	; ref_smem<CKeyQR>::create
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$ref_smem@UCKeyQR@@@@QAE@XZ
_TEXT	SEGMENT
??1?$ref_smem@UCKeyQR@@@@QAE@XZ PROC			; ref_smem<CKeyQR>::~ref_smem<CKeyQR>, COMDAT
; _this$ = ecx

; 76   : 	~ref_smem			()											{	_dec();														}

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN3@ref_smem@3
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@ref_smem@3
	mov	DWORD PTR [ecx], 0
$LN3@ref_smem@3:
	ret	0
??1?$ref_smem@UCKeyQR@@@@QAE@XZ ENDP			; ref_smem<CKeyQR>::~ref_smem<CKeyQR>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$ref_smem@UCKeyQR@@@@QAE@XZ
_TEXT	SEGMENT
??0?$ref_smem@UCKeyQR@@@@QAE@XZ PROC			; ref_smem<CKeyQR>::ref_smem<CKeyQR>, COMDAT
; _this$ = eax

; 74   : 	ref_smem			()											{	p_ = 0;														}

	mov	DWORD PTR [eax], 0
	ret	0
??0?$ref_smem@UCKeyQR@@@@QAE@XZ ENDP			; ref_smem<CKeyQR>::ref_smem<CKeyQR>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_iterator.h
_TEXT	ENDS
;	COMDAT ??0?$reverse_iterator@PAI@stlp_std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$reverse_iterator@PAI@stlp_std@@QAE@ABV01@@Z PROC	; stlp_std::reverse_iterator<unsigned int *>::reverse_iterator<unsigned int *>, COMDAT
; _this$ = eax
; ___x$ = ecx

; 66   :   reverse_iterator(const _Self& __x) : current(__x.current) {}

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	ret	0
??0?$reverse_iterator@PAI@stlp_std@@QAE@ABV01@@Z ENDP	; stlp_std::reverse_iterator<unsigned int *>::reverse_iterator<unsigned int *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?end@?$vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@stlp_std@@QAEPAUItem@CInifile@@XZ
_TEXT	SEGMENT
?end@?$vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@stlp_std@@QAEPAUItem@CInifile@@XZ PROC ; stlp_std::vector<CInifile::Item,xalloc<CInifile::Item> >::end, COMDAT
; _this$ = eax

; 81   :   iterator end()               { return cast_traits::to_value_type_ptr(_M_impl.end()); }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?end@?$vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@stlp_std@@QAEPAUItem@CInifile@@XZ ENDP ; stlp_std::vector<CInifile::Item,xalloc<CInifile::Item> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@stlp_std@@QAEPAUItem@CInifile@@XZ
_TEXT	SEGMENT
?begin@?$vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@stlp_std@@QAEPAUItem@CInifile@@XZ PROC ; stlp_std::vector<CInifile::Item,xalloc<CInifile::Item> >::begin, COMDAT
; _this$ = eax

; 79   :   iterator begin()             { return cast_traits::to_value_type_ptr(_M_impl.begin()); }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@stlp_std@@QAEPAUItem@CInifile@@XZ ENDP ; stlp_std::vector<CInifile::Item,xalloc<CInifile::Item> >::begin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?size@?$xr_vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@@QBEIXZ
_TEXT	SEGMENT
?size@?$xr_vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@@QBEIXZ PROC ; xr_vector<CInifile::Item,xalloc<CInifile::Item> >::size, COMDAT
; _this$ = ecx

; 126  : 	u32		size				() const							{ return (u32)inherited::size();} 

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 3
	ret	0
?size@?$xr_vector@UItem@CInifile@@V?$xalloc@UItem@CInifile@@@@@@QBEIXZ ENDP ; xr_vector<CInifile::Item,xalloc<CInifile::Item> >::size
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?end@?$vector@IV?$xalloc@I@@@stlp_std@@QAEPAIXZ
_TEXT	SEGMENT
?end@?$vector@IV?$xalloc@I@@@stlp_std@@QAEPAIXZ PROC	; stlp_std::vector<unsigned int,xalloc<unsigned int> >::end, COMDAT
; _this$ = eax

; 81   :   iterator end()               { return cast_traits::to_value_type_ptr(_M_impl.end()); }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?end@?$vector@IV?$xalloc@I@@@stlp_std@@QAEPAIXZ ENDP	; stlp_std::vector<unsigned int,xalloc<unsigned int> >::end
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?size@?$xr_vector@IV?$xalloc@I@@@@QBEIXZ
_TEXT	SEGMENT
?size@?$xr_vector@IV?$xalloc@I@@@@QBEIXZ PROC		; xr_vector<unsigned int,xalloc<unsigned int> >::size, COMDAT
; _this$ = ecx

; 126  : 	u32		size				() const							{ return (u32)inherited::size();} 

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
	ret	0
?size@?$xr_vector@IV?$xalloc@I@@@@QBEIXZ ENDP		; xr_vector<unsigned int,xalloc<unsigned int> >::size
_TEXT	ENDS
PUBLIC	?is_mark_between@motion_marks@@QBE_NABM0@Z	; motion_marks::is_mark_between
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\skeletonmotions.cpp
;	COMDAT ?is_mark_between@motion_marks@@QBE_NABM0@Z
_TEXT	SEGMENT
_t0$ = 8						; size = 4
_t1$ = 12						; size = 4
?is_mark_between@motion_marks@@QBE_NABM0@Z PROC		; motion_marks::is_mark_between, COMDAT
; _this$ = ecx

; 393  : 	VERIFY				(t0 <= t1);
; 394  : 
; 395  : 	C_ITERATOR			i = intervals.begin();

	mov	edx, DWORD PTR [ecx]

; 396  : 	C_ITERATOR			e = intervals.end();

	mov	ecx, DWORD PTR [ecx+4]

; 397  : 	for ( ; i != e; ++i) {

	cmp	edx, ecx
	je	SHORT $LN10@is_mark_be
	mov	eax, DWORD PTR _t0$[esp-4]
	movss	xmm1, DWORD PTR [eax]
$LL12@is_mark_be:

; 398  : 		VERIFY			((*i).first <= (*i).second);
; 399  : 
; 400  : 		if ((*i).first == t0)

	movss	xmm0, DWORD PTR [edx]
	ucomiss	xmm0, xmm1
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN31@is_mark_be

; 402  : 
; 403  : 		if ((*i).first > t0) {

	comiss	xmm0, xmm1
	ja	SHORT $LN32@is_mark_be

; 408  : 				return	(true);
; 409  : 
; 410  : 			return		(false);
; 411  : 		}
; 412  : 
; 413  : 		if ((*i).second < t0)

	comiss	xmm1, DWORD PTR [edx+4]
	jbe	SHORT $LN31@is_mark_be
	add	edx, 8
	cmp	edx, ecx
	jne	SHORT $LL12@is_mark_be

; 420  : 	}
; 421  : 
; 422  : 	return				(false);

	xor	al, al

; 423  : }

	ret	8
$LN31@is_mark_be:

; 401  : 			return		(true);

	mov	al, 1

; 423  : }

	ret	8
$LN32@is_mark_be:

; 404  : 			if ((*i).second <= t1)

	mov	ecx, DWORD PTR _t1$[esp-4]
	movss	xmm0, DWORD PTR [ecx]
	comiss	xmm0, DWORD PTR [edx+4]

; 405  : 				return	(true);

	jae	SHORT $LN31@is_mark_be

; 406  : 
; 407  : 			if ((*i).first <= t1)

	comiss	xmm0, DWORD PTR [edx]

; 414  : 			continue;
; 415  : 
; 416  : 		if ((*i).second == t0)
; 417  : 			return		(true);
; 418  : 
; 419  : 		return			(true);

	jae	SHORT $LN31@is_mark_be
$LN10@is_mark_be:

; 420  : 	}
; 421  : 
; 422  : 	return				(false);

	xor	al, al

; 423  : }

	ret	8
?is_mark_between@motion_marks@@QBE_NABM0@Z ENDP		; motion_marks::is_mark_between
_TEXT	ENDS
PUBLIC	?pick_mark@motion_marks@@QBEPBU?$pair@MM@stlp_std@@ABM@Z ; motion_marks::pick_mark
; Function compile flags: /Ogtpy
;	COMDAT ?pick_mark@motion_marks@@QBEPBU?$pair@MM@stlp_std@@ABM@Z
_TEXT	SEGMENT
_t$ = 8							; size = 4
?pick_mark@motion_marks@@QBEPBU?$pair@MM@stlp_std@@ABM@Z PROC ; motion_marks::pick_mark, COMDAT
; _this$ = ecx

; 376  : 	C_ITERATOR	it		= intervals.begin();

	mov	eax, DWORD PTR [ecx]

; 377  : 	C_ITERATOR	it_e	= intervals.end();

	mov	ecx, DWORD PTR [ecx+4]

; 378  : 
; 379  : 	for( ;it!=it_e; ++it)

	cmp	eax, ecx
	je	SHORT $LN22@pick_mark
	mov	edx, DWORD PTR _t$[esp-4]
	movss	xmm1, DWORD PTR [edx]
$LL5@pick_mark:

; 380  : 	{
; 381  : 		const interval& I = (*it);
; 382  : 		if( I.first<=t && I.second>=t )

	movss	xmm0, DWORD PTR [eax]
	comiss	xmm1, xmm0
	jb	SHORT $LN2@pick_mark
	movss	xmm2, DWORD PTR [eax+4]
	comiss	xmm2, xmm1
	jae	SHORT $LN6@pick_mark
$LN2@pick_mark:

; 383  : 			return &I;
; 384  : 		
; 385  : 		if(I.first>t)

	comiss	xmm0, xmm1
	ja	SHORT $LN22@pick_mark
	add	eax, 8
	cmp	eax, ecx
	jne	SHORT $LL5@pick_mark
$LN22@pick_mark:

; 386  : 			break;
; 387  : 	}
; 388  : 	return NULL;

	xor	eax, eax
$LN6@pick_mark:

; 389  : }

	ret	4
?pick_mark@motion_marks@@QBEPBU?$pair@MM@stlp_std@@ABM@Z ENDP ; motion_marks::pick_mark
_TEXT	ENDS
PUBLIC	?StopAtEnd@CMotionDef@@QAE_NXZ			; CMotionDef::StopAtEnd
; Function compile flags: /Ogtpy
;	COMDAT ?StopAtEnd@CMotionDef@@QAE_NXZ
_TEXT	SEGMENT
?StopAtEnd@CMotionDef@@QAE_NXZ PROC			; CMotionDef::StopAtEnd, COMDAT
; _this$ = ecx

; 351  : 	return !!(flags&esmStopAtEnd);

	movzx	eax, BYTE PTR [ecx+12]
	shr	eax, 1
	and	eax, 1

; 352  : }

	ret	0
?StopAtEnd@CMotionDef@@QAE_NXZ ENDP			; CMotionDef::StopAtEnd
_TEXT	ENDS
PUBLIC	?id@shared_motions@@QBEABVshared_str@@XZ	; shared_motions::id
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\skeletonmotions.h
;	COMDAT ?id@shared_motions@@QBEABVshared_str@@XZ
_TEXT	SEGMENT
?id@shared_motions@@QBEABVshared_str@@XZ PROC		; shared_motions::id, COMDAT
; _this$ = ecx

; 239  : 	const shared_str	&id				() const					{	VERIFY(p_); return p_->m_id;					}

	mov	eax, DWORD PTR [ecx]
	add	eax, 176				; 000000b0H
	ret	0
?id@shared_motions@@QBEABVshared_str@@XZ ENDP		; shared_motions::id
_TEXT	ENDS
PUBLIC	?motion_def@shared_motions@@QAEPAVCMotionDef@@G@Z ; shared_motions::motion_def
; Function compile flags: /Ogtpy
;	COMDAT ?motion_def@shared_motions@@QAEPAVCMotionDef@@G@Z
_TEXT	SEGMENT
_idx$ = 8						; size = 2
?motion_def@shared_motions@@QAEPAVCMotionDef@@G@Z PROC	; shared_motions::motion_def, COMDAT
; _this$ = ecx

; 237  :     CMotionDef*			motion_def		(u16 idx)					{	VERIFY(p_); return &p_->m_mdefs[idx];			}

	movzx	eax, WORD PTR _idx$[esp-4]
	lea	edx, DWORD PTR [eax*8]
	sub	edx, eax
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+164]
	lea	eax, DWORD PTR [ecx+edx*4]
	ret	4
?motion_def@shared_motions@@QAEPAVCMotionDef@@G@Z ENDP	; shared_motions::motion_def
_TEXT	ENDS
PUBLIC	?motion_defs@shared_motions@@QAEPAV?$xr_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@@XZ ; shared_motions::motion_defs
; Function compile flags: /Ogtpy
;	COMDAT ?motion_defs@shared_motions@@QAEPAV?$xr_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@@XZ
_TEXT	SEGMENT
?motion_defs@shared_motions@@QAEPAV?$xr_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@@XZ PROC ; shared_motions::motion_defs, COMDAT
; _this$ = ecx

; 236  :     MotionDefVec*		motion_defs		()							{	VERIFY(p_); return &p_->m_mdefs;				}

	mov	eax, DWORD PTR [ecx]
	add	eax, 164				; 000000a4H
	ret	0
?motion_defs@shared_motions@@QAEPAV?$xr_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@@XZ ENDP ; shared_motions::motion_defs
_TEXT	ENDS
PUBLIC	?partition@shared_motions@@QAEPAVCPartition@@XZ	; shared_motions::partition
; Function compile flags: /Ogtpy
;	COMDAT ?partition@shared_motions@@QAEPAVCPartition@@XZ
_TEXT	SEGMENT
?partition@shared_motions@@QAEPAVCPartition@@XZ PROC	; shared_motions::partition, COMDAT
; _this$ = ecx

; 235  : 	CPartition*			partition		()							{	VERIFY(p_); return &p_->m_partition;			}

	mov	eax, DWORD PTR [ecx]
	add	eax, 72					; 00000048H
	ret	0
?partition@shared_motions@@QAEPAVCPartition@@XZ ENDP	; shared_motions::partition
_TEXT	ENDS
PUBLIC	?fx@shared_motions@@QAEPAV?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@XZ ; shared_motions::fx
; Function compile flags: /Ogtpy
;	COMDAT ?fx@shared_motions@@QAEPAV?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@XZ
_TEXT	SEGMENT
?fx@shared_motions@@QAEPAV?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@XZ PROC ; shared_motions::fx, COMDAT
; _this$ = ecx

; 234  : 	accel_map*			fx				()							{	VERIFY(p_); return &p_->m_fx;					}

	mov	eax, DWORD PTR [ecx]
	add	eax, 48					; 00000030H
	ret	0
?fx@shared_motions@@QAEPAV?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@XZ ENDP ; shared_motions::fx
_TEXT	ENDS
PUBLIC	?cycle@shared_motions@@QAEPAV?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@XZ ; shared_motions::cycle
; Function compile flags: /Ogtpy
;	COMDAT ?cycle@shared_motions@@QAEPAV?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@XZ
_TEXT	SEGMENT
?cycle@shared_motions@@QAEPAV?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@XZ PROC ; shared_motions::cycle, COMDAT
; _this$ = ecx

; 233  : 	accel_map*			cycle			()							{	VERIFY(p_); return &p_->m_cycle;				}

	mov	eax, DWORD PTR [ecx]
	add	eax, 24					; 00000018H
	ret	0
?cycle@shared_motions@@QAEPAV?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@XZ ENDP ; shared_motions::cycle
_TEXT	ENDS
PUBLIC	?motion_map@shared_motions@@QAEPAV?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@XZ ; shared_motions::motion_map
; Function compile flags: /Ogtpy
;	COMDAT ?motion_map@shared_motions@@QAEPAV?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@XZ
_TEXT	SEGMENT
?motion_map@shared_motions@@QAEPAV?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@XZ PROC ; shared_motions::motion_map, COMDAT
; _this$ = ecx

; 232  : 	accel_map*			motion_map		()							{	VERIFY(p_); return &p_->m_motion_map;			}

	mov	eax, DWORD PTR [ecx]
	ret	0
?motion_map@shared_motions@@QAEPAV?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@XZ ENDP ; shared_motions::motion_map
_TEXT	ENDS
PUBLIC	??8shared_motions@@QBE_NABV0@@Z			; shared_motions::operator==
; Function compile flags: /Ogtpy
;	COMDAT ??8shared_motions@@QBE_NABV0@@Z
_TEXT	SEGMENT
_rhs$ = 8						; size = 4
??8shared_motions@@QBE_NABV0@@Z PROC			; shared_motions::operator==, COMDAT
; _this$ = ecx

; 228  : 	bool				operator==		(shared_motions const &rhs)	const {return (p_ == rhs.p_);}

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _rhs$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	sete	cl
	mov	al, cl
	ret	4
??8shared_motions@@QBE_NABV0@@Z ENDP			; shared_motions::operator==
_TEXT	ENDS
PUBLIC	??0shared_motions@@QAE@XZ			; shared_motions::shared_motions
; Function compile flags: /Ogtpy
;	COMDAT ??0shared_motions@@QAE@XZ
_TEXT	SEGMENT
??0shared_motions@@QAE@XZ PROC				; shared_motions::shared_motions, COMDAT
; _this$ = ecx

; 222  : 						shared_motions	()							{	p_ = 0;											}

	mov	eax, ecx
	mov	DWORD PTR [eax], 0
	ret	0
??0shared_motions@@QAE@XZ ENDP				; shared_motions::shared_motions
_TEXT	ENDS
PUBLIC	?destroy@shared_motions@@IAEXXZ			; shared_motions::destroy
; Function compile flags: /Ogtpy
;	COMDAT ?destroy@shared_motions@@IAEXXZ
_TEXT	SEGMENT
?destroy@shared_motions@@IAEXXZ PROC			; shared_motions::destroy, COMDAT
; _this$ = ecx

; 216  : 	void				destroy			()							{	if (0==p_) return;	p_->m_dwReference--; 	if (0==p_->m_dwReference)	p_=0;	}

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN1@destroy
	add	DWORD PTR [eax+136], -1
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax+136], 0
	jne	SHORT $LN1@destroy
	mov	DWORD PTR [ecx], 0
$LN1@destroy:
	ret	0
?destroy@shared_motions@@IAEXXZ ENDP			; shared_motions::destroy
_TEXT	ENDS
PUBLIC	?part@CPartition@@QBEABVCPartDef@@G@Z		; CPartition::part
; Function compile flags: /Ogtpy
;	COMDAT ?part@CPartition@@QBEABVCPartDef@@G@Z
_TEXT	SEGMENT
_id$ = 8						; size = 2
?part@CPartition@@QBEABVCPartDef@@G@Z PROC		; CPartition::part, COMDAT
; _this$ = ecx

; 160  : 	IC const CPartDef&	part				(u16 id)				const	{ return P[id]; }

	movzx	eax, WORD PTR _id$[esp-4]
	shl	eax, 4
	add	eax, ecx
	ret	4
?part@CPartition@@QBEABVCPartDef@@G@Z ENDP		; CPartition::part
_TEXT	ENDS
PUBLIC	??ACPartition@@QAEAAVCPartDef@@G@Z		; CPartition::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??ACPartition@@QAEAAVCPartDef@@G@Z
_TEXT	SEGMENT
_id$ = 8						; size = 2
??ACPartition@@QAEAAVCPartDef@@G@Z PROC			; CPartition::operator[], COMDAT
; _this$ = ecx

; 159  : 	IC CPartDef&		operator[] 			(u16 id)						{ return P[id]; }

	movzx	eax, WORD PTR _id$[esp-4]
	shl	eax, 4
	add	eax, ecx
	ret	4
??ACPartition@@QAEAAVCPartDef@@G@Z ENDP			; CPartition::operator[]
_TEXT	ENDS
PUBLIC	?mem_usage@CPartDef@@QAEIXZ			; CPartDef::mem_usage
; Function compile flags: /Ogtpy
;	COMDAT ?mem_usage@CPartDef@@QAEIXZ
_TEXT	SEGMENT
?mem_usage@CPartDef@@QAEIXZ PROC			; CPartDef::mem_usage, COMDAT
; _this$ = ecx

; 153  : 	u32					mem_usage			(){ return sizeof(*this)+bones.size()*sizeof(u32)+sizeof(Name);}

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2
	lea	eax, DWORD PTR [eax*4+20]
	ret	0
?mem_usage@CPartDef@@QAEIXZ ENDP			; CPartDef::mem_usage
_TEXT	ENDS
PUBLIC	?mem_usage@CMotionDef@@QAEIXZ			; CMotionDef::mem_usage
; Function compile flags: /Ogtpy
;	COMDAT ?mem_usage@CMotionDef@@QAEIXZ
_TEXT	SEGMENT
?mem_usage@CMotionDef@@QAEIXZ PROC			; CMotionDef::mem_usage, COMDAT
; _this$ = ecx

; 127  : 	u32						mem_usage			(){ return sizeof(*this);}

	mov	eax, 28					; 0000001cH
	ret	0
?mem_usage@CMotionDef@@QAEIXZ ENDP			; CMotionDef::mem_usage
_TEXT	ENDS
PUBLIC	__real@3ac800c8
PUBLIC	?Dequantize@CMotionDef@@QBEMG@Z			; CMotionDef::Dequantize
;	COMDAT __real@3ac800c8
CONST	SEGMENT
__real@3ac800c8 DD 03ac800c8r			; 0.0015259
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?Dequantize@CMotionDef@@QBEMG@Z
_TEXT	SEGMENT
tv130 = 8						; size = 4
_V$ = 8							; size = 2
?Dequantize@CMotionDef@@QBEMG@Z PROC			; CMotionDef::Dequantize, COMDAT
; _this$ = ecx

; 123  : 	IC float				Dequantize			(u16 V)	const	{	return  float(V)/655.35f; }

	movzx	eax, WORD PTR _V$[esp-4]
	mov	DWORD PTR tv130[esp-4], eax
	fild	DWORD PTR tv130[esp-4]
	fmul	DWORD PTR __real@3ac800c8
	ret	4
?Dequantize@CMotionDef@@QBEMG@Z ENDP			; CMotionDef::Dequantize
_TEXT	ENDS
PUBLIC	?is_empty@motion_marks@@QBE_NXZ			; motion_marks::is_empty
; Function compile flags: /Ogtpy
;	COMDAT ?is_empty@motion_marks@@QBE_NXZ
_TEXT	SEGMENT
?is_empty@motion_marks@@QBE_NXZ PROC			; motion_marks::is_empty, COMDAT
; _this$ = ecx

; 103  : 	bool			is_empty			() const { return intervals.empty(); }

	mov	eax, DWORD PTR [ecx]
	xor	edx, edx
	cmp	eax, DWORD PTR [ecx+4]
	sete	dl
	mov	al, dl
	ret	0
?is_empty@motion_marks@@QBE_NXZ ENDP			; motion_marks::is_empty
_TEXT	ENDS
PUBLIC	??1CMotion@@QAE@XZ				; CMotion::~CMotion
; Function compile flags: /Ogtpy
;	COMDAT ??1CMotion@@QAE@XZ
_TEXT	SEGMENT
??1CMotion@@QAE@XZ PROC					; CMotion::~CMotion, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR [ecx+12]
	xor	edx, edx
	cmp	eax, edx
	je	SHORT $LN5@CMotion
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [ecx+12]
	cmp	DWORD PTR [eax], edx
	jne	SHORT $LN5@CMotion
	mov	DWORD PTR [ecx+12], edx
$LN5@CMotion:
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, edx
	je	SHORT $LN11@CMotion
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [ecx+8]
	cmp	DWORD PTR [eax], edx
	jne	SHORT $LN11@CMotion
	mov	DWORD PTR [ecx+8], edx
$LN11@CMotion:
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, edx
	je	SHORT $LN17@CMotion
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [ecx+4]
	cmp	DWORD PTR [eax], edx
	jne	SHORT $LN17@CMotion
	mov	DWORD PTR [ecx+4], edx
$LN17@CMotion:
	ret	0
??1CMotion@@QAE@XZ ENDP					; CMotion::~CMotion
_TEXT	ENDS
PUBLIC	??0CMotion@@QAE@XZ				; CMotion::CMotion
; Function compile flags: /Ogtpy
;	COMDAT ??0CMotion@@QAE@XZ
_TEXT	SEGMENT
??0CMotion@@QAE@XZ PROC					; CMotion::CMotion, COMDAT
; _this$ = ecx
	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	ret	0
??0CMotion@@QAE@XZ ENDP					; CMotion::CMotion
_TEXT	ENDS
PUBLIC	?mem_usage@CMotion@@QAEIXZ			; CMotion::mem_usage
; Function compile flags: /Ogtpy
;	COMDAT ?mem_usage@CMotion@@QAEIXZ
_TEXT	SEGMENT
?mem_usage@CMotion@@QAEIXZ PROC				; CMotion::mem_usage, COMDAT
; _this$ = ecx

; 73   : 	u32					mem_usage			(){ 

	push	ecx

; 74   : 		u32 sz			= sizeof(*this);
; 75   : 		if (_keysR.size()) sz += _keysR.size()*sizeof(CKeyQR)/_keysR.ref_count();

	mov	eax, DWORD PTR [ecx+4]
	test	eax, eax
	push	esi
	mov	esi, 40					; 00000028H
	je	SHORT $LN3@mem_usage
	mov	eax, DWORD PTR [eax+8]
	shr	eax, 3
	je	SHORT $LN3@mem_usage
	mov	eax, DWORD PTR [ecx+4]
	test	eax, eax
	je	SHORT $LN10@mem_usage
$LN11@mem_usage:
	mov	eax, DWORD PTR [eax+8]
	shr	eax, 3
$LN10@mem_usage:
	mov	edx, DWORD PTR [ecx+4]
	test	edx, edx
	jne	SHORT $LN15@mem_usage
	xor	esi, esi
	jmp	SHORT $LN14@mem_usage
$LN15@mem_usage:
	mov	esi, DWORD PTR [edx]
$LN14@mem_usage:
	add	eax, eax
	add	eax, eax
	add	eax, eax
	xor	edx, edx
	div	esi
	mov	esi, eax
	add	esi, 40					; 00000028H
$LN3@mem_usage:

; 76   : 		if (_keysT8.size()) sz += _keysT8.size()*sizeof(CKeyQT8)/_keysT8.ref_count();

	mov	edx, DWORD PTR [ecx+8]
	test	edx, edx
	je	SHORT $LN2@mem_usage
	mov	eax, -1431655765			; aaaaaaabH
	mul	DWORD PTR [edx+8]
	shr	edx, 1
	je	SHORT $LN2@mem_usage
	mov	edx, DWORD PTR [ecx+8]
	test	edx, edx
	je	SHORT $LN22@mem_usage
$LN23@mem_usage:
	mov	eax, -1431655765			; aaaaaaabH
	mul	DWORD PTR [edx+8]
	shr	edx, 1
$LN22@mem_usage:
	mov	eax, DWORD PTR [ecx+8]
	test	eax, eax
	push	edi
	jne	SHORT $LN27@mem_usage
	xor	edi, edi
	jmp	SHORT $LN26@mem_usage
$LN27@mem_usage:
	mov	edi, DWORD PTR [eax]
$LN26@mem_usage:
	lea	eax, DWORD PTR [edx+edx*2]
	xor	edx, edx
	div	edi
	pop	edi
	add	esi, eax
$LN2@mem_usage:

; 77   : 		if (_keysT16.size()) sz += _keysT16.size()*sizeof(CKeyQT16)/_keysT16.ref_count();

	mov	edx, DWORD PTR [ecx+12]
	test	edx, edx
	je	SHORT $LN43@mem_usage
	mov	eax, -1431655765			; aaaaaaabH
	mul	DWORD PTR [edx+8]
	shr	edx, 2
	je	SHORT $LN43@mem_usage
	mov	edx, DWORD PTR [ecx+12]
	test	edx, edx
	je	SHORT $LN34@mem_usage
$LN35@mem_usage:
	mov	eax, -1431655765			; aaaaaaabH
	mul	DWORD PTR [edx+8]
	shr	edx, 2
$LN34@mem_usage:
	mov	ecx, DWORD PTR [ecx+12]
	test	ecx, ecx
	jne	SHORT $LN39@mem_usage
	lea	eax, DWORD PTR [edx+edx*2]
	add	eax, eax
	xor	edx, edx
	div	ecx
	add	esi, eax

; 78   : 		return			sz;

	mov	eax, esi
	pop	esi

; 79   : 	}

	pop	ecx
	ret	0

; 77   : 		if (_keysT16.size()) sz += _keysT16.size()*sizeof(CKeyQT16)/_keysT16.ref_count();

$LN39@mem_usage:
	mov	ecx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [edx+edx*2]
	add	eax, eax
	xor	edx, edx
	div	ecx
	add	esi, eax
$LN43@mem_usage:

; 78   : 		return			sz;

	mov	eax, esi
	pop	esi

; 79   : 	}

	pop	ecx
	ret	0
?mem_usage@CMotion@@QAEIXZ ENDP				; CMotion::mem_usage
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	?GetLength@CMotion@@QAEMXZ			; CMotion::GetLength
;	COMDAT __real@4f800000
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?GetLength@CMotion@@QAEMXZ
_TEXT	SEGMENT
tv131 = -4						; size = 4
?GetLength@CMotion@@QAEMXZ PROC				; CMotion::GetLength, COMDAT
; _this$ = ecx

; 71   : 	float				GetLength			(){ return float(_count)*SAMPLE_SPF; }

	push	ecx
	mov	eax, DWORD PTR [ecx]
	shr	eax, 8
	test	eax, eax
	mov	DWORD PTR tv131[esp+4], eax
	fild	DWORD PTR tv131[esp+4]
	jge	SHORT $LN3@GetLength
	fadd	DWORD PTR __real@4f800000
$LN3@GetLength:
	fmul	DWORD PTR _SAMPLE_SPF
	pop	ecx
	ret	0
?GetLength@CMotion@@QAEMXZ ENDP				; CMotion::GetLength
_TEXT	ENDS
PUBLIC	?get_count@CMotion@@QBEIXZ			; CMotion::get_count
; Function compile flags: /Ogtpy
;	COMDAT ?get_count@CMotion@@QBEIXZ
_TEXT	SEGMENT
?get_count@CMotion@@QBEIXZ PROC				; CMotion::get_count, COMDAT
; _this$ = ecx

; 69   :     ICF u32					get_count			() const {return (u32(_count)&0x00FFFFFF);}

	mov	eax, DWORD PTR [ecx]
	shr	eax, 8
	ret	0
?get_count@CMotion@@QBEIXZ ENDP				; CMotion::get_count
_TEXT	ENDS
PUBLIC	?set_count@CMotion@@QAEXI@Z			; CMotion::set_count
; Function compile flags: /Ogtpy
;	COMDAT ?set_count@CMotion@@QAEXI@Z
_TEXT	SEGMENT
_cnt$ = 8						; size = 4
?set_count@CMotion@@QAEXI@Z PROC			; CMotion::set_count, COMDAT
; _this$ = ecx

; 68   :     void				set_count			(u32 cnt){VERIFY(cnt); _count=cnt;}

	movzx	eax, BYTE PTR [ecx]
	mov	edx, DWORD PTR _cnt$[esp-4]
	shl	edx, 8
	or	eax, edx
	mov	DWORD PTR [ecx], eax
	ret	4
?set_count@CMotion@@QAEXI@Z ENDP			; CMotion::set_count
_TEXT	ENDS
PUBLIC	?test_flag@CMotion@@QBEHE@Z			; CMotion::test_flag
; Function compile flags: /Ogtpy
;	COMDAT ?test_flag@CMotion@@QBEHE@Z
_TEXT	SEGMENT
_mask$ = 8						; size = 1
?test_flag@CMotion@@QBEHE@Z PROC			; CMotion::test_flag, COMDAT
; _this$ = ecx

; 66   :     BOOL				test_flag			(u8 mask) const		{return BOOL(_flags&mask);}

	movzx	eax, BYTE PTR _mask$[esp-4]
	and	eax, DWORD PTR [ecx]
	ret	4
?test_flag@CMotion@@QBEHE@Z ENDP			; CMotion::test_flag
_TEXT	ENDS
PUBLIC	?set_flag@CMotion@@QAEXEE@Z			; CMotion::set_flag
; Function compile flags: /Ogtpy
;	COMDAT ?set_flag@CMotion@@QAEXEE@Z
_TEXT	SEGMENT
_mask$ = 8						; size = 1
_val$ = 12						; size = 1
?set_flag@CMotion@@QAEXEE@Z PROC			; CMotion::set_flag, COMDAT
; _this$ = ecx

; 65   :     void				set_flag			(u8 mask, u8 val)	{if (val)_flags|=mask; else _flags&=~mask;}

	cmp	BYTE PTR _val$[esp-4], 0
	je	SHORT $LN2@set_flag
	mov	al, BYTE PTR _mask$[esp-4]
	or	BYTE PTR [ecx], al
	ret	8
$LN2@set_flag:
	mov	dl, BYTE PTR _mask$[esp-4]
	not	dl
	and	BYTE PTR [ecx], dl
	ret	8
?set_flag@CMotion@@QAEXEE@Z ENDP			; CMotion::set_flag
_TEXT	ENDS
PUBLIC	?set_flags@CMotion@@QAEXE@Z			; CMotion::set_flags
; Function compile flags: /Ogtpy
;	COMDAT ?set_flags@CMotion@@QAEXE@Z
_TEXT	SEGMENT
_val$ = 8						; size = 1
?set_flags@CMotion@@QAEXE@Z PROC			; CMotion::set_flags, COMDAT
; _this$ = ecx

; 64   :     void				set_flags			(u8 val)			{_flags=val;}

	mov	al, BYTE PTR _val$[esp-4]
	mov	BYTE PTR [ecx], al
	ret	4
?set_flags@CMotion@@QAEXE@Z ENDP			; CMotion::set_flags
_TEXT	ENDS
PUBLIC	??4CKeyQR@@QAEAAU0@ABU0@@Z			; CKeyQR::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4CKeyQR@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4CKeyQR@@QAEAAU0@ABU0@@Z PROC				; CKeyQR::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
	ret	4
??4CKeyQR@@QAEAAU0@ABU0@@Z ENDP				; CKeyQR::operator=
_TEXT	ENDS
PUBLIC	??4CKey@@QAEAAU0@ABU0@@Z			; CKey::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4CKey@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4CKey@@QAEAAU0@ABU0@@Z PROC				; CKey::operator=, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, DWORD PTR ___that$[esp]
	push	edi
	mov	eax, ecx
	mov	ecx, 7
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	ret	4
??4CKey@@QAEAAU0@ABU0@@Z ENDP				; CKey::operator=
PUBLIC	__real@00000000
;	COMDAT __real@00000000
; File d:\clearsky\sources\engine\xrengine\xr_ioconsole.cpp
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
;	COMDAT ??0?$_Vector_base@IV?$xalloc@I@@@priv@stlp_std@@QAE@ABV?$xalloc@I@@@Z
_TEXT	SEGMENT
??0?$_Vector_base@IV?$xalloc@I@@@priv@stlp_std@@QAE@ABV?$xalloc@I@@@Z PROC ; stlp_std::priv::_Vector_base<unsigned int,xalloc<unsigned int> >::_Vector_base<unsigned int,xalloc<unsigned int> >, COMDAT
; _this$ = eax

; 67   :     : _M_start(0), _M_finish(0), _M_end_of_storage(__a, 0) {}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$_Vector_base@IV?$xalloc@I@@@priv@stlp_std@@QAE@ABV?$xalloc@I@@@Z ENDP ; stlp_std::priv::_Vector_base<unsigned int,xalloc<unsigned int> >::_Vector_base<unsigned int,xalloc<unsigned int> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?begin@?$vector@IV?$xalloc@I@@@stlp_std@@QAEPAIXZ
_TEXT	SEGMENT
?begin@?$vector@IV?$xalloc@I@@@stlp_std@@QAEPAIXZ PROC	; stlp_std::vector<unsigned int,xalloc<unsigned int> >::begin, COMDAT
; _this$ = eax

; 79   :   iterator begin()             { return cast_traits::to_value_type_ptr(_M_impl.begin()); }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$vector@IV?$xalloc@I@@@stlp_std@@QAEPAIXZ ENDP	; stlp_std::vector<unsigned int,xalloc<unsigned int> >::begin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_string_base.h
_TEXT	ENDS
;	COMDAT ?_M_destroy_range@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IAEXII@Z
_TEXT	SEGMENT
?_M_destroy_range@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IAEXII@Z PROC ; stlp_std::priv::_String_base<char,xalloc<char> >::_M_destroy_range, COMDAT

; 169  : #if defined (_STLP_USE_SHORT_STRING_OPTIM)
; 170  :     if (!_M_using_static_buf())
; 171  :       _STLP_STD::_Destroy_Range(_M_buffers._M_dynamic_buf + __from_off, _M_finish + __to_off);
; 172  : #else
; 173  :     _STLP_STD::_Destroy_Range(_M_start + __from_off, _M_finish + __to_off);
; 174  : #endif /* _STLP_USE_SHORT_STRING_OPTIM */
; 175  :   }

	ret	0
?_M_destroy_range@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IAEXII@Z ENDP ; stlp_std::priv::_String_base<char,xalloc<char> >::_M_destroy_range
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?deallocate@?$xalloc@D@@QBEXPADI@Z
_TEXT	SEGMENT
?deallocate@?$xalloc@D@@QBEXPADI@Z PROC			; xalloc<char>::deallocate, COMDAT
; _p$ = eax

; 83   : 							void					deallocate		(pointer p, size_type n) const			{	xr_free	(p);				}

	test	eax, eax
	je	SHORT $LN3@deallocate@47
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN3@deallocate@47:
	ret	0
?deallocate@?$xalloc@D@@QBEXPADI@Z ENDP			; xalloc<char>::deallocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_string_base.h
_TEXT	ENDS
;	COMDAT ?_M_deallocate_block@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IAEXXZ
_TEXT	SEGMENT
?_M_deallocate_block@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IAEXXZ PROC ; stlp_std::priv::_String_base<char,xalloc<char> >::_M_deallocate_block, COMDAT
; _this$ = eax

; 90   : #if defined (_STLP_USE_SHORT_STRING_OPTIM)
; 91   :     if (!_M_using_static_buf() && (_M_buffers._M_dynamic_buf != 0))

	lea	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [eax+20], ecx
	je	SHORT $LN8@M_dealloca
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN8@M_dealloca

; 92   :       _M_end_of_storage.deallocate(_M_buffers._M_dynamic_buf, _M_end_of_storage._M_data - _M_buffers._M_dynamic_buf);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN8@M_dealloca:

; 93   : #else
; 94   :     if (_M_start != 0)
; 95   :       _M_end_of_storage.deallocate(_M_start, _M_end_of_storage._M_data - _M_start);
; 96   : #endif /* _STLP_USE_SHORT_STRING_OPTIM */
; 97   :   }

	ret	0
?_M_deallocate_block@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IAEXXZ ENDP ; stlp_std::priv::_String_base<char,xalloc<char> >::_M_deallocate_block
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IAE@XZ
_TEXT	SEGMENT
??1?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IAE@XZ PROC ; stlp_std::priv::_String_base<char,xalloc<char> >::~_String_base<char,xalloc<char> >, COMDAT
; _this$ = eax

; 149  :   ~_String_base() { _M_deallocate_block(); }

	lea	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [eax+20], ecx
	je	SHORT $LN10@String_bas
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN10@String_bas
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN10@String_bas:
	ret	0
??1?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IAE@XZ ENDP ; stlp_std::priv::_String_base<char,xalloc<char> >::~_String_base<char,xalloc<char> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_string.h
_TEXT	ENDS
;	COMDAT ??1?$basic_string@DV?$char_traits@D@stlp_std@@V?$xalloc@D@@@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DV?$char_traits@D@stlp_std@@V?$xalloc@D@@@stlp_std@@QAE@XZ PROC ; stlp_std::basic_string<char,stlp_std::char_traits<char>,xalloc<char> >::~basic_string<char,stlp_std::char_traits<char>,xalloc<char> >, COMDAT
; _this$ = eax

; 373  :   { this->_M_destroy_range(); }

	lea	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [eax+20], ecx
	je	SHORT $LN12@basic_stri
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN12@basic_stri
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN12@basic_stri:
	ret	0
??1?$basic_string@DV?$char_traits@D@stlp_std@@V?$xalloc@D@@@stlp_std@@QAE@XZ ENDP ; stlp_std::basic_string<char,stlp_std::char_traits<char>,xalloc<char> >::~basic_string<char,stlp_std::char_traits<char>,xalloc<char> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?rend@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAI@3@XZ
_TEXT	SEGMENT
?rend@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAI@3@XZ PROC ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::rend, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 177  :   reverse_iterator rend()                { return reverse_iterator(begin()); }

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	ret	0
?rend@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAI@3@XZ ENDP ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::rend
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?deallocate@?$xalloc@I@@QBEXPAII@Z
_TEXT	SEGMENT
?deallocate@?$xalloc@I@@QBEXPAII@Z PROC			; xalloc<unsigned int>::deallocate, COMDAT
; _p$ = eax

; 83   : 							void					deallocate		(pointer p, size_type n) const			{	xr_free	(p);				}

	test	eax, eax
	je	SHORT $LN3@deallocate@48
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN3@deallocate@48:
	ret	0
?deallocate@?$xalloc@I@@QBEXPAII@Z ENDP			; xalloc<unsigned int>::deallocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$_Param_Construct@II@stlp_std@@YAXPAIABI@Z
_TEXT	SEGMENT
??$_Param_Construct@II@stlp_std@@YAXPAIABI@Z PROC	; stlp_std::_Param_Construct<unsigned int,unsigned int>, COMDAT
; ___p$ = eax
; ___val$ = ecx

; 118  : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 119  :   memset((char*)__p, _STLP_SHRED_BYTE, sizeof(_T1));
; 120  : #endif
; 121  :   _STLP_PLACEMENT_NEW (__p) _T1(__val);

	test	eax, eax
	je	SHORT $LN3@Param_Cons
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN3@Param_Cons:

; 122  : }

	ret	0
??$_Param_Construct@II@stlp_std@@YAXPAIABI@Z ENDP	; stlp_std::_Param_Construct<unsigned int,unsigned int>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Param_Construct@U?$pair@MM@stlp_std@@U12@@stlp_std@@YAXPAU?$pair@MM@0@ABU10@@Z
_TEXT	SEGMENT
??$_Param_Construct@U?$pair@MM@stlp_std@@U12@@stlp_std@@YAXPAU?$pair@MM@0@ABU10@@Z PROC ; stlp_std::_Param_Construct<stlp_std::pair<float,float>,stlp_std::pair<float,float> >, COMDAT
; ___p$ = eax
; ___val$ = ecx

; 118  : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 119  :   memset((char*)__p, _STLP_SHRED_BYTE, sizeof(_T1));
; 120  : #endif
; 121  :   _STLP_PLACEMENT_NEW (__p) _T1(__val);

	test	eax, eax
	je	SHORT $LN3@Param_Cons@2
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+4]
$LN3@Param_Cons@2:

; 122  : }

	ret	0
??$_Param_Construct@U?$pair@MM@stlp_std@@U12@@stlp_std@@YAXPAU?$pair@MM@0@ABU10@@Z ENDP ; stlp_std::_Param_Construct<stlp_std::pair<float,float>,stlp_std::pair<float,float> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_GCMotion@@QAEPAXI@Z
_TEXT	SEGMENT
??_GCMotion@@QAEPAXI@Z PROC				; CMotion::`scalar deleting destructor', COMDAT
; _this$ = eax
	mov	ecx, DWORD PTR [eax+12]
	xor	edx, edx
	cmp	ecx, edx
	je	SHORT $LN8@scalar
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx], edx
	jne	SHORT $LN8@scalar
	mov	DWORD PTR [eax+12], edx
$LN8@scalar:
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, edx
	je	SHORT $LN14@scalar
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx], edx
	jne	SHORT $LN14@scalar
	mov	DWORD PTR [eax+8], edx
$LN14@scalar:
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, edx
	je	SHORT $LN20@scalar
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx], edx
	jne	SHORT $LN20@scalar
	mov	DWORD PTR [eax+4], edx
$LN20@scalar:
	ret	0
??_GCMotion@@QAEPAXI@Z ENDP				; CMotion::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__destroy_aux@VCMotion@@@stlp_std@@YAXPAVCMotion@@ABU__false_type@0@@Z
_TEXT	SEGMENT
??$__destroy_aux@VCMotion@@@stlp_std@@YAXPAVCMotion@@ABU__false_type@0@@Z PROC ; stlp_std::__destroy_aux<CMotion>, COMDAT
; ___pointer$ = eax

; 53   : { __pointer->~_Tp(); }

	mov	ecx, DWORD PTR [eax+12]
	xor	edx, edx
	cmp	ecx, edx
	je	SHORT $LN10@destroy_au
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx], edx
	jne	SHORT $LN10@destroy_au
	mov	DWORD PTR [eax+12], edx
$LN10@destroy_au:
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, edx
	je	SHORT $LN16@destroy_au
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx], edx
	jne	SHORT $LN16@destroy_au
	mov	DWORD PTR [eax+8], edx
$LN16@destroy_au:
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, edx
	je	SHORT $LN22@destroy_au
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx], edx
	jne	SHORT $LN22@destroy_au
	mov	DWORD PTR [eax+4], edx
$LN22@destroy_au:
	ret	0
??$__destroy_aux@VCMotion@@@stlp_std@@YAXPAVCMotion@@ABU__false_type@0@@Z ENDP ; stlp_std::__destroy_aux<CMotion>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_uninitialized.h
_TEXT	ENDS
;	COMDAT ??$__ufill@PAIIH@priv@stlp_std@@YAXPAI0ABIABUrandom_access_iterator_tag@1@PAH@Z
_TEXT	SEGMENT
??$__ufill@PAIIH@priv@stlp_std@@YAXPAI0ABIABUrandom_access_iterator_tag@1@PAH@Z PROC ; stlp_std::priv::__ufill<unsigned int *,unsigned int,int>, COMDAT
; ___first$ = ecx
; ___last$ = eax
; ___x$ = edx

; 247  :   _ForwardIter __cur = __first;
; 248  :   _STLP_TRY {
; 249  :     for (_Distance __n = __last - __first; __n > 0; --__n, ++__cur)

	sub	eax, ecx
	sar	eax, 2
	test	eax, eax
	jle	SHORT $LN1@ufill
	push	esi
	npad	6
$LL3@ufill:

; 250  :       _Param_Construct(&*__cur, __x);

	test	ecx, ecx
	je	SHORT $LN2@ufill
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx], esi
$LN2@ufill:
	sub	eax, 1
	add	ecx, 4
	test	eax, eax
	jg	SHORT $LL3@ufill
	pop	esi
$LN1@ufill:

; 251  :   }
; 252  :   _STLP_UNWIND(_STLP_STD::_Destroy_Range(__first, __cur))
; 253  : }

	ret	0
??$__ufill@PAIIH@priv@stlp_std@@YAXPAI0ABIABUrandom_access_iterator_tag@1@PAH@Z ENDP ; stlp_std::priv::__ufill<unsigned int *,unsigned int,int>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__ufill@PAU?$pair@MM@stlp_std@@U12@H@priv@stlp_std@@YAXPAU?$pair@MM@1@0ABU21@ABUrandom_access_iterator_tag@1@PAH@Z
_TEXT	SEGMENT
??$__ufill@PAU?$pair@MM@stlp_std@@U12@H@priv@stlp_std@@YAXPAU?$pair@MM@1@0ABU21@ABUrandom_access_iterator_tag@1@PAH@Z PROC ; stlp_std::priv::__ufill<stlp_std::pair<float,float> *,stlp_std::pair<float,float>,int>, COMDAT
; ___first$ = ecx
; ___last$ = eax
; ___x$ = edx

; 247  :   _ForwardIter __cur = __first;
; 248  :   _STLP_TRY {
; 249  :     for (_Distance __n = __last - __first; __n > 0; --__n, ++__cur)

	sub	eax, ecx
	sar	eax, 3
	cmp	eax, 4
	push	esi
	mov	esi, eax
	jl	SHORT $LC17@ufill@2
	push	ebx
	lea	ebx, DWORD PTR [esi-4]
	shr	ebx, 2
	add	ebx, 1
	push	edi
	mov	edi, ebx
	neg	edi
	lea	eax, DWORD PTR [ecx+20]
	lea	esi, DWORD PTR [esi+edi*4]
$LL26@ufill@2:

; 250  :       _Param_Construct(&*__cur, __x);

	test	ecx, ecx
	je	SHORT $LN18@ufill@2
	fld	DWORD PTR [edx]
	fstp	DWORD PTR [ecx]
	fld	DWORD PTR [edx+4]
	fstp	DWORD PTR [eax-16]
$LN18@ufill@2:
	lea	edi, DWORD PTR [eax-12]
	test	edi, edi
	je	SHORT $LN20@ufill@2
	fld	DWORD PTR [edx]
	fstp	DWORD PTR [eax-12]
	fld	DWORD PTR [edx+4]
	fstp	DWORD PTR [eax-8]
$LN20@ufill@2:
	lea	edi, DWORD PTR [eax-4]
	test	edi, edi
	je	SHORT $LN22@ufill@2
	fld	DWORD PTR [edx]
	fstp	DWORD PTR [eax-4]
	fld	DWORD PTR [edx+4]
	fstp	DWORD PTR [eax]
$LN22@ufill@2:
	lea	edi, DWORD PTR [eax+4]
	test	edi, edi
	je	SHORT $LN24@ufill@2
	fld	DWORD PTR [edx]
	fstp	DWORD PTR [edi]
	fld	DWORD PTR [edx+4]
	fstp	DWORD PTR [eax+8]
$LN24@ufill@2:
	add	ecx, 32					; 00000020H
	add	eax, 32					; 00000020H
	sub	ebx, 1
	jne	SHORT $LL26@ufill@2
	pop	edi
	pop	ebx
$LC17@ufill@2:

; 247  :   _ForwardIter __cur = __first;
; 248  :   _STLP_TRY {
; 249  :     for (_Distance __n = __last - __first; __n > 0; --__n, ++__cur)

	test	esi, esi
	jle	SHORT $LN16@ufill@2
$LC3@ufill@2:

; 250  :       _Param_Construct(&*__cur, __x);

	test	ecx, ecx
	je	SHORT $LN2@ufill@2
	fld	DWORD PTR [edx]
	fstp	DWORD PTR [ecx]
	fld	DWORD PTR [edx+4]
	fstp	DWORD PTR [ecx+4]
$LN2@ufill@2:
	sub	esi, 1
	add	ecx, 8
	test	esi, esi
	jg	SHORT $LC3@ufill@2
$LN16@ufill@2:
	pop	esi

; 251  :   }
; 252  :   _STLP_UNWIND(_STLP_STD::_Destroy_Range(__first, __cur))
; 253  : }

	ret	0
??$__ufill@PAU?$pair@MM@stlp_std@@U12@H@priv@stlp_std@@YAXPAU?$pair@MM@1@0ABU21@ABUrandom_access_iterator_tag@1@PAH@Z ENDP ; stlp_std::priv::__ufill<stlp_std::pair<float,float> *,stlp_std::pair<float,float>,int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$__destroy_range_aux@PAVCMotion@@V1@@stlp_std@@YAXPAVCMotion@@00ABU__false_type@0@@Z
_TEXT	SEGMENT
??$__destroy_range_aux@PAVCMotion@@V1@@stlp_std@@YAXPAVCMotion@@00ABU__false_type@0@@Z PROC ; stlp_std::__destroy_range_aux<CMotion *,CMotion>, COMDAT
; ___first$ = eax
; ___last$ = esi

; 152  :   for ( ; __first != __last; ++__first) {

	cmp	eax, esi
	je	SHORT $LN1@destroy_ra
	xor	edx, edx
$LL3@destroy_ra:

; 153  :     __destroy_aux(&(*__first), __false_type());

	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, edx
	je	SHORT $LN15@destroy_ra
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx], edx
	jne	SHORT $LN15@destroy_ra
	mov	DWORD PTR [eax+12], edx
$LN15@destroy_ra:
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, edx
	je	SHORT $LN21@destroy_ra
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx], edx
	jne	SHORT $LN21@destroy_ra
	mov	DWORD PTR [eax+8], edx
$LN21@destroy_ra:
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, edx
	je	SHORT $LN27@destroy_ra
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx], edx
	jne	SHORT $LN27@destroy_ra
	mov	DWORD PTR [eax+4], edx
$LN27@destroy_ra:
	add	eax, 40					; 00000028H
	cmp	eax, esi
	jne	SHORT $LL3@destroy_ra
$LN1@destroy_ra:

; 154  : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 155  :     memset((char*)&(*__first), _STLP_SHRED_BYTE, sizeof(_Tp));
; 156  : #endif
; 157  :   }
; 158  : }

	ret	0
??$__destroy_range_aux@PAVCMotion@@V1@@stlp_std@@YAXPAVCMotion@@00ABU__false_type@0@@Z ENDP ; stlp_std::__destroy_range_aux<CMotion *,CMotion>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_uninitialized.h
_TEXT	ENDS
;	COMDAT ??$__uninitialized_fill_n@PAIII@priv@stlp_std@@YAPAIPAIIABI@Z
_TEXT	SEGMENT
??$__uninitialized_fill_n@PAIII@priv@stlp_std@@YAPAIPAIIABI@Z PROC ; stlp_std::priv::__uninitialized_fill_n<unsigned int *,unsigned int,unsigned int>, COMDAT
; ___first$ = edx
; ___n$ = eax
; ___x$ = esi

; 314  :   _ForwardIter __last = __first + __n;

	lea	eax, DWORD PTR [edx+eax*4]

; 315  :   __ufill(__first, __last, __x, random_access_iterator_tag(), (ptrdiff_t*)0);

	mov	ecx, eax
	sub	ecx, edx
	sar	ecx, 2
	test	ecx, ecx
	jle	SHORT $LN3@uninitiali
	push	edi
	npad	1
$LL5@uninitiali:
	test	edx, edx
	je	SHORT $LN4@uninitiali
	mov	edi, DWORD PTR [esi]
	mov	DWORD PTR [edx], edi
$LN4@uninitiali:
	sub	ecx, 1
	add	edx, 4
	test	ecx, ecx
	jg	SHORT $LL5@uninitiali
	pop	edi
$LN3@uninitiali:

; 316  :   return __last;
; 317  : }

	ret	0
??$__uninitialized_fill_n@PAIII@priv@stlp_std@@YAPAIPAIIABI@Z ENDP ; stlp_std::priv::__uninitialized_fill_n<unsigned int *,unsigned int,unsigned int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__copy_backward_ptrs@PAIPAI@priv@stlp_std@@YAPAIPAI00ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__copy_backward_ptrs@PAIPAI@priv@stlp_std@@YAPAIPAI00ABU__true_type@1@@Z PROC ; stlp_std::priv::__copy_backward_ptrs<unsigned int *,unsigned int *>, COMDAT
; ___first$ = edx
; ___last$ = ecx
; ___result$ = eax

; 294  :   return (_OutputIter)__copy_trivial_backward(__first, __last, __result);

	sub	ecx, edx
	test	ecx, ecx
	jle	SHORT $LN6@copy_backw@2
	push	ecx
	push	edx
	sub	eax, ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN6@copy_backw@2:

; 295  : }

	ret	0
??$__copy_backward_ptrs@PAIPAI@priv@stlp_std@@YAPAIPAI00ABU__true_type@1@@Z ENDP ; stlp_std::priv::__copy_backward_ptrs<unsigned int *,unsigned int *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_uninitialized.h
_TEXT	ENDS
;	COMDAT ??$__ucopy_ptrs@PAIPAI@priv@stlp_std@@YAPAIPAI00ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__ucopy_ptrs@PAIPAI@priv@stlp_std@@YAPAIPAI00ABU__true_type@1@@Z PROC ; stlp_std::priv::__ucopy_ptrs<unsigned int *,unsigned int *>, COMDAT
; ___first$ = ecx
; ___last$ = edx
; ___result$ = eax

; 117  :                                 const __true_type& /*TrivialUCopy*/) {

	push	esi
	mov	esi, edx

; 118  :   // we know they all pointers, so this cast is OK
; 119  :   //  return (_OutputIter)__copy_trivial(&(*__first), &(*__last), &(*__result));
; 120  :   return (_OutputIter)__ucopy_trivial(__first, __last, __result);

	cmp	esi, ecx
	je	SHORT $LN6@ucopy_ptrs
	sub	esi, ecx
	push	esi
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN6@ucopy_ptrs:
	pop	esi

; 121  : }

	ret	0
??$__ucopy_ptrs@PAIPAI@priv@stlp_std@@YAPAIPAI00ABU__true_type@1@@Z ENDP ; stlp_std::priv::__ucopy_ptrs<unsigned int *,unsigned int *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__uninitialized_fill_n@PAU?$pair@MM@stlp_std@@IU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PAU21@IABU21@@Z
_TEXT	SEGMENT
??$__uninitialized_fill_n@PAU?$pair@MM@stlp_std@@IU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PAU21@IABU21@@Z PROC ; stlp_std::priv::__uninitialized_fill_n<stlp_std::pair<float,float> *,unsigned int,stlp_std::pair<float,float> >, COMDAT
; ___first$ = ecx
; ___n$ = eax
; ___x$ = edx

; 313  : inline _ForwardIter __uninitialized_fill_n(_ForwardIter __first, _Size __n, const _Tp& __x) {

	push	esi

; 314  :   _ForwardIter __last = __first + __n;

	lea	esi, DWORD PTR [ecx+eax*8]

; 315  :   __ufill(__first, __last, __x, random_access_iterator_tag(), (ptrdiff_t*)0);

	mov	eax, esi
	call	??$__ufill@PAU?$pair@MM@stlp_std@@U12@H@priv@stlp_std@@YAXPAU?$pair@MM@1@0ABU21@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ufill<stlp_std::pair<float,float> *,stlp_std::pair<float,float>,int>

; 316  :   return __last;

	mov	eax, esi
	pop	esi

; 317  : }

	ret	0
??$__uninitialized_fill_n@PAU?$pair@MM@stlp_std@@IU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PAU21@IABU21@@Z ENDP ; stlp_std::priv::__uninitialized_fill_n<stlp_std::pair<float,float> *,unsigned int,stlp_std::pair<float,float> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__copy_backward_ptrs@PAU?$pair@MM@stlp_std@@PAU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PAU21@00ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__copy_backward_ptrs@PAU?$pair@MM@stlp_std@@PAU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PAU21@00ABU__true_type@1@@Z PROC ; stlp_std::priv::__copy_backward_ptrs<stlp_std::pair<float,float> *,stlp_std::pair<float,float> *>, COMDAT
; ___first$ = edx
; ___last$ = ecx
; ___result$ = eax

; 294  :   return (_OutputIter)__copy_trivial_backward(__first, __last, __result);

	sub	ecx, edx
	test	ecx, ecx
	jle	SHORT $LN6@copy_backw@3
	push	ecx
	push	edx
	sub	eax, ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN6@copy_backw@3:

; 295  : }

	ret	0
??$__copy_backward_ptrs@PAU?$pair@MM@stlp_std@@PAU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PAU21@00ABU__true_type@1@@Z ENDP ; stlp_std::priv::__copy_backward_ptrs<stlp_std::pair<float,float> *,stlp_std::pair<float,float> *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_uninitialized.h
_TEXT	ENDS
;	COMDAT ??$__ucopy_ptrs@PAU?$pair@MM@stlp_std@@PAU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PAU21@00ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__ucopy_ptrs@PAU?$pair@MM@stlp_std@@PAU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PAU21@00ABU__true_type@1@@Z PROC ; stlp_std::priv::__ucopy_ptrs<stlp_std::pair<float,float> *,stlp_std::pair<float,float> *>, COMDAT
; ___first$ = ecx
; ___last$ = edx
; ___result$ = eax

; 117  :                                 const __true_type& /*TrivialUCopy*/) {

	push	esi
	mov	esi, edx

; 118  :   // we know they all pointers, so this cast is OK
; 119  :   //  return (_OutputIter)__copy_trivial(&(*__first), &(*__last), &(*__result));
; 120  :   return (_OutputIter)__ucopy_trivial(__first, __last, __result);

	cmp	esi, ecx
	je	SHORT $LN6@ucopy_ptrs@2
	sub	esi, ecx
	push	esi
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN6@ucopy_ptrs@2:
	pop	esi

; 121  : }

	ret	0
??$__ucopy_ptrs@PAU?$pair@MM@stlp_std@@PAU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PAU21@00ABU__true_type@1@@Z ENDP ; stlp_std::priv::__ucopy_ptrs<stlp_std::pair<float,float> *,stlp_std::pair<float,float> *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ??F?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QAEAAU012@XZ
_TEXT	SEGMENT
??F?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QAEAAU012@XZ PROC ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::operator--, COMDAT
; _this$ = esi

; 187  :     _M_node = _Rb_global_inst::_M_decrement(_M_node);

	mov	eax, DWORD PTR [esi]
	push	eax
	call	?_M_decrement@?$_Rb_global@_N@priv@stlp_std@@SAPAU_Rb_tree_node_base@23@PAU423@@Z ; stlp_std::priv::_Rb_global<bool>::_M_decrement
	mov	DWORD PTR [esi], eax
	add	esp, 4

; 188  :     return *this;

	mov	eax, esi

; 189  :   }

	ret	0
??F?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QAEAAU012@XZ ENDP ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::operator--
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_S_key@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAABVshared_str@@PAU_Rb_tree_node_base@23@@Z
_TEXT	SEGMENT
?_S_key@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAABVshared_str@@PAU_Rb_tree_node_base@23@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_S_key, COMDAT
; ___x$ = eax

; 354  :   { return _KeyOfValue()(_S_value(__x));}

	add	eax, 16					; 00000010H
	ret	0
?_S_key@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAABVshared_str@@PAU_Rb_tree_node_base@23@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_S_key
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$__destroy_range@PAVCMotion@@V1@@stlp_std@@YAXPAVCMotion@@00@Z
_TEXT	SEGMENT
??$__destroy_range@PAVCMotion@@V1@@stlp_std@@YAXPAVCMotion@@00@Z PROC ; stlp_std::__destroy_range<CMotion *,CMotion>, COMDAT
; ___first$ = eax
; ___last$ = esi

; 175  :   typedef typename __type_traits<_Tp>::has_trivial_destructor _Trivial_destructor;
; 176  :   __destroy_range_aux(__first, __last, __ptr, _Trivial_destructor());

	jmp	??$__destroy_range_aux@PAVCMotion@@V1@@stlp_std@@YAXPAVCMotion@@00ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<CMotion *,CMotion>
??$__destroy_range@PAVCMotion@@V1@@stlp_std@@YAXPAVCMotion@@00@Z ENDP ; stlp_std::__destroy_range<CMotion *,CMotion>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__destroy_range@V?$reverse_iterator@PAU?$pair@MM@stlp_std@@@stlp_std@@U?$pair@MM@2@@stlp_std@@YAXV?$reverse_iterator@PAU?$pair@MM@stlp_std@@@0@0PAU?$pair@MM@0@@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$__destroy_range@V?$reverse_iterator@PAU?$pair@MM@stlp_std@@@stlp_std@@U?$pair@MM@2@@stlp_std@@YAXV?$reverse_iterator@PAU?$pair@MM@stlp_std@@@0@0PAU?$pair@MM@0@@Z PROC ; stlp_std::__destroy_range<stlp_std::reverse_iterator<stlp_std::pair<float,float> *>,stlp_std::pair<float,float> >, COMDAT

; 175  :   typedef typename __type_traits<_Tp>::has_trivial_destructor _Trivial_destructor;
; 176  :   __destroy_range_aux(__first, __last, __ptr, _Trivial_destructor());
; 177  : }

	ret	0
??$__destroy_range@V?$reverse_iterator@PAU?$pair@MM@stlp_std@@@stlp_std@@U?$pair@MM@2@@stlp_std@@YAXV?$reverse_iterator@PAU?$pair@MM@stlp_std@@@0@0PAU?$pair@MM@0@@Z ENDP ; stlp_std::__destroy_range<stlp_std::reverse_iterator<stlp_std::pair<float,float> *>,stlp_std::pair<float,float> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__copy_ptrs@PBIPAI@priv@stlp_std@@YAPAIPBI0PAIABU__true_type@1@@Z
_TEXT	SEGMENT
??$__copy_ptrs@PBIPAI@priv@stlp_std@@YAPAIPBI0PAIABU__true_type@1@@Z PROC ; stlp_std::priv::__copy_ptrs<unsigned int const *,unsigned int *>, COMDAT
; ___first$ = edx
; ___last$ = ecx
; ___result$ = eax

; 255  :   // we know they all pointers, so this cast is OK
; 256  :   //  return (_OutputIter)__copy_trivial(&(*__first), &(*__last), &(*__result));
; 257  :   return (_OutputIter)__copy_trivial(__first, __last, __result);

	sub	ecx, edx
	push	esi
	mov	esi, ecx
	je	SHORT $LN6@copy_ptrs
	push	esi
	push	edx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN6@copy_ptrs:
	pop	esi

; 258  : }

	ret	0
??$__copy_ptrs@PBIPAI@priv@stlp_std@@YAPAIPBI0PAIABU__true_type@1@@Z ENDP ; stlp_std::priv::__copy_ptrs<unsigned int const *,unsigned int *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.c
_TEXT	ENDS
;	COMDAT ?_M_fill_insert_aux@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEXPAIIABIABU__false_type@3@@Z
_TEXT	SEGMENT
___x_copy$133663 = -4					; size = 4
tv333 = 8						; size = 4
___last$227213 = 8					; size = 4
___pos$ = 8						; size = 4
___n$ = 12						; size = 4
$T227130 = 16						; size = 1
___x$ = 16						; size = 4
___formal$ = 20						; size = 4
?_M_fill_insert_aux@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEXPAIIABIABU__false_type@3@@Z PROC ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_fill_insert_aux, COMDAT
; _this$ = ecx

; 143  :                                               const _Tp& __x, const __false_type& /*_Movable*/) {

	push	ecx

; 144  :   //Here self referencing needs to be checked even for non movable types.
; 145  :   if (_M_is_inside(__x)) {

	mov	edx, DWORD PTR ___x$[esp]
	push	ebp
	mov	ebp, ecx
	cmp	edx, DWORD PTR [ebp]
	jb	SHORT $LN3@M_fill_ins
	cmp	edx, DWORD PTR [ebp+4]
	jae	SHORT $LN3@M_fill_ins

; 146  :     _Tp __x_copy = __x;

	mov	eax, DWORD PTR [edx]

; 147  :     _M_fill_insert_aux(__pos, __n, __x_copy, __false_type());

	lea	ecx, DWORD PTR $T227130[esp+4]
	push	ecx
	mov	ecx, DWORD PTR ___pos$[esp+8]
	lea	edx, DWORD PTR ___x_copy$133663[esp+12]
	mov	DWORD PTR ___x_copy$133663[esp+12], eax
	mov	eax, DWORD PTR ___n$[esp+8]
	push	edx
	push	eax
	push	ecx
	mov	ecx, ebp
	mov	BYTE PTR $T227130[esp+20], 0
	call	?_M_fill_insert_aux@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEXPAIIABIABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_fill_insert_aux
	pop	ebp

; 162  :   }
; 163  : }

	pop	ecx
	ret	16					; 00000010H
$LN3@M_fill_ins:

; 148  :     return;
; 149  :   }
; 150  :   const size_type __elems_after = this->_M_finish - __pos;
; 151  :   pointer __old_finish = this->_M_finish;
; 152  :   if (__elems_after > __n) {

	mov	eax, DWORD PTR ___n$[esp+4]
	push	ebx
	mov	ebx, DWORD PTR ___pos$[esp+8]
	push	esi
	mov	esi, DWORD PTR [ebp+4]
	push	edi
	mov	edi, esi
	sub	edi, ebx
	sar	edi, 2
	cmp	edi, eax
	jbe	SHORT $LN2@M_fill_ins

; 153  :     _STLP_PRIV __ucopy_ptrs(this->_M_finish - __n, this->_M_finish, this->_M_finish, _TrivialUCopy());

	lea	ecx, DWORD PTR [eax*4]
	mov	edi, esi
	sub	edi, ecx
	cmp	esi, edi
	mov	DWORD PTR tv333[esp+16], ecx
	je	SHORT $LN15@M_fill_ins
	mov	edx, esi
	sub	edx, edi
	push	edx
	push	edi
	push	esi
	call	_memcpy
	mov	ecx, DWORD PTR tv333[esp+28]
	mov	edx, DWORD PTR ___x$[esp+28]
	add	esp, 12					; 0000000cH
$LN15@M_fill_ins:

; 154  :     this->_M_finish += __n;

	add	DWORD PTR [ebp+4], ecx

; 155  :     _STLP_PRIV __copy_backward_ptrs(__pos, __old_finish - __n, __old_finish, _TrivialCopy());

	sub	edi, ebx
	test	edi, edi
	jle	SHORT $LN20@M_fill_ins
	push	edi
	push	ebx
	sub	esi, edi
	push	esi
	call	DWORD PTR __imp__memmove
	mov	ecx, DWORD PTR tv333[esp+28]
	mov	edx, DWORD PTR ___x$[esp+28]
	add	esp, 12					; 0000000cH
$LN20@M_fill_ins:

; 156  :     _STLP_STD::fill(__pos, __pos + __n, __x);

	add	ecx, ebx
	cmp	ebx, ecx
	mov	eax, ebx
	je	SHORT $LN58@M_fill_ins
$LL24@M_fill_ins:
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [eax], esi
	add	eax, 4
	cmp	eax, ecx
	jne	SHORT $LL24@M_fill_ins
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp

; 162  :   }
; 163  : }

	pop	ecx
	ret	16					; 00000010H
$LN2@M_fill_ins:

; 157  :   } else {
; 158  :     this->_M_finish = _STLP_PRIV __uninitialized_fill_n(this->_M_finish, __n - __elems_after, __x);

	sub	eax, edi
	lea	edx, DWORD PTR [esi+eax*4]
	mov	eax, edx
	sub	eax, esi
	sar	eax, 2
	test	eax, eax
	mov	DWORD PTR ___last$227213[esp+16], edx
	mov	ecx, esi
	jle	SHORT $LN29@M_fill_ins
$LL31@M_fill_ins:
	test	ecx, ecx
	je	SHORT $LN30@M_fill_ins
	mov	edx, DWORD PTR ___x$[esp+16]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR ___last$227213[esp+16]
$LN30@M_fill_ins:
	sub	eax, 1
	add	ecx, 4
	test	eax, eax
	jg	SHORT $LL31@M_fill_ins
$LN29@M_fill_ins:

; 159  :     _STLP_PRIV __ucopy_ptrs(__pos, __old_finish, this->_M_finish, _TrivialUCopy());

	cmp	esi, ebx
	mov	DWORD PTR [ebp+4], edx
	je	SHORT $LN45@M_fill_ins
	mov	eax, esi
	sub	eax, ebx
	push	eax
	push	ebx
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN45@M_fill_ins:

; 160  :     this->_M_finish += __elems_after;

	lea	ecx, DWORD PTR [edi*4]
	add	DWORD PTR [ebp+4], ecx

; 161  :     _STLP_STD::fill(__pos, __old_finish, __x);

	cmp	ebx, esi
	mov	eax, ebx
	je	SHORT $LN58@M_fill_ins
$LL48@M_fill_ins:
	mov	edx, DWORD PTR ___x$[esp+16]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL48@M_fill_ins
$LN58@M_fill_ins:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp

; 162  :   }
; 163  : }

	pop	ecx
	ret	16					; 00000010H
?_M_fill_insert_aux@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEXPAIIABIABU__false_type@3@@Z ENDP ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_fill_insert_aux
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__copy_ptrs@PBU?$pair@MM@stlp_std@@PAU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PBU21@0PAU21@ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__copy_ptrs@PBU?$pair@MM@stlp_std@@PAU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PBU21@0PAU21@ABU__true_type@1@@Z PROC ; stlp_std::priv::__copy_ptrs<stlp_std::pair<float,float> const *,stlp_std::pair<float,float> *>, COMDAT
; ___first$ = edx
; ___last$ = ecx
; ___result$ = eax

; 255  :   // we know they all pointers, so this cast is OK
; 256  :   //  return (_OutputIter)__copy_trivial(&(*__first), &(*__last), &(*__result));
; 257  :   return (_OutputIter)__copy_trivial(__first, __last, __result);

	sub	ecx, edx
	push	esi
	mov	esi, ecx
	je	SHORT $LN6@copy_ptrs@2
	push	esi
	push	edx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN6@copy_ptrs@2:
	pop	esi

; 258  : }

	ret	0
??$__copy_ptrs@PBU?$pair@MM@stlp_std@@PAU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PBU21@0PAU21@ABU__true_type@1@@Z ENDP ; stlp_std::priv::__copy_ptrs<stlp_std::pair<float,float> const *,stlp_std::pair<float,float> *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.c
_TEXT	ENDS
;	COMDAT ?_M_fill_insert_aux@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEXPAU?$pair@MM@3@IABU43@ABU__false_type@3@@Z
_TEXT	SEGMENT
$T227278 = -13						; size = 1
_this$ = -12						; size = 4
tv304 = -8						; size = 4
___last$227337 = -8					; size = 4
___x_copy$132799 = -8					; size = 8
___pos$ = 8						; size = 4
___n$ = 12						; size = 4
___x$ = 16						; size = 4
___formal$ = 20						; size = 4
?_M_fill_insert_aux@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEXPAU?$pair@MM@3@IABU43@ABU__false_type@3@@Z PROC ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_fill_insert_aux, COMDAT
; _this$ = ecx

; 143  :                                               const _Tp& __x, const __false_type& /*_Movable*/) {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 20					; 00000014H

; 144  :   //Here self referencing needs to be checked even for non movable types.
; 145  :   if (_M_is_inside(__x)) {

	mov	edx, DWORD PTR ___x$[ebp]
	cmp	edx, DWORD PTR [ecx]
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[esp+32], ecx
	jb	SHORT $LN3@M_fill_ins@2
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN3@M_fill_ins@2

; 146  :     _Tp __x_copy = __x;

	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR ___x_copy$132799[esp+32], xmm0
	movss	xmm0, DWORD PTR [edx+4]

; 147  :     _M_fill_insert_aux(__pos, __n, __x_copy, __false_type());

	lea	eax, DWORD PTR $T227278[esp+32]
	push	eax
	mov	eax, DWORD PTR ___n$[ebp]
	lea	edx, DWORD PTR ___x_copy$132799[esp+36]
	push	edx
	mov	edx, DWORD PTR ___pos$[ebp]
	push	eax
	push	edx
	movss	DWORD PTR ___x_copy$132799[esp+52], xmm0
	mov	BYTE PTR $T227278[esp+48], 0
	call	?_M_fill_insert_aux@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEXPAU?$pair@MM@3@IABU43@ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_fill_insert_aux

; 162  :   }
; 163  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN3@M_fill_ins@2:

; 148  :     return;
; 149  :   }
; 150  :   const size_type __elems_after = this->_M_finish - __pos;

	mov	esi, DWORD PTR [ecx+4]
	mov	edi, DWORD PTR ___pos$[ebp]

; 151  :   pointer __old_finish = this->_M_finish;
; 152  :   if (__elems_after > __n) {

	mov	eax, DWORD PTR ___n$[ebp]
	mov	ebx, esi
	sub	ebx, edi
	sar	ebx, 3
	cmp	ebx, eax
	jbe	SHORT $LN2@M_fill_ins@2

; 153  :     _STLP_PRIV __ucopy_ptrs(this->_M_finish - __n, this->_M_finish, this->_M_finish, _TrivialUCopy());

	add	eax, eax
	add	eax, eax
	add	eax, eax
	mov	ebx, esi
	sub	ebx, eax
	cmp	esi, ebx
	mov	DWORD PTR tv304[esp+32], eax
	je	SHORT $LN17@M_fill_ins@2
	mov	eax, esi
	sub	eax, ebx
	push	eax
	push	ebx
	push	esi
	call	_memcpy
	mov	ecx, DWORD PTR _this$[esp+44]
	mov	edx, DWORD PTR ___x$[ebp]
	mov	eax, DWORD PTR tv304[esp+44]
	add	esp, 12					; 0000000cH
$LN17@M_fill_ins@2:

; 154  :     this->_M_finish += __n;

	add	DWORD PTR [ecx+4], eax

; 155  :     _STLP_PRIV __copy_backward_ptrs(__pos, __old_finish - __n, __old_finish, _TrivialCopy());

	sub	ebx, edi
	test	ebx, ebx
	jle	SHORT $LN22@M_fill_ins@2
	push	ebx
	push	edi
	sub	esi, ebx
	push	esi
	call	DWORD PTR __imp__memmove
	mov	edx, DWORD PTR ___x$[ebp]
	add	esp, 12					; 0000000cH
$LN22@M_fill_ins@2:

; 156  :     _STLP_STD::fill(__pos, __pos + __n, __x);

	mov	ecx, DWORD PTR tv304[esp+32]
	add	ecx, edi
	cmp	edi, ecx
	mov	eax, edi
	je	SHORT $LN37@M_fill_ins@2
	npad	4
$LL26@M_fill_ins@2:
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], esi
	add	eax, 8
	cmp	eax, ecx
	jne	SHORT $LL26@M_fill_ins@2

; 162  :   }
; 163  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN2@M_fill_ins@2:

; 157  :   } else {
; 158  :     this->_M_finish = _STLP_PRIV __uninitialized_fill_n(this->_M_finish, __n - __elems_after, __x);

	sub	eax, ebx
	lea	eax, DWORD PTR [esi+eax*8]
	mov	ecx, esi
	mov	DWORD PTR ___last$227337[esp+32], eax
	call	??$__ufill@PAU?$pair@MM@stlp_std@@U12@H@priv@stlp_std@@YAXPAU?$pair@MM@1@0ABU21@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ufill<stlp_std::pair<float,float> *,stlp_std::pair<float,float>,int>

; 159  :     _STLP_PRIV __ucopy_ptrs(__pos, __old_finish, this->_M_finish, _TrivialUCopy());

	cmp	esi, edi
	mov	ecx, DWORD PTR ___last$227337[esp+32]
	mov	eax, DWORD PTR _this$[esp+32]
	mov	DWORD PTR [eax+4], ecx
	je	SHORT $LN36@M_fill_ins@2
	mov	edx, esi
	sub	edx, edi
	push	edx
	push	edi
	push	ecx
	call	_memcpy
	mov	eax, DWORD PTR _this$[esp+44]
	add	esp, 12					; 0000000cH
$LN36@M_fill_ins@2:

; 160  :     this->_M_finish += __elems_after;

	lea	ecx, DWORD PTR [ebx*8]
	add	DWORD PTR [eax+4], ecx

; 161  :     _STLP_STD::fill(__pos, __old_finish, __x);

	cmp	edi, esi
	mov	eax, edi
	je	SHORT $LN37@M_fill_ins@2
	npad	4
$LL39@M_fill_ins@2:
	mov	ecx, DWORD PTR ___x$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
	add	eax, 8
	cmp	eax, esi
	jne	SHORT $LL39@M_fill_ins@2
$LN37@M_fill_ins@2:

; 162  :   }
; 163  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?_M_fill_insert_aux@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEXPAU?$pair@MM@3@IABU43@ABU__false_type@3@@Z ENDP ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_fill_insert_aux
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_alloc.h
_TEXT	ENDS
;	COMDAT ??0?$_STLP_alloc_proxy@PAVCMotion@@V1@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@ABV?$xalloc@VCMotion@@@@PAVCMotion@@@Z
_TEXT	SEGMENT
??0?$_STLP_alloc_proxy@PAVCMotion@@V1@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@ABV?$xalloc@VCMotion@@@@PAVCMotion@@@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<CMotion *,CMotion,xalloc<CMotion> >::_STLP_alloc_proxy<CMotion *,CMotion,xalloc<CMotion> >, COMDAT
; _this$ = eax

; 571  :     _MaybeReboundAlloc(__a), _M_data(__p) {}

	mov	DWORD PTR [eax], 0
	ret	0
??0?$_STLP_alloc_proxy@PAVCMotion@@V1@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@ABV?$xalloc@VCMotion@@@@PAVCMotion@@@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<CMotion *,CMotion,xalloc<CMotion> >::_STLP_alloc_proxy<CMotion *,CMotion,xalloc<CMotion> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ??0?$_Vector_base@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@IABV?$xalloc@VCMotion@@@@@Z
_TEXT	SEGMENT
??0?$_Vector_base@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@IABV?$xalloc@VCMotion@@@@@Z PROC ; stlp_std::priv::_Vector_base<CMotion,xalloc<CMotion> >::_Vector_base<CMotion,xalloc<CMotion> >, COMDAT
; _this$ = esi
; ___n$ = eax

; 70   :     : _M_start(0), _M_finish(0), _M_end_of_storage(__a, 0) {

	push	edi

; 71   :     _M_start = _M_end_of_storage.allocate(__n, __n);

	lea	edi, DWORD PTR [eax+eax*4]
	xor	ecx, ecx
	add	edi, edi
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], ecx
	add	edi, edi
	mov	DWORD PTR [esi+8], ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	edi, edi
	push	edi
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 72   :     _M_finish = _M_start;
; 73   :     _M_end_of_storage._M_data = _M_start + __n;

	add	edi, eax
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], edi

; 74   :     _STLP_MPWFIX_TRY _STLP_MPWFIX_CATCH
; 75   :   }

	mov	eax, esi
	pop	edi
	ret	0
??0?$_Vector_base@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@IABV?$xalloc@VCMotion@@@@@Z ENDP ; stlp_std::priv::_Vector_base<CMotion,xalloc<CMotion> >::_Vector_base<CMotion,xalloc<CMotion> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Vector_base@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@ABV?$xalloc@VCMotion@@@@@Z
_TEXT	SEGMENT
??0?$_Vector_base@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@ABV?$xalloc@VCMotion@@@@@Z PROC ; stlp_std::priv::_Vector_base<CMotion,xalloc<CMotion> >::_Vector_base<CMotion,xalloc<CMotion> >, COMDAT
; _this$ = eax

; 67   :     : _M_start(0), _M_finish(0), _M_end_of_storage(__a, 0) {}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$_Vector_base@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@ABV?$xalloc@VCMotion@@@@@Z ENDP ; stlp_std::priv::_Vector_base<CMotion,xalloc<CMotion> >::_Vector_base<CMotion,xalloc<CMotion> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@ABV?$xalloc@VCMotion@@@@@Z
_TEXT	SEGMENT
??0?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@ABV?$xalloc@VCMotion@@@@@Z PROC ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_Impl_vector<CMotion,xalloc<CMotion> >, COMDAT
; _this$ = eax

; 208  :     : _STLP_PRIV _Vector_base<_Tp, _Alloc>(__a) {}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@ABV?$xalloc@VCMotion@@@@@Z ENDP ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_Impl_vector<CMotion,xalloc<CMotion> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@QAE@ABU012@@Z
_TEXT	SEGMENT
??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@QAE@ABU012@@Z PROC ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> > >::_Rb_tree_iterator<stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> > >, COMDAT
; _this$ = eax
; ___it$ = ecx

; 168  :   _Rb_tree_iterator(const iterator& __it) : _Rb_tree_base_iterator(__it._M_node) {}

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	ret	0
??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@QAE@ABU012@@Z ENDP ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> > >::_Rb_tree_iterator<stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?rend@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAVCMotion@@@3@XZ
_TEXT	SEGMENT
?rend@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAVCMotion@@@3@XZ PROC ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::rend, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 177  :   reverse_iterator rend()                { return reverse_iterator(begin()); }

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	ret	0
?rend@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAVCMotion@@@3@XZ ENDP ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::rend
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?rbegin@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAVCMotion@@@3@XZ
_TEXT	SEGMENT
?rbegin@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAVCMotion@@@3@XZ PROC ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::rbegin, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 175  :   reverse_iterator rbegin()              { return reverse_iterator(end()); }

	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
	ret	0
?rbegin@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAVCMotion@@@3@XZ ENDP ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::rbegin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@QAE@ABU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@12@@Z
_TEXT	SEGMENT
??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@QAE@ABU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@12@@Z PROC ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_ConstMapTraitsT<stlp_std::pair<shared_str const ,unsigned short> > >::_Rb_tree_iterator<stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_ConstMapTraitsT<stlp_std::pair<shared_str const ,unsigned short> > >, COMDAT
; _this$ = eax
; ___it$ = ecx

; 168  :   _Rb_tree_iterator(const iterator& __it) : _Rb_tree_base_iterator(__it._M_node) {}

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	ret	0
??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@QAE@ABU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@12@@Z ENDP ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_ConstMapTraitsT<stlp_std::pair<shared_str const ,unsigned short> > >::_Rb_tree_iterator<stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_ConstMapTraitsT<stlp_std::pair<shared_str const ,unsigned short> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??F?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QAEAAU012@XZ
_TEXT	SEGMENT
??F?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QAEAAU012@XZ PROC ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >::operator--, COMDAT
; _this$ = esi

; 187  :     _M_node = _Rb_global_inst::_M_decrement(_M_node);

	mov	eax, DWORD PTR [esi]
	push	eax
	call	?_M_decrement@?$_Rb_global@_N@priv@stlp_std@@SAPAU_Rb_tree_node_base@23@PAU423@@Z ; stlp_std::priv::_Rb_global<bool>::_M_decrement
	mov	DWORD PTR [esi], eax
	add	esp, 4

; 188  :     return *this;

	mov	eax, esi

; 189  :   }

	ret	0
??F?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QAEAAU012@XZ ENDP ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >::operator--
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??F?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@QAEAAU012@XZ
_TEXT	SEGMENT
??F?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@QAEAAU012@XZ PROC ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> > >::operator--, COMDAT
; _this$ = esi

; 187  :     _M_node = _Rb_global_inst::_M_decrement(_M_node);

	mov	eax, DWORD PTR [esi]
	push	eax
	call	?_M_decrement@?$_Rb_global@_N@priv@stlp_std@@SAPAU_Rb_tree_node_base@23@PAU423@@Z ; stlp_std::priv::_Rb_global<bool>::_M_decrement
	mov	DWORD PTR [esi], eax
	add	esp, 4

; 188  :     return *this;

	mov	eax, esi

; 189  :   }

	ret	0
??F?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@QAEAAU012@XZ ENDP ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> > >::operator--
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@QAE@PAU_Rb_tree_node_base@12@@Z
_TEXT	SEGMENT
??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@QAE@PAU_Rb_tree_node_base@12@@Z PROC ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> > >::_Rb_tree_iterator<stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> > >, COMDAT
; _this$ = eax
; ___x$ = ecx

; 166  :   _Rb_tree_iterator(_Base_ptr __x) : _Rb_tree_base_iterator(__x) {}

	mov	DWORD PTR [eax], ecx
	ret	0
??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@QAE@PAU_Rb_tree_node_base@12@@Z ENDP ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> > >::_Rb_tree_iterator<stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_pair.h
_TEXT	ENDS
;	COMDAT ??0?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@_N@stlp_std@@QAE@ABU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@1@AB_N@Z
_TEXT	SEGMENT
___b$ = 8						; size = 4
??0?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@_N@stlp_std@@QAE@ABU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@1@AB_N@Z PROC ; stlp_std::pair<stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> > >,bool>::pair<stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> > >,bool>, COMDAT
; _this$ = eax
; ___a$ = ecx

; 56   :   pair(const _T1& __a, const _T2& __b) : first(__a), second(__b) {}

	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ___b$[esp-4]
	mov	DWORD PTR [eax], edx
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax+4], dl
	ret	4
??0?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@_N@stlp_std@@QAE@ABU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@1@AB_N@Z ENDP ; stlp_std::pair<stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> > >,bool>::pair<stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> > >,bool>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ?_S_key@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAABVshared_str@@PAU_Rb_tree_node_base@23@@Z
_TEXT	SEGMENT
?_S_key@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAABVshared_str@@PAU_Rb_tree_node_base@23@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_S_key, COMDAT
; ___x$ = eax

; 354  :   { return _KeyOfValue()(_S_value(__x));}

	add	eax, 16					; 00000010H
	ret	0
?_S_key@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAABVshared_str@@PAU_Rb_tree_node_base@23@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_S_key
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@23@XZ
_TEXT	SEGMENT
?begin@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@23@XZ PROC ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::begin, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 416  :   iterator begin() { return iterator(_M_leftmost()); }

	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax], edx
	ret	0
?begin@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@23@XZ ENDP ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::begin
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_S_key@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAABVshared_str@@PAU_Rb_tree_node_base@23@@Z
_TEXT	SEGMENT
?_S_key@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAABVshared_str@@PAU_Rb_tree_node_base@23@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_S_key, COMDAT
; ___x$ = eax

; 354  :   { return _KeyOfValue()(_S_value(__x));}

	add	eax, 16					; 00000010H
	ret	0
?_S_key@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAABVshared_str@@PAU_Rb_tree_node_base@23@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_S_key
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$_Destroy_Range@PAVCMotion@@@stlp_std@@YAXPAVCMotion@@0@Z
_TEXT	SEGMENT
??$_Destroy_Range@PAVCMotion@@@stlp_std@@YAXPAVCMotion@@0@Z PROC ; stlp_std::_Destroy_Range<CMotion *>, COMDAT
; ___first$ = eax
; ___last$ = esi

; 181  :   __destroy_range(__first, __last, _STLP_VALUE_TYPE(__first, _ForwardIterator));

	jmp	??$__destroy_range_aux@PAVCMotion@@V1@@stlp_std@@YAXPAVCMotion@@00ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<CMotion *,CMotion>
??$_Destroy_Range@PAVCMotion@@@stlp_std@@YAXPAVCMotion@@0@Z ENDP ; stlp_std::_Destroy_Range<CMotion *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__copy_ptrs@PAU?$pair@MM@stlp_std@@PAU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PAU21@00ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__copy_ptrs@PAU?$pair@MM@stlp_std@@PAU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PAU21@00ABU__true_type@1@@Z PROC ; stlp_std::priv::__copy_ptrs<stlp_std::pair<float,float> *,stlp_std::pair<float,float> *>, COMDAT
; ___first$ = edx
; ___last$ = ecx
; ___result$ = eax

; 255  :   // we know they all pointers, so this cast is OK
; 256  :   //  return (_OutputIter)__copy_trivial(&(*__first), &(*__last), &(*__result));
; 257  :   return (_OutputIter)__copy_trivial(__first, __last, __result);

	sub	ecx, edx
	push	esi
	mov	esi, ecx
	je	SHORT $LN6@copy_ptrs@3
	push	esi
	push	edx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN6@copy_ptrs@3:
	pop	esi

; 258  : }

	ret	0
??$__copy_ptrs@PAU?$pair@MM@stlp_std@@PAU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PAU21@00ABU__true_type@1@@Z ENDP ; stlp_std::priv::__copy_ptrs<stlp_std::pair<float,float> *,stlp_std::pair<float,float> *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__copy_ptrs@PAIPAI@priv@stlp_std@@YAPAIPAI00ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__copy_ptrs@PAIPAI@priv@stlp_std@@YAPAIPAI00ABU__true_type@1@@Z PROC ; stlp_std::priv::__copy_ptrs<unsigned int *,unsigned int *>, COMDAT
; ___first$ = edx
; ___last$ = ecx
; ___result$ = eax

; 255  :   // we know they all pointers, so this cast is OK
; 256  :   //  return (_OutputIter)__copy_trivial(&(*__first), &(*__last), &(*__result));
; 257  :   return (_OutputIter)__copy_trivial(__first, __last, __result);

	sub	ecx, edx
	push	esi
	mov	esi, ecx
	je	SHORT $LN6@copy_ptrs@4
	push	esi
	push	edx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN6@copy_ptrs@4:
	pop	esi

; 258  : }

	ret	0
??$__copy_ptrs@PAIPAI@priv@stlp_std@@YAPAIPAI00ABU__true_type@1@@Z ENDP ; stlp_std::priv::__copy_ptrs<unsigned int *,unsigned int *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_uninitialized.h
_TEXT	ENDS
;	COMDAT ??$__ucopy_ptrs@PBU?$pair@MM@stlp_std@@PAU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PBU21@0PAU21@ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__ucopy_ptrs@PBU?$pair@MM@stlp_std@@PAU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PBU21@0PAU21@ABU__true_type@1@@Z PROC ; stlp_std::priv::__ucopy_ptrs<stlp_std::pair<float,float> const *,stlp_std::pair<float,float> *>, COMDAT
; ___first$ = ecx
; ___last$ = edx
; ___result$ = eax

; 117  :                                 const __true_type& /*TrivialUCopy*/) {

	push	esi
	mov	esi, edx

; 118  :   // we know they all pointers, so this cast is OK
; 119  :   //  return (_OutputIter)__copy_trivial(&(*__first), &(*__last), &(*__result));
; 120  :   return (_OutputIter)__ucopy_trivial(__first, __last, __result);

	cmp	esi, ecx
	je	SHORT $LN6@ucopy_ptrs@3
	sub	esi, ecx
	push	esi
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN6@ucopy_ptrs@3:
	pop	esi

; 121  : }

	ret	0
??$__ucopy_ptrs@PBU?$pair@MM@stlp_std@@PAU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PBU21@0PAU21@ABU__true_type@1@@Z ENDP ; stlp_std::priv::__ucopy_ptrs<stlp_std::pair<float,float> const *,stlp_std::pair<float,float> *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$_Copy_Construct@I@stlp_std@@YAXPAIABI@Z
_TEXT	SEGMENT
??$_Copy_Construct@I@stlp_std@@YAXPAIABI@Z PROC		; stlp_std::_Copy_Construct<unsigned int>, COMDAT
; ___p$ = eax
; ___val$ = ecx

; 110  : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 111  :   memset((char*)__p, _STLP_SHRED_BYTE, sizeof(_Tp));
; 112  : #endif
; 113  :   _STLP_PLACEMENT_NEW (__p) _Tp(__val);

	test	eax, eax
	je	SHORT $LN3@Copy_Const
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN3@Copy_Const:

; 114  : }

	ret	0
??$_Copy_Construct@I@stlp_std@@YAXPAIABI@Z ENDP		; stlp_std::_Copy_Construct<unsigned int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_uninitialized.h
_TEXT	ENDS
;	COMDAT ??$__ucopy_ptrs@PBIPAI@priv@stlp_std@@YAPAIPBI0PAIABU__true_type@1@@Z
_TEXT	SEGMENT
??$__ucopy_ptrs@PBIPAI@priv@stlp_std@@YAPAIPBI0PAIABU__true_type@1@@Z PROC ; stlp_std::priv::__ucopy_ptrs<unsigned int const *,unsigned int *>, COMDAT
; ___first$ = ecx
; ___last$ = edx
; ___result$ = eax

; 117  :                                 const __true_type& /*TrivialUCopy*/) {

	push	esi
	mov	esi, edx

; 118  :   // we know they all pointers, so this cast is OK
; 119  :   //  return (_OutputIter)__copy_trivial(&(*__first), &(*__last), &(*__result));
; 120  :   return (_OutputIter)__ucopy_trivial(__first, __last, __result);

	cmp	esi, ecx
	je	SHORT $LN6@ucopy_ptrs@4
	sub	esi, ecx
	push	esi
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN6@ucopy_ptrs@4:
	pop	esi

; 121  : }

	ret	0
??$__ucopy_ptrs@PBIPAI@priv@stlp_std@@YAPAIPBI0PAIABU__true_type@1@@Z ENDP ; stlp_std::priv::__ucopy_ptrs<unsigned int const *,unsigned int *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$_Destroy_Range@V?$reverse_iterator@PAU?$pair@MM@stlp_std@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAU?$pair@MM@stlp_std@@@0@0@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$_Destroy_Range@V?$reverse_iterator@PAU?$pair@MM@stlp_std@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAU?$pair@MM@stlp_std@@@0@0@Z PROC ; stlp_std::_Destroy_Range<stlp_std::reverse_iterator<stlp_std::pair<float,float> *> >, COMDAT

; 181  :   __destroy_range(__first, __last, _STLP_VALUE_TYPE(__first, _ForwardIterator));
; 182  : }

	ret	0
??$_Destroy_Range@V?$reverse_iterator@PAU?$pair@MM@stlp_std@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAU?$pair@MM@stlp_std@@@0@0@Z ENDP ; stlp_std::_Destroy_Range<stlp_std::reverse_iterator<stlp_std::pair<float,float> *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__destroy_range@V?$reverse_iterator@PAI@stlp_std@@I@stlp_std@@YAXV?$reverse_iterator@PAI@0@0PAI@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$__destroy_range@V?$reverse_iterator@PAI@stlp_std@@I@stlp_std@@YAXV?$reverse_iterator@PAI@0@0PAI@Z PROC ; stlp_std::__destroy_range<stlp_std::reverse_iterator<unsigned int *>,unsigned int>, COMDAT

; 175  :   typedef typename __type_traits<_Tp>::has_trivial_destructor _Trivial_destructor;
; 176  :   __destroy_range_aux(__first, __last, __ptr, _Trivial_destructor());
; 177  : }

	ret	0
??$__destroy_range@V?$reverse_iterator@PAI@stlp_std@@I@stlp_std@@YAXV?$reverse_iterator@PAI@0@0PAI@Z ENDP ; stlp_std::__destroy_range<stlp_std::reverse_iterator<unsigned int *>,unsigned int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_string.c
_TEXT	ENDS
;	COMDAT ?_M_throw_length_error@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IBEXXZ
_TEXT	SEGMENT
?_M_throw_length_error@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IBEXXZ PROC ; stlp_std::priv::_String_base<char,xalloc<char> >::_M_throw_length_error, COMDAT

; 613  : { __stl_throw_length_error("basic_string"); }

	push	OFFSET ??_C@_0N@GOPDCEEB@basic_string?$AA@
	call	DWORD PTR __imp__puts
	add	esp, 4
	jmp	DWORD PTR __imp__abort
?_M_throw_length_error@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IBEXXZ ENDP ; stlp_std::priv::_String_base<char,xalloc<char> >::_M_throw_length_error
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_alloc.h
_TEXT	ENDS
;	COMDAT ??0?$_STLP_alloc_proxy@PAVCMotionDef@@V1@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@ABV?$xalloc@VCMotionDef@@@@PAVCMotionDef@@@Z
_TEXT	SEGMENT
??0?$_STLP_alloc_proxy@PAVCMotionDef@@V1@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@ABV?$xalloc@VCMotionDef@@@@PAVCMotionDef@@@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<CMotionDef *,CMotionDef,xalloc<CMotionDef> >::_STLP_alloc_proxy<CMotionDef *,CMotionDef,xalloc<CMotionDef> >, COMDAT
; _this$ = eax

; 571  :     _MaybeReboundAlloc(__a), _M_data(__p) {}

	mov	DWORD PTR [eax], 0
	ret	0
??0?$_STLP_alloc_proxy@PAVCMotionDef@@V1@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@ABV?$xalloc@VCMotionDef@@@@PAVCMotionDef@@@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<CMotionDef *,CMotionDef,xalloc<CMotionDef> >::_STLP_alloc_proxy<CMotionDef *,CMotionDef,xalloc<CMotionDef> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ??0?$_Vector_base@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@ABV?$xalloc@VCMotionDef@@@@@Z
_TEXT	SEGMENT
??0?$_Vector_base@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@ABV?$xalloc@VCMotionDef@@@@@Z PROC ; stlp_std::priv::_Vector_base<CMotionDef,xalloc<CMotionDef> >::_Vector_base<CMotionDef,xalloc<CMotionDef> >, COMDAT
; _this$ = eax

; 67   :     : _M_start(0), _M_finish(0), _M_end_of_storage(__a, 0) {}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$_Vector_base@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@ABV?$xalloc@VCMotionDef@@@@@Z ENDP ; stlp_std::priv::_Vector_base<CMotionDef,xalloc<CMotionDef> >::_Vector_base<CMotionDef,xalloc<CMotionDef> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_alloc.h
_TEXT	ENDS
;	COMDAT ??0?$_STLP_alloc_proxy@PAVmotion_marks@@V1@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Vmotion_marks@@@@PAVmotion_marks@@@Z
_TEXT	SEGMENT
??0?$_STLP_alloc_proxy@PAVmotion_marks@@V1@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Vmotion_marks@@@@PAVmotion_marks@@@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<motion_marks *,motion_marks,xalloc<motion_marks> >::_STLP_alloc_proxy<motion_marks *,motion_marks,xalloc<motion_marks> >, COMDAT
; _this$ = eax

; 571  :     _MaybeReboundAlloc(__a), _M_data(__p) {}

	mov	DWORD PTR [eax], 0
	ret	0
??0?$_STLP_alloc_proxy@PAVmotion_marks@@V1@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Vmotion_marks@@@@PAVmotion_marks@@@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<motion_marks *,motion_marks,xalloc<motion_marks> >::_STLP_alloc_proxy<motion_marks *,motion_marks,xalloc<motion_marks> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ??0?$_Vector_base@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Vmotion_marks@@@@@Z
_TEXT	SEGMENT
??0?$_Vector_base@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Vmotion_marks@@@@@Z PROC ; stlp_std::priv::_Vector_base<motion_marks,xalloc<motion_marks> >::_Vector_base<motion_marks,xalloc<motion_marks> >, COMDAT
; _this$ = eax

; 67   :     : _M_start(0), _M_finish(0), _M_end_of_storage(__a, 0) {}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$_Vector_base@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Vmotion_marks@@@@@Z ENDP ; stlp_std::priv::_Vector_base<motion_marks,xalloc<motion_marks> >::_Vector_base<motion_marks,xalloc<motion_marks> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_alloc.h
_TEXT	ENDS
;	COMDAT ??0?$_STLP_alloc_proxy@PAU?$pair@MM@stlp_std@@U12@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@ABV?$xalloc@U?$pair@MM@stlp_std@@@@PAU?$pair@MM@2@@Z
_TEXT	SEGMENT
??0?$_STLP_alloc_proxy@PAU?$pair@MM@stlp_std@@U12@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@ABV?$xalloc@U?$pair@MM@stlp_std@@@@PAU?$pair@MM@2@@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::pair<float,float> *,stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_STLP_alloc_proxy<stlp_std::pair<float,float> *,stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >, COMDAT
; _this$ = eax

; 571  :     _MaybeReboundAlloc(__a), _M_data(__p) {}

	mov	DWORD PTR [eax], 0
	ret	0
??0?$_STLP_alloc_proxy@PAU?$pair@MM@stlp_std@@U12@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@ABV?$xalloc@U?$pair@MM@stlp_std@@@@PAU?$pair@MM@2@@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<stlp_std::pair<float,float> *,stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_STLP_alloc_proxy<stlp_std::pair<float,float> *,stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ??0?$_Vector_base@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@ABV?$xalloc@U?$pair@MM@stlp_std@@@@@Z
_TEXT	SEGMENT
??0?$_Vector_base@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@ABV?$xalloc@U?$pair@MM@stlp_std@@@@@Z PROC ; stlp_std::priv::_Vector_base<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_Vector_base<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >, COMDAT
; _this$ = eax

; 67   :     : _M_start(0), _M_finish(0), _M_end_of_storage(__a, 0) {}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$_Vector_base@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@ABV?$xalloc@U?$pair@MM@stlp_std@@@@@Z ENDP ; stlp_std::priv::_Vector_base<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_Vector_base<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_erase@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEPAU?$pair@MM@3@PAU43@0ABU__false_type@3@@Z
_TEXT	SEGMENT
?_M_erase@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEPAU?$pair@MM@3@PAU43@0ABU__false_type@3@@Z PROC ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_erase, COMDAT
; _this$ = ebx
; ___first$ = edi
; ___last$ = eax

; 578  :   iterator _M_erase(iterator __first, iterator __last, const __false_type& /*_Movable*/) {

	push	esi

; 579  :     pointer __i = _STLP_PRIV __copy_ptrs(__last, this->_M_finish, __first, _TrivialCopy());

	mov	esi, DWORD PTR [ebx+4]
	sub	esi, eax
	je	SHORT $LN7@M_erase@4
	push	esi
	push	eax
	push	edi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi

; 580  :     _STLP_STD::_Destroy_Range(__i, this->_M_finish);
; 581  :     this->_M_finish = __i;

	mov	DWORD PTR [ebx+4], eax

; 582  :     return __first;

	mov	eax, edi
	pop	esi

; 583  :   }

	ret	0

; 579  :     pointer __i = _STLP_PRIV __copy_ptrs(__last, this->_M_finish, __first, _TrivialCopy());

$LN7@M_erase@4:

; 580  :     _STLP_STD::_Destroy_Range(__i, this->_M_finish);
; 581  :     this->_M_finish = __i;

	mov	DWORD PTR [ebx+4], edi

; 582  :     return __first;

	mov	eax, edi
	pop	esi

; 583  :   }

	ret	0
?_M_erase@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEPAU?$pair@MM@3@PAU43@0ABU__false_type@3@@Z ENDP ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_erase@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEPAIPAI0ABU__false_type@3@@Z
_TEXT	SEGMENT
?_M_erase@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEPAIPAI0ABU__false_type@3@@Z PROC ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_erase, COMDAT
; _this$ = ebx
; ___first$ = edi
; ___last$ = eax

; 578  :   iterator _M_erase(iterator __first, iterator __last, const __false_type& /*_Movable*/) {

	push	esi

; 579  :     pointer __i = _STLP_PRIV __copy_ptrs(__last, this->_M_finish, __first, _TrivialCopy());

	mov	esi, DWORD PTR [ebx+4]
	sub	esi, eax
	je	SHORT $LN7@M_erase@5
	push	esi
	push	eax
	push	edi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi

; 580  :     _STLP_STD::_Destroy_Range(__i, this->_M_finish);
; 581  :     this->_M_finish = __i;

	mov	DWORD PTR [ebx+4], eax

; 582  :     return __first;

	mov	eax, edi
	pop	esi

; 583  :   }

	ret	0

; 579  :     pointer __i = _STLP_PRIV __copy_ptrs(__last, this->_M_finish, __first, _TrivialCopy());

$LN7@M_erase@5:

; 580  :     _STLP_STD::_Destroy_Range(__i, this->_M_finish);
; 581  :     this->_M_finish = __i;

	mov	DWORD PTR [ebx+4], edi

; 582  :     return __first;

	mov	eax, edi
	pop	esi

; 583  :   }

	ret	0
?_M_erase@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEPAIPAI0ABU__false_type@3@@Z ENDP ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_erase
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?allocate@?$xalloc@D@@QBEPADIPBX@Z
_TEXT	SEGMENT
?allocate@?$xalloc@D@@QBEPADIPBX@Z PROC			; xalloc<char>::allocate, COMDAT
; _n$ = eax

; 81   : 							pointer					allocate		(size_type n, const void* p=0) const	{	return xr_alloc<T>((u32)n);	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$xalloc@D@@QBEPADIPBX@Z ENDP			; xalloc<char>::allocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE@PAU_Rb_tree_node_base@12@@Z
_TEXT	SEGMENT
??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE@PAU_Rb_tree_node_base@12@@Z PROC ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >, COMDAT
; _this$ = eax
; ___x$ = ecx

; 166  :   _Rb_tree_iterator(_Base_ptr __x) : _Rb_tree_base_iterator(__x) {}

	mov	DWORD PTR [eax], ecx
	ret	0
??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE@PAU_Rb_tree_node_base@12@@Z ENDP ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_S_maximum@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAPAU_Rb_tree_node_base@23@PAU423@@Z
_TEXT	SEGMENT
?_S_maximum@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAPAU_Rb_tree_node_base@23@PAU423@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_S_maximum, COMDAT
; ___x$ = eax

; 362  :   { return _Rb_tree_node_base::_S_maximum(__x); }

	mov	ecx, DWORD PTR [eax+12]
	test	ecx, ecx
	je	SHORT $LN3@S_maximum@2
$LL4@S_maximum@2:
	mov	eax, ecx
	mov	ecx, DWORD PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LL4@S_maximum@2
$LN3@S_maximum@2:
	ret	0
?_S_maximum@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAPAU_Rb_tree_node_base@23@PAU423@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_S_maximum
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_S_minimum@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAPAU_Rb_tree_node_base@23@PAU423@@Z
_TEXT	SEGMENT
?_S_minimum@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAPAU_Rb_tree_node_base@23@PAU423@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_S_minimum, COMDAT
; ___x$ = eax

; 359  :   { return _Rb_tree_node_base::_S_minimum(__x); }

	mov	ecx, DWORD PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN3@S_minimum@2
$LL4@S_minimum@2:
	mov	eax, ecx
	mov	ecx, DWORD PTR [eax+8]
	test	ecx, ecx
	jne	SHORT $LL4@S_minimum@2
$LN3@S_minimum@2:
	ret	0
?_S_minimum@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@KAPAU_Rb_tree_node_base@23@PAU423@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_S_minimum
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE@PAU_Rb_tree_node_base@12@@Z
_TEXT	SEGMENT
??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE@PAU_Rb_tree_node_base@12@@Z PROC ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >, COMDAT
; _this$ = eax
; ___x$ = ecx

; 166  :   _Rb_tree_iterator(_Base_ptr __x) : _Rb_tree_base_iterator(__x) {}

	mov	DWORD PTR [eax], ecx
	ret	0
??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE@PAU_Rb_tree_node_base@12@@Z ENDP ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_S_maximum@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAPAU_Rb_tree_node_base@23@PAU423@@Z
_TEXT	SEGMENT
?_S_maximum@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAPAU_Rb_tree_node_base@23@PAU423@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_S_maximum, COMDAT
; ___x$ = eax

; 362  :   { return _Rb_tree_node_base::_S_maximum(__x); }

	mov	ecx, DWORD PTR [eax+12]
	test	ecx, ecx
	je	SHORT $LN3@S_maximum@3
$LL4@S_maximum@3:
	mov	eax, ecx
	mov	ecx, DWORD PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LL4@S_maximum@3
$LN3@S_maximum@3:
	ret	0
?_S_maximum@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAPAU_Rb_tree_node_base@23@PAU423@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_S_maximum
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_S_minimum@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAPAU_Rb_tree_node_base@23@PAU423@@Z
_TEXT	SEGMENT
?_S_minimum@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAPAU_Rb_tree_node_base@23@PAU423@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_S_minimum, COMDAT
; ___x$ = eax

; 359  :   { return _Rb_tree_node_base::_S_minimum(__x); }

	mov	ecx, DWORD PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN3@S_minimum@3
$LL4@S_minimum@3:
	mov	eax, ecx
	mov	ecx, DWORD PTR [eax+8]
	test	ecx, ecx
	jne	SHORT $LL4@S_minimum@3
$LN3@S_minimum@3:
	ret	0
?_S_minimum@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@KAPAU_Rb_tree_node_base@23@PAU423@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_S_minimum
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_S_maximum@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAPAU_Rb_tree_node_base@23@PAU423@@Z
_TEXT	SEGMENT
?_S_maximum@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAPAU_Rb_tree_node_base@23@PAU423@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_S_maximum, COMDAT
; ___x$ = eax

; 362  :   { return _Rb_tree_node_base::_S_maximum(__x); }

	mov	ecx, DWORD PTR [eax+12]
	test	ecx, ecx
	je	SHORT $LN3@S_maximum@4
$LL4@S_maximum@4:
	mov	eax, ecx
	mov	ecx, DWORD PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LL4@S_maximum@4
$LN3@S_maximum@4:
	ret	0
?_S_maximum@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAPAU_Rb_tree_node_base@23@PAU423@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_S_maximum
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_S_minimum@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAPAU_Rb_tree_node_base@23@PAU423@@Z
_TEXT	SEGMENT
?_S_minimum@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAPAU_Rb_tree_node_base@23@PAU423@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_S_minimum, COMDAT
; ___x$ = eax

; 359  :   { return _Rb_tree_node_base::_S_minimum(__x); }

	mov	ecx, DWORD PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN3@S_minimum@4
$LL4@S_minimum@4:
	mov	eax, ecx
	mov	ecx, DWORD PTR [eax+8]
	test	ecx, ecx
	jne	SHORT $LL4@S_minimum@4
$LN3@S_minimum@4:
	ret	0
?_S_minimum@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@KAPAU_Rb_tree_node_base@23@PAU423@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_S_minimum
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ??0?$_Vector_base@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@IABV?$xalloc@VCMotionDef@@@@@Z
_TEXT	SEGMENT
??0?$_Vector_base@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@IABV?$xalloc@VCMotionDef@@@@@Z PROC ; stlp_std::priv::_Vector_base<CMotionDef,xalloc<CMotionDef> >::_Vector_base<CMotionDef,xalloc<CMotionDef> >, COMDAT
; _this$ = esi
; ___n$ = eax

; 70   :     : _M_start(0), _M_finish(0), _M_end_of_storage(__a, 0) {

	push	edi

; 71   :     _M_start = _M_end_of_storage.allocate(__n, __n);

	lea	edi, DWORD PTR [eax*8]
	xor	ecx, ecx
	sub	edi, eax
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], ecx
	add	edi, edi
	mov	DWORD PTR [esi+8], ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	edi, edi
	push	edi
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 72   :     _M_finish = _M_start;
; 73   :     _M_end_of_storage._M_data = _M_start + __n;

	add	edi, eax
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], edi

; 74   :     _STLP_MPWFIX_TRY _STLP_MPWFIX_CATCH
; 75   :   }

	mov	eax, esi
	pop	edi
	ret	0
??0?$_Vector_base@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@IABV?$xalloc@VCMotionDef@@@@@Z ENDP ; stlp_std::priv::_Vector_base<CMotionDef,xalloc<CMotionDef> >::_Vector_base<CMotionDef,xalloc<CMotionDef> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@ABV?$xalloc@VCMotionDef@@@@@Z
_TEXT	SEGMENT
??0?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@ABV?$xalloc@VCMotionDef@@@@@Z PROC ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_Impl_vector<CMotionDef,xalloc<CMotionDef> >, COMDAT
; _this$ = eax

; 208  :     : _STLP_PRIV _Vector_base<_Tp, _Alloc>(__a) {}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@ABV?$xalloc@VCMotionDef@@@@@Z ENDP ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_Impl_vector<CMotionDef,xalloc<CMotionDef> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Vector_base@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE@IABV?$xalloc@Vmotion_marks@@@@@Z
_TEXT	SEGMENT
??0?$_Vector_base@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE@IABV?$xalloc@Vmotion_marks@@@@@Z PROC ; stlp_std::priv::_Vector_base<motion_marks,xalloc<motion_marks> >::_Vector_base<motion_marks,xalloc<motion_marks> >, COMDAT
; _this$ = esi
; ___n$ = eax

; 70   :     : _M_start(0), _M_finish(0), _M_end_of_storage(__a, 0) {

	xor	ecx, ecx
	push	edi

; 71   :     _M_start = _M_end_of_storage.allocate(__n, __n);

	shl	eax, 4
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], ecx
	mov	edi, eax
	mov	DWORD PTR [esi+8], ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 72   :     _M_finish = _M_start;
; 73   :     _M_end_of_storage._M_data = _M_start + __n;

	add	edi, eax
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], edi

; 74   :     _STLP_MPWFIX_TRY _STLP_MPWFIX_CATCH
; 75   :   }

	mov	eax, esi
	pop	edi
	ret	0
??0?$_Vector_base@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE@IABV?$xalloc@Vmotion_marks@@@@@Z ENDP ; stlp_std::priv::_Vector_base<motion_marks,xalloc<motion_marks> >::_Vector_base<motion_marks,xalloc<motion_marks> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Vmotion_marks@@@@@Z
_TEXT	SEGMENT
??0?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Vmotion_marks@@@@@Z PROC ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_Impl_vector<motion_marks,xalloc<motion_marks> >, COMDAT
; _this$ = eax

; 208  :     : _STLP_PRIV _Vector_base<_Tp, _Alloc>(__a) {}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Vmotion_marks@@@@@Z ENDP ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_Impl_vector<motion_marks,xalloc<motion_marks> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Vector_base@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@IABV?$xalloc@U?$pair@MM@stlp_std@@@@@Z
_TEXT	SEGMENT
??0?$_Vector_base@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@IABV?$xalloc@U?$pair@MM@stlp_std@@@@@Z PROC ; stlp_std::priv::_Vector_base<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_Vector_base<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >, COMDAT
; _this$ = esi
; ___n$ = ecx

; 70   :     : _M_start(0), _M_finish(0), _M_end_of_storage(__a, 0) {

	push	edi

; 71   :     _M_start = _M_end_of_storage.allocate(__n, __n);

	mov	edi, ecx
	xor	eax, eax
	add	edi, edi
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	add	edi, edi
	mov	DWORD PTR [esi+8], eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	edi, edi
	push	edi
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 72   :     _M_finish = _M_start;
; 73   :     _M_end_of_storage._M_data = _M_start + __n;

	add	edi, eax
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], edi

; 74   :     _STLP_MPWFIX_TRY _STLP_MPWFIX_CATCH
; 75   :   }

	mov	eax, esi
	pop	edi
	ret	0
??0?$_Vector_base@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@IABV?$xalloc@U?$pair@MM@stlp_std@@@@@Z ENDP ; stlp_std::priv::_Vector_base<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_Vector_base<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?erase@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEPAU?$pair@MM@3@PAU43@0@Z
_TEXT	SEGMENT
?erase@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEPAU?$pair@MM@3@PAU43@0@Z PROC ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::erase, COMDAT
; _this$ = ebx
; ___first$ = edi
; ___last$ = eax

; 590  :     if (__first == __last)

	cmp	edi, eax

; 591  :       return __first;

	je	SHORT $LN12@erase
	push	esi

; 592  :     return _M_erase(__first, __last, _Movable());

	mov	esi, DWORD PTR [ebx+4]
	sub	esi, eax
	je	SHORT $LN10@erase
	push	esi
	push	eax
	push	edi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
	mov	DWORD PTR [ebx+4], eax
	pop	esi
	mov	eax, edi

; 593  :   }

	ret	0

; 592  :     return _M_erase(__first, __last, _Movable());

$LN10@erase:
	mov	eax, edi
	mov	DWORD PTR [ebx+4], eax
	pop	esi
$LN12@erase:
	mov	eax, edi

; 593  :   }

	ret	0
?erase@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEPAU?$pair@MM@3@PAU43@0@Z ENDP ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@ABV?$xalloc@U?$pair@MM@stlp_std@@@@@Z
_TEXT	SEGMENT
??0?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@ABV?$xalloc@U?$pair@MM@stlp_std@@@@@Z PROC ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >, COMDAT
; _this$ = eax

; 208  :     : _STLP_PRIV _Vector_base<_Tp, _Alloc>(__a) {}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@ABV?$xalloc@U?$pair@MM@stlp_std@@@@@Z ENDP ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?erase@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEPAIPAI0@Z
_TEXT	SEGMENT
?erase@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEPAIPAI0@Z PROC ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::erase, COMDAT
; _this$ = ebx
; ___first$ = edi
; ___last$ = eax

; 590  :     if (__first == __last)

	cmp	edi, eax

; 591  :       return __first;

	je	SHORT $LN12@erase@2
	push	esi

; 592  :     return _M_erase(__first, __last, _Movable());

	mov	esi, DWORD PTR [ebx+4]
	sub	esi, eax
	je	SHORT $LN10@erase@2
	push	esi
	push	eax
	push	edi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
	mov	DWORD PTR [ebx+4], eax
	pop	esi
	mov	eax, edi

; 593  :   }

	ret	0

; 592  :     return _M_erase(__first, __last, _Movable());

$LN10@erase@2:
	mov	eax, edi
	mov	DWORD PTR [ebx+4], eax
	pop	esi
$LN12@erase@2:
	mov	eax, edi

; 593  :   }

	ret	0
?erase@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEPAIPAI0@Z ENDP ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::erase
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_alloc.h
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@PADDV?$xalloc@D@@@priv@stlp_std@@QAEPADI@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@PADDV?$xalloc@D@@@priv@stlp_std@@QAEPADI@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<char *,char,xalloc<char> >::allocate, COMDAT
; ___n$ = eax

; 633  :   { return _Base::allocate(__n); }

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$_STLP_alloc_proxy@PADDV?$xalloc@D@@@priv@stlp_std@@QAEPADI@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<char *,char,xalloc<char> >::allocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_tools.h
_TEXT	ENDS
;	COMDAT ?to_value_type_ref@?$_CastTraits@PAXPAVCBoneData@@@priv@stlp_std@@SAAAPAVCBoneData@@AAPAX@Z
_TEXT	SEGMENT
?to_value_type_ref@?$_CastTraits@PAXPAVCBoneData@@@priv@stlp_std@@SAAAPAVCBoneData@@AAPAX@Z PROC ; stlp_std::priv::_CastTraits<void *,CBoneData *>::to_value_type_ref, COMDAT
; ___ref$ = eax

; 213  :   { return __REINTERPRET_CAST(value_type &, cv_traits::cv_ref(__ref)); }

	ret	0
?to_value_type_ref@?$_CastTraits@PAXPAVCBoneData@@@priv@stlp_std@@SAAAPAVCBoneData@@AAPAX@Z ENDP ; stlp_std::priv::_CastTraits<void *,CBoneData *>::to_value_type_ref
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ?end@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@23@XZ
_TEXT	SEGMENT
?end@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@23@XZ PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::end, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 418  :   iterator end() { return iterator(&this->_M_header._M_data); }

	mov	DWORD PTR [eax], ecx
	ret	0
?end@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@23@XZ ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@23@XZ
_TEXT	SEGMENT
?begin@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@23@XZ PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::begin, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 416  :   iterator begin() { return iterator(_M_leftmost()); }

	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax], edx
	ret	0
?begin@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@23@XZ ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::begin
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE@ABU012@@Z
_TEXT	SEGMENT
??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE@ABU012@@Z PROC ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >, COMDAT
; _this$ = eax
; ___it$ = ecx

; 168  :   _Rb_tree_iterator(const iterator& __it) : _Rb_tree_base_iterator(__it._M_node) {}

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	ret	0
??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE@ABU012@@Z ENDP ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?end@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@23@XZ
_TEXT	SEGMENT
?end@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@23@XZ PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::end, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 418  :   iterator end() { return iterator(&this->_M_header._M_data); }

	mov	DWORD PTR [eax], ecx
	ret	0
?end@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@23@XZ ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@23@XZ
_TEXT	SEGMENT
?begin@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@23@XZ PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::begin, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 416  :   iterator begin() { return iterator(_M_leftmost()); }

	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax], edx
	ret	0
?begin@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@23@XZ ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::begin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?rend@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAVCMotionDef@@@3@XZ
_TEXT	SEGMENT
?rend@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAVCMotionDef@@@3@XZ PROC ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::rend, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 177  :   reverse_iterator rend()                { return reverse_iterator(begin()); }

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	ret	0
?rend@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAVCMotionDef@@@3@XZ ENDP ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::rend
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?rbegin@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAVCMotionDef@@@3@XZ
_TEXT	SEGMENT
?rbegin@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAVCMotionDef@@@3@XZ PROC ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::rbegin, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 175  :   reverse_iterator rbegin()              { return reverse_iterator(end()); }

	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
	ret	0
?rbegin@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAVCMotionDef@@@3@XZ ENDP ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::rbegin
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z
_TEXT	SEGMENT
??0?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z PROC ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >, COMDAT
; _this$ = esi
; ___x$ = eax

; 236  :   { this->_M_finish = _STLP_PRIV __ucopy_ptrs(__x.begin(), __x.end(), this->_M_start, _TrivialUCopy()); }

	push	ebx
	push	edi
	mov	edi, eax
	mov	eax, DWORD PTR [edi+4]
	sub	eax, DWORD PTR [edi]
	xor	ecx, ecx
	sar	eax, 3
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], ecx
	lea	ebx, DWORD PTR [eax*8]
	mov	DWORD PTR [esi+8], ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	ebx
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	add	ebx, eax
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], ebx
	mov	ebx, DWORD PTR [edi+4]
	mov	edi, DWORD PTR [edi]
	cmp	ebx, edi
	je	SHORT $LN35@Impl_vecto
	sub	ebx, edi
	push	ebx
	push	edi
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, ebx
$LN35@Impl_vecto:
	pop	edi
	mov	DWORD PTR [esi+4], eax
	mov	eax, esi
	pop	ebx
	ret	0
??0?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z ENDP ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrsharedmem.h
_TEXT	ENDS
;	COMDAT ?_set@?$ref_smem@UCKeyQT16@@@@QAEXABV1@@Z
_TEXT	SEGMENT
?_set@?$ref_smem@UCKeyQT16@@@@QAEXABV1@@Z PROC		; ref_smem<CKeyQT16>::_set, COMDAT
; _this$ = eax
; _rhs$ = ecx

; 70   : 	void				_set		(ref_smem const &rhs)			{	smem_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	ecx, DWORD PTR [ecx]
	test	ecx, ecx
	je	SHORT $LN1@set@7
	add	DWORD PTR [ecx], 1
$LN1@set@7:
	mov	edx, DWORD PTR [eax]
	test	edx, edx
	je	SHORT $LN9@set@7
	add	DWORD PTR [edx], -1
	mov	edx, DWORD PTR [eax]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN9@set@7
	mov	DWORD PTR [eax], 0
$LN9@set@7:
	mov	DWORD PTR [eax], ecx
	ret	0
?_set@?$ref_smem@UCKeyQT16@@@@QAEXABV1@@Z ENDP		; ref_smem<CKeyQT16>::_set
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_set@?$ref_smem@UCKeyQT8@@@@QAEXABV1@@Z
_TEXT	SEGMENT
?_set@?$ref_smem@UCKeyQT8@@@@QAEXABV1@@Z PROC		; ref_smem<CKeyQT8>::_set, COMDAT
; _this$ = eax
; _rhs$ = ecx

; 70   : 	void				_set		(ref_smem const &rhs)			{	smem_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	ecx, DWORD PTR [ecx]
	test	ecx, ecx
	je	SHORT $LN1@set@8
	add	DWORD PTR [ecx], 1
$LN1@set@8:
	mov	edx, DWORD PTR [eax]
	test	edx, edx
	je	SHORT $LN9@set@8
	add	DWORD PTR [edx], -1
	mov	edx, DWORD PTR [eax]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN9@set@8
	mov	DWORD PTR [eax], 0
$LN9@set@8:
	mov	DWORD PTR [eax], ecx
	ret	0
?_set@?$ref_smem@UCKeyQT8@@@@QAEXABV1@@Z ENDP		; ref_smem<CKeyQT8>::_set
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_set@?$ref_smem@UCKeyQR@@@@QAEXABV1@@Z
_TEXT	SEGMENT
?_set@?$ref_smem@UCKeyQR@@@@QAEXABV1@@Z PROC		; ref_smem<CKeyQR>::_set, COMDAT
; _this$ = eax
; _rhs$ = ecx

; 70   : 	void				_set		(ref_smem const &rhs)			{	smem_value* v = rhs.p_; if (0!=v) v->dwReference++; _dec(); p_ = v;							}

	mov	ecx, DWORD PTR [ecx]
	test	ecx, ecx
	je	SHORT $LN1@set@9
	add	DWORD PTR [ecx], 1
$LN1@set@9:
	mov	edx, DWORD PTR [eax]
	test	edx, edx
	je	SHORT $LN9@set@9
	add	DWORD PTR [edx], -1
	mov	edx, DWORD PTR [eax]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN9@set@9
	mov	DWORD PTR [eax], 0
$LN9@set@9:
	mov	DWORD PTR [eax], ecx
	ret	0
?_set@?$ref_smem@UCKeyQR@@@@QAEXABV1@@Z ENDP		; ref_smem<CKeyQR>::_set
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?erase@?$vector@IV?$xalloc@I@@@stlp_std@@QAEPAIPAI0@Z
_TEXT	SEGMENT
?erase@?$vector@IV?$xalloc@I@@@stlp_std@@QAEPAIPAI0@Z PROC ; stlp_std::vector<unsigned int,xalloc<unsigned int> >::erase, COMDAT
; _this$ = ebx
; ___first$ = edi
; ___last$ = eax

; 208  :     return cast_traits::to_value_type_ptr(_M_impl.erase(cast_traits::to_storage_type_ptr(__first),
; 209  :                                                         cast_traits::to_storage_type_ptr(__last)));

	cmp	edi, eax
	je	SHORT $LN20@erase@3
	push	esi
	mov	esi, DWORD PTR [ebx+4]
	sub	esi, eax
	je	SHORT $LN16@erase@3
	push	esi
	push	eax
	push	edi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
	mov	DWORD PTR [ebx+4], eax
	pop	esi
	mov	eax, edi

; 210  :   }

	ret	0

; 208  :     return cast_traits::to_value_type_ptr(_M_impl.erase(cast_traits::to_storage_type_ptr(__first),
; 209  :                                                         cast_traits::to_storage_type_ptr(__last)));

$LN16@erase@3:
	mov	eax, edi
	mov	DWORD PTR [ebx+4], eax
	pop	esi
$LN20@erase@3:
	mov	eax, edi

; 210  :   }

	ret	0
?erase@?$vector@IV?$xalloc@I@@@stlp_std@@QAEPAIPAI0@Z ENDP ; stlp_std::vector<unsigned int,xalloc<unsigned int> >::erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$vector@GV?$xalloc@G@@@stlp_std@@QAEPAGXZ
_TEXT	SEGMENT
?begin@?$vector@GV?$xalloc@G@@@stlp_std@@QAEPAGXZ PROC	; stlp_std::vector<unsigned short,xalloc<unsigned short> >::begin, COMDAT
; _this$ = ecx

; 79   :   iterator begin()             { return cast_traits::to_value_type_ptr(_M_impl.begin()); }

	jmp	?begin@?$_Impl_vector@GV?$xalloc@G@@@priv@stlp_std@@QAEPAGXZ ; stlp_std::priv::_Impl_vector<unsigned short,xalloc<unsigned short> >::begin
?begin@?$vector@GV?$xalloc@G@@@stlp_std@@QAEPAGXZ ENDP	; stlp_std::vector<unsigned short,xalloc<unsigned short> >::begin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_alloc.h
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@PADDV?$xalloc@D@@@priv@stlp_std@@AAEPADIAAIABU__false_type@3@@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@PADDV?$xalloc@D@@@priv@stlp_std@@AAEPADIAAIABU__false_type@3@@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<char *,char,xalloc<char> >::allocate, COMDAT
; ___n$ = eax
; ___allocated_n$ = ecx

; 640  :   { __allocated_n = __n; return allocate(__n); }

	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$_STLP_alloc_proxy@PADDV?$xalloc@D@@@priv@stlp_std@@AAEPADIAAIABU__false_type@3@@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<char *,char,xalloc<char> >::allocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE@ABU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@12@@Z
_TEXT	SEGMENT
??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE@ABU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@12@@Z PROC ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_ConstMapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_ConstMapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >, COMDAT
; _this$ = eax
; ___it$ = ecx

; 168  :   _Rb_tree_iterator(const iterator& __it) : _Rb_tree_base_iterator(__it._M_node) {}

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	ret	0
??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE@ABU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@12@@Z ENDP ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_ConstMapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_ConstMapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE@ABU012@@Z
_TEXT	SEGMENT
??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE@ABU012@@Z PROC ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >, COMDAT
; _this$ = eax
; ___it$ = ecx

; 168  :   _Rb_tree_iterator(const iterator& __it) : _Rb_tree_base_iterator(__it._M_node) {}

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	ret	0
??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE@ABU012@@Z ENDP ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_map.h
_TEXT	ENDS
;	COMDAT ?end@?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@2@XZ
_TEXT	SEGMENT
?end@?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@2@XZ PROC ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::end, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 163  :   iterator end() { return _M_t.end(); }

	mov	DWORD PTR [eax], ecx
	ret	0
?end@?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@2@XZ ENDP ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@2@XZ
_TEXT	SEGMENT
?begin@?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@2@XZ PROC ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::begin, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 161  :   iterator begin() { return _M_t.begin(); }

	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax], edx
	ret	0
?begin@?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@2@XZ ENDP ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::begin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE@ABU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@12@@Z
_TEXT	SEGMENT
??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE@ABU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@12@@Z PROC ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_ConstMapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_ConstMapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >, COMDAT
; _this$ = eax
; ___it$ = ecx

; 168  :   _Rb_tree_iterator(const iterator& __it) : _Rb_tree_base_iterator(__it._M_node) {}

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	ret	0
??0?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_ConstMapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE@ABU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@12@@Z ENDP ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_ConstMapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_ConstMapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??C?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QBEPAU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@2@XZ
_TEXT	SEGMENT
??C?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QBEPAU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@2@XZ PROC ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::operator->, COMDAT
; _this$ = eax

; 174  :   _STLP_DEFINE_ARROW_OPERATOR

	mov	eax, DWORD PTR [eax]
	add	eax, 16					; 00000010H
	ret	0
??C?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QBEPAU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@2@XZ ENDP ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::operator->
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_map.h
_TEXT	ENDS
;	COMDAT ?end@?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@2@XZ
_TEXT	SEGMENT
?end@?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@2@XZ PROC ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::end, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 163  :   iterator end() { return _M_t.end(); }

	mov	DWORD PTR [eax], ecx
	ret	0
?end@?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@2@XZ ENDP ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@2@XZ
_TEXT	SEGMENT
?begin@?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@2@XZ PROC ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::begin, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 161  :   iterator begin() { return _M_t.begin(); }

	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax], edx
	ret	0
?begin@?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@2@XZ ENDP ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::begin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ??1?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@XZ PROC ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::~_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >, COMDAT
; _this$ = eax

; 286  :   ~vector() { _STLP_STD::_Destroy_Range(rbegin(), rend()); }

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN34@Impl_vecto@2
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN34@Impl_vecto@2:
	ret	0
??1?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@XZ ENDP ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::~_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ??0?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QAE@ABV01@@Z PROC ; stlp_std::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >, COMDAT
; _this$ = ecx
; ___x$ = eax

; 123  :   vector(const _Self& __x)

	push	esi
	mov	esi, ecx
	call	??0?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
	mov	eax, esi
	pop	esi
	ret	0
??0?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QAE@ABV01@@Z ENDP ; stlp_std::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrsharedmem.h
_TEXT	ENDS
;	COMDAT ??4?$ref_smem@UCKeyQT16@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
??4?$ref_smem@UCKeyQT16@@@@QAEAAV0@ABV0@@Z PROC		; ref_smem<CKeyQT16>::operator=, COMDAT
; _this$ = eax
; _rhs$ = ecx

; 85   : 	ref_smem<T>&		operator=	(ref_smem<T> const &rhs)		{	_set(rhs);	return (ref_smem<T>&)*this;						}

	mov	ecx, DWORD PTR [ecx]
	test	ecx, ecx
	je	SHORT $LN3@operator@10
	add	DWORD PTR [ecx], 1
$LN3@operator@10:
	mov	edx, DWORD PTR [eax]
	test	edx, edx
	je	SHORT $LN11@operator@10
	add	DWORD PTR [edx], -1
	mov	edx, DWORD PTR [eax]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN11@operator@10
	mov	DWORD PTR [eax], 0
$LN11@operator@10:
	mov	DWORD PTR [eax], ecx
	ret	0
??4?$ref_smem@UCKeyQT16@@@@QAEAAV0@ABV0@@Z ENDP		; ref_smem<CKeyQT16>::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$ref_smem@UCKeyQT16@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$ref_smem@UCKeyQT16@@@@QAE@ABV0@@Z PROC		; ref_smem<CKeyQT16>::ref_smem<CKeyQT16>, COMDAT
; _this$ = eax
; _rhs$ = ecx

; 75   : 	ref_smem			(ref_smem<T> const &rhs)					{	p_ = 0;	_set(rhs);											}

	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR [ecx]
	test	ecx, ecx
	je	SHORT $LN3@ref_smem@4
	add	DWORD PTR [ecx], 1
$LN3@ref_smem@4:
	mov	edx, DWORD PTR [eax]
	test	edx, edx
	je	SHORT $LN11@ref_smem@4
	add	DWORD PTR [edx], -1
	mov	edx, DWORD PTR [eax]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN11@ref_smem@4
	mov	DWORD PTR [eax], 0
$LN11@ref_smem@4:
	mov	DWORD PTR [eax], ecx
	ret	0
??0?$ref_smem@UCKeyQT16@@@@QAE@ABV0@@Z ENDP		; ref_smem<CKeyQT16>::ref_smem<CKeyQT16>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$ref_smem@UCKeyQT8@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
??4?$ref_smem@UCKeyQT8@@@@QAEAAV0@ABV0@@Z PROC		; ref_smem<CKeyQT8>::operator=, COMDAT
; _this$ = eax
; _rhs$ = ecx

; 85   : 	ref_smem<T>&		operator=	(ref_smem<T> const &rhs)		{	_set(rhs);	return (ref_smem<T>&)*this;						}

	mov	ecx, DWORD PTR [ecx]
	test	ecx, ecx
	je	SHORT $LN3@operator@11
	add	DWORD PTR [ecx], 1
$LN3@operator@11:
	mov	edx, DWORD PTR [eax]
	test	edx, edx
	je	SHORT $LN11@operator@11
	add	DWORD PTR [edx], -1
	mov	edx, DWORD PTR [eax]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN11@operator@11
	mov	DWORD PTR [eax], 0
$LN11@operator@11:
	mov	DWORD PTR [eax], ecx
	ret	0
??4?$ref_smem@UCKeyQT8@@@@QAEAAV0@ABV0@@Z ENDP		; ref_smem<CKeyQT8>::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$ref_smem@UCKeyQT8@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$ref_smem@UCKeyQT8@@@@QAE@ABV0@@Z PROC		; ref_smem<CKeyQT8>::ref_smem<CKeyQT8>, COMDAT
; _this$ = eax
; _rhs$ = ecx

; 75   : 	ref_smem			(ref_smem<T> const &rhs)					{	p_ = 0;	_set(rhs);											}

	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR [ecx]
	test	ecx, ecx
	je	SHORT $LN3@ref_smem@5
	add	DWORD PTR [ecx], 1
$LN3@ref_smem@5:
	mov	edx, DWORD PTR [eax]
	test	edx, edx
	je	SHORT $LN11@ref_smem@5
	add	DWORD PTR [edx], -1
	mov	edx, DWORD PTR [eax]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN11@ref_smem@5
	mov	DWORD PTR [eax], 0
$LN11@ref_smem@5:
	mov	DWORD PTR [eax], ecx
	ret	0
??0?$ref_smem@UCKeyQT8@@@@QAE@ABV0@@Z ENDP		; ref_smem<CKeyQT8>::ref_smem<CKeyQT8>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$ref_smem@UCKeyQR@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
??4?$ref_smem@UCKeyQR@@@@QAEAAV0@ABV0@@Z PROC		; ref_smem<CKeyQR>::operator=, COMDAT
; _this$ = eax
; _rhs$ = ecx

; 85   : 	ref_smem<T>&		operator=	(ref_smem<T> const &rhs)		{	_set(rhs);	return (ref_smem<T>&)*this;						}

	mov	ecx, DWORD PTR [ecx]
	test	ecx, ecx
	je	SHORT $LN3@operator@12
	add	DWORD PTR [ecx], 1
$LN3@operator@12:
	mov	edx, DWORD PTR [eax]
	test	edx, edx
	je	SHORT $LN11@operator@12
	add	DWORD PTR [edx], -1
	mov	edx, DWORD PTR [eax]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN11@operator@12
	mov	DWORD PTR [eax], 0
$LN11@operator@12:
	mov	DWORD PTR [eax], ecx
	ret	0
??4?$ref_smem@UCKeyQR@@@@QAEAAV0@ABV0@@Z ENDP		; ref_smem<CKeyQR>::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$ref_smem@UCKeyQR@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$ref_smem@UCKeyQR@@@@QAE@ABV0@@Z PROC		; ref_smem<CKeyQR>::ref_smem<CKeyQR>, COMDAT
; _this$ = eax
; _rhs$ = ecx

; 75   : 	ref_smem			(ref_smem<T> const &rhs)					{	p_ = 0;	_set(rhs);											}

	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR [ecx]
	test	ecx, ecx
	je	SHORT $LN3@ref_smem@6
	add	DWORD PTR [ecx], 1
$LN3@ref_smem@6:
	mov	edx, DWORD PTR [eax]
	test	edx, edx
	je	SHORT $LN11@ref_smem@6
	add	DWORD PTR [edx], -1
	mov	edx, DWORD PTR [eax]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN11@ref_smem@6
	mov	DWORD PTR [eax], 0
$LN11@ref_smem@6:
	mov	DWORD PTR [eax], ecx
	ret	0
??0?$ref_smem@UCKeyQR@@@@QAE@ABV0@@Z ENDP		; ref_smem<CKeyQR>::ref_smem<CKeyQR>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?clear_not_free@?$xr_vector@IV?$xalloc@I@@@@QAEXXZ
_TEXT	SEGMENT
?clear_not_free@?$xr_vector@IV?$xalloc@I@@@@QAEXXZ PROC	; xr_vector<unsigned int,xalloc<unsigned int> >::clear_not_free, COMDAT
; _this$ = edi

; 129  : 	void	clear_not_free		()									{ erase(begin(),end());			}

	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ecx
	je	SHORT $LN22@clear_not_
	push	esi
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN30@clear_not_
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN30@clear_not_:
	mov	DWORD PTR [edi+4], eax
	pop	esi
$LN22@clear_not_:
	ret	0
?clear_not_free@?$xr_vector@IV?$xalloc@I@@@@QAEXXZ ENDP	; xr_vector<unsigned int,xalloc<unsigned int> >::clear_not_free
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??A?$xr_vector@GV?$xalloc@G@@@@QAEAAGI@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$xr_vector@GV?$xalloc@G@@@@QAEAAGI@Z PROC		; xr_vector<unsigned short,xalloc<unsigned short> >::operator[], COMDAT
; _this$ = ecx

; 139  : 	reference operator[]		(size_type _Pos)					{ {VERIFY2(_Pos<size(),make_string("index is out of range: index requested[%d], size of container[%d]", _Pos, size()).c_str());} return (*(begin() + _Pos)); }

	call	?begin@?$_Impl_vector@GV?$xalloc@G@@@priv@stlp_std@@QAEPAGXZ ; stlp_std::priv::_Impl_vector<unsigned short,xalloc<unsigned short> >::begin
	mov	ecx, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*2]
	ret	4
??A?$xr_vector@GV?$xalloc@G@@@@QAEAAGI@Z ENDP		; xr_vector<unsigned short,xalloc<unsigned short> >::operator[]
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_alloc.h
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@PADDV?$xalloc@D@@@priv@stlp_std@@QAEPADIAAI@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@PADDV?$xalloc@D@@@priv@stlp_std@@QAEPADIAAI@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<char *,char,xalloc<char> >::allocate, COMDAT
; ___n$ = eax
; ___allocated_n$ = ecx

; 611  : #if !defined (__BORLANDC__)
; 612  :     typedef typename _IsSTLportClass<_MaybeReboundAlloc>::_Ret _STLportAlloc;
; 613  : #else
; 614  :     typedef typename __bool2type<_IsSTLportClass<_MaybeReboundAlloc>::_Is>::_Ret _STLportAlloc;
; 615  : #endif
; 616  :     return allocate(__n, __allocated_n, _STLportAlloc());

	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 617  :   }

	ret	0
?allocate@?$_STLP_alloc_proxy@PADDV?$xalloc@D@@@priv@stlp_std@@QAEPADIAAI@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<char *,char,xalloc<char> >::allocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_string_base.h
_TEXT	ENDS
;	COMDAT ?max_size@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IBEIXZ
_TEXT	SEGMENT
?max_size@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IBEIXZ PROC ; stlp_std::priv::_String_base<char,xalloc<char> >::max_size, COMDAT

; 100  :     const size_type __string_max_size = size_type(-1) / sizeof(_Tp);
; 101  :     typename allocator_type::size_type __alloc_max_size = _M_end_of_storage.max_size();
; 102  :     return (min)(__alloc_max_size, __string_max_size) - 1;

	mov	eax, -2					; fffffffeH

; 103  :   }

	ret	0
?max_size@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IBEIXZ ENDP ; stlp_std::priv::_String_base<char,xalloc<char> >::max_size
_TEXT	ENDS
PUBLIC	?time_to_next_mark@motion_marks@@QBEMM@Z	; motion_marks::time_to_next_mark
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\skeletonmotions.cpp
;	COMDAT ?time_to_next_mark@motion_marks@@QBEMM@Z
_TEXT	SEGMENT
_result_dist$ = -4					; size = 4
_time$ = 8						; size = 4
?time_to_next_mark@motion_marks@@QBEMM@Z PROC		; motion_marks::time_to_next_mark, COMDAT
; _this$ = ecx

; 426  : {

	push	ecx

; 427  : 	C_ITERATOR			i = intervals.begin();

	mov	eax, DWORD PTR [ecx]

; 428  : 	C_ITERATOR			e = intervals.end();

	mov	ecx, DWORD PTR [ecx+4]

; 429  : 	float result_dist = FLT_MAX;
; 430  : 	for ( ; i != e; ++i) {

	cmp	eax, ecx
	movss	xmm1, DWORD PTR __real@7f7fffff
	movss	DWORD PTR _result_dist$[esp+4], xmm1
	je	SHORT $LN23@time_to_ne
	movss	xmm2, DWORD PTR _time$[esp]
	xorps	xmm3, xmm3
$LL4@time_to_ne:

; 431  : 		float dist = (*i).first - time;

	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, xmm2

; 432  : 		if( dist > 0.f && dist < result_dist )

	comiss	xmm0, xmm3
	jbe	SHORT $LN3@time_to_ne
	comiss	xmm1, xmm0
	jbe	SHORT $LN3@time_to_ne

; 433  : 			result_dist = dist;

	movaps	xmm1, xmm0
	movss	DWORD PTR _result_dist$[esp+4], xmm1
$LN3@time_to_ne:
	add	eax, 8
	cmp	eax, ecx
	jne	SHORT $LL4@time_to_ne
$LN23@time_to_ne:

; 434  : 	}
; 435  : 	return result_dist;

	fld	DWORD PTR _result_dist$[esp+4]

; 436  : }

	pop	ecx
	ret	4
?time_to_next_mark@motion_marks@@QBEMM@Z ENDP		; motion_marks::time_to_next_mark
_TEXT	ENDS
PUBLIC	?create@shared_motions@@QAE_NABV1@@Z		; shared_motions::create
; Function compile flags: /Ogtpy
;	COMDAT ?create@shared_motions@@QAE_NABV1@@Z
_TEXT	SEGMENT
_rhs$ = 8						; size = 4
?create@shared_motions@@QAE_NABV1@@Z PROC		; shared_motions::create, COMDAT
; _this$ = ecx

; 366  : 	motions_value* v = rhs.p_;

	mov	eax, DWORD PTR _rhs$[esp-4]
	mov	edx, DWORD PTR [eax]

; 367  : 	if (0!=v)

	test	edx, edx
	je	SHORT $LN1@create@4

; 368  : 		v->m_dwReference++;

	add	DWORD PTR [edx+136], 1
$LN1@create@4:

; 369  : 	destroy			();

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN4@create@4
	add	DWORD PTR [eax+136], -1
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax+136], 0
	jne	SHORT $LN4@create@4
	mov	DWORD PTR [ecx], 0
$LN4@create@4:

; 370  : 	p_				= v;
; 371  :     return (0!=v);

	xor	eax, eax
	test	edx, edx
	mov	DWORD PTR [ecx], edx
	setne	al

; 372  : }

	ret	4
?create@shared_motions@@QAE_NABV1@@Z ENDP		; shared_motions::create
_TEXT	ENDS
PUBLIC	?part_id@CPartition@@QBEGABVshared_str@@@Z	; CPartition::part_id
; Function compile flags: /Ogtpy
;	COMDAT ?part_id@CPartition@@QBEGABVshared_str@@@Z
_TEXT	SEGMENT
_name$ = 8						; size = 4
?part_id@CPartition@@QBEGABVshared_str@@@Z PROC		; CPartition::part_id, COMDAT
; _this$ = ecx

; 15   : 	for(u16 i=0; i<MAX_PARTS; ++i)

	mov	edx, DWORD PTR _name$[esp-4]
	mov	edx, DWORD PTR [edx]
	xor	eax, eax
	push	esi
	npad	7
$LL4@part_id:

; 16   : 	{
; 17   : 		const CPartDef& pd = part(i);
; 18   : 		if(pd.Name == name)

	movzx	esi, ax
	shl	esi, 4
	cmp	DWORD PTR [esi+ecx], edx
	je	SHORT $LN5@part_id
	add	eax, 1
	cmp	ax, 4
	jb	SHORT $LL4@part_id

; 19   : 			return i;
; 20   : 	}
; 21   : 	Msg("!there is no part named [%s]", name.c_str() );

	test	edx, edx
	je	SHORT $LN17@part_id
	lea	eax, DWORD PTR [edx+16]
	jmp	SHORT $LN18@part_id
$LN17@part_id:
	xor	eax, eax
$LN18@part_id:
	push	eax
	push	OFFSET ??_C@_0BN@HECBOIOO@?$CBthere?5is?5no?5part?5named?5?$FL?$CFs?$FN?$AA@
	call	DWORD PTR __imp_?Msg@@YAXPBDZZ
	add	esp, 8

; 22   : 	return u16(-1);

	or	ax, 65535				; 0000ffffH
$LN5@part_id:
	pop	esi

; 23   : }

	ret	4
?part_id@CPartition@@QBEGABVshared_str@@@Z ENDP		; CPartition::part_id
_TEXT	ENDS
PUBLIC	??4shared_motions@@QAEAAV0@ABV0@@Z		; shared_motions::operator=
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\skeletonmotions.h
;	COMDAT ??4shared_motions@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_rhs$ = 8						; size = 4
??4shared_motions@@QAEAAV0@ABV0@@Z PROC			; shared_motions::operator=, COMDAT
; _this$ = ecx

; 227  : 	shared_motions&		operator=		(shared_motions const &rhs)	{	create(rhs);return *this;	}

	mov	eax, ecx
	mov	ecx, DWORD PTR _rhs$[esp-4]
	mov	edx, DWORD PTR [ecx]
	test	edx, edx
	je	SHORT $LN3@operator@13
	add	DWORD PTR [edx+136], 1
$LN3@operator@13:
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN11@operator@13
	add	DWORD PTR [ecx+136], -1
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+136], 0
	jne	SHORT $LN11@operator@13
	mov	DWORD PTR [eax], 0
$LN11@operator@13:
	mov	DWORD PTR [eax], edx
	ret	4
??4shared_motions@@QAEAAV0@ABV0@@Z ENDP			; shared_motions::operator=
_TEXT	ENDS
PUBLIC	??1shared_motions@@QAE@XZ			; shared_motions::~shared_motions
; Function compile flags: /Ogtpy
;	COMDAT ??1shared_motions@@QAE@XZ
_TEXT	SEGMENT
??1shared_motions@@QAE@XZ PROC				; shared_motions::~shared_motions, COMDAT
; _this$ = ecx

; 224  : 						~shared_motions	()							{	destroy();										}

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN3@shared_mot
	add	DWORD PTR [eax+136], -1
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax+136], 0
	jne	SHORT $LN3@shared_mot
	mov	DWORD PTR [ecx], 0
$LN3@shared_mot:
	ret	0
??1shared_motions@@QAE@XZ ENDP				; shared_motions::~shared_motions
_TEXT	ENDS
PUBLIC	??0shared_motions@@QAE@ABV0@@Z			; shared_motions::shared_motions
; Function compile flags: /Ogtpy
;	COMDAT ??0shared_motions@@QAE@ABV0@@Z
_TEXT	SEGMENT
_rhs$ = 8						; size = 4
??0shared_motions@@QAE@ABV0@@Z PROC			; shared_motions::shared_motions, COMDAT
; _this$ = ecx

; 223  : 						shared_motions	(shared_motions const &rhs)	{	p_ = 0;	create(rhs);							}

	mov	eax, ecx
	mov	ecx, DWORD PTR _rhs$[esp-4]
	mov	DWORD PTR [eax], 0
	mov	edx, DWORD PTR [ecx]
	test	edx, edx
	je	SHORT $LN3@shared_mot@2
	add	DWORD PTR [edx+136], 1
$LN3@shared_mot@2:
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN11@shared_mot@2
	add	DWORD PTR [ecx+136], -1
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+136], 0
	jne	SHORT $LN11@shared_mot@2
	mov	DWORD PTR [eax], 0
$LN11@shared_mot@2:
	mov	DWORD PTR [eax], edx
	ret	4
??0shared_motions@@QAE@ABV0@@Z ENDP			; shared_motions::shared_motions
_TEXT	ENDS
PUBLIC	?count@CPartition@@QBEEXZ			; CPartition::count
; Function compile flags: /Ogtpy
;	COMDAT ?count@CPartition@@QBEEXZ
_TEXT	SEGMENT
?count@CPartition@@QBEEXZ PROC				; CPartition::count, COMDAT
; _this$ = ecx

; 164  :     u8					count				() const {u8 ret=0;for(u8 i=0;i<MAX_PARTS;++i) if(P[i].Name.size())ret++; return ret;};

	push	esi
	xor	al, al
	mov	edx, ecx
	mov	esi, 4
	npad	6
$LL4@count:
	mov	ecx, DWORD PTR [edx]
	test	ecx, ecx
	je	SHORT $LN3@count
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN3@count
	add	al, 1
$LN3@count:
	add	edx, 16					; 00000010H
	sub	esi, 1
	jne	SHORT $LL4@count
	pop	esi
	ret	0
?count@CPartition@@QBEEXZ ENDP				; CPartition::count
_TEXT	ENDS
PUBLIC	?mem_usage@CPartition@@QAEIXZ			; CPartition::mem_usage
; Function compile flags: /Ogtpy
;	COMDAT ?mem_usage@CPartition@@QAEIXZ
_TEXT	SEGMENT
?mem_usage@CPartition@@QAEIXZ PROC			; CPartition::mem_usage, COMDAT
; _this$ = ecx

; 162  : 	u32					mem_usage			()		{ return P[0].mem_usage()*MAX_PARTS;}

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2
	add	eax, 5
	shl	eax, 4
	ret	0
?mem_usage@CPartition@@QAEIXZ ENDP			; CPartition::mem_usage
_TEXT	ENDS
PUBLIC	?Power@CMotionDef@@QAEMXZ			; CMotionDef::Power
; Function compile flags: /Ogtpy
;	COMDAT ?Power@CMotionDef@@QAEMXZ
_TEXT	SEGMENT
tv134 = -4						; size = 4
?Power@CMotionDef@@QAEMXZ PROC				; CMotionDef::Power, COMDAT
; _this$ = ecx

; 132  :     ICF float				Power				(){return Dequantize(power);}

	push	ecx
	movzx	eax, WORD PTR [ecx+6]
	mov	DWORD PTR tv134[esp+4], eax
	fild	DWORD PTR tv134[esp+4]
	fmul	DWORD PTR __real@3ac800c8
	pop	ecx
	ret	0
?Power@CMotionDef@@QAEMXZ ENDP				; CMotionDef::Power
_TEXT	ENDS
PUBLIC	?Speed@CMotionDef@@QAEMXZ			; CMotionDef::Speed
; Function compile flags: /Ogtpy
;	COMDAT ?Speed@CMotionDef@@QAEMXZ
_TEXT	SEGMENT
tv134 = -4						; size = 4
?Speed@CMotionDef@@QAEMXZ PROC				; CMotionDef::Speed, COMDAT
; _this$ = ecx

; 131  :     ICF float				Speed				(){return Dequantize(speed);}

	push	ecx
	movzx	eax, WORD PTR [ecx+4]
	mov	DWORD PTR tv134[esp+4], eax
	fild	DWORD PTR tv134[esp+4]
	fmul	DWORD PTR __real@3ac800c8
	pop	ecx
	ret	0
?Speed@CMotionDef@@QAEMXZ ENDP				; CMotionDef::Speed
_TEXT	ENDS
PUBLIC	__real@3b160096
PUBLIC	?Falloff@CMotionDef@@QAEMXZ			; CMotionDef::Falloff
;	COMDAT __real@3b160096
CONST	SEGMENT
__real@3b160096 DD 03b160096r			; 0.00228885
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?Falloff@CMotionDef@@QAEMXZ
_TEXT	SEGMENT
tv134 = -4						; size = 4
?Falloff@CMotionDef@@QAEMXZ PROC			; CMotionDef::Falloff, COMDAT
; _this$ = ecx

; 130  :     ICF float				Falloff				(){return fQuantizerRangeExt*Dequantize(falloff);}

	push	ecx
	movzx	eax, WORD PTR [ecx+10]
	mov	DWORD PTR tv134[esp+4], eax
	fild	DWORD PTR tv134[esp+4]
	fmul	DWORD PTR __real@3b160096
	pop	ecx
	ret	0
?Falloff@CMotionDef@@QAEMXZ ENDP			; CMotionDef::Falloff
_TEXT	ENDS
PUBLIC	?Accrue@CMotionDef@@QAEMXZ			; CMotionDef::Accrue
; Function compile flags: /Ogtpy
;	COMDAT ?Accrue@CMotionDef@@QAEMXZ
_TEXT	SEGMENT
tv134 = -4						; size = 4
?Accrue@CMotionDef@@QAEMXZ PROC				; CMotionDef::Accrue, COMDAT
; _this$ = ecx

; 129  :     ICF float				Accrue				(){return fQuantizerRangeExt*Dequantize(accrue);}

	push	ecx
	movzx	eax, WORD PTR [ecx+8]
	mov	DWORD PTR tv134[esp+4], eax
	fild	DWORD PTR tv134[esp+4]
	fmul	DWORD PTR __real@3b160096
	pop	ecx
	ret	0
?Accrue@CMotionDef@@QAEMXZ ENDP				; CMotionDef::Accrue
_TEXT	ENDS
PUBLIC	__real@4423d666
PUBLIC	?Quantize@CMotionDef@@QBEGM@Z			; CMotionDef::Quantize
;	COMDAT __real@4423d666
; File d:\clearsky\sources\engine\xrcore\vector.h
CONST	SEGMENT
__real@4423d666 DD 04423d666r			; 655.35
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\skeletonmotions.h
CONST	ENDS
;	COMDAT ?Quantize@CMotionDef@@QBEGM@Z
_TEXT	SEGMENT
_a$229174 = 8						; size = 4
_V$ = 8							; size = 4
?Quantize@CMotionDef@@QBEGM@Z PROC			; CMotionDef::Quantize, COMDAT
; _this$ = ecx

; 124  : 	IC u16					Quantize			(float V) const		{	s32		t = iFloor(V*655.35f); clamp(t,0,65535); return u16(t); }

	movss	xmm0, DWORD PTR _V$[esp-4]
	mulss	xmm0, DWORD PTR __real@4423d666
	push	esi
	movss	DWORD PTR _a$229174[esp], xmm0
	mov	esi, DWORD PTR _a$229174[esp]
	mov	eax, esi
	sar	eax, 23					; 00000017H
	and	eax, 255				; 000000ffH
	mov	edx, esi
	or	edx, -8388608				; ff800000H
	shl	edx, 8
	mov	ecx, 158				; 0000009eH
	sub	ecx, eax
	shr	edx, cl
	sub	ecx, 96					; 00000060H
	mov	eax, 1
	shl	eax, cl
	sub	eax, 1
	sar	eax, 8
	and	eax, esi
	neg	eax
	sbb	eax, eax
	add	eax, 1
	sar	esi, 31					; 0000001fH
	and	eax, esi
	add	ecx, 64					; 00000040H
	sub	edx, eax
	sar	ecx, 31					; 0000001fH
	and	edx, ecx
	xor	edx, esi
	mov	eax, edx
	pop	esi
	jge	SHORT $LN7@Quantize
	xor	eax, eax
	ret	4
$LN7@Quantize:
	cmp	eax, 65535				; 0000ffffH
	jle	SHORT $LN5@Quantize
	mov	eax, 65535				; 0000ffffH
$LN5@Quantize:
	ret	4
?Quantize@CMotionDef@@QBEGM@Z ENDP			; CMotionDef::Quantize
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QAE@XZ PROC ; stlp_std::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::~vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >, COMDAT
; _this$ = eax
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN36@vector@4
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN36@vector@4:
	ret	0
??1?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QAE@XZ ENDP ; stlp_std::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::~vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$xr_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xr_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@@QAE@ABV0@@Z PROC ; xr_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::xr_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >, COMDAT
; _this$ = ecx
; ___that$ = eax
	push	esi
	mov	esi, ecx
	call	??0?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
	mov	eax, esi
	pop	esi
	ret	0
??0?$xr_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@@QAE@ABV0@@Z ENDP ; xr_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::xr_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$xr_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@@QAE@XZ
_TEXT	SEGMENT
??1?$xr_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@@QAE@XZ PROC ; xr_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::~xr_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >, COMDAT
; _this$ = eax
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN38@xr_vector
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN38@xr_vector:
	ret	0
??1?$xr_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@@QAE@XZ ENDP ; xr_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::~xr_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
_TEXT	ENDS
PUBLIC	??4CMotion@@QAEAAV0@ABV0@@Z			; CMotion::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4CMotion@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4CMotion@@QAEAAV0@ABV0@@Z PROC			; CMotion::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	edx, DWORD PTR [ecx]
	xor	edx, DWORD PTR [eax]
	push	esi
	and	edx, 255				; 000000ffH
	xor	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	esi, DWORD PTR [ecx+4]
	test	esi, esi
	je	SHORT $LN5@operator@14
	add	DWORD PTR [esi], 1
$LN5@operator@14:
	mov	edx, DWORD PTR [eax+4]
	test	edx, edx
	je	SHORT $LN8@operator@14
	add	DWORD PTR [edx], -1
	mov	edx, DWORD PTR [eax+4]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN8@operator@14
	mov	DWORD PTR [eax+4], 0
$LN8@operator@14:
	mov	DWORD PTR [eax+4], esi
	mov	edx, DWORD PTR [ecx+8]
	test	edx, edx
	je	SHORT $LN14@operator@14
	add	DWORD PTR [edx], 1
$LN14@operator@14:
	mov	esi, DWORD PTR [eax+8]
	test	esi, esi
	je	SHORT $LN17@operator@14
	add	DWORD PTR [esi], -1
	mov	esi, DWORD PTR [eax+8]
	cmp	DWORD PTR [esi], 0
	jne	SHORT $LN17@operator@14
	mov	DWORD PTR [eax+8], 0
$LN17@operator@14:
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	test	edx, edx
	je	SHORT $LN23@operator@14
	add	DWORD PTR [edx], 1
$LN23@operator@14:
	mov	esi, DWORD PTR [eax+12]
	test	esi, esi
	je	SHORT $LN26@operator@14
	add	DWORD PTR [esi], -1
	mov	esi, DWORD PTR [eax+12]
	cmp	DWORD PTR [esi], 0
	jne	SHORT $LN26@operator@14
	mov	DWORD PTR [eax+12], 0
$LN26@operator@14:
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	edx, DWORD PTR [ecx+24]
	add	ecx, 28					; 0000001cH
	mov	DWORD PTR [eax+24], edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+28], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+32], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+36], ecx
	pop	esi
	ret	4
??4CMotion@@QAEAAV0@ABV0@@Z ENDP			; CMotion::operator=
_TEXT	ENDS
PUBLIC	??0CMotion@@QAE@ABV0@@Z				; CMotion::CMotion
; Function compile flags: /Ogtpy
;	COMDAT ??0CMotion@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0CMotion@@QAE@ABV0@@Z PROC				; CMotion::CMotion, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	edx, DWORD PTR [ecx]
	xor	edx, DWORD PTR [eax]
	push	esi
	and	edx, 255				; 000000ffH
	xor	edx, DWORD PTR [ecx]
	push	edi
	xor	edi, edi
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], edi
	mov	esi, DWORD PTR [ecx+4]
	cmp	esi, edi
	je	SHORT $LN5@CMotion@2
	add	DWORD PTR [esi], 1
$LN5@CMotion@2:
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, edi
	je	SHORT $LN8@CMotion@2
	add	DWORD PTR [edx], -1
	mov	edx, DWORD PTR [eax+4]
	cmp	DWORD PTR [edx], edi
	jne	SHORT $LN8@CMotion@2
	mov	DWORD PTR [eax+4], edi
$LN8@CMotion@2:
	mov	DWORD PTR [eax+4], esi
	mov	DWORD PTR [eax+8], edi
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, edi
	je	SHORT $LN14@CMotion@2
	add	DWORD PTR [edx], 1
$LN14@CMotion@2:
	mov	esi, DWORD PTR [eax+8]
	cmp	esi, edi
	je	SHORT $LN17@CMotion@2
	add	DWORD PTR [esi], -1
	mov	esi, DWORD PTR [eax+8]
	cmp	DWORD PTR [esi], edi
	jne	SHORT $LN17@CMotion@2
	mov	DWORD PTR [eax+8], edi
$LN17@CMotion@2:
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], edi
	mov	edx, DWORD PTR [ecx+12]
	cmp	edx, edi
	je	SHORT $LN23@CMotion@2
	add	DWORD PTR [edx], 1
$LN23@CMotion@2:
	mov	esi, DWORD PTR [eax+12]
	cmp	esi, edi
	je	SHORT $LN26@CMotion@2
	add	DWORD PTR [esi], -1
	mov	esi, DWORD PTR [eax+12]
	cmp	DWORD PTR [esi], edi
	jne	SHORT $LN26@CMotion@2
	mov	DWORD PTR [eax+12], edi
$LN26@CMotion@2:
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	edx, DWORD PTR [ecx+24]
	add	ecx, 28					; 0000001cH
	mov	DWORD PTR [eax+24], edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+28], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+32], edx
	mov	ecx, DWORD PTR [ecx+8]
	pop	edi
	mov	DWORD PTR [eax+36], ecx
	pop	esi
	ret	4
??0CMotion@@QAE@ABV0@@Z ENDP				; CMotion::CMotion
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_string.c
;	COMDAT ?_M_allocate_block@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IAEXI@Z
_TEXT	SEGMENT
?_M_allocate_block@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IAEXI@Z PROC ; stlp_std::priv::_String_base<char,xalloc<char> >::_M_allocate_block, COMDAT

; 621  :   if ((__n <= (max_size() + 1)) && (__n > 0)) {
; 622  : #if defined (_STLP_USE_SHORT_STRING_OPTIM)
; 623  :     if (__n > _DEFAULT_SIZE) {
; 624  :       this->_M_buffers._M_dynamic_buf = _M_end_of_storage.allocate(__n, __n);
; 625  :       this->_M_finish = this->_M_buffers._M_dynamic_buf;
; 626  :       this->_M_end_of_storage._M_data = this->_M_finish + __n;
; 627  :     }
; 628  : #else
; 629  :     this->_M_start  = _M_end_of_storage.allocate(__n, __n);
; 630  :     this->_M_finish = this->_M_start;
; 631  :     this->_M_end_of_storage._M_data = this->_M_finish + __n;
; 632  : #endif /*_STLP_USE_SHORT_STRING_OPTIM  */
; 633  :   } else {
; 634  :     this->_M_throw_length_error();
; 635  :   }
; 636  : }

	ret	0
?_M_allocate_block@?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IAEXI@Z ENDP ; stlp_std::priv::_String_base<char,xalloc<char> >::_M_allocate_block
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_string_base.h
_TEXT	ENDS
;	COMDAT ??0?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IAE@ABV?$xalloc@D@@I@Z
_TEXT	SEGMENT
??0?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IAE@ABV?$xalloc@D@@I@Z PROC ; stlp_std::priv::_String_base<char,xalloc<char> >::_String_base<char,xalloc<char> >, COMDAT
; _this$ = eax

; 115  :     : _M_finish(_M_buffers._M_static_buf), _M_end_of_storage(__a, _M_buffers._M_static_buf + _DEFAULT_SIZE) {

	lea	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [eax+20], ecx

; 116  : #else
; 117  :     : _M_start(0), _M_finish(0), _M_end_of_storage(__a, (_Tp*)0) {
; 118  : #endif
; 119  :       _M_allocate_block(__n);
; 120  :     }

	ret	0
??0?$_String_base@DV?$xalloc@D@@@priv@stlp_std@@IAE@ABV?$xalloc@D@@I@Z ENDP ; stlp_std::priv::_String_base<char,xalloc<char> >::_String_base<char,xalloc<char> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_string.h
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DV?$char_traits@D@stlp_std@@V?$xalloc@D@@@stlp_std@@QAE@ABV?$xalloc@D@@@Z
_TEXT	SEGMENT
??0?$basic_string@DV?$char_traits@D@stlp_std@@V?$xalloc@D@@@stlp_std@@QAE@ABV?$xalloc@D@@@Z PROC ; stlp_std::basic_string<char,stlp_std::char_traits<char>,xalloc<char> >::basic_string<char,stlp_std::char_traits<char>,xalloc<char> >, COMDAT
; _this$ = eax

; 168  :   { _M_terminate_string(); }

	lea	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [eax+20], ecx
	mov	ecx, DWORD PTR [ecx]
	mov	BYTE PTR [ecx], 0
	ret	0
??0?$basic_string@DV?$char_traits@D@stlp_std@@V?$xalloc@D@@@stlp_std@@QAE@ABV?$xalloc@D@@@Z ENDP ; stlp_std::basic_string<char,stlp_std::char_traits<char>,xalloc<char> >::basic_string<char,stlp_std::char_traits<char>,xalloc<char> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ??1?$_Vector_base@IV?$xalloc@I@@@priv@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_base@IV?$xalloc@I@@@priv@stlp_std@@QAE@XZ PROC ; stlp_std::priv::_Vector_base<unsigned int,xalloc<unsigned int> >::~_Vector_base<unsigned int,xalloc<unsigned int> >, COMDAT
; _this$ = eax

; 85   :     if (_M_start != _STLP_DEFAULT_CONSTRUCTED(pointer))

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN6@Vector_bas@34

; 86   :       _M_end_of_storage.deallocate(_M_start, _M_end_of_storage._M_data - _M_start);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN6@Vector_bas@34:

; 87   :   }

	ret	0
??1?$_Vector_base@IV?$xalloc@I@@@priv@stlp_std@@QAE@XZ ENDP ; stlp_std::priv::_Vector_base<unsigned int,xalloc<unsigned int> >::~_Vector_base<unsigned int,xalloc<unsigned int> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$_Destroy_Range@V?$reverse_iterator@PAI@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAI@0@0@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$_Destroy_Range@V?$reverse_iterator@PAI@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAI@0@0@Z PROC ; stlp_std::_Destroy_Range<stlp_std::reverse_iterator<unsigned int *> >, COMDAT

; 181  :   __destroy_range(__first, __last, _STLP_VALUE_TYPE(__first, _ForwardIterator));
; 182  : }

	ret	0
??$_Destroy_Range@V?$reverse_iterator@PAI@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAI@0@0@Z ENDP ; stlp_std::_Destroy_Range<stlp_std::reverse_iterator<unsigned int *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Param_Construct@VCMotion@@V1@@stlp_std@@YAXPAVCMotion@@ABV1@@Z
_TEXT	SEGMENT
??$_Param_Construct@VCMotion@@V1@@stlp_std@@YAXPAVCMotion@@ABV1@@Z PROC ; stlp_std::_Param_Construct<CMotion,CMotion>, COMDAT
; ___p$ = ecx
; ___val$ = eax

; 118  : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 119  :   memset((char*)__p, _STLP_SHRED_BYTE, sizeof(_T1));
; 120  : #endif
; 121  :   _STLP_PLACEMENT_NEW (__p) _T1(__val);

	test	ecx, ecx
	je	SHORT $LN3@Param_Cons@13
	push	eax
	call	??0CMotion@@QAE@ABV0@@Z
$LN3@Param_Cons@13:

; 122  : }

	ret	0
??$_Param_Construct@VCMotion@@V1@@stlp_std@@YAXPAVCMotion@@ABV1@@Z ENDP ; stlp_std::_Param_Construct<CMotion,CMotion>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__destroy_range_aux@V?$reverse_iterator@PAVCMotion@@@stlp_std@@VCMotion@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0PAVCMotion@@ABU__false_type@0@@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$__destroy_range_aux@V?$reverse_iterator@PAVCMotion@@@stlp_std@@VCMotion@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0PAVCMotion@@ABU__false_type@0@@Z PROC ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotion *>,CMotion>, COMDAT

; 151  : __destroy_range_aux(_ForwardIterator __first, _ForwardIterator __last, _Tp*, const __false_type& /*_Trivial_destructor*/) {

	push	esi

; 152  :   for ( ; __first != __last; ++__first) {

	mov	esi, DWORD PTR ___first$[esp]
	push	edi
	mov	edi, DWORD PTR ___last$[esp+4]
	cmp	esi, edi
	je	SHORT $LN1@destroy_ra@5
	lea	eax, DWORD PTR [esi-32]
	xor	edx, edx
$LL6@destroy_ra@5:

; 153  :     __destroy_aux(&(*__first), __false_type());

	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, edx
	je	SHORT $LN27@destroy_ra@5
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx], edx
	jne	SHORT $LN27@destroy_ra@5
	mov	DWORD PTR [eax+4], edx
$LN27@destroy_ra@5:
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, edx
	je	SHORT $LN33@destroy_ra@5
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], edx
	jne	SHORT $LN33@destroy_ra@5
	mov	DWORD PTR [eax], edx
$LN33@destroy_ra@5:
	mov	ecx, DWORD PTR [eax-4]
	cmp	ecx, edx
	je	SHORT $LN39@destroy_ra@5
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax-4]
	cmp	DWORD PTR [ecx], edx
	jne	SHORT $LN39@destroy_ra@5
	mov	DWORD PTR [eax-4], edx
$LN39@destroy_ra@5:
	sub	esi, 40					; 00000028H
	sub	eax, 40					; 00000028H
	cmp	esi, edi
	jne	SHORT $LL6@destroy_ra@5
$LN1@destroy_ra@5:
	pop	edi
	pop	esi

; 154  : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 155  :     memset((char*)&(*__first), _STLP_SHRED_BYTE, sizeof(_Tp));
; 156  : #endif
; 157  :   }
; 158  : }

	ret	0
??$__destroy_range_aux@V?$reverse_iterator@PAVCMotion@@@stlp_std@@VCMotion@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0PAVCMotion@@ABU__false_type@0@@Z ENDP ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotion *>,CMotion>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_uninitialized.h
_TEXT	ENDS
;	COMDAT ??$__ucopy_aux@PBIPAI@priv@stlp_std@@YAPAIPBI0PAIABU__true_type@1@@Z
_TEXT	SEGMENT
??$__ucopy_aux@PBIPAI@priv@stlp_std@@YAPAIPBI0PAIABU__true_type@1@@Z PROC ; stlp_std::priv::__ucopy_aux<unsigned int const *,unsigned int *>, COMDAT
; ___first$ = ecx
; ___last$ = edx
; ___result$ = eax

; 125  :                                const __true_type& /*BothPtrType*/) {

	push	esi
	mov	esi, edx

; 126  :   return __ucopy_ptrs(__first, __last, __result,
; 127  :                       _UseTrivialUCopy(_STLP_VALUE_TYPE(__first, _InputIter),
; 128  :                                        _STLP_VALUE_TYPE(__result, _OutputIter))._Answer());

	cmp	esi, ecx
	je	SHORT $LN12@ucopy_aux@3
	sub	esi, ecx
	push	esi
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN12@ucopy_aux@3:
	pop	esi

; 129  : }

	ret	0
??$__ucopy_aux@PBIPAI@priv@stlp_std@@YAPAIPBI0PAIABU__true_type@1@@Z ENDP ; stlp_std::priv::__ucopy_aux<unsigned int const *,unsigned int *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__copy_backward@PAVCMotion@@PAV1@H@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
??$__copy_backward@PAVCMotion@@PAV1@H@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z PROC ; stlp_std::priv::__copy_backward<CMotion *,CMotion *,int>, COMDAT
; ___last$ = ecx
; ___result$ = eax

; 235  :                                           _Distance*) {

	push	ebx
	push	esi
	push	edi
	mov	ebx, eax
	mov	edi, ecx

; 236  :   for (_Distance __n = __last - __first; __n > 0; --__n)

	sub	ecx, DWORD PTR ___first$[esp+8]
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 4
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
	test	esi, esi
	jle	SHORT $LN8@copy_backw@32
$LL3@copy_backw@32:

; 237  :     *--__result = *--__last;

	sub	edi, 40					; 00000028H
	sub	ebx, 40					; 00000028H
	push	edi
	mov	ecx, ebx
	call	??4CMotion@@QAEAAV0@ABV0@@Z
	sub	esi, 1
	test	esi, esi
	jg	SHORT $LL3@copy_backw@32
$LN8@copy_backw@32:
	pop	edi
	pop	esi

; 238  :   return __result;

	mov	eax, ebx
	pop	ebx

; 239  : }

	ret	0
??$__copy_backward@PAVCMotion@@PAV1@H@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ENDP ; stlp_std::priv::__copy_backward<CMotion *,CMotion *,int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_uninitialized.h
_TEXT	ENDS
;	COMDAT ??$__ucopy@PAVCMotion@@PAV1@H@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z
_TEXT	SEGMENT
??$__ucopy@PAVCMotion@@PAV1@H@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z PROC ; stlp_std::priv::__ucopy<CMotion *,CMotion *,int>, COMDAT
; ___first$ = ecx
; ___last$ = eax
; ___result$ = edx

; 83   :                            _OutputIter __result, const random_access_iterator_tag &, _Distance*) {

	push	ebx
	mov	ebx, ecx

; 84   :   _OutputIter __cur = __result;
; 85   :   _STLP_TRY {
; 86   :     for (_Distance __n = __last - __first; __n > 0; --__n) {

	sub	eax, ebx
	push	esi
	mov	ecx, eax
	push	edi
	mov	edi, edx
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 4
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
	test	esi, esi
	jle	SHORT $LN14@ucopy@4
$LL3@ucopy@4:

; 87   :       _Param_Construct(&*__cur, *__first);

	test	edi, edi
	je	SHORT $LN8@ucopy@4
	push	ebx
	mov	ecx, edi
	call	??0CMotion@@QAE@ABV0@@Z
$LN8@ucopy@4:
	sub	esi, 1

; 88   :       ++__first;

	add	ebx, 40					; 00000028H

; 89   :       ++__cur;

	add	edi, 40					; 00000028H
	test	esi, esi
	jg	SHORT $LL3@ucopy@4
$LN14@ucopy@4:

; 90   :     }
; 91   :     return __cur;

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx

; 92   :   }
; 93   :   _STLP_UNWIND(_STLP_STD::_Destroy_Range(__result, __cur))
; 94   :   _STLP_RET_AFTER_THROW(__cur)
; 95   : }

	ret	0
??$__ucopy@PAVCMotion@@PAV1@H@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ENDP ; stlp_std::priv::__ucopy<CMotion *,CMotion *,int>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__ufill@PAVCMotion@@V1@H@priv@stlp_std@@YAXPAVCMotion@@0ABV2@ABUrandom_access_iterator_tag@1@PAH@Z
_TEXT	SEGMENT
??$__ufill@PAVCMotion@@V1@H@priv@stlp_std@@YAXPAVCMotion@@0ABV2@ABUrandom_access_iterator_tag@1@PAH@Z PROC ; stlp_std::priv::__ufill<CMotion *,CMotion,int>, COMDAT
; ___first$ = ecx
; ___last$ = eax
; ___x$ = ebx

; 246  :                     const _Tp& __x, const random_access_iterator_tag &, _Distance*) {

	push	esi
	push	edi
	mov	edi, ecx

; 247  :   _ForwardIter __cur = __first;
; 248  :   _STLP_TRY {
; 249  :     for (_Distance __n = __last - __first; __n > 0; --__n, ++__cur)

	sub	eax, edi
	mov	ecx, eax
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 4
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
	test	esi, esi
	jle	SHORT $LN1@ufill@9
	npad	3
$LL3@ufill@9:

; 250  :       _Param_Construct(&*__cur, __x);

	test	edi, edi
	je	SHORT $LN2@ufill@9
	push	ebx
	mov	ecx, edi
	call	??0CMotion@@QAE@ABV0@@Z
$LN2@ufill@9:
	sub	esi, 1
	add	edi, 40					; 00000028H
	test	esi, esi
	jg	SHORT $LL3@ufill@9
$LN1@ufill@9:
	pop	edi
	pop	esi

; 251  :   }
; 252  :   _STLP_UNWIND(_STLP_STD::_Destroy_Range(__first, __cur))
; 253  : }

	ret	0
??$__ufill@PAVCMotion@@V1@H@priv@stlp_std@@YAXPAVCMotion@@0ABV2@ABUrandom_access_iterator_tag@1@PAH@Z ENDP ; stlp_std::priv::__ufill<CMotion *,CMotion,int>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__ucopy_aux@PBU?$pair@MM@stlp_std@@PAU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PBU21@0PAU21@ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__ucopy_aux@PBU?$pair@MM@stlp_std@@PAU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PBU21@0PAU21@ABU__true_type@1@@Z PROC ; stlp_std::priv::__ucopy_aux<stlp_std::pair<float,float> const *,stlp_std::pair<float,float> *>, COMDAT
; ___first$ = ecx
; ___last$ = edx
; ___result$ = eax

; 125  :                                const __true_type& /*BothPtrType*/) {

	push	esi
	mov	esi, edx

; 126  :   return __ucopy_ptrs(__first, __last, __result,
; 127  :                       _UseTrivialUCopy(_STLP_VALUE_TYPE(__first, _InputIter),
; 128  :                                        _STLP_VALUE_TYPE(__result, _OutputIter))._Answer());

	cmp	esi, ecx
	je	SHORT $LN12@ucopy_aux@4
	sub	esi, ecx
	push	esi
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN12@ucopy_aux@4:
	pop	esi

; 129  : }

	ret	0
??$__ucopy_aux@PBU?$pair@MM@stlp_std@@PAU12@@priv@stlp_std@@YAPAU?$pair@MM@1@PBU21@0PAU21@ABU__true_type@1@@Z ENDP ; stlp_std::priv::__ucopy_aux<stlp_std::pair<float,float> const *,stlp_std::pair<float,float> *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_pair.h
_TEXT	ENDS
;	COMDAT ??0?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@_N@stlp_std@@QAE@ABU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@1@AB_N@Z
_TEXT	SEGMENT
___b$ = 8						; size = 4
??0?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@_N@stlp_std@@QAE@ABU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@1@AB_N@Z PROC ; stlp_std::pair<stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >,bool>::pair<stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >,bool>, COMDAT
; _this$ = eax
; ___a$ = ecx

; 56   :   pair(const _T1& __a, const _T2& __b) : first(__a), second(__b) {}

	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ___b$[esp-4]
	mov	DWORD PTR [eax], edx
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax+4], dl
	ret	4
??0?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@_N@stlp_std@@QAE@ABU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@1@AB_N@Z ENDP ; stlp_std::pair<stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >,bool>::pair<stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >,bool>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_uninitialized.h
_TEXT	ENDS
;	COMDAT ??$__ucopy@PBVCMotion@@PAV1@H@priv@stlp_std@@YAPAVCMotion@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z
_TEXT	SEGMENT
??$__ucopy@PBVCMotion@@PAV1@H@priv@stlp_std@@YAPAVCMotion@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z PROC ; stlp_std::priv::__ucopy<CMotion const *,CMotion *,int>, COMDAT
; ___first$ = ecx
; ___last$ = eax
; ___result$ = edx

; 83   :                            _OutputIter __result, const random_access_iterator_tag &, _Distance*) {

	push	ebx
	mov	ebx, ecx

; 84   :   _OutputIter __cur = __result;
; 85   :   _STLP_TRY {
; 86   :     for (_Distance __n = __last - __first; __n > 0; --__n) {

	sub	eax, ebx
	push	esi
	mov	ecx, eax
	push	edi
	mov	edi, edx
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 4
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
	test	esi, esi
	jle	SHORT $LN14@ucopy@5
$LL3@ucopy@5:

; 87   :       _Param_Construct(&*__cur, *__first);

	test	edi, edi
	je	SHORT $LN8@ucopy@5
	push	ebx
	mov	ecx, edi
	call	??0CMotion@@QAE@ABV0@@Z
$LN8@ucopy@5:
	sub	esi, 1

; 88   :       ++__first;

	add	ebx, 40					; 00000028H

; 89   :       ++__cur;

	add	edi, 40					; 00000028H
	test	esi, esi
	jg	SHORT $LL3@ucopy@5
$LN14@ucopy@5:

; 90   :     }
; 91   :     return __cur;

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx

; 92   :   }
; 93   :   _STLP_UNWIND(_STLP_STD::_Destroy_Range(__result, __cur))
; 94   :   _STLP_RET_AFTER_THROW(__cur)
; 95   : }

	ret	0
??$__ucopy@PBVCMotion@@PAV1@H@priv@stlp_std@@YAPAVCMotion@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ENDP ; stlp_std::priv::__ucopy<CMotion const *,CMotion *,int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$__destroy_range@V?$reverse_iterator@PAVCMotion@@@stlp_std@@VCMotion@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0PAVCMotion@@@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$__destroy_range@V?$reverse_iterator@PAVCMotion@@@stlp_std@@VCMotion@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0PAVCMotion@@@Z PROC ; stlp_std::__destroy_range<stlp_std::reverse_iterator<CMotion *>,CMotion>, COMDAT

; 175  :   typedef typename __type_traits<_Tp>::has_trivial_destructor _Trivial_destructor;
; 176  :   __destroy_range_aux(__first, __last, __ptr, _Trivial_destructor());

	mov	edx, DWORD PTR ___first$[esp-4]
	push	ecx
	mov	ecx, DWORD PTR ___last$[esp]
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], edx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVCMotion@@@stlp_std@@VCMotion@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0PAVCMotion@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotion *>,CMotion>
	add	esp, 8

; 177  : }

	ret	0
??$__destroy_range@V?$reverse_iterator@PAVCMotion@@@stlp_std@@VCMotion@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0PAVCMotion@@@Z ENDP ; stlp_std::__destroy_range<stlp_std::reverse_iterator<CMotion *>,CMotion>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_uninitialized.h
_TEXT	ENDS
;	COMDAT ??$uninitialized_copy@PBIPAI@stlp_std@@YAPAIPBI0PAI@Z
_TEXT	SEGMENT
??$uninitialized_copy@PBIPAI@stlp_std@@YAPAIPBI0PAI@Z PROC ; stlp_std::uninitialized_copy<unsigned int const *,unsigned int *>, COMDAT
; ___first$ = ecx
; ___last$ = edx
; ___result$ = eax

; 144  : { return _STLP_PRIV __ucopy_aux(__first, __last, __result, _BothPtrType< _InputIter, _ForwardIter>::_Answer()); }

	push	esi
	mov	esi, edx
	cmp	esi, ecx
	je	SHORT $LN16@uninitiali@9
	sub	esi, ecx
	push	esi
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN16@uninitiali@9:
	pop	esi
	ret	0
??$uninitialized_copy@PBIPAI@stlp_std@@YAPAIPBI0PAI@Z ENDP ; stlp_std::uninitialized_copy<unsigned int const *,unsigned int *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$fill@PAVCMotion@@V1@@stlp_std@@YAXPAVCMotion@@0ABV1@@Z
_TEXT	SEGMENT
??$fill@PAVCMotion@@V1@@stlp_std@@YAXPAVCMotion@@0ABV1@@Z PROC ; stlp_std::fill<CMotion *,CMotion>, COMDAT
; ___first$ = eax
; ___last$ = edi
; ___val$ = ebx

; 392  : void fill(_ForwardIter __first, _ForwardIter __last, const _Tp& __val) {

	push	esi
	mov	esi, eax

; 393  :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__first, __last))
; 394  :   for ( ; __first != __last; ++__first)

	cmp	esi, edi
	je	SHORT $LN1@fill@9
$LL3@fill@9:

; 395  :     *__first = __val;

	push	ebx
	mov	ecx, esi
	call	??4CMotion@@QAEAAV0@ABV0@@Z
	add	esi, 40					; 00000028H
	cmp	esi, edi
	jne	SHORT $LL3@fill@9
$LN1@fill@9:
	pop	esi

; 396  : }

	ret	0
??$fill@PAVCMotion@@V1@@stlp_std@@YAXPAVCMotion@@0ABV1@@Z ENDP ; stlp_std::fill<CMotion *,CMotion>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__copy_backward_ptrs@PAVCMotion@@PAV1@@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABU__false_type@1@@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
??$__copy_backward_ptrs@PAVCMotion@@PAV1@@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABU__false_type@1@@Z PROC ; stlp_std::priv::__copy_backward_ptrs<CMotion *,CMotion *>, COMDAT
; ___last$ = ecx
; ___result$ = eax

; 288  :                                         _OutputIter __result, const __false_type& /*TrivialAssignment*/) {

	push	ebx
	push	esi
	push	edi
	mov	edi, eax
	mov	ebx, ecx

; 289  :   return __copy_backward(__first, __last, __result, _STLP_ITERATOR_CATEGORY(__first, _InputIter), _STLP_DISTANCE_TYPE(__first, _InputIter));

	sub	ecx, DWORD PTR ___first$[esp+8]
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 4
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
	test	esi, esi
	jle	SHORT $LN10@copy_backw@33
	sub	ebx, edi
$LL5@copy_backw@33:
	sub	edi, 40					; 00000028H
	lea	eax, DWORD PTR [ebx+edi]
	push	eax
	mov	ecx, edi
	call	??4CMotion@@QAEAAV0@ABV0@@Z
	sub	esi, 1
	test	esi, esi
	jg	SHORT $LL5@copy_backw@33
$LN10@copy_backw@33:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx

; 290  : }

	ret	0
??$__copy_backward_ptrs@PAVCMotion@@PAV1@@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABU__false_type@1@@Z ENDP ; stlp_std::priv::__copy_backward_ptrs<CMotion *,CMotion *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_uninitialized.h
_TEXT	ENDS
;	COMDAT ??$__ucopy_ptrs@PAVCMotion@@PAV1@@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABU__false_type@1@@Z
_TEXT	SEGMENT
??$__ucopy_ptrs@PAVCMotion@@PAV1@@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABU__false_type@1@@Z PROC ; stlp_std::priv::__ucopy_ptrs<CMotion *,CMotion *>, COMDAT
; ___first$ = ecx
; ___last$ = eax
; ___result$ = edx

; 113  : { return __ucopy(__first, __last, __result, random_access_iterator_tag(), (ptrdiff_t*)0); }

	jmp	??$__ucopy@PAVCMotion@@PAV1@H@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<CMotion *,CMotion *,int>
??$__ucopy_ptrs@PAVCMotion@@PAV1@@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABU__false_type@1@@Z ENDP ; stlp_std::priv::__ucopy_ptrs<CMotion *,CMotion *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__uninitialized_fill_n@PAVCMotion@@IV1@@priv@stlp_std@@YAPAVCMotion@@PAV2@IABV2@@Z
_TEXT	SEGMENT
___x$ = 8						; size = 4
??$__uninitialized_fill_n@PAVCMotion@@IV1@@priv@stlp_std@@YAPAVCMotion@@PAV2@IABV2@@Z PROC ; stlp_std::priv::__uninitialized_fill_n<CMotion *,unsigned int,CMotion>, COMDAT
; ___first$ = eax
; ___n$ = ecx

; 313  : inline _ForwardIter __uninitialized_fill_n(_ForwardIter __first, _Size __n, const _Tp& __x) {

	push	ebx

; 314  :   _ForwardIter __last = __first + __n;

	lea	ecx, DWORD PTR [ecx+ecx*4]
	push	ebp
	mov	ebp, DWORD PTR ___x$[esp+4]
	lea	ebx, DWORD PTR [eax+ecx*8]
	push	esi

; 315  :   __ufill(__first, __last, __x, random_access_iterator_tag(), (ptrdiff_t*)0);

	mov	ecx, ebx
	sub	ecx, eax
	push	edi
	mov	edi, eax
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 4
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
	test	esi, esi
	jle	SHORT $LN16@uninitiali@10
	npad	7
$LL5@uninitiali@10:
	test	edi, edi
	je	SHORT $LN4@uninitiali@10
	push	ebp
	mov	ecx, edi
	call	??0CMotion@@QAE@ABV0@@Z
$LN4@uninitiali@10:
	sub	esi, 1
	add	edi, 40					; 00000028H
	test	esi, esi
	jg	SHORT $LL5@uninitiali@10
$LN16@uninitiali@10:
	pop	edi
	pop	esi
	pop	ebp

; 316  :   return __last;

	mov	eax, ebx
	pop	ebx

; 317  : }

	ret	0
??$__uninitialized_fill_n@PAVCMotion@@IV1@@priv@stlp_std@@YAPAVCMotion@@PAV2@IABV2@@Z ENDP ; stlp_std::priv::__uninitialized_fill_n<CMotion *,unsigned int,CMotion>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$_Copy_Construct@VCMotion@@@stlp_std@@YAXPAVCMotion@@ABV1@@Z
_TEXT	SEGMENT
??$_Copy_Construct@VCMotion@@@stlp_std@@YAXPAVCMotion@@ABV1@@Z PROC ; stlp_std::_Copy_Construct<CMotion>, COMDAT
; ___p$ = ecx
; ___val$ = eax

; 110  : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 111  :   memset((char*)__p, _STLP_SHRED_BYTE, sizeof(_Tp));
; 112  : #endif
; 113  :   _STLP_PLACEMENT_NEW (__p) _Tp(__val);

	test	ecx, ecx
	je	SHORT $LN3@Copy_Const@21
	push	eax
	call	??0CMotion@@QAE@ABV0@@Z
$LN3@Copy_Const@21:

; 114  : }

	ret	0
??$_Copy_Construct@VCMotion@@@stlp_std@@YAXPAVCMotion@@ABV1@@Z ENDP ; stlp_std::_Copy_Construct<CMotion>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_uninitialized.h
_TEXT	ENDS
;	COMDAT ??$__uninitialized_move@PAVCMotion@@PAV1@U__false_type@stlp_std@@@priv@stlp_std@@YAPAVCMotion@@PAV2@00U__false_type@1@ABU31@@Z
_TEXT	SEGMENT
___trivial_ucpy$ = 8					; size = 1
??$__uninitialized_move@PAVCMotion@@PAV1@U__false_type@stlp_std@@@priv@stlp_std@@YAPAVCMotion@@PAV2@00U__false_type@1@ABU31@@Z PROC ; stlp_std::priv::__uninitialized_move<CMotion *,CMotion *,stlp_std::__false_type>, COMDAT
; ___first$ = ecx
; ___last$ = eax
; ___result$ = edx

; 414  : { return __ucopy_ptrs(__first, __last, __result, __trivial_ucpy); }

	jmp	??$__ucopy@PAVCMotion@@PAV1@H@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<CMotion *,CMotion *,int>
??$__uninitialized_move@PAVCMotion@@PAV1@U__false_type@stlp_std@@@priv@stlp_std@@YAPAVCMotion@@PAV2@00U__false_type@1@ABU31@@Z ENDP ; stlp_std::priv::__uninitialized_move<CMotion *,CMotion *,stlp_std::__false_type>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$uninitialized_copy@PBU?$pair@MM@stlp_std@@PAU12@@stlp_std@@YAPAU?$pair@MM@0@PBU10@0PAU10@@Z
_TEXT	SEGMENT
??$uninitialized_copy@PBU?$pair@MM@stlp_std@@PAU12@@stlp_std@@YAPAU?$pair@MM@0@PBU10@0PAU10@@Z PROC ; stlp_std::uninitialized_copy<stlp_std::pair<float,float> const *,stlp_std::pair<float,float> *>, COMDAT
; ___first$ = ecx
; ___last$ = edx
; ___result$ = eax

; 144  : { return _STLP_PRIV __ucopy_aux(__first, __last, __result, _BothPtrType< _InputIter, _ForwardIter>::_Answer()); }

	push	esi
	mov	esi, edx
	cmp	esi, ecx
	je	SHORT $LN16@uninitiali@11
	sub	esi, ecx
	push	esi
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN16@uninitiali@11:
	pop	esi
	ret	0
??$uninitialized_copy@PBU?$pair@MM@stlp_std@@PAU12@@stlp_std@@YAPAU?$pair@MM@0@PBU10@0PAU10@@Z ENDP ; stlp_std::uninitialized_copy<stlp_std::pair<float,float> const *,stlp_std::pair<float,float> *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__ucopy_ptrs@PBVCMotion@@PAV1@@priv@stlp_std@@YAPAVCMotion@@PBV2@0PAV2@ABU__false_type@1@@Z
_TEXT	SEGMENT
??$__ucopy_ptrs@PBVCMotion@@PAV1@@priv@stlp_std@@YAPAVCMotion@@PBV2@0PAV2@ABU__false_type@1@@Z PROC ; stlp_std::priv::__ucopy_ptrs<CMotion const *,CMotion *>, COMDAT
; ___first$ = ecx
; ___last$ = eax
; ___result$ = edx

; 113  : { return __ucopy(__first, __last, __result, random_access_iterator_tag(), (ptrdiff_t*)0); }

	jmp	??$__ucopy@PBVCMotion@@PAV1@H@priv@stlp_std@@YAPAVCMotion@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<CMotion const *,CMotion *,int>
??$__ucopy_ptrs@PBVCMotion@@PAV1@@priv@stlp_std@@YAPAVCMotion@@PBV2@0PAV2@ABU__false_type@1@@Z ENDP ; stlp_std::priv::__ucopy_ptrs<CMotion const *,CMotion *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$_Destroy_Range@V?$reverse_iterator@PAVCMotion@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$_Destroy_Range@V?$reverse_iterator@PAVCMotion@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0@Z PROC ; stlp_std::_Destroy_Range<stlp_std::reverse_iterator<CMotion *> >, COMDAT

; 181  :   __destroy_range(__first, __last, _STLP_VALUE_TYPE(__first, _ForwardIterator));

	mov	edx, DWORD PTR ___first$[esp-4]
	push	ecx
	mov	ecx, DWORD PTR ___last$[esp]
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], edx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVCMotion@@@stlp_std@@VCMotion@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0PAVCMotion@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotion *>,CMotion>
	add	esp, 8

; 182  : }

	ret	0
??$_Destroy_Range@V?$reverse_iterator@PAVCMotion@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0@Z ENDP ; stlp_std::_Destroy_Range<stlp_std::reverse_iterator<CMotion *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__copy@PAVCMotion@@PAV1@H@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z
_TEXT	SEGMENT
??$__copy@PAVCMotion@@PAV1@H@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z PROC ; stlp_std::priv::__copy<CMotion *,CMotion *,int>, COMDAT
; ___first$ = edx
; ___last$ = eax
; ___result$ = ecx

; 200  :        _OutputIter __result, const random_access_iterator_tag &, _Distance*) {

	push	ebx
	push	esi
	push	edi
	mov	edi, edx

; 201  :   for (_Distance __n = __last - __first; __n > 0; --__n) {

	sub	eax, edi
	mov	ebx, ecx
	mov	ecx, eax
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 4
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
	test	esi, esi
	jle	SHORT $LN8@copy@10
$LL3@copy@10:

; 202  :     *__result = *__first;

	push	edi
	mov	ecx, ebx
	call	??4CMotion@@QAEAAV0@ABV0@@Z
	sub	esi, 1

; 203  :     ++__first;

	add	edi, 40					; 00000028H

; 204  :     ++__result;

	add	ebx, 40					; 00000028H
	test	esi, esi
	jg	SHORT $LL3@copy@10
$LN8@copy@10:
	pop	edi
	pop	esi

; 205  :   }
; 206  :   return __result;

	mov	eax, ebx
	pop	ebx

; 207  : }

	ret	0
??$__copy@PAVCMotion@@PAV1@H@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ENDP ; stlp_std::priv::__copy<CMotion *,CMotion *,int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ??$_M_allocate_and_copy@PBI@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEPAIAAIPBI1@Z
_TEXT	SEGMENT
??$_M_allocate_and_copy@PBI@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEPAIAAIPBI1@Z PROC ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_allocate_and_copy<unsigned int const *>, COMDAT
; ___n$ = eax
; ___first$ = ebx
; ___last$ = ecx

; 634  :                                _ForwardIterator __first, _ForwardIterator __last)
; 635  : #else /* _STLP_MEMBER_TEMPLATES */
; 636  :   pointer _M_allocate_and_copy(size_type& __n,
; 637  :                                const_pointer __first, const_pointer __last)
; 638  : #endif /* _STLP_MEMBER_TEMPLATES */
; 639  :   {
; 640  :     pointer __result = this->_M_end_of_storage.allocate(__n, __n);

	mov	eax, DWORD PTR [eax]
	push	esi
	mov	esi, ecx
	lea	ecx, DWORD PTR [eax*4]
	push	edi
	push	ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 641  :     _STLP_TRY {
; 642  :       uninitialized_copy(__first, __last, __result);

	cmp	esi, ebx
	mov	edi, eax
	je	SHORT $LN28@M_allocate@3
	sub	esi, ebx
	push	esi
	push	ebx
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH

; 643  :       return __result;

	mov	eax, edi
$LN28@M_allocate@3:
	pop	edi
	pop	esi

; 644  :     }
; 645  :     _STLP_UNWIND(this->_M_end_of_storage.deallocate(__result, __n))
; 646  :     _STLP_RET_AFTER_THROW(__result)
; 647  :   }

	ret	0
??$_M_allocate_and_copy@PBI@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEPAIAAIPBI1@Z ENDP ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_allocate_and_copy<unsigned int const *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.c
_TEXT	ENDS
;	COMDAT ?_M_fill_insert_aux@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXPAVCMotion@@IABV4@ABU__false_type@3@@Z
_TEXT	SEGMENT
___x_copy$133253 = -44					; size = 40
tv295 = 8						; size = 4
___pos$ = 8						; size = 4
___n$ = 12						; size = 4
$T279634 = 16						; size = 1
___x$ = 16						; size = 4
___formal$ = 20						; size = 4
?_M_fill_insert_aux@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXPAVCMotion@@IABV4@ABU__false_type@3@@Z PROC ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_fill_insert_aux, COMDAT
; _this$ = ecx

; 143  :                                               const _Tp& __x, const __false_type& /*_Movable*/) {

	sub	esp, 44					; 0000002cH
	push	ebx
	push	ebp
	mov	ebp, ecx

; 144  :   //Here self referencing needs to be checked even for non movable types.
; 145  :   if (_M_is_inside(__x)) {

	mov	ecx, DWORD PTR ___x$[esp+48]
	cmp	ecx, DWORD PTR [ebp]
	push	esi
	push	edi
	jb	SHORT $LN3@M_fill_ins@9
	cmp	ecx, DWORD PTR [ebp+4]
	jae	SHORT $LN3@M_fill_ins@9

; 146  :     _Tp __x_copy = __x;

	push	ecx
	lea	ecx, DWORD PTR ___x_copy$133253[esp+64]
	call	??0CMotion@@QAE@ABV0@@Z

; 147  :     _M_fill_insert_aux(__pos, __n, __x_copy, __false_type());

	mov	edx, DWORD PTR ___n$[esp+56]
	lea	eax, DWORD PTR $T279634[esp+56]
	push	eax
	mov	eax, DWORD PTR ___pos$[esp+60]
	lea	ecx, DWORD PTR ___x_copy$133253[esp+64]
	push	ecx
	push	edx
	xor	ebx, ebx
	push	eax
	mov	ecx, ebp
	mov	BYTE PTR $T279634[esp+72], bl
	call	?_M_fill_insert_aux@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXPAVCMotion@@IABV4@ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_fill_insert_aux

; 148  :     return;

	mov	eax, DWORD PTR ___x_copy$133253[esp+72]
	cmp	eax, ebx
	je	SHORT $LN14@M_fill_ins@9
	add	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR ___x_copy$133253[esp+72]
	cmp	DWORD PTR [ecx], ebx
	jne	SHORT $LN14@M_fill_ins@9
	mov	DWORD PTR ___x_copy$133253[esp+72], ebx
$LN14@M_fill_ins@9:
	mov	eax, DWORD PTR ___x_copy$133253[esp+68]
	cmp	eax, ebx
	je	SHORT $LN20@M_fill_ins@9
	add	DWORD PTR [eax], -1
	mov	edx, DWORD PTR ___x_copy$133253[esp+68]
	cmp	DWORD PTR [edx], ebx
	jne	SHORT $LN20@M_fill_ins@9
	mov	DWORD PTR ___x_copy$133253[esp+68], ebx
$LN20@M_fill_ins@9:
	mov	eax, DWORD PTR ___x_copy$133253[esp+64]
	cmp	eax, ebx
	je	$LN39@M_fill_ins@9
	add	DWORD PTR [eax], -1

; 162  :   }
; 163  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 44					; 0000002cH
	ret	16					; 00000010H
$LN3@M_fill_ins@9:

; 149  :   }
; 150  :   const size_type __elems_after = this->_M_finish - __pos;

	mov	esi, DWORD PTR [ebp+4]
	mov	edi, DWORD PTR ___pos$[esp+56]
	mov	edx, esi
	sub	edx, edi
	mov	eax, 1717986919				; 66666667H
	imul	edx

; 151  :   pointer __old_finish = this->_M_finish;
; 152  :   if (__elems_after > __n) {

	mov	eax, DWORD PTR ___n$[esp+56]
	sar	edx, 4
	mov	ebx, edx
	shr	ebx, 31					; 0000001fH
	add	ebx, edx
	cmp	ebx, eax
	jbe	SHORT $LN2@M_fill_ins@9

; 153  :     _STLP_PRIV __ucopy_ptrs(this->_M_finish - __n, this->_M_finish, this->_M_finish, _TrivialUCopy());

	lea	ebx, DWORD PTR [eax+eax*4]
	add	ebx, ebx
	add	ebx, ebx
	add	ebx, ebx
	mov	ecx, esi
	sub	ecx, ebx
	mov	edx, esi
	mov	eax, esi
	mov	DWORD PTR tv295[esp+56], ecx
	call	??$__ucopy@PAVCMotion@@PAV1@H@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<CMotion *,CMotion *,int>

; 154  :     this->_M_finish += __n;
; 155  :     _STLP_PRIV __copy_backward_ptrs(__pos, __old_finish - __n, __old_finish, _TrivialCopy());

	mov	ecx, DWORD PTR tv295[esp+56]
	add	DWORD PTR [ebp+4], ebx
	push	edi
	mov	eax, esi
	call	??$__copy_backward_ptrs@PAVCMotion@@PAV1@@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABU__false_type@1@@Z ; stlp_std::priv::__copy_backward_ptrs<CMotion *,CMotion *>

; 156  :     _STLP_STD::fill(__pos, __pos + __n, __x);

	add	ebx, edi
	add	esp, 4
	cmp	edi, ebx
	je	SHORT $LN39@M_fill_ins@9
	npad	1
$LL34@M_fill_ins@9:
	mov	eax, DWORD PTR ___x$[esp+56]
	push	eax
	mov	ecx, edi
	call	??4CMotion@@QAEAAV0@ABV0@@Z
	add	edi, 40					; 00000028H
	cmp	edi, ebx
	jne	SHORT $LL34@M_fill_ins@9

; 162  :   }
; 163  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 44					; 0000002cH
	ret	16					; 00000010H
$LN2@M_fill_ins@9:

; 157  :   } else {
; 158  :     this->_M_finish = _STLP_PRIV __uninitialized_fill_n(this->_M_finish, __n - __elems_after, __x);

	push	ecx
	mov	ecx, eax
	sub	ecx, ebx
	mov	eax, esi
	call	??$__uninitialized_fill_n@PAVCMotion@@IV1@@priv@stlp_std@@YAPAVCMotion@@PAV2@IABV2@@Z ; stlp_std::priv::__uninitialized_fill_n<CMotion *,unsigned int,CMotion>
	mov	DWORD PTR [ebp+4], eax

; 159  :     _STLP_PRIV __ucopy_ptrs(__pos, __old_finish, this->_M_finish, _TrivialUCopy());

	mov	edx, eax
	add	esp, 4
	mov	eax, esi
	mov	ecx, edi
	call	??$__ucopy@PAVCMotion@@PAV1@H@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<CMotion *,CMotion *,int>

; 160  :     this->_M_finish += __elems_after;

	lea	ecx, DWORD PTR [ebx+ebx*4]
	add	ecx, ecx
	add	ecx, ecx
	add	ecx, ecx
	add	DWORD PTR [ebp+4], ecx

; 161  :     _STLP_STD::fill(__pos, __old_finish, __x);

	cmp	edi, esi
	je	SHORT $LN39@M_fill_ins@9
	npad	6
$LL41@M_fill_ins@9:
	mov	edx, DWORD PTR ___x$[esp+56]
	push	edx
	mov	ecx, edi
	call	??4CMotion@@QAEAAV0@ABV0@@Z
	add	edi, 40					; 00000028H
	cmp	edi, esi
	jne	SHORT $LL41@M_fill_ins@9
$LN39@M_fill_ins@9:

; 162  :   }
; 163  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 44					; 0000002cH
	ret	16					; 00000010H
?_M_fill_insert_aux@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXPAVCMotion@@IABV4@ABU__false_type@3@@Z ENDP ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_fill_insert_aux
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ??$_M_allocate_and_copy@PBU?$pair@MM@stlp_std@@@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEPAU?$pair@MM@2@AAIPBU32@1@Z
_TEXT	SEGMENT
??$_M_allocate_and_copy@PBU?$pair@MM@stlp_std@@@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEPAU?$pair@MM@2@AAIPBU32@1@Z PROC ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_allocate_and_copy<stlp_std::pair<float,float> const *>, COMDAT
; ___n$ = eax
; ___first$ = ebx
; ___last$ = ecx

; 634  :                                _ForwardIterator __first, _ForwardIterator __last)
; 635  : #else /* _STLP_MEMBER_TEMPLATES */
; 636  :   pointer _M_allocate_and_copy(size_type& __n,
; 637  :                                const_pointer __first, const_pointer __last)
; 638  : #endif /* _STLP_MEMBER_TEMPLATES */
; 639  :   {
; 640  :     pointer __result = this->_M_end_of_storage.allocate(__n, __n);

	mov	eax, DWORD PTR [eax]
	push	esi
	mov	esi, ecx
	lea	ecx, DWORD PTR [eax*8]
	push	edi
	push	ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 641  :     _STLP_TRY {
; 642  :       uninitialized_copy(__first, __last, __result);

	cmp	esi, ebx
	mov	edi, eax
	je	SHORT $LN28@M_allocate@4
	sub	esi, ebx
	push	esi
	push	ebx
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH

; 643  :       return __result;

	mov	eax, edi
$LN28@M_allocate@4:
	pop	edi
	pop	esi

; 644  :     }
; 645  :     _STLP_UNWIND(this->_M_end_of_storage.deallocate(__result, __n))
; 646  :     _STLP_RET_AFTER_THROW(__result)
; 647  :   }

	ret	0
??$_M_allocate_and_copy@PBU?$pair@MM@stlp_std@@@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEPAU?$pair@MM@2@AAIPBU32@1@Z ENDP ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_allocate_and_copy<stlp_std::pair<float,float> const *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@ABV012@@Z
_TEXT	SEGMENT
??0?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@ABV012@@Z PROC ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_Impl_vector<CMotion,xalloc<CMotion> >, COMDAT
; _this$ = esi
; ___x$ = ebx

; 236  :   { this->_M_finish = _STLP_PRIV __ucopy_ptrs(__x.begin(), __x.end(), this->_M_start, _TrivialUCopy()); }

	mov	ecx, DWORD PTR [ebx+4]
	sub	ecx, DWORD PTR [ebx]
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 4
	mov	eax, edx
	push	edi
	shr	eax, 31					; 0000001fH
	add	eax, edx
	lea	edi, DWORD PTR [eax+eax*4]
	xor	ecx, ecx
	add	edi, edi
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], ecx
	add	edi, edi
	mov	DWORD PTR [esi+8], ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	edi, edi
	push	edi
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	mov	edx, eax
	add	edi, edx
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [esi+4], edx
	mov	DWORD PTR [esi+8], edi
	mov	eax, DWORD PTR [ebx+4]
	mov	ecx, DWORD PTR [ebx]
	call	??$__ucopy@PBVCMotion@@PAV1@H@priv@stlp_std@@YAPAVCMotion@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<CMotion const *,CMotion *,int>
	mov	DWORD PTR [esi+4], eax
	mov	eax, esi
	pop	edi
	ret	0
??0?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@ABV012@@Z ENDP ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_Impl_vector<CMotion,xalloc<CMotion> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_pair.h
_TEXT	ENDS
;	COMDAT ??0?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@_N@stlp_std@@QAE@ABU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@1@AB_N@Z
_TEXT	SEGMENT
___b$ = 8						; size = 4
??0?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@_N@stlp_std@@QAE@ABU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@1@AB_N@Z PROC ; stlp_std::pair<stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >,bool>::pair<stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >,bool>, COMDAT
; _this$ = eax
; ___a$ = ecx

; 56   :   pair(const _T1& __a, const _T2& __b) : first(__a), second(__b) {}

	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ___b$[esp-4]
	mov	DWORD PTR [eax], edx
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax+4], dl
	ret	4
??0?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@_N@stlp_std@@QAE@ABU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@1@AB_N@Z ENDP ; stlp_std::pair<stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >,bool>::pair<stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >,bool>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ??1?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@XZ PROC ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::~_Impl_vector<CMotion,xalloc<CMotion> >, COMDAT
; _this$ = eax

; 286  :   ~vector() { _STLP_STD::_Destroy_Range(rbegin(), rend()); }

	push	esi
	mov	esi, eax
	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	push	ecx
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVCMotion@@@stlp_std@@VCMotion@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0PAVCMotion@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotion *>,CMotion>
	mov	esi, DWORD PTR [esi]
	add	esp, 8
	test	esi, esi
	je	SHORT $LN32@Impl_vecto@34
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN32@Impl_vecto@34:
	pop	esi
	ret	0
??1?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@XZ ENDP ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::~_Impl_vector<CMotion,xalloc<CMotion> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_clear@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEXXZ
_TEXT	SEGMENT
?_M_clear@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEXXZ PROC ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_clear, COMDAT
; _this$ = eax

; 616  :     _STLP_STD::_Destroy_Range(rbegin(), rend());
; 617  :     this->_M_end_of_storage.deallocate(this->_M_start, this->_M_end_of_storage._M_data - this->_M_start);

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN31@M_clear@2
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN31@M_clear@2:

; 618  :   }

	ret	0
?_M_clear@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEXXZ ENDP ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_clear
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_function_base.h
_TEXT	ENDS
;	COMDAT ??R?$less@Vshared_str@@@stlp_std@@QBE_NABVshared_str@@0@Z
_TEXT	SEGMENT
??R?$less@Vshared_str@@@stlp_std@@QBE_NABVshared_str@@0@Z PROC ; stlp_std::less<shared_str>::operator(), COMDAT
; ___x$ = eax
; ___y$ = edx

; 67   :   bool operator()(const _Tp& __x, const _Tp& __y) const { return __x < __y; }

	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR [edx]
	sbb	eax, eax
	neg	eax
	ret	0
??R?$less@Vshared_str@@@stlp_std@@QBE_NABVshared_str@@0@Z ENDP ; stlp_std::less<shared_str>::operator()
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?_M_clear@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEXXZ
_TEXT	SEGMENT
?_M_clear@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEXXZ PROC ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_clear, COMDAT
; _this$ = eax

; 616  :     _STLP_STD::_Destroy_Range(rbegin(), rend());
; 617  :     this->_M_end_of_storage.deallocate(this->_M_start, this->_M_end_of_storage._M_data - this->_M_start);

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN31@M_clear@3
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN31@M_clear@3:

; 618  :   }

	ret	0
?_M_clear@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEXXZ ENDP ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_clear
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$vector@VCMotion@@V?$xalloc@VCMotion@@@@@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@VCMotion@@V?$xalloc@VCMotion@@@@@stlp_std@@QAE@XZ PROC ; stlp_std::vector<CMotion,xalloc<CMotion> >::~vector<CMotion,xalloc<CMotion> >, COMDAT
; _this$ = eax
	push	esi
	mov	esi, eax
	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	push	ecx
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVCMotion@@@stlp_std@@VCMotion@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0PAVCMotion@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotion *>,CMotion>
	mov	esi, DWORD PTR [esi]
	add	esp, 8
	test	esi, esi
	je	SHORT $LN34@vector@20
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN34@vector@20:
	pop	esi
	ret	0
??1?$vector@VCMotion@@V?$xalloc@VCMotion@@@@@stlp_std@@QAE@XZ ENDP ; stlp_std::vector<CMotion,xalloc<CMotion> >::~vector<CMotion,xalloc<CMotion> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@QAE@XZ
_TEXT	SEGMENT
??1?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@QAE@XZ PROC ; xr_vector<CMotion,xalloc<CMotion> >::~xr_vector<CMotion,xalloc<CMotion> >, COMDAT
; _this$ = eax
	push	esi
	mov	esi, eax
	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	push	ecx
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVCMotion@@@stlp_std@@VCMotion@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0PAVCMotion@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotion *>,CMotion>
	mov	esi, DWORD PTR [esi]
	add	esp, 8
	test	esi, esi
	je	SHORT $LN36@xr_vector@17
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN36@xr_vector@17:
	pop	esi
	ret	0
??1?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@QAE@XZ ENDP ; xr_vector<CMotion,xalloc<CMotion> >::~xr_vector<CMotion,xalloc<CMotion> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__copy_ptrs@PAVCMotion@@PAV1@@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABU__false_type@1@@Z
_TEXT	SEGMENT
??$__copy_ptrs@PAVCMotion@@PAV1@@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABU__false_type@1@@Z PROC ; stlp_std::priv::__copy_ptrs<CMotion *,CMotion *>, COMDAT
; ___first$ = edx
; ___last$ = eax
; ___result$ = ecx

; 249  :                                const __false_type& /*IsOKToMemCpy*/) {

	push	ebx
	push	esi
	mov	ebx, edx

; 250  :   return __copy(__first, __last, __result, random_access_iterator_tag(), (ptrdiff_t*)0);

	sub	eax, ebx
	push	edi
	mov	edi, ecx
	mov	ecx, eax
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 4
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
	test	esi, esi
	jle	SHORT $LN10@copy_ptrs@38
	sub	ebx, edi
$LL5@copy_ptrs@38:
	lea	eax, DWORD PTR [ebx+edi]
	push	eax
	mov	ecx, edi
	call	??4CMotion@@QAEAAV0@ABV0@@Z
	sub	esi, 1
	add	edi, 40					; 00000028H
	test	esi, esi
	jg	SHORT $LL5@copy_ptrs@38
$LN10@copy_ptrs@38:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx

; 251  : }

	ret	0
??$__copy_ptrs@PAVCMotion@@PAV1@@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABU__false_type@1@@Z ENDP ; stlp_std::priv::__copy_ptrs<CMotion *,CMotion *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.c
_TEXT	ENDS
;	COMDAT ??4?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEAAV012@ABV012@@Z
_TEXT	SEGMENT
___result$280826 = 8					; size = 4
___x$ = 8						; size = 4
??4?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEAAV012@ABV012@@Z PROC ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::operator=, COMDAT
; _this$ = ebx

; 178  :   if (&__x != this) {

	mov	ecx, DWORD PTR ___x$[esp-4]
	cmp	ecx, ebx
	push	ebp
	push	esi
	push	edi
	je	$LN97@operator@35

; 179  :     const size_type __xlen = __x.size();

	mov	edi, DWORD PTR [ecx+4]
	mov	esi, DWORD PTR [ecx]

; 180  :     if (__xlen > capacity()) {

	mov	edx, DWORD PTR [ebx]
	mov	eax, DWORD PTR [ebx+8]
	mov	ebp, edi
	sub	ebp, esi
	sub	eax, edx
	sar	ebp, 2
	sar	eax, 2
	cmp	ebp, eax
	jbe	SHORT $LN4@operator@35

; 181  :       size_type __len = __xlen;
; 182  :       pointer __tmp = _M_allocate_and_copy(__len, __CONST_CAST(const_pointer, __x._M_start) + 0,
; 183  :                                                   __CONST_CAST(const_pointer, __x._M_finish) + 0);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	lea	eax, DWORD PTR [ebp*4]
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	cmp	edi, esi
	mov	DWORD PTR ___result$280826[esp+8], eax
	je	SHORT $LN39@operator@35
	sub	edi, esi
	push	edi
	push	esi
	push	eax
	call	_memcpy
	mov	eax, DWORD PTR ___result$280826[esp+20]
	add	esp, 12					; 0000000cH
$LN39@operator@35:

; 184  :       _M_clear();

	mov	ecx, DWORD PTR [ebx]
	test	ecx, ecx
	je	SHORT $LN70@operator@35
	push	ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	eax, DWORD PTR ___result$280826[esp+8]
$LN70@operator@35:

; 185  :       this->_M_start = __tmp;
; 186  :       this->_M_end_of_storage._M_data = this->_M_start + __len;

	lea	ecx, DWORD PTR [eax+ebp*4]

; 196  :     }
; 197  :     this->_M_finish = this->_M_start + __xlen;

	mov	edx, eax
	mov	DWORD PTR [ebx], eax
	lea	eax, DWORD PTR [edx+ebp*4]
	mov	DWORD PTR [ebx+4], eax
	mov	DWORD PTR [ebx+8], ecx

; 198  :   }
; 199  :   return *this;

	mov	eax, ebx

; 200  : }

	pop	edi
	pop	esi
	pop	ebp
	ret	4
$LN4@operator@35:

; 187  :     } else if (size() >= __xlen) {

	mov	eax, DWORD PTR [ebx+4]
	sub	eax, edx
	sar	eax, 2
	cmp	eax, ebp
	jb	SHORT $LN2@operator@35

; 188  :       pointer __i = _STLP_PRIV __copy_ptrs(__CONST_CAST(const_pointer, __x._M_start) + 0,
; 189  :                                            __CONST_CAST(const_pointer, __x._M_finish) + 0, this->_M_start, _TrivialCopy());

	sub	edi, esi
	je	SHORT $LN96@operator@35
	push	edi
	push	esi
	push	edx
	call	DWORD PTR __imp__memmove

; 196  :     }
; 197  :     this->_M_finish = this->_M_start + __xlen;

	mov	edx, DWORD PTR [ebx]
	lea	eax, DWORD PTR [edx+ebp*4]
	mov	DWORD PTR [ebx+4], eax
	add	esp, 12					; 0000000cH

; 198  :   }
; 199  :   return *this;

	mov	eax, ebx

; 200  : }

	pop	edi
	pop	esi
	pop	ebp
	ret	4
$LN2@operator@35:

; 190  :       _STLP_STD::_Destroy_Range(__i, this->_M_finish);
; 191  :     } else {
; 192  :       _STLP_PRIV __copy_ptrs(__CONST_CAST(const_pointer, __x._M_start),
; 193  :                              __CONST_CAST(const_pointer, __x._M_start) + size(), this->_M_start, _TrivialCopy());

	add	eax, eax
	add	eax, eax
	sub	eax, esi
	add	eax, esi
	je	SHORT $LN87@operator@35
	push	eax
	push	esi
	push	edx
	call	DWORD PTR __imp__memmove
	mov	ecx, DWORD PTR ___x$[esp+20]
	add	esp, 12					; 0000000cH
$LN87@operator@35:

; 194  :       _STLP_PRIV __ucopy_ptrs(__CONST_CAST(const_pointer, __x._M_start) + size(),
; 195  :                               __CONST_CAST(const_pointer, __x._M_finish) + 0, this->_M_finish, _TrivialUCopy());

	mov	edx, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, edx
	sub	esi, DWORD PTR [ebx]
	sar	esi, 2
	lea	ecx, DWORD PTR [ecx+esi*4]
	cmp	eax, ecx
	je	SHORT $LN96@operator@35
	sub	eax, ecx
	push	eax
	push	ecx
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN96@operator@35:

; 196  :     }
; 197  :     this->_M_finish = this->_M_start + __xlen;

	mov	edx, DWORD PTR [ebx]
	lea	eax, DWORD PTR [edx+ebp*4]
	mov	DWORD PTR [ebx+4], eax
$LN97@operator@35:

; 200  : }

	pop	edi
	pop	esi
	mov	eax, ebx
	pop	ebp
	ret	4
??4?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ENDP ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_insert_overflow@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEXPAIABIABU__true_type@3@I_N@Z
_TEXT	SEGMENT
___old_size$ = -8					; size = 4
tv266 = -4						; size = 4
___pos$ = 8						; size = 4
___fill_len$ = 12					; size = 4
___atend$ = 16						; size = 1
?_M_insert_overflow@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEXPAIABIABU__true_type@3@I_N@Z PROC ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_insert_overflow, COMDAT
; _this$ = edi
; ___x$ = eax

; 109  :                                              size_type __fill_len, bool __atend ) {

	sub	esp, 8
	push	ebx
	mov	ebx, eax

; 110  :   const size_type __old_size = size();

	mov	eax, DWORD PTR [edi+4]
	sub	eax, DWORD PTR [edi]
	push	ebp
	push	esi

; 111  :   size_type __len = __old_size + (max)(__old_size, __fill_len);

	lea	ecx, DWORD PTR ___fill_len$[esp+16]
	push	ecx
	lea	edx, DWORD PTR ___old_size$[esp+24]
	sar	eax, 2
	push	edx
	mov	DWORD PTR ___old_size$[esp+28], eax
	call	??$max@I@stlp_std@@YAABIABI0@Z		; stlp_std::max<unsigned int>
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR ___old_size$[esp+28]

; 112  : 
; 113  :   pointer __new_start = this->_M_end_of_storage.allocate(__len, __len);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	eax, eax
	add	eax, eax
	add	esp, 8
	push	eax
	mov	DWORD PTR tv266[esp+24], eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 114  :   pointer __new_finish = __STATIC_CAST(pointer, _STLP_PRIV __copy_trivial(this->_M_start, __pos, __new_start));

	mov	esi, DWORD PTR ___pos$[esp+16]
	mov	ebp, eax
	mov	eax, DWORD PTR [edi]
	sub	esi, eax
	je	SHORT $LN22@M_insert_o
	push	esi
	push	eax
	push	ebp
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
	jmp	SHORT $LN23@M_insert_o
$LN22@M_insert_o:
	mov	eax, ebp
$LN23@M_insert_o:

; 115  :   // handle insertion
; 116  :   __new_finish = _STLP_PRIV __fill_n(__new_finish, __fill_len, __x);

	mov	ecx, DWORD PTR ___fill_len$[esp+16]
	test	ecx, ecx
	jbe	SHORT $LN24@M_insert_o
$LL26@M_insert_o:
	mov	edx, DWORD PTR [ebx]
	mov	DWORD PTR [eax], edx
	sub	ecx, 1
	add	eax, 4
	test	ecx, ecx
	ja	SHORT $LL26@M_insert_o
$LN24@M_insert_o:

; 117  :   if (!__atend)

	cmp	BYTE PTR ___atend$[esp+16], 0
	mov	esi, eax
	jne	SHORT $LN31@M_insert_o

; 118  :     __new_finish = __STATIC_CAST(pointer, _STLP_PRIV __copy_trivial(__pos, this->_M_finish, __new_finish)); // copy remainder

	mov	ebx, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR ___pos$[esp+16]
	sub	ebx, ecx
	je	SHORT $LN31@M_insert_o
	push	ebx
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	mov	esi, eax
	add	esp, 12					; 0000000cH
	add	esi, ebx
$LN31@M_insert_o:

; 119  :   _M_clear();

	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN63@M_insert_o
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN63@M_insert_o:

; 120  :   _M_set(__new_start, __new_finish, __new_start + __len);

	mov	eax, DWORD PTR tv266[esp+20]
	mov	DWORD PTR [edi+4], esi

; 121  : }

	pop	esi
	add	eax, ebp
	mov	DWORD PTR [edi], ebp
	pop	ebp
	mov	DWORD PTR [edi+8], eax
	pop	ebx
	add	esp, 8
	ret	12					; 0000000cH
?_M_insert_overflow@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEXPAIABIABU__true_type@3@I_N@Z ENDP ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_insert_overflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z
_TEXT	SEGMENT
___result$281406 = 8					; size = 4
___x$ = 8						; size = 4
??4?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z PROC ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::operator=, COMDAT
; _this$ = ebx

; 178  :   if (&__x != this) {

	mov	ecx, DWORD PTR ___x$[esp-4]
	cmp	ecx, ebx
	push	ebp
	push	esi
	push	edi
	je	$LN97@operator@36

; 179  :     const size_type __xlen = __x.size();

	mov	edi, DWORD PTR [ecx+4]
	mov	esi, DWORD PTR [ecx]

; 180  :     if (__xlen > capacity()) {

	mov	edx, DWORD PTR [ebx]
	mov	eax, DWORD PTR [ebx+8]
	mov	ebp, edi
	sub	ebp, esi
	sub	eax, edx
	sar	ebp, 3
	sar	eax, 3
	cmp	ebp, eax
	jbe	SHORT $LN4@operator@36

; 181  :       size_type __len = __xlen;
; 182  :       pointer __tmp = _M_allocate_and_copy(__len, __CONST_CAST(const_pointer, __x._M_start) + 0,
; 183  :                                                   __CONST_CAST(const_pointer, __x._M_finish) + 0);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	lea	eax, DWORD PTR [ebp*8]
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	cmp	edi, esi
	mov	DWORD PTR ___result$281406[esp+8], eax
	je	SHORT $LN39@operator@36
	sub	edi, esi
	push	edi
	push	esi
	push	eax
	call	_memcpy
	mov	eax, DWORD PTR ___result$281406[esp+20]
	add	esp, 12					; 0000000cH
$LN39@operator@36:

; 184  :       _M_clear();

	mov	ecx, DWORD PTR [ebx]
	test	ecx, ecx
	je	SHORT $LN70@operator@36
	push	ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	eax, DWORD PTR ___result$281406[esp+8]
$LN70@operator@36:

; 185  :       this->_M_start = __tmp;
; 186  :       this->_M_end_of_storage._M_data = this->_M_start + __len;

	lea	ecx, DWORD PTR [eax+ebp*8]

; 196  :     }
; 197  :     this->_M_finish = this->_M_start + __xlen;

	mov	edx, eax
	mov	DWORD PTR [ebx], eax
	lea	eax, DWORD PTR [edx+ebp*8]
	mov	DWORD PTR [ebx+4], eax
	mov	DWORD PTR [ebx+8], ecx

; 198  :   }
; 199  :   return *this;

	mov	eax, ebx

; 200  : }

	pop	edi
	pop	esi
	pop	ebp
	ret	4
$LN4@operator@36:

; 187  :     } else if (size() >= __xlen) {

	mov	eax, DWORD PTR [ebx+4]
	sub	eax, edx
	sar	eax, 3
	cmp	eax, ebp
	jb	SHORT $LN2@operator@36

; 188  :       pointer __i = _STLP_PRIV __copy_ptrs(__CONST_CAST(const_pointer, __x._M_start) + 0,
; 189  :                                            __CONST_CAST(const_pointer, __x._M_finish) + 0, this->_M_start, _TrivialCopy());

	sub	edi, esi
	je	SHORT $LN96@operator@36
	push	edi
	push	esi
	push	edx
	call	DWORD PTR __imp__memmove

; 196  :     }
; 197  :     this->_M_finish = this->_M_start + __xlen;

	mov	edx, DWORD PTR [ebx]
	lea	eax, DWORD PTR [edx+ebp*8]
	mov	DWORD PTR [ebx+4], eax
	add	esp, 12					; 0000000cH

; 198  :   }
; 199  :   return *this;

	mov	eax, ebx

; 200  : }

	pop	edi
	pop	esi
	pop	ebp
	ret	4
$LN2@operator@36:

; 190  :       _STLP_STD::_Destroy_Range(__i, this->_M_finish);
; 191  :     } else {
; 192  :       _STLP_PRIV __copy_ptrs(__CONST_CAST(const_pointer, __x._M_start),
; 193  :                              __CONST_CAST(const_pointer, __x._M_start) + size(), this->_M_start, _TrivialCopy());

	add	eax, eax
	add	eax, eax
	add	eax, eax
	sub	eax, esi
	add	eax, esi
	je	SHORT $LN87@operator@36
	push	eax
	push	esi
	push	edx
	call	DWORD PTR __imp__memmove
	mov	ecx, DWORD PTR ___x$[esp+20]
	add	esp, 12					; 0000000cH
$LN87@operator@36:

; 194  :       _STLP_PRIV __ucopy_ptrs(__CONST_CAST(const_pointer, __x._M_start) + size(),
; 195  :                               __CONST_CAST(const_pointer, __x._M_finish) + 0, this->_M_finish, _TrivialUCopy());

	mov	edx, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, edx
	sub	esi, DWORD PTR [ebx]
	sar	esi, 3
	lea	ecx, DWORD PTR [ecx+esi*8]
	cmp	eax, ecx
	je	SHORT $LN96@operator@36
	sub	eax, ecx
	push	eax
	push	ecx
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN96@operator@36:

; 196  :     }
; 197  :     this->_M_finish = this->_M_start + __xlen;

	mov	edx, DWORD PTR [ebx]
	lea	eax, DWORD PTR [edx+ebp*8]
	mov	DWORD PTR [ebx+4], eax
$LN97@operator@36:

; 200  : }

	pop	edi
	pop	esi
	mov	eax, ebx
	pop	ebp
	ret	4
??4?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ENDP ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::operator=
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?_M_erase@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEPAVCMotion@@PAV4@0ABU__false_type@3@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___first$ = 12						; size = 4
?_M_erase@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEPAVCMotion@@PAV4@0ABU__false_type@3@@Z PROC ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_erase, COMDAT
; ___last$ = eax

; 578  :   iterator _M_erase(iterator __first, iterator __last, const __false_type& /*_Movable*/) {

	push	ebx
	mov	ebx, eax

; 579  :     pointer __i = _STLP_PRIV __copy_ptrs(__last, this->_M_finish, __first, _TrivialCopy());

	mov	eax, DWORD PTR _this$[esp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, ebx
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	push	ebp
	mov	ebp, DWORD PTR ___first$[esp+4]
	push	esi
	sar	edx, 4
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
	test	esi, esi
	push	edi
	mov	edi, ebp
	jle	SHORT $LN5@M_erase@22
	sub	ebx, ebp
	npad	4
$LL7@M_erase@22:
	lea	ecx, DWORD PTR [ebx+edi]
	push	ecx
	mov	ecx, edi
	call	??4CMotion@@QAEAAV0@ABV0@@Z
	sub	esi, 1
	add	edi, 40					; 00000028H
	test	esi, esi
	jg	SHORT $LL7@M_erase@22
$LN5@M_erase@22:

; 580  :     _STLP_STD::_Destroy_Range(__i, this->_M_finish);

	mov	ebx, DWORD PTR _this$[esp+12]
	mov	esi, DWORD PTR [ebx+4]
	mov	eax, edi
	call	??$__destroy_range_aux@PAVCMotion@@V1@@stlp_std@@YAXPAVCMotion@@00ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<CMotion *,CMotion>

; 581  :     this->_M_finish = __i;

	mov	DWORD PTR [ebx+4], edi
	pop	edi
	pop	esi

; 582  :     return __first;

	mov	eax, ebp
	pop	ebp
	pop	ebx

; 583  :   }

	ret	8
?_M_erase@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEPAVCMotion@@PAV4@0ABU__false_type@3@@Z ENDP ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?erase@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAEPAVCMotion@@PAV4@0@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
?erase@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAEPAVCMotion@@PAV4@0@Z PROC ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::erase, COMDAT
; ___first$ = eax
; ___last$ = ecx

; 590  :     if (__first == __last)

	cmp	eax, ecx

; 591  :       return __first;

	je	SHORT $LN2@erase@32

; 592  :     return _M_erase(__first, __last, _Movable());

	push	eax
	mov	eax, DWORD PTR _this$[esp]
	push	eax
	mov	eax, ecx
	call	?_M_erase@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEPAVCMotion@@PAV4@0ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_erase
$LN2@erase@32:

; 593  :   }

	ret	4
?erase@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAEPAVCMotion@@PAV4@0@Z ENDP ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Impl_vector@GV?$xalloc@G@@@priv@stlp_std@@QAE@IABGABV?$xalloc@G@@@Z
_TEXT	SEGMENT
??0?$_Impl_vector@GV?$xalloc@G@@@priv@stlp_std@@QAE@IABGABV?$xalloc@G@@@Z PROC ; stlp_std::priv::_Impl_vector<unsigned short,xalloc<unsigned short> >::_Impl_vector<unsigned short,xalloc<unsigned short> >, COMDAT
; _this$ = edi
; ___n$ = ecx
; ___val$ = ebx
; ___a$ = eax

; 232  :   { this->_M_finish = _STLP_PRIV __uninitialized_fill_n(this->_M_start, __n, __val); }

	push	esi
	mov	esi, ecx
	push	eax
	push	esi
	mov	ecx, edi
	call	??0?$_Vector_base@GV?$xalloc@G@@@priv@stlp_std@@QAE@IABV?$xalloc@G@@@Z ; stlp_std::priv::_Vector_base<unsigned short,xalloc<unsigned short> >::_Vector_base<unsigned short,xalloc<unsigned short> >
	mov	ecx, DWORD PTR [edi]
	lea	edx, DWORD PTR [ecx+esi*2]
	mov	eax, edx
	sub	eax, ecx
	sar	eax, 1
	test	eax, eax
	jle	SHORT $LN18@Impl_vecto@35
	npad	5
$LL7@Impl_vecto@35:
	test	ecx, ecx
	je	SHORT $LN6@Impl_vecto@35
	mov	si, WORD PTR [ebx]
	mov	WORD PTR [ecx], si
$LN6@Impl_vecto@35:
	sub	eax, 1
	add	ecx, 2
	test	eax, eax
	jg	SHORT $LL7@Impl_vecto@35
$LN18@Impl_vecto@35:
	mov	eax, edi
	mov	DWORD PTR [edi+4], edx
	pop	esi
	ret	0
??0?$_Impl_vector@GV?$xalloc@G@@@priv@stlp_std@@QAE@IABGABV?$xalloc@G@@@Z ENDP ; stlp_std::priv::_Impl_vector<unsigned short,xalloc<unsigned short> >::_Impl_vector<unsigned short,xalloc<unsigned short> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ??E?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QAEAAU012@XZ
_TEXT	SEGMENT
??E?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QAEAAU012@XZ PROC ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::operator++, COMDAT
; _this$ = eax

; 177  :     _M_node = _Rb_global_inst::_M_increment(_M_node);

	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	test	edx, edx
	je	SHORT $LN7@operator@37
	mov	ecx, DWORD PTR [edx+8]
	test	ecx, ecx
	je	SHORT $LN10@operator@37
$LL11@operator@37:
	mov	edx, ecx
	mov	ecx, DWORD PTR [edx+8]
	test	ecx, ecx
	jne	SHORT $LL11@operator@37
$LN10@operator@37:
	mov	DWORD PTR [eax], edx

; 178  :     return *this;
; 179  :   }

	ret	0

; 177  :     _M_node = _Rb_global_inst::_M_increment(_M_node);

$LN7@operator@37:
	mov	edx, DWORD PTR [ecx+4]
	cmp	ecx, DWORD PTR [edx+12]
	jne	SHORT $LN4@operator@37
$LL5@operator@37:
	mov	ecx, edx
	mov	edx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [edx+12]
	je	SHORT $LL5@operator@37
$LN4@operator@37:
	cmp	DWORD PTR [ecx+12], edx
	jne	SHORT $LN10@operator@37
	mov	DWORD PTR [eax], ecx

; 178  :     return *this;
; 179  :   }

	ret	0
??E?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QAEAAU012@XZ ENDP ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::operator++
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ??0?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QAE@ABV?$xalloc@U?$pair@MM@stlp_std@@@@@Z
_TEXT	SEGMENT
??0?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QAE@ABV?$xalloc@U?$pair@MM@stlp_std@@@@@Z PROC ; stlp_std::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >, COMDAT
; _this$ = eax

; 106  :   explicit vector(const allocator_type& __a = allocator_type())

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QAE@ABV?$xalloc@U?$pair@MM@stlp_std@@@@@Z ENDP ; stlp_std::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?push_back@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEXABI@Z
_TEXT	SEGMENT
?push_back@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEXABI@Z PROC ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::push_back, COMDAT
; _this$ = ecx
; ___x$ = eax

; 360  :   void push_back(const _Tp& __x) {

	push	edi
	mov	edi, ecx

; 361  : #endif /*!_STLP_DONT_SUP_DFLT_PARAM && !_STLP_NO_ANACHRONISMS*/
; 362  :     if (this->_M_finish != this->_M_end_of_storage._M_data) {

	mov	ecx, DWORD PTR [edi+4]
	cmp	ecx, DWORD PTR [edi+8]
	je	SHORT $LN2@push_back@5

; 363  :       _Copy_Construct(this->_M_finish, __x);

	test	ecx, ecx
	je	SHORT $LN7@push_back@5
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN7@push_back@5:

; 364  :       ++this->_M_finish;

	add	DWORD PTR [edi+4], 4
	pop	edi

; 368  :   }

	ret	0
$LN2@push_back@5:

; 365  :     }
; 366  :     else
; 367  :       _M_insert_overflow(this->_M_finish, __x, _TrivialCopy(), 1UL, true);

	push	1
	push	1
	push	ecx
	call	?_M_insert_overflow@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEXPAIABIABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_insert_overflow
	pop	edi

; 368  :   }

	ret	0
?push_back@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEXABI@Z ENDP ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::push_back
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAE@ABV012@@Z
_TEXT	SEGMENT
??0?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAE@ABV012@@Z PROC ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_Impl_vector<unsigned int,xalloc<unsigned int> >, COMDAT
; _this$ = esi
; ___x$ = eax

; 236  :   { this->_M_finish = _STLP_PRIV __ucopy_ptrs(__x.begin(), __x.end(), this->_M_start, _TrivialUCopy()); }

	push	ebx
	push	edi
	mov	edi, eax
	mov	eax, DWORD PTR [edi+4]
	sub	eax, DWORD PTR [edi]
	xor	ecx, ecx
	sar	eax, 2
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], ecx
	lea	ebx, DWORD PTR [eax*4]
	mov	DWORD PTR [esi+8], ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	ebx
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	add	ebx, eax
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], ebx
	mov	ebx, DWORD PTR [edi+4]
	mov	edi, DWORD PTR [edi]
	cmp	ebx, edi
	je	SHORT $LN35@Impl_vecto@36
	sub	ebx, edi
	push	ebx
	push	edi
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, ebx
$LN35@Impl_vecto@36:
	pop	edi
	mov	DWORD PTR [esi+4], eax
	mov	eax, esi
	pop	ebx
	ret	0
??0?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAE@ABV012@@Z ENDP ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_Impl_vector<unsigned int,xalloc<unsigned int> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ??0?$vector@GV?$xalloc@G@@@stlp_std@@QAE@IABGABV?$xalloc@G@@@Z
_TEXT	SEGMENT
??0?$vector@GV?$xalloc@G@@@stlp_std@@QAE@IABGABV?$xalloc@G@@@Z PROC ; stlp_std::vector<unsigned short,xalloc<unsigned short> >::vector<unsigned short,xalloc<unsigned short> >, COMDAT
; _this$ = edi
; ___n$ = ecx
; ___val$ = ebx
; ___a$ = eax

; 116  :       _STLP_CONVERT_ALLOCATOR(__a, _StorageType)) {}

	push	esi
	mov	esi, ecx
	push	eax
	push	esi
	mov	ecx, edi
	call	??0?$_Vector_base@GV?$xalloc@G@@@priv@stlp_std@@QAE@IABV?$xalloc@G@@@Z ; stlp_std::priv::_Vector_base<unsigned short,xalloc<unsigned short> >::_Vector_base<unsigned short,xalloc<unsigned short> >
	mov	ecx, DWORD PTR [edi]
	lea	edx, DWORD PTR [ecx+esi*2]
	mov	eax, edx
	sub	eax, ecx
	sar	eax, 1
	test	eax, eax
	jle	SHORT $LN22@vector@21
	npad	5
$LL11@vector@21:
	test	ecx, ecx
	je	SHORT $LN10@vector@21
	mov	si, WORD PTR [ebx]
	mov	WORD PTR [ecx], si
$LN10@vector@21:
	sub	eax, 1
	add	ecx, 2
	test	eax, eax
	jg	SHORT $LL11@vector@21
$LN22@vector@21:
	mov	eax, edi
	mov	DWORD PTR [edi+4], edx
	pop	esi
	ret	0
??0?$vector@GV?$xalloc@G@@@stlp_std@@QAE@IABGABV?$xalloc@G@@@Z ENDP ; stlp_std::vector<unsigned short,xalloc<unsigned short> >::vector<unsigned short,xalloc<unsigned short> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ??E?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QAEAAU012@XZ
_TEXT	SEGMENT
??E?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QAEAAU012@XZ PROC ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >::operator++, COMDAT
; _this$ = eax

; 177  :     _M_node = _Rb_global_inst::_M_increment(_M_node);

	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	test	edx, edx
	je	SHORT $LN7@operator@38
	mov	ecx, DWORD PTR [edx+8]
	test	ecx, ecx
	je	SHORT $LN10@operator@38
$LL11@operator@38:
	mov	edx, ecx
	mov	ecx, DWORD PTR [edx+8]
	test	ecx, ecx
	jne	SHORT $LL11@operator@38
$LN10@operator@38:
	mov	DWORD PTR [eax], edx

; 178  :     return *this;
; 179  :   }

	ret	0

; 177  :     _M_node = _Rb_global_inst::_M_increment(_M_node);

$LN7@operator@38:
	mov	edx, DWORD PTR [ecx+4]
	cmp	ecx, DWORD PTR [edx+12]
	jne	SHORT $LN4@operator@38
$LL5@operator@38:
	mov	ecx, edx
	mov	edx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [edx+12]
	je	SHORT $LL5@operator@38
$LN4@operator@38:
	cmp	DWORD PTR [ecx+12], edx
	jne	SHORT $LN10@operator@38
	mov	DWORD PTR [eax], ecx

; 178  :     return *this;
; 179  :   }

	ret	0
??E?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QAEAAU012@XZ ENDP ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >::operator++
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??E?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE?AU012@H@Z
_TEXT	SEGMENT
??E?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE?AU012@H@Z PROC ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::operator++, COMDAT
; _this$ = esi
; ___$ReturnUdt$ = eax

; 181  :     _Self __tmp = *this;

	mov	ecx, DWORD PTR [esi]

; 182  :     ++(*this);

	mov	edx, DWORD PTR [ecx+12]
	test	edx, edx
	mov	DWORD PTR [eax], ecx
	je	SHORT $LN13@operator@39
	mov	ecx, DWORD PTR [edx+8]
	test	ecx, ecx
	je	SHORT $LN16@operator@39
$LL17@operator@39:
	mov	edx, ecx
	mov	ecx, DWORD PTR [edx+8]
	test	ecx, ecx
	jne	SHORT $LL17@operator@39
$LN16@operator@39:
	mov	DWORD PTR [esi], edx

; 183  :     return __tmp;
; 184  :   }

	ret	0

; 182  :     ++(*this);

$LN13@operator@39:
	mov	edx, DWORD PTR [ecx+4]
	cmp	ecx, DWORD PTR [edx+12]
	jne	SHORT $LN10@operator@39
$LL11@operator@39:
	mov	ecx, edx
	mov	edx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [edx+12]
	je	SHORT $LL11@operator@39
$LN10@operator@39:
	cmp	DWORD PTR [ecx+12], edx
	jne	SHORT $LN16@operator@39
	mov	DWORD PTR [esi], ecx

; 183  :     return __tmp;
; 184  :   }

	ret	0
??E?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE?AU012@H@Z ENDP ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::operator++
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ??4?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
??4?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QAEAAV01@ABV01@@Z PROC ; stlp_std::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::operator=, COMDAT
; _this$ = ecx
; ___x$ = eax

; 149  :   _Self& operator=(const _Self& __x) { _M_impl = __x._M_impl; return *this; }

	push	ebx
	mov	ebx, ecx
	push	eax
	call	??4?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::operator=
	mov	eax, ebx
	pop	ebx
	ret	0
??4?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QAEAAV01@ABV01@@Z ENDP ; stlp_std::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::operator=
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xr_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xr_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@@QAE@XZ PROC ; xr_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::xr_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >, COMDAT
; _this$ = eax

; 123  : 			xr_vector			()									: inherited	()					{}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$xr_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@@QAE@XZ ENDP ; xr_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::xr_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?at@?$vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@stlp_std@@QAEAAPAVCBoneData@@I@Z
_TEXT	SEGMENT
?at@?$vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@stlp_std@@QAEAAPAVCBoneData@@I@Z PROC ; stlp_std::vector<CBoneData *,xalloc<CBoneData *> >::at, COMDAT
; _this$ = ecx
; ___n$ = edx

; 103  :   reference at(size_type __n) { return cast_traits::to_value_type_ref(_M_impl.at(__n)); }

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+4]
	sub	ecx, eax
	sar	ecx, 2
	cmp	edx, ecx
	jb	SHORT $LN5@at@3
	push	OFFSET ??_C@_06NBFPPGEG@vector?$AA@
	call	DWORD PTR __imp__puts
	add	esp, 4
	jmp	DWORD PTR __imp__abort
$LN5@at@3:
	lea	eax, DWORD PTR [eax+edx*4]
	ret	0
?at@?$vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@stlp_std@@QAEAAPAVCBoneData@@I@Z ENDP ; stlp_std::vector<CBoneData *,xalloc<CBoneData *> >::at
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?push_back@?$vector@IV?$xalloc@I@@@stlp_std@@QAEXABI@Z
_TEXT	SEGMENT
?push_back@?$vector@IV?$xalloc@I@@@stlp_std@@QAEXABI@Z PROC ; stlp_std::vector<unsigned int,xalloc<unsigned int> >::push_back, COMDAT
; _this$ = ecx
; ___x$ = eax

; 171  :   { _M_impl.push_back(cast_traits::to_storage_type_cref(__x)); }

	push	edi
	mov	edi, ecx
	mov	ecx, DWORD PTR [edi+4]
	cmp	ecx, DWORD PTR [edi+8]
	je	SHORT $LN6@push_back@6
	test	ecx, ecx
	je	SHORT $LN11@push_back@6
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN11@push_back@6:
	add	DWORD PTR [edi+4], 4
	pop	edi
	ret	0
$LN6@push_back@6:
	push	1
	push	1
	push	ecx
	call	?_M_insert_overflow@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEXPAIABIABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_insert_overflow
	pop	edi
	ret	0
?push_back@?$vector@IV?$xalloc@I@@@stlp_std@@QAEXABI@Z ENDP ; stlp_std::vector<unsigned int,xalloc<unsigned int> >::push_back
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$vector@IV?$xalloc@I@@@stlp_std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
??4?$vector@IV?$xalloc@I@@@stlp_std@@QAEAAV01@ABV01@@Z PROC ; stlp_std::vector<unsigned int,xalloc<unsigned int> >::operator=, COMDAT
; _this$ = ecx
; ___x$ = eax

; 149  :   _Self& operator=(const _Self& __x) { _M_impl = __x._M_impl; return *this; }

	push	ebx
	mov	ebx, ecx
	push	eax
	call	??4?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::operator=
	mov	eax, ebx
	pop	ebx
	ret	0
??4?$vector@IV?$xalloc@I@@@stlp_std@@QAEAAV01@ABV01@@Z ENDP ; stlp_std::vector<unsigned int,xalloc<unsigned int> >::operator=
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xr_vector@GV?$xalloc@G@@@@QAE@IABG@Z
_TEXT	SEGMENT
$T282225 = -1						; size = 1
??0?$xr_vector@GV?$xalloc@G@@@@QAE@IABG@Z PROC		; xr_vector<unsigned short,xalloc<unsigned short> >::xr_vector<unsigned short,xalloc<unsigned short> >, COMDAT
; _this$ = edi
; __count$ = eax
; __value$ = ebx

; 124  : 			xr_vector			(size_t _count, const T& _value)	: inherited	(_count,_value)		{}

	push	ecx
	push	esi
	mov	esi, eax
	lea	eax, DWORD PTR $T282225[esp+8]
	push	eax
	push	esi
	mov	ecx, edi
	call	??0?$_Vector_base@GV?$xalloc@G@@@priv@stlp_std@@QAE@IABV?$xalloc@G@@@Z ; stlp_std::priv::_Vector_base<unsigned short,xalloc<unsigned short> >::_Vector_base<unsigned short,xalloc<unsigned short> >
	mov	ecx, DWORD PTR [edi]
	lea	edx, DWORD PTR [ecx+esi*2]
	mov	eax, edx
	sub	eax, ecx
	sar	eax, 1
	test	eax, eax
	jle	SHORT $LN26@xr_vector@18
$LL15@xr_vector@18:
	test	ecx, ecx
	je	SHORT $LN14@xr_vector@18
	mov	si, WORD PTR [ebx]
	mov	WORD PTR [ecx], si
$LN14@xr_vector@18:
	sub	eax, 1
	add	ecx, 2
	test	eax, eax
	jg	SHORT $LL15@xr_vector@18
$LN26@xr_vector@18:
	mov	eax, edi
	mov	DWORD PTR [edi+4], edx
	pop	esi
	pop	ecx
	ret	0
??0?$xr_vector@GV?$xalloc@G@@@@QAE@IABG@Z ENDP		; xr_vector<unsigned short,xalloc<unsigned short> >::xr_vector<unsigned short,xalloc<unsigned short> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@QAE@XZ PROC ; stlp_std::pair<shared_str const ,motions_value *>::~pair<shared_str const ,motions_value *>, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN5@pair
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN5@pair
	mov	DWORD PTR [ecx], 0
$LN5@pair:
	ret	0
??1?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@QAE@XZ ENDP ; stlp_std::pair<shared_str const ,motions_value *>::~pair<shared_str const ,motions_value *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@QAE@XZ PROC ; stlp_std::pair<shared_str,motions_value *>::~pair<shared_str,motions_value *>, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN5@pair@2
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN5@pair@2
	mov	DWORD PTR [ecx], 0
$LN5@pair@2:
	ret	0
??1?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@QAE@XZ ENDP ; stlp_std::pair<shared_str,motions_value *>::~pair<shared_str,motions_value *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$pair@$$CBVshared_str@@G@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@$$CBVshared_str@@G@stlp_std@@QAE@XZ PROC	; stlp_std::pair<shared_str const ,unsigned short>::~pair<shared_str const ,unsigned short>, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN5@pair@3
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN5@pair@3
	mov	DWORD PTR [ecx], 0
$LN5@pair@3:
	ret	0
??1?$pair@$$CBVshared_str@@G@stlp_std@@QAE@XZ ENDP	; stlp_std::pair<shared_str const ,unsigned short>::~pair<shared_str const ,unsigned short>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$pair@Vshared_str@@G@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@Vshared_str@@G@stlp_std@@QAE@XZ PROC		; stlp_std::pair<shared_str,unsigned short>::~pair<shared_str,unsigned short>, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN5@pair@4
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN5@pair@4
	mov	DWORD PTR [ecx], 0
$LN5@pair@4:
	ret	0
??1?$pair@Vshared_str@@G@stlp_std@@QAE@XZ ENDP		; stlp_std::pair<shared_str,unsigned short>::~pair<shared_str,unsigned short>
_TEXT	ENDS
PUBLIC	?find_bone_id@@YAGPAV?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@Vshared_str@@@Z ; find_bone_id
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\skeletonmotions.cpp
;	COMDAT ?find_bone_id@@YAGPAV?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@Vshared_str@@@Z
_TEXT	SEGMENT
_nm$ = 8						; size = 4
?find_bone_id@@YAGPAV?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@Vshared_str@@@Z PROC ; find_bone_id, COMDAT
; _bones$ = ecx

; 68   : {

	push	ebx

; 69   : 	for (u16 i=0; i<(u16)bones->size(); i++)

	mov	ebx, DWORD PTR _nm$[esp]
	push	esi
	mov	esi, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+4]
	sub	ecx, esi
	sar	ecx, 2
	push	edi
	movzx	edi, cx
	xor	eax, eax
	test	di, di
	jbe	SHORT $LN2@find_bone_
	npad	5
$LL4@find_bone_:

; 70   : 		if (bones->at(i)->name==nm) return i;

	movzx	edx, ax
	cmp	edx, ecx
	jae	SHORT $LN55@find_bone_
	mov	edx, DWORD PTR [esi+edx*4]
	cmp	DWORD PTR [edx+8], ebx
	je	SHORT $LN56@find_bone_
	add	eax, 1
	cmp	ax, di
	jb	SHORT $LL4@find_bone_
$LN2@find_bone_:

; 71   : 	return BI_NONE;

	test	ebx, ebx
	je	SHORT $LN50@find_bone_
	add	DWORD PTR [ebx], -1
$LN50@find_bone_:
	or	ax, 65535				; 0000ffffH
$LN5@find_bone_:
	pop	edi
	pop	esi
	pop	ebx

; 72   : }

	ret	0
$LN55@find_bone_:

; 70   : 		if (bones->at(i)->name==nm) return i;

	push	OFFSET ??_C@_06NBFPPGEG@vector?$AA@
	call	DWORD PTR __imp__puts
	add	esp, 4
	jmp	DWORD PTR __imp__abort
$LN56@find_bone_:
	test	ebx, ebx
	je	SHORT $LN5@find_bone_
	add	DWORD PTR [ebx], -1
	pop	edi
	pop	esi
	pop	ebx

; 72   : }

	ret	0
?find_bone_id@@YAGPAV?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@Vshared_str@@@Z ENDP ; find_bone_id
_TEXT	ENDS
PUBLIC	?mem_usage@motions_value@@QAEIXZ		; motions_value::mem_usage
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\skeletonmotions.h
;	COMDAT ?mem_usage@motions_value@@QAEIXZ
_TEXT	SEGMENT
tv252 = -4						; size = 4
?mem_usage@motions_value@@QAEIXZ PROC			; motions_value::mem_usage, COMDAT
; _this$ = ecx

; 184  : 	u32					mem_usage			(){ 

	push	ecx

; 185  : 		u32 sz			=	sizeof(*this)+m_motion_map.size()*6+m_partition.mem_usage();

	mov	edx, DWORD PTR [ecx+80]
	sub	edx, DWORD PTR [ecx+76]
	mov	eax, DWORD PTR [ecx+16]
	sar	edx, 2
	shl	edx, 4
	lea	eax, DWORD PTR [eax+eax*2]
	push	ebp
	lea	ebp, DWORD PTR [edx+eax*2+260]

; 186  :         for (MotionDefVecIt it=m_mdefs.begin(); it!=m_mdefs.end(); it++)

	mov	eax, DWORD PTR [ecx+164]
	mov	edx, DWORD PTR [ecx+168]
	cmp	eax, edx
	push	edi
	je	SHORT $LN7@mem_usage@2
	npad	4
$LL9@mem_usage@2:
	add	eax, 28					; 0000001cH

; 187  : 			sz			+=	it->mem_usage();

	add	ebp, 28					; 0000001cH
	cmp	eax, edx
	jne	SHORT $LL9@mem_usage@2
$LN7@mem_usage@2:

; 188  : 		for (BoneMotionMapIt bm_it=m_motions.begin(); bm_it!=m_motions.end(); bm_it++)

	mov	edi, DWORD PTR [ecx+148]
	lea	edx, DWORD PTR [ecx+140]
	cmp	edi, edx
	setne	al
	test	al, al
	mov	DWORD PTR tv252[esp+12], edx
	je	SHORT $LN115@mem_usage@2
	push	ebx
	push	esi
$LL58@mem_usage@2:

; 189  : 			for (MotionVecIt m_it=bm_it->second.begin(); m_it!=bm_it->second.end(); m_it++)

	mov	esi, DWORD PTR [edi+20]
	mov	ebx, DWORD PTR [edi+24]
	cmp	esi, ebx
	je	SHORT $LN5@mem_usage@2
	npad	1
$LL3@mem_usage@2:

; 190  : 				sz		+=	m_it->mem_usage();

	mov	ecx, esi
	call	?mem_usage@CMotion@@QAEIXZ		; CMotion::mem_usage
	add	esi, 40					; 00000028H
	add	ebp, eax
	cmp	esi, ebx
	jne	SHORT $LL3@mem_usage@2

; 189  : 			for (MotionVecIt m_it=bm_it->second.begin(); m_it!=bm_it->second.end(); m_it++)

	mov	edx, DWORD PTR tv252[esp+20]
$LN5@mem_usage@2:

; 188  : 		for (BoneMotionMapIt bm_it=m_motions.begin(); bm_it!=m_motions.end(); bm_it++)

	mov	ecx, DWORD PTR [edi+12]
	test	ecx, ecx
	mov	eax, edi
	je	SHORT $LN64@mem_usage@2
	mov	eax, ecx
	mov	ecx, DWORD PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN60@mem_usage@2
$LL68@mem_usage@2:
	mov	eax, ecx
	mov	ecx, DWORD PTR [eax+8]
	test	ecx, ecx
	jne	SHORT $LL68@mem_usage@2
	jmp	SHORT $LN60@mem_usage@2
$LN64@mem_usage@2:
	mov	ecx, DWORD PTR [edi+4]
	cmp	edi, DWORD PTR [ecx+12]
	jne	SHORT $LN61@mem_usage@2
	npad	7
$LL62@mem_usage@2:
	mov	eax, ecx
	mov	ecx, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [ecx+12]
	je	SHORT $LL62@mem_usage@2
$LN61@mem_usage@2:
	cmp	DWORD PTR [eax+12], ecx
	je	SHORT $LN60@mem_usage@2
	mov	eax, ecx
$LN60@mem_usage@2:
	cmp	eax, edx
	mov	edi, eax
	setne	al
	test	al, al
	jne	SHORT $LL58@mem_usage@2
	pop	esi
	pop	ebx
$LN115@mem_usage@2:
	pop	edi

; 191  : 		return sz;

	mov	eax, ebp
	pop	ebp

; 192  : 	}

	pop	ecx
	ret	0
?mem_usage@motions_value@@QAEIXZ ENDP			; motions_value::mem_usage
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$xr_vector@IV?$xalloc@I@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
??4?$xr_vector@IV?$xalloc@I@@@@QAEAAV0@ABV0@@Z PROC	; xr_vector<unsigned int,xalloc<unsigned int> >::operator=, COMDAT
; _this$ = ecx
; ___that$ = eax
	push	ebx
	mov	ebx, ecx
	push	eax
	call	??4?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::operator=
	mov	eax, ebx
	pop	ebx
	ret	0
??4?$xr_vector@IV?$xalloc@I@@@@QAEAAV0@ABV0@@Z ENDP	; xr_vector<unsigned int,xalloc<unsigned int> >::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??Raccel_str_pred@@QBE_NABVshared_str@@0@Z
_TEXT	SEGMENT
??Raccel_str_pred@@QBE_NABVshared_str@@0@Z PROC		; accel_str_pred::operator(), COMDAT
; _x$ = eax
; _y$ = ecx

; 136  : 	IC bool operator()(const shared_str& x, const shared_str& y) const	{	return xr_strcmp(x,y)<0;	}

	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	cmp	edx, eax
	je	SHORT $LN21@operator@40
	test	eax, eax
	je	SHORT $LN11@operator@40
	lea	ecx, DWORD PTR [eax+16]
	jmp	SHORT $LN12@operator@40
$LN11@operator@40:
	xor	ecx, ecx
$LN12@operator@40:
	test	edx, edx
	je	SHORT $LN15@operator@40
	lea	eax, DWORD PTR [edx+16]
	jmp	SHORT $LL16@operator@40
$LN15@operator@40:
	xor	eax, eax
	npad	2
$LL16@operator@40:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN20@operator@40
	test	dl, dl
	je	SHORT $LN21@operator@40
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN20@operator@40
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL16@operator@40
$LN21@operator@40:
	xor	eax, eax
	xor	edx, edx
	test	eax, eax
	setl	dl
	mov	al, dl
	ret	0
$LN20@operator@40:
	sbb	eax, eax
	sbb	eax, -1
	xor	edx, edx
	test	eax, eax
	setl	dl
	mov	al, dl
	ret	0
??Raccel_str_pred@@QBE_NABVshared_str@@0@Z ENDP		; accel_str_pred::operator()
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$xr_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
??4?$xr_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@@QAEAAV0@ABV0@@Z PROC ; xr_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::operator=, COMDAT
; _this$ = ecx
; ___that$ = eax
	push	ebx
	mov	ebx, ecx
	push	eax
	call	??4?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::operator=
	mov	eax, ebx
	pop	ebx
	ret	0
??4?$xr_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@@QAEAAV0@ABV0@@Z ENDP ; xr_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::operator=
_TEXT	ENDS
PUBLIC	??1motion_marks@@QAE@XZ				; motion_marks::~motion_marks
; Function compile flags: /Ogtpy
;	COMDAT ??1motion_marks@@QAE@XZ
_TEXT	SEGMENT
??1motion_marks@@QAE@XZ PROC				; motion_marks::~motion_marks, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR [ecx+12]
	test	eax, eax
	je	SHORT $LN5@motion_mar
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [ecx+12]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN5@motion_mar
	mov	DWORD PTR [ecx+12], 0
$LN5@motion_mar:
	mov	ecx, DWORD PTR [ecx]
	test	ecx, ecx
	je	SHORT $LN46@motion_mar
	push	ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN46@motion_mar:
	ret	0
??1motion_marks@@QAE@XZ ENDP				; motion_marks::~motion_marks
_TEXT	ENDS
PUBLIC	??0motion_marks@@QAE@XZ				; motion_marks::motion_marks
; Function compile flags: /Ogtpy
;	COMDAT ??0motion_marks@@QAE@XZ
_TEXT	SEGMENT
??0motion_marks@@QAE@XZ PROC				; motion_marks::motion_marks, COMDAT
; _this$ = ecx
	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	ret	0
??0motion_marks@@QAE@XZ ENDP				; motion_marks::motion_marks
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
;	COMDAT ??0?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAE@ABV?$xalloc@I@@@Z
_TEXT	SEGMENT
??0?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAE@ABV?$xalloc@I@@@Z PROC ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_Impl_vector<unsigned int,xalloc<unsigned int> >, COMDAT
; _this$ = eax

; 208  :     : _STLP_PRIV _Vector_base<_Tp, _Alloc>(__a) {}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAE@ABV?$xalloc@I@@@Z ENDP ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_Impl_vector<unsigned int,xalloc<unsigned int> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAE@XZ PROC ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::~_Impl_vector<unsigned int,xalloc<unsigned int> >, COMDAT
; _this$ = eax

; 286  :   ~vector() { _STLP_STD::_Destroy_Range(rbegin(), rend()); }

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN34@Impl_vecto@43
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN34@Impl_vecto@43:
	ret	0
??1?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAE@XZ ENDP ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::~_Impl_vector<unsigned int,xalloc<unsigned int> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gmotion_marks@@QAEPAXI@Z
_TEXT	SEGMENT
??_Gmotion_marks@@QAEPAXI@Z PROC			; motion_marks::`scalar deleting destructor', COMDAT
; _this$ = esi
	mov	eax, DWORD PTR [esi+12]
	test	eax, eax
	je	SHORT $LN8@scalar@37
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [esi+12]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN8@scalar@37
	mov	DWORD PTR [esi+12], 0
$LN8@scalar@37:
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN57@scalar@37
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN57@scalar@37:
	mov	eax, esi
	ret	0
??_Gmotion_marks@@QAEPAXI@Z ENDP			; motion_marks::`scalar deleting destructor'
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$__destroy_mv_srcs@V?$reverse_iterator@PAVCMotion@@@stlp_std@@VCMotion@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0PAVCMotion@@@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$__destroy_mv_srcs@V?$reverse_iterator@PAVCMotion@@@stlp_std@@VCMotion@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0PAVCMotion@@@Z PROC ; stlp_std::__destroy_mv_srcs<stlp_std::reverse_iterator<CMotion *>,CMotion>, COMDAT

; 193  :   typedef typename __move_traits<_Tp>::complete _CompleteMove;
; 194  :   __destroy_range_aux(__first, __last, __ptr, _CompleteMove());

	mov	edx, DWORD PTR ___first$[esp-4]
	push	ecx
	mov	ecx, DWORD PTR ___last$[esp]
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], edx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVCMotion@@@stlp_std@@VCMotion@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0PAVCMotion@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotion *>,CMotion>
	add	esp, 8

; 195  : }

	ret	0
??$__destroy_mv_srcs@V?$reverse_iterator@PAVCMotion@@@stlp_std@@VCMotion@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0PAVCMotion@@@Z ENDP ; stlp_std::__destroy_mv_srcs<stlp_std::reverse_iterator<CMotion *>,CMotion>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__destroy_aux@Vmotion_marks@@@stlp_std@@YAXPAVmotion_marks@@ABU__false_type@0@@Z
_TEXT	SEGMENT
??$__destroy_aux@Vmotion_marks@@@stlp_std@@YAXPAVmotion_marks@@ABU__false_type@0@@Z PROC ; stlp_std::__destroy_aux<motion_marks>, COMDAT
; ___pointer$ = ecx

; 53   : { __pointer->~_Tp(); }

	mov	eax, DWORD PTR [ecx+12]
	test	eax, eax
	je	SHORT $LN10@destroy_au@7
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [ecx+12]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN10@destroy_au@7
	mov	DWORD PTR [ecx+12], 0
$LN10@destroy_au@7:
	mov	ecx, DWORD PTR [ecx]
	test	ecx, ecx
	je	SHORT $LN51@destroy_au@7
	push	ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN51@destroy_au@7:
	ret	0
??$__destroy_aux@Vmotion_marks@@@stlp_std@@YAXPAVmotion_marks@@ABU__false_type@0@@Z ENDP ; stlp_std::__destroy_aux<motion_marks>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ??$_M_lower_bound@Vshared_str@@@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@ABEPAU_Rb_tree_node_base@12@ABVshared_str@@@Z
_TEXT	SEGMENT
??$_M_lower_bound@Vshared_str@@@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@ABEPAU_Rb_tree_node_base@12@ABVshared_str@@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_lower_bound<shared_str>, COMDAT
; _this$ = eax
; ___k$ = edx

; 563  :     _Base_ptr __y = __CONST_CAST(_Base_ptr, &this->_M_header._M_data); /* Last node which is not less than __k. */
; 564  :     _Base_ptr __x = _M_root(); /* Current node. */

	mov	ecx, DWORD PTR [eax+4]

; 565  : 
; 566  :     while (__x != 0)

	test	ecx, ecx
	je	SHORT $LN3@M_lower_bo@4
	mov	edx, DWORD PTR [edx]
	npad	7
$LL4@M_lower_bo@4:

; 567  :       if (!_M_key_compare(_S_key(__x), __k))

	cmp	DWORD PTR [ecx+16], edx
	jb	SHORT $LN2@M_lower_bo@4

; 568  :         __y = __x, __x = _S_left(__x);

	mov	eax, ecx
	mov	ecx, DWORD PTR [ecx+8]

; 569  :       else

	jmp	SHORT $LN1@M_lower_bo@4
$LN2@M_lower_bo@4:

; 570  :         __x = _S_right(__x);

	mov	ecx, DWORD PTR [ecx+12]
$LN1@M_lower_bo@4:

; 565  : 
; 566  :     while (__x != 0)

	test	ecx, ecx
	jne	SHORT $LL4@M_lower_bo@4
$LN3@M_lower_bo@4:

; 571  : 
; 572  :     return __y;
; 573  :   }

	ret	0
??$_M_lower_bound@Vshared_str@@@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@ABEPAU_Rb_tree_node_base@12@ABVshared_str@@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_lower_bound<shared_str>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$pair@$$CBVshared_str@@G@stlp_std@@QAEPAXI@Z
_TEXT	SEGMENT
??_G?$pair@$$CBVshared_str@@G@stlp_std@@QAEPAXI@Z PROC	; stlp_std::pair<shared_str const ,unsigned short>::`scalar deleting destructor', COMDAT
; _this$ = eax
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN8@scalar@38
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN8@scalar@38
	mov	DWORD PTR [eax], 0
$LN8@scalar@38:
	ret	0
??_G?$pair@$$CBVshared_str@@G@stlp_std@@QAEPAXI@Z ENDP	; stlp_std::pair<shared_str const ,unsigned short>::`scalar deleting destructor'
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$_Destroy_Moved_Range@V?$reverse_iterator@PAVCMotion@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$_Destroy_Moved_Range@V?$reverse_iterator@PAVCMotion@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0@Z PROC ; stlp_std::_Destroy_Moved_Range<stlp_std::reverse_iterator<CMotion *> >, COMDAT

; 199  :   __destroy_mv_srcs(__first, __last, _STLP_VALUE_TYPE(__first, _ForwardIterator));

	mov	edx, DWORD PTR ___first$[esp-4]
	push	ecx
	mov	ecx, DWORD PTR ___last$[esp]
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], edx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVCMotion@@@stlp_std@@VCMotion@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0PAVCMotion@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotion *>,CMotion>
	add	esp, 8

; 200  : }

	ret	0
??$_Destroy_Moved_Range@V?$reverse_iterator@PAVCMotion@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0@Z ENDP ; stlp_std::_Destroy_Moved_Range<stlp_std::reverse_iterator<CMotion *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__destroy_range_aux@PAVmotion_marks@@V1@@stlp_std@@YAXPAVmotion_marks@@00ABU__false_type@0@@Z
_TEXT	SEGMENT
??$__destroy_range_aux@PAVmotion_marks@@V1@@stlp_std@@YAXPAVmotion_marks@@00ABU__false_type@0@@Z PROC ; stlp_std::__destroy_range_aux<motion_marks *,motion_marks>, COMDAT
; ___first$ = eax
; ___last$ = ebx

; 151  : __destroy_range_aux(_ForwardIterator __first, _ForwardIterator __last, _Tp*, const __false_type& /*_Trivial_destructor*/) {

	push	ebp
	push	esi
	mov	esi, eax

; 152  :   for ( ; __first != __last; ++__first) {

	cmp	esi, ebx
	je	SHORT $LN1@destroy_ra@24
	mov	ebp, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	npad	2
$LL3@destroy_ra@24:

; 153  :     __destroy_aux(&(*__first), __false_type());

	mov	eax, DWORD PTR [esi+12]
	test	eax, eax
	je	SHORT $LN15@destroy_ra@24
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [esi+12]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN15@destroy_ra@24
	mov	DWORD PTR [esi+12], 0
$LN15@destroy_ra@24:
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN56@destroy_ra@24
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	ebp
$LN56@destroy_ra@24:
	add	esi, 16					; 00000010H
	cmp	esi, ebx
	jne	SHORT $LL3@destroy_ra@24
$LN1@destroy_ra@24:

; 154  : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 155  :     memset((char*)&(*__first), _STLP_SHRED_BYTE, sizeof(_Tp));
; 156  : #endif
; 157  :   }
; 158  : }

	pop	esi
	pop	ebp
	ret	0
??$__destroy_range_aux@PAVmotion_marks@@V1@@stlp_std@@YAXPAVmotion_marks@@00ABU__false_type@0@@Z ENDP ; stlp_std::__destroy_range_aux<motion_marks *,motion_marks>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__destroy_range_aux@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@Vmotion_marks@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0PAVmotion_marks@@ABU__false_type@0@@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$__destroy_range_aux@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@Vmotion_marks@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0PAVmotion_marks@@ABU__false_type@0@@Z PROC ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<motion_marks *>,motion_marks>, COMDAT

; 151  : __destroy_range_aux(_ForwardIterator __first, _ForwardIterator __last, _Tp*, const __false_type& /*_Trivial_destructor*/) {

	push	ebx

; 152  :   for ( ; __first != __last; ++__first) {

	mov	ebx, DWORD PTR ___last$[esp]
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR ___first$[esp+12]
	cmp	edi, ebx
	je	SHORT $LN1@destroy_ra@25
	mov	ebp, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	lea	esi, DWORD PTR [edi-4]
	npad	7
$LL6@destroy_ra@25:

; 153  :     __destroy_aux(&(*__first), __false_type());

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN27@destroy_ra@25
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN27@destroy_ra@25
	mov	DWORD PTR [esi], 0
$LN27@destroy_ra@25:
	mov	eax, DWORD PTR [esi-12]
	test	eax, eax
	je	SHORT $LN68@destroy_ra@25
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	ebp
$LN68@destroy_ra@25:
	sub	edi, 16					; 00000010H
	sub	esi, 16					; 00000010H
	cmp	edi, ebx
	jne	SHORT $LL6@destroy_ra@25
$LN1@destroy_ra@25:

; 154  : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 155  :     memset((char*)&(*__first), _STLP_SHRED_BYTE, sizeof(_Tp));
; 156  : #endif
; 157  :   }
; 158  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	0
??$__destroy_range_aux@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@Vmotion_marks@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0PAVmotion_marks@@ABU__false_type@0@@Z ENDP ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<motion_marks *>,motion_marks>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ??$_M_find@Vshared_str@@@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@ABEPAU_Rb_tree_node_base@12@ABVshared_str@@@Z
_TEXT	SEGMENT
___k$ = 8						; size = 4
??$_M_find@Vshared_str@@@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@ABEPAU_Rb_tree_node_base@12@ABVshared_str@@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_find<shared_str>, COMDAT
; _this$ = edx

; 544  :     _Base_ptr __y = __CONST_CAST(_Base_ptr, &this->_M_header._M_data);      // Last node which is not less than __k.
; 545  :     _Base_ptr __x = _M_root();      // Current node.

	mov	ecx, DWORD PTR [edx+4]

; 546  : 
; 547  :     while (__x != 0)

	test	ecx, ecx
	mov	eax, edx
	je	SHORT $LN1@M_find@6
	push	esi
	mov	esi, DWORD PTR ___k$[esp]
	mov	esi, DWORD PTR [esi]
$LL6@M_find@6:

; 548  :       if (!_M_key_compare(_S_key(__x), __k))

	cmp	DWORD PTR [ecx+16], esi
	jb	SHORT $LN4@M_find@6

; 549  :         __y = __x, __x = _S_left(__x);

	mov	eax, ecx
	mov	ecx, DWORD PTR [ecx+8]

; 550  :       else

	jmp	SHORT $LN3@M_find@6
$LN4@M_find@6:

; 551  :         __x = _S_right(__x);

	mov	ecx, DWORD PTR [ecx+12]
$LN3@M_find@6:

; 546  : 
; 547  :     while (__x != 0)

	test	ecx, ecx
	jne	SHORT $LL6@M_find@6

; 552  : 
; 553  :     if (__y != &this->_M_header._M_data) {

	cmp	eax, edx
	je	SHORT $LN47@M_find@6

; 554  :       if (_M_key_compare(__k, _S_key(__y))) {

	cmp	esi, DWORD PTR [eax+16]
	jae	SHORT $LN47@M_find@6

; 555  :         __y = __CONST_CAST(_Base_ptr, &this->_M_header._M_data);
; 556  :       }
; 557  :     }
; 558  :     return __y;

	mov	eax, edx
$LN47@M_find@6:
	pop	esi
$LN1@M_find@6:

; 559  :   }

	ret	4
??$_M_find@Vshared_str@@@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@ABEPAU_Rb_tree_node_base@12@ABVshared_str@@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_find<shared_str>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_M_find@Vshared_str@@@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@ABEPAU_Rb_tree_node_base@12@ABVshared_str@@@Z
_TEXT	SEGMENT
___k$ = 8						; size = 4
??$_M_find@Vshared_str@@@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@ABEPAU_Rb_tree_node_base@12@ABVshared_str@@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_find<shared_str>, COMDAT
; _this$ = edx

; 544  :     _Base_ptr __y = __CONST_CAST(_Base_ptr, &this->_M_header._M_data);      // Last node which is not less than __k.
; 545  :     _Base_ptr __x = _M_root();      // Current node.

	mov	ecx, DWORD PTR [edx+4]

; 546  : 
; 547  :     while (__x != 0)

	test	ecx, ecx
	mov	eax, edx
	je	SHORT $LN1@M_find@7
	push	esi
	mov	esi, DWORD PTR ___k$[esp]
	mov	esi, DWORD PTR [esi]
$LL6@M_find@7:

; 548  :       if (!_M_key_compare(_S_key(__x), __k))

	cmp	DWORD PTR [ecx+16], esi
	jb	SHORT $LN4@M_find@7

; 549  :         __y = __x, __x = _S_left(__x);

	mov	eax, ecx
	mov	ecx, DWORD PTR [ecx+8]

; 550  :       else

	jmp	SHORT $LN3@M_find@7
$LN4@M_find@7:

; 551  :         __x = _S_right(__x);

	mov	ecx, DWORD PTR [ecx+12]
$LN3@M_find@7:

; 546  : 
; 547  :     while (__x != 0)

	test	ecx, ecx
	jne	SHORT $LL6@M_find@7

; 552  : 
; 553  :     if (__y != &this->_M_header._M_data) {

	cmp	eax, edx
	je	SHORT $LN47@M_find@7

; 554  :       if (_M_key_compare(__k, _S_key(__y))) {

	cmp	esi, DWORD PTR [eax+16]
	jae	SHORT $LN47@M_find@7

; 555  :         __y = __CONST_CAST(_Base_ptr, &this->_M_header._M_data);
; 556  :       }
; 557  :     }
; 558  :     return __y;

	mov	eax, edx
$LN47@M_find@7:
	pop	esi
$LN1@M_find@7:

; 559  :   }

	ret	4
??$_M_find@Vshared_str@@@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@ABEPAU_Rb_tree_node_base@12@ABVshared_str@@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_find<shared_str>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$lower_bound@Vshared_str@@@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@12@ABVshared_str@@@Z
_TEXT	SEGMENT
___x$ = 8						; size = 4
??$lower_bound@Vshared_str@@@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@12@ABVshared_str@@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::lower_bound<shared_str>, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 596  :   iterator lower_bound(const _KT& __x) { return iterator(_M_lower_bound(__x)); }

	mov	edx, ecx
	mov	ecx, DWORD PTR [ecx+4]
	test	ecx, ecx
	je	SHORT $LN34@lower_boun@4
	push	esi
	mov	esi, DWORD PTR ___x$[esp]
	mov	esi, DWORD PTR [esi]
$LL6@lower_boun@4:
	cmp	DWORD PTR [ecx+16], esi
	jb	SHORT $LN4@lower_boun@4
	mov	edx, ecx
	mov	ecx, DWORD PTR [ecx+8]
	jmp	SHORT $LN3@lower_boun@4
$LN4@lower_boun@4:
	mov	ecx, DWORD PTR [ecx+12]
$LN3@lower_boun@4:
	test	ecx, ecx
	jne	SHORT $LL6@lower_boun@4
	pop	esi
$LN34@lower_boun@4:
	mov	DWORD PTR [eax], edx
	ret	4
??$lower_bound@Vshared_str@@@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@12@ABVshared_str@@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::lower_bound<shared_str>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$__destroy_aux@U?$pair@$$CBVshared_str@@G@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@G@0@ABU__false_type@0@@Z
_TEXT	SEGMENT
??$__destroy_aux@U?$pair@$$CBVshared_str@@G@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@G@0@ABU__false_type@0@@Z PROC ; stlp_std::__destroy_aux<stlp_std::pair<shared_str const ,unsigned short> >, COMDAT
; ___pointer$ = ecx

; 53   : { __pointer->~_Tp(); }

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN10@destroy_au@8
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN10@destroy_au@8
	mov	DWORD PTR [ecx], 0
$LN10@destroy_au@8:
	ret	0
??$__destroy_aux@U?$pair@$$CBVshared_str@@G@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@G@0@ABU__false_type@0@@Z ENDP ; stlp_std::__destroy_aux<stlp_std::pair<shared_str const ,unsigned short> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_pair.h
_TEXT	ENDS
;	COMDAT ??0?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@QAE@ABU01@@Z
_TEXT	SEGMENT
??0?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@QAE@ABU01@@Z PROC ; stlp_std::pair<shared_str const ,motions_value *>::pair<shared_str const ,motions_value *>, COMDAT
; _this$ = eax
; ___o$ = esi

; 62   :   pair(const pair<_T1,_T2>& __o) : first(__o.first), second(__o.second) {}

	mov	DWORD PTR [eax], 0
	mov	edx, DWORD PTR [esi]
	test	edx, edx
	je	SHORT $LN5@pair@5
	add	DWORD PTR [edx], 1
$LN5@pair@5:
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN8@pair@5
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN8@pair@5
	mov	DWORD PTR [eax], 0
$LN8@pair@5:
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
	ret	0
??0?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@QAE@ABU01@@Z ENDP ; stlp_std::pair<shared_str const ,motions_value *>::pair<shared_str const ,motions_value *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$pair@$$CBVshared_str@@G@stlp_std@@QAE@ABU01@@Z
_TEXT	SEGMENT
??0?$pair@$$CBVshared_str@@G@stlp_std@@QAE@ABU01@@Z PROC ; stlp_std::pair<shared_str const ,unsigned short>::pair<shared_str const ,unsigned short>, COMDAT
; _this$ = eax
; ___o$ = esi

; 62   :   pair(const pair<_T1,_T2>& __o) : first(__o.first), second(__o.second) {}

	mov	DWORD PTR [eax], 0
	mov	edx, DWORD PTR [esi]
	test	edx, edx
	je	SHORT $LN5@pair@6
	add	DWORD PTR [edx], 1
$LN5@pair@6:
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN8@pair@6
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN8@pair@6
	mov	DWORD PTR [eax], 0
$LN8@pair@6:
	mov	DWORD PTR [eax], edx
	mov	dx, WORD PTR [esi+4]
	mov	WORD PTR [eax+4], dx
	ret	0
??0?$pair@$$CBVshared_str@@G@stlp_std@@QAE@ABU01@@Z ENDP ; stlp_std::pair<shared_str const ,unsigned short>::pair<shared_str const ,unsigned short>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?_M_clear_after_move@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXXZ
_TEXT	SEGMENT
?_M_clear_after_move@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXXZ PROC ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_clear_after_move, COMDAT
; _this$ = eax

; 620  :   void _M_clear_after_move() {

	push	esi
	mov	esi, eax

; 621  :     _STLP_STD::_Destroy_Moved_Range(rbegin(), rend());

	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	push	ecx
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVCMotion@@@stlp_std@@VCMotion@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0PAVCMotion@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotion *>,CMotion>

; 622  :     this->_M_end_of_storage.deallocate(this->_M_start, this->_M_end_of_storage._M_data - this->_M_start);

	mov	esi, DWORD PTR [esi]
	add	esp, 8
	test	esi, esi
	je	SHORT $LN29@M_clear_af@2
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN29@M_clear_af@2:

; 623  :   }

	pop	esi
	ret	0
?_M_clear_after_move@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXXZ ENDP ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_clear_after_move
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@QAEPAXI@Z
_TEXT	SEGMENT
??_G?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@QAEPAXI@Z PROC ; stlp_std::pair<shared_str const ,motions_value *>::`scalar deleting destructor', COMDAT
; _this$ = eax
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN8@scalar@39
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN8@scalar@39
	mov	DWORD PTR [eax], 0
$LN8@scalar@39:
	ret	0
??_G?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@QAEPAXI@Z ENDP ; stlp_std::pair<shared_str const ,motions_value *>::`scalar deleting destructor'
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$_Copy_Construct@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@PAUmotions_value@@@0@ABU10@@Z
_TEXT	SEGMENT
??$_Copy_Construct@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@PAUmotions_value@@@0@ABU10@@Z PROC ; stlp_std::_Copy_Construct<stlp_std::pair<shared_str const ,motions_value *> >, COMDAT
; ___p$ = eax
; ___val$ = esi

; 110  : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 111  :   memset((char*)__p, _STLP_SHRED_BYTE, sizeof(_Tp));
; 112  : #endif
; 113  :   _STLP_PLACEMENT_NEW (__p) _Tp(__val);

	test	eax, eax
	je	SHORT $LN3@Copy_Const@25
	mov	DWORD PTR [eax], 0
	mov	edx, DWORD PTR [esi]
	test	edx, edx
	je	SHORT $LN11@Copy_Const@25
	add	DWORD PTR [edx], 1
$LN11@Copy_Const@25:
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN14@Copy_Const@25
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN14@Copy_Const@25
	mov	DWORD PTR [eax], 0
$LN14@Copy_Const@25:
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
$LN3@Copy_Const@25:

; 114  : }

	ret	0
??$_Copy_Construct@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@PAUmotions_value@@@0@ABU10@@Z ENDP ; stlp_std::_Copy_Construct<stlp_std::pair<shared_str const ,motions_value *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Copy_Construct@U?$pair@$$CBVshared_str@@G@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@G@0@ABU10@@Z
_TEXT	SEGMENT
??$_Copy_Construct@U?$pair@$$CBVshared_str@@G@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@G@0@ABU10@@Z PROC ; stlp_std::_Copy_Construct<stlp_std::pair<shared_str const ,unsigned short> >, COMDAT
; ___p$ = eax
; ___val$ = esi

; 110  : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 111  :   memset((char*)__p, _STLP_SHRED_BYTE, sizeof(_Tp));
; 112  : #endif
; 113  :   _STLP_PLACEMENT_NEW (__p) _Tp(__val);

	test	eax, eax
	je	SHORT $LN3@Copy_Const@26
	mov	DWORD PTR [eax], 0
	mov	edx, DWORD PTR [esi]
	test	edx, edx
	je	SHORT $LN11@Copy_Const@26
	add	DWORD PTR [edx], 1
$LN11@Copy_Const@26:
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN14@Copy_Const@26
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN14@Copy_Const@26
	mov	DWORD PTR [eax], 0
$LN14@Copy_Const@26:
	mov	DWORD PTR [eax], edx
	mov	dx, WORD PTR [esi+4]
	mov	WORD PTR [eax+4], dx
$LN3@Copy_Const@26:

; 114  : }

	ret	0
??$_Copy_Construct@U?$pair@$$CBVshared_str@@G@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@G@0@ABU10@@Z ENDP ; stlp_std::_Copy_Construct<stlp_std::pair<shared_str const ,unsigned short> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__destroy_range@PAVmotion_marks@@V1@@stlp_std@@YAXPAVmotion_marks@@00@Z
_TEXT	SEGMENT
??$__destroy_range@PAVmotion_marks@@V1@@stlp_std@@YAXPAVmotion_marks@@00@Z PROC ; stlp_std::__destroy_range<motion_marks *,motion_marks>, COMDAT
; ___first$ = eax
; ___last$ = ebx

; 175  :   typedef typename __type_traits<_Tp>::has_trivial_destructor _Trivial_destructor;
; 176  :   __destroy_range_aux(__first, __last, __ptr, _Trivial_destructor());

	jmp	??$__destroy_range_aux@PAVmotion_marks@@V1@@stlp_std@@YAXPAVmotion_marks@@00ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<motion_marks *,motion_marks>
??$__destroy_range@PAVmotion_marks@@V1@@stlp_std@@YAXPAVmotion_marks@@00@Z ENDP ; stlp_std::__destroy_range<motion_marks *,motion_marks>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__destroy_aux@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@PAUmotions_value@@@0@ABU__false_type@0@@Z
_TEXT	SEGMENT
??$__destroy_aux@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@PAUmotions_value@@@0@ABU__false_type@0@@Z PROC ; stlp_std::__destroy_aux<stlp_std::pair<shared_str const ,motions_value *> >, COMDAT
; ___pointer$ = ecx

; 53   : { __pointer->~_Tp(); }

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN10@destroy_au@9
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN10@destroy_au@9
	mov	DWORD PTR [ecx], 0
$LN10@destroy_au@9:
	ret	0
??$__destroy_aux@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@PAUmotions_value@@@0@ABU__false_type@0@@Z ENDP ; stlp_std::__destroy_aux<stlp_std::pair<shared_str const ,motions_value *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__destroy_range@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@Vmotion_marks@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0PAVmotion_marks@@@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$__destroy_range@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@Vmotion_marks@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0PAVmotion_marks@@@Z PROC ; stlp_std::__destroy_range<stlp_std::reverse_iterator<motion_marks *>,motion_marks>, COMDAT

; 175  :   typedef typename __type_traits<_Tp>::has_trivial_destructor _Trivial_destructor;
; 176  :   __destroy_range_aux(__first, __last, __ptr, _Trivial_destructor());

	mov	edx, DWORD PTR ___first$[esp-4]
	push	ecx
	mov	ecx, DWORD PTR ___last$[esp]
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], edx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@Vmotion_marks@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0PAVmotion_marks@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<motion_marks *>,motion_marks>
	add	esp, 8

; 177  : }

	ret	0
??$__destroy_range@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@Vmotion_marks@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0PAVmotion_marks@@@Z ENDP ; stlp_std::__destroy_range<stlp_std::reverse_iterator<motion_marks *>,motion_marks>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ??$find@Vshared_str@@@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@12@ABVshared_str@@@Z
_TEXT	SEGMENT
___k$ = 8						; size = 4
??$find@Vshared_str@@@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@12@ABVshared_str@@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::find<shared_str>, COMDAT
; _this$ = esi
; ___$ReturnUdt$ = eax

; 538  :   iterator find(const _KT& __k) { return iterator(_M_find(__k)); }

	mov	ecx, DWORD PTR [esi+4]
	test	ecx, ecx
	mov	edx, esi
	je	SHORT $LN52@find@10
	push	edi
	mov	edi, DWORD PTR ___k$[esp]
	mov	edi, DWORD PTR [edi]
$LL8@find@10:
	cmp	DWORD PTR [ecx+16], edi
	jb	SHORT $LN6@find@10
	mov	edx, ecx
	mov	ecx, DWORD PTR [ecx+8]
	jmp	SHORT $LN5@find@10
$LN6@find@10:
	mov	ecx, DWORD PTR [ecx+12]
$LN5@find@10:
	test	ecx, ecx
	jne	SHORT $LL8@find@10
	cmp	edx, esi
	je	SHORT $LN51@find@10
	cmp	edi, DWORD PTR [edx+16]
	jae	SHORT $LN51@find@10
	mov	DWORD PTR [eax], esi
	pop	edi
	ret	4
$LN51@find@10:
	mov	DWORD PTR [eax], edx
	pop	edi
	ret	4
$LN52@find@10:
	mov	DWORD PTR [eax], edx
	ret	4
??$find@Vshared_str@@@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@12@ABVshared_str@@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::find<shared_str>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$find@Vshared_str@@@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@12@ABVshared_str@@@Z
_TEXT	SEGMENT
___k$ = 8						; size = 4
??$find@Vshared_str@@@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@12@ABVshared_str@@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::find<shared_str>, COMDAT
; _this$ = esi
; ___$ReturnUdt$ = eax

; 538  :   iterator find(const _KT& __k) { return iterator(_M_find(__k)); }

	mov	ecx, DWORD PTR [esi+4]
	test	ecx, ecx
	mov	edx, esi
	je	SHORT $LN52@find@11
	push	edi
	mov	edi, DWORD PTR ___k$[esp]
	mov	edi, DWORD PTR [edi]
$LL8@find@11:
	cmp	DWORD PTR [ecx+16], edi
	jb	SHORT $LN6@find@11
	mov	edx, ecx
	mov	ecx, DWORD PTR [ecx+8]
	jmp	SHORT $LN5@find@11
$LN6@find@11:
	mov	ecx, DWORD PTR [ecx+12]
$LN5@find@11:
	test	ecx, ecx
	jne	SHORT $LL8@find@11
	cmp	edx, esi
	je	SHORT $LN51@find@11
	cmp	edi, DWORD PTR [edx+16]
	jae	SHORT $LN51@find@11
	mov	DWORD PTR [eax], esi
	pop	edi
	ret	4
$LN51@find@11:
	mov	DWORD PTR [eax], edx
	pop	edi
	ret	4
$LN52@find@11:
	mov	DWORD PTR [eax], edx
	ret	4
??$find@Vshared_str@@@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@12@ABVshared_str@@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::find<shared_str>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_map.h
_TEXT	ENDS
;	COMDAT ??$lower_bound@Vshared_str@@@?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@1@ABVshared_str@@@Z
_TEXT	SEGMENT
___x$ = 8						; size = 4
??$lower_bound@Vshared_str@@@?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@1@ABVshared_str@@@Z PROC ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::lower_bound<shared_str>, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 211  :   iterator lower_bound(const _KT& __x) { return _M_t.lower_bound(__x); }

	mov	edx, ecx
	mov	ecx, DWORD PTR [ecx+4]
	test	ecx, ecx
	je	SHORT $LN36@lower_boun@5
	push	esi
	mov	esi, DWORD PTR ___x$[esp]
	mov	esi, DWORD PTR [esi]
$LL8@lower_boun@5:
	cmp	DWORD PTR [ecx+16], esi
	jb	SHORT $LN6@lower_boun@5
	mov	edx, ecx
	mov	ecx, DWORD PTR [ecx+8]
	jmp	SHORT $LN5@lower_boun@5
$LN6@lower_boun@5:
	mov	ecx, DWORD PTR [ecx+12]
$LN5@lower_boun@5:
	test	ecx, ecx
	jne	SHORT $LL8@lower_boun@5
	pop	esi
$LN36@lower_boun@5:
	mov	DWORD PTR [eax], edx
	ret	4
??$lower_bound@Vshared_str@@@?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@1@ABVshared_str@@@Z ENDP ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::lower_bound<shared_str>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$_Destroy@U?$pair@$$CBVshared_str@@G@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@G@0@@Z
_TEXT	SEGMENT
??$_Destroy@U?$pair@$$CBVshared_str@@G@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@G@0@@Z PROC ; stlp_std::_Destroy<stlp_std::pair<shared_str const ,unsigned short> >, COMDAT
; ___pointer$ = ecx

; 60   : #if defined (_STLP_MSVC) && (_STLP_MSVC <= 1010)
; 61   :   __pointer;
; 62   : #endif
; 63   :   typedef typename __type_traits<_Tp>::has_trivial_destructor _Trivial_destructor;
; 64   :   __destroy_aux(__pointer, _Trivial_destructor());

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN12@Destroy
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN12@Destroy
	mov	DWORD PTR [ecx], 0
$LN12@Destroy:

; 65   : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 66   :   memset(__REINTERPRET_CAST(char*, __pointer), _STLP_SHRED_BYTE, sizeof(_Tp));
; 67   : #endif
; 68   : }

	ret	0
??$_Destroy@U?$pair@$$CBVshared_str@@G@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@G@0@@Z ENDP ; stlp_std::_Destroy<stlp_std::pair<shared_str const ,unsigned short> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.c
_TEXT	ENDS
;	COMDAT ?_M_insert_overflow_aux@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXPAVCMotion@@ABV4@ABU__false_type@3@I_N@Z
_TEXT	SEGMENT
___old_size$ = -4					; size = 4
___pos$ = 8						; size = 4
___x$ = 12						; size = 4
___fill_len$ = 16					; size = 4
?_M_insert_overflow_aux@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXPAVCMotion@@ABV4@ABU__false_type@3@I_N@Z PROC ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_insert_overflow_aux, COMDAT
; _this$ = esi

; 84   :                                                  size_type __fill_len, bool __atend ) {

	push	ecx

; 85   :   const size_type __old_size = size();

	mov	ecx, DWORD PTR [esi+4]
	sub	ecx, DWORD PTR [esi]
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 4
	push	ebx
	mov	eax, edx
	push	ebp
	shr	eax, 31					; 0000001fH
	push	edi
	add	eax, edx

; 86   :   size_type __len = __old_size + (max)(__old_size, __fill_len);

	lea	ecx, DWORD PTR ___fill_len$[esp+12]
	push	ecx
	lea	edx, DWORD PTR ___old_size$[esp+20]
	push	edx
	mov	DWORD PTR ___old_size$[esp+24], eax
	call	??$max@I@stlp_std@@YAABIABI0@Z		; stlp_std::max<unsigned int>
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR ___old_size$[esp+24]

; 87   : 
; 88   :   pointer __new_start = this->_M_end_of_storage.allocate(__len, __len);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	lea	edi, DWORD PTR [eax+eax*4]
	add	edi, edi
	add	edi, edi
	add	esp, 8
	add	edi, edi
	push	edi
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 89   :   pointer __new_finish = __new_start;
; 90   :   _STLP_TRY {
; 91   :     __new_finish = _STLP_PRIV __uninitialized_move(this->_M_start, __pos, __new_start, _TrivialUCopy(), _Movable());

	mov	ecx, DWORD PTR [esi]
	mov	ebp, eax
	mov	eax, DWORD PTR ___pos$[esp+12]
	mov	edx, ebp
	call	??$__ucopy@PAVCMotion@@PAV1@H@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<CMotion *,CMotion *,int>

; 92   :     // handle insertion
; 93   :     if (__fill_len == 1) {

	mov	ecx, DWORD PTR ___fill_len$[esp+12]
	cmp	ecx, 1
	mov	ebx, eax
	jne	SHORT $LN3@M_insert_o@7

; 94   :       _Copy_Construct(__new_finish, __x);

	test	ebx, ebx
	je	SHORT $LN28@M_insert_o@7
	mov	eax, DWORD PTR ___x$[esp+12]
	push	eax
	mov	ecx, ebx
	call	??0CMotion@@QAE@ABV0@@Z
$LN28@M_insert_o@7:

; 95   :       ++__new_finish;

	add	ebx, 40					; 00000028H

; 96   :     } else

	jmp	SHORT $LN69@M_insert_o@7
$LN3@M_insert_o@7:

; 97   :       __new_finish = _STLP_PRIV __uninitialized_fill_n(__new_finish, __fill_len, __x);

	mov	edx, DWORD PTR ___x$[esp+12]
	push	edx
	call	??$__uninitialized_fill_n@PAVCMotion@@IV1@@priv@stlp_std@@YAPAVCMotion@@PAV2@IABV2@@Z ; stlp_std::priv::__uninitialized_fill_n<CMotion *,unsigned int,CMotion>
	add	esp, 4
	mov	ebx, eax
$LN69@M_insert_o@7:

; 98   :     if (!__atend)
; 99   :       __new_finish = _STLP_PRIV __uninitialized_move(__pos, this->_M_finish, __new_finish, _TrivialUCopy(), _Movable()); // copy remainder

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR ___pos$[esp+12]
	mov	edx, ebx
	call	??$__ucopy@PAVCMotion@@PAV1@H@priv@stlp_std@@YAPAVCMotion@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<CMotion *,CMotion *,int>

; 100  :   }
; 101  :   _STLP_UNWIND((_STLP_STD::_Destroy_Range(__new_start,__new_finish),
; 102  :                this->_M_end_of_storage.deallocate(__new_start,__len)))
; 103  :   _M_clear_after_move();

	mov	ecx, DWORD PTR [esi+4]
	push	ecx
	mov	ebx, eax
	mov	eax, DWORD PTR [esi]
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVCMotion@@@stlp_std@@VCMotion@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0PAVCMotion@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotion *>,CMotion>
	mov	eax, DWORD PTR [esi]
	add	esp, 8
	test	eax, eax
	je	SHORT $LN64@M_insert_o@7
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN64@M_insert_o@7:

; 104  :   _M_set(__new_start, __new_finish, __new_start + __len);

	add	edi, ebp
	mov	DWORD PTR [esi+8], edi

; 105  : }

	pop	edi
	mov	DWORD PTR [esi], ebp
	pop	ebp
	mov	DWORD PTR [esi+4], ebx
	pop	ebx
	pop	ecx
	ret	12					; 0000000cH
?_M_insert_overflow_aux@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXPAVCMotion@@ABV4@ABU__false_type@3@I_N@Z ENDP ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_insert_overflow_aux
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_insert_overflow@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEXPAU?$pair@MM@3@ABU43@ABU__true_type@3@I_N@Z
_TEXT	SEGMENT
___old_size$ = -8					; size = 4
tv298 = -4						; size = 4
___pos$ = 8						; size = 4
___fill_len$ = 12					; size = 4
?_M_insert_overflow@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEXPAU?$pair@MM@3@ABU43@ABU__true_type@3@I_N@Z PROC ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_insert_overflow, COMDAT
; _this$ = edi
; ___x$ = eax

; 109  :                                              size_type __fill_len, bool __atend ) {

	sub	esp, 8
	push	ebx
	mov	ebx, eax

; 110  :   const size_type __old_size = size();

	mov	eax, DWORD PTR [edi+4]
	sub	eax, DWORD PTR [edi]
	push	ebp
	push	esi

; 111  :   size_type __len = __old_size + (max)(__old_size, __fill_len);

	lea	ecx, DWORD PTR ___fill_len$[esp+16]
	push	ecx
	lea	edx, DWORD PTR ___old_size$[esp+24]
	sar	eax, 3
	push	edx
	mov	DWORD PTR ___old_size$[esp+28], eax
	call	??$max@I@stlp_std@@YAABIABI0@Z		; stlp_std::max<unsigned int>
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR ___old_size$[esp+28]

; 112  : 
; 113  :   pointer __new_start = this->_M_end_of_storage.allocate(__len, __len);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	eax, eax
	add	eax, eax
	add	eax, eax
	add	esp, 8
	push	eax
	mov	DWORD PTR tv298[esp+24], eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 114  :   pointer __new_finish = __STATIC_CAST(pointer, _STLP_PRIV __copy_trivial(this->_M_start, __pos, __new_start));

	mov	edx, DWORD PTR ___pos$[esp+16]
	mov	ebp, eax
	mov	eax, DWORD PTR [edi]
	mov	esi, edx
	sub	esi, eax
	je	SHORT $LN22@M_insert_o@8
	push	esi
	push	eax
	push	ebp
	call	DWORD PTR __imp__memmove
	mov	edx, DWORD PTR ___pos$[esp+28]
	add	esp, 12					; 0000000cH
	add	eax, esi
	jmp	SHORT $LN23@M_insert_o@8
$LN22@M_insert_o@8:
	mov	eax, ebp
$LN23@M_insert_o@8:

; 115  :   // handle insertion
; 116  :   __new_finish = _STLP_PRIV __fill_n(__new_finish, __fill_len, __x);

	mov	ecx, DWORD PTR ___fill_len$[esp+16]
	test	ecx, ecx
	jbe	SHORT $LN24@M_insert_o@8
	npad	1
$LL26@M_insert_o@8:
	mov	esi, DWORD PTR [ebx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ebx+4]
	mov	DWORD PTR [eax+4], esi
	sub	ecx, 1
	add	eax, 8
	test	ecx, ecx
	ja	SHORT $LL26@M_insert_o@8
$LN24@M_insert_o@8:

; 117  :   if (!__atend)
; 118  :     __new_finish = __STATIC_CAST(pointer, _STLP_PRIV __copy_trivial(__pos, this->_M_finish, __new_finish)); // copy remainder

	mov	esi, DWORD PTR [edi+4]
	sub	esi, edx
	mov	ebx, eax
	je	SHORT $LN31@M_insert_o@8
	push	esi
	push	edx
	push	eax
	call	DWORD PTR __imp__memmove
	mov	ebx, eax
	add	esp, 12					; 0000000cH
	add	ebx, esi
$LN31@M_insert_o@8:

; 119  :   _M_clear();

	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN63@M_insert_o@8
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN63@M_insert_o@8:

; 120  :   _M_set(__new_start, __new_finish, __new_start + __len);

	mov	eax, DWORD PTR tv298[esp+20]

; 121  : }

	pop	esi
	add	eax, ebp
	mov	DWORD PTR [edi], ebp
	pop	ebp
	mov	DWORD PTR [edi+4], ebx
	mov	DWORD PTR [edi+8], eax
	pop	ebx
	add	esp, 8
	ret	8
?_M_insert_overflow@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEXPAU?$pair@MM@3@ABU43@ABU__true_type@3@I_N@Z ENDP ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_insert_overflow
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ?_M_create_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@PAUmotions_value@@@3@@Z
_TEXT	SEGMENT
?_M_create_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@PAUmotions_value@@@3@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_create_node, COMDAT
; ___x$ = edi

; 312  :     _Link_type __tmp = this->_M_header.allocate(1);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 313  :     _STLP_TRY {
; 314  :       _Copy_Construct(&__tmp->_M_value_field, __x);

	lea	ecx, DWORD PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN11@M_create_n@6
	push	esi
	mov	DWORD PTR [ecx], 0
	mov	esi, DWORD PTR [edi]
	test	esi, esi
	je	SHORT $LN19@M_create_n@6
	add	DWORD PTR [esi], 1
$LN19@M_create_n@6:
	mov	edx, DWORD PTR [ecx]
	test	edx, edx
	je	SHORT $LN22@M_create_n@6
	add	DWORD PTR [edx], -1
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN22@M_create_n@6
	mov	DWORD PTR [ecx], 0
$LN22@M_create_n@6:
	mov	DWORD PTR [ecx], esi
	mov	edx, DWORD PTR [edi+4]
	mov	DWORD PTR [ecx+4], edx
	pop	esi
$LN11@M_create_n@6:

; 315  :     }
; 316  :     _STLP_UNWIND(this->_M_header.deallocate(__tmp,1))
; 317  :     _S_left(__tmp) = 0;

	mov	DWORD PTR [eax+8], 0

; 318  :     _S_right(__tmp) = 0;

	mov	DWORD PTR [eax+12], 0

; 319  :     return __tmp;
; 320  :   }

	ret	0
?_M_create_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@PAUmotions_value@@@3@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_create_node
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_create_node@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@G@3@@Z
_TEXT	SEGMENT
?_M_create_node@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@G@3@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_create_node, COMDAT
; ___x$ = edi

; 312  :     _Link_type __tmp = this->_M_header.allocate(1);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 313  :     _STLP_TRY {
; 314  :       _Copy_Construct(&__tmp->_M_value_field, __x);

	lea	ecx, DWORD PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN11@M_create_n@7
	push	esi
	mov	DWORD PTR [ecx], 0
	mov	esi, DWORD PTR [edi]
	test	esi, esi
	je	SHORT $LN19@M_create_n@7
	add	DWORD PTR [esi], 1
$LN19@M_create_n@7:
	mov	edx, DWORD PTR [ecx]
	test	edx, edx
	je	SHORT $LN22@M_create_n@7
	add	DWORD PTR [edx], -1
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN22@M_create_n@7
	mov	DWORD PTR [ecx], 0
$LN22@M_create_n@7:
	mov	DWORD PTR [ecx], esi
	mov	dx, WORD PTR [edi+4]
	mov	WORD PTR [ecx+4], dx
	pop	esi
$LN11@M_create_n@7:

; 315  :     }
; 316  :     _STLP_UNWIND(this->_M_header.deallocate(__tmp,1))
; 317  :     _S_left(__tmp) = 0;

	mov	DWORD PTR [eax+8], 0

; 318  :     _S_right(__tmp) = 0;

	mov	DWORD PTR [eax+12], 0

; 319  :     return __tmp;
; 320  :   }

	ret	0
?_M_create_node@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@G@3@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_create_node
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ??0?$vector@VCMotion@@V?$xalloc@VCMotion@@@@@stlp_std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$vector@VCMotion@@V?$xalloc@VCMotion@@@@@stlp_std@@QAE@ABV01@@Z PROC ; stlp_std::vector<CMotion,xalloc<CMotion> >::vector<CMotion,xalloc<CMotion> >, COMDAT
; _this$ = eax
; ___x$ = ebx

; 123  :   vector(const _Self& __x)

	push	esi
	mov	esi, eax
	call	??0?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_Impl_vector<CMotion,xalloc<CMotion> >
	mov	eax, esi
	pop	esi
	ret	0
??0?$vector@VCMotion@@V?$xalloc@VCMotion@@@@@stlp_std@@QAE@ABV01@@Z ENDP ; stlp_std::vector<CMotion,xalloc<CMotion> >::vector<CMotion,xalloc<CMotion> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$vector@VCMotion@@V?$xalloc@VCMotion@@@@@stlp_std@@QAE@ABV?$xalloc@VCMotion@@@@@Z
_TEXT	SEGMENT
??0?$vector@VCMotion@@V?$xalloc@VCMotion@@@@@stlp_std@@QAE@ABV?$xalloc@VCMotion@@@@@Z PROC ; stlp_std::vector<CMotion,xalloc<CMotion> >::vector<CMotion,xalloc<CMotion> >, COMDAT
; _this$ = eax

; 106  :   explicit vector(const allocator_type& __a = allocator_type())

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$vector@VCMotion@@V?$xalloc@VCMotion@@@@@stlp_std@@QAE@ABV?$xalloc@VCMotion@@@@@Z ENDP ; stlp_std::vector<CMotion,xalloc<CMotion> >::vector<CMotion,xalloc<CMotion> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@QAE@ABV0@@Z PROC ; xr_vector<CMotion,xalloc<CMotion> >::xr_vector<CMotion,xalloc<CMotion> >, COMDAT
; _this$ = eax
; ___that$ = ebx
	push	esi
	mov	esi, eax
	call	??0?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_Impl_vector<CMotion,xalloc<CMotion> >
	mov	eax, esi
	pop	esi
	ret	0
??0?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@QAE@ABV0@@Z ENDP ; xr_vector<CMotion,xalloc<CMotion> >::xr_vector<CMotion,xalloc<CMotion> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_pair.h
_TEXT	ENDS
;	COMDAT ??0?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@QAE@ABVshared_str@@ABQAUmotions_value@@@Z
_TEXT	SEGMENT
___b$ = 8						; size = 4
??0?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@QAE@ABVshared_str@@ABQAUmotions_value@@@Z PROC ; stlp_std::pair<shared_str,motions_value *>::pair<shared_str,motions_value *>, COMDAT
; _this$ = eax
; ___a$ = ecx

; 56   :   pair(const _T1& __a, const _T2& __b) : first(__a), second(__b) {}

	mov	DWORD PTR [eax], 0
	mov	edx, DWORD PTR [ecx]
	test	edx, edx
	je	SHORT $LN5@pair@7
	add	DWORD PTR [edx], 1
$LN5@pair@7:
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN8@pair@7
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN8@pair@7
	mov	DWORD PTR [eax], 0
$LN8@pair@7:
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR ___b$[esp-4]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax+4], ecx
	ret	4
??0?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@QAE@ABVshared_str@@ABQAUmotions_value@@@Z ENDP ; stlp_std::pair<shared_str,motions_value *>::pair<shared_str,motions_value *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$pair@Vshared_str@@G@stlp_std@@QAE@ABVshared_str@@ABG@Z
_TEXT	SEGMENT
___b$ = 8						; size = 4
??0?$pair@Vshared_str@@G@stlp_std@@QAE@ABVshared_str@@ABG@Z PROC ; stlp_std::pair<shared_str,unsigned short>::pair<shared_str,unsigned short>, COMDAT
; _this$ = eax
; ___a$ = ecx

; 56   :   pair(const _T1& __a, const _T2& __b) : first(__a), second(__b) {}

	mov	DWORD PTR [eax], 0
	mov	edx, DWORD PTR [ecx]
	test	edx, edx
	je	SHORT $LN5@pair@8
	add	DWORD PTR [edx], 1
$LN5@pair@8:
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN8@pair@8
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN8@pair@8
	mov	DWORD PTR [eax], 0
$LN8@pair@8:
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR ___b$[esp-4]
	mov	cx, WORD PTR [edx]
	mov	WORD PTR [eax+4], cx
	ret	4
??0?$pair@Vshared_str@@G@stlp_std@@QAE@ABVshared_str@@ABG@Z ENDP ; stlp_std::pair<shared_str,unsigned short>::pair<shared_str,unsigned short>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ?_M_clone_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@PAU423@@Z
_TEXT	SEGMENT
?_M_clone_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@PAU423@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_clone_node, COMDAT
; ___x$ = esi

; 322  :   _Base_ptr _M_clone_node(_Base_ptr __x) {

	push	edi

; 323  :     _Base_ptr __tmp = _M_create_node(_S_value(__x));

	lea	edi, DWORD PTR [esi+16]
	call	?_M_create_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@PAUmotions_value@@@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_create_node

; 324  :     _S_color(__tmp) = _S_color(__x);

	mov	cl, BYTE PTR [esi]
	mov	BYTE PTR [eax], cl
	pop	edi

; 325  :     return __tmp;
; 326  :   }

	ret	0
?_M_clone_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@PAU423@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_clone_node
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_pair.h
_TEXT	ENDS
;	COMDAT ??0?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@QAE@ABVshared_str@@ABV?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@Z
_TEXT	SEGMENT
??0?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@QAE@ABVshared_str@@ABV?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@Z PROC ; stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >, COMDAT
; _this$ = edi
; ___a$ = eax
; ___b$ = ebx

; 56   :   pair(const _T1& __a, const _T2& __b) : first(__a), second(__b) {}

	mov	DWORD PTR [edi], 0
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN5@pair@9
	add	DWORD PTR [ecx], 1
$LN5@pair@9:
	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN8@pair@9
	add	DWORD PTR [eax], -1
	mov	edx, DWORD PTR [edi]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN8@pair@9
	mov	DWORD PTR [edi], 0
$LN8@pair@9:
	push	esi
	lea	esi, DWORD PTR [edi+4]
	mov	DWORD PTR [edi], ecx
	call	??0?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_Impl_vector<CMotion,xalloc<CMotion> >
	mov	eax, edi
	pop	esi
	ret	0
??0?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@QAE@ABVshared_str@@ABV?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@Z ENDP ; stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ?_M_clone_node@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@PAU423@@Z
_TEXT	SEGMENT
?_M_clone_node@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@PAU423@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_clone_node, COMDAT
; ___x$ = esi

; 322  :   _Base_ptr _M_clone_node(_Base_ptr __x) {

	push	edi

; 323  :     _Base_ptr __tmp = _M_create_node(_S_value(__x));

	lea	edi, DWORD PTR [esi+16]
	call	?_M_create_node@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@G@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_create_node

; 324  :     _S_color(__tmp) = _S_color(__x);

	mov	cl, BYTE PTR [esi]
	mov	BYTE PTR [eax], cl
	pop	edi

; 325  :     return __tmp;
; 326  :   }

	ret	0
?_M_clone_node@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@PAU423@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_clone_node
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?_M_insert_overflow@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXPAVCMotion@@ABV4@ABU__false_type@3@I_N@Z
_TEXT	SEGMENT
?_M_insert_overflow@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXPAVCMotion@@ABV4@ABU__false_type@3@I_N@Z PROC ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_insert_overflow, COMDAT
; _this$ = esi
; ___pos$ = edx
; ___x$ = ecx
; ___fill_len$ = eax

; 161  :   { _M_insert_overflow_aux(__pos, __x, _Movable(), __fill_len, __atend); }

	push	eax
	push	ecx
	push	edx
	call	?_M_insert_overflow_aux@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXPAVCMotion@@ABV4@ABU__false_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_insert_overflow_aux
	ret	0
?_M_insert_overflow@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXPAVCMotion@@ABV4@ABU__false_type@3@I_N@Z ENDP ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_insert_overflow
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@QAE@XZ PROC ; xr_vector<CMotion,xalloc<CMotion> >::xr_vector<CMotion,xalloc<CMotion> >, COMDAT
; _this$ = eax

; 123  : 			xr_vector			()									: inherited	()					{}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@QAE@XZ ENDP ; xr_vector<CMotion,xalloc<CMotion> >::xr_vector<CMotion,xalloc<CMotion> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@QAE@XZ PROC ; stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >::~pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >, COMDAT
; _this$ = esi
	mov	ecx, DWORD PTR [esi+8]
	mov	eax, DWORD PTR [esi+4]
	push	ecx
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVCMotion@@@stlp_std@@VCMotion@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0PAVCMotion@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotion *>,CMotion>
	mov	eax, DWORD PTR [esi+4]
	add	esp, 8
	test	eax, eax
	je	SHORT $LN38@pair@10
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN38@pair@10:
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN43@pair@10
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN43@pair@10
	mov	DWORD PTR [esi], 0
$LN43@pair@10:
	ret	0
??1?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@QAE@XZ ENDP ; stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >::~pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$_Destroy_Range@PAVmotion_marks@@@stlp_std@@YAXPAVmotion_marks@@0@Z
_TEXT	SEGMENT
??$_Destroy_Range@PAVmotion_marks@@@stlp_std@@YAXPAVmotion_marks@@0@Z PROC ; stlp_std::_Destroy_Range<motion_marks *>, COMDAT
; ___first$ = eax
; ___last$ = ebx

; 181  :   __destroy_range(__first, __last, _STLP_VALUE_TYPE(__first, _ForwardIterator));

	jmp	??$__destroy_range_aux@PAVmotion_marks@@V1@@stlp_std@@YAXPAVmotion_marks@@00ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<motion_marks *,motion_marks>
??$_Destroy_Range@PAVmotion_marks@@@stlp_std@@YAXPAVmotion_marks@@0@Z ENDP ; stlp_std::_Destroy_Range<motion_marks *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Destroy@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@PAUmotions_value@@@0@@Z
_TEXT	SEGMENT
??$_Destroy@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@PAUmotions_value@@@0@@Z PROC ; stlp_std::_Destroy<stlp_std::pair<shared_str const ,motions_value *> >, COMDAT
; ___pointer$ = ecx

; 60   : #if defined (_STLP_MSVC) && (_STLP_MSVC <= 1010)
; 61   :   __pointer;
; 62   : #endif
; 63   :   typedef typename __type_traits<_Tp>::has_trivial_destructor _Trivial_destructor;
; 64   :   __destroy_aux(__pointer, _Trivial_destructor());

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN12@Destroy@2
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN12@Destroy@2
	mov	DWORD PTR [ecx], 0
$LN12@Destroy@2:

; 65   : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 66   :   memset(__REINTERPRET_CAST(char*, __pointer), _STLP_SHRED_BYTE, sizeof(_Tp));
; 67   : #endif
; 68   : }

	ret	0
??$_Destroy@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@PAUmotions_value@@@0@@Z ENDP ; stlp_std::_Destroy<stlp_std::pair<shared_str const ,motions_value *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Destroy_Range@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$_Destroy_Range@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0@Z PROC ; stlp_std::_Destroy_Range<stlp_std::reverse_iterator<motion_marks *> >, COMDAT

; 181  :   __destroy_range(__first, __last, _STLP_VALUE_TYPE(__first, _ForwardIterator));

	mov	edx, DWORD PTR ___first$[esp-4]
	push	ecx
	mov	ecx, DWORD PTR ___last$[esp]
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], edx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@Vmotion_marks@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0PAVmotion_marks@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<motion_marks *>,motion_marks>
	add	esp, 8

; 182  : }

	ret	0
??$_Destroy_Range@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0@Z ENDP ; stlp_std::_Destroy_Range<stlp_std::reverse_iterator<motion_marks *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.c
_TEXT	ENDS
;	COMDAT ?_M_fill_insert@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEXPAIIABI@Z
_TEXT	SEGMENT
$T352833 = -1						; size = 1
?_M_fill_insert@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEXPAIIABI@Z PROC ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_fill_insert, COMDAT
; _this$ = ecx
; ___pos$ = esi
; ___n$ = edx
; ___x$ = eax

; 167  :                                          size_type __n, const _Tp& __x) {

	push	ecx

; 168  :   if (__n != 0) {

	test	edx, edx
	je	SHORT $LN1@M_fill_ins@11
	push	edi

; 169  :     if (size_type(this->_M_end_of_storage._M_data - this->_M_finish) >= __n) {

	mov	edi, DWORD PTR [ecx+8]
	sub	edi, DWORD PTR [ecx+4]
	sar	edi, 2
	cmp	edi, edx
	jb	SHORT $LN2@M_fill_ins@11

; 170  :       _M_fill_insert_aux(__pos, __n, __x, _Movable());

	lea	edi, DWORD PTR $T352833[esp+8]
	push	edi
	push	eax
	push	edx
	push	esi
	call	?_M_fill_insert_aux@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEXPAIIABIABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_fill_insert_aux
	pop	edi

; 173  :   }
; 174  : }

	pop	ecx
	ret	0
$LN2@M_fill_ins@11:

; 171  :     } else
; 172  :       _M_insert_overflow(__pos, __x, _TrivialCopy(), __n);

	push	0
	push	edx
	push	esi
	mov	edi, ecx
	call	?_M_insert_overflow@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEXPAIABIABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_insert_overflow
	pop	edi
$LN1@M_fill_ins@11:

; 173  :   }
; 174  : }

	pop	ecx
	ret	0
?_M_fill_insert@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEXPAIIABI@Z ENDP ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_fill_insert
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_pair.h
_TEXT	ENDS
;	COMDAT ??$?0Vshared_str@@PAUmotions_value@@@?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@QAE@ABU?$pair@Vshared_str@@PAUmotions_value@@@1@@Z
_TEXT	SEGMENT
??$?0Vshared_str@@PAUmotions_value@@@?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@QAE@ABU?$pair@Vshared_str@@PAUmotions_value@@@1@@Z PROC ; stlp_std::pair<shared_str const ,motions_value *>::pair<shared_str const ,motions_value *><shared_str,motions_value *>, COMDAT
; _this$ = eax
; ___p$ = esi

; 60   :   pair(const pair<_U1, _U2>& __p) : first(__p.first), second(__p.second) {}

	mov	DWORD PTR [eax], 0
	mov	edx, DWORD PTR [esi]
	test	edx, edx
	je	SHORT $LN5@pair@11
	add	DWORD PTR [edx], 1
$LN5@pair@11:
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN8@pair@11
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN8@pair@11
	mov	DWORD PTR [eax], 0
$LN8@pair@11:
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
	ret	0
??$?0Vshared_str@@PAUmotions_value@@@?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@QAE@ABU?$pair@Vshared_str@@PAUmotions_value@@@1@@Z ENDP ; stlp_std::pair<shared_str const ,motions_value *>::pair<shared_str const ,motions_value *><shared_str,motions_value *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??$mk_pair@Vshared_str@@PAUmotions_value@@@@YA?AU?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@Vshared_str@@PAUmotions_value@@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
??$mk_pair@Vshared_str@@PAUmotions_value@@@@YA?AU?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@Vshared_str@@PAUmotions_value@@@Z PROC ; mk_pair<shared_str,motions_value *>, COMDAT
; ___$ReturnUdt$ = eax
; __Val2$ = edx

; 218  : template	<class _Ty1, class _Ty2> inline	std::pair<_Ty1, _Ty2>		mk_pair		(_Ty1 _Val1, _Ty2 _Val2)	{	return (std::pair<_Ty1, _Ty2>(_Val1, _Val2));	}

	mov	ecx, DWORD PTR __Val1$[esp-4]
	test	ecx, ecx
	mov	DWORD PTR [eax], 0
	je	SHORT $LN7@mk_pair
	add	DWORD PTR [ecx], 1
$LN7@mk_pair:
	test	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	je	SHORT $LN16@mk_pair
	add	DWORD PTR [ecx], -1
$LN16@mk_pair:
	ret	0
??$mk_pair@Vshared_str@@PAUmotions_value@@@@YA?AU?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@Vshared_str@@PAUmotions_value@@@Z ENDP ; mk_pair<shared_str,motions_value *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_map.h
_TEXT	ENDS
;	COMDAT ??$find@Vshared_str@@@?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@1@ABVshared_str@@@Z
_TEXT	SEGMENT
___x$ = 8						; size = 4
??$find@Vshared_str@@@?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@1@ABVshared_str@@@Z PROC ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::find<shared_str>, COMDAT
; _this$ = esi
; ___$ReturnUdt$ = eax

; 205  :   iterator find(const _KT& __x) { return _M_t.find(__x); }

	mov	ecx, DWORD PTR [esi+4]
	test	ecx, ecx
	mov	edx, esi
	je	SHORT $LN54@find@12
	push	edi
	mov	edi, DWORD PTR ___x$[esp]
	mov	edi, DWORD PTR [edi]
$LL10@find@12:
	cmp	DWORD PTR [ecx+16], edi
	jb	SHORT $LN8@find@12
	mov	edx, ecx
	mov	ecx, DWORD PTR [ecx+8]
	jmp	SHORT $LN7@find@12
$LN8@find@12:
	mov	ecx, DWORD PTR [ecx+12]
$LN7@find@12:
	test	ecx, ecx
	jne	SHORT $LL10@find@12
	cmp	edx, esi
	je	SHORT $LN53@find@12
	cmp	edi, DWORD PTR [edx+16]
	jae	SHORT $LN53@find@12
	mov	DWORD PTR [eax], esi
	pop	edi
	ret	4
$LN53@find@12:
	mov	DWORD PTR [eax], edx
	pop	edi
	ret	4
$LN54@find@12:
	mov	DWORD PTR [eax], edx
	ret	4
??$find@Vshared_str@@@?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@1@ABVshared_str@@@Z ENDP ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::find<shared_str>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$find@Vshared_str@@@?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@1@ABVshared_str@@@Z
_TEXT	SEGMENT
___x$ = 8						; size = 4
??$find@Vshared_str@@@?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@1@ABVshared_str@@@Z PROC ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::find<shared_str>, COMDAT
; _this$ = esi
; ___$ReturnUdt$ = eax

; 205  :   iterator find(const _KT& __x) { return _M_t.find(__x); }

	mov	ecx, DWORD PTR [esi+4]
	test	ecx, ecx
	mov	edx, esi
	je	SHORT $LN54@find@13
	push	edi
	mov	edi, DWORD PTR ___x$[esp]
	mov	edi, DWORD PTR [edi]
$LL10@find@13:
	cmp	DWORD PTR [ecx+16], edi
	jb	SHORT $LN8@find@13
	mov	edx, ecx
	mov	ecx, DWORD PTR [ecx+8]
	jmp	SHORT $LN7@find@13
$LN8@find@13:
	mov	ecx, DWORD PTR [ecx+12]
$LN7@find@13:
	test	ecx, ecx
	jne	SHORT $LL10@find@13
	cmp	edx, esi
	je	SHORT $LN53@find@13
	cmp	edi, DWORD PTR [edx+16]
	jae	SHORT $LN53@find@13
	mov	DWORD PTR [eax], esi
	pop	edi
	ret	4
$LN53@find@13:
	mov	DWORD PTR [eax], edx
	pop	edi
	ret	4
$LN54@find@13:
	mov	DWORD PTR [eax], edx
	ret	4
??$find@Vshared_str@@@?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@1@ABVshared_str@@@Z ENDP ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::find<shared_str>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_pair.h
_TEXT	ENDS
;	COMDAT ??$?0Vshared_str@@G@?$pair@$$CBVshared_str@@G@stlp_std@@QAE@ABU?$pair@Vshared_str@@G@1@@Z
_TEXT	SEGMENT
??$?0Vshared_str@@G@?$pair@$$CBVshared_str@@G@stlp_std@@QAE@ABU?$pair@Vshared_str@@G@1@@Z PROC ; stlp_std::pair<shared_str const ,unsigned short>::pair<shared_str const ,unsigned short><shared_str,unsigned short>, COMDAT
; _this$ = eax
; ___p$ = esi

; 60   :   pair(const pair<_U1, _U2>& __p) : first(__p.first), second(__p.second) {}

	mov	DWORD PTR [eax], 0
	mov	edx, DWORD PTR [esi]
	test	edx, edx
	je	SHORT $LN5@pair@12
	add	DWORD PTR [edx], 1
$LN5@pair@12:
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN8@pair@12
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN8@pair@12
	mov	DWORD PTR [eax], 0
$LN8@pair@12:
	mov	DWORD PTR [eax], edx
	mov	dx, WORD PTR [esi+4]
	mov	WORD PTR [eax+4], dx
	ret	0
??$?0Vshared_str@@G@?$pair@$$CBVshared_str@@G@stlp_std@@QAE@ABU?$pair@Vshared_str@@G@1@@Z ENDP ; stlp_std::pair<shared_str const ,unsigned short>::pair<shared_str const ,unsigned short><shared_str,unsigned short>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??$mk_pair@Vshared_str@@G@@YA?AU?$pair@Vshared_str@@G@stlp_std@@Vshared_str@@G@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
??$mk_pair@Vshared_str@@G@@YA?AU?$pair@Vshared_str@@G@stlp_std@@Vshared_str@@G@Z PROC ; mk_pair<shared_str,unsigned short>, COMDAT
; ___$ReturnUdt$ = eax
; __Val2$ = edx

; 218  : template	<class _Ty1, class _Ty2> inline	std::pair<_Ty1, _Ty2>		mk_pair		(_Ty1 _Val1, _Ty2 _Val2)	{	return (std::pair<_Ty1, _Ty2>(_Val1, _Val2));	}

	mov	ecx, DWORD PTR __Val1$[esp-4]
	test	ecx, ecx
	mov	DWORD PTR [eax], 0
	je	SHORT $LN7@mk_pair@2
	add	DWORD PTR [ecx], 1
$LN7@mk_pair@2:
	test	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	WORD PTR [eax+4], dx
	je	SHORT $LN16@mk_pair@2
	add	DWORD PTR [ecx], -1
$LN16@mk_pair@2:
	ret	0
??$mk_pair@Vshared_str@@G@@YA?AU?$pair@Vshared_str@@G@stlp_std@@Vshared_str@@G@Z ENDP ; mk_pair<shared_str,unsigned short>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.c
_TEXT	ENDS
;	COMDAT ?_M_erase@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z
_TEXT	SEGMENT
___x$ = 8						; size = 4
?_M_erase@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_erase, COMDAT
; _this$ = ecx

; 655  : _Rb_tree<_Key,_Compare,_Value,_KeyOfValue,_Traits,_Alloc>::_M_erase(_Rb_tree_node_base *__x) {

	push	ebx
	push	esi

; 656  :   // erase without rebalancing
; 657  :   while (__x != 0) {

	mov	esi, DWORD PTR ___x$[esp+4]
	test	esi, esi
	mov	ebx, ecx
	je	SHORT $LN1@M_erase@29
	push	edi
	npad	3
$LL2@M_erase@29:

; 658  :     _M_erase(_S_right(__x));

	mov	eax, DWORD PTR [esi+12]
	push	eax
	mov	ecx, ebx
	call	?_M_erase@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_erase

; 659  :     _Base_ptr __y = _S_left(__x);
; 660  :     _STLP_STD::_Destroy(&_S_value(__x));

	mov	eax, DWORD PTR [esi+16]
	test	eax, eax
	mov	edi, DWORD PTR [esi+8]
	je	SHORT $LN22@M_erase@29
	add	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR [esi+16]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN22@M_erase@29
	mov	DWORD PTR [esi+16], 0
$LN22@M_erase@29:

; 661  :     this->_M_header.deallocate(__STATIC_CAST(_Link_type, __x),1);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	test	edi, edi

; 662  :     __x = __y;

	mov	esi, edi
	jne	SHORT $LL2@M_erase@29
	pop	edi
$LN1@M_erase@29:
	pop	esi
	pop	ebx

; 663  :   }
; 664  : }

	ret	4
?_M_erase@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_copy@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@AAEPAU_Rb_tree_node_base@23@PAU423@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___tmp$353544 = 8					; size = 4
___x$ = 8						; size = 4
___p$ = 12						; size = 4
?_M_copy@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@AAEPAU_Rb_tree_node_base@23@PAU423@0@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_copy, COMDAT
; _this$ = ecx

; 625  :                                                                     _Rb_tree_node_base* __p) {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 626  :   // structural copy.  __x and __p must be non-null.
; 627  :   _Base_ptr __top = _M_clone_node(__x);

	mov	esi, DWORD PTR ___x$[esp+12]
	push	edi
	mov	ebx, ecx
	lea	edi, DWORD PTR [esi+16]
	mov	DWORD PTR _this$[esp+20], ebx
	call	?_M_create_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@PAUmotions_value@@@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_create_node

; 628  :   _S_parent(__top) = __p;

	mov	ecx, DWORD PTR ___p$[esp+16]
	mov	edi, eax
	mov	al, BYTE PTR [esi]
	mov	BYTE PTR [edi], al
	mov	DWORD PTR [edi+4], ecx

; 629  : 
; 630  :   _STLP_TRY {
; 631  :     if (_S_right(__x))

	mov	eax, DWORD PTR [esi+12]
	xor	ebp, ebp
	cmp	eax, ebp
	mov	DWORD PTR ___tmp$353544[esp+16], edi
	je	SHORT $LN4@M_copy@5

; 632  :       _S_right(__top) = _M_copy(_S_right(__x), __top);

	push	edi
	push	eax
	mov	ecx, ebx
	call	?_M_copy@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@AAEPAU_Rb_tree_node_base@23@PAU423@0@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_copy
	mov	DWORD PTR [edi+12], eax
$LN4@M_copy@5:

; 633  :     __p = __top;

	mov	ebx, edi

; 634  :     __x = _S_left(__x);

	mov	edi, DWORD PTR [esi+8]

; 635  : 
; 636  :     while (__x != 0) {

	cmp	edi, ebp
	je	$LN76@M_copy@5
	npad	6
$LL3@M_copy@5:

; 637  :       _Base_ptr __y = _M_clone_node(__x);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	mov	esi, eax
	lea	eax, DWORD PTR [esi+16]
	cmp	eax, ebp
	je	SHORT $LN39@M_copy@5
	mov	DWORD PTR [eax], ebp
	mov	edx, DWORD PTR [edi+16]
	cmp	edx, ebp
	je	SHORT $LN47@M_copy@5
	add	DWORD PTR [edx], 1
$LN47@M_copy@5:
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, ebp
	je	SHORT $LN50@M_copy@5
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], ebp
	jne	SHORT $LN50@M_copy@5
	mov	DWORD PTR [eax], ebp
$LN50@M_copy@5:
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [edi+20]
	mov	DWORD PTR [eax+4], edx
$LN39@M_copy@5:
	mov	DWORD PTR [esi+8], ebp
	mov	DWORD PTR [esi+12], ebp
	mov	al, BYTE PTR [edi]
	mov	BYTE PTR [esi], al

; 638  :       _S_left(__p) = __y;

	mov	DWORD PTR [ebx+8], esi

; 639  :       _S_parent(__y) = __p;

	mov	DWORD PTR [esi+4], ebx

; 640  :       if (_S_right(__x))

	mov	eax, DWORD PTR [edi+12]
	cmp	eax, ebp
	je	SHORT $LN1@M_copy@5

; 641  :         _S_right(__y) = _M_copy(_S_right(__x), __y);

	mov	ecx, DWORD PTR _this$[esp+20]
	push	esi
	push	eax
	call	?_M_copy@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@AAEPAU_Rb_tree_node_base@23@PAU423@0@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_copy
	mov	DWORD PTR [esi+12], eax
$LN1@M_copy@5:

; 642  :       __p = __y;
; 643  :       __x = _S_left(__x);

	mov	edi, DWORD PTR [edi+8]
	cmp	edi, ebp
	mov	ebx, esi
	jne	SHORT $LL3@M_copy@5

; 644  :     }
; 645  :   }
; 646  :   _STLP_UNWIND(_M_erase(__top))
; 647  : 
; 648  :   return __top;

	mov	eax, DWORD PTR ___tmp$353544[esp+16]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 649  : }

	pop	ecx
	ret	8
$LN76@M_copy@5:
	pop	edi
	pop	esi
	pop	ebp

; 644  :     }
; 645  :   }
; 646  :   _STLP_UNWIND(_M_erase(__top))
; 647  : 
; 648  :   return __top;

	mov	eax, ebx
	pop	ebx

; 649  : }

	pop	ecx
	ret	8
?_M_copy@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@AAEPAU_Rb_tree_node_base@23@PAU423@0@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_copy
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_erase@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z
_TEXT	SEGMENT
___x$ = 8						; size = 4
?_M_erase@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_erase, COMDAT
; _this$ = ecx

; 655  : _Rb_tree<_Key,_Compare,_Value,_KeyOfValue,_Traits,_Alloc>::_M_erase(_Rb_tree_node_base *__x) {

	push	ebx
	push	esi

; 656  :   // erase without rebalancing
; 657  :   while (__x != 0) {

	mov	esi, DWORD PTR ___x$[esp+4]
	test	esi, esi
	mov	ebx, ecx
	je	SHORT $LN1@M_erase@30
	push	edi
	npad	3
$LL2@M_erase@30:

; 658  :     _M_erase(_S_right(__x));

	mov	eax, DWORD PTR [esi+12]
	push	eax
	mov	ecx, ebx
	call	?_M_erase@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_erase

; 659  :     _Base_ptr __y = _S_left(__x);
; 660  :     _STLP_STD::_Destroy(&_S_value(__x));

	mov	eax, DWORD PTR [esi+16]
	test	eax, eax
	mov	edi, DWORD PTR [esi+8]
	je	SHORT $LN22@M_erase@30
	add	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR [esi+16]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN22@M_erase@30
	mov	DWORD PTR [esi+16], 0
$LN22@M_erase@30:

; 661  :     this->_M_header.deallocate(__STATIC_CAST(_Link_type, __x),1);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	test	edi, edi

; 662  :     __x = __y;

	mov	esi, edi
	jne	SHORT $LL2@M_erase@30
	pop	edi
$LN1@M_erase@30:
	pop	esi
	pop	ebx

; 663  :   }
; 664  : }

	ret	4
?_M_erase@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_copy@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@AAEPAU_Rb_tree_node_base@23@PAU423@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___tmp$353889 = 8					; size = 4
___x$ = 8						; size = 4
___p$ = 12						; size = 4
?_M_copy@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@AAEPAU_Rb_tree_node_base@23@PAU423@0@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_copy, COMDAT
; _this$ = ecx

; 625  :                                                                     _Rb_tree_node_base* __p) {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 626  :   // structural copy.  __x and __p must be non-null.
; 627  :   _Base_ptr __top = _M_clone_node(__x);

	mov	esi, DWORD PTR ___x$[esp+12]
	push	edi
	mov	ebx, ecx
	lea	edi, DWORD PTR [esi+16]
	mov	DWORD PTR _this$[esp+20], ebx
	call	?_M_create_node@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@G@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_create_node

; 628  :   _S_parent(__top) = __p;

	mov	ecx, DWORD PTR ___p$[esp+16]
	mov	edi, eax
	mov	al, BYTE PTR [esi]
	mov	BYTE PTR [edi], al
	mov	DWORD PTR [edi+4], ecx

; 629  : 
; 630  :   _STLP_TRY {
; 631  :     if (_S_right(__x))

	mov	eax, DWORD PTR [esi+12]
	xor	ebp, ebp
	cmp	eax, ebp
	mov	DWORD PTR ___tmp$353889[esp+16], edi
	je	SHORT $LN4@M_copy@6

; 632  :       _S_right(__top) = _M_copy(_S_right(__x), __top);

	push	edi
	push	eax
	mov	ecx, ebx
	call	?_M_copy@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@AAEPAU_Rb_tree_node_base@23@PAU423@0@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_copy
	mov	DWORD PTR [edi+12], eax
$LN4@M_copy@6:

; 633  :     __p = __top;

	mov	ebx, edi

; 634  :     __x = _S_left(__x);

	mov	edi, DWORD PTR [esi+8]

; 635  : 
; 636  :     while (__x != 0) {

	cmp	edi, ebp
	je	$LN76@M_copy@6
	npad	6
$LL3@M_copy@6:

; 637  :       _Base_ptr __y = _M_clone_node(__x);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	24					; 00000018H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	mov	esi, eax
	lea	eax, DWORD PTR [esi+16]
	cmp	eax, ebp
	je	SHORT $LN39@M_copy@6
	mov	DWORD PTR [eax], ebp
	mov	edx, DWORD PTR [edi+16]
	cmp	edx, ebp
	je	SHORT $LN47@M_copy@6
	add	DWORD PTR [edx], 1
$LN47@M_copy@6:
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, ebp
	je	SHORT $LN50@M_copy@6
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], ebp
	jne	SHORT $LN50@M_copy@6
	mov	DWORD PTR [eax], ebp
$LN50@M_copy@6:
	mov	DWORD PTR [eax], edx
	mov	dx, WORD PTR [edi+20]
	mov	WORD PTR [eax+4], dx
$LN39@M_copy@6:
	mov	DWORD PTR [esi+8], ebp
	mov	DWORD PTR [esi+12], ebp
	mov	al, BYTE PTR [edi]
	mov	BYTE PTR [esi], al

; 638  :       _S_left(__p) = __y;

	mov	DWORD PTR [ebx+8], esi

; 639  :       _S_parent(__y) = __p;

	mov	DWORD PTR [esi+4], ebx

; 640  :       if (_S_right(__x))

	mov	eax, DWORD PTR [edi+12]
	cmp	eax, ebp
	je	SHORT $LN1@M_copy@6

; 641  :         _S_right(__y) = _M_copy(_S_right(__x), __y);

	mov	ecx, DWORD PTR _this$[esp+20]
	push	esi
	push	eax
	call	?_M_copy@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@AAEPAU_Rb_tree_node_base@23@PAU423@0@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_copy
	mov	DWORD PTR [esi+12], eax
$LN1@M_copy@6:

; 642  :       __p = __y;
; 643  :       __x = _S_left(__x);

	mov	edi, DWORD PTR [edi+8]
	cmp	edi, ebp
	mov	ebx, esi
	jne	SHORT $LL3@M_copy@6

; 644  :     }
; 645  :   }
; 646  :   _STLP_UNWIND(_M_erase(__top))
; 647  : 
; 648  :   return __top;

	mov	eax, DWORD PTR ___tmp$353889[esp+16]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 649  : }

	pop	ecx
	ret	8
$LN76@M_copy@6:
	pop	edi
	pop	esi
	pop	ebp

; 644  :     }
; 645  :   }
; 646  :   _STLP_UNWIND(_M_erase(__top))
; 647  : 
; 648  :   return __top;

	mov	eax, ebx
	pop	ebx

; 649  : }

	pop	ecx
	ret	8
?_M_copy@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@AAEPAU_Rb_tree_node_base@23@PAU423@0@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_copy
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.c
_TEXT	ENDS
;	COMDAT ?_M_fill_insert@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXPAVCMotion@@IABV4@@Z
_TEXT	SEGMENT
$T354099 = -1						; size = 1
?_M_fill_insert@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXPAVCMotion@@IABV4@@Z PROC ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_fill_insert, COMDAT
; _this$ = ecx
; ___pos$ = ebx
; ___n$ = edi
; ___x$ = eax

; 167  :                                          size_type __n, const _Tp& __x) {

	sub	esp, 8

; 168  :   if (__n != 0) {

	test	edi, edi
	push	esi
	mov	esi, eax
	je	SHORT $LN6@M_fill_ins@12

; 169  :     if (size_type(this->_M_end_of_storage._M_data - this->_M_finish) >= __n) {

	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR [ecx+4]
	mov	eax, 1717986919				; 66666667H
	imul	edx
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	cmp	eax, edi
	jb	SHORT $LN2@M_fill_ins@12

; 170  :       _M_fill_insert_aux(__pos, __n, __x, _Movable());

	lea	edx, DWORD PTR $T354099[esp+12]
	push	edx
	push	esi
	push	edi
	push	ebx
	call	?_M_fill_insert_aux@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXPAVCMotion@@IABV4@ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_fill_insert_aux

; 173  :   }
; 174  : }

	pop	esi
	add	esp, 8
	ret	0
$LN2@M_fill_ins@12:

; 171  :     } else
; 172  :       _M_insert_overflow(__pos, __x, _TrivialCopy(), __n);

	push	edi
	push	esi
	push	ebx
	mov	esi, ecx
	call	?_M_insert_overflow_aux@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXPAVCMotion@@ABV4@ABU__false_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_insert_overflow_aux
$LN6@M_fill_ins@12:

; 173  :   }
; 174  : }

	pop	esi
	add	esp, 8
	ret	0
?_M_fill_insert@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXPAVCMotion@@IABV4@@Z ENDP ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_fill_insert
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_fill_insert@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEXPAU?$pair@MM@3@IABU43@@Z
_TEXT	SEGMENT
$T354109 = -1						; size = 1
?_M_fill_insert@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEXPAU?$pair@MM@3@IABU43@@Z PROC ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_fill_insert, COMDAT
; _this$ = ecx
; ___pos$ = esi
; ___n$ = edx
; ___x$ = eax

; 167  :                                          size_type __n, const _Tp& __x) {

	push	ecx

; 168  :   if (__n != 0) {

	test	edx, edx
	je	SHORT $LN1@M_fill_ins@13
	push	edi

; 169  :     if (size_type(this->_M_end_of_storage._M_data - this->_M_finish) >= __n) {

	mov	edi, DWORD PTR [ecx+8]
	sub	edi, DWORD PTR [ecx+4]
	sar	edi, 3
	cmp	edi, edx
	jb	SHORT $LN2@M_fill_ins@13

; 170  :       _M_fill_insert_aux(__pos, __n, __x, _Movable());

	lea	edi, DWORD PTR $T354109[esp+8]
	push	edi
	push	eax
	push	edx
	push	esi
	call	?_M_fill_insert_aux@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEXPAU?$pair@MM@3@IABU43@ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_fill_insert_aux
	pop	edi

; 173  :   }
; 174  : }

	pop	ecx
	ret	0
$LN2@M_fill_ins@13:

; 171  :     } else
; 172  :       _M_insert_overflow(__pos, __x, _TrivialCopy(), __n);

	push	edx
	push	esi
	mov	edi, ecx
	call	?_M_insert_overflow@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEXPAU?$pair@MM@3@ABU43@ABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_insert_overflow
	pop	edi
$LN1@M_fill_ins@13:

; 173  :   }
; 174  : }

	pop	ecx
	ret	0
?_M_fill_insert@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEXPAU?$pair@MM@3@IABU43@@Z ENDP ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_fill_insert
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?insert@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAEXPAVCMotion@@IABV4@@Z
_TEXT	SEGMENT
$T354128 = -1						; size = 1
?insert@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAEXPAVCMotion@@IABV4@@Z PROC ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::insert, COMDAT
; _this$ = ecx
; ___pos$ = ebx
; ___n$ = edi
; ___x$ = eax

; 529  :   { _M_fill_insert(__pos, __n, __x); }

	sub	esp, 8
	test	edi, edi
	push	esi
	mov	esi, eax
	je	SHORT $LN8@insert@3
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR [ecx+4]
	mov	eax, 1717986919				; 66666667H
	imul	edx
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	cmp	eax, edi
	jb	SHORT $LN4@insert@3
	lea	edx, DWORD PTR $T354128[esp+12]
	push	edx
	push	esi
	push	edi
	push	ebx
	call	?_M_fill_insert_aux@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXPAVCMotion@@IABV4@ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_fill_insert_aux
	pop	esi
	add	esp, 8
	ret	0
$LN4@insert@3:
	push	edi
	push	esi
	push	ebx
	mov	esi, ecx
	call	?_M_insert_overflow_aux@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXPAVCMotion@@ABV4@ABU__false_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_insert_overflow_aux
$LN8@insert@3:
	pop	esi
	add	esp, 8
	ret	0
?insert@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAEXPAVCMotion@@IABV4@@Z ENDP ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::insert
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?insert@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEXPAU?$pair@MM@3@IABU43@@Z
_TEXT	SEGMENT
$T354144 = -1						; size = 1
?insert@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEXPAU?$pair@MM@3@IABU43@@Z PROC ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::insert, COMDAT
; _this$ = ecx
; ___pos$ = esi
; ___n$ = edx
; ___x$ = eax

; 529  :   { _M_fill_insert(__pos, __n, __x); }

	push	ecx
	test	edx, edx
	je	SHORT $LN3@insert@4
	push	edi
	mov	edi, DWORD PTR [ecx+8]
	sub	edi, DWORD PTR [ecx+4]
	sar	edi, 3
	cmp	edi, edx
	jb	SHORT $LN4@insert@4
	lea	edi, DWORD PTR $T354144[esp+8]
	push	edi
	push	eax
	push	edx
	push	esi
	call	?_M_fill_insert_aux@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEXPAU?$pair@MM@3@IABU43@ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_fill_insert_aux
	pop	edi
	pop	ecx
	ret	0
$LN4@insert@4:
	push	edx
	push	esi
	mov	edi, ecx
	call	?_M_insert_overflow@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEXPAU?$pair@MM@3@ABU43@ABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_insert_overflow
	pop	edi
$LN3@insert@4:
	pop	ecx
	ret	0
?insert@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEXPAU?$pair@MM@3@IABU43@@Z ENDP ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::insert
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?insert@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEXPAIIABI@Z
_TEXT	SEGMENT
$T354158 = -1						; size = 1
?insert@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEXPAIIABI@Z PROC ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::insert, COMDAT
; _this$ = ecx
; ___pos$ = esi
; ___n$ = edx
; ___x$ = eax

; 529  :   { _M_fill_insert(__pos, __n, __x); }

	push	ecx
	test	edx, edx
	je	SHORT $LN3@insert@5
	push	edi
	mov	edi, DWORD PTR [ecx+8]
	sub	edi, DWORD PTR [ecx+4]
	sar	edi, 2
	cmp	edi, edx
	jb	SHORT $LN4@insert@5
	lea	edi, DWORD PTR $T354158[esp+8]
	push	edi
	push	eax
	push	edx
	push	esi
	call	?_M_fill_insert_aux@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEXPAIIABIABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_fill_insert_aux
	pop	edi
	pop	ecx
	ret	0
$LN4@insert@5:
	push	0
	push	edx
	push	esi
	mov	edi, ecx
	call	?_M_insert_overflow@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEXPAIABIABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_insert_overflow
	pop	edi
$LN3@insert@5:
	pop	ecx
	ret	0
?insert@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEXPAIIABI@Z ENDP ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::insert
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ?clear@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAEXXZ PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::clear, COMDAT
; _this$ = esi

; 526  :     if (_M_node_count != 0) {

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN1@clear@29

; 527  :       _M_erase(_M_root());

	mov	eax, DWORD PTR [esi+4]
	push	eax
	mov	ecx, esi
	call	?_M_erase@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_erase

; 528  :       _M_leftmost() = &this->_M_header._M_data;

	mov	DWORD PTR [esi+8], esi

; 529  :       _M_root() = 0;

	mov	DWORD PTR [esi+4], 0

; 530  :       _M_rightmost() = &this->_M_header._M_data;

	mov	DWORD PTR [esi+12], esi

; 531  :       _M_node_count = 0;

	mov	DWORD PTR [esi+16], 0
$LN1@clear@29:

; 532  :     }
; 533  :   }

	ret	0
?clear@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAEXXZ ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::clear
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?erase@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAEXU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@23@@Z
_TEXT	SEGMENT
___pos$ = 8						; size = 4
?erase@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAEXU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@23@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::erase, COMDAT
; _this$ = esi

; 488  :     _Base_ptr __x = _Rb_global_inst::_Rebalance_for_erase(__pos._M_node,
; 489  :                                                           this->_M_header._M_data._M_parent,
; 490  :                                                           this->_M_header._M_data._M_left,
; 491  :                                                           this->_M_header._M_data._M_right);

	lea	ecx, DWORD PTR [esi+4]
	push	ecx
	mov	ecx, DWORD PTR ___pos$[esp]
	lea	eax, DWORD PTR [esi+12]
	lea	edx, DWORD PTR [esi+8]
	call	?_Rebalance_for_erase@?$_Rb_global@_N@priv@stlp_std@@SAPAU_Rb_tree_node_base@23@PAU423@AAPAU423@11@Z ; stlp_std::priv::_Rb_global<bool>::_Rebalance_for_erase

; 492  :     _STLP_STD::_Destroy(&_S_value(__x));

	mov	ecx, DWORD PTR [eax+16]
	add	esp, 4
	test	ecx, ecx
	je	SHORT $LN16@erase@46
	add	DWORD PTR [ecx], -1
	mov	edx, DWORD PTR [eax+16]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN16@erase@46
	mov	DWORD PTR [eax+16], 0
$LN16@erase@46:

; 493  :     this->_M_header.deallocate(__STATIC_CAST(_Link_type, __x), 1);

	test	eax, eax
	je	SHORT $LN30@erase@46
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN30@erase@46:

; 494  :     --_M_node_count;

	add	DWORD PTR [esi+16], -1

; 495  :   }

	ret	4
?erase@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAEXU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@23@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z
_TEXT	SEGMENT
??0?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >, COMDAT
; _this$ = esi
; ___x$ = edi

; 392  :       _M_node_count(0), _M_key_compare(__x._M_key_compare) {

	xor	eax, eax
	mov	DWORD PTR [esi], eax
	mov	BYTE PTR [esi], al
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], esi
	mov	DWORD PTR [esi+12], esi
	mov	DWORD PTR [esi+16], eax
	mov	al, BYTE PTR [edi+20]
	mov	BYTE PTR [esi+20], al

; 393  :     if (__x._M_root() != 0) {

	cmp	DWORD PTR [edi+4], 0
	je	SHORT $LN1@Rb_tree@4

; 394  :       _S_color(&this->_M_header._M_data) = _S_rb_tree_red;

	mov	BYTE PTR [esi], 0

; 395  :       _M_root() = _M_copy(__x._M_root(), &this->_M_header._M_data);

	mov	eax, DWORD PTR [edi+4]
	push	esi
	push	eax
	mov	ecx, esi
	call	?_M_copy@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@AAEPAU_Rb_tree_node_base@23@PAU423@0@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_copy

; 396  :       _M_leftmost() = _S_minimum(_M_root());

	mov	ecx, eax
	mov	DWORD PTR [esi+4], eax
	mov	edx, DWORD PTR [ecx+8]
	test	edx, edx
	je	SHORT $LN30@Rb_tree@4
	npad	7
$LL31@Rb_tree@4:
	mov	ecx, edx
	mov	edx, DWORD PTR [ecx+8]
	test	edx, edx
	jne	SHORT $LL31@Rb_tree@4
$LN30@Rb_tree@4:
	mov	DWORD PTR [esi+8], ecx

; 397  :       _M_rightmost() = _S_maximum(_M_root());

	mov	ecx, eax
	mov	eax, DWORD PTR [ecx+12]
	test	eax, eax
	je	SHORT $LN40@Rb_tree@4
$LL41@Rb_tree@4:
	mov	ecx, eax
	mov	eax, DWORD PTR [ecx+12]
	test	eax, eax
	jne	SHORT $LL41@Rb_tree@4
$LN40@Rb_tree@4:
	mov	DWORD PTR [esi+12], ecx
$LN1@Rb_tree@4:

; 398  :     }
; 399  :     _M_node_count = __x._M_node_count;

	mov	ecx, DWORD PTR [edi+16]
	mov	DWORD PTR [esi+16], ecx

; 400  :   }

	mov	eax, esi
	ret	0
??0?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?clear@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAEXXZ PROC ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::clear, COMDAT
; _this$ = esi

; 526  :     if (_M_node_count != 0) {

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN1@clear@30

; 527  :       _M_erase(_M_root());

	mov	eax, DWORD PTR [esi+4]
	push	eax
	mov	ecx, esi
	call	?_M_erase@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_erase

; 528  :       _M_leftmost() = &this->_M_header._M_data;

	mov	DWORD PTR [esi+8], esi

; 529  :       _M_root() = 0;

	mov	DWORD PTR [esi+4], 0

; 530  :       _M_rightmost() = &this->_M_header._M_data;

	mov	DWORD PTR [esi+12], esi

; 531  :       _M_node_count = 0;

	mov	DWORD PTR [esi+16], 0
$LN1@clear@30:

; 532  :     }
; 533  :   }

	ret	0
?clear@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAEXXZ ENDP ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::clear
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z
_TEXT	SEGMENT
??0?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >, COMDAT
; _this$ = esi
; ___x$ = edi

; 392  :       _M_node_count(0), _M_key_compare(__x._M_key_compare) {

	xor	eax, eax
	mov	DWORD PTR [esi], eax
	mov	BYTE PTR [esi], al
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], esi
	mov	DWORD PTR [esi+12], esi
	mov	DWORD PTR [esi+16], eax

; 393  :     if (__x._M_root() != 0) {

	cmp	DWORD PTR [edi+4], eax
	je	SHORT $LN1@Rb_tree@5

; 394  :       _S_color(&this->_M_header._M_data) = _S_rb_tree_red;

	mov	BYTE PTR [esi], al

; 395  :       _M_root() = _M_copy(__x._M_root(), &this->_M_header._M_data);

	mov	eax, DWORD PTR [edi+4]
	push	esi
	push	eax
	mov	ecx, esi
	call	?_M_copy@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@AAEPAU_Rb_tree_node_base@23@PAU423@0@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_copy

; 396  :       _M_leftmost() = _S_minimum(_M_root());

	mov	ecx, eax
	mov	DWORD PTR [esi+4], eax
	mov	edx, DWORD PTR [ecx+8]
	test	edx, edx
	je	SHORT $LN30@Rb_tree@5
$LL31@Rb_tree@5:
	mov	ecx, edx
	mov	edx, DWORD PTR [ecx+8]
	test	edx, edx
	jne	SHORT $LL31@Rb_tree@5
$LN30@Rb_tree@5:
	mov	DWORD PTR [esi+8], ecx

; 397  :       _M_rightmost() = _S_maximum(_M_root());

	mov	ecx, eax
	mov	eax, DWORD PTR [ecx+12]
	test	eax, eax
	je	SHORT $LN40@Rb_tree@5
$LL41@Rb_tree@5:
	mov	ecx, eax
	mov	eax, DWORD PTR [ecx+12]
	test	eax, eax
	jne	SHORT $LL41@Rb_tree@5
$LN40@Rb_tree@5:
	mov	DWORD PTR [esi+12], ecx
$LN1@Rb_tree@5:

; 398  :     }
; 399  :     _M_node_count = __x._M_node_count;

	mov	eax, DWORD PTR [edi+16]
	mov	DWORD PTR [esi+16], eax

; 400  :   }

	mov	eax, esi
	ret	0
??0?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?resize@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAEXIABVCMotion@@@Z
_TEXT	SEGMENT
$T354547 = 8						; size = 1
___x$ = 8						; size = 4
?resize@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAEXIABVCMotion@@@Z PROC ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::resize, COMDAT
; _this$ = ecx
; ___new_size$ = eax

; 596  :   void resize(size_type __new_size, const _Tp& __x = _STLP_DEFAULT_CONSTRUCTED(_Tp)) {

	push	ebx

; 597  : #else
; 598  :   void resize(size_type __new_size, const _Tp& __x) {
; 599  : #endif /*_STLP_DONT_SUP_DFLT_PARAM*/
; 600  :     if (__new_size < size())

	mov	ebx, DWORD PTR [ecx+4]
	push	ebp
	push	esi
	mov	esi, DWORD PTR [ecx]
	push	edi
	mov	edi, eax
	mov	edx, ebx
	sub	edx, esi
	mov	eax, 1717986919				; 66666667H
	imul	edx
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	cmp	edi, eax
	jae	SHORT $LN2@resize

; 601  :       erase(begin() + __new_size, end());

	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [esi+edx*8]
	cmp	eax, ebx
	je	SHORT $LN25@resize
	push	eax
	push	ecx
	mov	eax, ebx
	call	?_M_erase@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEPAVCMotion@@PAV4@0ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_erase

; 604  :   }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	4
$LN2@resize:

; 602  :     else
; 603  :       insert(end(), __new_size - size(), __x);

	mov	ebp, ebx
	mov	edx, ebx
	sub	edx, esi
	mov	eax, 1717986919				; 66666667H
	imul	edx
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	sub	edi, eax
	je	SHORT $LN25@resize
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, ebx
	mov	eax, 1717986919				; 66666667H
	imul	edx
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	cmp	eax, edi
	jb	SHORT $LN21@resize
	mov	eax, DWORD PTR ___x$[esp+12]
	lea	edx, DWORD PTR $T354547[esp+12]
	push	edx
	push	eax
	push	edi
	push	ebp
	call	?_M_fill_insert_aux@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXPAVCMotion@@IABV4@ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_fill_insert_aux

; 604  :   }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	4

; 602  :     else
; 603  :       insert(end(), __new_size - size(), __x);

$LN21@resize:
	mov	edx, DWORD PTR ___x$[esp+12]
	push	edi
	push	edx
	push	ebp
	mov	esi, ecx
	call	?_M_insert_overflow_aux@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@AAEXPAVCMotion@@ABV4@ABU__false_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_M_insert_overflow_aux
$LN25@resize:

; 604  :   }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	4
?resize@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAEXIABVCMotion@@@Z ENDP ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::resize
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?resize@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEXIABU?$pair@MM@3@@Z
_TEXT	SEGMENT
$T354639 = -1						; size = 1
?resize@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEXIABU?$pair@MM@3@@Z PROC ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::resize, COMDAT
; _this$ = edx
; ___new_size$ = ecx
; ___x$ = eax

; 596  :   void resize(size_type __new_size, const _Tp& __x = _STLP_DEFAULT_CONSTRUCTED(_Tp)) {

	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	edi, edx

; 597  : #else
; 598  :   void resize(size_type __new_size, const _Tp& __x) {
; 599  : #endif /*_STLP_DONT_SUP_DFLT_PARAM*/
; 600  :     if (__new_size < size())

	mov	ebx, DWORD PTR [edi]
	mov	esi, ecx
	mov	ecx, DWORD PTR [edi+4]
	mov	edx, ecx
	sub	edx, ebx
	sar	edx, 3
	cmp	esi, edx
	jae	SHORT $LN2@resize@2

; 601  :       erase(begin() + __new_size, end());

	lea	eax, DWORD PTR [ebx+esi*8]
	cmp	eax, ecx
	je	SHORT $LN28@resize@2
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN20@resize@2
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN20@resize@2:
	mov	DWORD PTR [edi+4], eax
	pop	edi
	pop	esi
	pop	ebx

; 604  :   }

	pop	ecx
	ret	0
$LN2@resize@2:

; 602  :     else
; 603  :       insert(end(), __new_size - size(), __x);

	sub	esi, edx
	je	SHORT $LN28@resize@2
	mov	edx, DWORD PTR [edi+8]
	sub	edx, ecx
	sar	edx, 3
	cmp	edx, esi
	jb	SHORT $LN29@resize@2
	lea	edx, DWORD PTR $T354639[esp+16]
	push	edx
	push	eax
	push	esi
	push	ecx
	mov	ecx, edi
	call	?_M_fill_insert_aux@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEXPAU?$pair@MM@3@IABU43@ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_fill_insert_aux
	pop	edi
	pop	esi
	pop	ebx

; 604  :   }

	pop	ecx
	ret	0

; 602  :     else
; 603  :       insert(end(), __new_size - size(), __x);

$LN29@resize@2:
	push	esi
	push	ecx
	call	?_M_insert_overflow@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@AAEXPAU?$pair@MM@3@ABU43@ABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_M_insert_overflow
$LN28@resize@2:
	pop	edi
	pop	esi
	pop	ebx

; 604  :   }

	pop	ecx
	ret	0
?resize@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEXIABU?$pair@MM@3@@Z ENDP ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::resize
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?resize@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEXIABI@Z
_TEXT	SEGMENT
$T354729 = -1						; size = 1
?resize@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEXIABI@Z PROC ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::resize, COMDAT
; _this$ = edx
; ___new_size$ = ecx
; ___x$ = eax

; 596  :   void resize(size_type __new_size, const _Tp& __x = _STLP_DEFAULT_CONSTRUCTED(_Tp)) {

	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	edi, edx

; 597  : #else
; 598  :   void resize(size_type __new_size, const _Tp& __x) {
; 599  : #endif /*_STLP_DONT_SUP_DFLT_PARAM*/
; 600  :     if (__new_size < size())

	mov	ebx, DWORD PTR [edi]
	mov	esi, ecx
	mov	ecx, DWORD PTR [edi+4]
	mov	edx, ecx
	sub	edx, ebx
	sar	edx, 2
	cmp	esi, edx
	jae	SHORT $LN2@resize@3

; 601  :       erase(begin() + __new_size, end());

	lea	eax, DWORD PTR [ebx+esi*4]
	cmp	eax, ecx
	je	SHORT $LN28@resize@3
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN20@resize@3
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN20@resize@3:
	mov	DWORD PTR [edi+4], eax
	pop	edi
	pop	esi
	pop	ebx

; 604  :   }

	pop	ecx
	ret	0
$LN2@resize@3:

; 602  :     else
; 603  :       insert(end(), __new_size - size(), __x);

	sub	esi, edx
	je	SHORT $LN28@resize@3
	mov	edx, DWORD PTR [edi+8]
	sub	edx, ecx
	sar	edx, 2
	cmp	edx, esi
	jb	SHORT $LN29@resize@3
	lea	edx, DWORD PTR $T354729[esp+16]
	push	edx
	push	eax
	push	esi
	push	ecx
	mov	ecx, edi
	call	?_M_fill_insert_aux@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEXPAIIABIABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_fill_insert_aux
	pop	edi
	pop	esi
	pop	ebx

; 604  :   }

	pop	ecx
	ret	0

; 602  :     else
; 603  :       insert(end(), __new_size - size(), __x);

$LN29@resize@3:
	push	0
	push	esi
	push	ecx
	call	?_M_insert_overflow@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@AAEXPAIABIABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_M_insert_overflow
$LN28@resize@3:
	pop	edi
	pop	esi
	pop	ebx

; 604  :   }

	pop	ecx
	ret	0
?resize@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEXIABI@Z ENDP ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::resize
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ??E?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE?AU012@H@Z
_TEXT	SEGMENT
??E?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE?AU012@H@Z PROC ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >::operator++, COMDAT
; _this$ = esi
; ___$ReturnUdt$ = eax

; 181  :     _Self __tmp = *this;

	mov	ecx, DWORD PTR [esi]

; 182  :     ++(*this);

	mov	edx, DWORD PTR [ecx+12]
	test	edx, edx
	mov	DWORD PTR [eax], ecx
	je	SHORT $LN13@operator@75
	mov	ecx, DWORD PTR [edx+8]
	test	ecx, ecx
	je	SHORT $LN16@operator@75
$LL17@operator@75:
	mov	edx, ecx
	mov	ecx, DWORD PTR [edx+8]
	test	ecx, ecx
	jne	SHORT $LL17@operator@75
$LN16@operator@75:
	mov	DWORD PTR [esi], edx

; 183  :     return __tmp;
; 184  :   }

	ret	0

; 182  :     ++(*this);

$LN13@operator@75:
	mov	edx, DWORD PTR [ecx+4]
	cmp	ecx, DWORD PTR [edx+12]
	jne	SHORT $LN10@operator@75
$LL11@operator@75:
	mov	ecx, edx
	mov	edx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [edx+12]
	je	SHORT $LL11@operator@75
$LN10@operator@75:
	cmp	DWORD PTR [ecx+12], edx
	jne	SHORT $LN16@operator@75
	mov	DWORD PTR [esi], ecx

; 183  :     return __tmp;
; 184  :   }

	ret	0
??E?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@QAE?AU012@H@Z ENDP ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> > >::operator++
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE@XZ PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::~_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >, COMDAT
; _this$ = esi

; 409  :   ~_Rb_tree() { clear(); }

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN3@Rb_tree@6
	mov	eax, DWORD PTR [esi+4]
	push	eax
	mov	ecx, esi
	call	?_M_erase@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_erase
	mov	DWORD PTR [esi+8], esi
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+12], esi
	mov	DWORD PTR [esi+16], 0
$LN3@Rb_tree@6:
	ret	0
??1?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE@XZ ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::~_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_map.h
_TEXT	ENDS
;	COMDAT ?clear@?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAEXXZ PROC ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::clear, COMDAT
; _this$ = esi

; 201  :   void clear() { _M_t.clear(); }

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN3@clear@31
	mov	eax, DWORD PTR [esi+4]
	push	eax
	mov	ecx, esi
	call	?_M_erase@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_erase
	mov	DWORD PTR [esi+8], esi
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+12], esi
	mov	DWORD PTR [esi+16], 0
$LN3@clear@31:
	ret	0
?clear@?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAEXXZ ENDP ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::clear
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?erase@?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAEXU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@2@@Z
_TEXT	SEGMENT
___pos$ = 8						; size = 4
?erase@?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAEXU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@2@@Z PROC ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::erase, COMDAT
; _this$ = esi

; 198  :   void erase(iterator __pos) { _M_t.erase(__pos); }

	lea	ecx, DWORD PTR [esi+4]
	push	ecx
	mov	ecx, DWORD PTR ___pos$[esp]
	lea	eax, DWORD PTR [esi+12]
	lea	edx, DWORD PTR [esi+8]
	call	?_Rebalance_for_erase@?$_Rb_global@_N@priv@stlp_std@@SAPAU_Rb_tree_node_base@23@PAU423@AAPAU423@11@Z ; stlp_std::priv::_Rb_global<bool>::_Rebalance_for_erase
	mov	ecx, DWORD PTR [eax+16]
	add	esp, 4
	test	ecx, ecx
	je	SHORT $LN22@erase@47
	add	DWORD PTR [ecx], -1
	mov	edx, DWORD PTR [eax+16]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN22@erase@47
	mov	DWORD PTR [eax+16], 0
$LN22@erase@47:
	test	eax, eax
	je	SHORT $LN36@erase@47
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN36@erase@47:
	add	DWORD PTR [esi+16], -1
	ret	4
?erase@?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAEXU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@2@@Z ENDP ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAE@ABV01@@Z PROC ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >, COMDAT
; _this$ = eax
; ___x$ = edi

; 146  :   map(const _Self& __x) : _M_t(__x._M_t) {}

	push	esi
	mov	esi, eax
	call	??0?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >
	mov	eax, esi
	pop	esi
	ret	0
??0?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAE@ABV01@@Z ENDP ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAE@XZ
_TEXT	SEGMENT
$T355004 = -1						; size = 1
??0?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAE@XZ PROC ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >, COMDAT
; _this$ = eax

; 99   :   map() : _M_t(_Compare(), allocator_type()) {}

	push	ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	BYTE PTR [eax], cl
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	cl, BYTE PTR $T355004[esp+4]
	mov	DWORD PTR [eax+8], eax
	mov	DWORD PTR [eax+12], eax
	mov	BYTE PTR [eax+20], cl
	pop	ecx
	ret	0
??0?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAE@XZ ENDP ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ??1?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAE@XZ PROC ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::~_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >, COMDAT
; _this$ = esi

; 409  :   ~_Rb_tree() { clear(); }

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN3@Rb_tree@7
	mov	eax, DWORD PTR [esi+4]
	push	eax
	mov	ecx, esi
	call	?_M_erase@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_erase
	mov	DWORD PTR [esi+8], esi
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+12], esi
	mov	DWORD PTR [esi+16], 0
$LN3@Rb_tree@7:
	ret	0
??1?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAE@XZ ENDP ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::~_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_map.h
_TEXT	ENDS
;	COMDAT ??0?$map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@stlp_std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@stlp_std@@QAE@ABV01@@Z PROC ; stlp_std::map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >, COMDAT
; _this$ = eax
; ___x$ = edi

; 146  :   map(const _Self& __x) : _M_t(__x._M_t) {}

	push	esi
	mov	esi, eax
	call	??0?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >
	mov	eax, esi
	pop	esi
	ret	0
??0?$map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@stlp_std@@QAE@ABV01@@Z ENDP ; stlp_std::map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??0?$map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@stlp_std@@QAE@XZ PROC ; stlp_std::map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >, COMDAT
; _this$ = eax

; 99   :   map() : _M_t(_Compare(), allocator_type()) {}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	BYTE PTR [eax], cl
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], eax
	mov	DWORD PTR [eax+12], eax
	mov	DWORD PTR [eax+16], ecx
	ret	0
??0?$map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@stlp_std@@QAE@XZ ENDP ; stlp_std::map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?resize@?$vector@VCMotion@@V?$xalloc@VCMotion@@@@@stlp_std@@QAEXIABVCMotion@@@Z
_TEXT	SEGMENT
___new_size$ = 8					; size = 4
?resize@?$vector@VCMotion@@V?$xalloc@VCMotion@@@@@stlp_std@@QAEXIABVCMotion@@@Z PROC ; stlp_std::vector<CMotion,xalloc<CMotion> >::resize, COMDAT
; _this$ = ecx
; ___x$ = eax

; 217  :   { _M_impl.resize(__new_size, cast_traits::to_storage_type_cref(__x)); }

	push	eax
	mov	eax, DWORD PTR ___new_size$[esp]
	call	?resize@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAEXIABVCMotion@@@Z ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::resize
	ret	4
?resize@?$vector@VCMotion@@V?$xalloc@VCMotion@@@@@stlp_std@@QAEXIABVCMotion@@@Z ENDP ; stlp_std::vector<CMotion,xalloc<CMotion> >::resize
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ??1?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE@XZ PROC ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::~_Impl_vector<motion_marks,xalloc<motion_marks> >, COMDAT
; _this$ = eax

; 286  :   ~vector() { _STLP_STD::_Destroy_Range(rbegin(), rend()); }

	push	esi
	mov	esi, eax
	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	push	ecx
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@Vmotion_marks@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0PAVmotion_marks@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<motion_marks *>,motion_marks>
	mov	esi, DWORD PTR [esi]
	add	esp, 8
	test	esi, esi
	je	SHORT $LN32@Impl_vecto@44
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN32@Impl_vecto@44:
	pop	esi
	ret	0
??1?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE@XZ ENDP ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::~_Impl_vector<motion_marks,xalloc<motion_marks> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?resize@?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QAEXIABU?$pair@MM@2@@Z
_TEXT	SEGMENT
?resize@?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QAEXIABU?$pair@MM@2@@Z PROC ; stlp_std::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::resize, COMDAT
; _this$ = edx
; ___new_size$ = ecx
; ___x$ = eax

; 217  :   { _M_impl.resize(__new_size, cast_traits::to_storage_type_cref(__x)); }

	jmp	?resize@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEXIABU?$pair@MM@3@@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::resize
?resize@?$vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@stlp_std@@QAEXIABU?$pair@MM@2@@Z ENDP ; stlp_std::vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::resize
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?resize@?$vector@IV?$xalloc@I@@@stlp_std@@QAEXIABI@Z
_TEXT	SEGMENT
?resize@?$vector@IV?$xalloc@I@@@stlp_std@@QAEXIABI@Z PROC ; stlp_std::vector<unsigned int,xalloc<unsigned int> >::resize, COMDAT
; _this$ = edx
; ___new_size$ = ecx
; ___x$ = eax

; 217  :   { _M_impl.resize(__new_size, cast_traits::to_storage_type_cref(__x)); }

	jmp	?resize@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEXIABI@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::resize
?resize@?$vector@IV?$xalloc@I@@@stlp_std@@QAEXIABI@Z ENDP ; stlp_std::vector<unsigned int,xalloc<unsigned int> >::resize
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$vector@IV?$xalloc@I@@@stlp_std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$vector@IV?$xalloc@I@@@stlp_std@@QAE@ABV01@@Z PROC	; stlp_std::vector<unsigned int,xalloc<unsigned int> >::vector<unsigned int,xalloc<unsigned int> >, COMDAT
; _this$ = ecx
; ___x$ = eax

; 123  :   vector(const _Self& __x)

	push	esi
	mov	esi, ecx
	call	??0?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_Impl_vector<unsigned int,xalloc<unsigned int> >
	mov	eax, esi
	pop	esi
	ret	0
??0?$vector@IV?$xalloc@I@@@stlp_std@@QAE@ABV01@@Z ENDP	; stlp_std::vector<unsigned int,xalloc<unsigned int> >::vector<unsigned int,xalloc<unsigned int> >
_TEXT	ENDS
PUBLIC	?Load@motion_marks@@QAEXPAVIReader@@@Z		; motion_marks::Load
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\skeletonmotions.cpp
;	COMDAT ?Load@motion_marks@@QAEXPAVIReader@@@Z
_TEXT	SEGMENT
_cnt$ = -36						; size = 4
$T355272 = -32						; size = 8
_tmp$ = -24						; size = 24
_R$ = 8							; size = 4
?Load@motion_marks@@QAEXPAVIReader@@@Z PROC		; motion_marks::Load, COMDAT
; _this$ = ecx

; 439  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi

; 440  : 	xr_string 			tmp;
; 441  : 	R->r_string			(tmp);

	mov	esi, DWORD PTR _R$[ebp]
	mov	ebx, ecx
	lea	eax, DWORD PTR _tmp$[esp+44]
	lea	ecx, DWORD PTR _tmp$[esp+60]
	push	edi
	mov	edx, eax
	mov	DWORD PTR _tmp$[esp+68], ecx
	push	edx
	mov	ecx, esi
	mov	DWORD PTR _tmp$[esp+68], eax
	mov	BYTE PTR _tmp$[esp+52], 0
	call	DWORD PTR __imp_?r_string@IReader@@QAEXAAV?$basic_string@DV?$char_traits@D@stlp_std@@V?$xalloc@D@@@stlp_std@@@Z

; 442  :     name				= tmp.c_str();

	lea	eax, DWORD PTR _tmp$[esp+64]
	cmp	DWORD PTR _tmp$[esp+68], eax
	lea	eax, DWORD PTR _tmp$[esp+48]
	je	SHORT $LN64@Load@5
	mov	eax, DWORD PTR _tmp$[esp+48]
$LN64@Load@5:
	mov	ecx, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
	mov	ecx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	test	eax, eax
	je	SHORT $LN69@Load@5
	add	DWORD PTR [eax], 1
$LN69@Load@5:
	mov	ecx, DWORD PTR [ebx+12]
	test	ecx, ecx
	je	SHORT $LN72@Load@5
	add	DWORD PTR [ecx], -1
	mov	edx, DWORD PTR [ebx+12]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN72@Load@5
	mov	DWORD PTR [ebx+12], 0
$LN72@Load@5:

; 443  : 	u32 cnt				= R->r_u32();

	mov	ecx, esi
	mov	DWORD PTR [ebx+12], eax
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ

; 444  : 	intervals.resize	(cnt);

	xorps	xmm0, xmm0
	mov	edi, eax
	lea	eax, DWORD PTR $T355272[esp+48]
	mov	ecx, edi
	mov	edx, ebx
	mov	DWORD PTR _cnt$[esp+48], edi
	movss	DWORD PTR $T355272[esp+48], xmm0
	movss	DWORD PTR $T355272[esp+52], xmm0
	call	?resize@?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEXIABU?$pair@MM@3@@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::resize

; 445  : 	for(u32 i=0; i<cnt; ++i)

	xor	esi, esi
	test	edi, edi
	jbe	SHORT $LN1@Load@5
$LL3@Load@5:
	mov	eax, DWORD PTR [ebx]

; 446  : 	{
; 447  : 		interval& item		= intervals[i];
; 448  : 		item.first			= R->r_float();

	mov	ecx, DWORD PTR _R$[ebp]
	lea	edi, DWORD PTR [eax+esi*8]
	call	DWORD PTR __imp_?r_float@?$IReaderBase@VIReader@@@@QAEMXZ
	fstp	DWORD PTR [edi]

; 449  : 		item.second			= R->r_float();

	mov	ecx, DWORD PTR _R$[ebp]
	call	DWORD PTR __imp_?r_float@?$IReaderBase@VIReader@@@@QAEMXZ
	fstp	DWORD PTR [edi+4]
	add	esi, 1
	cmp	esi, DWORD PTR _cnt$[esp+48]
	jb	SHORT $LL3@Load@5
$LN1@Load@5:

; 450  : 	}
; 451  : }

	lea	ecx, DWORD PTR _tmp$[esp+64]
	cmp	DWORD PTR _tmp$[esp+68], ecx
	je	SHORT $LN104@Load@5
	mov	eax, DWORD PTR _tmp$[esp+48]
	test	eax, eax
	je	SHORT $LN104@Load@5
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN104@Load@5:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Load@motion_marks@@QAEXPAVIReader@@@Z ENDP		; motion_marks::Load
_TEXT	ENDS
PUBLIC	?dump@motions_container@@QAEXXZ			; motions_container::dump
; Function compile flags: /Ogtpy
;	COMDAT ?dump@motions_container@@QAEXXZ
_TEXT	SEGMENT
?dump@motions_container@@QAEXXZ PROC			; motions_container::dump, COMDAT
; _this$ = ecx

; 309  : {

	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	ebx, ecx

; 310  : 	SharedMotionsMapIt it	= container.begin();

	mov	esi, DWORD PTR [ebx+8]

; 311  : 	SharedMotionsMapIt _E	= container.end();
; 312  : 	Log	("--- motion container --- begin:");

	push	OFFSET ??_C@_0CA@EHACPEFG@?9?9?9?5motion?5container?5?9?9?9?5begin?3?$AA@
	call	DWORD PTR __imp_?Log@@YAXPBD@Z
	add	esp, 4

; 313  : 	u32 sz					= sizeof(*this);
; 314  : 	for (u32 k=0; it!=_E; k++,it++){

	xor	edi, edi
	cmp	esi, ebx
	setne	al
	test	al, al
	mov	ebp, 24					; 00000018H
	je	$LN1@dump
	npad	5
$LL30@dump:

; 315  : 		sz					+= it->second->mem_usage();

	mov	ecx, DWORD PTR [esi+20]
	call	?mem_usage@motions_value@@QAEIXZ	; motions_value::mem_usage
	add	ebp, eax

; 316  : 		Msg("#%3d: [%3d/%5d Kb] - %s",k,it->second->m_dwReference,it->second->mem_usage()/1024,it->first.c_str());

	mov	eax, DWORD PTR [esi+16]
	test	eax, eax
	je	SHORT $LN59@dump
	add	eax, 16					; 00000010H
	jmp	SHORT $LN60@dump
$LN59@dump:
	xor	eax, eax
$LN60@dump:
	mov	ecx, DWORD PTR [esi+20]
	push	eax
	call	?mem_usage@motions_value@@QAEIXZ	; motions_value::mem_usage
	shr	eax, 10					; 0000000aH
	push	eax
	mov	eax, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	push	edi
	push	OFFSET ??_C@_0BI@BMBKIPKJ@?$CD?$CF3d?3?5?$FL?$CF3d?1?$CF5d?5Kb?$FN?5?9?5?$CFs?$AA@
	call	DWORD PTR __imp_?Msg@@YAXPBDZZ
	mov	eax, DWORD PTR [esi+12]
	add	esp, 20					; 00000014H
	add	edi, 1
	test	eax, eax
	je	SHORT $LN36@dump
	mov	esi, eax
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	SHORT $LN32@dump

; 313  : 	u32 sz					= sizeof(*this);
; 314  : 	for (u32 k=0; it!=_E; k++,it++){

$LL40@dump:
	mov	esi, eax
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jne	SHORT $LL40@dump
	jmp	SHORT $LN32@dump
$LN36@dump:
	mov	eax, DWORD PTR [esi+4]
	cmp	esi, DWORD PTR [eax+12]
	jne	SHORT $LN33@dump
$LL34@dump:
	mov	esi, eax
	mov	eax, DWORD PTR [eax+4]
	cmp	esi, DWORD PTR [eax+12]
	je	SHORT $LL34@dump
$LN33@dump:
	cmp	DWORD PTR [esi+12], eax
	je	SHORT $LN32@dump
	mov	esi, eax
$LN32@dump:
	cmp	esi, ebx
	setne	al
	test	al, al
	jne	SHORT $LL30@dump
$LN1@dump:

; 317  : 	}
; 318  : 	Msg ("--- items: %d, mem usage: %d Kb ",container.size(),sz/1024);

	mov	edx, DWORD PTR [ebx+16]
	shr	ebp, 10					; 0000000aH
	push	ebp
	push	edx
	push	OFFSET ??_C@_0CB@GLOCMOBE@?9?9?9?5items?3?5?$CFd?0?5mem?5usage?3?5?$CFd?5Kb?5@
	call	DWORD PTR __imp_?Msg@@YAXPBDZZ

; 319  : 	Log	("--- motion container --- end.");

	push	OFFSET ??_C@_0BO@JJOELMJF@?9?9?9?5motion?5container?5?9?9?9?5end?4?$AA@
	call	DWORD PTR __imp_?Log@@YAXPBD@Z
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 320  : }

	ret	0
?dump@motions_container@@QAEXXZ ENDP			; motions_container::dump
_TEXT	ENDS
PUBLIC	?has@motions_container@@QAE_NVshared_str@@@Z	; motions_container::has
; Function compile flags: /Ogtpy
;	COMDAT ?has@motions_container@@QAE_NVshared_str@@@Z
_TEXT	SEGMENT
_key$ = 8						; size = 4
?has@motions_container@@QAE_NVshared_str@@@Z PROC	; motions_container::has, COMDAT
; _this$ = ecx

; 261  : 	return (container.find(key)!=container.end());

	mov	eax, DWORD PTR [ecx+4]
	test	eax, eax
	push	esi
	mov	esi, DWORD PTR _key$[esp]
	mov	edx, ecx
	je	SHORT $LN19@has
	npad	2
$LL24@has:
	cmp	DWORD PTR [eax+16], esi
	jb	SHORT $LN22@has
	mov	edx, eax
	mov	eax, DWORD PTR [eax+8]
	jmp	SHORT $LN21@has
$LN22@has:
	mov	eax, DWORD PTR [eax+12]
$LN21@has:
	test	eax, eax
	jne	SHORT $LL24@has
	cmp	edx, ecx
	je	SHORT $LN75@has
	cmp	esi, DWORD PTR [edx+16]
	jae	SHORT $LN19@has
	mov	edx, ecx
$LN19@has:
	cmp	edx, ecx
$LN75@has:
	setne	al
	test	esi, esi
	je	SHORT $LN69@has
	add	DWORD PTR [esi], -1
$LN69@has:
	pop	esi

; 262  : }

	ret	4
?has@motions_container@@QAE_NVshared_str@@@Z ENDP	; motions_container::has
_TEXT	ENDS
PUBLIC	?bone_motions@motions_value@@QAEPAV?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@Vshared_str@@@Z ; motions_value::bone_motions
; Function compile flags: /Ogtpy
;	COMDAT ?bone_motions@motions_value@@QAEPAV?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@Vshared_str@@@Z
_TEXT	SEGMENT
_bone_name$ = 8						; size = 4
?bone_motions@motions_value@@QAEPAV?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@Vshared_str@@@Z PROC ; motions_value::bone_motions, COMDAT
; _this$ = ecx

; 237  : 	BoneMotionMapIt I = m_motions.find(bone_name);

	mov	eax, DWORD PTR [ecx+144]
	test	eax, eax
	lea	edx, DWORD PTR [ecx+140]
	push	esi
	mov	esi, DWORD PTR _bone_name$[esp]
	mov	ecx, edx
	je	SHORT $LN8@bone_motio
$LL13@bone_motio:
	cmp	DWORD PTR [eax+16], esi
	jb	SHORT $LN11@bone_motio
	mov	ecx, eax
	mov	eax, DWORD PTR [eax+8]
	jmp	SHORT $LN10@bone_motio
$LN11@bone_motio:
	mov	eax, DWORD PTR [eax+12]
$LN10@bone_motio:
	test	eax, eax
	jne	SHORT $LL13@bone_motio
	cmp	ecx, edx
	je	SHORT $LN84@bone_motio
	cmp	esi, DWORD PTR [ecx+16]
	jae	SHORT $LN8@bone_motio
	mov	ecx, edx
$LN8@bone_motio:

; 238  : //	VERIFY			(I != m_motions.end());
; 239  : 	if (I == m_motions.end())

	cmp	ecx, edx
	jne	SHORT $LN1@bone_motio
$LN84@bone_motio:

; 240  : 		return		(0);

	test	esi, esi
	je	SHORT $LN70@bone_motio
	add	DWORD PTR [esi], -1
$LN70@bone_motio:
	xor	eax, eax
	pop	esi

; 243  : }

	ret	4
$LN1@bone_motio:

; 241  : 
; 242  : 	return			(&(*I).second);

	test	esi, esi
	lea	eax, DWORD PTR [ecx+20]
	je	SHORT $LN2@bone_motio
	add	DWORD PTR [esi], -1
$LN2@bone_motio:
	pop	esi

; 243  : }

	ret	4
?bone_motions@motions_value@@QAEPAV?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@Vshared_str@@@Z ENDP ; motions_value::bone_motions
_TEXT	ENDS
PUBLIC	?load@CPartition@@QAEXPAVIKinematics@@PBD@Z	; CPartition::load
; Function compile flags: /Ogtpy
;	COMDAT ?load@CPartition@@QAEXPAVIKinematics@@PBD@Z
_TEXT	SEGMENT
_it$124456 = -1700					; size = 4
_it_e$124457 = -1696					; size = 4
$T357160 = -1692					; size = 4
_i$124444 = -1688					; size = 4
___old_size$357275 = -1684				; size = 4
_v$356598 = -1680					; size = 4
_bid$124465 = -1676					; size = 4
tv605 = -1672						; size = 4
___new_start$357279 = -1668				; size = 4
_S$124455 = -1664					; size = 16
_buff$124448 = -1648					; size = 64
_fn$ = -1584						; size = 520
_ini$ = -1064						; size = 540
_fn_full$ = -520					; size = 520
_V$ = 8							; size = 4
_model_name$ = 12					; size = 4
?load@CPartition@@QAEXPAVIKinematics@@PBD@Z PROC	; CPartition::load, COMDAT
; _this$ = ecx

; 26   : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H

; 27   : 	string_path fn, fn_full;
; 28   : 	xr_strcpy(fn, sizeof(fn), model_name);

	mov	eax, DWORD PTR _model_name$[ebp]
	sub	esp, 1700				; 000006a4H
	push	ebx
	push	esi
	push	edi
	push	520					; 00000208H
	push	eax
	mov	edi, ecx
	lea	ecx, DWORD PTR _fn$[esp+1720]
	push	520					; 00000208H
	push	ecx
	call	DWORD PTR __imp__strncpy_s

; 29   : 	if(strext(fn))

	mov	esi, DWORD PTR __imp__strrchr
	lea	edx, DWORD PTR _fn$[esp+1728]
	push	46					; 0000002eH
	push	edx
	call	esi
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN11@load@2

; 30   : 		*strext(fn) = 0;

	lea	eax, DWORD PTR _fn$[esp+1712]
	push	46					; 0000002eH
	push	eax
	call	esi
	add	esp, 8
	mov	BYTE PTR [eax], 0
$LN11@load@2:

; 31   : 	xr_strcat(fn, sizeof(fn), ".ltx");

	lea	eax, DWORD PTR _fn$[esp+1712]
	lea	edx, DWORD PTR [eax+1]
$LL222@load@2:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL222@load@2
	sub	eax, edx
	lea	eax, DWORD PTR _fn$[esp+eax+1712]
	lea	ecx, DWORD PTR _fn$[esp+2231]
	cmp	eax, ecx
	ja	SHORT $LN24@load@2
	mov	ecx, OFFSET ??_C@_04ICMCOCEO@?4ltx?$AA@
	sub	ecx, eax
	npad	10
$LL22@load@2:
	lea	edx, DWORD PTR _fn$[esp+2231]
	cmp	eax, edx
	je	SHORT $LN20@load@2
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR [eax], dl
	add	eax, 1
	cmp	BYTE PTR [ecx+eax], 0
	jne	SHORT $LL22@load@2
$LN20@load@2:
	mov	BYTE PTR [eax], 0
$LN24@load@2:

; 32   : 	
; 33   : 	FS.update_path(fn_full,"$game_meshes$", fn);

	mov	edx, DWORD PTR __imp_?xr_FS@@3PAVCLocatorAPI@@A
	lea	eax, DWORD PTR _fn$[esp+1712]
	push	eax
	push	OFFSET ??_C@_0O@CGKNLCGD@$game_meshes$?$AA@
	lea	ecx, DWORD PTR _fn_full$[esp+1720]
	push	ecx
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?update_path@CLocatorAPI@@QAEPBDAAY0CAI@DPBD1@Z

; 34   : 
; 35   : 	CInifile ini(fn_full, TRUE, TRUE, FALSE);

	sub	esp, 8
	mov	ecx, esp
	call	??0?$FastDelegate@$$A6A_NPBD@Z@fastdelegate@@QAE@XZ ; fastdelegate::FastDelegate<bool __cdecl(char const *)>::FastDelegate<bool __cdecl(char const *)>
	push	0
	push	0
	push	1
	push	1
	lea	eax, DWORD PTR _fn_full$[esp+1736]
	push	eax
	lea	ecx, DWORD PTR _ini$[esp+1740]
	call	DWORD PTR __imp_??0CInifile@@QAE@PBDHHHIV?$FastDelegate@$$A6A_NPBD@Z@fastdelegate@@@Z

; 36   : 
; 37   : 	if(ini.sections().size()==0)	return;

	mov	ecx, DWORD PTR _ini$[esp+2244]
	sub	ecx, DWORD PTR _ini$[esp+2240]
	test	ecx, -4					; fffffffcH
	je	$LN210@load@2

; 38   : 	shared_str part_name = "partition_name";

	mov	edx, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
	mov	ecx, DWORD PTR [edx]
	push	OFFSET ??_C@_0P@DEDKCAFJ@partition_name?$AA@
	call	DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	test	eax, eax
	mov	DWORD PTR _v$356598[esp+1712], eax
	je	SHORT $LN53@load@2
	add	DWORD PTR [eax], 1
$LN53@load@2:

; 39   : 	for(u32 i=0; i<MAX_PARTS; ++i)

	xor	eax, eax
	mov	DWORD PTR _i$124444[esp+1712], eax
	lea	ebx, DWORD PTR [edi+8]
	npad	9
$LL9@load@2:

; 40   : 	{
; 41   : 		string64			buff;
; 42   : 		xr_sprintf			(buff,sizeof(buff), "part_%d", i);

	push	eax
	lea	eax, DWORD PTR _buff$124448[esp+1716]
	push	OFFSET ??_C@_07PNINCJMO@part_?$CFd?$AA@
	push	eax
	mov	eax, 64					; 00000040H
	call	?xr_sprintf@@YAHPADIPBDZZ		; xr_sprintf
	add	esp, 12					; 0000000cH

; 43   : 		
; 44   : 		CInifile::Sect S		= ini.r_section(buff);

	lea	ecx, DWORD PTR _buff$124448[esp+1712]
	push	ecx
	lea	ecx, DWORD PTR _ini$[esp+1716]
	call	DWORD PTR __imp_?r_section@CInifile@@QBEAAUSect@1@PBD@Z
	push	eax
	lea	ecx, DWORD PTR _S$124455[esp+1716]
	call	DWORD PTR __imp_??0Sect@CInifile@@QAE@ABU01@@Z

; 45   : 		CInifile::SectCIt it	= S.Data.begin();
; 46   : 		CInifile::SectCIt it_e	= S.Data.end();

	mov	eax, DWORD PTR _S$124455[esp+1720]
	mov	ecx, DWORD PTR _S$124455[esp+1716]
	mov	DWORD PTR _it_e$124457[esp+1712], eax

; 47   : 		if(S.Data.size())

	sub	eax, ecx
	test	eax, -8					; fffffff8H
	mov	edi, ecx
	mov	DWORD PTR _it$124456[esp+1712], edi
	je	SHORT $LN96@load@2

; 48   : 		{
; 49   : 			P[i].bones.clear_not_free();

	mov	ecx, DWORD PTR [ebx]
	mov	eax, DWORD PTR [ebx-4]
	cmp	eax, ecx
	je	SHORT $LN96@load@2
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN104@load@2
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN104@load@2:
	mov	DWORD PTR [ebx], eax
$LN96@load@2:

; 50   : 		}
; 51   : 		for(;it!=it_e; ++it)

	cmp	edi, DWORD PTR _it_e$124457[esp+1712]
	je	$LN3@load@2
	npad	7
$LL5@load@2:

; 52   : 		{
; 53   : 			const CInifile::Item& I = *it;
; 54   : 			if(I.first==part_name)

	mov	eax, DWORD PTR [edi]
	cmp	eax, DWORD PTR _v$356598[esp+1712]
	jne	SHORT $LN2@load@2

; 55   : 			{
; 56   : 				P[i].Name = I.second;

	mov	ecx, DWORD PTR [edi+4]
	test	ecx, ecx
	je	SHORT $LN116@load@2
	add	DWORD PTR [ecx], 1
$LN116@load@2:
	mov	eax, DWORD PTR [ebx-8]
	test	eax, eax
	je	SHORT $LN119@load@2
	add	DWORD PTR [eax], -1
	mov	edx, DWORD PTR [ebx-8]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN119@load@2
	mov	DWORD PTR [ebx-8], 0
$LN119@load@2:
	mov	DWORD PTR [ebx-8], ecx

; 57   : 			}else

	jmp	$LN4@load@2
$LN2@load@2:

; 58   : 			{
; 59   : 				u32 bid = V->LL_BoneID(I.first.c_str());

	test	eax, eax
	je	SHORT $LN125@load@2
	lea	ecx, DWORD PTR [eax+16]
	jmp	SHORT $LN126@load@2
$LN125@load@2:
	xor	ecx, ecx
$LN126@load@2:
	mov	eax, DWORD PTR _V$[ebp]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	eax
	mov	eax, DWORD PTR [edx+20]
	call	eax

; 60   : 				P[i].bones.push_back(bid);

	mov	esi, DWORD PTR [ebx]
	cmp	esi, DWORD PTR [ebx+4]
	movzx	eax, ax
	mov	DWORD PTR _bid$124465[esp+1712], eax
	je	SHORT $LN132@load@2
	test	esi, esi
	je	SHORT $LN137@load@2
	mov	DWORD PTR [esi], eax
$LN137@load@2:
	add	DWORD PTR [ebx], 4
	jmp	$LN4@load@2
$LN132@load@2:
	mov	ecx, esi
	sub	ecx, DWORD PTR [ebx-4]
	lea	edx, DWORD PTR $T357160[esp+1712]
	push	edx
	lea	eax, DWORD PTR ___old_size$357275[esp+1716]
	sar	ecx, 2
	push	eax
	mov	DWORD PTR $T357160[esp+1720], 1
	mov	DWORD PTR ___old_size$357275[esp+1720], ecx
	call	??$max@I@stlp_std@@YAABIABI0@Z		; stlp_std::max<unsigned int>
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR ___old_size$357275[esp+1720]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	eax, eax
	add	eax, eax
	add	esp, 8
	push	eax
	mov	DWORD PTR tv605[esp+1716], eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	mov	edi, eax
	mov	eax, DWORD PTR [ebx-4]
	sub	esi, eax
	mov	DWORD PTR ___new_start$357279[esp+1712], edi
	je	SHORT $LN162@load@2
	push	esi
	push	eax
	push	edi
	call	DWORD PTR __imp__memmove
	mov	edx, eax
	add	esp, 12					; 0000000cH
	add	edx, esi
	jmp	SHORT $LN163@load@2
$LN162@load@2:
	mov	edx, edi
$LN163@load@2:
	mov	ecx, DWORD PTR $T357160[esp+1712]
	test	ecx, ecx
	mov	esi, edx
	jbe	SHORT $LN166@load@2
	mov	eax, DWORD PTR _bid$124465[esp+1712]
	mov	esi, ecx
	mov	edi, edx
	rep stosd
	mov	edi, DWORD PTR ___new_start$357279[esp+1712]
	lea	esi, DWORD PTR [edx+esi*4]
$LN166@load@2:
	mov	eax, DWORD PTR [ebx-4]
	test	eax, eax
	je	SHORT $LN203@load@2
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN203@load@2:
	mov	ecx, DWORD PTR tv605[esp+1712]
	add	ecx, edi
	mov	DWORD PTR [ebx-4], edi
	mov	edi, DWORD PTR _it$124456[esp+1712]
	mov	DWORD PTR [ebx], esi
	mov	DWORD PTR [ebx+4], ecx
$LN4@load@2:
	add	edi, 8
	cmp	edi, DWORD PTR _it_e$124457[esp+1712]
	mov	DWORD PTR _it$124456[esp+1712], edi
	jne	$LL5@load@2
$LN3@load@2:

; 61   : 			}
; 62   : 		}
; 63   : 		
; 64   : 	}

	lea	ecx, DWORD PTR _S$124455[esp+1712]
	call	DWORD PTR __imp_??1Sect@CInifile@@QAE@XZ
	mov	eax, DWORD PTR _i$124444[esp+1712]
	add	eax, 1
	add	ebx, 16					; 00000010H
	cmp	eax, 4
	mov	DWORD PTR _i$124444[esp+1712], eax
	jb	$LL9@load@2

; 65   : }

	mov	eax, DWORD PTR _v$356598[esp+1712]
	test	eax, eax
	je	SHORT $LN210@load@2
	add	DWORD PTR [eax], -1
$LN210@load@2:
	lea	ecx, DWORD PTR _ini$[esp+1712]
	call	DWORD PTR __imp_??1CInifile@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?load@CPartition@@QAEXPAVIKinematics@@PBD@Z ENDP	; CPartition::load
_TEXT	ENDS
PUBLIC	?bone_motions@shared_motions@@QAEPAV?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@Vshared_str@@@Z ; shared_motions::bone_motions
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\skeletonmotions.h
;	COMDAT ?bone_motions@shared_motions@@QAEPAV?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@Vshared_str@@@Z
_TEXT	SEGMENT
_bone_name$ = 8						; size = 4
?bone_motions@shared_motions@@QAEPAV?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@Vshared_str@@@Z PROC ; shared_motions::bone_motions, COMDAT
; _this$ = ecx

; 231  : 	MotionVec*			bone_motions	(shared_str bone_name)		{	VERIFY(p_); return p_->bone_motions(bone_name);	}

	push	esi
	mov	esi, DWORD PTR _bone_name$[esp]
	test	esi, esi
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], 0
	je	SHORT $LN8@bone_motio@2
	add	DWORD PTR [esi], 1
$LN8@bone_motio@2:
	mov	edx, DWORD PTR [eax]
	test	edx, edx
	je	SHORT $LN11@bone_motio@2
	add	DWORD PTR [edx], -1
	mov	edx, DWORD PTR [eax]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN11@bone_motio@2
	mov	DWORD PTR [eax], 0
$LN11@bone_motio@2:
	mov	DWORD PTR [eax], esi
	mov	ecx, DWORD PTR [ecx]
	call	?bone_motions@motions_value@@QAEPAV?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@Vshared_str@@@Z ; motions_value::bone_motions
	test	esi, esi
	je	SHORT $LN17@bone_motio@2
	add	DWORD PTR [esi], -1
$LN17@bone_motio@2:
	pop	esi
	ret	4
?bone_motions@shared_motions@@QAEPAV?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@Vshared_str@@@Z ENDP ; shared_motions::bone_motions
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAE@XZ PROC ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::~map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >, COMDAT
; _this$ = esi
	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN5@map
	mov	eax, DWORD PTR [esi+4]
	push	eax
	mov	ecx, esi
	call	?_M_erase@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_erase
	mov	DWORD PTR [esi+8], esi
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+12], esi
	mov	DWORD PTR [esi+16], 0
$LN5@map:
	ret	0
??1?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAE@XZ ENDP ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::~map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$xr_map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@@QAE@XZ
_TEXT	SEGMENT
??1?$xr_map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@@QAE@XZ PROC ; xr_map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::~xr_map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >, COMDAT
; _this$ = esi
	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN7@xr_map
	mov	eax, DWORD PTR [esi+4]
	push	eax
	mov	ecx, esi
	call	?_M_erase@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_erase
	mov	DWORD PTR [esi+8], esi
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+12], esi
	mov	DWORD PTR [esi+16], 0
$LN7@xr_map:
	ret	0
??1?$xr_map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@@QAE@XZ ENDP ; xr_map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::~xr_map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$xr_map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xr_map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@@QAE@ABV0@@Z PROC ; xr_map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::xr_map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >, COMDAT
; _this$ = eax
; ___that$ = edi
	push	esi
	mov	esi, eax
	call	??0?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >
	mov	eax, esi
	pop	esi
	ret	0
??0?$xr_map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@@QAE@ABV0@@Z ENDP ; xr_map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::xr_map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >
_TEXT	ENDS
PUBLIC	??0motions_container@@QAE@ABV0@@Z		; motions_container::motions_container
; Function compile flags: /Ogtpy
;	COMDAT ??0motions_container@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0motions_container@@QAE@ABV0@@Z PROC			; motions_container::motions_container, COMDAT
; _this$ = ecx
	push	esi
	push	edi
	mov	edi, DWORD PTR ___that$[esp+4]
	mov	esi, ecx
	call	??0?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >
	pop	edi
	mov	eax, esi
	pop	esi
	ret	4
??0motions_container@@QAE@ABV0@@Z ENDP			; motions_container::motions_container
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@stlp_std@@QAE@XZ PROC ; stlp_std::map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::~map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >, COMDAT
; _this$ = esi
	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN5@map@2
	mov	eax, DWORD PTR [esi+4]
	push	eax
	mov	ecx, esi
	call	?_M_erase@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_erase
	mov	DWORD PTR [esi+8], esi
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+12], esi
	mov	DWORD PTR [esi+16], 0
$LN5@map@2:
	ret	0
??1?$map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@stlp_std@@QAE@XZ ENDP ; stlp_std::map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::~map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@QAE@ABV0@@Z PROC ; xr_map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::xr_map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >, COMDAT
; _this$ = eax
; ___that$ = edi
	push	esi
	mov	esi, eax
	call	??0?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >
	mov	eax, esi
	pop	esi
	ret	0
??0?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@QAE@ABV0@@Z ENDP ; xr_map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::xr_map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@QAE@XZ
_TEXT	SEGMENT
??1?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@QAE@XZ PROC ; xr_map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::~xr_map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >, COMDAT
; _this$ = esi
	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN7@xr_map@2
	mov	eax, DWORD PTR [esi+4]
	push	eax
	mov	ecx, esi
	call	?_M_erase@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_erase
	mov	DWORD PTR [esi+8], esi
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+12], esi
	mov	DWORD PTR [esi+16], 0
$LN7@xr_map@2:
	ret	0
??1?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@QAE@XZ ENDP ; xr_map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::~xr_map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@QAE@XZ PROC ; xr_map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::xr_map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >, COMDAT
; _this$ = eax
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	BYTE PTR [eax], cl
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], eax
	mov	DWORD PTR [eax+12], eax
	mov	DWORD PTR [eax+16], ecx
	ret	0
??0?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@QAE@XZ ENDP ; xr_map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::xr_map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >
_TEXT	ENDS
PUBLIC	??4CPartDef@@QAEAAV0@ABV0@@Z			; CPartDef::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4CPartDef@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4CPartDef@@QAEAAV0@ABV0@@Z PROC			; CPartDef::operator=, COMDAT
; _this$ = ecx
	mov	edx, DWORD PTR ___that$[esp-4]
	push	ebx
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [edx]
	test	ecx, ecx
	je	SHORT $LN5@operator@76
	add	DWORD PTR [ecx], 1
$LN5@operator@76:
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN8@operator@76
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN8@operator@76
	mov	DWORD PTR [esi], 0
$LN8@operator@76:
	add	edx, 4
	push	edx
	lea	ebx, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], ecx
	call	??4?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::operator=
	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??4CPartDef@@QAEAAV0@ABV0@@Z ENDP			; CPartDef::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@stlp_std@@QAE@XZ PROC ; stlp_std::vector<motion_marks,xalloc<motion_marks> >::~vector<motion_marks,xalloc<motion_marks> >, COMDAT
; _this$ = eax
	push	esi
	mov	esi, eax
	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	push	ecx
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@Vmotion_marks@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0PAVmotion_marks@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<motion_marks *>,motion_marks>
	mov	esi, DWORD PTR [esi]
	add	esp, 8
	test	esi, esi
	je	SHORT $LN34@vector@66
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN34@vector@66:
	pop	esi
	ret	0
??1?$vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@stlp_std@@QAE@XZ ENDP ; stlp_std::vector<motion_marks,xalloc<motion_marks> >::~vector<motion_marks,xalloc<motion_marks> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$xr_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@@QAE@XZ
_TEXT	SEGMENT
??1?$xr_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@@QAE@XZ PROC ; xr_vector<motion_marks,xalloc<motion_marks> >::~xr_vector<motion_marks,xalloc<motion_marks> >, COMDAT
; _this$ = eax
	push	esi
	mov	esi, eax
	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	push	ecx
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@Vmotion_marks@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0PAVmotion_marks@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<motion_marks *>,motion_marks>
	mov	esi, DWORD PTR [esi]
	add	esp, 8
	test	esi, esi
	je	SHORT $LN36@xr_vector@41
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN36@xr_vector@41:
	pop	esi
	ret	0
??1?$xr_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@@QAE@XZ ENDP ; xr_vector<motion_marks,xalloc<motion_marks> >::~xr_vector<motion_marks,xalloc<motion_marks> >
_TEXT	ENDS
PUBLIC	??1CMotionDef@@QAE@XZ				; CMotionDef::~CMotionDef
; Function compile flags: /Ogtpy
;	COMDAT ??1CMotionDef@@QAE@XZ
_TEXT	SEGMENT
??1CMotionDef@@QAE@XZ PROC				; CMotionDef::~CMotionDef, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [esi+20]
	mov	eax, DWORD PTR [esi+16]
	push	ecx
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@Vmotion_marks@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0PAVmotion_marks@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<motion_marks *>,motion_marks>
	mov	esi, DWORD PTR [esi+16]
	add	esp, 8
	test	esi, esi
	je	SHORT $LN38@CMotionDef
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN38@CMotionDef:
	pop	esi
	ret	0
??1CMotionDef@@QAE@XZ ENDP				; CMotionDef::~CMotionDef
_TEXT	ENDS
PUBLIC	??4motion_marks@@QAEAAV0@ABV0@@Z		; motion_marks::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4motion_marks@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4motion_marks@@QAEAAV0@ABV0@@Z PROC			; motion_marks::operator=, COMDAT
; _this$ = ecx
	push	ebx
	push	esi
	mov	esi, DWORD PTR ___that$[esp+4]
	mov	ebx, ecx
	push	esi
	call	??4?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::operator=
	mov	eax, DWORD PTR [esi+12]
	test	eax, eax
	je	SHORT $LN9@operator@77
	add	DWORD PTR [eax], 1
$LN9@operator@77:
	mov	ecx, DWORD PTR [ebx+12]
	test	ecx, ecx
	je	SHORT $LN17@operator@77
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN17@operator@77
	mov	DWORD PTR [ebx+12], 0
$LN17@operator@77:
	mov	DWORD PTR [ebx+12], eax
	pop	esi
	mov	eax, ebx
	pop	ebx
	ret	4
??4motion_marks@@QAEAAV0@ABV0@@Z ENDP			; motion_marks::operator=
_TEXT	ENDS
PUBLIC	??0motion_marks@@QAE@ABV0@@Z			; motion_marks::motion_marks
; Function compile flags: /Ogtpy
;	COMDAT ??0motion_marks@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0motion_marks@@QAE@ABV0@@Z PROC			; motion_marks::motion_marks, COMDAT
; _this$ = ecx
	push	esi
	push	edi
	mov	edi, DWORD PTR ___that$[esp+4]
	mov	esi, ecx
	mov	eax, edi
	call	??0?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
	xor	edx, edx
	mov	DWORD PTR [esi+12], edx
	mov	eax, DWORD PTR [edi+12]
	cmp	eax, edx
	je	SHORT $LN9@motion_mar@2
	add	DWORD PTR [eax], 1
$LN9@motion_mar@2:
	mov	ecx, DWORD PTR [esi+12]
	cmp	ecx, edx
	je	SHORT $LN17@motion_mar@2
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [esi+12]
	cmp	DWORD PTR [ecx], edx
$LN17@motion_mar@2:
	mov	DWORD PTR [esi+12], eax
	pop	edi
	mov	eax, esi
	pop	esi
	ret	4
??0motion_marks@@QAE@ABV0@@Z ENDP			; motion_marks::motion_marks
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
;	COMDAT ??0?$vector@IV?$xalloc@I@@@stlp_std@@QAE@ABV?$xalloc@I@@@Z
_TEXT	SEGMENT
??0?$vector@IV?$xalloc@I@@@stlp_std@@QAE@ABV?$xalloc@I@@@Z PROC ; stlp_std::vector<unsigned int,xalloc<unsigned int> >::vector<unsigned int,xalloc<unsigned int> >, COMDAT
; _this$ = eax

; 106  :   explicit vector(const allocator_type& __a = allocator_type())

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$vector@IV?$xalloc@I@@@stlp_std@@QAE@ABV?$xalloc@I@@@Z ENDP ; stlp_std::vector<unsigned int,xalloc<unsigned int> >::vector<unsigned int,xalloc<unsigned int> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$vector@IV?$xalloc@I@@@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@IV?$xalloc@I@@@stlp_std@@QAE@XZ PROC	; stlp_std::vector<unsigned int,xalloc<unsigned int> >::~vector<unsigned int,xalloc<unsigned int> >, COMDAT
; _this$ = eax
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN36@vector@80
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN36@vector@80:
	ret	0
??1?$vector@IV?$xalloc@I@@@stlp_std@@QAE@XZ ENDP	; stlp_std::vector<unsigned int,xalloc<unsigned int> >::~vector<unsigned int,xalloc<unsigned int> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_GCMotionDef@@QAEPAXI@Z
_TEXT	SEGMENT
??_GCMotionDef@@QAEPAXI@Z PROC				; CMotionDef::`scalar deleting destructor', COMDAT
; _this$ = esi
	mov	ecx, DWORD PTR [esi+20]
	mov	eax, DWORD PTR [esi+16]
	push	ecx
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@Vmotion_marks@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0PAVmotion_marks@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<motion_marks *>,motion_marks>
	mov	eax, DWORD PTR [esi+16]
	add	esp, 8
	test	eax, eax
	je	SHORT $LN49@scalar@55
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN49@scalar@55:
	mov	eax, esi
	ret	0
??_GCMotionDef@@QAEPAXI@Z ENDP				; CMotionDef::`scalar deleting destructor'
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$__destroy_mv_srcs@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@Vmotion_marks@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0PAVmotion_marks@@@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$__destroy_mv_srcs@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@Vmotion_marks@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0PAVmotion_marks@@@Z PROC ; stlp_std::__destroy_mv_srcs<stlp_std::reverse_iterator<motion_marks *>,motion_marks>, COMDAT

; 193  :   typedef typename __move_traits<_Tp>::complete _CompleteMove;
; 194  :   __destroy_range_aux(__first, __last, __ptr, _CompleteMove());

	mov	edx, DWORD PTR ___first$[esp-4]
	push	ecx
	mov	ecx, DWORD PTR ___last$[esp]
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], edx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@Vmotion_marks@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0PAVmotion_marks@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<motion_marks *>,motion_marks>
	add	esp, 8

; 195  : }

	ret	0
??$__destroy_mv_srcs@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@Vmotion_marks@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0PAVmotion_marks@@@Z ENDP ; stlp_std::__destroy_mv_srcs<stlp_std::reverse_iterator<motion_marks *>,motion_marks>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__destroy_aux@VCMotionDef@@@stlp_std@@YAXPAVCMotionDef@@ABU__false_type@0@@Z
_TEXT	SEGMENT
??$__destroy_aux@VCMotionDef@@@stlp_std@@YAXPAVCMotionDef@@ABU__false_type@0@@Z PROC ; stlp_std::__destroy_aux<CMotionDef>, COMDAT
; ___pointer$ = eax

; 53   : { __pointer->~_Tp(); }

	push	esi
	mov	esi, eax
	mov	ecx, DWORD PTR [esi+20]
	mov	eax, DWORD PTR [esi+16]
	push	ecx
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@Vmotion_marks@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0PAVmotion_marks@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<motion_marks *>,motion_marks>
	mov	esi, DWORD PTR [esi+16]
	add	esp, 8
	test	esi, esi
	je	SHORT $LN43@destroy_au@12
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN43@destroy_au@12:
	pop	esi
	ret	0
??$__destroy_aux@VCMotionDef@@@stlp_std@@YAXPAVCMotionDef@@ABU__false_type@0@@Z ENDP ; stlp_std::__destroy_aux<CMotionDef>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__copy_backward@PAVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
??$__copy_backward@PAVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z PROC ; stlp_std::priv::__copy_backward<motion_marks *,motion_marks *,int>, COMDAT
; ___last$ = ecx
; ___result$ = eax

; 235  :                                           _Distance*) {

	push	ebx
	push	esi
	push	edi
	mov	edi, ecx

; 236  :   for (_Distance __n = __last - __first; __n > 0; --__n)

	mov	esi, edi
	sub	esi, DWORD PTR ___first$[esp+8]
	mov	ebx, eax
	sar	esi, 4
	test	esi, esi
	jle	SHORT $LN1@copy_backw@36
$LL3@copy_backw@36:

; 237  :     *--__result = *--__last;

	sub	edi, 16					; 00000010H
	sub	ebx, 16					; 00000010H
	push	edi
	call	??4?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::operator=
	mov	eax, DWORD PTR [edi+12]
	test	eax, eax
	je	SHORT $LN24@copy_backw@36
	add	DWORD PTR [eax], 1
$LN24@copy_backw@36:
	mov	ecx, DWORD PTR [ebx+12]
	test	ecx, ecx
	je	SHORT $LN17@copy_backw@36
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN17@copy_backw@36
	mov	DWORD PTR [ebx+12], 0
$LN17@copy_backw@36:
	sub	esi, 1
	test	esi, esi
	mov	DWORD PTR [ebx+12], eax
	jg	SHORT $LL3@copy_backw@36

; 238  :   return __result;

	mov	eax, ebx
$LN1@copy_backw@36:
	pop	edi
	pop	esi
	pop	ebx

; 239  : }

	ret	0
??$__copy_backward@PAVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ENDP ; stlp_std::priv::__copy_backward<motion_marks *,motion_marks *,int>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@QAEPAXI@Z
_TEXT	SEGMENT
??_G?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@QAEPAXI@Z PROC ; stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >::`scalar deleting destructor', COMDAT
; _this$ = esi
	mov	ecx, DWORD PTR [esi+8]
	mov	eax, DWORD PTR [esi+4]
	push	ecx
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVCMotion@@@stlp_std@@VCMotion@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0PAVCMotion@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotion *>,CMotion>
	mov	eax, DWORD PTR [esi+4]
	add	esp, 8
	test	eax, eax
	je	SHORT $LN41@scalar@56
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN41@scalar@56:
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN56@scalar@56
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax], 0
	mov	eax, esi
	jne	SHORT $LN46@scalar@56
	mov	DWORD PTR [esi], 0
	ret	0
$LN56@scalar@56:
	mov	eax, esi
$LN46@scalar@56:
	ret	0
??_G?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@QAEPAXI@Z ENDP ; stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$_Destroy_Moved_Range@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$_Destroy_Moved_Range@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0@Z PROC ; stlp_std::_Destroy_Moved_Range<stlp_std::reverse_iterator<motion_marks *> >, COMDAT

; 199  :   __destroy_mv_srcs(__first, __last, _STLP_VALUE_TYPE(__first, _ForwardIterator));

	mov	edx, DWORD PTR ___first$[esp-4]
	push	ecx
	mov	ecx, DWORD PTR ___last$[esp]
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], edx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@Vmotion_marks@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0PAVmotion_marks@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<motion_marks *>,motion_marks>
	add	esp, 8

; 200  : }

	ret	0
??$_Destroy_Moved_Range@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0@Z ENDP ; stlp_std::_Destroy_Moved_Range<stlp_std::reverse_iterator<motion_marks *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__destroy_range_aux@PAVCMotionDef@@V1@@stlp_std@@YAXPAVCMotionDef@@00ABU__false_type@0@@Z
_TEXT	SEGMENT
??$__destroy_range_aux@PAVCMotionDef@@V1@@stlp_std@@YAXPAVCMotionDef@@00ABU__false_type@0@@Z PROC ; stlp_std::__destroy_range_aux<CMotionDef *,CMotionDef>, COMDAT
; ___first$ = eax
; ___last$ = edi

; 151  : __destroy_range_aux(_ForwardIterator __first, _ForwardIterator __last, _Tp*, const __false_type& /*_Trivial_destructor*/) {

	push	ebx
	push	esi
	mov	esi, eax

; 152  :   for ( ; __first != __last; ++__first) {

	cmp	esi, edi
	je	SHORT $LN1@destroy_ra@30
	mov	ebx, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	npad	2
$LL3@destroy_ra@30:

; 153  :     __destroy_aux(&(*__first), __false_type());

	mov	ecx, DWORD PTR [esi+20]
	mov	eax, DWORD PTR [esi+16]
	push	ecx
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@Vmotion_marks@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0PAVmotion_marks@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<motion_marks *>,motion_marks>
	mov	eax, DWORD PTR [esi+16]
	add	esp, 8
	test	eax, eax
	je	SHORT $LN48@destroy_ra@30
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	ebx
$LN48@destroy_ra@30:
	add	esi, 28					; 0000001cH
	cmp	esi, edi
	jne	SHORT $LL3@destroy_ra@30
$LN1@destroy_ra@30:

; 154  : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 155  :     memset((char*)&(*__first), _STLP_SHRED_BYTE, sizeof(_Tp));
; 156  : #endif
; 157  :   }
; 158  : }

	pop	esi
	pop	ebx
	ret	0
??$__destroy_range_aux@PAVCMotionDef@@V1@@stlp_std@@YAXPAVCMotionDef@@00ABU__false_type@0@@Z ENDP ; stlp_std::__destroy_range_aux<CMotionDef *,CMotionDef>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Param_Construct@Vmotion_marks@@V1@@stlp_std@@YAXPAVmotion_marks@@ABV1@@Z
_TEXT	SEGMENT
??$_Param_Construct@Vmotion_marks@@V1@@stlp_std@@YAXPAVmotion_marks@@ABV1@@Z PROC ; stlp_std::_Param_Construct<motion_marks,motion_marks>, COMDAT
; ___p$ = eax
; ___val$ = edi

; 117  : inline void _Param_Construct(_T1* __p, const _T2& __val) {

	push	esi
	mov	esi, eax

; 118  : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 119  :   memset((char*)__p, _STLP_SHRED_BYTE, sizeof(_T1));
; 120  : #endif
; 121  :   _STLP_PLACEMENT_NEW (__p) _T1(__val);

	test	esi, esi
	je	SHORT $LN3@Param_Cons@21
	mov	eax, edi
	call	??0?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
	mov	DWORD PTR [esi+12], 0
	mov	ecx, DWORD PTR [edi+12]
	test	ecx, ecx
	je	SHORT $LN15@Param_Cons@21
	add	DWORD PTR [ecx], 1
$LN15@Param_Cons@21:
	mov	eax, DWORD PTR [esi+12]
	test	eax, eax
	je	SHORT $LN18@Param_Cons@21
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [esi+12]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN18@Param_Cons@21
	mov	DWORD PTR [esi+12], 0
$LN18@Param_Cons@21:
	mov	DWORD PTR [esi+12], ecx
$LN3@Param_Cons@21:
	pop	esi

; 122  : }

	ret	0
??$_Param_Construct@Vmotion_marks@@V1@@stlp_std@@YAXPAVmotion_marks@@ABV1@@Z ENDP ; stlp_std::_Param_Construct<motion_marks,motion_marks>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__destroy_range_aux@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@VCMotionDef@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0PAVCMotionDef@@ABU__false_type@0@@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$__destroy_range_aux@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@VCMotionDef@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0PAVCMotionDef@@ABU__false_type@0@@Z PROC ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotionDef *>,CMotionDef>, COMDAT

; 151  : __destroy_range_aux(_ForwardIterator __first, _ForwardIterator __last, _Tp*, const __false_type& /*_Trivial_destructor*/) {

	push	ebx

; 152  :   for ( ; __first != __last; ++__first) {

	mov	ebx, DWORD PTR ___last$[esp]
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR ___first$[esp+12]
	cmp	edi, ebx
	je	SHORT $LN1@destroy_ra@31
	mov	ebp, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	lea	esi, DWORD PTR [edi-12]
	npad	7
$LL6@destroy_ra@31:

; 153  :     __destroy_aux(&(*__first), __false_type());

	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	push	ecx
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@Vmotion_marks@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0PAVmotion_marks@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<motion_marks *>,motion_marks>
	mov	eax, DWORD PTR [esi]
	add	esp, 8
	test	eax, eax
	je	SHORT $LN60@destroy_ra@31
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	ebp
$LN60@destroy_ra@31:
	sub	edi, 28					; 0000001cH
	sub	esi, 28					; 0000001cH
	cmp	edi, ebx
	jne	SHORT $LL6@destroy_ra@31
$LN1@destroy_ra@31:

; 154  : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 155  :     memset((char*)&(*__first), _STLP_SHRED_BYTE, sizeof(_Tp));
; 156  : #endif
; 157  :   }
; 158  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	0
??$__destroy_range_aux@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@VCMotionDef@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0PAVCMotionDef@@ABU__false_type@0@@Z ENDP ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotionDef *>,CMotionDef>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__destroy_aux@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@0@ABU__false_type@0@@Z
_TEXT	SEGMENT
??$__destroy_aux@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@0@ABU__false_type@0@@Z PROC ; stlp_std::__destroy_aux<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >, COMDAT
; ___pointer$ = esi

; 53   : { __pointer->~_Tp(); }

	mov	ecx, DWORD PTR [esi+8]
	mov	eax, DWORD PTR [esi+4]
	push	ecx
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVCMotion@@@stlp_std@@VCMotion@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0PAVCMotion@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotion *>,CMotion>
	mov	eax, DWORD PTR [esi+4]
	add	esp, 8
	test	eax, eax
	je	SHORT $LN43@destroy_au@13
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN43@destroy_au@13:
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN48@destroy_au@13
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN48@destroy_au@13
	mov	DWORD PTR [esi], 0
$LN48@destroy_au@13:
	ret	0
??$__destroy_aux@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@0@ABU__false_type@0@@Z ENDP ; stlp_std::__destroy_aux<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__copy@PBVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z
_TEXT	SEGMENT
??$__copy@PBVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z PROC ; stlp_std::priv::__copy<motion_marks const *,motion_marks *,int>, COMDAT
; ___first$ = edx
; ___last$ = ecx
; ___result$ = eax

; 200  :        _OutputIter __result, const random_access_iterator_tag &, _Distance*) {

	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, edx

; 201  :   for (_Distance __n = __last - __first; __n > 0; --__n) {

	sub	edi, esi
	sar	edi, 4
	test	edi, edi
	mov	ebx, eax
	jle	SHORT $LN1@copy@24
$LL3@copy@24:

; 202  :     *__result = *__first;

	push	esi
	call	??4?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::operator=
	mov	eax, DWORD PTR [esi+12]
	test	eax, eax
	je	SHORT $LN24@copy@24
	add	DWORD PTR [eax], 1
$LN24@copy@24:
	mov	ecx, DWORD PTR [ebx+12]
	test	ecx, ecx
	je	SHORT $LN17@copy@24
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN17@copy@24
	mov	DWORD PTR [ebx+12], 0
$LN17@copy@24:
	mov	DWORD PTR [ebx+12], eax
	sub	edi, 1

; 203  :     ++__first;

	add	esi, 16					; 00000010H

; 204  :     ++__result;

	add	ebx, 16					; 00000010H
	test	edi, edi
	jg	SHORT $LL3@copy@24

; 205  :   }
; 206  :   return __result;

	mov	eax, ebx
$LN1@copy@24:
	pop	edi
	pop	esi
	pop	ebx

; 207  : }

	ret	0
??$__copy@PBVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ENDP ; stlp_std::priv::__copy<motion_marks const *,motion_marks *,int>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$fill@PAVmotion_marks@@V1@@stlp_std@@YAXPAVmotion_marks@@0ABV1@@Z
_TEXT	SEGMENT
___last$ = 8						; size = 4
??$fill@PAVmotion_marks@@V1@@stlp_std@@YAXPAVmotion_marks@@0ABV1@@Z PROC ; stlp_std::fill<motion_marks *,motion_marks>, COMDAT
; ___first$ = eax
; ___val$ = esi

; 392  : void fill(_ForwardIter __first, _ForwardIter __last, const _Tp& __val) {

	push	ebx
	push	ebp
	mov	ebp, DWORD PTR ___last$[esp+4]
	mov	ebx, eax

; 393  :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__first, __last))
; 394  :   for ( ; __first != __last; ++__first)

	cmp	ebx, ebp
	je	SHORT $LN1@fill@11
	npad	4
$LL3@fill@11:

; 395  :     *__first = __val;

	push	esi
	call	??4?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::operator=
	mov	ecx, DWORD PTR [esi+12]
	test	ecx, ecx
	je	SHORT $LN14@fill@11
	add	DWORD PTR [ecx], 1
$LN14@fill@11:
	mov	eax, DWORD PTR [ebx+12]
	test	eax, eax
	je	SHORT $LN17@fill@11
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [ebx+12]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN17@fill@11
	mov	DWORD PTR [ebx+12], 0
$LN17@fill@11:
	mov	DWORD PTR [ebx+12], ecx
	add	ebx, 16					; 00000010H
	cmp	ebx, ebp
	jne	SHORT $LL3@fill@11
$LN1@fill@11:
	pop	ebp
	pop	ebx

; 396  : }

	ret	0
??$fill@PAVmotion_marks@@V1@@stlp_std@@YAXPAVmotion_marks@@0ABV1@@Z ENDP ; stlp_std::fill<motion_marks *,motion_marks>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__copy_backward_ptrs@PAVmotion_marks@@PAV1@@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABU__false_type@1@@Z
_TEXT	SEGMENT
___result$ = 8						; size = 4
??$__copy_backward_ptrs@PAVmotion_marks@@PAV1@@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABU__false_type@1@@Z PROC ; stlp_std::priv::__copy_backward_ptrs<motion_marks *,motion_marks *>, COMDAT
; ___first$ = eax
; ___last$ = ecx

; 289  :   return __copy_backward(__first, __last, __result, _STLP_ITERATOR_CATEGORY(__first, _InputIter), _STLP_DISTANCE_TYPE(__first, _InputIter));

	push	eax
	mov	eax, DWORD PTR ___result$[esp]
	call	??$__copy_backward@PAVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__copy_backward<motion_marks *,motion_marks *,int>
	add	esp, 4

; 290  : }

	ret	0
??$__copy_backward_ptrs@PAVmotion_marks@@PAV1@@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABU__false_type@1@@Z ENDP ; stlp_std::priv::__copy_backward_ptrs<motion_marks *,motion_marks *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$_Copy_Construct@Vmotion_marks@@@stlp_std@@YAXPAVmotion_marks@@ABV1@@Z
_TEXT	SEGMENT
??$_Copy_Construct@Vmotion_marks@@@stlp_std@@YAXPAVmotion_marks@@ABV1@@Z PROC ; stlp_std::_Copy_Construct<motion_marks>, COMDAT
; ___p$ = eax
; ___val$ = edi

; 109  : inline void _Copy_Construct(_Tp* __p, const _Tp& __val) {

	push	esi
	mov	esi, eax

; 110  : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 111  :   memset((char*)__p, _STLP_SHRED_BYTE, sizeof(_Tp));
; 112  : #endif
; 113  :   _STLP_PLACEMENT_NEW (__p) _Tp(__val);

	test	esi, esi
	je	SHORT $LN3@Copy_Const@30
	mov	eax, edi
	call	??0?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
	mov	DWORD PTR [esi+12], 0
	mov	ecx, DWORD PTR [edi+12]
	test	ecx, ecx
	je	SHORT $LN15@Copy_Const@30
	add	DWORD PTR [ecx], 1
$LN15@Copy_Const@30:
	mov	eax, DWORD PTR [esi+12]
	test	eax, eax
	je	SHORT $LN18@Copy_Const@30
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [esi+12]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN18@Copy_Const@30
	mov	DWORD PTR [esi+12], 0
$LN18@Copy_Const@30:
	mov	DWORD PTR [esi+12], ecx
$LN3@Copy_Const@30:
	pop	esi

; 114  : }

	ret	0
??$_Copy_Construct@Vmotion_marks@@@stlp_std@@YAXPAVmotion_marks@@ABV1@@Z ENDP ; stlp_std::_Copy_Construct<motion_marks>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_pair.h
_TEXT	ENDS
;	COMDAT ??0?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@QAE@ABU01@@Z
_TEXT	SEGMENT
??0?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@QAE@ABU01@@Z PROC ; stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >, COMDAT
; _this$ = edi
; ___o$ = edx

; 62   :   pair(const pair<_T1,_T2>& __o) : first(__o.first), second(__o.second) {}

	mov	DWORD PTR [edi], 0
	mov	ecx, DWORD PTR [edx]
	test	ecx, ecx
	je	SHORT $LN5@pair@13
	add	DWORD PTR [ecx], 1
$LN5@pair@13:
	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN8@pair@13
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [edi]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN8@pair@13
	mov	DWORD PTR [edi], 0
$LN8@pair@13:
	push	ebx
	push	esi
	lea	ebx, DWORD PTR [edx+4]
	lea	esi, DWORD PTR [edi+4]
	mov	DWORD PTR [edi], ecx
	call	??0?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_Impl_vector<CMotion,xalloc<CMotion> >
	pop	esi
	mov	eax, edi
	pop	ebx
	ret	0
??0?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@QAE@ABU01@@Z ENDP ; stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?_M_clear_after_move@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXXZ
_TEXT	SEGMENT
?_M_clear_after_move@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXXZ PROC ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_clear_after_move, COMDAT
; _this$ = eax

; 620  :   void _M_clear_after_move() {

	push	esi
	mov	esi, eax

; 621  :     _STLP_STD::_Destroy_Moved_Range(rbegin(), rend());

	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	push	ecx
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@Vmotion_marks@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0PAVmotion_marks@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<motion_marks *>,motion_marks>

; 622  :     this->_M_end_of_storage.deallocate(this->_M_start, this->_M_end_of_storage._M_data - this->_M_start);

	mov	esi, DWORD PTR [esi]
	add	esp, 8
	test	esi, esi
	je	SHORT $LN29@M_clear_af@4
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN29@M_clear_af@4:

; 623  :   }

	pop	esi
	ret	0
?_M_clear_after_move@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXXZ ENDP ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_clear_after_move
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$_Copy_Construct@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@0@ABU10@@Z
_TEXT	SEGMENT
??$_Copy_Construct@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@0@ABU10@@Z PROC ; stlp_std::_Copy_Construct<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >, COMDAT
; ___p$ = eax
; ___val$ = ecx

; 110  : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 111  :   memset((char*)__p, _STLP_SHRED_BYTE, sizeof(_Tp));
; 112  : #endif
; 113  :   _STLP_PLACEMENT_NEW (__p) _Tp(__val);

	test	eax, eax
	push	esi
	mov	esi, ecx
	je	SHORT $LN3@Copy_Const@31
	mov	DWORD PTR [eax], 0
	mov	edx, DWORD PTR [esi]
	test	edx, edx
	je	SHORT $LN11@Copy_Const@31
	add	DWORD PTR [edx], 1
$LN11@Copy_Const@31:
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN14@Copy_Const@31
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN14@Copy_Const@31
	mov	DWORD PTR [eax], 0
$LN14@Copy_Const@31:
	push	ebx
	lea	ebx, DWORD PTR [esi+4]
	lea	esi, DWORD PTR [eax+4]
	mov	DWORD PTR [eax], edx
	call	??0?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_Impl_vector<CMotion,xalloc<CMotion> >
	pop	ebx
$LN3@Copy_Const@31:
	pop	esi

; 114  : }

	ret	0
??$_Copy_Construct@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@0@ABU10@@Z ENDP ; stlp_std::_Copy_Construct<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__destroy_range@PAVCMotionDef@@V1@@stlp_std@@YAXPAVCMotionDef@@00@Z
_TEXT	SEGMENT
??$__destroy_range@PAVCMotionDef@@V1@@stlp_std@@YAXPAVCMotionDef@@00@Z PROC ; stlp_std::__destroy_range<CMotionDef *,CMotionDef>, COMDAT
; ___first$ = eax
; ___last$ = edi

; 175  :   typedef typename __type_traits<_Tp>::has_trivial_destructor _Trivial_destructor;
; 176  :   __destroy_range_aux(__first, __last, __ptr, _Trivial_destructor());

	jmp	??$__destroy_range_aux@PAVCMotionDef@@V1@@stlp_std@@YAXPAVCMotionDef@@00ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<CMotionDef *,CMotionDef>
??$__destroy_range@PAVCMotionDef@@V1@@stlp_std@@YAXPAVCMotionDef@@00@Z ENDP ; stlp_std::__destroy_range<CMotionDef *,CMotionDef>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__copy@PAVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z
_TEXT	SEGMENT
??$__copy@PAVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z PROC ; stlp_std::priv::__copy<motion_marks *,motion_marks *,int>, COMDAT
; ___first$ = edx
; ___last$ = ecx
; ___result$ = eax

; 200  :        _OutputIter __result, const random_access_iterator_tag &, _Distance*) {

	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, edx

; 201  :   for (_Distance __n = __last - __first; __n > 0; --__n) {

	sub	edi, esi
	sar	edi, 4
	test	edi, edi
	mov	ebx, eax
	jle	SHORT $LN1@copy@25
$LL3@copy@25:

; 202  :     *__result = *__first;

	push	esi
	call	??4?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::operator=
	mov	eax, DWORD PTR [esi+12]
	test	eax, eax
	je	SHORT $LN24@copy@25
	add	DWORD PTR [eax], 1
$LN24@copy@25:
	mov	ecx, DWORD PTR [ebx+12]
	test	ecx, ecx
	je	SHORT $LN17@copy@25
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN17@copy@25
	mov	DWORD PTR [ebx+12], 0
$LN17@copy@25:
	mov	DWORD PTR [ebx+12], eax
	sub	edi, 1

; 203  :     ++__first;

	add	esi, 16					; 00000010H

; 204  :     ++__result;

	add	ebx, 16					; 00000010H
	test	edi, edi
	jg	SHORT $LL3@copy@25

; 205  :   }
; 206  :   return __result;

	mov	eax, ebx
$LN1@copy@25:
	pop	edi
	pop	esi
	pop	ebx

; 207  : }

	ret	0
??$__copy@PAVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ENDP ; stlp_std::priv::__copy<motion_marks *,motion_marks *,int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_uninitialized.h
_TEXT	ENDS
;	COMDAT ??$__ucopy@PBVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z
_TEXT	SEGMENT
___n$133932 = -4					; size = 4
??$__ucopy@PBVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z PROC ; stlp_std::priv::__ucopy<motion_marks const *,motion_marks *,int>, COMDAT
; ___first$ = ecx
; ___last$ = eax
; ___result$ = edx

; 83   :                            _OutputIter __result, const random_access_iterator_tag &, _Distance*) {

	push	ecx
	push	ebp
	push	esi
	push	edi
	mov	edi, ecx

; 84   :   _OutputIter __cur = __result;
; 85   :   _STLP_TRY {
; 86   :     for (_Distance __n = __last - __first; __n > 0; --__n) {

	sub	eax, edi
	sar	eax, 4
	xor	ebp, ebp
	cmp	eax, ebp
	mov	esi, edx
	mov	DWORD PTR ___n$133932[esp+16], eax
	jle	$LN63@ucopy@19
	push	ebx
	npad	4
$LL3@ucopy@19:

; 87   :       _Param_Construct(&*__cur, *__first);

	cmp	esi, ebp
	je	SHORT $LN65@ucopy@19
	mov	eax, DWORD PTR [edi+4]
	sub	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], ebp
	sar	eax, 3
	mov	DWORD PTR [esi+4], ebp
	lea	ebx, DWORD PTR [eax*8]
	mov	DWORD PTR [esi+8], ebp
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	ebx
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	add	ebx, eax
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], ebx
	mov	edx, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [edi]
	cmp	edx, ecx
	je	SHORT $LN51@ucopy@19
	mov	ebx, edx
	sub	ebx, ecx
	push	ebx
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, ebx
$LN51@ucopy@19:
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+12], ebp
	mov	ecx, DWORD PTR [edi+12]
	cmp	ecx, ebp
	je	SHORT $LN64@ucopy@19
	add	DWORD PTR [ecx], 1
$LN64@ucopy@19:
	mov	eax, DWORD PTR [esi+12]
	cmp	eax, ebp
	je	SHORT $LN57@ucopy@19
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [esi+12]
	cmp	DWORD PTR [eax], ebp
	jne	SHORT $LN57@ucopy@19
	mov	DWORD PTR [esi+12], ebp
$LN57@ucopy@19:
	mov	eax, DWORD PTR ___n$133932[esp+20]
	mov	DWORD PTR [esi+12], ecx
$LN65@ucopy@19:
	sub	eax, 1

; 88   :       ++__first;

	add	edi, 16					; 00000010H

; 89   :       ++__cur;

	add	esi, 16					; 00000010H
	cmp	eax, ebp
	mov	DWORD PTR ___n$133932[esp+20], eax
	jg	$LL3@ucopy@19
	pop	ebx
$LN63@ucopy@19:
	pop	edi

; 90   :     }
; 91   :     return __cur;

	mov	eax, esi
	pop	esi
	pop	ebp

; 92   :   }
; 93   :   _STLP_UNWIND(_STLP_STD::_Destroy_Range(__result, __cur))
; 94   :   _STLP_RET_AFTER_THROW(__cur)
; 95   : }

	pop	ecx
	ret	0
??$__ucopy@PBVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ENDP ; stlp_std::priv::__ucopy<motion_marks const *,motion_marks *,int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$__destroy_range@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@VCMotionDef@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0PAVCMotionDef@@@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$__destroy_range@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@VCMotionDef@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0PAVCMotionDef@@@Z PROC ; stlp_std::__destroy_range<stlp_std::reverse_iterator<CMotionDef *>,CMotionDef>, COMDAT

; 175  :   typedef typename __type_traits<_Tp>::has_trivial_destructor _Trivial_destructor;
; 176  :   __destroy_range_aux(__first, __last, __ptr, _Trivial_destructor());

	mov	edx, DWORD PTR ___first$[esp-4]
	push	ecx
	mov	ecx, DWORD PTR ___last$[esp]
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], edx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@VCMotionDef@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0PAVCMotionDef@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotionDef *>,CMotionDef>
	add	esp, 8

; 177  : }

	ret	0
??$__destroy_range@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@VCMotionDef@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0PAVCMotionDef@@@Z ENDP ; stlp_std::__destroy_range<stlp_std::reverse_iterator<CMotionDef *>,CMotionDef>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.c
_TEXT	ENDS
;	COMDAT ?_M_insert@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@AAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@23@PAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@PAUmotions_value@@@3@00@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___parent$ = 12						; size = 4
___on_left$ = 16					; size = 4
?_M_insert@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@AAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@23@PAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@PAUmotions_value@@@3@00@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_insert, COMDAT
; _this$ = ebx
; ___val$ = eax

; 353  :                                                                       _Rb_tree_node_base * __on_right) {

	push	ebp
	mov	ebp, DWORD PTR ___parent$[esp]

; 354  :   // We do not create the node here as, depending on tests, we might call
; 355  :   // _M_key_compare that can throw an exception.
; 356  :   _Base_ptr __new_node;
; 357  : 
; 358  :   if ( __parent == &this->_M_header._M_data ) {

	cmp	ebp, ebx
	push	esi
	push	edi
	mov	edi, eax
	jne	SHORT $LN7@M_insert@4

; 359  :     __new_node = _M_create_node(__val);

	call	?_M_create_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@PAUmotions_value@@@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_create_node
	mov	esi, eax

; 360  :     _S_left(__parent) = __new_node;   // also makes _M_leftmost() = __new_node

	mov	DWORD PTR [ebp+8], esi

; 361  :     _M_root() = __new_node;

	mov	DWORD PTR [ebx+4], esi

; 362  :     _M_rightmost() = __new_node;
; 363  :   }
; 364  :   else if ( __on_right == 0 &&     // If __on_right != 0, the remainder fails to false

	jmp	SHORT $LN50@M_insert@4
$LN7@M_insert@4:

; 365  :            ( __on_left != 0 ||     // If __on_left != 0, the remainder succeeds to true
; 366  :              _M_key_compare( _KeyOfValue()(__val), _S_key(__parent) ) ) ) {

	cmp	DWORD PTR ___on_left$[esp+8], 0
	jne	SHORT $LN4@M_insert@4
	mov	eax, DWORD PTR [edi]
	cmp	eax, DWORD PTR [ebp+16]
	jae	SHORT $LN5@M_insert@4
$LN4@M_insert@4:

; 367  :     __new_node = _M_create_node(__val);

	call	?_M_create_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@PAUmotions_value@@@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_create_node
	mov	esi, eax

; 368  :     _S_left(__parent) = __new_node;

	mov	DWORD PTR [ebp+8], esi

; 369  :     if (__parent == _M_leftmost())

	cmp	ebp, DWORD PTR [ebx+8]
	jne	SHORT $LN1@M_insert@4

; 370  :       _M_leftmost() = __new_node;   // maintain _M_leftmost() pointing to min node

	mov	DWORD PTR [ebx+8], esi

; 371  :   }
; 372  :   else {

	jmp	SHORT $LN1@M_insert@4
$LN5@M_insert@4:

; 373  :     __new_node = _M_create_node(__val);

	call	?_M_create_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@PAUmotions_value@@@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_create_node
	mov	esi, eax

; 374  :     _S_right(__parent) = __new_node;

	mov	DWORD PTR [ebp+12], esi

; 375  :     if (__parent == _M_rightmost())

	cmp	ebp, DWORD PTR [ebx+12]
	jne	SHORT $LN1@M_insert@4
$LN50@M_insert@4:

; 376  :       _M_rightmost() = __new_node;  // maintain _M_rightmost() pointing to max node

	mov	DWORD PTR [ebx+12], esi
$LN1@M_insert@4:

; 377  :   }
; 378  :   _S_parent(__new_node) = __parent;
; 379  :   _Rb_global_inst::_Rebalance(__new_node, this->_M_header._M_data._M_parent);

	lea	edi, DWORD PTR [ebx+4]
	mov	eax, esi
	mov	DWORD PTR [esi+4], ebp
	call	?_Rebalance@?$_Rb_global@_N@priv@stlp_std@@SAXPAU_Rb_tree_node_base@23@AAPAU423@@Z ; stlp_std::priv::_Rb_global<bool>::_Rebalance

; 380  :   ++_M_node_count;
; 381  :   return iterator(__new_node);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+8]
	add	DWORD PTR [ebx+16], 1
	pop	edi
	mov	DWORD PTR [eax], esi
	pop	esi
	pop	ebp

; 382  : }

	ret	12					; 0000000cH
?_M_insert@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@AAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@23@PAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@PAUmotions_value@@@3@00@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_insert
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_insert@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@AAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@23@PAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@G@3@00@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___parent$ = 12						; size = 4
___on_left$ = 16					; size = 4
?_M_insert@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@AAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@23@PAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@G@3@00@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_insert, COMDAT
; _this$ = ebx
; ___val$ = eax

; 353  :                                                                       _Rb_tree_node_base * __on_right) {

	push	ebp
	mov	ebp, DWORD PTR ___parent$[esp]

; 354  :   // We do not create the node here as, depending on tests, we might call
; 355  :   // _M_key_compare that can throw an exception.
; 356  :   _Base_ptr __new_node;
; 357  : 
; 358  :   if ( __parent == &this->_M_header._M_data ) {

	cmp	ebp, ebx
	push	esi
	push	edi
	mov	edi, eax
	jne	SHORT $LN7@M_insert@5

; 359  :     __new_node = _M_create_node(__val);

	call	?_M_create_node@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@G@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_create_node
	mov	esi, eax

; 360  :     _S_left(__parent) = __new_node;   // also makes _M_leftmost() = __new_node

	mov	DWORD PTR [ebp+8], esi

; 361  :     _M_root() = __new_node;

	mov	DWORD PTR [ebx+4], esi

; 362  :     _M_rightmost() = __new_node;
; 363  :   }
; 364  :   else if ( __on_right == 0 &&     // If __on_right != 0, the remainder fails to false

	jmp	SHORT $LN42@M_insert@5
$LN7@M_insert@5:

; 365  :            ( __on_left != 0 ||     // If __on_left != 0, the remainder succeeds to true
; 366  :              _M_key_compare( _KeyOfValue()(__val), _S_key(__parent) ) ) ) {

	cmp	DWORD PTR ___on_left$[esp+8], 0
	jne	SHORT $LN4@M_insert@5
	lea	ecx, DWORD PTR [ebp+16]
	call	??Raccel_str_pred@@QBE_NABVshared_str@@0@Z ; accel_str_pred::operator()
	test	al, al
	je	SHORT $LN5@M_insert@5
$LN4@M_insert@5:

; 367  :     __new_node = _M_create_node(__val);

	call	?_M_create_node@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@G@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_create_node
	mov	esi, eax

; 368  :     _S_left(__parent) = __new_node;

	mov	DWORD PTR [ebp+8], esi

; 369  :     if (__parent == _M_leftmost())

	cmp	ebp, DWORD PTR [ebx+8]
	jne	SHORT $LN1@M_insert@5

; 370  :       _M_leftmost() = __new_node;   // maintain _M_leftmost() pointing to min node

	mov	DWORD PTR [ebx+8], esi

; 371  :   }
; 372  :   else {

	jmp	SHORT $LN1@M_insert@5
$LN5@M_insert@5:

; 373  :     __new_node = _M_create_node(__val);

	call	?_M_create_node@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@G@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_create_node
	mov	esi, eax

; 374  :     _S_right(__parent) = __new_node;

	mov	DWORD PTR [ebp+12], esi

; 375  :     if (__parent == _M_rightmost())

	cmp	ebp, DWORD PTR [ebx+12]
	jne	SHORT $LN1@M_insert@5
$LN42@M_insert@5:

; 376  :       _M_rightmost() = __new_node;  // maintain _M_rightmost() pointing to max node

	mov	DWORD PTR [ebx+12], esi
$LN1@M_insert@5:

; 377  :   }
; 378  :   _S_parent(__new_node) = __parent;
; 379  :   _Rb_global_inst::_Rebalance(__new_node, this->_M_header._M_data._M_parent);

	lea	edi, DWORD PTR [ebx+4]
	mov	eax, esi
	mov	DWORD PTR [esi+4], ebp
	call	?_Rebalance@?$_Rb_global@_N@priv@stlp_std@@SAXPAU_Rb_tree_node_base@23@AAPAU423@@Z ; stlp_std::priv::_Rb_global<bool>::_Rebalance

; 380  :   ++_M_node_count;
; 381  :   return iterator(__new_node);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+8]
	add	DWORD PTR [ebx+16], 1
	pop	edi
	mov	DWORD PTR [eax], esi
	pop	esi
	pop	ebp

; 382  : }

	ret	12					; 0000000cH
?_M_insert@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@AAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@23@PAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@G@3@00@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_insert
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$_Destroy@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@0@@Z
_TEXT	SEGMENT
??$_Destroy@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@0@@Z PROC ; stlp_std::_Destroy<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >, COMDAT
; ___pointer$ = esi

; 60   : #if defined (_STLP_MSVC) && (_STLP_MSVC <= 1010)
; 61   :   __pointer;
; 62   : #endif
; 63   :   typedef typename __type_traits<_Tp>::has_trivial_destructor _Trivial_destructor;
; 64   :   __destroy_aux(__pointer, _Trivial_destructor());

	mov	ecx, DWORD PTR [esi+8]
	mov	eax, DWORD PTR [esi+4]
	push	ecx
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVCMotion@@@stlp_std@@VCMotion@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0PAVCMotion@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotion *>,CMotion>
	mov	eax, DWORD PTR [esi+4]
	add	esp, 8
	test	eax, eax
	je	SHORT $LN45@Destroy@7
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN45@Destroy@7:
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN50@Destroy@7
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN50@Destroy@7
	mov	DWORD PTR [esi], 0
$LN50@Destroy@7:

; 65   : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 66   :   memset(__REINTERPRET_CAST(char*, __pointer), _STLP_SHRED_BYTE, sizeof(_Tp));
; 67   : #endif
; 68   : }

	ret	0
??$_Destroy@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@stlp_std@@YAXPAU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@0@@Z ENDP ; stlp_std::_Destroy<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__copy_ptrs@PBVmotion_marks@@PAV1@@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABU__false_type@1@@Z
_TEXT	SEGMENT
??$__copy_ptrs@PBVmotion_marks@@PAV1@@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABU__false_type@1@@Z PROC ; stlp_std::priv::__copy_ptrs<motion_marks const *,motion_marks *>, COMDAT
; ___first$ = edx
; ___last$ = ecx
; ___result$ = eax

; 250  :   return __copy(__first, __last, __result, random_access_iterator_tag(), (ptrdiff_t*)0);

	jmp	??$__copy@PBVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__copy<motion_marks const *,motion_marks *,int>
??$__copy_ptrs@PBVmotion_marks@@PAV1@@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABU__false_type@1@@Z ENDP ; stlp_std::priv::__copy_ptrs<motion_marks const *,motion_marks *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ?_M_create_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@@Z
_TEXT	SEGMENT
?_M_create_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_create_node, COMDAT
; ___x$ = eax

; 312  :     _Link_type __tmp = this->_M_header.allocate(1);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	push	edi
	push	32					; 00000020H
	mov	esi, eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	mov	edi, eax

; 313  :     _STLP_TRY {
; 314  :       _Copy_Construct(&__tmp->_M_value_field, __x);

	lea	eax, DWORD PTR [edi+16]
	test	eax, eax
	je	SHORT $LN11@M_create_n@8
	mov	DWORD PTR [eax], 0
	mov	edx, DWORD PTR [esi]
	test	edx, edx
	je	SHORT $LN19@M_create_n@8
	add	DWORD PTR [edx], 1
$LN19@M_create_n@8:
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN22@M_create_n@8
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN22@M_create_n@8
	mov	DWORD PTR [eax], 0
$LN22@M_create_n@8:
	push	ebx
	lea	ebx, DWORD PTR [esi+4]
	lea	esi, DWORD PTR [eax+4]
	mov	DWORD PTR [eax], edx
	call	??0?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::_Impl_vector<CMotion,xalloc<CMotion> >
	pop	ebx
$LN11@M_create_n@8:

; 315  :     }
; 316  :     _STLP_UNWIND(this->_M_header.deallocate(__tmp,1))
; 317  :     _S_left(__tmp) = 0;

	mov	DWORD PTR [edi+8], 0

; 318  :     _S_right(__tmp) = 0;

	mov	DWORD PTR [edi+12], 0

; 319  :     return __tmp;

	mov	eax, edi
	pop	edi
	pop	esi

; 320  :   }

	ret	0
?_M_create_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_create_node
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_clone_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@PAU423@@Z
_TEXT	SEGMENT
?_M_clone_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@PAU423@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_clone_node, COMDAT
; ___x$ = esi

; 323  :     _Base_ptr __tmp = _M_create_node(_S_value(__x));

	lea	eax, DWORD PTR [esi+16]
	call	?_M_create_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_create_node

; 324  :     _S_color(__tmp) = _S_color(__x);

	mov	cl, BYTE PTR [esi]
	mov	BYTE PTR [eax], cl

; 325  :     return __tmp;
; 326  :   }

	ret	0
?_M_clone_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@PAU423@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_clone_node
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?_M_clear@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXXZ
_TEXT	SEGMENT
?_M_clear@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXXZ PROC ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_clear, COMDAT
; _this$ = eax

; 615  :   void _M_clear() {

	push	esi
	mov	esi, eax

; 616  :     _STLP_STD::_Destroy_Range(rbegin(), rend());

	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	push	ecx
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@Vmotion_marks@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0PAVmotion_marks@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<motion_marks *>,motion_marks>

; 617  :     this->_M_end_of_storage.deallocate(this->_M_start, this->_M_end_of_storage._M_data - this->_M_start);

	mov	esi, DWORD PTR [esi]
	add	esp, 8
	test	esi, esi
	je	SHORT $LN29@M_clear@30
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN29@M_clear@30:

; 618  :   }

	pop	esi
	ret	0
?_M_clear@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXXZ ENDP ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_clear
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$_Destroy_Range@PAVCMotionDef@@@stlp_std@@YAXPAVCMotionDef@@0@Z
_TEXT	SEGMENT
??$_Destroy_Range@PAVCMotionDef@@@stlp_std@@YAXPAVCMotionDef@@0@Z PROC ; stlp_std::_Destroy_Range<CMotionDef *>, COMDAT
; ___first$ = eax
; ___last$ = edi

; 181  :   __destroy_range(__first, __last, _STLP_VALUE_TYPE(__first, _ForwardIterator));

	jmp	??$__destroy_range_aux@PAVCMotionDef@@V1@@stlp_std@@YAXPAVCMotionDef@@00ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<CMotionDef *,CMotionDef>
??$_Destroy_Range@PAVCMotionDef@@@stlp_std@@YAXPAVCMotionDef@@0@Z ENDP ; stlp_std::_Destroy_Range<CMotionDef *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__copy_ptrs@PAVmotion_marks@@PAV1@@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABU__false_type@1@@Z
_TEXT	SEGMENT
??$__copy_ptrs@PAVmotion_marks@@PAV1@@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABU__false_type@1@@Z PROC ; stlp_std::priv::__copy_ptrs<motion_marks *,motion_marks *>, COMDAT
; ___first$ = edx
; ___last$ = ecx
; ___result$ = eax

; 250  :   return __copy(__first, __last, __result, random_access_iterator_tag(), (ptrdiff_t*)0);

	jmp	??$__copy@PAVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__copy<motion_marks *,motion_marks *,int>
??$__copy_ptrs@PAVmotion_marks@@PAV1@@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABU__false_type@1@@Z ENDP ; stlp_std::priv::__copy_ptrs<motion_marks *,motion_marks *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_uninitialized.h
_TEXT	ENDS
;	COMDAT ??$__ucopy_ptrs@PBVmotion_marks@@PAV1@@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABU__false_type@1@@Z
_TEXT	SEGMENT
??$__ucopy_ptrs@PBVmotion_marks@@PAV1@@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABU__false_type@1@@Z PROC ; stlp_std::priv::__ucopy_ptrs<motion_marks const *,motion_marks *>, COMDAT
; ___first$ = ecx
; ___last$ = eax
; ___result$ = edx

; 113  : { return __ucopy(__first, __last, __result, random_access_iterator_tag(), (ptrdiff_t*)0); }

	jmp	??$__ucopy@PBVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<motion_marks const *,motion_marks *,int>
??$__ucopy_ptrs@PBVmotion_marks@@PAV1@@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABU__false_type@1@@Z ENDP ; stlp_std::priv::__ucopy_ptrs<motion_marks const *,motion_marks *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$_Destroy_Range@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$_Destroy_Range@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0@Z PROC ; stlp_std::_Destroy_Range<stlp_std::reverse_iterator<CMotionDef *> >, COMDAT

; 181  :   __destroy_range(__first, __last, _STLP_VALUE_TYPE(__first, _ForwardIterator));

	mov	edx, DWORD PTR ___first$[esp-4]
	push	ecx
	mov	ecx, DWORD PTR ___last$[esp]
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], edx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@VCMotionDef@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0PAVCMotionDef@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotionDef *>,CMotionDef>
	add	esp, 8

; 182  : }

	ret	0
??$_Destroy_Range@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0@Z ENDP ; stlp_std::_Destroy_Range<stlp_std::reverse_iterator<CMotionDef *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.c
_TEXT	ENDS
;	COMDAT ?insert_unique@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@_N@3@ABU?$pair@$$CBVshared_str@@PAUmotions_value@@@3@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
$T411989 = 12						; size = 4
___val$ = 12						; size = 4
?insert_unique@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@_N@3@ABU?$pair@$$CBVshared_str@@PAUmotions_value@@@3@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::insert_unique, COMDAT
; _this$ = eax

; 406  :   _Base_ptr __y = &this->_M_header._M_data;
; 407  :   _Base_ptr __x = _M_root();
; 408  :   bool __comp = true;
; 409  :   while (__x != 0) {

	mov	edx, DWORD PTR ___val$[esp-4]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR ___$ReturnUdt$[esp+4]
	mov	ebx, eax
	push	esi
	mov	esi, DWORD PTR [ebx+4]
	test	esi, esi
	push	edi
	mov	edi, ebx
	mov	cl, 1
	je	SHORT $LN5@insert_uni@6
	mov	eax, DWORD PTR [edx]
	npad	5
$LL6@insert_uni@6:

; 410  :     __y = __x;
; 411  :     __comp = _M_key_compare(_KeyOfValue()(__val), _S_key(__x));

	cmp	eax, DWORD PTR [esi+16]
	mov	edi, esi
	setb	cl

; 412  :     __x = __comp ? _S_left(__x) : _S_right(__x);

	test	cl, cl
	je	SHORT $LN9@insert_uni@6
	mov	esi, DWORD PTR [esi+8]
	jmp	SHORT $LN10@insert_uni@6
$LN9@insert_uni@6:
	mov	esi, DWORD PTR [esi+12]
$LN10@insert_uni@6:

; 406  :   _Base_ptr __y = &this->_M_header._M_data;
; 407  :   _Base_ptr __x = _M_root();
; 408  :   bool __comp = true;
; 409  :   while (__x != 0) {

	test	esi, esi
	jne	SHORT $LL6@insert_uni@6
$LN5@insert_uni@6:

; 413  :   }
; 414  :   iterator __j = iterator(__y);
; 415  :   if (__comp) {

	test	cl, cl
	mov	eax, edi
	je	SHORT $LN57@insert_uni@6

; 416  :     if (__j == begin())

	cmp	edi, DWORD PTR [ebx+8]

; 417  :       return pair<iterator,bool>(_M_insert(__y, __val, /* __x*/ __y), true);

	push	edi
	je	SHORT $LN91@insert_uni@6

; 418  :     else
; 419  :       --__j;

	call	?_M_decrement@?$_Rb_global@_N@priv@stlp_std@@SAPAU_Rb_tree_node_base@23@PAU423@@Z ; stlp_std::priv::_Rb_global<bool>::_M_decrement
	mov	edx, DWORD PTR ___val$[esp+16]
	add	esp, 4
$LN57@insert_uni@6:

; 420  :   }
; 421  :   if (_M_key_compare(_S_key(__j._M_node), _KeyOfValue()(__val))) {

	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR [edx]
	jae	SHORT $LN1@insert_uni@6

; 422  :     return pair<iterator,bool>(_M_insert(__y, __val, __x), true);

	push	esi
$LN91@insert_uni@6:
	push	edi
	lea	eax, DWORD PTR $T411989[esp+20]
	push	eax
	mov	eax, edx
	call	?_M_insert@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@AAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@23@PAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@PAUmotions_value@@@3@00@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_insert
	mov	ecx, DWORD PTR [eax]
	pop	edi
	pop	esi
	mov	DWORD PTR [ebp], ecx
	mov	BYTE PTR [ebp+4], 1

; 423  :   }
; 424  :   return pair<iterator,bool>(__j, false);

	mov	eax, ebp
	pop	ebp
	pop	ebx

; 425  : }

	ret	8
$LN1@insert_uni@6:
	pop	edi

; 423  :   }
; 424  :   return pair<iterator,bool>(__j, false);

	mov	DWORD PTR [ebp], eax
	pop	esi
	mov	BYTE PTR [ebp+4], 0
	mov	eax, ebp
	pop	ebp
	pop	ebx

; 425  : }

	ret	8
?insert_unique@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@_N@3@ABU?$pair@$$CBVshared_str@@PAUmotions_value@@@3@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::insert_unique
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z
_TEXT	SEGMENT
??4?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::operator=, COMDAT
; _this$ = esi
; ___x$ = ebx

; 323  :   if (this != &__x) {

	cmp	esi, ebx
	je	SHORT $LN53@operator@105
	push	edi

; 324  :     // Note that _Key may be a constant type.
; 325  :     clear();

	xor	edi, edi
	cmp	DWORD PTR [esi+16], edi
	je	SHORT $LN6@operator@105
	mov	eax, DWORD PTR [esi+4]
	push	eax
	mov	ecx, esi
	call	?_M_erase@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_erase
	mov	DWORD PTR [esi+8], esi
	mov	DWORD PTR [esi+4], edi
	mov	DWORD PTR [esi+12], esi
	mov	DWORD PTR [esi+16], edi
$LN6@operator@105:

; 326  :     _M_node_count = 0;

	mov	DWORD PTR [esi+16], edi

; 327  :     _M_key_compare = __x._M_key_compare;

	mov	cl, BYTE PTR [ebx+20]
	mov	BYTE PTR [esi+20], cl

; 328  :     if (__x._M_root() == 0) {

	mov	eax, DWORD PTR [ebx+4]
	cmp	eax, edi
	jne	SHORT $LN2@operator@105

; 329  :       _M_root() = 0;

	mov	DWORD PTR [esi+4], edi

; 330  :       _M_leftmost() = &this->_M_header._M_data;

	mov	DWORD PTR [esi+8], esi

; 331  :       _M_rightmost() = &this->_M_header._M_data;

	mov	DWORD PTR [esi+12], esi
	pop	edi

; 338  :     }
; 339  :   }
; 340  :   return *this;

	mov	eax, esi

; 341  : }

	ret	0
$LN2@operator@105:

; 332  :     }
; 333  :     else {
; 334  :       _M_root() = _M_copy(__x._M_root(), &this->_M_header._M_data);

	push	esi
	push	eax
	mov	ecx, esi
	call	?_M_copy@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@AAEPAU_Rb_tree_node_base@23@PAU423@0@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_copy

; 335  :       _M_leftmost() = _S_minimum(_M_root());

	mov	ecx, eax
	mov	DWORD PTR [esi+4], eax
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, edi
	je	SHORT $LN33@operator@105
$LL34@operator@105:
	mov	ecx, edx
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, edi
	jne	SHORT $LL34@operator@105
$LN33@operator@105:
	mov	DWORD PTR [esi+8], ecx

; 336  :       _M_rightmost() = _S_maximum(_M_root());

	mov	ecx, eax
	mov	eax, DWORD PTR [ecx+12]
	cmp	eax, edi
	je	SHORT $LN43@operator@105
	npad	6
$LL44@operator@105:
	mov	ecx, eax
	mov	eax, DWORD PTR [ecx+12]
	cmp	eax, edi
	jne	SHORT $LL44@operator@105
$LN43@operator@105:
	mov	DWORD PTR [esi+12], ecx

; 337  :       _M_node_count = __x._M_node_count;

	mov	edx, DWORD PTR [ebx+16]
	mov	DWORD PTR [esi+16], edx
	pop	edi
$LN53@operator@105:

; 338  :     }
; 339  :   }
; 340  :   return *this;

	mov	eax, esi

; 341  : }

	ret	0
??4?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?insert_unique@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAE?AU?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@_N@3@ABU?$pair@$$CBVshared_str@@G@3@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
$T412289 = 16						; size = 4
$T412286 = 16						; size = 4
___val$ = 16						; size = 4
?insert_unique@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAE?AU?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@_N@3@ABU?$pair@$$CBVshared_str@@G@3@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::insert_unique, COMDAT

; 406  :   _Base_ptr __y = &this->_M_header._M_data;

	mov	ecx, DWORD PTR _this$[esp-4]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR ___$ReturnUdt$[esp+4]
	push	esi
	push	edi

; 407  :   _Base_ptr __x = _M_root();

	mov	edi, DWORD PTR [ecx+4]

; 408  :   bool __comp = true;
; 409  :   while (__x != 0) {

	test	edi, edi
	mov	ebx, ecx
	mov	al, 1
	je	SHORT $LN95@insert_uni@7

; 420  :   }
; 421  :   if (_M_key_compare(_S_key(__j._M_node), _KeyOfValue()(__val))) {

	mov	eax, DWORD PTR ___val$[esp+12]
	mov	esi, DWORD PTR [eax]
	npad	3
$LL6@insert_uni@7:
	mov	eax, DWORD PTR [edi+16]
	cmp	esi, eax
	mov	ebx, edi
	jne	SHORT $LN24@insert_uni@7

; 410  :     __y = __x;
; 411  :     __comp = _M_key_compare(_KeyOfValue()(__val), _S_key(__x));

	xor	eax, eax
	jmp	SHORT $LN23@insert_uni@7
$LN24@insert_uni@7:
	test	eax, eax
	je	SHORT $LN31@insert_uni@7
	lea	ecx, DWORD PTR [eax+16]
	jmp	SHORT $LN32@insert_uni@7
$LN31@insert_uni@7:
	xor	ecx, ecx
$LN32@insert_uni@7:
	test	esi, esi
	je	SHORT $LN35@insert_uni@7
	lea	eax, DWORD PTR [esi+16]
	jmp	SHORT $LL36@insert_uni@7
$LN35@insert_uni@7:
	xor	eax, eax
$LL36@insert_uni@7:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN92@insert_uni@7
	test	dl, dl
	je	SHORT $LN93@insert_uni@7
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN92@insert_uni@7
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL36@insert_uni@7
$LN93@insert_uni@7:
	xor	eax, eax
	jmp	SHORT $LN94@insert_uni@7
$LN92@insert_uni@7:
	sbb	eax, eax
	sbb	eax, -1
$LN94@insert_uni@7:
	mov	ecx, DWORD PTR _this$[esp+12]
$LN23@insert_uni@7:
	test	eax, eax
	setl	al

; 412  :     __x = __comp ? _S_left(__x) : _S_right(__x);

	test	al, al
	je	SHORT $LN9@insert_uni@7
	mov	edi, DWORD PTR [edi+8]
	jmp	SHORT $LN10@insert_uni@7
$LN9@insert_uni@7:
	mov	edi, DWORD PTR [edi+12]
$LN10@insert_uni@7:

; 408  :   bool __comp = true;
; 409  :   while (__x != 0) {

	test	edi, edi
	jne	SHORT $LL6@insert_uni@7
$LN95@insert_uni@7:

; 413  :   }
; 414  :   iterator __j = iterator(__y);
; 415  :   if (__comp) {

	test	al, al
	mov	esi, ebx
	je	SHORT $LN67@insert_uni@7

; 416  :     if (__j == begin())

	cmp	ebx, DWORD PTR [ecx+8]

; 417  :       return pair<iterator,bool>(_M_insert(__y, __val, /* __x*/ __y), true);

	push	ebx
	jne	SHORT $LN3@insert_uni@7
	mov	eax, DWORD PTR ___val$[esp+16]
	push	ebx
	lea	edx, DWORD PTR $T412286[esp+20]
	push	edx
	mov	ebx, ecx
	call	?_M_insert@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@AAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@23@PAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@G@3@00@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_insert
	mov	eax, DWORD PTR [eax]
	pop	edi
	mov	DWORD PTR [ebp], eax
	pop	esi
	mov	BYTE PTR [ebp+4], 1

; 423  :   }
; 424  :   return pair<iterator,bool>(__j, false);

	mov	eax, ebp
	pop	ebp
	pop	ebx

; 425  : }

	ret	12					; 0000000cH
$LN3@insert_uni@7:

; 418  :     else
; 419  :       --__j;

	call	?_M_decrement@?$_Rb_global@_N@priv@stlp_std@@SAPAU_Rb_tree_node_base@23@PAU423@@Z ; stlp_std::priv::_Rb_global<bool>::_M_decrement
	add	esp, 4
	mov	esi, eax
$LN67@insert_uni@7:

; 420  :   }
; 421  :   if (_M_key_compare(_S_key(__j._M_node), _KeyOfValue()(__val))) {

	mov	ecx, DWORD PTR ___val$[esp+12]
	lea	eax, DWORD PTR [esi+16]
	call	??Raccel_str_pred@@QBE_NABVshared_str@@0@Z ; accel_str_pred::operator()
	test	al, al
	je	SHORT $LN1@insert_uni@7

; 422  :     return pair<iterator,bool>(_M_insert(__y, __val, __x), true);

	mov	eax, DWORD PTR ___val$[esp+12]
	push	edi
	push	ebx
	mov	ebx, DWORD PTR _this$[esp+20]
	lea	ecx, DWORD PTR $T412289[esp+20]
	push	ecx
	call	?_M_insert@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@AAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@23@PAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@G@3@00@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_insert
	mov	edx, DWORD PTR [eax]
	pop	edi
	pop	esi
	mov	DWORD PTR [ebp], edx
	mov	BYTE PTR [ebp+4], 1

; 423  :   }
; 424  :   return pair<iterator,bool>(__j, false);

	mov	eax, ebp
	pop	ebp
	pop	ebx

; 425  : }

	ret	12					; 0000000cH
$LN1@insert_uni@7:
	pop	edi

; 423  :   }
; 424  :   return pair<iterator,bool>(__j, false);

	mov	DWORD PTR [ebp], esi
	pop	esi
	mov	BYTE PTR [ebp+4], 0
	mov	eax, ebp
	pop	ebp
	pop	ebx

; 425  : }

	ret	12					; 0000000cH
?insert_unique@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAE?AU?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@_N@3@ABU?$pair@$$CBVshared_str@@G@3@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::insert_unique
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z
_TEXT	SEGMENT
??4?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::operator=, COMDAT
; _this$ = esi
; ___x$ = ebx

; 323  :   if (this != &__x) {

	cmp	esi, ebx
	je	SHORT $LN53@operator@106
	push	edi

; 324  :     // Note that _Key may be a constant type.
; 325  :     clear();

	xor	edi, edi
	cmp	DWORD PTR [esi+16], edi
	je	SHORT $LN6@operator@106
	mov	eax, DWORD PTR [esi+4]
	push	eax
	mov	ecx, esi
	call	?_M_erase@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_erase
	mov	DWORD PTR [esi+8], esi
	mov	DWORD PTR [esi+4], edi
	mov	DWORD PTR [esi+12], esi
	mov	DWORD PTR [esi+16], edi
$LN6@operator@106:

; 326  :     _M_node_count = 0;

	mov	DWORD PTR [esi+16], edi

; 327  :     _M_key_compare = __x._M_key_compare;
; 328  :     if (__x._M_root() == 0) {

	mov	eax, DWORD PTR [ebx+4]
	cmp	eax, edi
	jne	SHORT $LN2@operator@106

; 329  :       _M_root() = 0;

	mov	DWORD PTR [esi+4], edi

; 330  :       _M_leftmost() = &this->_M_header._M_data;

	mov	DWORD PTR [esi+8], esi

; 331  :       _M_rightmost() = &this->_M_header._M_data;

	mov	DWORD PTR [esi+12], esi
	pop	edi

; 338  :     }
; 339  :   }
; 340  :   return *this;

	mov	eax, esi

; 341  : }

	ret	0
$LN2@operator@106:

; 332  :     }
; 333  :     else {
; 334  :       _M_root() = _M_copy(__x._M_root(), &this->_M_header._M_data);

	push	esi
	push	eax
	mov	ecx, esi
	call	?_M_copy@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@AAEPAU_Rb_tree_node_base@23@PAU423@0@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_copy

; 335  :       _M_leftmost() = _S_minimum(_M_root());

	mov	ecx, eax
	mov	DWORD PTR [esi+4], eax
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, edi
	je	SHORT $LN33@operator@106
	npad	1
$LL34@operator@106:
	mov	ecx, edx
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, edi
	jne	SHORT $LL34@operator@106
$LN33@operator@106:
	mov	DWORD PTR [esi+8], ecx

; 336  :       _M_rightmost() = _S_maximum(_M_root());

	mov	ecx, eax
	mov	eax, DWORD PTR [ecx+12]
	cmp	eax, edi
	je	SHORT $LN43@operator@106
$LL44@operator@106:
	mov	ecx, eax
	mov	eax, DWORD PTR [ecx+12]
	cmp	eax, edi
	jne	SHORT $LL44@operator@106
$LN43@operator@106:
	mov	DWORD PTR [esi+12], ecx

; 337  :       _M_node_count = __x._M_node_count;

	mov	ecx, DWORD PTR [ebx+16]
	mov	DWORD PTR [esi+16], ecx
	pop	edi
$LN53@operator@106:

; 338  :     }
; 339  :   }
; 340  :   return *this;

	mov	eax, esi

; 341  : }

	ret	0
??4?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_erase@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z
_TEXT	SEGMENT
___x$ = 8						; size = 4
?_M_erase@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_erase, COMDAT
; _this$ = ecx

; 655  : _Rb_tree<_Key,_Compare,_Value,_KeyOfValue,_Traits,_Alloc>::_M_erase(_Rb_tree_node_base *__x) {

	push	ebx
	push	esi

; 656  :   // erase without rebalancing
; 657  :   while (__x != 0) {

	mov	esi, DWORD PTR ___x$[esp+4]
	test	esi, esi
	push	edi
	mov	ebx, ecx
	je	SHORT $LN1@M_erase@35
	npad	3
$LL2@M_erase@35:

; 658  :     _M_erase(_S_right(__x));

	mov	eax, DWORD PTR [esi+12]
	push	eax
	mov	ecx, ebx
	call	?_M_erase@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_erase

; 659  :     _Base_ptr __y = _S_left(__x);
; 660  :     _STLP_STD::_Destroy(&_S_value(__x));

	mov	ecx, DWORD PTR [esi+24]
	mov	eax, DWORD PTR [esi+20]
	mov	edi, DWORD PTR [esi+8]
	push	ecx
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVCMotion@@@stlp_std@@VCMotion@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0PAVCMotion@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotion *>,CMotion>
	mov	eax, DWORD PTR [esi+20]
	add	esp, 8
	test	eax, eax
	je	SHORT $LN55@M_erase@35
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN55@M_erase@35:
	mov	eax, DWORD PTR [esi+16]
	test	eax, eax
	je	SHORT $LN60@M_erase@35
	add	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR [esi+16]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN60@M_erase@35
	mov	DWORD PTR [esi+16], 0
$LN60@M_erase@35:

; 661  :     this->_M_header.deallocate(__STATIC_CAST(_Link_type, __x),1);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	test	edi, edi

; 662  :     __x = __y;

	mov	esi, edi
	jne	SHORT $LL2@M_erase@35
$LN1@M_erase@35:

; 663  :   }
; 664  : }

	pop	edi
	pop	esi
	pop	ebx
	ret	4
?_M_erase@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_copy@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@AAEPAU_Rb_tree_node_base@23@PAU423@0@Z
_TEXT	SEGMENT
___tmp$413798 = -12					; size = 4
_this$ = -8						; size = 4
___tmp$413149 = -4					; size = 4
___cur$413770 = 8					; size = 4
___x$ = 8						; size = 4
___p$ = 12						; size = 4
?_M_copy@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@AAEPAU_Rb_tree_node_base@23@PAU423@0@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_copy, COMDAT
; _this$ = ecx

; 625  :                                                                     _Rb_tree_node_base* __p) {

	sub	esp, 12					; 0000000cH
	push	ebx
	push	ebp
	push	esi
	push	edi

; 626  :   // structural copy.  __x and __p must be non-null.
; 627  :   _Base_ptr __top = _M_clone_node(__x);

	mov	edi, DWORD PTR ___x$[esp+24]
	mov	ebx, ecx
	lea	eax, DWORD PTR [edi+16]
	mov	DWORD PTR _this$[esp+28], ebx
	call	?_M_create_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_create_node

; 628  :   _S_parent(__top) = __p;

	mov	ecx, DWORD PTR ___p$[esp+24]
	mov	esi, eax
	mov	al, BYTE PTR [edi]
	mov	BYTE PTR [esi], al
	mov	DWORD PTR [esi+4], ecx

; 629  : 
; 630  :   _STLP_TRY {
; 631  :     if (_S_right(__x))

	mov	eax, DWORD PTR [edi+12]
	xor	ebp, ebp
	cmp	eax, ebp
	mov	DWORD PTR ___tmp$413149[esp+28], esi
	je	SHORT $LN4@M_copy@8

; 632  :       _S_right(__top) = _M_copy(_S_right(__x), __top);

	push	esi
	push	eax
	mov	ecx, ebx
	call	?_M_copy@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@AAEPAU_Rb_tree_node_base@23@PAU423@0@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_copy
	mov	DWORD PTR [esi+12], eax
$LN4@M_copy@8:

; 633  :     __p = __top;
; 634  :     __x = _S_left(__x);

	mov	ebx, DWORD PTR [edi+8]

; 635  : 
; 636  :     while (__x != 0) {

	cmp	ebx, ebp
	mov	DWORD PTR ___p$[esp+24], esi
	je	$LN123@M_copy@8
	npad	2
$LL3@M_copy@8:

; 637  :       _Base_ptr __y = _M_clone_node(__x);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	32					; 00000020H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	mov	edi, eax
	lea	esi, DWORD PTR [edi+16]
	cmp	esi, ebp
	mov	DWORD PTR ___tmp$413798[esp+28], edi
	je	$LN39@M_copy@8
	mov	DWORD PTR [esi], ebp
	mov	eax, DWORD PTR [ebx+16]
	cmp	eax, ebp
	je	SHORT $LN47@M_copy@8
	add	DWORD PTR [eax], 1
$LN47@M_copy@8:
	mov	ecx, DWORD PTR [esi]
	cmp	ecx, ebp
	je	SHORT $LN50@M_copy@8
	add	DWORD PTR [ecx], -1
	mov	edx, DWORD PTR [esi]
	cmp	DWORD PTR [edx], ebp
	jne	SHORT $LN50@M_copy@8
	mov	DWORD PTR [esi], ebp
$LN50@M_copy@8:
	mov	DWORD PTR [esi], eax
	mov	ecx, DWORD PTR [ebx+24]
	sub	ecx, DWORD PTR [ebx+20]
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	lea	edi, DWORD PTR [eax+eax*4]
	add	edi, edi
	mov	DWORD PTR [esi+4], ebp
	mov	DWORD PTR [esi+8], ebp
	add	edi, edi
	mov	DWORD PTR [esi+12], ebp
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	edi, edi
	push	edi
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	add	edi, eax
	mov	DWORD PTR [esi+12], edi
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	mov	ebp, DWORD PTR [ebx+20]
	mov	ecx, DWORD PTR [ebx+24]
	mov	DWORD PTR ___cur$413770[esp+24], eax
	sub	ecx, ebp
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 4
	mov	edi, edx
	shr	edi, 31					; 0000001fH
	add	edi, edx
	test	edi, edi
	jle	SHORT $LN125@M_copy@8
$LL90@M_copy@8:
	mov	ecx, DWORD PTR ___cur$413770[esp+24]
	test	ecx, ecx
	je	SHORT $LN95@M_copy@8
	push	ebp
	call	??0CMotion@@QAE@ABV0@@Z
$LN95@M_copy@8:
	add	DWORD PTR ___cur$413770[esp+24], 40	; 00000028H
	sub	edi, 1
	add	ebp, 40					; 00000028H
	test	edi, edi
	jg	SHORT $LL90@M_copy@8
$LN125@M_copy@8:
	mov	eax, DWORD PTR ___cur$413770[esp+24]
	mov	edi, DWORD PTR ___tmp$413798[esp+28]
	mov	DWORD PTR [esi+8], eax
	xor	ebp, ebp
$LN39@M_copy@8:

; 638  :       _S_left(__p) = __y;

	mov	eax, DWORD PTR ___p$[esp+24]
	mov	DWORD PTR [edi+8], ebp
	mov	DWORD PTR [edi+12], ebp
	mov	cl, BYTE PTR [ebx]
	mov	BYTE PTR [edi], cl
	mov	DWORD PTR [eax+8], edi

; 639  :       _S_parent(__y) = __p;

	mov	DWORD PTR [edi+4], eax

; 640  :       if (_S_right(__x))

	mov	eax, DWORD PTR [ebx+12]
	cmp	eax, ebp
	je	SHORT $LN1@M_copy@8

; 641  :         _S_right(__y) = _M_copy(_S_right(__x), __y);

	mov	ecx, DWORD PTR _this$[esp+28]
	push	edi
	push	eax
	call	?_M_copy@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@AAEPAU_Rb_tree_node_base@23@PAU423@0@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_copy
	mov	DWORD PTR [edi+12], eax
$LN1@M_copy@8:

; 642  :       __p = __y;
; 643  :       __x = _S_left(__x);

	mov	ebx, DWORD PTR [ebx+8]
	cmp	ebx, ebp
	mov	DWORD PTR ___p$[esp+24], edi
	jne	$LL3@M_copy@8

; 644  :     }
; 645  :   }
; 646  :   _STLP_UNWIND(_M_erase(__top))
; 647  : 
; 648  :   return __top;

	mov	eax, DWORD PTR ___tmp$413149[esp+28]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 649  : }

	add	esp, 12					; 0000000cH
	ret	8
$LN123@M_copy@8:
	pop	edi

; 644  :     }
; 645  :   }
; 646  :   _STLP_UNWIND(_M_erase(__top))
; 647  : 
; 648  :   return __top;

	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx

; 649  : }

	add	esp, 12					; 0000000cH
	ret	8
?_M_copy@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@AAEPAU_Rb_tree_node_base@23@PAU423@0@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_copy
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?_M_erase@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEPAVmotion_marks@@PAV4@0ABU__false_type@3@@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
?_M_erase@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEPAVmotion_marks@@PAV4@0ABU__false_type@3@@Z PROC ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_erase, COMDAT
; _this$ = esi
; ___last$ = edx

; 579  :     pointer __i = _STLP_PRIV __copy_ptrs(__last, this->_M_finish, __first, _TrivialCopy());

	mov	ecx, DWORD PTR [esi+4]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR ___first$[esp+4]
	push	edi
	mov	eax, ebp
	call	??$__copy@PAVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__copy<motion_marks *,motion_marks *,int>

; 580  :     _STLP_STD::_Destroy_Range(__i, this->_M_finish);

	mov	ebx, DWORD PTR [esi+4]
	mov	edi, eax
	call	??$__destroy_range_aux@PAVmotion_marks@@V1@@stlp_std@@YAXPAVmotion_marks@@00ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<motion_marks *,motion_marks>

; 581  :     this->_M_finish = __i;

	mov	DWORD PTR [esi+4], edi
	pop	edi

; 582  :     return __first;

	mov	eax, ebp
	pop	ebp
	pop	ebx

; 583  :   }

	ret	4
?_M_erase@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEPAVmotion_marks@@PAV4@0ABU__false_type@3@@Z ENDP ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?erase@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEPAVmotion_marks@@PAV4@0@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
?erase@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEPAVmotion_marks@@PAV4@0@Z PROC ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::erase, COMDAT
; _this$ = edi
; ___last$ = edx

; 589  :   iterator erase(iterator __first, iterator __last) {

	push	ebp
	mov	ebp, DWORD PTR ___first$[esp]

; 590  :     if (__first == __last)

	cmp	ebp, edx

; 591  :       return __first;

	mov	eax, ebp
	je	SHORT $LN2@erase@54

; 592  :     return _M_erase(__first, __last, _Movable());

	mov	ecx, DWORD PTR [edi+4]
	push	ebx
	push	esi
	call	??$__copy@PAVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__copy<motion_marks *,motion_marks *,int>
	mov	ebx, DWORD PTR [edi+4]
	mov	esi, eax
	call	??$__destroy_range_aux@PAVmotion_marks@@V1@@stlp_std@@YAXPAVmotion_marks@@00ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<motion_marks *,motion_marks>
	mov	DWORD PTR [edi+4], esi
	pop	esi
	mov	eax, ebp
	pop	ebx
$LN2@erase@54:
	pop	ebp

; 593  :   }

	ret	4
?erase@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEPAVmotion_marks@@PAV4@0@Z ENDP ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::erase
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ?clear@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAEXXZ PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::clear, COMDAT
; _this$ = esi

; 526  :     if (_M_node_count != 0) {

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN1@clear@39

; 527  :       _M_erase(_M_root());

	mov	eax, DWORD PTR [esi+4]
	push	eax
	mov	ecx, esi
	call	?_M_erase@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_erase

; 528  :       _M_leftmost() = &this->_M_header._M_data;

	mov	DWORD PTR [esi+8], esi

; 529  :       _M_root() = 0;

	mov	DWORD PTR [esi+4], 0

; 530  :       _M_rightmost() = &this->_M_header._M_data;

	mov	DWORD PTR [esi+12], esi

; 531  :       _M_node_count = 0;

	mov	DWORD PTR [esi+16], 0
$LN1@clear@39:

; 532  :     }
; 533  :   }

	ret	0
?clear@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAEXXZ ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::clear
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z
_TEXT	SEGMENT
??0?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >, COMDAT
; _this$ = esi
; ___x$ = edi

; 392  :       _M_node_count(0), _M_key_compare(__x._M_key_compare) {

	xor	eax, eax
	mov	DWORD PTR [esi], eax
	mov	BYTE PTR [esi], al
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], esi
	mov	DWORD PTR [esi+12], esi
	mov	DWORD PTR [esi+16], eax
	mov	al, BYTE PTR [edi+20]
	mov	BYTE PTR [esi+20], al

; 393  :     if (__x._M_root() != 0) {

	cmp	DWORD PTR [edi+4], 0
	je	SHORT $LN1@Rb_tree@9

; 394  :       _S_color(&this->_M_header._M_data) = _S_rb_tree_red;

	mov	BYTE PTR [esi], 0

; 395  :       _M_root() = _M_copy(__x._M_root(), &this->_M_header._M_data);

	mov	eax, DWORD PTR [edi+4]
	push	esi
	push	eax
	mov	ecx, esi
	call	?_M_copy@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@AAEPAU_Rb_tree_node_base@23@PAU423@0@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_copy

; 396  :       _M_leftmost() = _S_minimum(_M_root());

	mov	ecx, eax
	mov	DWORD PTR [esi+4], eax
	mov	edx, DWORD PTR [ecx+8]
	test	edx, edx
	je	SHORT $LN30@Rb_tree@9
	npad	7
$LL31@Rb_tree@9:
	mov	ecx, edx
	mov	edx, DWORD PTR [ecx+8]
	test	edx, edx
	jne	SHORT $LL31@Rb_tree@9
$LN30@Rb_tree@9:
	mov	DWORD PTR [esi+8], ecx

; 397  :       _M_rightmost() = _S_maximum(_M_root());

	mov	ecx, eax
	mov	eax, DWORD PTR [ecx+12]
	test	eax, eax
	je	SHORT $LN40@Rb_tree@9
$LL41@Rb_tree@9:
	mov	ecx, eax
	mov	eax, DWORD PTR [ecx+12]
	test	eax, eax
	jne	SHORT $LL41@Rb_tree@9
$LN40@Rb_tree@9:
	mov	DWORD PTR [esi+12], ecx
$LN1@Rb_tree@9:

; 398  :     }
; 399  :     _M_node_count = __x._M_node_count;

	mov	ecx, DWORD PTR [edi+16]
	mov	DWORD PTR [esi+16], ecx

; 400  :   }

	mov	eax, esi
	ret	0
??0?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ??0?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE@ABV012@@Z
_TEXT	SEGMENT
??0?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE@ABV012@@Z PROC ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_Impl_vector<motion_marks,xalloc<motion_marks> >, COMDAT
; _this$ = esi
; ___x$ = edi

; 236  :   { this->_M_finish = _STLP_PRIV __ucopy_ptrs(__x.begin(), __x.end(), this->_M_start, _TrivialUCopy()); }

	mov	eax, DWORD PTR [edi+4]
	sub	eax, DWORD PTR [edi]
	xor	ecx, ecx
	sar	eax, 4
	push	ebx
	shl	eax, 4
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], ecx
	mov	ebx, eax
	mov	DWORD PTR [esi+8], ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	ebx
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	mov	edx, eax
	add	ebx, edx
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [esi+4], edx
	mov	DWORD PTR [esi+8], ebx
	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [edi]
	call	??$__ucopy@PBVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<motion_marks const *,motion_marks *,int>
	mov	DWORD PTR [esi+4], eax
	mov	eax, esi
	pop	ebx
	ret	0
??0?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAE@ABV012@@Z ENDP ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_Impl_vector<motion_marks,xalloc<motion_marks> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ??0?$vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@stlp_std@@QAE@ABV?$xalloc@Vmotion_marks@@@@@Z
_TEXT	SEGMENT
??0?$vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@stlp_std@@QAE@ABV?$xalloc@Vmotion_marks@@@@@Z PROC ; stlp_std::vector<motion_marks,xalloc<motion_marks> >::vector<motion_marks,xalloc<motion_marks> >, COMDAT
; _this$ = eax

; 106  :   explicit vector(const allocator_type& __a = allocator_type())

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@stlp_std@@QAE@ABV?$xalloc@Vmotion_marks@@@@@Z ENDP ; stlp_std::vector<motion_marks,xalloc<motion_marks> >::vector<motion_marks,xalloc<motion_marks> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_map.h
_TEXT	ENDS
;	COMDAT ?insert@?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAE?AU?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@_N@2@ABU?$pair@$$CBVshared_str@@PAUmotions_value@@@2@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
?insert@?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAE?AU?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@_N@2@ABU?$pair@$$CBVshared_str@@PAUmotions_value@@@2@@Z PROC ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::insert, COMDAT
; ___$ReturnUdt$ = esi
; ___x$ = eax

; 184  :   { return _M_t.insert_unique(__x); }

	push	eax
	mov	eax, DWORD PTR _this$[esp]
	push	esi
	call	?insert_unique@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@_N@3@ABU?$pair@$$CBVshared_str@@PAUmotions_value@@@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::insert_unique
	mov	eax, esi
	ret	4
?insert@?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAE?AU?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@_N@2@ABU?$pair@$$CBVshared_str@@PAUmotions_value@@@2@@Z ENDP ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::insert
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
??4?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAEAAV01@ABV01@@Z PROC ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::operator=, COMDAT
; _this$ = eax
; ___x$ = ebx

; 151  :   _Self& operator=(const _Self& __x) {

	push	esi
	mov	esi, eax

; 152  :     _M_t = __x._M_t;

	call	??4?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::operator=

; 153  :     return *this;

	mov	eax, esi
	pop	esi

; 154  :   }

	ret	0
??4?$map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@stlp_std@@QAEAAV01@ABV01@@Z ENDP ; stlp_std::map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?insert@?$map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@stlp_std@@QAE?AU?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@_N@2@ABU?$pair@$$CBVshared_str@@G@2@@Z
_TEXT	SEGMENT
?insert@?$map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@stlp_std@@QAE?AU?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@_N@2@ABU?$pair@$$CBVshared_str@@G@2@@Z PROC ; stlp_std::map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::insert, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = esi
; ___x$ = eax

; 184  :   { return _M_t.insert_unique(__x); }

	push	eax
	push	esi
	push	ecx
	call	?insert_unique@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAE?AU?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@_N@3@ABU?$pair@$$CBVshared_str@@G@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::insert_unique
	mov	eax, esi
	ret	0
?insert@?$map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@stlp_std@@QAE?AU?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@_N@2@ABU?$pair@$$CBVshared_str@@G@2@@Z ENDP ; stlp_std::map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::insert
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@stlp_std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
??4?$map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@stlp_std@@QAEAAV01@ABV01@@Z PROC ; stlp_std::map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::operator=, COMDAT
; _this$ = eax
; ___x$ = ebx

; 151  :   _Self& operator=(const _Self& __x) {

	push	esi
	mov	esi, eax

; 152  :     _M_t = __x._M_t;

	call	??4?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::operator=

; 153  :     return *this;

	mov	eax, esi
	pop	esi

; 154  :   }

	ret	0
??4?$map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@stlp_std@@QAEAAV01@ABV01@@Z ENDP ; stlp_std::map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::operator=
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.h
_TEXT	ENDS
;	COMDAT ??1?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE@XZ PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::~_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >, COMDAT
; _this$ = esi

; 409  :   ~_Rb_tree() { clear(); }

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN3@Rb_tree@10
	mov	eax, DWORD PTR [esi+4]
	push	eax
	mov	ecx, esi
	call	?_M_erase@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_erase
	mov	DWORD PTR [esi+8], esi
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+12], esi
	mov	DWORD PTR [esi+16], 0
$LN3@Rb_tree@10:
	ret	0
??1?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE@XZ ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::~_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_map.h
_TEXT	ENDS
;	COMDAT ??0?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE@ABV01@@Z PROC ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >, COMDAT
; _this$ = eax
; ___x$ = edi

; 146  :   map(const _Self& __x) : _M_t(__x._M_t) {}

	push	esi
	mov	esi, eax
	call	??0?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >
	mov	eax, esi
	pop	esi
	ret	0
??0?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE@ABV01@@Z ENDP ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE@XZ
_TEXT	SEGMENT
$T414201 = -1						; size = 1
??0?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE@XZ PROC ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >, COMDAT
; _this$ = eax

; 99   :   map() : _M_t(_Compare(), allocator_type()) {}

	push	ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	BYTE PTR [eax], cl
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	cl, BYTE PTR $T414201[esp+4]
	mov	DWORD PTR [eax+8], eax
	mov	DWORD PTR [eax+12], eax
	mov	BYTE PTR [eax+20], cl
	pop	ecx
	ret	0
??0?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE@XZ ENDP ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ??1?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@XZ PROC ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::~_Impl_vector<CMotionDef,xalloc<CMotionDef> >, COMDAT
; _this$ = eax

; 286  :   ~vector() { _STLP_STD::_Destroy_Range(rbegin(), rend()); }

	push	esi
	mov	esi, eax
	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	push	ecx
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@VCMotionDef@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0PAVCMotionDef@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotionDef *>,CMotionDef>
	mov	esi, DWORD PTR [esi]
	add	esp, 8
	test	esi, esi
	je	SHORT $LN32@Impl_vecto@49
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN32@Impl_vecto@49:
	pop	esi
	ret	0
??1?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@XZ ENDP ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::~_Impl_vector<CMotionDef,xalloc<CMotionDef> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ??0?$vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@stlp_std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@stlp_std@@QAE@ABV01@@Z PROC ; stlp_std::vector<motion_marks,xalloc<motion_marks> >::vector<motion_marks,xalloc<motion_marks> >, COMDAT
; _this$ = esi
; ___x$ = edi

; 123  :   vector(const _Self& __x)

	mov	eax, DWORD PTR [edi+4]
	sub	eax, DWORD PTR [edi]
	xor	ecx, ecx
	sar	eax, 4
	push	ebx
	shl	eax, 4
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], ecx
	mov	ebx, eax
	mov	DWORD PTR [esi+8], ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	ebx
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	mov	edx, eax
	add	ebx, edx
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [esi+4], edx
	mov	DWORD PTR [esi+8], ebx
	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [edi]
	call	??$__ucopy@PBVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<motion_marks const *,motion_marks *,int>
	mov	DWORD PTR [esi+4], eax
	mov	eax, esi
	pop	ebx
	ret	0
??0?$vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@stlp_std@@QAE@ABV01@@Z ENDP ; stlp_std::vector<motion_marks,xalloc<motion_marks> >::vector<motion_marks,xalloc<motion_marks> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xr_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xr_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@@QAE@XZ PROC ; xr_vector<motion_marks,xalloc<motion_marks> >::xr_vector<motion_marks,xalloc<motion_marks> >, COMDAT
; _this$ = eax

; 123  : 			xr_vector			()									: inherited	()					{}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$xr_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@@QAE@XZ ENDP ; xr_vector<motion_marks,xalloc<motion_marks> >::xr_vector<motion_marks,xalloc<motion_marks> >
_TEXT	ENDS
PUBLIC	??1motions_container@@QAE@XZ			; motions_container::~motions_container
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\skeletonmotions.cpp
;	COMDAT ??1motions_container@@QAE@XZ
_TEXT	SEGMENT
??1motions_container@@QAE@XZ PROC			; motions_container::~motions_container, COMDAT
; _this$ = ecx

; 250  : {

	push	esi
	mov	esi, ecx

; 251  : //	clean	(false);
; 252  : //	clean	(true);
; 253  : //	dump	();
; 254  : 	VERIFY	(container.empty());
; 255  : 	//	Igor:
; 256  : 	//s_bones_array_const = 0;
; 257  : }

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN12@motions_co
	mov	eax, DWORD PTR [esi+4]
	push	eax
	call	?_M_erase@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_erase
	mov	DWORD PTR [esi+8], esi
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+12], esi
	mov	DWORD PTR [esi+16], 0
$LN12@motions_co:
	pop	esi
	ret	0
??1motions_container@@QAE@XZ ENDP			; motions_container::~motions_container
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$xr_map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@@QAE@XZ
_TEXT	SEGMENT
$T414665 = -1						; size = 1
??0?$xr_map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@@QAE@XZ PROC ; xr_map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::xr_map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >, COMDAT
; _this$ = eax
	push	ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	BYTE PTR [eax], cl
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	cl, BYTE PTR $T414665[esp+4]
	mov	DWORD PTR [eax+8], eax
	mov	DWORD PTR [eax+12], eax
	mov	BYTE PTR [eax+20], cl
	pop	ecx
	ret	0
??0?$xr_map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@@QAE@XZ ENDP ; xr_map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::xr_map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >
_TEXT	ENDS
PUBLIC	??0motions_container@@QAE@XZ			; motions_container::motions_container
; Function compile flags: /Ogtpy
;	COMDAT ??0motions_container@@QAE@XZ
_TEXT	SEGMENT
$T414774 = -1						; size = 1
??0motions_container@@QAE@XZ PROC			; motions_container::motions_container, COMDAT
; _this$ = ecx

; 246  : {

	push	ecx
	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	BYTE PTR [eax], cl
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	cl, BYTE PTR $T414774[esp+4]
	mov	DWORD PTR [eax+8], eax
	mov	DWORD PTR [eax+12], eax
	mov	BYTE PTR [eax+20], cl

; 247  : }

	pop	ecx
	ret	0
??0motions_container@@QAE@XZ ENDP			; motions_container::motions_container
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$xr_map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
??4?$xr_map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@@QAEAAV0@ABV0@@Z PROC ; xr_map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::operator=, COMDAT
; _this$ = eax
; ___that$ = ebx
	push	esi
	mov	esi, eax
	call	??4?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::operator=
	mov	eax, esi
	pop	esi
	ret	0
??4?$xr_map@Vshared_str@@PAUmotions_value@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@@QAEAAV0@ABV0@@Z ENDP ; xr_map<shared_str,motions_value *,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,motions_value *> > >::operator=
_TEXT	ENDS
PUBLIC	??4motions_container@@QAEAAV0@ABV0@@Z		; motions_container::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4motions_container@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4motions_container@@QAEAAV0@ABV0@@Z PROC		; motions_container::operator=, COMDAT
; _this$ = ecx
	push	ebx
	mov	ebx, DWORD PTR ___that$[esp]
	push	esi
	mov	esi, ecx
	call	??4?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::operator=
	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??4motions_container@@QAEAAV0@ABV0@@Z ENDP		; motions_container::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@stlp_std@@QAE@XZ PROC ; stlp_std::vector<CMotionDef,xalloc<CMotionDef> >::~vector<CMotionDef,xalloc<CMotionDef> >, COMDAT
; _this$ = eax
	push	esi
	mov	esi, eax
	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	push	ecx
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@VCMotionDef@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0PAVCMotionDef@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotionDef *>,CMotionDef>
	mov	esi, DWORD PTR [esi]
	add	esp, 8
	test	esi, esi
	je	SHORT $LN34@vector@81
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN34@vector@81:
	pop	esi
	ret	0
??1?$vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@stlp_std@@QAE@XZ ENDP ; stlp_std::vector<CMotionDef,xalloc<CMotionDef> >::~vector<CMotionDef,xalloc<CMotionDef> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE@XZ PROC ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::~map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >, COMDAT
; _this$ = esi
	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN5@map@3
	mov	eax, DWORD PTR [esi+4]
	push	eax
	mov	ecx, esi
	call	?_M_erase@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_erase
	mov	DWORD PTR [esi+8], esi
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+12], esi
	mov	DWORD PTR [esi+16], 0
$LN5@map@3:
	ret	0
??1?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE@XZ ENDP ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::~map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
??4?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@QAEAAV0@ABV0@@Z PROC ; xr_map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::operator=, COMDAT
; _this$ = eax
; ___that$ = ebx
	push	esi
	mov	esi, eax
	call	??4?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::operator=
	mov	eax, esi
	pop	esi
	ret	0
??4?$xr_map@Vshared_str@@GUaccel_str_pred@@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@@QAEAAV0@ABV0@@Z ENDP ; xr_map<shared_str,unsigned short,accel_str_pred,xalloc<stlp_std::pair<shared_str,unsigned short> > >::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$xr_map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xr_map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@@QAE@ABV0@@Z PROC ; xr_map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::xr_map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >, COMDAT
; _this$ = eax
; ___that$ = edi
	push	esi
	mov	esi, eax
	call	??0?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >
	mov	eax, esi
	pop	esi
	ret	0
??0?$xr_map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@@QAE@ABV0@@Z ENDP ; xr_map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::xr_map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$xr_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@@QAE@XZ
_TEXT	SEGMENT
??1?$xr_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@@QAE@XZ PROC ; xr_vector<CMotionDef,xalloc<CMotionDef> >::~xr_vector<CMotionDef,xalloc<CMotionDef> >, COMDAT
; _this$ = eax
	push	esi
	mov	esi, eax
	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	push	ecx
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@VCMotionDef@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0PAVCMotionDef@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotionDef *>,CMotionDef>
	mov	esi, DWORD PTR [esi]
	add	esp, 8
	test	esi, esi
	je	SHORT $LN36@xr_vector@45
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN36@xr_vector@45:
	pop	esi
	ret	0
??1?$xr_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@@QAE@XZ ENDP ; xr_vector<CMotionDef,xalloc<CMotionDef> >::~xr_vector<CMotionDef,xalloc<CMotionDef> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$xr_map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@@QAE@XZ
_TEXT	SEGMENT
??1?$xr_map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@@QAE@XZ PROC ; xr_map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::~xr_map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >, COMDAT
; _this$ = esi
	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN7@xr_map@3
	mov	eax, DWORD PTR [esi+4]
	push	eax
	mov	ecx, esi
	call	?_M_erase@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_erase
	mov	DWORD PTR [esi+8], esi
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+12], esi
	mov	DWORD PTR [esi+16], 0
$LN7@xr_map@3:
	ret	0
??1?$xr_map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@@QAE@XZ ENDP ; xr_map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::~xr_map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$xr_map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@@QAE@XZ
_TEXT	SEGMENT
$T415308 = -1						; size = 1
??0?$xr_map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@@QAE@XZ PROC ; xr_map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::xr_map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >, COMDAT
; _this$ = eax
	push	ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	BYTE PTR [eax], cl
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	cl, BYTE PTR $T415308[esp+4]
	mov	DWORD PTR [eax+8], eax
	mov	DWORD PTR [eax+12], eax
	mov	BYTE PTR [eax+20], cl
	pop	ecx
	ret	0
??0?$xr_map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@@QAE@XZ ENDP ; xr_map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::xr_map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >
_TEXT	ENDS
PUBLIC	??4CPartition@@QAEAAV0@ABV0@@Z			; CPartition::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4CPartition@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CPartition@@QAEAAV0@ABV0@@Z PROC			; CPartition::operator=, COMDAT
; _this$ = ecx
	push	ecx
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR ___that$[esp+16]
	mov	DWORD PTR _this$[esp+20], ecx
	mov	esi, ecx
	sub	edi, ecx
	mov	ebp, 4
$LL3@operator@107:
	mov	eax, DWORD PTR [edi+esi]
	test	eax, eax
	je	SHORT $LN10@operator@107
	add	DWORD PTR [eax], 1
$LN10@operator@107:
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN13@operator@107
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [esi]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN13@operator@107
	mov	DWORD PTR [esi], 0
$LN13@operator@107:
	lea	ebx, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [edi+ebx]
	push	edx
	mov	DWORD PTR [esi], eax
	call	??4?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::operator=
	add	esi, 16					; 00000010H
	sub	ebp, 1
	jne	SHORT $LL3@operator@107
	mov	eax, DWORD PTR _this$[esp+20]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	pop	ecx
	ret	4
??4CPartition@@QAEAAV0@ABV0@@Z ENDP			; CPartition::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$xr_vector@IV?$xalloc@I@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xr_vector@IV?$xalloc@I@@@@QAE@ABV0@@Z PROC		; xr_vector<unsigned int,xalloc<unsigned int> >::xr_vector<unsigned int,xalloc<unsigned int> >, COMDAT
; _this$ = ecx
; ___that$ = eax
	push	esi
	mov	esi, ecx
	call	??0?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_Impl_vector<unsigned int,xalloc<unsigned int> >
	mov	eax, esi
	pop	esi
	ret	0
??0?$xr_vector@IV?$xalloc@I@@@@QAE@ABV0@@Z ENDP		; xr_vector<unsigned int,xalloc<unsigned int> >::xr_vector<unsigned int,xalloc<unsigned int> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$xr_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xr_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@@QAE@ABV0@@Z PROC ; xr_vector<motion_marks,xalloc<motion_marks> >::xr_vector<motion_marks,xalloc<motion_marks> >, COMDAT
; _this$ = esi
; ___that$ = edi
	mov	eax, DWORD PTR [edi+4]
	sub	eax, DWORD PTR [edi]
	xor	ecx, ecx
	sar	eax, 4
	push	ebx
	shl	eax, 4
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], ecx
	mov	ebx, eax
	mov	DWORD PTR [esi+8], ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	ebx
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	mov	edx, eax
	add	ebx, edx
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [esi+4], edx
	mov	DWORD PTR [esi+8], ebx
	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [edi]
	call	??$__ucopy@PBVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<motion_marks const *,motion_marks *,int>
	mov	DWORD PTR [esi+4], eax
	mov	eax, esi
	pop	ebx
	ret	0
??0?$xr_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@@QAE@ABV0@@Z ENDP ; xr_vector<motion_marks,xalloc<motion_marks> >::xr_vector<motion_marks,xalloc<motion_marks> >
_TEXT	ENDS
PUBLIC	??0CMotionDef@@QAE@ABV0@@Z			; CMotionDef::CMotionDef
; Function compile flags: /Ogtpy
;	COMDAT ??0CMotionDef@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0CMotionDef@@QAE@ABV0@@Z PROC				; CMotionDef::CMotionDef, COMDAT
; _this$ = ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	edi, DWORD PTR ___that$[esp+8]
	movzx	eax, WORD PTR [edi]
	mov	WORD PTR [esi], ax
	movzx	ecx, WORD PTR [edi+2]
	mov	WORD PTR [esi+2], cx
	movzx	edx, WORD PTR [edi+4]
	mov	WORD PTR [esi+4], dx
	movzx	eax, WORD PTR [edi+6]
	mov	WORD PTR [esi+6], ax
	movzx	ecx, WORD PTR [edi+8]
	mov	WORD PTR [esi+8], cx
	movzx	edx, WORD PTR [edi+10]
	mov	WORD PTR [esi+10], dx
	movzx	eax, WORD PTR [edi+12]
	mov	WORD PTR [esi+12], ax
	mov	eax, DWORD PTR [edi+20]
	sub	eax, DWORD PTR [edi+16]
	xor	ecx, ecx
	sar	eax, 4
	shl	eax, 4
	mov	DWORD PTR [esi+16], ecx
	mov	DWORD PTR [esi+20], ecx
	mov	ebx, eax
	mov	DWORD PTR [esi+24], ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	ebx
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	mov	edx, eax
	add	ebx, edx
	mov	DWORD PTR [esi+16], edx
	mov	DWORD PTR [esi+20], edx
	mov	DWORD PTR [esi+24], ebx
	mov	eax, DWORD PTR [edi+20]
	mov	ecx, DWORD PTR [edi+16]
	call	??$__ucopy@PBVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<motion_marks const *,motion_marks *,int>
	mov	DWORD PTR [esi+20], eax
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??0CMotionDef@@QAE@ABV0@@Z ENDP				; CMotionDef::CMotionDef
_TEXT	ENDS
PUBLIC	??0CMotionDef@@QAE@XZ				; CMotionDef::CMotionDef
; Function compile flags: /Ogtpy
;	COMDAT ??0CMotionDef@@QAE@XZ
_TEXT	SEGMENT
??0CMotionDef@@QAE@XZ PROC				; CMotionDef::CMotionDef, COMDAT
; _this$ = ecx
	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], ecx
	mov	DWORD PTR [eax+24], ecx
	ret	0
??0CMotionDef@@QAE@XZ ENDP				; CMotionDef::CMotionDef
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
;	COMDAT ??0?$xr_vector@IV?$xalloc@I@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xr_vector@IV?$xalloc@I@@@@QAE@XZ PROC		; xr_vector<unsigned int,xalloc<unsigned int> >::xr_vector<unsigned int,xalloc<unsigned int> >, COMDAT
; _this$ = eax

; 123  : 			xr_vector			()									: inherited	()					{}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$xr_vector@IV?$xalloc@I@@@@QAE@XZ ENDP		; xr_vector<unsigned int,xalloc<unsigned int> >::xr_vector<unsigned int,xalloc<unsigned int> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$xr_vector@IV?$xalloc@I@@@@QAE@XZ
_TEXT	SEGMENT
??1?$xr_vector@IV?$xalloc@I@@@@QAE@XZ PROC		; xr_vector<unsigned int,xalloc<unsigned int> >::~xr_vector<unsigned int,xalloc<unsigned int> >, COMDAT
; _this$ = eax
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN38@xr_vector@46
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN38@xr_vector@46:
	ret	0
??1?$xr_vector@IV?$xalloc@I@@@@QAE@XZ ENDP		; xr_vector<unsigned int,xalloc<unsigned int> >::~xr_vector<unsigned int,xalloc<unsigned int> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$__destroy_mv_srcs@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@VCMotionDef@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0PAVCMotionDef@@@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$__destroy_mv_srcs@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@VCMotionDef@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0PAVCMotionDef@@@Z PROC ; stlp_std::__destroy_mv_srcs<stlp_std::reverse_iterator<CMotionDef *>,CMotionDef>, COMDAT

; 193  :   typedef typename __move_traits<_Tp>::complete _CompleteMove;
; 194  :   __destroy_range_aux(__first, __last, __ptr, _CompleteMove());

	mov	edx, DWORD PTR ___first$[esp-4]
	push	ecx
	mov	ecx, DWORD PTR ___last$[esp]
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], edx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@VCMotionDef@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0PAVCMotionDef@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotionDef *>,CMotionDef>
	add	esp, 8

; 195  : }

	ret	0
??$__destroy_mv_srcs@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@VCMotionDef@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0PAVCMotionDef@@@Z ENDP ; stlp_std::__destroy_mv_srcs<stlp_std::reverse_iterator<CMotionDef *>,CMotionDef>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_uninitialized.h
_TEXT	ENDS
;	COMDAT ??$__ucopy_aux@PBVmotion_marks@@PAV1@@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__ucopy_aux@PBVmotion_marks@@PAV1@@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABU__true_type@1@@Z PROC ; stlp_std::priv::__ucopy_aux<motion_marks const *,motion_marks *>, COMDAT
; ___first$ = ecx
; ___last$ = eax
; ___result$ = edx

; 126  :   return __ucopy_ptrs(__first, __last, __result,
; 127  :                       _UseTrivialUCopy(_STLP_VALUE_TYPE(__first, _InputIter),
; 128  :                                        _STLP_VALUE_TYPE(__result, _OutputIter))._Answer());

	jmp	??$__ucopy@PBVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<motion_marks const *,motion_marks *,int>
??$__ucopy_aux@PBVmotion_marks@@PAV1@@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABU__true_type@1@@Z ENDP ; stlp_std::priv::__ucopy_aux<motion_marks const *,motion_marks *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__ucopy@PAVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z
_TEXT	SEGMENT
___n$137565 = -4					; size = 4
??$__ucopy@PAVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z PROC ; stlp_std::priv::__ucopy<motion_marks *,motion_marks *,int>, COMDAT
; ___first$ = ecx
; ___last$ = eax
; ___result$ = edx

; 83   :                            _OutputIter __result, const random_access_iterator_tag &, _Distance*) {

	push	ecx
	push	ebp
	push	esi
	push	edi
	mov	edi, ecx

; 84   :   _OutputIter __cur = __result;
; 85   :   _STLP_TRY {
; 86   :     for (_Distance __n = __last - __first; __n > 0; --__n) {

	sub	eax, edi
	sar	eax, 4
	xor	ebp, ebp
	cmp	eax, ebp
	mov	esi, edx
	mov	DWORD PTR ___n$137565[esp+16], eax
	jle	$LN63@ucopy@25
	push	ebx
	npad	4
$LL3@ucopy@25:

; 87   :       _Param_Construct(&*__cur, *__first);

	cmp	esi, ebp
	je	SHORT $LN65@ucopy@25
	mov	eax, DWORD PTR [edi+4]
	sub	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], ebp
	sar	eax, 3
	mov	DWORD PTR [esi+4], ebp
	lea	ebx, DWORD PTR [eax*8]
	mov	DWORD PTR [esi+8], ebp
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	ebx
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	add	ebx, eax
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], ebx
	mov	edx, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [edi]
	cmp	edx, ecx
	je	SHORT $LN51@ucopy@25
	mov	ebx, edx
	sub	ebx, ecx
	push	ebx
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, ebx
$LN51@ucopy@25:
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+12], ebp
	mov	ecx, DWORD PTR [edi+12]
	cmp	ecx, ebp
	je	SHORT $LN64@ucopy@25
	add	DWORD PTR [ecx], 1
$LN64@ucopy@25:
	mov	eax, DWORD PTR [esi+12]
	cmp	eax, ebp
	je	SHORT $LN57@ucopy@25
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [esi+12]
	cmp	DWORD PTR [eax], ebp
	jne	SHORT $LN57@ucopy@25
	mov	DWORD PTR [esi+12], ebp
$LN57@ucopy@25:
	mov	eax, DWORD PTR ___n$137565[esp+20]
	mov	DWORD PTR [esi+12], ecx
$LN65@ucopy@25:
	sub	eax, 1

; 88   :       ++__first;

	add	edi, 16					; 00000010H

; 89   :       ++__cur;

	add	esi, 16					; 00000010H
	cmp	eax, ebp
	mov	DWORD PTR ___n$137565[esp+20], eax
	jg	$LL3@ucopy@25
	pop	ebx
$LN63@ucopy@25:
	pop	edi

; 90   :     }
; 91   :     return __cur;

	mov	eax, esi
	pop	esi
	pop	ebp

; 92   :   }
; 93   :   _STLP_UNWIND(_STLP_STD::_Destroy_Range(__result, __cur))
; 94   :   _STLP_RET_AFTER_THROW(__cur)
; 95   : }

	pop	ecx
	ret	0
??$__ucopy@PAVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ENDP ; stlp_std::priv::__ucopy<motion_marks *,motion_marks *,int>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__ufill@PAVmotion_marks@@V1@H@priv@stlp_std@@YAXPAVmotion_marks@@0ABV2@ABUrandom_access_iterator_tag@1@PAH@Z
_TEXT	SEGMENT
___n$137559 = -4					; size = 4
??$__ufill@PAVmotion_marks@@V1@H@priv@stlp_std@@YAXPAVmotion_marks@@0ABV2@ABUrandom_access_iterator_tag@1@PAH@Z PROC ; stlp_std::priv::__ufill<motion_marks *,motion_marks,int>, COMDAT
; ___first$ = ecx
; ___last$ = eax
; ___x$ = ebx

; 246  :                     const _Tp& __x, const random_access_iterator_tag &, _Distance*) {

	push	ecx
	push	ebp
	push	esi
	mov	esi, ecx

; 247  :   _ForwardIter __cur = __first;
; 248  :   _STLP_TRY {
; 249  :     for (_Distance __n = __last - __first; __n > 0; --__n, ++__cur)

	sub	eax, esi
	sar	eax, 4
	xor	ebp, ebp
	cmp	eax, ebp
	mov	DWORD PTR ___n$137559[esp+12], eax
	jle	$LN1@ufill@17
	add	esi, 12					; 0000000cH
	push	edi
	npad	4
$LL3@ufill@17:

; 250  :       _Param_Construct(&*__cur, __x);

	lea	ecx, DWORD PTR [esi-12]
	test	ecx, ecx
	je	SHORT $LN2@ufill@17
	mov	eax, DWORD PTR [ebx+4]
	sub	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi-12], ebp
	sar	eax, 3
	mov	DWORD PTR [esi-8], ebp
	lea	edi, DWORD PTR [eax*8]
	mov	DWORD PTR [esi-4], ebp
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	add	edi, eax
	mov	DWORD PTR [esi-12], eax
	mov	DWORD PTR [esi-8], eax
	mov	DWORD PTR [esi-4], edi
	mov	edx, DWORD PTR [ebx+4]
	mov	ecx, DWORD PTR [ebx]
	cmp	edx, ecx
	je	SHORT $LN51@ufill@17
	mov	edi, edx
	sub	edi, ecx
	push	edi
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, edi
$LN51@ufill@17:
	mov	DWORD PTR [esi-8], eax
	mov	DWORD PTR [esi], ebp
	mov	ecx, DWORD PTR [ebx+12]
	cmp	ecx, ebp
	je	SHORT $LN63@ufill@17
	add	DWORD PTR [ecx], 1
$LN63@ufill@17:
	mov	eax, DWORD PTR [esi]
	cmp	eax, ebp
	je	SHORT $LN57@ufill@17
	add	DWORD PTR [eax], -1
	mov	edx, DWORD PTR [esi]
	cmp	DWORD PTR [edx], ebp
	jne	SHORT $LN57@ufill@17
	mov	DWORD PTR [esi], ebp
$LN57@ufill@17:
	mov	eax, DWORD PTR ___n$137559[esp+16]
	mov	DWORD PTR [esi], ecx
$LN2@ufill@17:
	sub	eax, 1
	add	esi, 16					; 00000010H
	cmp	eax, ebp
	mov	DWORD PTR ___n$137559[esp+16], eax
	jg	$LL3@ufill@17
	pop	edi
$LN1@ufill@17:
	pop	esi
	pop	ebp

; 251  :   }
; 252  :   _STLP_UNWIND(_STLP_STD::_Destroy_Range(__first, __cur))
; 253  : }

	pop	ecx
	ret	0
??$__ufill@PAVmotion_marks@@V1@H@priv@stlp_std@@YAXPAVmotion_marks@@0ABV2@ABUrandom_access_iterator_tag@1@PAH@Z ENDP ; stlp_std::priv::__ufill<motion_marks *,motion_marks,int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$_Destroy_Moved_Range@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$_Destroy_Moved_Range@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0@Z PROC ; stlp_std::_Destroy_Moved_Range<stlp_std::reverse_iterator<CMotionDef *> >, COMDAT

; 199  :   __destroy_mv_srcs(__first, __last, _STLP_VALUE_TYPE(__first, _ForwardIterator));

	mov	edx, DWORD PTR ___first$[esp-4]
	push	ecx
	mov	ecx, DWORD PTR ___last$[esp]
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], edx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@VCMotionDef@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0PAVCMotionDef@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotionDef *>,CMotionDef>
	add	esp, 8

; 200  : }

	ret	0
??$_Destroy_Moved_Range@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0@Z ENDP ; stlp_std::_Destroy_Moved_Range<stlp_std::reverse_iterator<CMotionDef *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Param_Construct@VCMotionDef@@V1@@stlp_std@@YAXPAVCMotionDef@@ABV1@@Z
_TEXT	SEGMENT
??$_Param_Construct@VCMotionDef@@V1@@stlp_std@@YAXPAVCMotionDef@@ABV1@@Z PROC ; stlp_std::_Param_Construct<CMotionDef,CMotionDef>, COMDAT
; ___p$ = ecx
; ___val$ = eax

; 118  : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 119  :   memset((char*)__p, _STLP_SHRED_BYTE, sizeof(_T1));
; 120  : #endif
; 121  :   _STLP_PLACEMENT_NEW (__p) _T1(__val);

	test	ecx, ecx
	je	SHORT $LN3@Param_Cons@23
	push	eax
	call	??0CMotionDef@@QAE@ABV0@@Z
$LN3@Param_Cons@23:

; 122  : }

	ret	0
??$_Param_Construct@VCMotionDef@@V1@@stlp_std@@YAXPAVCMotionDef@@ABV1@@Z ENDP ; stlp_std::_Param_Construct<CMotionDef,CMotionDef>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.c
_TEXT	ENDS
;	COMDAT ?_M_insert@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@AAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@23@PAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@00@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___on_left$ = 12					; size = 4
___on_right$ = 16					; size = 4
?_M_insert@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@AAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@23@PAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@00@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_insert, COMDAT
; _this$ = ebx
; ___parent$ = ecx
; ___val$ = eax

; 353  :                                                                       _Rb_tree_node_base * __on_right) {

	push	ebp
	mov	ebp, DWORD PTR ___$ReturnUdt$[esp]
	push	esi
	push	edi
	mov	edi, ecx

; 354  :   // We do not create the node here as, depending on tests, we might call
; 355  :   // _M_key_compare that can throw an exception.
; 356  :   _Base_ptr __new_node;
; 357  : 
; 358  :   if ( __parent == &this->_M_header._M_data ) {

	cmp	edi, ebx
	jne	SHORT $LN7@M_insert@8

; 359  :     __new_node = _M_create_node(__val);

	call	?_M_create_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_create_node
	mov	esi, eax

; 360  :     _S_left(__parent) = __new_node;   // also makes _M_leftmost() = __new_node

	mov	DWORD PTR [edi+8], esi

; 361  :     _M_root() = __new_node;

	mov	DWORD PTR [ebx+4], esi

; 362  :     _M_rightmost() = __new_node;
; 363  :   }
; 364  :   else if ( __on_right == 0 &&     // If __on_right != 0, the remainder fails to false

	jmp	SHORT $LN50@M_insert@8
$LN7@M_insert@8:

; 365  :            ( __on_left != 0 ||     // If __on_left != 0, the remainder succeeds to true
; 366  :              _M_key_compare( _KeyOfValue()(__val), _S_key(__parent) ) ) ) {

	cmp	DWORD PTR ___on_right$[esp+8], 0
	jne	SHORT $LN5@M_insert@8
	cmp	DWORD PTR ___on_left$[esp+8], 0
	jne	SHORT $LN4@M_insert@8
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR [edi+16]
	jae	SHORT $LN5@M_insert@8
$LN4@M_insert@8:

; 367  :     __new_node = _M_create_node(__val);

	call	?_M_create_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_create_node
	mov	esi, eax

; 368  :     _S_left(__parent) = __new_node;

	mov	DWORD PTR [edi+8], esi

; 369  :     if (__parent == _M_leftmost())

	cmp	edi, DWORD PTR [ebx+8]
	jne	SHORT $LN1@M_insert@8

; 370  :       _M_leftmost() = __new_node;   // maintain _M_leftmost() pointing to min node

	mov	DWORD PTR [ebx+8], esi

; 371  :   }
; 372  :   else {

	jmp	SHORT $LN1@M_insert@8
$LN5@M_insert@8:

; 373  :     __new_node = _M_create_node(__val);

	call	?_M_create_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_create_node
	mov	esi, eax

; 374  :     _S_right(__parent) = __new_node;

	mov	DWORD PTR [edi+12], esi

; 375  :     if (__parent == _M_rightmost())

	cmp	edi, DWORD PTR [ebx+12]
	jne	SHORT $LN1@M_insert@8
$LN50@M_insert@8:

; 376  :       _M_rightmost() = __new_node;  // maintain _M_rightmost() pointing to max node

	mov	DWORD PTR [ebx+12], esi
$LN1@M_insert@8:

; 377  :   }
; 378  :   _S_parent(__new_node) = __parent;

	mov	DWORD PTR [esi+4], edi

; 379  :   _Rb_global_inst::_Rebalance(__new_node, this->_M_header._M_data._M_parent);

	lea	edi, DWORD PTR [ebx+4]
	mov	eax, esi
	call	?_Rebalance@?$_Rb_global@_N@priv@stlp_std@@SAXPAU_Rb_tree_node_base@23@AAPAU423@@Z ; stlp_std::priv::_Rb_global<bool>::_Rebalance

; 380  :   ++_M_node_count;

	add	DWORD PTR [ebx+16], 1
	pop	edi

; 381  :   return iterator(__new_node);

	mov	DWORD PTR [ebp], esi
	pop	esi
	mov	eax, ebp
	pop	ebp

; 382  : }

	ret	12					; 0000000cH
?_M_insert@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@AAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@23@PAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@00@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_insert
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$_Copy_Construct@VCMotionDef@@@stlp_std@@YAXPAVCMotionDef@@ABV1@@Z
_TEXT	SEGMENT
??$_Copy_Construct@VCMotionDef@@@stlp_std@@YAXPAVCMotionDef@@ABV1@@Z PROC ; stlp_std::_Copy_Construct<CMotionDef>, COMDAT
; ___p$ = ecx
; ___val$ = eax

; 110  : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 111  :   memset((char*)__p, _STLP_SHRED_BYTE, sizeof(_Tp));
; 112  : #endif
; 113  :   _STLP_PLACEMENT_NEW (__p) _Tp(__val);

	test	ecx, ecx
	je	SHORT $LN3@Copy_Const@35
	push	eax
	call	??0CMotionDef@@QAE@ABV0@@Z
$LN3@Copy_Const@35:

; 114  : }

	ret	0
??$_Copy_Construct@VCMotionDef@@@stlp_std@@YAXPAVCMotionDef@@ABV1@@Z ENDP ; stlp_std::_Copy_Construct<CMotionDef>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_uninitialized.h
_TEXT	ENDS
;	COMDAT ??$uninitialized_copy@PBVmotion_marks@@PAV1@@stlp_std@@YAPAVmotion_marks@@PBV1@0PAV1@@Z
_TEXT	SEGMENT
??$uninitialized_copy@PBVmotion_marks@@PAV1@@stlp_std@@YAPAVmotion_marks@@PBV1@0PAV1@@Z PROC ; stlp_std::uninitialized_copy<motion_marks const *,motion_marks *>, COMDAT
; ___first$ = ecx
; ___last$ = eax
; ___result$ = edx

; 144  : { return _STLP_PRIV __ucopy_aux(__first, __last, __result, _BothPtrType< _InputIter, _ForwardIter>::_Answer()); }

	jmp	??$__ucopy@PBVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<motion_marks const *,motion_marks *,int>
??$uninitialized_copy@PBVmotion_marks@@PAV1@@stlp_std@@YAPAVmotion_marks@@PBV1@0PAV1@@Z ENDP ; stlp_std::uninitialized_copy<motion_marks const *,motion_marks *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__ucopy_ptrs@PAVmotion_marks@@PAV1@@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABU__false_type@1@@Z
_TEXT	SEGMENT
??$__ucopy_ptrs@PAVmotion_marks@@PAV1@@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABU__false_type@1@@Z PROC ; stlp_std::priv::__ucopy_ptrs<motion_marks *,motion_marks *>, COMDAT
; ___first$ = ecx
; ___last$ = eax
; ___result$ = edx

; 113  : { return __ucopy(__first, __last, __result, random_access_iterator_tag(), (ptrdiff_t*)0); }

	jmp	??$__ucopy@PAVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<motion_marks *,motion_marks *,int>
??$__ucopy_ptrs@PAVmotion_marks@@PAV1@@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABU__false_type@1@@Z ENDP ; stlp_std::priv::__ucopy_ptrs<motion_marks *,motion_marks *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__uninitialized_fill_n@PAVmotion_marks@@IV1@@priv@stlp_std@@YAPAVmotion_marks@@PAV2@IABV2@@Z
_TEXT	SEGMENT
??$__uninitialized_fill_n@PAVmotion_marks@@IV1@@priv@stlp_std@@YAPAVmotion_marks@@PAV2@IABV2@@Z PROC ; stlp_std::priv::__uninitialized_fill_n<motion_marks *,unsigned int,motion_marks>, COMDAT
; ___first$ = ecx
; ___n$ = eax
; ___x$ = ebx

; 314  :   _ForwardIter __last = __first + __n;

	shl	eax, 4
	add	eax, ecx
	push	esi
	mov	esi, eax

; 315  :   __ufill(__first, __last, __x, random_access_iterator_tag(), (ptrdiff_t*)0);

	call	??$__ufill@PAVmotion_marks@@V1@H@priv@stlp_std@@YAXPAVmotion_marks@@0ABV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ufill<motion_marks *,motion_marks,int>

; 316  :   return __last;

	mov	eax, esi
	pop	esi

; 317  : }

	ret	0
??$__uninitialized_fill_n@PAVmotion_marks@@IV1@@priv@stlp_std@@YAPAVmotion_marks@@PAV2@IABV2@@Z ENDP ; stlp_std::priv::__uninitialized_fill_n<motion_marks *,unsigned int,motion_marks>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__uninitialized_move@PAVmotion_marks@@PAV1@U__false_type@stlp_std@@@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00U__false_type@1@ABU31@@Z
_TEXT	SEGMENT
___trivial_ucpy$ = 8					; size = 1
??$__uninitialized_move@PAVmotion_marks@@PAV1@U__false_type@stlp_std@@@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00U__false_type@1@ABU31@@Z PROC ; stlp_std::priv::__uninitialized_move<motion_marks *,motion_marks *,stlp_std::__false_type>, COMDAT
; ___first$ = ecx
; ___last$ = eax
; ___result$ = edx

; 414  : { return __ucopy_ptrs(__first, __last, __result, __trivial_ucpy); }

	jmp	??$__ucopy@PAVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<motion_marks *,motion_marks *,int>
??$__uninitialized_move@PAVmotion_marks@@PAV1@U__false_type@stlp_std@@@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00U__false_type@1@ABU31@@Z ENDP ; stlp_std::priv::__uninitialized_move<motion_marks *,motion_marks *,stlp_std::__false_type>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?_M_clear_after_move@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXXZ
_TEXT	SEGMENT
?_M_clear_after_move@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXXZ PROC ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_clear_after_move, COMDAT
; _this$ = eax

; 620  :   void _M_clear_after_move() {

	push	esi
	mov	esi, eax

; 621  :     _STLP_STD::_Destroy_Moved_Range(rbegin(), rend());

	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	push	ecx
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@VCMotionDef@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0PAVCMotionDef@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotionDef *>,CMotionDef>

; 622  :     this->_M_end_of_storage.deallocate(this->_M_start, this->_M_end_of_storage._M_data - this->_M_start);

	mov	esi, DWORD PTR [esi]
	add	esp, 8
	test	esi, esi
	je	SHORT $LN29@M_clear_af@7
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN29@M_clear_af@7:

; 623  :   }

	pop	esi
	ret	0
?_M_clear_after_move@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXXZ ENDP ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_clear_after_move
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_uninitialized.h
_TEXT	ENDS
;	COMDAT ??$__ucopy@PBVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z
_TEXT	SEGMENT
??$__ucopy@PBVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z PROC ; stlp_std::priv::__ucopy<CMotionDef const *,CMotionDef *,int>, COMDAT
; ___first$ = ecx
; ___last$ = eax
; ___result$ = edx

; 83   :                            _OutputIter __result, const random_access_iterator_tag &, _Distance*) {

	push	ebx
	mov	ebx, ecx

; 84   :   _OutputIter __cur = __result;
; 85   :   _STLP_TRY {
; 86   :     for (_Distance __n = __last - __first; __n > 0; --__n) {

	sub	eax, ebx
	push	esi
	mov	ecx, eax
	push	edi
	mov	edi, edx
	mov	eax, -1840700269			; 92492493H
	imul	ecx
	add	edx, ecx
	sar	edx, 4
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
	test	esi, esi
	jle	SHORT $LN14@ucopy@26
$LL3@ucopy@26:

; 87   :       _Param_Construct(&*__cur, *__first);

	test	edi, edi
	je	SHORT $LN8@ucopy@26
	push	ebx
	mov	ecx, edi
	call	??0CMotionDef@@QAE@ABV0@@Z
$LN8@ucopy@26:
	sub	esi, 1

; 88   :       ++__first;

	add	ebx, 28					; 0000001cH

; 89   :       ++__cur;

	add	edi, 28					; 0000001cH
	test	esi, esi
	jg	SHORT $LL3@ucopy@26
$LN14@ucopy@26:

; 90   :     }
; 91   :     return __cur;

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx

; 92   :   }
; 93   :   _STLP_UNWIND(_STLP_STD::_Destroy_Range(__result, __cur))
; 94   :   _STLP_RET_AFTER_THROW(__cur)
; 95   : }

	ret	0
??$__ucopy@PBVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ENDP ; stlp_std::priv::__ucopy<CMotionDef const *,CMotionDef *,int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ??$_M_allocate_and_copy@PBVmotion_marks@@@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEPAVmotion_marks@@AAIPBV3@1@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$_M_allocate_and_copy@PBVmotion_marks@@@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEPAVmotion_marks@@AAIPBV3@1@Z PROC ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_allocate_and_copy<motion_marks const *>, COMDAT
; ___n$ = eax

; 634  :                                _ForwardIterator __first, _ForwardIterator __last)
; 635  : #else /* _STLP_MEMBER_TEMPLATES */
; 636  :   pointer _M_allocate_and_copy(size_type& __n,
; 637  :                                const_pointer __first, const_pointer __last)
; 638  : #endif /* _STLP_MEMBER_TEMPLATES */
; 639  :   {
; 640  :     pointer __result = this->_M_end_of_storage.allocate(__n, __n);

	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	shl	eax, 4
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 641  :     _STLP_TRY {
; 642  :       uninitialized_copy(__first, __last, __result);

	mov	ecx, DWORD PTR ___first$[esp]
	mov	esi, eax
	mov	eax, DWORD PTR ___last$[esp]
	mov	edx, esi
	call	??$__ucopy@PBVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<motion_marks const *,motion_marks *,int>

; 643  :       return __result;

	mov	eax, esi
	pop	esi

; 644  :     }
; 645  :     _STLP_UNWIND(this->_M_end_of_storage.deallocate(__result, __n))
; 646  :     _STLP_RET_AFTER_THROW(__result)
; 647  :   }

	ret	8
??$_M_allocate_and_copy@PBVmotion_marks@@@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEPAVmotion_marks@@AAIPBV3@1@Z ENDP ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_allocate_and_copy<motion_marks const *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.c
_TEXT	ENDS
;	COMDAT ?_M_fill_insert_aux@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXPAVmotion_marks@@IABV4@ABU__false_type@3@@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
___x_copy$132955 = -20					; size = 16
tv435 = 8						; size = 4
___last$480249 = 8					; size = 4
___pos$ = 8						; size = 4
___n$ = 12						; size = 4
$T479598 = 16						; size = 1
___x$ = 16						; size = 4
___formal$ = 20						; size = 4
?_M_fill_insert_aux@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXPAVmotion_marks@@IABV4@ABU__false_type@3@@Z PROC ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_fill_insert_aux, COMDAT
; _this$ = ecx

; 143  :                                               const _Tp& __x, const __false_type& /*_Movable*/) {

	sub	esp, 28					; 0000001cH
	push	ebx

; 144  :   //Here self referencing needs to be checked even for non movable types.
; 145  :   if (_M_is_inside(__x)) {

	mov	ebx, DWORD PTR ___x$[esp+28]
	cmp	ebx, DWORD PTR [ecx]
	push	ebp
	push	esi
	push	edi
	mov	DWORD PTR _this$[esp+44], ecx
	jb	$LN3@M_fill_ins@22
	cmp	ebx, DWORD PTR [ecx+4]
	jae	$LN3@M_fill_ins@22

; 146  :     _Tp __x_copy = __x;

	mov	eax, DWORD PTR [ebx+4]
	sub	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	sar	eax, 3
	xor	edi, edi
	lea	esi, DWORD PTR [eax*8]
	push	esi
	mov	DWORD PTR ___x_copy$132955[esp+48], edi
	mov	DWORD PTR ___x_copy$132955[esp+52], edi
	mov	DWORD PTR ___x_copy$132955[esp+56], edi
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	mov	edx, DWORD PTR [ebx+4]
	mov	ecx, DWORD PTR [ebx]
	add	esi, eax
	cmp	edx, ecx
	mov	DWORD PTR ___x_copy$132955[esp+44], eax
	mov	DWORD PTR ___x_copy$132955[esp+48], eax
	mov	DWORD PTR ___x_copy$132955[esp+52], esi
	je	SHORT $LN116@M_fill_ins@22
	mov	esi, edx
	sub	esi, ecx
	push	esi
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN116@M_fill_ins@22:
	mov	ebx, DWORD PTR [ebx+12]
	cmp	ebx, edi
	mov	DWORD PTR ___x_copy$132955[esp+48], eax
	mov	DWORD PTR ___x_copy$132955[esp+56], edi
	je	SHORT $LN55@M_fill_ins@22
	add	DWORD PTR [ebx], 1
	mov	eax, DWORD PTR ___x_copy$132955[esp+56]
	cmp	eax, edi
	je	SHORT $LN55@M_fill_ins@22
	add	DWORD PTR [eax], -1
$LN55@M_fill_ins@22:

; 147  :     _M_fill_insert_aux(__pos, __n, __x_copy, __false_type());

	mov	edx, DWORD PTR ___n$[esp+40]
	lea	eax, DWORD PTR $T479598[esp+40]
	push	eax
	mov	eax, DWORD PTR ___pos$[esp+44]
	lea	ecx, DWORD PTR ___x_copy$132955[esp+48]
	push	ecx
	mov	ecx, DWORD PTR _this$[esp+52]
	push	edx
	push	eax
	mov	DWORD PTR ___x_copy$132955[esp+72], ebx
	mov	BYTE PTR $T479598[esp+56], 0
	call	?_M_fill_insert_aux@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXPAVmotion_marks@@IABV4@ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_fill_insert_aux

; 148  :     return;

	mov	eax, DWORD PTR ___x_copy$132955[esp+56]
	cmp	eax, edi
	je	SHORT $LN63@M_fill_ins@22
	add	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR ___x_copy$132955[esp+56]
	cmp	DWORD PTR [ecx], edi
	jne	SHORT $LN63@M_fill_ins@22
	mov	DWORD PTR ___x_copy$132955[esp+56], edi
$LN63@M_fill_ins@22:
	mov	eax, DWORD PTR ___x_copy$132955[esp+44]
	cmp	eax, edi
	je	$LN1@M_fill_ins@22
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z

; 162  :   }
; 163  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 28					; 0000001cH
	ret	16					; 00000010H
$LN3@M_fill_ins@22:

; 149  :   }
; 150  :   const size_type __elems_after = this->_M_finish - __pos;

	mov	edi, DWORD PTR [ecx+4]
	mov	ebp, DWORD PTR ___pos$[esp+40]

; 151  :   pointer __old_finish = this->_M_finish;
; 152  :   if (__elems_after > __n) {

	mov	eax, DWORD PTR ___n$[esp+40]
	mov	esi, edi
	sub	esi, ebp
	sar	esi, 4
	cmp	esi, eax

; 153  :     _STLP_PRIV __ucopy_ptrs(this->_M_finish - __n, this->_M_finish, this->_M_finish, _TrivialUCopy());

	mov	ecx, edi
	jbe	SHORT $LN2@M_fill_ins@22
	shl	eax, 4
	mov	esi, eax
	sub	ecx, esi
	mov	edx, edi
	mov	eax, edi
	mov	DWORD PTR tv435[esp+40], ecx
	call	??$__ucopy@PAVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<motion_marks *,motion_marks *,int>

; 154  :     this->_M_finish += __n;

	mov	eax, DWORD PTR _this$[esp+44]
	add	DWORD PTR [eax+4], esi

; 155  :     _STLP_PRIV __copy_backward_ptrs(__pos, __old_finish - __n, __old_finish, _TrivialCopy());

	mov	ecx, DWORD PTR tv435[esp+40]
	push	ebp
	mov	eax, edi
	call	??$__copy_backward@PAVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__copy_backward<motion_marks *,motion_marks *,int>
	add	esp, 4

; 156  :     _STLP_STD::fill(__pos, __pos + __n, __x);

	add	esi, ebp
	push	esi

; 157  :   } else {

	jmp	SHORT $LN117@M_fill_ins@22
$LN2@M_fill_ins@22:

; 158  :     this->_M_finish = _STLP_PRIV __uninitialized_fill_n(this->_M_finish, __n - __elems_after, __x);

	sub	eax, esi
	shl	eax, 4
	add	eax, edi
	mov	DWORD PTR ___last$480249[esp+40], eax
	call	??$__ufill@PAVmotion_marks@@V1@H@priv@stlp_std@@YAXPAVmotion_marks@@0ABV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ufill<motion_marks *,motion_marks,int>
	mov	edx, DWORD PTR ___last$480249[esp+40]
	mov	eax, DWORD PTR _this$[esp+44]
	mov	DWORD PTR [eax+4], edx

; 159  :     _STLP_PRIV __ucopy_ptrs(__pos, __old_finish, this->_M_finish, _TrivialUCopy());

	mov	eax, edi
	mov	ecx, ebp
	call	??$__ucopy@PAVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<motion_marks *,motion_marks *,int>

; 160  :     this->_M_finish += __elems_after;

	mov	eax, DWORD PTR _this$[esp+44]
	shl	esi, 4
	add	DWORD PTR [eax+4], esi

; 161  :     _STLP_STD::fill(__pos, __old_finish, __x);

	push	edi
$LN117@M_fill_ins@22:
	mov	esi, ebx
	mov	eax, ebp
	call	??$fill@PAVmotion_marks@@V1@@stlp_std@@YAXPAVmotion_marks@@0ABV1@@Z ; stlp_std::fill<motion_marks *,motion_marks>
	add	esp, 4
$LN1@M_fill_ins@22:

; 162  :   }
; 163  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 28					; 0000001cH
	ret	16					; 00000010H
?_M_fill_insert_aux@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXPAVmotion_marks@@IABV4@ABU__false_type@3@@Z ENDP ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_fill_insert_aux
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_insert_overflow_aux@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXPAVmotion_marks@@ABV4@ABU__false_type@3@I_N@Z
_TEXT	SEGMENT
___old_size$ = -12					; size = 4
___last$480413 = -8					; size = 4
tv330 = -4						; size = 4
___pos$ = 8						; size = 4
___fill_len$ = 12					; size = 4
?_M_insert_overflow_aux@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXPAVmotion_marks@@ABV4@ABU__false_type@3@I_N@Z PROC ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_insert_overflow_aux, COMDAT
; _this$ = edi
; ___x$ = eax

; 84   :                                                  size_type __fill_len, bool __atend ) {

	sub	esp, 12					; 0000000cH
	push	ebx
	mov	ebx, eax

; 85   :   const size_type __old_size = size();

	mov	eax, DWORD PTR [edi+4]
	sub	eax, DWORD PTR [edi]
	push	ebp
	push	esi

; 86   :   size_type __len = __old_size + (max)(__old_size, __fill_len);

	lea	ecx, DWORD PTR ___fill_len$[esp+20]
	push	ecx
	lea	edx, DWORD PTR ___old_size$[esp+28]
	sar	eax, 4
	push	edx
	mov	DWORD PTR ___old_size$[esp+32], eax
	call	??$max@I@stlp_std@@YAABIABI0@Z		; stlp_std::max<unsigned int>
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR ___old_size$[esp+32]

; 87   : 
; 88   :   pointer __new_start = this->_M_end_of_storage.allocate(__len, __len);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	eax, 4
	add	esp, 8
	push	eax
	mov	DWORD PTR tv330[esp+28], eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 89   :   pointer __new_finish = __new_start;
; 90   :   _STLP_TRY {
; 91   :     __new_finish = _STLP_PRIV __uninitialized_move(this->_M_start, __pos, __new_start, _TrivialUCopy(), _Movable());

	mov	ecx, DWORD PTR [edi]
	mov	ebp, eax
	mov	eax, DWORD PTR ___pos$[esp+20]
	mov	edx, ebp
	call	??$__ucopy@PAVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<motion_marks *,motion_marks *,int>
	mov	esi, eax

; 92   :     // handle insertion
; 93   :     if (__fill_len == 1) {

	mov	eax, DWORD PTR ___fill_len$[esp+20]
	cmp	eax, 1
	jne	SHORT $LN3@M_insert_o@29

; 94   :       _Copy_Construct(__new_finish, __x);

	test	esi, esi
	je	SHORT $LN28@M_insert_o@29
	mov	eax, ebx
	call	??0?$_Impl_vector@U?$pair@MM@stlp_std@@V?$xalloc@U?$pair@MM@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >::_Impl_vector<stlp_std::pair<float,float>,xalloc<stlp_std::pair<float,float> > >
	xor	ecx, ecx
	mov	DWORD PTR [esi+12], ecx
	mov	ebx, DWORD PTR [ebx+12]
	cmp	ebx, ecx
	je	SHORT $LN40@M_insert_o@29
	add	DWORD PTR [ebx], 1
$LN40@M_insert_o@29:
	mov	eax, DWORD PTR [esi+12]
	cmp	eax, ecx
	je	SHORT $LN43@M_insert_o@29
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [esi+12]
	cmp	DWORD PTR [eax], ecx
	jne	SHORT $LN43@M_insert_o@29
	mov	DWORD PTR [esi+12], ecx
$LN43@M_insert_o@29:
	mov	DWORD PTR [esi+12], ebx
$LN28@M_insert_o@29:

; 95   :       ++__new_finish;

	add	esi, 16					; 00000010H

; 96   :     } else

	jmp	SHORT $LN86@M_insert_o@29
$LN3@M_insert_o@29:

; 97   :       __new_finish = _STLP_PRIV __uninitialized_fill_n(__new_finish, __fill_len, __x);

	shl	eax, 4
	add	eax, esi
	mov	ecx, esi
	mov	DWORD PTR ___last$480413[esp+24], eax
	call	??$__ufill@PAVmotion_marks@@V1@H@priv@stlp_std@@YAXPAVmotion_marks@@0ABV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ufill<motion_marks *,motion_marks,int>
	mov	esi, DWORD PTR ___last$480413[esp+24]
$LN86@M_insert_o@29:

; 98   :     if (!__atend)
; 99   :       __new_finish = _STLP_PRIV __uninitialized_move(__pos, this->_M_finish, __new_finish, _TrivialUCopy(), _Movable()); // copy remainder

	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR ___pos$[esp+20]
	mov	edx, esi
	call	??$__ucopy@PAVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<motion_marks *,motion_marks *,int>

; 100  :   }
; 101  :   _STLP_UNWIND((_STLP_STD::_Destroy_Range(__new_start,__new_finish),
; 102  :                this->_M_end_of_storage.deallocate(__new_start,__len)))
; 103  :   _M_clear_after_move();

	mov	ecx, DWORD PTR [edi+4]
	push	ecx
	mov	esi, eax
	mov	eax, DWORD PTR [edi]
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@Vmotion_marks@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0PAVmotion_marks@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<motion_marks *>,motion_marks>
	mov	eax, DWORD PTR [edi]
	add	esp, 8
	test	eax, eax
	je	SHORT $LN81@M_insert_o@29
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN81@M_insert_o@29:

; 104  :   _M_set(__new_start, __new_finish, __new_start + __len);

	mov	ecx, DWORD PTR tv330[esp+24]
	mov	DWORD PTR [edi+4], esi

; 105  : }

	pop	esi
	add	ecx, ebp
	mov	DWORD PTR [edi], ebp
	pop	ebp
	mov	DWORD PTR [edi+8], ecx
	pop	ebx
	add	esp, 12					; 0000000cH
	ret	8
?_M_insert_overflow_aux@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXPAVmotion_marks@@ABV4@ABU__false_type@3@I_N@Z ENDP ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_insert_overflow_aux
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?_M_clear@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXXZ
_TEXT	SEGMENT
?_M_clear@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXXZ PROC ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_clear, COMDAT
; _this$ = eax

; 615  :   void _M_clear() {

	push	esi
	mov	esi, eax

; 616  :     _STLP_STD::_Destroy_Range(rbegin(), rend());

	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	push	ecx
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@VCMotionDef@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0PAVCMotionDef@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotionDef *>,CMotionDef>

; 617  :     this->_M_end_of_storage.deallocate(this->_M_start, this->_M_end_of_storage._M_data - this->_M_start);

	mov	esi, DWORD PTR [esi]
	add	esp, 8
	test	esi, esi
	je	SHORT $LN29@M_clear@33
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN29@M_clear@33:

; 618  :   }

	pop	esi
	ret	0
?_M_clear@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXXZ ENDP ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_clear
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_insert_overflow@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXPAVmotion_marks@@ABV4@ABU__false_type@3@I_N@Z
_TEXT	SEGMENT
___x$ = 8						; size = 4
?_M_insert_overflow@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXPAVmotion_marks@@ABV4@ABU__false_type@3@I_N@Z PROC ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_insert_overflow, COMDAT
; _this$ = edi
; ___pos$ = ecx
; ___fill_len$ = eax

; 161  :   { _M_insert_overflow_aux(__pos, __x, _Movable(), __fill_len, __atend); }

	push	eax
	mov	eax, DWORD PTR ___x$[esp]
	push	ecx
	call	?_M_insert_overflow_aux@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXPAVmotion_marks@@ABV4@ABU__false_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_insert_overflow_aux
	ret	4
?_M_insert_overflow@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXPAVmotion_marks@@ABV4@ABU__false_type@3@I_N@Z ENDP ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_insert_overflow
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_uninitialized.h
_TEXT	ENDS
;	COMDAT ??$__ucopy_ptrs@PBVCMotionDef@@PAV1@@priv@stlp_std@@YAPAVCMotionDef@@PBV2@0PAV2@ABU__false_type@1@@Z
_TEXT	SEGMENT
??$__ucopy_ptrs@PBVCMotionDef@@PAV1@@priv@stlp_std@@YAPAVCMotionDef@@PBV2@0PAV2@ABU__false_type@1@@Z PROC ; stlp_std::priv::__ucopy_ptrs<CMotionDef const *,CMotionDef *>, COMDAT
; ___first$ = ecx
; ___last$ = eax
; ___result$ = edx

; 113  : { return __ucopy(__first, __last, __result, random_access_iterator_tag(), (ptrdiff_t*)0); }

	jmp	??$__ucopy@PBVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<CMotionDef const *,CMotionDef *,int>
??$__ucopy_ptrs@PBVCMotionDef@@PAV1@@priv@stlp_std@@YAPAVCMotionDef@@PBV2@0PAV2@ABU__false_type@1@@Z ENDP ; stlp_std::priv::__ucopy_ptrs<CMotionDef const *,CMotionDef *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.c
_TEXT	ENDS
;	COMDAT ??4?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z
_TEXT	SEGMENT
??4?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::operator=, COMDAT
; _this$ = esi
; ___x$ = ebx

; 323  :   if (this != &__x) {

	cmp	esi, ebx
	je	SHORT $LN53@operator@122
	push	edi

; 324  :     // Note that _Key may be a constant type.
; 325  :     clear();

	xor	edi, edi
	cmp	DWORD PTR [esi+16], edi
	je	SHORT $LN6@operator@122
	mov	eax, DWORD PTR [esi+4]
	push	eax
	mov	ecx, esi
	call	?_M_erase@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_erase
	mov	DWORD PTR [esi+8], esi
	mov	DWORD PTR [esi+4], edi
	mov	DWORD PTR [esi+12], esi
	mov	DWORD PTR [esi+16], edi
$LN6@operator@122:

; 326  :     _M_node_count = 0;

	mov	DWORD PTR [esi+16], edi

; 327  :     _M_key_compare = __x._M_key_compare;

	mov	cl, BYTE PTR [ebx+20]
	mov	BYTE PTR [esi+20], cl

; 328  :     if (__x._M_root() == 0) {

	mov	eax, DWORD PTR [ebx+4]
	cmp	eax, edi
	jne	SHORT $LN2@operator@122

; 329  :       _M_root() = 0;

	mov	DWORD PTR [esi+4], edi

; 330  :       _M_leftmost() = &this->_M_header._M_data;

	mov	DWORD PTR [esi+8], esi

; 331  :       _M_rightmost() = &this->_M_header._M_data;

	mov	DWORD PTR [esi+12], esi
	pop	edi

; 338  :     }
; 339  :   }
; 340  :   return *this;

	mov	eax, esi

; 341  : }

	ret	0
$LN2@operator@122:

; 332  :     }
; 333  :     else {
; 334  :       _M_root() = _M_copy(__x._M_root(), &this->_M_header._M_data);

	push	esi
	push	eax
	mov	ecx, esi
	call	?_M_copy@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@AAEPAU_Rb_tree_node_base@23@PAU423@0@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_copy

; 335  :       _M_leftmost() = _S_minimum(_M_root());

	mov	ecx, eax
	mov	DWORD PTR [esi+4], eax
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, edi
	je	SHORT $LN33@operator@122
$LL34@operator@122:
	mov	ecx, edx
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, edi
	jne	SHORT $LL34@operator@122
$LN33@operator@122:
	mov	DWORD PTR [esi+8], ecx

; 336  :       _M_rightmost() = _S_maximum(_M_root());

	mov	ecx, eax
	mov	eax, DWORD PTR [ecx+12]
	cmp	eax, edi
	je	SHORT $LN43@operator@122
	npad	6
$LL44@operator@122:
	mov	ecx, eax
	mov	eax, DWORD PTR [ecx+12]
	cmp	eax, edi
	jne	SHORT $LL44@operator@122
$LN43@operator@122:
	mov	DWORD PTR [esi+12], ecx

; 337  :       _M_node_count = __x._M_node_count;

	mov	edx, DWORD PTR [ebx+16]
	mov	DWORD PTR [esi+16], edx
	pop	edi
$LN53@operator@122:

; 338  :     }
; 339  :   }
; 340  :   return *this;

	mov	eax, esi

; 341  : }

	ret	0
??4?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::operator=
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.c
_TEXT	ENDS
;	COMDAT ?_M_fill_insert@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXPAVmotion_marks@@IABV4@@Z
_TEXT	SEGMENT
$T480774 = -1						; size = 1
?_M_fill_insert@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXPAVmotion_marks@@IABV4@@Z PROC ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_fill_insert, COMDAT
; _this$ = ecx
; ___pos$ = esi
; ___n$ = edx
; ___x$ = eax

; 167  :                                          size_type __n, const _Tp& __x) {

	sub	esp, 8

; 168  :   if (__n != 0) {

	test	edx, edx
	push	edi
	je	SHORT $LN6@M_fill_ins@23

; 169  :     if (size_type(this->_M_end_of_storage._M_data - this->_M_finish) >= __n) {

	mov	edi, DWORD PTR [ecx+8]
	sub	edi, DWORD PTR [ecx+4]
	sar	edi, 4
	cmp	edi, edx
	jb	SHORT $LN2@M_fill_ins@23

; 170  :       _M_fill_insert_aux(__pos, __n, __x, _Movable());

	lea	edi, DWORD PTR $T480774[esp+12]
	push	edi
	push	eax
	push	edx
	push	esi
	call	?_M_fill_insert_aux@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXPAVmotion_marks@@IABV4@ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_fill_insert_aux

; 173  :   }
; 174  : }

	pop	edi
	add	esp, 8
	ret	0
$LN2@M_fill_ins@23:

; 171  :     } else
; 172  :       _M_insert_overflow(__pos, __x, _TrivialCopy(), __n);

	push	edx
	push	esi
	mov	edi, ecx
	call	?_M_insert_overflow_aux@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXPAVmotion_marks@@ABV4@ABU__false_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_insert_overflow_aux
$LN6@M_fill_ins@23:

; 173  :   }
; 174  : }

	pop	edi
	add	esp, 8
	ret	0
?_M_fill_insert@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXPAVmotion_marks@@IABV4@@Z ENDP ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_fill_insert
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z
_TEXT	SEGMENT
tv323 = -8						; size = 4
___result$480921 = -4					; size = 4
??4?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z PROC ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::operator=, COMDAT
; _this$ = esi
; ___x$ = eax

; 177  : vector<_Tp, _Alloc>& vector<_Tp, _Alloc>::operator = (const vector<_Tp, _Alloc>& __x) {

	sub	esp, 8
	push	ebx
	mov	ebx, eax

; 178  :   if (&__x != this) {

	cmp	ebx, esi
	push	ebp
	push	edi
	je	$LN83@operator@123

; 179  :     const size_type __xlen = __x.size();

	mov	edx, DWORD PTR [ebx+4]
	mov	ebp, DWORD PTR [ebx]

; 180  :     if (__xlen > capacity()) {

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [esi+8]
	mov	edi, edx
	sub	edi, ebp
	sub	ecx, eax
	sar	edi, 4
	sar	ecx, 4
	cmp	edi, ecx
	mov	DWORD PTR tv323[esp+20], edx
	jbe	SHORT $LN4@operator@123

; 181  :       size_type __len = __xlen;
; 182  :       pointer __tmp = _M_allocate_and_copy(__len, __CONST_CAST(const_pointer, __x._M_start) + 0,
; 183  :                                                   __CONST_CAST(const_pointer, __x._M_finish) + 0);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	mov	ebx, edi
	shl	ebx, 4
	push	ebx
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	mov	DWORD PTR ___result$480921[esp+20], eax
	mov	edx, eax
	mov	eax, DWORD PTR tv323[esp+20]
	mov	ecx, ebp
	call	??$__ucopy@PBVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<motion_marks const *,motion_marks *,int>

; 184  :       _M_clear();

	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	push	ecx
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@Vmotion_marks@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0PAVmotion_marks@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<motion_marks *>,motion_marks>
	mov	eax, DWORD PTR [esi]
	add	esp, 8
	test	eax, eax
	je	SHORT $LN64@operator@123
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN64@operator@123:

; 185  :       this->_M_start = __tmp;

	mov	eax, DWORD PTR ___result$480921[esp+20]

; 186  :       this->_M_end_of_storage._M_data = this->_M_start + __len;

	add	ebx, eax

; 196  :     }
; 197  :     this->_M_finish = this->_M_start + __xlen;

	shl	edi, 4
	add	edi, eax
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+8], ebx
	mov	DWORD PTR [esi+4], edi

; 198  :   }
; 199  :   return *this;

	mov	eax, esi

; 200  : }

	pop	edi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
$LN4@operator@123:

; 187  :     } else if (size() >= __xlen) {

	mov	ecx, DWORD PTR [esi+4]
	sub	ecx, eax
	sar	ecx, 4
	cmp	ecx, edi
	jb	SHORT $LN2@operator@123

; 188  :       pointer __i = _STLP_PRIV __copy_ptrs(__CONST_CAST(const_pointer, __x._M_start) + 0,
; 189  :                                            __CONST_CAST(const_pointer, __x._M_finish) + 0, this->_M_start, _TrivialCopy());

	mov	ecx, edx
	mov	edx, ebp
	call	??$__copy@PBVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__copy<motion_marks const *,motion_marks *,int>

; 190  :       _STLP_STD::_Destroy_Range(__i, this->_M_finish);

	mov	ebx, DWORD PTR [esi+4]
	call	??$__destroy_range_aux@PAVmotion_marks@@V1@@stlp_std@@YAXPAVmotion_marks@@00ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<motion_marks *,motion_marks>

; 196  :     }
; 197  :     this->_M_finish = this->_M_start + __xlen;

	shl	edi, 4
	add	edi, DWORD PTR [esi]

; 198  :   }
; 199  :   return *this;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edi

; 200  : }

	pop	edi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
$LN2@operator@123:

; 191  :     } else {
; 192  :       _STLP_PRIV __copy_ptrs(__CONST_CAST(const_pointer, __x._M_start),
; 193  :                              __CONST_CAST(const_pointer, __x._M_start) + size(), this->_M_start, _TrivialCopy());

	shl	ecx, 4
	add	ecx, ebp
	mov	edx, ebp
	call	??$__copy@PBVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__copy<motion_marks const *,motion_marks *,int>

; 194  :       _STLP_PRIV __ucopy_ptrs(__CONST_CAST(const_pointer, __x._M_start) + size(),
; 195  :                               __CONST_CAST(const_pointer, __x._M_finish) + 0, this->_M_finish, _TrivialUCopy());

	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [ebx+4]
	mov	ecx, edx
	sub	ecx, DWORD PTR [esi]
	sar	ecx, 4
	shl	ecx, 4
	add	ecx, DWORD PTR [ebx]
	call	??$__ucopy@PBVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<motion_marks const *,motion_marks *,int>

; 196  :     }
; 197  :     this->_M_finish = this->_M_start + __xlen;

	shl	edi, 4
	add	edi, DWORD PTR [esi]
	mov	DWORD PTR [esi+4], edi
$LN83@operator@123:

; 200  : }

	pop	edi
	pop	ebp
	mov	eax, esi
	pop	ebx
	add	esp, 8
	ret	0
??4?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ENDP ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::operator=
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?insert@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEXPAVmotion_marks@@IABV4@@Z
_TEXT	SEGMENT
$T481122 = -1						; size = 1
?insert@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEXPAVmotion_marks@@IABV4@@Z PROC ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::insert, COMDAT
; _this$ = ecx
; ___pos$ = esi
; ___n$ = edx
; ___x$ = eax

; 529  :   { _M_fill_insert(__pos, __n, __x); }

	sub	esp, 8
	test	edx, edx
	push	edi
	je	SHORT $LN8@insert@13
	mov	edi, DWORD PTR [ecx+8]
	sub	edi, DWORD PTR [ecx+4]
	sar	edi, 4
	cmp	edi, edx
	jb	SHORT $LN4@insert@13
	lea	edi, DWORD PTR $T481122[esp+12]
	push	edi
	push	eax
	push	edx
	push	esi
	call	?_M_fill_insert_aux@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXPAVmotion_marks@@IABV4@ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_fill_insert_aux
	pop	edi
	add	esp, 8
	ret	0
$LN4@insert@13:
	push	edx
	push	esi
	mov	edi, ecx
	call	?_M_insert_overflow_aux@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXPAVmotion_marks@@ABV4@ABU__false_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_insert_overflow_aux
$LN8@insert@13:
	pop	edi
	add	esp, 8
	ret	0
?insert@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEXPAVmotion_marks@@IABV4@@Z ENDP ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::insert
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@ABV012@@Z
_TEXT	SEGMENT
??0?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@ABV012@@Z PROC ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_Impl_vector<CMotionDef,xalloc<CMotionDef> >, COMDAT
; _this$ = esi
; ___x$ = ebx

; 236  :   { this->_M_finish = _STLP_PRIV __ucopy_ptrs(__x.begin(), __x.end(), this->_M_start, _TrivialUCopy()); }

	mov	ecx, DWORD PTR [ebx+4]
	sub	ecx, DWORD PTR [ebx]
	mov	eax, -1840700269			; 92492493H
	imul	ecx
	add	edx, ecx
	sar	edx, 4
	mov	eax, edx
	push	edi
	shr	eax, 31					; 0000001fH
	add	eax, edx
	lea	edi, DWORD PTR [eax*8]
	xor	ecx, ecx
	sub	edi, eax
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], ecx
	add	edi, edi
	mov	DWORD PTR [esi+8], ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	edi, edi
	push	edi
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	mov	edx, eax
	add	edi, edx
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [esi+4], edx
	mov	DWORD PTR [esi+8], edi
	mov	eax, DWORD PTR [ebx+4]
	mov	ecx, DWORD PTR [ebx]
	call	??$__ucopy@PBVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<CMotionDef const *,CMotionDef *,int>
	mov	DWORD PTR [esi+4], eax
	mov	eax, esi
	pop	edi
	ret	0
??0?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@ABV012@@Z ENDP ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_Impl_vector<CMotionDef,xalloc<CMotionDef> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ??0?$vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@stlp_std@@QAE@ABV?$xalloc@VCMotionDef@@@@@Z
_TEXT	SEGMENT
??0?$vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@stlp_std@@QAE@ABV?$xalloc@VCMotionDef@@@@@Z PROC ; stlp_std::vector<CMotionDef,xalloc<CMotionDef> >::vector<CMotionDef,xalloc<CMotionDef> >, COMDAT
; _this$ = eax

; 106  :   explicit vector(const allocator_type& __a = allocator_type())

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@stlp_std@@QAE@ABV?$xalloc@VCMotionDef@@@@@Z ENDP ; stlp_std::vector<CMotionDef,xalloc<CMotionDef> >::vector<CMotionDef,xalloc<CMotionDef> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?resize@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEXIABVmotion_marks@@@Z
_TEXT	SEGMENT
$T481344 = -1						; size = 1
?resize@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEXIABVmotion_marks@@@Z PROC ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::resize, COMDAT
; _this$ = edx
; ___new_size$ = ecx
; ___x$ = eax

; 596  :   void resize(size_type __new_size, const _Tp& __x = _STLP_DEFAULT_CONSTRUCTED(_Tp)) {

	sub	esp, 8
	push	ebx
	push	esi
	push	edi
	mov	edi, edx

; 597  : #else
; 598  :   void resize(size_type __new_size, const _Tp& __x) {
; 599  : #endif /*_STLP_DONT_SUP_DFLT_PARAM*/
; 600  :     if (__new_size < size())

	mov	ebx, DWORD PTR [edi]
	mov	esi, ecx
	mov	ecx, DWORD PTR [edi+4]
	mov	edx, ecx
	sub	edx, ebx
	sar	edx, 4
	cmp	esi, edx
	jae	SHORT $LN2@resize@11

; 601  :       erase(begin() + __new_size, end());

	shl	esi, 4
	add	esi, ebx
	mov	eax, esi
	cmp	eax, ecx
	je	SHORT $LN33@resize@11
	mov	edx, ecx
	call	??$__copy@PAVmotion_marks@@PAV1@H@priv@stlp_std@@YAPAVmotion_marks@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__copy<motion_marks *,motion_marks *,int>
	mov	ebx, DWORD PTR [edi+4]
	mov	esi, eax
	call	??$__destroy_range_aux@PAVmotion_marks@@V1@@stlp_std@@YAXPAVmotion_marks@@00ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<motion_marks *,motion_marks>
	mov	DWORD PTR [edi+4], esi

; 604  :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 8
	ret	0
$LN2@resize@11:

; 602  :     else
; 603  :       insert(end(), __new_size - size(), __x);

	sub	esi, edx
	je	SHORT $LN33@resize@11
	mov	edx, DWORD PTR [edi+8]
	sub	edx, ecx
	sar	edx, 4
	cmp	edx, esi
	jb	SHORT $LN29@resize@11
	lea	edx, DWORD PTR $T481344[esp+20]
	push	edx
	push	eax
	push	esi
	push	ecx
	mov	ecx, edi
	call	?_M_fill_insert_aux@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXPAVmotion_marks@@IABV4@ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_fill_insert_aux

; 604  :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 8
	ret	0

; 602  :     else
; 603  :       insert(end(), __new_size - size(), __x);

$LN29@resize@11:
	push	esi
	push	ecx
	call	?_M_insert_overflow_aux@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@AAEXPAVmotion_marks@@ABV4@ABU__false_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::_M_insert_overflow_aux
$LN33@resize@11:

; 604  :   }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 8
	ret	0
?resize@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEXIABVmotion_marks@@@Z ENDP ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::resize
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_map.h
_TEXT	ENDS
;	COMDAT ??4?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
??4?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAEAAV01@ABV01@@Z PROC ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::operator=, COMDAT
; _this$ = eax
; ___x$ = ebx

; 151  :   _Self& operator=(const _Self& __x) {

	push	esi
	mov	esi, eax

; 152  :     _M_t = __x._M_t;

	call	??4?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::operator=

; 153  :     return *this;

	mov	eax, esi
	pop	esi

; 154  :   }

	ret	0
??4?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAEAAV01@ABV01@@Z ENDP ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::operator=
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ??0?$vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@stlp_std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@stlp_std@@QAE@ABV01@@Z PROC ; stlp_std::vector<CMotionDef,xalloc<CMotionDef> >::vector<CMotionDef,xalloc<CMotionDef> >, COMDAT
; _this$ = eax
; ___x$ = ebx

; 123  :   vector(const _Self& __x)

	push	esi
	mov	esi, eax
	call	??0?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_Impl_vector<CMotionDef,xalloc<CMotionDef> >
	mov	eax, esi
	pop	esi
	ret	0
??0?$vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@stlp_std@@QAE@ABV01@@Z ENDP ; stlp_std::vector<CMotionDef,xalloc<CMotionDef> >::vector<CMotionDef,xalloc<CMotionDef> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xr_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xr_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@@QAE@XZ PROC ; xr_vector<CMotionDef,xalloc<CMotionDef> >::xr_vector<CMotionDef,xalloc<CMotionDef> >, COMDAT
; _this$ = eax

; 123  : 			xr_vector			()									: inherited	()					{}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$xr_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@@QAE@XZ ENDP ; xr_vector<CMotionDef,xalloc<CMotionDef> >::xr_vector<CMotionDef,xalloc<CMotionDef> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?resize@?$vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@stlp_std@@QAEXIABVmotion_marks@@@Z
_TEXT	SEGMENT
?resize@?$vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@stlp_std@@QAEXIABVmotion_marks@@@Z PROC ; stlp_std::vector<motion_marks,xalloc<motion_marks> >::resize, COMDAT
; _this$ = edx
; ___new_size$ = ecx
; ___x$ = eax

; 217  :   { _M_impl.resize(__new_size, cast_traits::to_storage_type_cref(__x)); }

	push	ecx
	call	?resize@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEXIABVmotion_marks@@@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::resize
	pop	ecx
	ret	0
?resize@?$vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@stlp_std@@QAEXIABVmotion_marks@@@Z ENDP ; stlp_std::vector<motion_marks,xalloc<motion_marks> >::resize
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@stlp_std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
??4?$vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@stlp_std@@QAEAAV01@ABV01@@Z PROC ; stlp_std::vector<motion_marks,xalloc<motion_marks> >::operator=, COMDAT
; _this$ = ecx
; ___x$ = eax

; 149  :   _Self& operator=(const _Self& __x) { _M_impl = __x._M_impl; return *this; }

	push	esi
	mov	esi, ecx
	call	??4?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::operator=
	mov	eax, esi
	pop	esi
	ret	0
??4?$vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@stlp_std@@QAEAAV01@ABV01@@Z ENDP ; stlp_std::vector<motion_marks,xalloc<motion_marks> >::operator=
_TEXT	ENDS
PUBLIC	?Load@CMotionDef@@QAEXPAVIReader@@IG@Z		; CMotionDef::Load
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\skeletonmotions.cpp
;	COMDAT ?Load@CMotionDef@@QAEXPAVIReader@@IG@Z
_TEXT	SEGMENT
tv314 = -20						; size = 4
$T481416 = -16						; size = 16
_MP$ = 8						; size = 4
_fl$ = 12						; size = 4
_version$ = 16						; size = 2
?Load@CMotionDef@@QAEXPAVIReader@@IG@Z PROC		; CMotionDef::Load, COMDAT
; _this$ = ecx

; 325  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi

; 326  : 	// params
; 327  : 	bone_or_part= MP->r_u16(); // bCycle?part_id:bone_id;

	mov	edi, DWORD PTR _MP$[ebp]
	mov	esi, ecx
	mov	ecx, edi
	call	DWORD PTR __imp_?r_u16@?$IReaderBase@VIReader@@@@QAEGXZ

; 328  : 	motion		= MP->r_u16(); // motion_id

	mov	ecx, edi
	mov	WORD PTR [esi], ax
	call	DWORD PTR __imp_?r_u16@?$IReaderBase@VIReader@@@@QAEGXZ

; 329  : 	speed		= Quantize(MP->r_float());

	mov	ecx, edi
	mov	WORD PTR [esi+2], ax
	call	DWORD PTR __imp_?r_float@?$IReaderBase@VIReader@@@@QAEMXZ
	push	ecx
	mov	ecx, esi
	fstp	DWORD PTR [esp]
	call	?Quantize@CMotionDef@@QBEGM@Z		; CMotionDef::Quantize

; 330  : 	power		= Quantize(MP->r_float());

	mov	ecx, edi
	mov	WORD PTR [esi+4], ax
	call	DWORD PTR __imp_?r_float@?$IReaderBase@VIReader@@@@QAEMXZ
	push	ecx
	mov	ecx, esi
	fstp	DWORD PTR [esp]
	call	?Quantize@CMotionDef@@QBEGM@Z		; CMotionDef::Quantize

; 331  : 	accrue		= Quantize(MP->r_float());

	mov	ecx, edi
	mov	WORD PTR [esi+6], ax
	call	DWORD PTR __imp_?r_float@?$IReaderBase@VIReader@@@@QAEMXZ
	push	ecx
	mov	ecx, esi
	fstp	DWORD PTR [esp]
	call	?Quantize@CMotionDef@@QBEGM@Z		; CMotionDef::Quantize

; 332  : 	falloff		= Quantize(MP->r_float());

	mov	ecx, edi
	mov	WORD PTR [esi+8], ax
	call	DWORD PTR __imp_?r_float@?$IReaderBase@VIReader@@@@QAEMXZ
	push	ecx
	mov	ecx, esi
	fstp	DWORD PTR [esp]
	call	?Quantize@CMotionDef@@QBEGM@Z		; CMotionDef::Quantize

; 333  : 	flags		= (u16)fl;

	mov	ecx, DWORD PTR _fl$[ebp]

; 334  : 	if (!(flags&esmFX) && (falloff>=accrue)) falloff = u16(accrue-1);

	test	cl, 1
	mov	WORD PTR [esi+10], ax
	mov	WORD PTR [esi+12], cx
	jne	SHORT $LN6@Load@9
	movzx	ecx, WORD PTR [esi+8]
	cmp	ax, cx
	jb	SHORT $LN6@Load@9
	add	ecx, -1
	mov	WORD PTR [esi+10], cx
$LN6@Load@9:

; 335  : 
; 336  : 	if(version>=4)

	cmp	WORD PTR _version$[ebp], 4
	jb	SHORT $LN1@Load@9

; 337  : 	{
; 338  : 		u32	cnt				= MP->r_u32();

	mov	ecx, edi
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ
	mov	ebx, eax

; 339  :         if(cnt>0)

	xor	eax, eax
	cmp	ebx, eax
	jbe	SHORT $LN1@Load@9

; 340  :         {
; 341  :             marks.resize		(cnt);

	mov	DWORD PTR $T481416[esp+32], eax
	mov	DWORD PTR $T481416[esp+36], eax
	mov	DWORD PTR $T481416[esp+40], eax
	mov	DWORD PTR $T481416[esp+44], eax
	lea	edx, DWORD PTR [esi+16]
	lea	eax, DWORD PTR $T481416[esp+32]
	mov	ecx, ebx
	mov	DWORD PTR tv314[esp+32], edx
	call	?resize@?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEXIABVmotion_marks@@@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::resize

; 342  : 
; 343  :             for(u32 i=0; i<cnt; ++i)

	test	ebx, ebx
	jbe	SHORT $LN1@Load@9

; 340  :         {
; 341  :             marks.resize		(cnt);

	xor	esi, esi
	npad	1
$LL3@Load@9:

; 342  : 
; 343  :             for(u32 i=0; i<cnt; ++i)

	mov	eax, DWORD PTR tv314[esp+32]
	mov	ecx, DWORD PTR [eax]

; 344  :                 marks[i].Load	(MP);

	push	edi
	add	ecx, esi
	call	?Load@motion_marks@@QAEXPAVIReader@@@Z	; motion_marks::Load
	add	esi, 16					; 00000010H
	sub	ebx, 1
	jne	SHORT $LL3@Load@9
$LN1@Load@9:

; 345  :         }
; 346  : 	}
; 347  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Load@CMotionDef@@QAEXPAVIReader@@IG@Z ENDP		; CMotionDef::Load
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$xr_map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
??4?$xr_map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@@QAEAAV0@ABV0@@Z PROC ; xr_map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::operator=, COMDAT
; _this$ = eax
; ___that$ = ebx
	push	esi
	mov	esi, eax
	call	??4?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::operator=
	mov	eax, esi
	pop	esi
	ret	0
??4?$xr_map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@@QAEAAV0@ABV0@@Z ENDP ; xr_map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$xr_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xr_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@@QAE@ABV0@@Z PROC ; xr_vector<CMotionDef,xalloc<CMotionDef> >::xr_vector<CMotionDef,xalloc<CMotionDef> >, COMDAT
; _this$ = eax
; ___that$ = ebx
	push	esi
	mov	esi, eax
	call	??0?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_Impl_vector<CMotionDef,xalloc<CMotionDef> >
	mov	eax, esi
	pop	esi
	ret	0
??0?$xr_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@@QAE@ABV0@@Z ENDP ; xr_vector<CMotionDef,xalloc<CMotionDef> >::xr_vector<CMotionDef,xalloc<CMotionDef> >
_TEXT	ENDS
PUBLIC	??0CPartDef@@QAE@ABV0@@Z			; CPartDef::CPartDef
; Function compile flags: /Ogtpy
;	COMDAT ??0CPartDef@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0CPartDef@@QAE@ABV0@@Z PROC				; CPartDef::CPartDef, COMDAT
; _this$ = ecx
	mov	edx, DWORD PTR ___that$[esp-4]
	push	esi
	push	edi
	mov	edi, ecx
	mov	DWORD PTR [edi], 0
	mov	ecx, DWORD PTR [edx]
	test	ecx, ecx
	je	SHORT $LN5@CPartDef
	add	DWORD PTR [ecx], 1
$LN5@CPartDef:
	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN8@CPartDef
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [edi]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN8@CPartDef
	mov	DWORD PTR [edi], 0
$LN8@CPartDef:
	lea	eax, DWORD PTR [edx+4]
	lea	esi, DWORD PTR [edi+4]
	mov	DWORD PTR [edi], ecx
	call	??0?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::_Impl_vector<unsigned int,xalloc<unsigned int> >
	mov	eax, edi
	pop	edi
	pop	esi
	ret	4
??0CPartDef@@QAE@ABV0@@Z ENDP				; CPartDef::CPartDef
_TEXT	ENDS
PUBLIC	??1CPartDef@@QAE@XZ				; CPartDef::~CPartDef
; Function compile flags: /Ogtpy
;	COMDAT ??1CPartDef@@QAE@XZ
_TEXT	SEGMENT
??1CPartDef@@QAE@XZ PROC				; CPartDef::~CPartDef, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN40@CPartDef@2
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN40@CPartDef@2:
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN45@CPartDef@2
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN45@CPartDef@2
	mov	DWORD PTR [esi], 0
$LN45@CPartDef@2:
	pop	esi
	ret	0
??1CPartDef@@QAE@XZ ENDP				; CPartDef::~CPartDef
_TEXT	ENDS
PUBLIC	??0CPartDef@@QAE@XZ				; CPartDef::CPartDef
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\skeletonmotions.h
;	COMDAT ??0CPartDef@@QAE@XZ
_TEXT	SEGMENT
??0CPartDef@@QAE@XZ PROC				; CPartDef::CPartDef, COMDAT
; _this$ = ecx

; 151  : 	CPartDef()			: Name(0) {};

	mov	eax, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], 0
	mov	ecx, DWORD PTR [eax]
	push	0
	call	DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	test	eax, eax
	je	SHORT $LN5@CPartDef@3
	add	DWORD PTR [eax], 1
$LN5@CPartDef@3:
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN8@CPartDef@3
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [esi]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN8@CPartDef@3
	mov	DWORD PTR [esi], 0
$LN8@CPartDef@3:
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	mov	eax, esi
	pop	esi
	ret	0
??0CPartDef@@QAE@XZ ENDP				; CPartDef::CPartDef
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$xr_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
??4?$xr_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@@QAEAAV0@ABV0@@Z PROC ; xr_vector<motion_marks,xalloc<motion_marks> >::operator=, COMDAT
; _this$ = ecx
; ___that$ = eax
	push	esi
	mov	esi, ecx
	call	??4?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::operator=
	mov	eax, esi
	pop	esi
	ret	0
??4?$xr_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@@QAEAAV0@ABV0@@Z ENDP ; xr_vector<motion_marks,xalloc<motion_marks> >::operator=
_TEXT	ENDS
PUBLIC	??4CMotionDef@@QAEAAV0@ABV0@@Z			; CMotionDef::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4CMotionDef@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4CMotionDef@@QAEAAV0@ABV0@@Z PROC			; CMotionDef::operator=, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR ___that$[esp-4]
	push	esi
	push	edi
	mov	edi, ecx
	movzx	ecx, WORD PTR [eax]
	mov	WORD PTR [edi], cx
	movzx	edx, WORD PTR [eax+2]
	mov	WORD PTR [edi+2], dx
	movzx	ecx, WORD PTR [eax+4]
	mov	WORD PTR [edi+4], cx
	movzx	edx, WORD PTR [eax+6]
	mov	WORD PTR [edi+6], dx
	movzx	ecx, WORD PTR [eax+8]
	mov	WORD PTR [edi+8], cx
	movzx	edx, WORD PTR [eax+10]
	mov	WORD PTR [edi+10], dx
	movzx	ecx, WORD PTR [eax+12]
	add	eax, 16					; 00000010H
	lea	esi, DWORD PTR [edi+16]
	mov	WORD PTR [edi+12], cx
	call	??4?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::operator=
	mov	eax, edi
	pop	edi
	pop	esi
	ret	4
??4CMotionDef@@QAEAAV0@ABV0@@Z ENDP			; CMotionDef::operator=
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_uninitialized.h
;	COMDAT ??$__ucopy_aux@PBVCMotionDef@@PAV1@@priv@stlp_std@@YAPAVCMotionDef@@PBV2@0PAV2@ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__ucopy_aux@PBVCMotionDef@@PAV1@@priv@stlp_std@@YAPAVCMotionDef@@PBV2@0PAV2@ABU__true_type@1@@Z PROC ; stlp_std::priv::__ucopy_aux<CMotionDef const *,CMotionDef *>, COMDAT
; ___first$ = ecx
; ___last$ = eax
; ___result$ = edx

; 126  :   return __ucopy_ptrs(__first, __last, __result,
; 127  :                       _UseTrivialUCopy(_STLP_VALUE_TYPE(__first, _InputIter),
; 128  :                                        _STLP_VALUE_TYPE(__result, _OutputIter))._Answer());

	jmp	??$__ucopy@PBVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<CMotionDef const *,CMotionDef *,int>
??$__ucopy_aux@PBVCMotionDef@@PAV1@@priv@stlp_std@@YAPAVCMotionDef@@PBV2@0PAV2@ABU__true_type@1@@Z ENDP ; stlp_std::priv::__ucopy_aux<CMotionDef const *,CMotionDef *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__copy_backward@PAVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
??$__copy_backward@PAVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z PROC ; stlp_std::priv::__copy_backward<CMotionDef *,CMotionDef *,int>, COMDAT
; ___last$ = ecx
; ___result$ = eax

; 235  :                                           _Distance*) {

	push	ebx
	push	ebp
	push	edi
	mov	ebx, eax
	mov	edi, ecx

; 236  :   for (_Distance __n = __last - __first; __n > 0; --__n)

	sub	ecx, DWORD PTR ___first$[esp+8]
	mov	eax, -1840700269			; 92492493H
	imul	ecx
	add	edx, ecx
	sar	edx, 4
	mov	ebp, edx
	shr	ebp, 31					; 0000001fH
	add	ebp, edx
	test	ebp, ebp
	jle	SHORT $LN14@copy_backw@37
	push	esi
$LL3@copy_backw@37:

; 237  :     *--__result = *--__last;

	movzx	eax, WORD PTR [edi-28]
	sub	edi, 28					; 0000001cH
	sub	ebx, 28					; 0000001cH
	mov	WORD PTR [ebx], ax
	movzx	ecx, WORD PTR [edi+2]
	mov	WORD PTR [ebx+2], cx
	movzx	edx, WORD PTR [edi+4]
	mov	WORD PTR [ebx+4], dx
	movzx	eax, WORD PTR [edi+6]
	mov	WORD PTR [ebx+6], ax
	movzx	ecx, WORD PTR [edi+8]
	mov	WORD PTR [ebx+8], cx
	movzx	edx, WORD PTR [edi+10]
	mov	WORD PTR [ebx+10], dx
	movzx	eax, WORD PTR [edi+12]
	mov	WORD PTR [ebx+12], ax
	lea	eax, DWORD PTR [edi+16]
	lea	esi, DWORD PTR [ebx+16]
	call	??4?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::operator=
	sub	ebp, 1
	test	ebp, ebp
	jg	SHORT $LL3@copy_backw@37
	pop	esi
$LN14@copy_backw@37:
	pop	edi
	pop	ebp

; 238  :   return __result;

	mov	eax, ebx
	pop	ebx

; 239  : }

	ret	0
??$__copy_backward@PAVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ENDP ; stlp_std::priv::__copy_backward<CMotionDef *,CMotionDef *,int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_uninitialized.h
_TEXT	ENDS
;	COMDAT ??$__ucopy@PAVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z
_TEXT	SEGMENT
??$__ucopy@PAVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z PROC ; stlp_std::priv::__ucopy<CMotionDef *,CMotionDef *,int>, COMDAT
; ___first$ = ecx
; ___last$ = eax
; ___result$ = edx

; 83   :                            _OutputIter __result, const random_access_iterator_tag &, _Distance*) {

	push	ebx
	mov	ebx, ecx

; 84   :   _OutputIter __cur = __result;
; 85   :   _STLP_TRY {
; 86   :     for (_Distance __n = __last - __first; __n > 0; --__n) {

	sub	eax, ebx
	push	esi
	mov	ecx, eax
	push	edi
	mov	edi, edx
	mov	eax, -1840700269			; 92492493H
	imul	ecx
	add	edx, ecx
	sar	edx, 4
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
	test	esi, esi
	jle	SHORT $LN14@ucopy@28
$LL3@ucopy@28:

; 87   :       _Param_Construct(&*__cur, *__first);

	test	edi, edi
	je	SHORT $LN8@ucopy@28
	push	ebx
	mov	ecx, edi
	call	??0CMotionDef@@QAE@ABV0@@Z
$LN8@ucopy@28:
	sub	esi, 1

; 88   :       ++__first;

	add	ebx, 28					; 0000001cH

; 89   :       ++__cur;

	add	edi, 28					; 0000001cH
	test	esi, esi
	jg	SHORT $LL3@ucopy@28
$LN14@ucopy@28:

; 90   :     }
; 91   :     return __cur;

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx

; 92   :   }
; 93   :   _STLP_UNWIND(_STLP_STD::_Destroy_Range(__result, __cur))
; 94   :   _STLP_RET_AFTER_THROW(__cur)
; 95   : }

	ret	0
??$__ucopy@PAVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ENDP ; stlp_std::priv::__ucopy<CMotionDef *,CMotionDef *,int>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__ufill@PAVCMotionDef@@V1@H@priv@stlp_std@@YAXPAVCMotionDef@@0ABV2@ABUrandom_access_iterator_tag@1@PAH@Z
_TEXT	SEGMENT
??$__ufill@PAVCMotionDef@@V1@H@priv@stlp_std@@YAXPAVCMotionDef@@0ABV2@ABUrandom_access_iterator_tag@1@PAH@Z PROC ; stlp_std::priv::__ufill<CMotionDef *,CMotionDef,int>, COMDAT
; ___first$ = ecx
; ___last$ = eax
; ___x$ = ebx

; 246  :                     const _Tp& __x, const random_access_iterator_tag &, _Distance*) {

	push	esi
	push	edi
	mov	edi, ecx

; 247  :   _ForwardIter __cur = __first;
; 248  :   _STLP_TRY {
; 249  :     for (_Distance __n = __last - __first; __n > 0; --__n, ++__cur)

	sub	eax, edi
	mov	ecx, eax
	mov	eax, -1840700269			; 92492493H
	imul	ecx
	add	edx, ecx
	sar	edx, 4
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
	test	esi, esi
	jle	SHORT $LN1@ufill@19
	npad	1
$LL3@ufill@19:

; 250  :       _Param_Construct(&*__cur, __x);

	test	edi, edi
	je	SHORT $LN2@ufill@19
	push	ebx
	mov	ecx, edi
	call	??0CMotionDef@@QAE@ABV0@@Z
$LN2@ufill@19:
	sub	esi, 1
	add	edi, 28					; 0000001cH
	test	esi, esi
	jg	SHORT $LL3@ufill@19
$LN1@ufill@19:
	pop	edi
	pop	esi

; 251  :   }
; 252  :   _STLP_UNWIND(_STLP_STD::_Destroy_Range(__first, __cur))
; 253  : }

	ret	0
??$__ufill@PAVCMotionDef@@V1@H@priv@stlp_std@@YAXPAVCMotionDef@@0ABV2@ABUrandom_access_iterator_tag@1@PAH@Z ENDP ; stlp_std::priv::__ufill<CMotionDef *,CMotionDef,int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.c
_TEXT	ENDS
;	COMDAT ?insert_unique@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@_N@3@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
?insert_unique@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@_N@3@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::insert_unique, COMDAT
; ___val$ = eax

; 405  : _Rb_tree<_Key,_Compare,_Value,_KeyOfValue,_Traits,_Alloc> ::insert_unique(const _Value& __val) {

	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _this$[esp+4]

; 406  :   _Base_ptr __y = &this->_M_header._M_data;
; 407  :   _Base_ptr __x = _M_root();

	mov	ebx, DWORD PTR [ebp+4]

; 408  :   bool __comp = true;
; 409  :   while (__x != 0) {

	test	ebx, ebx
	push	esi
	push	edi
	mov	edi, eax
	mov	esi, ebp
	mov	cl, 1
	je	SHORT $LN5@insert_uni@10
	mov	eax, DWORD PTR [edi]
$LL6@insert_uni@10:

; 410  :     __y = __x;
; 411  :     __comp = _M_key_compare(_KeyOfValue()(__val), _S_key(__x));

	cmp	eax, DWORD PTR [ebx+16]
	mov	esi, ebx
	setb	cl

; 412  :     __x = __comp ? _S_left(__x) : _S_right(__x);

	test	cl, cl
	je	SHORT $LN9@insert_uni@10
	mov	ebx, DWORD PTR [ebx+8]
	jmp	SHORT $LN10@insert_uni@10
$LN9@insert_uni@10:
	mov	ebx, DWORD PTR [ebx+12]
$LN10@insert_uni@10:

; 408  :   bool __comp = true;
; 409  :   while (__x != 0) {

	test	ebx, ebx
	jne	SHORT $LL6@insert_uni@10
$LN5@insert_uni@10:

; 413  :   }
; 414  :   iterator __j = iterator(__y);
; 415  :   if (__comp) {

	test	cl, cl
	mov	eax, esi
	je	$LN106@insert_uni@10

; 416  :     if (__j == begin())

	cmp	esi, DWORD PTR [ebp+8]
	jne	SHORT $LN3@insert_uni@10

; 417  :       return pair<iterator,bool>(_M_insert(__y, __val, /* __x*/ __y), true);

	cmp	esi, ebp
	jne	SHORT $LN57@insert_uni@10
	mov	eax, edi
	call	?_M_create_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_create_node
	mov	ebx, eax
	mov	DWORD PTR [esi+8], ebx
	mov	DWORD PTR [ebp+4], ebx
	mov	DWORD PTR [ebp+12], ebx
	jmp	SHORT $LN53@insert_uni@10
$LN57@insert_uni@10:
	test	esi, esi
	jne	SHORT $LN54@insert_uni@10
	mov	eax, DWORD PTR [edi]
	cmp	eax, DWORD PTR ds:16
	jb	SHORT $LN54@insert_uni@10
	mov	eax, edi
	call	?_M_create_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_create_node
	mov	ebx, eax
	mov	DWORD PTR ds:12, ebx
	cmp	DWORD PTR [ebp+12], esi
	jne	SHORT $LN53@insert_uni@10
	mov	DWORD PTR [ebp+12], ebx
	jmp	SHORT $LN53@insert_uni@10
$LN54@insert_uni@10:
	mov	eax, edi
	call	?_M_create_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_create_node
	mov	ebx, eax
	mov	DWORD PTR [esi+8], ebx
	cmp	esi, DWORD PTR [ebp+8]
	jne	SHORT $LN53@insert_uni@10
	mov	DWORD PTR [ebp+8], ebx
$LN53@insert_uni@10:
	lea	edi, DWORD PTR [ebp+4]
	mov	eax, ebx
	mov	DWORD PTR [ebx+4], esi
	call	?_Rebalance@?$_Rb_global@_N@priv@stlp_std@@SAXPAU_Rb_tree_node_base@23@AAPAU423@@Z ; stlp_std::priv::_Rb_global<bool>::_Rebalance
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+12]
	add	DWORD PTR [ebp+16], 1
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR [eax], ebx
	mov	BYTE PTR [eax+4], 1
	pop	ebx

; 425  : }

	ret	8
$LN3@insert_uni@10:

; 418  :     else
; 419  :       --__j;

	push	esi
	call	?_M_decrement@?$_Rb_global@_N@priv@stlp_std@@SAPAU_Rb_tree_node_base@23@PAU423@@Z ; stlp_std::priv::_Rb_global<bool>::_M_decrement
	add	esp, 4
$LN106@insert_uni@10:

; 420  :   }
; 421  :   if (_M_key_compare(_S_key(__j._M_node), _KeyOfValue()(__val))) {

	mov	ecx, DWORD PTR [edi]
	cmp	DWORD PTR [eax+16], ecx
	jae	SHORT $LN1@insert_uni@10

; 422  :     return pair<iterator,bool>(_M_insert(__y, __val, __x), true);

	cmp	esi, ebp
	jne	SHORT $LN130@insert_uni@10
	mov	eax, edi
	call	?_M_create_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_create_node
	mov	ebx, eax
	mov	DWORD PTR [esi+8], ebx
	mov	DWORD PTR [ebp+4], ebx
	mov	DWORD PTR [ebp+12], ebx
	jmp	SHORT $LN126@insert_uni@10
$LN130@insert_uni@10:
	test	ebx, ebx
	jne	SHORT $LN127@insert_uni@10
	cmp	ecx, DWORD PTR [esi+16]
	jb	SHORT $LN127@insert_uni@10
	mov	eax, edi
	call	?_M_create_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_create_node
	mov	ebx, eax
	mov	DWORD PTR [esi+12], ebx
	cmp	esi, DWORD PTR [ebp+12]
	jne	SHORT $LN126@insert_uni@10
	mov	DWORD PTR [ebp+12], ebx
	jmp	SHORT $LN126@insert_uni@10
$LN127@insert_uni@10:
	mov	eax, edi
	call	?_M_create_node@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@IAEPAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_create_node
	mov	ebx, eax
	mov	DWORD PTR [esi+8], ebx
	cmp	esi, DWORD PTR [ebp+8]
	jne	SHORT $LN126@insert_uni@10
	mov	DWORD PTR [ebp+8], ebx
$LN126@insert_uni@10:
	lea	edi, DWORD PTR [ebp+4]
	mov	eax, ebx
	mov	DWORD PTR [ebx+4], esi
	call	?_Rebalance@?$_Rb_global@_N@priv@stlp_std@@SAXPAU_Rb_tree_node_base@23@AAPAU423@@Z ; stlp_std::priv::_Rb_global<bool>::_Rebalance
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+12]
	add	DWORD PTR [ebp+16], 1
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR [eax], ebx
	mov	BYTE PTR [eax+4], 1
	pop	ebx

; 425  : }

	ret	8
$LN1@insert_uni@10:

; 423  :   }
; 424  :   return pair<iterator,bool>(__j, false);

	mov	ecx, DWORD PTR ___$ReturnUdt$[esp+12]
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR [ecx], eax
	mov	BYTE PTR [ecx+4], 0
	mov	eax, ecx
	pop	ebx

; 425  : }

	ret	8
?insert_unique@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@_N@3@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::insert_unique
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__copy@PBVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z
_TEXT	SEGMENT
??$__copy@PBVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z PROC ; stlp_std::priv::__copy<CMotionDef const *,CMotionDef *,int>, COMDAT
; ___first$ = edx
; ___last$ = eax
; ___result$ = ecx

; 200  :        _OutputIter __result, const random_access_iterator_tag &, _Distance*) {

	push	ebx
	push	ebp
	push	edi
	mov	edi, edx

; 201  :   for (_Distance __n = __last - __first; __n > 0; --__n) {

	sub	eax, edi
	mov	ebx, ecx
	mov	ecx, eax
	mov	eax, -1840700269			; 92492493H
	imul	ecx
	add	edx, ecx
	sar	edx, 4
	mov	ebp, edx
	shr	ebp, 31					; 0000001fH
	add	ebp, edx
	test	ebp, ebp
	jle	SHORT $LN14@copy@30
	push	esi
$LL3@copy@30:

; 202  :     *__result = *__first;

	movzx	eax, WORD PTR [edi]
	mov	WORD PTR [ebx], ax
	movzx	ecx, WORD PTR [edi+2]
	mov	WORD PTR [ebx+2], cx
	movzx	edx, WORD PTR [edi+4]
	mov	WORD PTR [ebx+4], dx
	movzx	eax, WORD PTR [edi+6]
	mov	WORD PTR [ebx+6], ax
	movzx	ecx, WORD PTR [edi+8]
	mov	WORD PTR [ebx+8], cx
	movzx	edx, WORD PTR [edi+10]
	mov	WORD PTR [ebx+10], dx
	movzx	eax, WORD PTR [edi+12]
	mov	WORD PTR [ebx+12], ax
	lea	eax, DWORD PTR [edi+16]
	lea	esi, DWORD PTR [ebx+16]
	call	??4?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::operator=
	sub	ebp, 1

; 203  :     ++__first;

	add	edi, 28					; 0000001cH

; 204  :     ++__result;

	add	ebx, 28					; 0000001cH
	test	ebp, ebp
	jg	SHORT $LL3@copy@30
	pop	esi
$LN14@copy@30:
	pop	edi
	pop	ebp

; 205  :   }
; 206  :   return __result;

	mov	eax, ebx
	pop	ebx

; 207  : }

	ret	0
??$__copy@PBVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ENDP ; stlp_std::priv::__copy<CMotionDef const *,CMotionDef *,int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_uninitialized.h
_TEXT	ENDS
;	COMDAT ??$uninitialized_copy@PBVCMotionDef@@PAV1@@stlp_std@@YAPAVCMotionDef@@PBV1@0PAV1@@Z
_TEXT	SEGMENT
??$uninitialized_copy@PBVCMotionDef@@PAV1@@stlp_std@@YAPAVCMotionDef@@PBV1@0PAV1@@Z PROC ; stlp_std::uninitialized_copy<CMotionDef const *,CMotionDef *>, COMDAT
; ___first$ = ecx
; ___last$ = eax
; ___result$ = edx

; 144  : { return _STLP_PRIV __ucopy_aux(__first, __last, __result, _BothPtrType< _InputIter, _ForwardIter>::_Answer()); }

	jmp	??$__ucopy@PBVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<CMotionDef const *,CMotionDef *,int>
??$uninitialized_copy@PBVCMotionDef@@PAV1@@stlp_std@@YAPAVCMotionDef@@PBV1@0PAV1@@Z ENDP ; stlp_std::uninitialized_copy<CMotionDef const *,CMotionDef *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$fill@PAVCMotionDef@@V1@@stlp_std@@YAXPAVCMotionDef@@0ABV1@@Z
_TEXT	SEGMENT
___last$ = 8						; size = 4
??$fill@PAVCMotionDef@@V1@@stlp_std@@YAXPAVCMotionDef@@0ABV1@@Z PROC ; stlp_std::fill<CMotionDef *,CMotionDef>, COMDAT
; ___first$ = eax
; ___val$ = ebx

; 392  : void fill(_ForwardIter __first, _ForwardIter __last, const _Tp& __val) {

	push	edi
	mov	edi, eax

; 393  :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__first, __last))
; 394  :   for ( ; __first != __last; ++__first)

	cmp	edi, DWORD PTR ___last$[esp]
	je	SHORT $LN1@fill@12
	push	ebp
	push	esi
	lea	ebp, DWORD PTR [ebx+16]
	npad	2
$LL3@fill@12:

; 395  :     *__first = __val;

	movzx	eax, WORD PTR [ebx]
	mov	WORD PTR [edi], ax
	movzx	ecx, WORD PTR [ebx+2]
	mov	WORD PTR [edi+2], cx
	movzx	edx, WORD PTR [ebx+4]
	mov	WORD PTR [edi+4], dx
	movzx	eax, WORD PTR [ebx+6]
	mov	WORD PTR [edi+6], ax
	movzx	ecx, WORD PTR [ebx+8]
	mov	WORD PTR [edi+8], cx
	movzx	edx, WORD PTR [ebx+10]
	mov	WORD PTR [edi+10], dx
	movzx	eax, WORD PTR [ebx+12]
	mov	WORD PTR [edi+12], ax
	lea	esi, DWORD PTR [edi+16]
	mov	eax, ebp
	call	??4?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::operator=
	add	edi, 28					; 0000001cH
	cmp	edi, DWORD PTR ___last$[esp+8]
	jne	SHORT $LL3@fill@12
	pop	esi
	pop	ebp
$LN1@fill@12:
	pop	edi

; 396  : }

	ret	0
??$fill@PAVCMotionDef@@V1@@stlp_std@@YAXPAVCMotionDef@@0ABV1@@Z ENDP ; stlp_std::fill<CMotionDef *,CMotionDef>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__copy_backward_ptrs@PAVCMotionDef@@PAV1@@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABU__false_type@1@@Z
_TEXT	SEGMENT
___result$ = 8						; size = 4
??$__copy_backward_ptrs@PAVCMotionDef@@PAV1@@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABU__false_type@1@@Z PROC ; stlp_std::priv::__copy_backward_ptrs<CMotionDef *,CMotionDef *>, COMDAT
; ___first$ = eax
; ___last$ = ecx

; 289  :   return __copy_backward(__first, __last, __result, _STLP_ITERATOR_CATEGORY(__first, _InputIter), _STLP_DISTANCE_TYPE(__first, _InputIter));

	push	eax
	mov	eax, DWORD PTR ___result$[esp]
	call	??$__copy_backward@PAVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__copy_backward<CMotionDef *,CMotionDef *,int>
	add	esp, 4

; 290  : }

	ret	0
??$__copy_backward_ptrs@PAVCMotionDef@@PAV1@@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABU__false_type@1@@Z ENDP ; stlp_std::priv::__copy_backward_ptrs<CMotionDef *,CMotionDef *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_uninitialized.h
_TEXT	ENDS
;	COMDAT ??$__ucopy_ptrs@PAVCMotionDef@@PAV1@@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABU__false_type@1@@Z
_TEXT	SEGMENT
??$__ucopy_ptrs@PAVCMotionDef@@PAV1@@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABU__false_type@1@@Z PROC ; stlp_std::priv::__ucopy_ptrs<CMotionDef *,CMotionDef *>, COMDAT
; ___first$ = ecx
; ___last$ = eax
; ___result$ = edx

; 113  : { return __ucopy(__first, __last, __result, random_access_iterator_tag(), (ptrdiff_t*)0); }

	jmp	??$__ucopy@PAVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<CMotionDef *,CMotionDef *,int>
??$__ucopy_ptrs@PAVCMotionDef@@PAV1@@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABU__false_type@1@@Z ENDP ; stlp_std::priv::__ucopy_ptrs<CMotionDef *,CMotionDef *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__uninitialized_fill_n@PAVCMotionDef@@IV1@@priv@stlp_std@@YAPAVCMotionDef@@PAV2@IABV2@@Z
_TEXT	SEGMENT
___x$ = 8						; size = 4
??$__uninitialized_fill_n@PAVCMotionDef@@IV1@@priv@stlp_std@@YAPAVCMotionDef@@PAV2@IABV2@@Z PROC ; stlp_std::priv::__uninitialized_fill_n<CMotionDef *,unsigned int,CMotionDef>, COMDAT
; ___first$ = eax
; ___n$ = ecx

; 313  : inline _ForwardIter __uninitialized_fill_n(_ForwardIter __first, _Size __n, const _Tp& __x) {

	push	ebx

; 314  :   _ForwardIter __last = __first + __n;

	lea	edx, DWORD PTR [ecx*8]
	sub	edx, ecx
	lea	ebx, DWORD PTR [eax+edx*4]
	push	ebp
	mov	ebp, DWORD PTR ___x$[esp+4]
	push	esi

; 315  :   __ufill(__first, __last, __x, random_access_iterator_tag(), (ptrdiff_t*)0);

	mov	ecx, ebx
	sub	ecx, eax
	push	edi
	mov	edi, eax
	mov	eax, -1840700269			; 92492493H
	imul	ecx
	add	edx, ecx
	sar	edx, 4
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
	test	esi, esi
	jle	SHORT $LN16@uninitiali@38
$LL5@uninitiali@38:
	test	edi, edi
	je	SHORT $LN4@uninitiali@38
	push	ebp
	mov	ecx, edi
	call	??0CMotionDef@@QAE@ABV0@@Z
$LN4@uninitiali@38:
	sub	esi, 1
	add	edi, 28					; 0000001cH
	test	esi, esi
	jg	SHORT $LL5@uninitiali@38
$LN16@uninitiali@38:
	pop	edi
	pop	esi
	pop	ebp

; 316  :   return __last;

	mov	eax, ebx
	pop	ebx

; 317  : }

	ret	0
??$__uninitialized_fill_n@PAVCMotionDef@@IV1@@priv@stlp_std@@YAPAVCMotionDef@@PAV2@IABV2@@Z ENDP ; stlp_std::priv::__uninitialized_fill_n<CMotionDef *,unsigned int,CMotionDef>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__uninitialized_move@PAVCMotionDef@@PAV1@U__false_type@stlp_std@@@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00U__false_type@1@ABU31@@Z
_TEXT	SEGMENT
___trivial_ucpy$ = 8					; size = 1
??$__uninitialized_move@PAVCMotionDef@@PAV1@U__false_type@stlp_std@@@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00U__false_type@1@ABU31@@Z PROC ; stlp_std::priv::__uninitialized_move<CMotionDef *,CMotionDef *,stlp_std::__false_type>, COMDAT
; ___first$ = ecx
; ___last$ = eax
; ___result$ = edx

; 414  : { return __ucopy_ptrs(__first, __last, __result, __trivial_ucpy); }

	jmp	??$__ucopy@PAVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<CMotionDef *,CMotionDef *,int>
??$__uninitialized_move@PAVCMotionDef@@PAV1@U__false_type@stlp_std@@@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00U__false_type@1@ABU31@@Z ENDP ; stlp_std::priv::__uninitialized_move<CMotionDef *,CMotionDef *,stlp_std::__false_type>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__copy@PAVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z
_TEXT	SEGMENT
??$__copy@PAVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z PROC ; stlp_std::priv::__copy<CMotionDef *,CMotionDef *,int>, COMDAT
; ___first$ = edx
; ___last$ = eax
; ___result$ = ecx

; 200  :        _OutputIter __result, const random_access_iterator_tag &, _Distance*) {

	push	ebx
	push	ebp
	push	edi
	mov	edi, edx

; 201  :   for (_Distance __n = __last - __first; __n > 0; --__n) {

	sub	eax, edi
	mov	ebx, ecx
	mov	ecx, eax
	mov	eax, -1840700269			; 92492493H
	imul	ecx
	add	edx, ecx
	sar	edx, 4
	mov	ebp, edx
	shr	ebp, 31					; 0000001fH
	add	ebp, edx
	test	ebp, ebp
	jle	SHORT $LN14@copy@31
	push	esi
$LL3@copy@31:

; 202  :     *__result = *__first;

	movzx	eax, WORD PTR [edi]
	mov	WORD PTR [ebx], ax
	movzx	ecx, WORD PTR [edi+2]
	mov	WORD PTR [ebx+2], cx
	movzx	edx, WORD PTR [edi+4]
	mov	WORD PTR [ebx+4], dx
	movzx	eax, WORD PTR [edi+6]
	mov	WORD PTR [ebx+6], ax
	movzx	ecx, WORD PTR [edi+8]
	mov	WORD PTR [ebx+8], cx
	movzx	edx, WORD PTR [edi+10]
	mov	WORD PTR [ebx+10], dx
	movzx	eax, WORD PTR [edi+12]
	mov	WORD PTR [ebx+12], ax
	lea	eax, DWORD PTR [edi+16]
	lea	esi, DWORD PTR [ebx+16]
	call	??4?$_Impl_vector@Vmotion_marks@@V?$xalloc@Vmotion_marks@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<motion_marks,xalloc<motion_marks> >::operator=
	sub	ebp, 1

; 203  :     ++__first;

	add	edi, 28					; 0000001cH

; 204  :     ++__result;

	add	ebx, 28					; 0000001cH
	test	ebp, ebp
	jg	SHORT $LL3@copy@31
	pop	esi
$LN14@copy@31:
	pop	edi
	pop	ebp

; 205  :   }
; 206  :   return __result;

	mov	eax, ebx
	pop	ebx

; 207  : }

	ret	0
??$__copy@PAVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ENDP ; stlp_std::priv::__copy<CMotionDef *,CMotionDef *,int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_tree.c
_TEXT	ENDS
;	COMDAT ?insert_unique@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@23@U423@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@@Z
_TEXT	SEGMENT
$T516454 = -12						; size = 8
$T516443 = -12						; size = 8
___comp_v_pos$133411 = 8				; size = 1
___after$133391 = 8					; size = 4
_this$ = 8						; size = 4
___after$133420 = 12					; size = 4
___position$ = 12					; size = 4
?insert_unique@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@23@U423@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@@Z PROC ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::insert_unique, COMDAT
; ___$ReturnUdt$ = esi
; ___val$ = eax

; 433  :                                                                           const _Value& __val) {

	sub	esp, 16					; 00000010H
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _this$[esp+20]
	push	edi

; 434  :   if (__position._M_node == this->_M_header._M_data._M_left) { // begin()

	mov	edi, DWORD PTR ___position$[esp+24]
	cmp	edi, DWORD PTR [ebp+8]
	mov	ebx, eax
	jne	$LN27@insert_uni@11

; 435  : 
; 436  :     // if the container is empty, fall back on insert_unique.
; 437  :     if (empty())

	cmp	DWORD PTR [ebp+16], 0
	jne	SHORT $LN26@insert_uni@11
$LN15@insert_uni@11:

; 438  :       return insert_unique(__val).first;

	lea	eax, DWORD PTR $T516443[esp+28]
	push	eax
	push	ebp
	mov	eax, ebx
	call	?insert_unique@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@_N@3@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::insert_unique
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [esi], ecx

; 529  :         else
; 530  :           return insert_unique(__val).first;

	mov	eax, esi

; 531  :       }
; 532  :     }
; 533  :   }
; 534  : }

	pop	edi
	pop	ebp
	pop	ebx
	add	esp, 16					; 00000010H
	ret	8
$LN26@insert_uni@11:

; 439  : 
; 440  :     if (_M_key_compare(_KeyOfValue()(__val), _S_key(__position._M_node))) {

	mov	eax, DWORD PTR [edi+16]
	mov	ecx, DWORD PTR [ebx]
	cmp	eax, ecx
	jbe	SHORT $LN211@insert_uni@11

; 441  :       return _M_insert(__position._M_node, __val, __position._M_node);

	push	0
	push	edi
	mov	eax, ebx
	push	esi
	mov	ecx, edi
	mov	ebx, ebp
	call	?_M_insert@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@AAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@23@PAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@00@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_insert

; 529  :         else
; 530  :           return insert_unique(__val).first;

	mov	eax, esi

; 531  :       }
; 532  :     }
; 533  :   }
; 534  : }

	pop	edi
	pop	ebp
	pop	ebx
	add	esp, 16					; 00000010H
	ret	8
$LN211@insert_uni@11:

; 442  :     }
; 443  :     // first argument just needs to be non-null
; 444  :     else {
; 445  :       bool __comp_pos_v = _M_key_compare( _S_key(__position._M_node), _KeyOfValue()(__val) );
; 446  : 
; 447  :       if (__comp_pos_v == false)  // compare > and compare < both false so compare equal

	jb	SHORT $LN23@insert_uni@11
$LN208@insert_uni@11:

; 448  :         return __position;

	mov	DWORD PTR [esi], edi

; 529  :         else
; 530  :           return insert_unique(__val).first;

	mov	eax, esi

; 531  :       }
; 532  :     }
; 533  :   }
; 534  : }

	pop	edi
	pop	ebp
	pop	ebx
	add	esp, 16					; 00000010H
	ret	8
$LN23@insert_uni@11:

; 449  :       //Below __comp_pos_v == true
; 450  : 
; 451  :       // Standard-conformance - does the insertion point fall immediately AFTER
; 452  :       // the hint?
; 453  :       iterator __after = __position;
; 454  :       ++__after;

	lea	eax, DWORD PTR ___after$133391[esp+24]
	mov	DWORD PTR ___after$133391[esp+24], edi
	call	??E?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QAEAAU012@XZ ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::operator++

; 455  : 
; 456  :       // Check for only one member -- in that case, __position points to itself,
; 457  :       // and attempting to increment will cause an infinite loop.
; 458  :       if (__after._M_node == &this->_M_header._M_data)

	mov	ecx, DWORD PTR ___after$133391[esp+24]
	cmp	ecx, ebp
	jne	SHORT $LN22@insert_uni@11

; 459  :         // Check guarantees exactly one member, so comparison was already
; 460  :         // performed and we know the result; skip repeating it in _M_insert
; 461  :         // by specifying a non-zero fourth argument.
; 462  :         return _M_insert(__position._M_node, __val, 0, __position._M_node);

	push	edi
	push	0
	mov	eax, ebx
	push	esi
	mov	ecx, edi
	mov	ebx, ebp
	call	?_M_insert@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@AAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@23@PAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@00@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_insert

; 529  :         else
; 530  :           return insert_unique(__val).first;

	mov	eax, esi

; 531  :       }
; 532  :     }
; 533  :   }
; 534  : }

	pop	edi
	pop	ebp
	pop	ebx
	add	esp, 16					; 00000010H
	ret	8
$LN22@insert_uni@11:

; 463  : 
; 464  :       // All other cases:
; 465  : 
; 466  :       // Optimization to catch insert-equivalent -- save comparison results,
; 467  :       // and we get this for free.
; 468  :       if (_M_key_compare( _KeyOfValue()(__val), _S_key(__after._M_node) )) {

	mov	eax, DWORD PTR [ebx]
	cmp	eax, DWORD PTR [ecx+16]
	jae	$LN2@insert_uni@11
$LN6@insert_uni@11:

; 469  :         if (_S_right(__position._M_node) == 0)

	cmp	DWORD PTR [edi+12], 0

; 470  :           return _M_insert(__position._M_node, __val, 0, __position._M_node);

	mov	eax, ebx
	mov	ebx, ebp
	jne	SHORT $LN20@insert_uni@11
	push	edi
	push	0
	push	esi
	mov	ecx, edi
	call	?_M_insert@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@AAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@23@PAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@00@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_insert

; 529  :         else
; 530  :           return insert_unique(__val).first;

	mov	eax, esi

; 531  :       }
; 532  :     }
; 533  :   }
; 534  : }

	pop	edi
	pop	ebp
	pop	ebx
	add	esp, 16					; 00000010H
	ret	8
$LN20@insert_uni@11:

; 471  :         else
; 472  :           return _M_insert(__after._M_node, __val, __after._M_node);

	push	0
	push	ecx
	push	esi
	call	?_M_insert@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@AAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@23@PAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@00@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_insert

; 529  :         else
; 530  :           return insert_unique(__val).first;

	mov	eax, esi

; 531  :       }
; 532  :     }
; 533  :   }
; 534  : }

	pop	edi
	pop	ebp
	pop	ebx
	add	esp, 16					; 00000010H
	ret	8
$LN27@insert_uni@11:

; 473  :       }
; 474  :       else {
; 475  :         return insert_unique(__val).first;
; 476  :       }
; 477  :     }
; 478  :   }
; 479  :   else if (__position._M_node == &this->_M_header._M_data) { // end()

	cmp	edi, ebp
	jne	SHORT $LN16@insert_uni@11

; 480  :     if (_M_key_compare(_S_key(_M_rightmost()), _KeyOfValue()(__val))) {

	mov	ecx, DWORD PTR [ebp+12]
	mov	edx, DWORD PTR [ecx+16]
	cmp	edx, DWORD PTR [ebx]
	jae	$LN15@insert_uni@11

; 481  :         // pass along to _M_insert that it can skip comparing
; 482  :         // v, Key ; since compare Key, v was true, compare v, Key must be false.
; 483  :         return _M_insert(_M_rightmost(), __val, 0, __position._M_node); // Last argument only needs to be non-null

	push	edi
	push	0
	push	esi
	mov	ebx, ebp
	call	?_M_insert@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@AAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@23@PAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@00@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_insert

; 529  :         else
; 530  :           return insert_unique(__val).first;

	mov	eax, esi

; 531  :       }
; 532  :     }
; 533  :   }
; 534  : }

	pop	edi
	pop	ebp
	pop	ebx
	add	esp, 16					; 00000010H
	ret	8
$LN16@insert_uni@11:

; 484  :     }
; 485  :     else
; 486  :       return insert_unique(__val).first;
; 487  :   }
; 488  :   else {
; 489  :     iterator __before = __position;
; 490  :     --__before;

	push	edi
	call	?_M_decrement@?$_Rb_global@_N@priv@stlp_std@@SAPAU_Rb_tree_node_base@23@PAU423@@Z ; stlp_std::priv::_Rb_global<bool>::_M_decrement

; 491  : 
; 492  :     bool __comp_v_pos = _M_key_compare(_KeyOfValue()(__val), _S_key(__position._M_node));

	mov	edx, DWORD PTR [edi+16]
	mov	ecx, eax
	mov	eax, DWORD PTR [ebx]
	add	esp, 4
	cmp	eax, edx
	setb	dl

; 493  : 
; 494  :     if (__comp_v_pos
; 495  :         && _M_key_compare( _S_key(__before._M_node), _KeyOfValue()(__val) )) {

	test	dl, dl
	mov	BYTE PTR ___comp_v_pos$133411[esp+24], dl
	je	SHORT $LN12@insert_uni@11
	cmp	DWORD PTR [ecx+16], eax
	jae	SHORT $LN12@insert_uni@11

; 496  : 
; 497  :       if (_S_right(__before._M_node) == 0)

	cmp	DWORD PTR [ecx+12], 0

; 498  :         return _M_insert(__before._M_node, __val, 0, __before._M_node); // Last argument only needs to be non-null

	mov	eax, ebx
	mov	ebx, ebp
	jne	SHORT $LN11@insert_uni@11
	push	ecx
	push	0
	push	esi
	call	?_M_insert@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@AAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@23@PAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@00@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_insert

; 529  :         else
; 530  :           return insert_unique(__val).first;

	mov	eax, esi

; 531  :       }
; 532  :     }
; 533  :   }
; 534  : }

	pop	edi
	pop	ebp
	pop	ebx
	add	esp, 16					; 00000010H
	ret	8
$LN11@insert_uni@11:

; 499  :       else
; 500  :         return _M_insert(__position._M_node, __val, __position._M_node);

	push	0
	push	edi
	push	esi
	mov	ecx, edi
	call	?_M_insert@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@AAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@23@PAU_Rb_tree_node_base@23@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@00@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_insert

; 529  :         else
; 530  :           return insert_unique(__val).first;

	mov	eax, esi

; 531  :       }
; 532  :     }
; 533  :   }
; 534  : }

	pop	edi
	pop	ebp
	pop	ebx
	add	esp, 16					; 00000010H
	ret	8
$LN12@insert_uni@11:

; 501  :       // first argument just needs to be non-null
; 502  :     }
; 503  :     else {
; 504  :       // Does the insertion point fall immediately AFTER the hint?
; 505  :       iterator __after = __position;
; 506  :       ++__after;

	lea	eax, DWORD PTR ___after$133420[esp+24]
	mov	DWORD PTR ___after$133420[esp+24], edi
	call	??E?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@QAEAAU012@XZ ; stlp_std::priv::_Rb_tree_iterator<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > > >::operator++

; 507  :       // Optimization to catch equivalent cases and avoid unnecessary comparisons
; 508  :       bool __comp_pos_v = !__comp_v_pos;  // Stored this result earlier

	mov	cl, BYTE PTR ___comp_v_pos$133411[esp+24]
	test	cl, cl
	sete	al

; 509  :       // If the earlier comparison was true, this comparison doesn't need to be
; 510  :       // performed because it must be false.  However, if the earlier comparison
; 511  :       // was false, we need to perform this one because in the equal case, both will
; 512  :       // be false.
; 513  :       if (!__comp_v_pos) {

	test	cl, cl
	jne	SHORT $LN7@insert_uni@11

; 514  :         __comp_pos_v = _M_key_compare(_S_key(__position._M_node), _KeyOfValue()(__val));

	mov	eax, DWORD PTR [edi+16]
	mov	edx, DWORD PTR [ebx]
	cmp	eax, edx
	setb	al

; 515  :       }
; 516  : 
; 517  :       if ( (!__comp_v_pos) // comp_v_pos true implies comp_v_pos false
; 518  :           && __comp_pos_v
; 519  :           && (__after._M_node == &this->_M_header._M_data ||
; 520  :               _M_key_compare( _KeyOfValue()(__val), _S_key(__after._M_node) ))) {

	test	al, al
	je	$LN208@insert_uni@11
	mov	ecx, DWORD PTR ___after$133420[esp+24]
	cmp	ecx, ebp
	je	$LN6@insert_uni@11
	cmp	edx, DWORD PTR [ecx+16]

; 521  :         if (_S_right(__position._M_node) == 0)
; 522  :           return _M_insert(__position._M_node, __val, 0, __position._M_node);

	jb	$LN6@insert_uni@11

; 515  :       }
; 516  : 
; 517  :       if ( (!__comp_v_pos) // comp_v_pos true implies comp_v_pos false
; 518  :           && __comp_pos_v
; 519  :           && (__after._M_node == &this->_M_header._M_data ||
; 520  :               _M_key_compare( _KeyOfValue()(__val), _S_key(__after._M_node) ))) {

	mov	cl, BYTE PTR ___comp_v_pos$133411[esp+24]
$LN7@insert_uni@11:

; 523  :         else
; 524  :           return _M_insert(__after._M_node, __val, __after._M_node);
; 525  :       } else {
; 526  :         // Test for equivalent case
; 527  :         if (__comp_v_pos == __comp_pos_v)

	cmp	cl, al

; 528  :           return __position;

	je	$LN208@insert_uni@11
$LN2@insert_uni@11:

; 529  :         else
; 530  :           return insert_unique(__val).first;

	lea	edx, DWORD PTR $T516454[esp+28]
	push	edx
	push	ebp
	mov	eax, ebx
	call	?insert_unique@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@stlp_std@@_N@3@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::insert_unique
	mov	eax, DWORD PTR [eax]

; 531  :       }
; 532  :     }
; 533  :   }
; 534  : }

	pop	edi
	pop	ebp
	mov	DWORD PTR [esi], eax
	mov	eax, esi
	pop	ebx
	add	esp, 16					; 00000010H
	ret	8
?insert_unique@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@23@U423@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@@Z ENDP ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::insert_unique
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__copy_ptrs@PBVCMotionDef@@PAV1@@priv@stlp_std@@YAPAVCMotionDef@@PBV2@0PAV2@ABU__false_type@1@@Z
_TEXT	SEGMENT
??$__copy_ptrs@PBVCMotionDef@@PAV1@@priv@stlp_std@@YAPAVCMotionDef@@PBV2@0PAV2@ABU__false_type@1@@Z PROC ; stlp_std::priv::__copy_ptrs<CMotionDef const *,CMotionDef *>, COMDAT
; ___first$ = edx
; ___last$ = eax
; ___result$ = ecx

; 250  :   return __copy(__first, __last, __result, random_access_iterator_tag(), (ptrdiff_t*)0);

	jmp	??$__copy@PBVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__copy<CMotionDef const *,CMotionDef *,int>
??$__copy_ptrs@PBVCMotionDef@@PAV1@@priv@stlp_std@@YAPAVCMotionDef@@PBV2@0PAV2@ABU__false_type@1@@Z ENDP ; stlp_std::priv::__copy_ptrs<CMotionDef const *,CMotionDef *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ??$_M_allocate_and_copy@PBVCMotionDef@@@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEPAVCMotionDef@@AAIPBV3@1@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$_M_allocate_and_copy@PBVCMotionDef@@@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEPAVCMotionDef@@AAIPBV3@1@Z PROC ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_allocate_and_copy<CMotionDef const *>, COMDAT
; ___n$ = eax

; 634  :                                _ForwardIterator __first, _ForwardIterator __last)
; 635  : #else /* _STLP_MEMBER_TEMPLATES */
; 636  :   pointer _M_allocate_and_copy(size_type& __n,
; 637  :                                const_pointer __first, const_pointer __last)
; 638  : #endif /* _STLP_MEMBER_TEMPLATES */
; 639  :   {
; 640  :     pointer __result = this->_M_end_of_storage.allocate(__n, __n);

	mov	eax, DWORD PTR [eax]
	lea	ecx, DWORD PTR [eax*8]
	sub	ecx, eax
	add	ecx, ecx
	add	ecx, ecx
	push	esi
	push	ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 641  :     _STLP_TRY {
; 642  :       uninitialized_copy(__first, __last, __result);

	mov	ecx, DWORD PTR ___first$[esp]
	mov	esi, eax
	mov	eax, DWORD PTR ___last$[esp]
	mov	edx, esi
	call	??$__ucopy@PBVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<CMotionDef const *,CMotionDef *,int>

; 643  :       return __result;

	mov	eax, esi
	pop	esi

; 644  :     }
; 645  :     _STLP_UNWIND(this->_M_end_of_storage.deallocate(__result, __n))
; 646  :     _STLP_RET_AFTER_THROW(__result)
; 647  :   }

	ret	8
??$_M_allocate_and_copy@PBVCMotionDef@@@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEPAVCMotionDef@@AAIPBV3@1@Z ENDP ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_allocate_and_copy<CMotionDef const *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.c
_TEXT	ENDS
;	COMDAT ?_M_fill_insert_aux@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXPAVCMotionDef@@IABV4@ABU__false_type@3@@Z
_TEXT	SEGMENT
___x_copy$133104 = -28					; size = 28
tv309 = 8						; size = 4
___pos$ = 8						; size = 4
___n$ = 12						; size = 4
$T517007 = 16						; size = 1
___x$ = 16						; size = 4
___formal$ = 20						; size = 4
?_M_fill_insert_aux@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXPAVCMotionDef@@IABV4@ABU__false_type@3@@Z PROC ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_fill_insert_aux, COMDAT
; _this$ = ecx

; 143  :                                               const _Tp& __x, const __false_type& /*_Movable*/) {

	sub	esp, 28					; 0000001cH
	push	ebx
	push	ebp
	mov	ebx, ecx

; 144  :   //Here self referencing needs to be checked even for non movable types.
; 145  :   if (_M_is_inside(__x)) {

	mov	ecx, DWORD PTR ___x$[esp+32]
	cmp	ecx, DWORD PTR [ebx]
	push	esi
	push	edi
	jb	SHORT $LN3@M_fill_ins@24
	cmp	ecx, DWORD PTR [ebx+4]
	jae	SHORT $LN3@M_fill_ins@24

; 146  :     _Tp __x_copy = __x;

	push	ecx
	lea	ecx, DWORD PTR ___x_copy$133104[esp+48]
	call	??0CMotionDef@@QAE@ABV0@@Z

; 147  :     _M_fill_insert_aux(__pos, __n, __x_copy, __false_type());

	mov	edx, DWORD PTR ___n$[esp+40]
	lea	eax, DWORD PTR $T517007[esp+40]
	push	eax
	mov	eax, DWORD PTR ___pos$[esp+44]
	lea	ecx, DWORD PTR ___x_copy$133104[esp+48]
	push	ecx
	push	edx
	push	eax
	mov	ecx, ebx
	mov	BYTE PTR $T517007[esp+56], 0
	call	?_M_fill_insert_aux@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXPAVCMotionDef@@IABV4@ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_fill_insert_aux

; 148  :     return;

	mov	edx, DWORD PTR ___x_copy$133104[esp+60]
	mov	eax, DWORD PTR ___x_copy$133104[esp+64]
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR [ecx], eax
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@Vmotion_marks@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0PAVmotion_marks@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<motion_marks *>,motion_marks>
	mov	eax, DWORD PTR ___x_copy$133104[esp+68]
	add	esp, 8
	test	eax, eax
	je	$LN1@M_fill_ins@24
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z

; 162  :   }
; 163  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 28					; 0000001cH
	ret	16					; 00000010H
$LN3@M_fill_ins@24:

; 149  :   }
; 150  :   const size_type __elems_after = this->_M_finish - __pos;

	mov	esi, DWORD PTR [ebx+4]
	mov	ebp, DWORD PTR ___pos$[esp+40]
	mov	edi, esi
	sub	edi, ebp
	mov	eax, -1840700269			; 92492493H
	imul	edi

; 151  :   pointer __old_finish = this->_M_finish;
; 152  :   if (__elems_after > __n) {

	mov	eax, DWORD PTR ___n$[esp+40]
	add	edx, edi
	sar	edx, 4
	mov	edi, edx
	shr	edi, 31					; 0000001fH
	add	edi, edx
	cmp	edi, eax
	jbe	SHORT $LN2@M_fill_ins@24

; 153  :     _STLP_PRIV __ucopy_ptrs(this->_M_finish - __n, this->_M_finish, this->_M_finish, _TrivialUCopy());

	lea	edi, DWORD PTR [eax*8]
	sub	edi, eax
	add	edi, edi
	add	edi, edi
	mov	ecx, esi
	sub	ecx, edi
	mov	edx, esi
	mov	eax, esi
	mov	DWORD PTR tv309[esp+40], ecx
	call	??$__ucopy@PAVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<CMotionDef *,CMotionDef *,int>

; 154  :     this->_M_finish += __n;
; 155  :     _STLP_PRIV __copy_backward_ptrs(__pos, __old_finish - __n, __old_finish, _TrivialCopy());

	mov	ecx, DWORD PTR tv309[esp+40]
	add	DWORD PTR [ebx+4], edi
	push	ebp
	mov	eax, esi
	call	??$__copy_backward@PAVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__copy_backward<CMotionDef *,CMotionDef *,int>

; 156  :     _STLP_STD::fill(__pos, __pos + __n, __x);

	add	edi, ebp
	push	edi

; 157  :   } else {

	jmp	SHORT $LN57@M_fill_ins@24
$LN2@M_fill_ins@24:

; 158  :     this->_M_finish = _STLP_PRIV __uninitialized_fill_n(this->_M_finish, __n - __elems_after, __x);

	push	ecx
	mov	ecx, eax
	sub	ecx, edi
	mov	eax, esi
	call	??$__uninitialized_fill_n@PAVCMotionDef@@IV1@@priv@stlp_std@@YAPAVCMotionDef@@PAV2@IABV2@@Z ; stlp_std::priv::__uninitialized_fill_n<CMotionDef *,unsigned int,CMotionDef>
	mov	DWORD PTR [ebx+4], eax

; 159  :     _STLP_PRIV __ucopy_ptrs(__pos, __old_finish, this->_M_finish, _TrivialUCopy());

	mov	edx, eax
	mov	eax, esi
	mov	ecx, ebp
	call	??$__ucopy@PAVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<CMotionDef *,CMotionDef *,int>

; 160  :     this->_M_finish += __elems_after;

	lea	eax, DWORD PTR [edi*8]
	sub	eax, edi
	add	eax, eax
	add	eax, eax
	add	DWORD PTR [ebx+4], eax

; 161  :     _STLP_STD::fill(__pos, __old_finish, __x);

	push	esi
$LN57@M_fill_ins@24:
	mov	ebx, DWORD PTR ___x$[esp+48]
	mov	eax, ebp
	call	??$fill@PAVCMotionDef@@V1@@stlp_std@@YAXPAVCMotionDef@@0ABV1@@Z ; stlp_std::fill<CMotionDef *,CMotionDef>
	add	esp, 8
$LN1@M_fill_ins@24:

; 162  :   }
; 163  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 28					; 0000001cH
	ret	16					; 00000010H
?_M_fill_insert_aux@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXPAVCMotionDef@@IABV4@ABU__false_type@3@@Z ENDP ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_fill_insert_aux
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_insert_overflow_aux@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXPAVCMotionDef@@ABV4@ABU__false_type@3@I_N@Z
_TEXT	SEGMENT
___old_size$ = -4					; size = 4
___pos$ = 8						; size = 4
___x$ = 12						; size = 4
___fill_len$ = 16					; size = 4
?_M_insert_overflow_aux@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXPAVCMotionDef@@ABV4@ABU__false_type@3@I_N@Z PROC ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_insert_overflow_aux, COMDAT
; _this$ = esi

; 84   :                                                  size_type __fill_len, bool __atend ) {

	push	ecx

; 85   :   const size_type __old_size = size();

	mov	ecx, DWORD PTR [esi+4]
	sub	ecx, DWORD PTR [esi]
	mov	eax, -1840700269			; 92492493H
	imul	ecx
	add	edx, ecx
	sar	edx, 4
	push	ebx
	mov	eax, edx
	push	ebp
	shr	eax, 31					; 0000001fH
	push	edi
	add	eax, edx

; 86   :   size_type __len = __old_size + (max)(__old_size, __fill_len);

	lea	ecx, DWORD PTR ___fill_len$[esp+12]
	push	ecx
	lea	edx, DWORD PTR ___old_size$[esp+20]
	push	edx
	mov	DWORD PTR ___old_size$[esp+24], eax
	call	??$max@I@stlp_std@@YAABIABI0@Z		; stlp_std::max<unsigned int>
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR ___old_size$[esp+24]

; 87   : 
; 88   :   pointer __new_start = this->_M_end_of_storage.allocate(__len, __len);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	lea	edi, DWORD PTR [eax*8]
	sub	edi, eax
	add	edi, edi
	add	esp, 8
	add	edi, edi
	push	edi
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 89   :   pointer __new_finish = __new_start;
; 90   :   _STLP_TRY {
; 91   :     __new_finish = _STLP_PRIV __uninitialized_move(this->_M_start, __pos, __new_start, _TrivialUCopy(), _Movable());

	mov	ecx, DWORD PTR [esi]
	mov	ebp, eax
	mov	eax, DWORD PTR ___pos$[esp+12]
	mov	edx, ebp
	call	??$__ucopy@PAVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<CMotionDef *,CMotionDef *,int>

; 92   :     // handle insertion
; 93   :     if (__fill_len == 1) {

	mov	ecx, DWORD PTR ___fill_len$[esp+12]
	cmp	ecx, 1
	mov	ebx, eax
	jne	SHORT $LN3@M_insert_o@31

; 94   :       _Copy_Construct(__new_finish, __x);

	test	ebx, ebx
	je	SHORT $LN28@M_insert_o@31
	mov	eax, DWORD PTR ___x$[esp+12]
	push	eax
	mov	ecx, ebx
	call	??0CMotionDef@@QAE@ABV0@@Z
$LN28@M_insert_o@31:

; 95   :       ++__new_finish;

	add	ebx, 28					; 0000001cH

; 96   :     } else

	jmp	SHORT $LN69@M_insert_o@31
$LN3@M_insert_o@31:

; 97   :       __new_finish = _STLP_PRIV __uninitialized_fill_n(__new_finish, __fill_len, __x);

	mov	edx, DWORD PTR ___x$[esp+12]
	push	edx
	call	??$__uninitialized_fill_n@PAVCMotionDef@@IV1@@priv@stlp_std@@YAPAVCMotionDef@@PAV2@IABV2@@Z ; stlp_std::priv::__uninitialized_fill_n<CMotionDef *,unsigned int,CMotionDef>
	add	esp, 4
	mov	ebx, eax
$LN69@M_insert_o@31:

; 98   :     if (!__atend)
; 99   :       __new_finish = _STLP_PRIV __uninitialized_move(__pos, this->_M_finish, __new_finish, _TrivialUCopy(), _Movable()); // copy remainder

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR ___pos$[esp+12]
	mov	edx, ebx
	call	??$__ucopy@PAVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<CMotionDef *,CMotionDef *,int>

; 100  :   }
; 101  :   _STLP_UNWIND((_STLP_STD::_Destroy_Range(__new_start,__new_finish),
; 102  :                this->_M_end_of_storage.deallocate(__new_start,__len)))
; 103  :   _M_clear_after_move();

	mov	ecx, DWORD PTR [esi+4]
	push	ecx
	mov	ebx, eax
	mov	eax, DWORD PTR [esi]
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@VCMotionDef@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0PAVCMotionDef@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotionDef *>,CMotionDef>
	mov	eax, DWORD PTR [esi]
	add	esp, 8
	test	eax, eax
	je	SHORT $LN64@M_insert_o@31
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN64@M_insert_o@31:

; 104  :   _M_set(__new_start, __new_finish, __new_start + __len);

	add	edi, ebp
	mov	DWORD PTR [esi+8], edi

; 105  : }

	pop	edi
	mov	DWORD PTR [esi], ebp
	pop	ebp
	mov	DWORD PTR [esi+4], ebx
	pop	ebx
	pop	ecx
	ret	12					; 0000000cH
?_M_insert_overflow_aux@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXPAVCMotionDef@@ABV4@ABU__false_type@3@I_N@Z ENDP ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_insert_overflow_aux
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_map.h
_TEXT	ENDS
;	COMDAT ?insert@?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@2@U342@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@2@@Z
_TEXT	SEGMENT
___pos$ = 8						; size = 4
___x$ = 12						; size = 4
?insert@?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@2@U342@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@2@@Z PROC ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::insert, COMDAT
; _this$ = edx
; ___$ReturnUdt$ = eax

; 186  :   { return _M_t.insert_unique(__pos, __x); }

	push	esi
	push	ecx
	mov	ecx, DWORD PTR ___pos$[esp+4]
	mov	esi, eax
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR ___x$[esp+4]
	push	edx
	call	?insert_unique@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@23@U423@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::insert_unique
	mov	eax, esi
	pop	esi
	ret	8
?insert@?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@priv@2@U342@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@2@@Z ENDP ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::insert
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?_M_insert_overflow@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXPAVCMotionDef@@ABV4@ABU__false_type@3@I_N@Z
_TEXT	SEGMENT
?_M_insert_overflow@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXPAVCMotionDef@@ABV4@ABU__false_type@3@I_N@Z PROC ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_insert_overflow, COMDAT
; _this$ = esi
; ___pos$ = edx
; ___x$ = ecx
; ___fill_len$ = eax

; 161  :   { _M_insert_overflow_aux(__pos, __x, _Movable(), __fill_len, __atend); }

	push	eax
	push	ecx
	push	edx
	call	?_M_insert_overflow_aux@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXPAVCMotionDef@@ABV4@ABU__false_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_insert_overflow_aux
	ret	0
?_M_insert_overflow@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXPAVCMotionDef@@ABV4@ABU__false_type@3@I_N@Z ENDP ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_insert_overflow
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__copy_ptrs@PAVCMotionDef@@PAV1@@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABU__false_type@1@@Z
_TEXT	SEGMENT
??$__copy_ptrs@PAVCMotionDef@@PAV1@@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABU__false_type@1@@Z PROC ; stlp_std::priv::__copy_ptrs<CMotionDef *,CMotionDef *>, COMDAT
; ___first$ = edx
; ___last$ = eax
; ___result$ = ecx

; 250  :   return __copy(__first, __last, __result, random_access_iterator_tag(), (ptrdiff_t*)0);

	jmp	??$__copy@PAVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__copy<CMotionDef *,CMotionDef *,int>
??$__copy_ptrs@PAVCMotionDef@@PAV1@@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABU__false_type@1@@Z ENDP ; stlp_std::priv::__copy_ptrs<CMotionDef *,CMotionDef *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_map.h
_TEXT	ENDS
;	COMDAT ??$?AVshared_str@@@?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAEAAV?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@ABVshared_str@@@Z
_TEXT	SEGMENT
$T517589 = -16						; size = 16
$T517592 = 8						; size = 4
_this$ = 8						; size = 4
??$?AVshared_str@@@?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAEAAV?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@ABVshared_str@@@Z PROC ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::operator[]<shared_str>, COMDAT
; ___k$ = eax

; 174  :     iterator __i = lower_bound(__k);

	mov	ecx, DWORD PTR _this$[esp-4]
	sub	esp, 16					; 00000010H
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, eax
	mov	eax, DWORD PTR [ecx+4]
	test	eax, eax
	mov	esi, ecx
	je	SHORT $LN11@operator@131
	mov	edx, DWORD PTR [edi]
$LL12@operator@131:
	cmp	DWORD PTR [eax+16], edx
	jb	SHORT $LN10@operator@131
	mov	esi, eax
	mov	eax, DWORD PTR [eax+8]
	jmp	SHORT $LN9@operator@131
$LN10@operator@131:
	mov	eax, DWORD PTR [eax+12]
$LN9@operator@131:
	test	eax, eax
	jne	SHORT $LL12@operator@131
$LN11@operator@131:

; 175  :     // __i->first is greater than or equivalent to __k.
; 176  :     if (__i == end() || key_comp()(__k, (*__i).first))

	cmp	esi, ecx
	je	SHORT $LN1@operator@131
	mov	eax, DWORD PTR [edi]
	cmp	eax, DWORD PTR [esi+16]
	jae	$LN223@operator@131
$LN1@operator@131:

; 177  :       __i = insert(__i, value_type(__k, _STLP_DEFAULT_CONSTRUCTED(_Tp)));

	mov	ebx, DWORD PTR [edi]
	test	ebx, ebx
	je	SHORT $LN88@operator@131
	add	DWORD PTR [ebx], 1
$LN88@operator@131:
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	0
	mov	DWORD PTR $T517589[esp+36], ebx
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	mov	edi, eax
	mov	edx, edi
	xor	eax, eax
	xor	ecx, ecx
	mov	DWORD PTR $T517589[esp+36], edi
	mov	DWORD PTR $T517589[esp+44], edi
	call	??$__ucopy@PBVCMotion@@PAV1@H@priv@stlp_std@@YAPAVCMotion@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<CMotion const *,CMotion *,int>
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR [ecx], esi
	mov	ecx, DWORD PTR _this$[esp+32]
	mov	ebp, eax
	lea	eax, DWORD PTR $T517589[esp+36]
	push	ecx
	lea	esi, DWORD PTR $T517592[esp+36]
	mov	DWORD PTR $T517589[esp+48], ebp
	call	?insert_unique@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@2@@23@U423@ABU?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::insert_unique
	mov	esi, DWORD PTR $T517592[esp+28]
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], edi
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ebp
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVCMotion@@@stlp_std@@VCMotion@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0PAVCMotion@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotion *>,CMotion>
	add	esp, 8
	test	edi, edi
	je	SHORT $LN173@operator@131
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN173@operator@131:
	test	ebx, ebx
	je	SHORT $LN178@operator@131
	add	DWORD PTR [ebx], -1
$LN178@operator@131:
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], 0
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], 0
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVCMotion@@@stlp_std@@VCMotion@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotion@@@0@0PAVCMotion@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotion *>,CMotion>
	add	esp, 8
$LN223@operator@131:

; 178  :     return (*__i).second;
; 179  :   }

	pop	edi
	lea	eax, DWORD PTR [esi+20]
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 16					; 00000010H
	ret	4
??$?AVshared_str@@@?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAEAAV?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@ABVshared_str@@@Z ENDP ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::operator[]<shared_str>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.c
_TEXT	ENDS
;	COMDAT ?_M_fill_insert@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXPAVCMotionDef@@IABV4@@Z
_TEXT	SEGMENT
$T518745 = 8						; size = 1
___pos$ = 8						; size = 4
?_M_fill_insert@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXPAVCMotionDef@@IABV4@@Z PROC ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_fill_insert, COMDAT
; _this$ = ecx
; ___n$ = ebx
; ___x$ = eax

; 168  :   if (__n != 0) {

	test	ebx, ebx
	push	ebp
	mov	ebp, DWORD PTR ___pos$[esp]
	push	esi
	mov	esi, eax
	je	SHORT $LN6@M_fill_ins@25
	push	edi

; 169  :     if (size_type(this->_M_end_of_storage._M_data - this->_M_finish) >= __n) {

	mov	edi, DWORD PTR [ecx+8]
	sub	edi, DWORD PTR [ecx+4]
	mov	eax, -1840700269			; 92492493H
	imul	edi
	add	edx, edi
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	cmp	eax, ebx
	pop	edi
	jb	SHORT $LN2@M_fill_ins@25

; 170  :       _M_fill_insert_aux(__pos, __n, __x, _Movable());

	lea	edx, DWORD PTR $T518745[esp+4]
	push	edx
	push	esi
	push	ebx
	push	ebp
	call	?_M_fill_insert_aux@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXPAVCMotionDef@@IABV4@ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_fill_insert_aux
	pop	esi
	pop	ebp

; 173  :   }
; 174  : }

	ret	4
$LN2@M_fill_ins@25:

; 171  :     } else
; 172  :       _M_insert_overflow(__pos, __x, _TrivialCopy(), __n);

	push	ebx
	push	esi
	push	ebp
	mov	esi, ecx
	call	?_M_insert_overflow_aux@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXPAVCMotionDef@@ABV4@ABU__false_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_insert_overflow_aux
$LN6@M_fill_ins@25:
	pop	esi
	pop	ebp

; 173  :   }
; 174  : }

	ret	4
?_M_fill_insert@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXPAVCMotionDef@@IABV4@@Z ENDP ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_fill_insert
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z
_TEXT	SEGMENT
tv323 = -4						; size = 4
___result$518861 = 8					; size = 4
___x$ = 8						; size = 4
??4?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z PROC ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::operator=, COMDAT
; _this$ = esi

; 177  : vector<_Tp, _Alloc>& vector<_Tp, _Alloc>::operator = (const vector<_Tp, _Alloc>& __x) {

	push	ecx

; 178  :   if (&__x != this) {

	mov	eax, DWORD PTR ___x$[esp]
	cmp	eax, esi
	push	ebx
	push	ebp
	push	edi
	je	$LN83@operator@132

; 179  :     const size_type __xlen = __x.size();

	mov	ecx, DWORD PTR [eax+4]
	mov	ebp, DWORD PTR [eax]

; 180  :     if (__xlen > capacity()) {

	mov	edi, DWORD PTR [esi+8]
	mov	DWORD PTR tv323[esp+16], ecx
	sub	ecx, ebp
	mov	eax, -1840700269			; 92492493H
	imul	ecx
	add	edx, ecx
	mov	ecx, DWORD PTR [esi]
	sar	edx, 4
	mov	ebx, edx
	shr	ebx, 31					; 0000001fH
	add	ebx, edx
	sub	edi, ecx
	mov	eax, -1840700269			; 92492493H
	imul	edi
	add	edx, edi
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	cmp	ebx, eax
	jbe	SHORT $LN4@operator@132

; 181  :       size_type __len = __xlen;
; 182  :       pointer __tmp = _M_allocate_and_copy(__len, __CONST_CAST(const_pointer, __x._M_start) + 0,
; 183  :                                                   __CONST_CAST(const_pointer, __x._M_finish) + 0);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	lea	edi, DWORD PTR [ebx*8]
	sub	edi, ebx
	add	edi, edi
	add	edi, edi
	push	edi
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	mov	DWORD PTR ___result$518861[esp+12], eax
	mov	edx, eax
	mov	eax, DWORD PTR tv323[esp+16]
	mov	ecx, ebp
	call	??$__ucopy@PBVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<CMotionDef const *,CMotionDef *,int>

; 184  :       _M_clear();

	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	push	ecx
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@VCMotionDef@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0PAVCMotionDef@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotionDef *>,CMotionDef>
	mov	eax, DWORD PTR [esi]
	add	esp, 8
	test	eax, eax
	je	SHORT $LN64@operator@132
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN64@operator@132:

; 185  :       this->_M_start = __tmp;

	mov	eax, DWORD PTR ___result$518861[esp+12]

; 186  :       this->_M_end_of_storage._M_data = this->_M_start + __len;

	add	edi, eax
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+8], edi
	jmp	SHORT $LN81@operator@132
$LN4@operator@132:

; 187  :     } else if (size() >= __xlen) {

	mov	edi, DWORD PTR [esi+4]
	sub	edi, ecx
	mov	eax, -1840700269			; 92492493H
	imul	edi
	add	edx, edi
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	cmp	eax, ebx
	jb	SHORT $LN2@operator@132

; 188  :       pointer __i = _STLP_PRIV __copy_ptrs(__CONST_CAST(const_pointer, __x._M_start) + 0,
; 189  :                                            __CONST_CAST(const_pointer, __x._M_finish) + 0, this->_M_start, _TrivialCopy());

	mov	eax, DWORD PTR tv323[esp+16]
	mov	edx, ebp
	call	??$__copy@PBVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__copy<CMotionDef const *,CMotionDef *,int>

; 190  :       _STLP_STD::_Destroy_Range(__i, this->_M_finish);

	mov	edi, DWORD PTR [esi+4]
	call	??$__destroy_range_aux@PAVCMotionDef@@V1@@stlp_std@@YAXPAVCMotionDef@@00ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<CMotionDef *,CMotionDef>

; 191  :     } else {

	jmp	SHORT $LN81@operator@132
$LN2@operator@132:

; 192  :       _STLP_PRIV __copy_ptrs(__CONST_CAST(const_pointer, __x._M_start),
; 193  :                              __CONST_CAST(const_pointer, __x._M_start) + size(), this->_M_start, _TrivialCopy());

	lea	edx, DWORD PTR [eax*8]
	sub	edx, eax
	lea	eax, DWORD PTR [ebp+edx*4]
	mov	edx, ebp
	call	??$__copy@PBVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__copy<CMotionDef const *,CMotionDef *,int>

; 194  :       _STLP_PRIV __ucopy_ptrs(__CONST_CAST(const_pointer, __x._M_start) + size(),
; 195  :                               __CONST_CAST(const_pointer, __x._M_finish) + 0, this->_M_finish, _TrivialUCopy());

	mov	edi, DWORD PTR [esi+4]
	mov	ecx, edi
	sub	ecx, DWORD PTR [esi]
	mov	eax, -1840700269			; 92492493H
	imul	ecx
	add	edx, ecx
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	lea	ecx, DWORD PTR [eax*8]
	sub	ecx, eax
	mov	eax, DWORD PTR ___x$[esp+12]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	lea	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, edi
	call	??$__ucopy@PBVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<CMotionDef const *,CMotionDef *,int>
$LN81@operator@132:

; 196  :     }
; 197  :     this->_M_finish = this->_M_start + __xlen;

	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ebx*8]
	sub	eax, ebx
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [esi+4], edx
$LN83@operator@132:

; 198  :   }
; 199  :   return *this;
; 200  : }

	pop	edi
	pop	ebp
	mov	eax, esi
	pop	ebx
	pop	ecx
	ret	4
??4?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ENDP ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::operator=
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?_M_erase@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEPAVCMotionDef@@PAV4@0ABU__false_type@3@@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
?_M_erase@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEPAVCMotionDef@@PAV4@0ABU__false_type@3@@Z PROC ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_erase, COMDAT
; _this$ = esi
; ___last$ = edx

; 579  :     pointer __i = _STLP_PRIV __copy_ptrs(__last, this->_M_finish, __first, _TrivialCopy());

	mov	eax, DWORD PTR [esi+4]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR ___first$[esp+4]
	push	edi
	mov	ecx, ebp
	call	??$__copy@PAVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__copy<CMotionDef *,CMotionDef *,int>

; 580  :     _STLP_STD::_Destroy_Range(__i, this->_M_finish);

	mov	edi, DWORD PTR [esi+4]
	mov	ebx, eax
	call	??$__destroy_range_aux@PAVCMotionDef@@V1@@stlp_std@@YAXPAVCMotionDef@@00ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<CMotionDef *,CMotionDef>
	pop	edi

; 581  :     this->_M_finish = __i;
; 582  :     return __first;

	mov	eax, ebp
	pop	ebp
	mov	DWORD PTR [esi+4], ebx
	pop	ebx

; 583  :   }

	ret	4
?_M_erase@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEPAVCMotionDef@@PAV4@0ABU__false_type@3@@Z ENDP ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?erase@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEPAVCMotionDef@@PAV4@0@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
?erase@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEPAVCMotionDef@@PAV4@0@Z PROC ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::erase, COMDAT
; _this$ = ebx
; ___last$ = edx

; 589  :   iterator erase(iterator __first, iterator __last) {

	push	ebp
	mov	ebp, DWORD PTR ___first$[esp]

; 590  :     if (__first == __last)

	cmp	ebp, edx

; 591  :       return __first;

	je	SHORT $LN12@erase@62

; 592  :     return _M_erase(__first, __last, _Movable());

	mov	eax, DWORD PTR [ebx+4]
	push	esi
	push	edi
	mov	ecx, ebp
	call	??$__copy@PAVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__copy<CMotionDef *,CMotionDef *,int>
	mov	edi, DWORD PTR [ebx+4]
	mov	esi, eax
	call	??$__destroy_range_aux@PAVCMotionDef@@V1@@stlp_std@@YAXPAVCMotionDef@@00ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<CMotionDef *,CMotionDef>
	pop	edi
	mov	DWORD PTR [ebx+4], esi
	pop	esi
$LN12@erase@62:
	mov	eax, ebp
	pop	ebp

; 593  :   }

	ret	4
?erase@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEPAVCMotionDef@@PAV4@0@Z ENDP ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?insert@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEXPAVCMotionDef@@IABV4@@Z
_TEXT	SEGMENT
$T519152 = 8						; size = 1
___pos$ = 8						; size = 4
?insert@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEXPAVCMotionDef@@IABV4@@Z PROC ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::insert, COMDAT
; _this$ = ecx
; ___n$ = ebx
; ___x$ = eax

; 529  :   { _M_fill_insert(__pos, __n, __x); }

	test	ebx, ebx
	push	ebp
	mov	ebp, DWORD PTR ___pos$[esp]
	push	esi
	mov	esi, eax
	je	SHORT $LN8@insert@16
	push	edi
	mov	edi, DWORD PTR [ecx+8]
	sub	edi, DWORD PTR [ecx+4]
	mov	eax, -1840700269			; 92492493H
	imul	edi
	add	edx, edi
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	cmp	eax, ebx
	pop	edi
	jb	SHORT $LN4@insert@16
	lea	edx, DWORD PTR $T519152[esp+4]
	push	edx
	push	esi
	push	ebx
	push	ebp
	call	?_M_fill_insert_aux@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXPAVCMotionDef@@IABV4@ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_fill_insert_aux
	pop	esi
	pop	ebp
	ret	4
$LN4@insert@16:
	push	ebx
	push	esi
	push	ebp
	mov	esi, ecx
	call	?_M_insert_overflow_aux@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXPAVCMotionDef@@ABV4@ABU__false_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_insert_overflow_aux
$LN8@insert@16:
	pop	esi
	pop	ebp
	ret	4
?insert@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEXPAVCMotionDef@@IABV4@@Z ENDP ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::insert
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?resize@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEXIABVCMotionDef@@@Z
_TEXT	SEGMENT
$T519251 = 8						; size = 1
___x$ = 8						; size = 4
?resize@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEXIABVCMotionDef@@@Z PROC ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::resize, COMDAT
; _this$ = ecx
; ___new_size$ = eax

; 596  :   void resize(size_type __new_size, const _Tp& __x = _STLP_DEFAULT_CONSTRUCTED(_Tp)) {

	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx

; 597  : #else
; 598  :   void resize(size_type __new_size, const _Tp& __x) {
; 599  : #endif /*_STLP_DONT_SUP_DFLT_PARAM*/
; 600  :     if (__new_size < size())

	mov	ebp, DWORD PTR [esi]
	mov	ebx, eax
	push	edi
	mov	edi, DWORD PTR [esi+4]
	mov	ecx, edi
	sub	ecx, ebp
	mov	eax, -1840700269			; 92492493H
	imul	ecx
	add	edx, ecx
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	cmp	ebx, eax
	jae	SHORT $LN2@resize@12

; 601  :       erase(begin() + __new_size, end());

	lea	eax, DWORD PTR [ebx*8]
	sub	eax, ebx
	lea	ecx, DWORD PTR [ebp+eax*4]
	cmp	ecx, edi
	je	SHORT $LN33@resize@12
	mov	eax, edi
	mov	edx, edi
	call	??$__copy@PAVCMotionDef@@PAV1@H@priv@stlp_std@@YAPAVCMotionDef@@PAV2@00ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__copy<CMotionDef *,CMotionDef *,int>
	mov	edi, DWORD PTR [esi+4]
	mov	ebx, eax
	call	??$__destroy_range_aux@PAVCMotionDef@@V1@@stlp_std@@YAXPAVCMotionDef@@00ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<CMotionDef *,CMotionDef>
	pop	edi
	mov	DWORD PTR [esi+4], ebx
	pop	esi
	pop	ebp
	pop	ebx

; 604  :   }

	ret	4
$LN2@resize@12:

; 602  :     else
; 603  :       insert(end(), __new_size - size(), __x);

	sub	ebx, eax
	je	SHORT $LN33@resize@12
	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, edi
	mov	eax, -1840700269			; 92492493H
	imul	ecx
	add	edx, ecx
	sar	edx, 4
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	add	ecx, edx
	cmp	ecx, ebx
	jb	SHORT $LN29@resize@12
	mov	eax, DWORD PTR ___x$[esp+12]
	lea	edx, DWORD PTR $T519251[esp+12]
	push	edx
	push	eax
	push	ebx
	push	edi
	mov	ecx, esi
	call	?_M_fill_insert_aux@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXPAVCMotionDef@@IABV4@ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_fill_insert_aux
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 604  :   }

	ret	4

; 602  :     else
; 603  :       insert(end(), __new_size - size(), __x);

$LN29@resize@12:
	mov	ecx, DWORD PTR ___x$[esp+12]
	push	ebx
	push	ecx
	push	edi
	call	?_M_insert_overflow_aux@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@AAEXPAVCMotionDef@@ABV4@ABU__false_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_M_insert_overflow_aux
$LN33@resize@12:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 604  :   }

	ret	4
?resize@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEXIABVCMotionDef@@@Z ENDP ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::resize
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?resize@?$vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@stlp_std@@QAEXIABVCMotionDef@@@Z
_TEXT	SEGMENT
___new_size$ = 8					; size = 4
?resize@?$vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@stlp_std@@QAEXIABVCMotionDef@@@Z PROC ; stlp_std::vector<CMotionDef,xalloc<CMotionDef> >::resize, COMDAT
; _this$ = ecx
; ___x$ = eax

; 217  :   { _M_impl.resize(__new_size, cast_traits::to_storage_type_cref(__x)); }

	push	eax
	mov	eax, DWORD PTR ___new_size$[esp]
	call	?resize@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEXIABVCMotionDef@@@Z ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::resize
	ret	4
?resize@?$vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@stlp_std@@QAEXIABVCMotionDef@@@Z ENDP ; stlp_std::vector<CMotionDef,xalloc<CMotionDef> >::resize
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@stlp_std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
??4?$vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@stlp_std@@QAEAAV01@ABV01@@Z PROC ; stlp_std::vector<CMotionDef,xalloc<CMotionDef> >::operator=, COMDAT
; _this$ = ecx
; ___x$ = eax

; 149  :   _Self& operator=(const _Self& __x) { _M_impl = __x._M_impl; return *this; }

	push	esi
	mov	esi, ecx
	push	eax
	call	??4?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::operator=
	mov	eax, esi
	pop	esi
	ret	0
??4?$vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@stlp_std@@QAEAAV01@ABV01@@Z ENDP ; stlp_std::vector<CMotionDef,xalloc<CMotionDef> >::operator=
_TEXT	ENDS
PUBLIC	?load@motions_value@@QAEHPBDPAVIReader@@PAV?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@@Z ; motions_value::load
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\skeletonmotions.cpp
;	COMDAT ?load@motions_value@@QAEHPBDPAVIReader@@PAV?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@@Z
_TEXT	SEGMENT
_i$124786 = -256					; size = 4
_MP$ = -256						; size = 4
tv2350 = -252						; size = 4
_dwLen$124785 = -252					; size = 4
$T519274 = -252						; size = 4
_this$ = -248						; size = 4
_m_idx$124772 = -244					; size = 2
tv992 = -244						; size = 4
$T519277 = -244						; size = 8
_dwCNT$ = -236						; size = 4
_vers$124513 = -232					; size = 2
$T520713 = -232						; size = 4
$T519439 = -225						; size = 1
_mot_count$124553 = -224				; size = 2
_m_idx$124542 = -224					; size = 2
_rm_bones$ = -220					; size = 12
$T519281 = -208						; size = 8
$T519285 = -200						; size = 8
$T519291 = -192						; size = 40
$T519276 = -192						; size = 28
$T519280 = -152						; size = 8
$T519288 = -144						; size = 8
$T519284 = -136						; size = 8
_mname$124777 = -128					; size = 128
_buf$124515 = -128					; size = 128
_N$ = 8							; size = 4
_data$ = 12						; size = 4
_bones$ = 16						; size = 4
?load@motions_value@@QAEHPBDPAVIReader@@PAV?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@@Z PROC ; motions_value::load, COMDAT
; _this$ = ecx

; 76   : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 260				; 00000104H

; 77   : 
; 78   : 	m_id						= N;

	mov	eax, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR _N$[ebp]
	mov	esi, ecx
	mov	ecx, DWORD PTR [eax]
	push	edi
	mov	DWORD PTR _this$[esp+276], esi
	call	DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	test	eax, eax
	je	SHORT $LN57@load@7
	add	DWORD PTR [eax], 1
$LN57@load@7:
	mov	ecx, DWORD PTR [esi+176]
	test	ecx, ecx
	je	SHORT $LN60@load@7
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [esi+176]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN60@load@7
	mov	DWORD PTR [esi+176], 0
$LN60@load@7:
	mov	DWORD PTR [esi+176], eax

; 79   : 
; 80   : 	bool bRes					= true;
; 81   : 	// Load definitions
; 82   : 	U16Vec rm_bones				(bones->size(),BI_NONE);

	mov	eax, DWORD PTR _bones$[ebp]
	mov	esi, DWORD PTR [eax+4]
	sub	esi, DWORD PTR [eax]
	lea	edx, DWORD PTR $T519439[esp+272]
	push	edx
	sar	esi, 2
	push	esi
	lea	ecx, DWORD PTR _rm_bones$[esp+280]
	call	??0?$_Vector_base@GV?$xalloc@G@@@priv@stlp_std@@QAE@IABV?$xalloc@G@@@Z ; stlp_std::priv::_Vector_base<unsigned short,xalloc<unsigned short> >::_Vector_base<unsigned short,xalloc<unsigned short> >
	mov	ecx, DWORD PTR _rm_bones$[esp+272]
	lea	esi, DWORD PTR [ecx+esi*2]
	mov	eax, esi
	sub	eax, ecx
	sar	eax, 1
	test	eax, eax
	jle	SHORT $LN82@load@7
$LL84@load@7:
	test	ecx, ecx
	je	SHORT $LN83@load@7
	mov	WORD PTR [ecx], 65535			; 0000ffffH
$LN83@load@7:
	sub	eax, 1
	add	ecx, 2
	test	eax, eax
	jg	SHORT $LL84@load@7
$LN82@load@7:

; 83   : 	IReader* MP 				= data->open_chunk(OGF_S_SMPARAMS);

	mov	ecx, DWORD PTR _data$[ebp]
	push	15					; 0000000fH
	mov	DWORD PTR _rm_bones$[esp+280], esi
	call	DWORD PTR __imp_?open_chunk@IReader@@QAEPAV1@I@Z
	mov	esi, eax

; 84   : 
; 85   : 	if (MP)

	test	esi, esi
	mov	DWORD PTR _MP$[esp+272], esi
	je	$LN52@load@7

; 86   : 	{
; 87   : 		u16 vers 				= MP->r_u16();

	mov	ecx, esi
	call	DWORD PTR __imp_?r_u16@?$IReaderBase@VIReader@@@@QAEGXZ

; 88   : 		u16 part_bone_cnt		= 0;
; 89   : 		string128 				buf;
; 90   : 		R_ASSERT3				(vers<=xrOGF_SMParamsVersion,"Invalid OGF/OMF version:",N);

	cmp	BYTE PTR ?ignore_always@?6??load@motions_value@@QAEHPBDPAVIReader@@PAV?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@@Z@4_NA, 0
	movzx	eax, ax
	mov	DWORD PTR _vers$124513[esp+272], eax
	jne	SHORT $LN50@load@7
	cmp	ax, 4
	jbe	SHORT $LN50@load@7
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?6??load@motions_value@@QAEHPBDPAVIReader@@PAV?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@@Z@4_NA
	push	OFFSET ??_C@_0BE@FMNFMAHB@motions_value?3?3load?$AA@
	push	90					; 0000005aH
	push	OFFSET ??_C@_0DI@HJAAPJIP@D?3?2CLEARSKY?2sources?2engine?2xrEng@
	push	edi
	push	OFFSET ??_C@_0BJ@HPKGBJIM@Invalid?5OGF?1OMF?5version?3?$AA@
	push	OFFSET ??_C@_0BM@CILJEIME@vers?$DM?$DNxrOGF_SMParamsVersion?$AA@
	call	DWORD PTR __imp_?fail@xrDebug@@QAEXPBD000H0AA_N@Z
$LN50@load@7:

; 91   : 		
; 92   : 		// partitions
; 93   : 		u16						part_count;
; 94   : 		part_count 				= MP->r_u16();

	mov	ecx, esi
	call	DWORD PTR __imp_?r_u16@?$IReaderBase@VIReader@@@@QAEGXZ
	movzx	eax, ax

; 95   : 
; 96   : 		for (u16 part_i=0; part_i<part_count; part_i++)

	test	ax, ax
	jbe	$LN647@load@7
	mov	ebx, DWORD PTR _this$[esp+272]
	movzx	eax, ax

; 101  : 			PART.bones.resize	(MP->r_u16());

	mov	DWORD PTR $T519274[esp+272], 0
	add	ebx, 72					; 00000048H
	mov	DWORD PTR tv992[esp+272], eax
$LL47@load@7:
	mov	esi, DWORD PTR _MP$[esp+272]
	push	128					; 00000080H
	lea	ecx, DWORD PTR _buf$124515[esp+276]
	push	ecx
	mov	ecx, esi
	call	DWORD PTR __imp_?r_stringZ@IReader@@QAEXPADI@Z
	lea	edx, DWORD PTR _buf$124515[esp+272]
	push	edx
	call	DWORD PTR __imp___strlwr
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	test	eax, eax
	je	SHORT $LN97@load@7

; 97   : 		{
; 98   : 			CPartDef& PART		= m_partition[part_i];
; 99   : 			MP->r_stringZ		(buf,sizeof(buf));
; 100  : 			PART.Name			= _strlwr(buf);

	add	DWORD PTR [eax], 1
$LN97@load@7:
	mov	ecx, DWORD PTR [ebx]
	test	ecx, ecx
	je	SHORT $LN100@load@7
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [ebx]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN100@load@7
	mov	DWORD PTR [ebx], 0
$LN100@load@7:

; 101  : 			PART.bones.resize	(MP->r_u16());

	mov	ecx, esi
	mov	DWORD PTR [ebx], eax
	call	DWORD PTR __imp_?r_u16@?$IReaderBase@VIReader@@@@QAEGXZ
	movzx	ecx, ax
	lea	esi, DWORD PTR [ebx+4]
	lea	eax, DWORD PTR $T519274[esp+272]
	mov	edx, esi
	call	?resize@?$_Impl_vector@IV?$xalloc@I@@@priv@stlp_std@@QAEXIABI@Z ; stlp_std::priv::_Impl_vector<unsigned int,xalloc<unsigned int> >::resize

; 102  : 
; 103  : 			for (xr_vector<u32>::iterator b_it=PART.bones.begin(); b_it<PART.bones.end(); b_it++)

	mov	esi, DWORD PTR [esi]
	cmp	esi, DWORD PTR [ebx+8]
	jae	$LN42@load@7
	npad	5
$LL44@load@7:

; 104  : 			{
; 105  : 				MP->r_stringZ	(buf,sizeof(buf));

	mov	edi, DWORD PTR _MP$[esp+272]
	push	128					; 00000080H
	lea	edx, DWORD PTR _buf$124515[esp+276]
	push	edx
	mov	ecx, edi
	call	DWORD PTR __imp_?r_stringZ@IReader@@QAEXPADI@Z

; 106  : 				u16 m_idx 		= u16			(MP->r_u32());

	mov	ecx, edi
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ

; 107  : 				*b_it			= find_bone_id	(bones,buf);

	mov	edx, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
	push	ecx
	mov	edi, esp
	movzx	eax, ax
	lea	ecx, DWORD PTR _buf$124515[esp+276]
	mov	DWORD PTR [edi], 0
	push	ecx
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR _m_idx$124542[esp+280], eax
	call	DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	test	eax, eax
	je	SHORT $LN122@load@7
	add	DWORD PTR [eax], 1
$LN122@load@7:
	mov	ecx, DWORD PTR [edi]
	test	ecx, ecx
	je	SHORT $LN125@load@7
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [edi]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN125@load@7
	mov	DWORD PTR [edi], 0
$LN125@load@7:
	mov	ecx, DWORD PTR _bones$[ebp]
	mov	DWORD PTR [edi], eax
	call	?find_bone_id@@YAGPAV?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@Vshared_str@@@Z ; find_bone_id
	movzx	eax, ax
	movzx	edx, ax
	add	esp, 4

; 108  : #ifdef _EDITOR
; 109  : 				if (*b_it==BI_NONE )
; 110  :                 {
; 111  : 					bRes		= false;
; 112  : 					Msg			("!Can't find bone: '%s'", buf);
; 113  : 				}
; 114  : 
; 115  : 				if (rm_bones.size() <= m_idx)
; 116  :                 {
; 117  : 					bRes		= false;
; 118  : 					Msg			("!Can't load: '%s' invalid bones count", N);
; 119  : 				}
; 120  : #else
; 121  : 				VERIFY3			(*b_it!=BI_NONE,"Can't find bone:", buf);
; 122  : #endif
; 123  : 				if (bRes)		rm_bones[m_idx] = u16(*b_it);

	lea	ecx, DWORD PTR _rm_bones$[esp+272]
	mov	DWORD PTR [esi], edx
	call	?begin@?$_Impl_vector@GV?$xalloc@G@@@priv@stlp_std@@QAEPAGXZ ; stlp_std::priv::_Impl_vector<unsigned short,xalloc<unsigned short> >::begin
	movzx	ecx, WORD PTR _m_idx$124542[esp+272]
	mov	dx, WORD PTR [esi]
	add	esi, 4
	mov	WORD PTR [eax+ecx*2], dx
	cmp	esi, DWORD PTR [ebx+8]
	jb	$LL44@load@7
$LN42@load@7:

; 95   : 
; 96   : 		for (u16 part_i=0; part_i<part_count; part_i++)

	add	ebx, 16					; 00000010H
	sub	DWORD PTR tv992[esp+272], 1
	jne	$LL47@load@7
$LN647@load@7:

; 124  : 			}
; 125  : 			part_bone_cnt		= u16(part_bone_cnt + (u16)PART.bones.size());
; 126  : 		}
; 127  : 
; 128  : #ifdef _EDITOR
; 129  : 		if (part_bone_cnt!=(u16)bones->size()){
; 130  : 			bRes = false;
; 131  : 			Msg("!Different bone count[%s] [Object: '%d' <-> Motions: '%d']", N, bones->size(),part_bone_cnt);
; 132  : 		}
; 133  : #else
; 134  : 		VERIFY3(part_bone_cnt==(u16)bones->size(),"Different bone count '%s'",N);
; 135  : #endif
; 136  : 		if (bRes)
; 137  : 		{
; 138  : 			// motion defs (cycle&fx)
; 139  : 			u16 mot_count			= MP->r_u16();

	mov	ecx, DWORD PTR _MP$[esp+272]
	call	DWORD PTR __imp_?r_u16@?$IReaderBase@VIReader@@@@QAEGXZ

; 140  :             m_mdefs.resize			(mot_count);

	mov	ecx, DWORD PTR _this$[esp+272]
	movzx	ebx, ax
	lea	eax, DWORD PTR $T519276[esp+272]
	push	eax
	xor	edi, edi
	movzx	eax, bx
	add	ecx, 164				; 000000a4H
	mov	DWORD PTR _mot_count$124553[esp+276], ebx
	mov	DWORD PTR $T519276[esp+292], edi
	mov	DWORD PTR $T519276[esp+296], edi
	mov	DWORD PTR $T519276[esp+300], edi
	call	?resize@?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEXIABVCMotionDef@@@Z ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::resize
	mov	esi, DWORD PTR $T519276[esp+288]
	push	ecx
	mov	eax, esp
	push	ecx
	mov	ecx, DWORD PTR $T519276[esp+300]
	mov	DWORD PTR [eax], esi
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVmotion_marks@@@stlp_std@@Vmotion_marks@@@stlp_std@@YAXV?$reverse_iterator@PAVmotion_marks@@@0@0PAVmotion_marks@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<motion_marks *>,motion_marks>
	add	esp, 8
	cmp	esi, edi
	je	SHORT $LN203@load@7
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN203@load@7:

; 141  : 
; 142  : 			for (u16 mot_i=0; mot_i<mot_count; mot_i++)

	cmp	bx, di
	jbe	$LN31@load@7
	mov	DWORD PTR tv2350[esp+272], 0
	npad	6
$LL33@load@7:

; 143  : 			{
; 144  : 				MP->r_stringZ		(buf,sizeof(buf));

	mov	ecx, DWORD PTR _MP$[esp+272]
	push	128					; 00000080H
	lea	edx, DWORD PTR _buf$124515[esp+276]
	push	edx
	call	DWORD PTR __imp_?r_stringZ@IReader@@QAEXPADI@Z

; 145  : 				shared_str nm		= _strlwr		(buf);

	lea	eax, DWORD PTR _buf$124515[esp+272]
	push	eax
	call	DWORD PTR __imp___strlwr
	mov	ecx, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
	mov	ecx, DWORD PTR [ecx]
	add	esp, 4
	push	eax
	call	DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	mov	esi, eax
	test	esi, esi
	je	SHORT $LN211@load@7
	add	DWORD PTR [esi], 1
$LN211@load@7:

; 146  : 				u32 dwFlags			= MP->r_u32		();

	mov	ecx, DWORD PTR _MP$[esp+272]
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ

; 147  : 				CMotionDef&	D		= m_mdefs[mot_i];
; 148  :                 D.Load				(MP,dwFlags,vers);

	mov	edx, DWORD PTR _vers$124513[esp+272]
	mov	ebx, eax
	mov	eax, DWORD PTR _MP$[esp+272]
	push	edx
	push	ebx
	push	eax
	mov	eax, DWORD PTR _this$[esp+284]
	mov	ecx, DWORD PTR [eax+164]
	add	ecx, DWORD PTR tv2350[esp+284]
	add	eax, 164				; 000000a4H
	call	?Load@CMotionDef@@QAEXPAVIReader@@IG@Z	; CMotionDef::Load

; 149  : //.             m_mdefs.push_back	(D);
; 150  : 				
; 151  : 				if (dwFlags&esmFX)	

	test	bl, 1
	je	SHORT $LN30@load@7

; 152  : 					m_fx.insert		(mk_pair(nm,mot_i));

	test	esi, esi
	je	SHORT $LN261@load@7
	add	DWORD PTR [esi], 1
	add	DWORD PTR [esi], 1
	add	DWORD PTR [esi], -1
	add	DWORD PTR [esi], 1
$LN261@load@7:
	mov	eax, DWORD PTR _this$[esp+272]
	lea	ecx, DWORD PTR $T519277[esp+272]
	push	ecx
	lea	edx, DWORD PTR $T519280[esp+276]
	push	edx
	add	eax, 48					; 00000030H
	push	eax
	mov	DWORD PTR $T519277[esp+284], esi
	mov	WORD PTR $T519277[esp+288], di
	call	?insert_unique@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAE?AU?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@_N@3@ABU?$pair@$$CBVshared_str@@G@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::insert_unique
	test	esi, esi
	je	SHORT $LN375@load@7
	add	DWORD PTR [esi], -1
	jne	SHORT $LN328@load@7
	mov	DWORD PTR $T519277[esp+272], 0

; 153  : 				else				

	jmp	SHORT $LN328@load@7
$LN30@load@7:

; 154  : 					m_cycle.insert	(mk_pair(nm,mot_i));

	test	esi, esi
	je	SHORT $LN318@load@7
	add	DWORD PTR [esi], 1
	add	DWORD PTR [esi], 1
	add	DWORD PTR [esi], -1
	add	DWORD PTR [esi], 1
$LN318@load@7:
	mov	eax, DWORD PTR _this$[esp+272]
	lea	ecx, DWORD PTR $T519281[esp+272]
	push	ecx
	lea	edx, DWORD PTR $T519284[esp+276]
	push	edx
	add	eax, 24					; 00000018H
	push	eax
	mov	DWORD PTR $T519281[esp+284], esi
	mov	WORD PTR $T519281[esp+288], di
	call	?insert_unique@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAE?AU?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@_N@3@ABU?$pair@$$CBVshared_str@@G@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::insert_unique
	test	esi, esi
	je	SHORT $LN375@load@7
	add	DWORD PTR [esi], -1
	jne	SHORT $LN328@load@7
	mov	DWORD PTR $T519281[esp+272], 0
$LN328@load@7:
	add	DWORD PTR [esi], -1

; 155  : 
; 156  :                 m_motion_map.insert	(mk_pair(nm,mot_i));

	add	DWORD PTR [esi], 1
	add	DWORD PTR [esi], 1
	add	DWORD PTR [esi], -1
	add	DWORD PTR [esi], 1
$LN375@load@7:
	mov	eax, DWORD PTR _this$[esp+272]
	lea	ecx, DWORD PTR $T519285[esp+272]
	push	ecx
	lea	edx, DWORD PTR $T519288[esp+276]
	push	edx
	push	eax
	mov	DWORD PTR $T519285[esp+284], esi
	mov	WORD PTR $T519285[esp+288], di
	call	?insert_unique@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAE?AU?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@2@@priv@stlp_std@@_N@3@ABU?$pair@$$CBVshared_str@@G@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::insert_unique
	test	esi, esi
	je	SHORT $LN32@load@7
	add	DWORD PTR [esi], -1
	jne	SHORT $LN385@load@7
	mov	DWORD PTR $T519285[esp+272], 0
$LN385@load@7:
	add	DWORD PTR [esi], -1

; 157  : 			}

	add	DWORD PTR [esi], -1
$LN32@load@7:
	add	DWORD PTR tv2350[esp+272], 28		; 0000001cH
	add	edi, 1
	cmp	di, WORD PTR _mot_count$124553[esp+272]
	jb	$LL33@load@7
$LN31@load@7:

; 158  : 		}
; 159  : 		MP->close();

	mov	ecx, DWORD PTR _MP$[esp+272]
	call	DWORD PTR __imp_?close@IReader@@QAEXXZ
	jmp	SHORT $LN27@load@7
$LN52@load@7:

; 160  : 	}else
; 161  : 	{
; 162  : 		Debug.fatal	(DEBUG_INFO,"Old skinned model version unsupported! (%s)",N);

	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	edi
	push	OFFSET ??_C@_0CM@GCPKLGHM@Old?5skinned?5model?5version?5unsupp@
	push	OFFSET ??_C@_0BE@FMNFMAHB@motions_value?3?3load?$AA@
	push	162					; 000000a2H
	push	OFFSET ??_C@_0DI@HJAAPJIP@D?3?2CLEARSKY?2sources?2engine?2xrEng@
	push	ecx
	call	DWORD PTR __imp_?fatal@xrDebug@@QAAXPBDH00ZZ
	add	esp, 24					; 00000018H
$LN27@load@7:

; 163  : 	}
; 164  : 	if (!bRes)	return false;
; 165  : 
; 166  : 	// Load animation
; 167  : 	IReader*	MS		= data->open_chunk(OGF_S_MOTIONS);

	mov	ecx, DWORD PTR _data$[ebp]
	push	14					; 0000000eH
	call	DWORD PTR __imp_?open_chunk@IReader@@QAEPAV1@I@Z
	mov	esi, eax

; 168  : 	if (!MS) 			return false;

	test	esi, esi
	jne	SHORT $LN26@load@7
	lea	ecx, DWORD PTR _rm_bones$[esp+272]
	call	??1?$_Impl_vector@GV?$xalloc@G@@@priv@stlp_std@@QAE@XZ ; stlp_std::priv::_Impl_vector<unsigned short,xalloc<unsigned short> >::~_Impl_vector<unsigned short,xalloc<unsigned short> >
	xor	eax, eax

; 233  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN26@load@7:

; 169  : 
; 170  : 	u32			dwCNT	= 0;
; 171  : 	MS->r_chunk_safe	(0,&dwCNT,sizeof(dwCNT));

	push	4
	lea	edx, DWORD PTR _dwCNT$[esp+276]
	xor	edi, edi
	push	edx
	push	edi
	mov	ecx, esi
	mov	DWORD PTR _dwCNT$[esp+284], edi
	call	DWORD PTR __imp_?r_chunk_safe@?$IReaderBase@VIReader@@@@QAEHIPAXI@Z

; 172  :     VERIFY		(dwCNT<0x3FFF); // MotionID 2 bit - slot, 14 bit - motion index
; 173  : 
; 174  : 	// set per bone motion size
; 175  : 	for (u32 i=0; i<bones->size(); i++)

	mov	ebx, DWORD PTR _bones$[ebp]
	mov	ecx, DWORD PTR [ebx]
	mov	eax, DWORD PTR [ebx+4]
	sub	eax, ecx
	sar	eax, 2
	je	SHORT $LN20@load@7
	npad	1
$LL22@load@7:

; 176  : 		m_motions[bones->at(i)->name].resize(dwCNT);

	xor	edx, edx
	cmp	edi, eax
	mov	DWORD PTR $T519291[esp+276], edx
	mov	DWORD PTR $T519291[esp+280], edx
	mov	DWORD PTR $T519291[esp+284], edx
	jae	$LN638@load@7
	mov	eax, DWORD PTR _dwCNT$[esp+272]
	mov	DWORD PTR $T520713[esp+272], eax
	mov	eax, DWORD PTR [ecx+edi*4]
	mov	ecx, DWORD PTR _this$[esp+272]
	add	ecx, 140				; 0000008cH
	add	eax, 8
	push	ecx
	call	??$?AVshared_str@@@?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAEAAV?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@ABVshared_str@@@Z ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::operator[]<shared_str>
	lea	edx, DWORD PTR $T519291[esp+272]
	mov	ecx, eax
	mov	eax, DWORD PTR $T520713[esp+272]
	push	edx
	call	?resize@?$_Impl_vector@VCMotion@@V?$xalloc@VCMotion@@@@@priv@stlp_std@@QAEXIABVCMotion@@@Z ; stlp_std::priv::_Impl_vector<CMotion,xalloc<CMotion> >::resize
	mov	ecx, DWORD PTR [ebx]
	mov	eax, DWORD PTR [ebx+4]
	sub	eax, ecx
	add	edi, 1
	sar	eax, 2
	cmp	edi, eax
	jb	SHORT $LL22@load@7
$LN20@load@7:

; 177  : 
; 178  : 	// load motions
; 179  : 	for (u16 m_idx=0; m_idx<(u16)dwCNT; m_idx++){

	xor	edi, edi
	cmp	WORD PTR _dwCNT$[esp+272], di
	mov	DWORD PTR _m_idx$124772[esp+272], edi
	jbe	$LN17@load@7
$LL19@load@7:

; 180  : 		string128			mname;
; 181  : 		R_ASSERT			(MS->find_chunk(m_idx+1));             

	cmp	BYTE PTR ?ignore_always@?CI@??load@motions_value@@QAEHPBDPAVIReader@@PAV?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@@Z@4_NA, 0
	jne	SHORT $LN15@load@7
	movzx	eax, di
	push	0
	add	eax, 1
	push	eax
	mov	ecx, esi
	call	DWORD PTR __imp_?find_chunk@IReader@@QAEIIPAH@Z
	test	eax, eax
	jne	SHORT $LN15@load@7
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?CI@??load@motions_value@@QAEHPBDPAVIReader@@PAV?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@@Z@4_NA
	push	OFFSET ??_C@_0BE@FMNFMAHB@motions_value?3?3load?$AA@
	push	181					; 000000b5H
	push	OFFSET ??_C@_0DI@HJAAPJIP@D?3?2CLEARSKY?2sources?2engine?2xrEng@
	push	OFFSET ??_C@_0BI@DHGIHFMH@MS?9?$DOfind_chunk?$CIm_idx?$CL1?$CJ?$AA@
	call	DWORD PTR __imp_?fail@xrDebug@@QAEXPBD0H0AA_N@Z
$LN15@load@7:

; 182  : 		MS->r_stringZ		(mname,sizeof(mname));

	push	128					; 00000080H
	lea	ecx, DWORD PTR _mname$124777[esp+276]
	push	ecx
	mov	ecx, esi
	call	DWORD PTR __imp_?r_stringZ@IReader@@QAEXPADI@Z

; 183  : #ifdef _DEBUG        
; 184  : 		// sanity check
; 185  : 		xr_strlwr			(mname);
; 186  :         accel_map::iterator I= m_motion_map.find(mname); 
; 187  :         VERIFY3				(I!=m_motion_map.end(),"Can't find motion:",mname);
; 188  :         VERIFY3				(I->second==m_idx,"Invalid motion index:",mname);
; 189  : #endif
; 190  : 		u32 dwLen			= MS->r_u32();

	mov	ecx, esi
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ
	mov	ebx, eax

; 191  : 		for (u32 i=0; i<bones->size(); i++){

	mov	eax, DWORD PTR _bones$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [eax]
	mov	DWORD PTR _dwLen$124785[esp+272], ebx
	sar	edx, 2
	mov	DWORD PTR _i$124786[esp+272], 0
	je	$LN18@load@7
	mov	edi, eax
	jmp	SHORT $LN12@load@7
$LN638@load@7:

; 176  : 		m_motions[bones->at(i)->name].resize(dwCNT);

	push	OFFSET ??_C@_06NBFPPGEG@vector?$AA@
	call	DWORD PTR __imp__puts
	add	esp, 4
	call	DWORD PTR __imp__abort
$LN655@load@7:
	npad	3
$LL648@load@7:

; 191  : 		for (u32 i=0; i<bones->size(); i++){

	mov	ebx, DWORD PTR _dwLen$124785[esp+272]
	mov	edi, ecx
$LN12@load@7:

; 192  : 			u16 bone_id		= rm_bones[i];

	lea	ecx, DWORD PTR _rm_bones$[esp+272]
	call	?begin@?$_Impl_vector@GV?$xalloc@G@@@priv@stlp_std@@QAEPAGXZ ; stlp_std::priv::_Impl_vector<unsigned short,xalloc<unsigned short> >::begin

; 193  : 			VERIFY2			(bone_id!=BI_NONE,"Invalid remap index.");
; 194  : 			CMotion&		M	= m_motions[bones->at(bone_id)->name][m_idx];

	mov	ecx, DWORD PTR _i$124786[esp+272]
	movzx	eax, WORD PTR [eax+ecx*2]
	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR [edi+4]
	sub	edx, ecx
	sar	edx, 2
	cmp	eax, edx
	jae	SHORT $LN638@load@7
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _this$[esp+272]
	add	ecx, 140				; 0000008cH
	add	eax, 8
	push	ecx
	call	??$?AVshared_str@@@?$map@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@U?$less@Vshared_str@@@stlp_std@@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@stlp_std@@QAEAAV?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@ABVshared_str@@@Z ; stlp_std::map<shared_str,xr_vector<CMotion,xalloc<CMotion> >,stlp_std::less<shared_str>,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::operator[]<shared_str>
	movzx	ecx, WORD PTR _m_idx$124772[esp+272]
	mov	eax, DWORD PTR [eax]
	lea	edx, DWORD PTR [ecx+ecx*4]
	lea	edi, DWORD PTR [eax+edx*8]

; 195  : 			M.set_count			(dwLen);

	movzx	edx, BYTE PTR [edi]
	mov	ecx, ebx
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [edi], ecx

; 196  : 			M.set_flags			(MS->r_u8());

	mov	ecx, esi
	call	DWORD PTR __imp_?r_u8@?$IReaderBase@VIReader@@@@QAEEXZ

; 197  :             
; 198  :             if (M.test_flag(flRKeyAbsent))	{

	test	al, 2
	mov	BYTE PTR [edi], al
	je	SHORT $LN6@load@7

; 199  :                 CKeyQR* r 		= (CKeyQR*)MS->pointer();

	mov	ebx, DWORD PTR [esi+12]
	add	ebx, DWORD PTR [esi+8]

; 200  : 				u32 crc_q		= crc32(r,sizeof(CKeyQR));

	push	8
	push	ebx
	call	DWORD PTR __imp_?crc32@@YAIPBXI@Z
	add	esp, 8

; 201  : 				M._keysR.create	(crc_q,1,r);

	push	ebx
	push	8
	push	eax
	mov	eax, DWORD PTR __imp_?g_pSharedMemoryContainer@@3PAVsmem_container@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?dock@smem_container@@QAEPAUsmem_value@@IIPAX@Z
	test	eax, eax
	je	SHORT $LN533@load@7
	add	DWORD PTR [eax], 1
$LN533@load@7:
	mov	ecx, DWORD PTR [edi+4]
	test	ecx, ecx
	je	SHORT $LN536@load@7
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [edi+4]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN536@load@7
	mov	DWORD PTR [edi+4], 0
$LN536@load@7:
	mov	DWORD PTR [edi+4], eax

; 202  :                 MS->advance		(1 * sizeof(CKeyQR));

	add	DWORD PTR [esi+12], 8

; 203  :             }else{

	jmp	SHORT $LN554@load@7
$LN6@load@7:

; 204  :                 u32 crc_q		= MS->r_u32	();

	mov	ecx, esi
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ

; 205  :                 M._keysR.create	(crc_q,dwLen,(CKeyQR*)MS->pointer());

	mov	ecx, DWORD PTR [esi+12]
	add	ecx, DWORD PTR [esi+8]
	mov	edx, DWORD PTR __imp_?g_pSharedMemoryContainer@@3PAVsmem_container@@A
	add	ebx, ebx
	push	ecx
	mov	ecx, DWORD PTR [edx]
	add	ebx, ebx
	add	ebx, ebx
	push	ebx
	push	eax
	call	DWORD PTR __imp_?dock@smem_container@@QAEPAUsmem_value@@IIPAX@Z
	test	eax, eax
	je	SHORT $LN547@load@7
	add	DWORD PTR [eax], 1
$LN547@load@7:
	mov	ecx, DWORD PTR [edi+4]
	test	ecx, ecx
	je	SHORT $LN550@load@7
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [edi+4]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN550@load@7
	mov	DWORD PTR [edi+4], 0
$LN550@load@7:
	mov	DWORD PTR [edi+4], eax

; 206  :                 MS->advance		(dwLen * sizeof(CKeyQR));

	add	DWORD PTR [esi+12], ebx
$LN554@load@7:

; 207  :             }
; 208  :             if (M.test_flag(flTKeyPresent))	

	test	BYTE PTR [edi], 1

; 209  :             {
; 210  :                 u32 crc_t		= MS->r_u32	();

	mov	ecx, esi
	je	$LN4@load@7
	call	DWORD PTR __imp_?r_u32@?$IReaderBase@VIReader@@@@QAEIXZ

; 211  :                 if(M.test_flag(flTKey16IsBit))
; 212  :                 {
; 213  :                     M._keysT16.create	(crc_t,dwLen,(CKeyQT16*)MS->pointer());

	mov	ecx, DWORD PTR [esi+12]
	mov	edx, DWORD PTR _dwLen$124785[esp+272]
	add	ecx, DWORD PTR [esi+8]
	test	BYTE PTR [edi], 4
	lea	ebx, DWORD PTR [edx+edx*2]
	mov	edx, DWORD PTR __imp_?g_pSharedMemoryContainer@@3PAVsmem_container@@A
	push	ecx
	mov	ecx, DWORD PTR [edx]
	je	SHORT $LN3@load@7
	add	ebx, ebx
	push	ebx
	push	eax
	call	DWORD PTR __imp_?dock@smem_container@@QAEPAUsmem_value@@IIPAX@Z
	test	eax, eax
	je	SHORT $LN565@load@7
	add	DWORD PTR [eax], 1
$LN565@load@7:
	mov	ecx, DWORD PTR [edi+12]
	test	ecx, ecx
	je	SHORT $LN568@load@7
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [edi+12]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN568@load@7
	mov	DWORD PTR [edi+12], 0
$LN568@load@7:
	mov	DWORD PTR [edi+12], eax

; 214  :                     MS->advance			(dwLen * sizeof(CKeyQT16));
; 215  :                 }else

	jmp	SHORT $LN654@load@7
$LN3@load@7:

; 216  :                 {
; 217  :                     M._keysT8.create	(crc_t,dwLen,(CKeyQT8*)MS->pointer());

	push	ebx
	push	eax
	call	DWORD PTR __imp_?dock@smem_container@@QAEPAUsmem_value@@IIPAX@Z
	test	eax, eax
	je	SHORT $LN579@load@7
	add	DWORD PTR [eax], 1
$LN579@load@7:
	mov	ecx, DWORD PTR [edi+8]
	test	ecx, ecx
	je	SHORT $LN582@load@7
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [edi+8]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN582@load@7
	mov	DWORD PTR [edi+8], 0
$LN582@load@7:
	mov	DWORD PTR [edi+8], eax
$LN654@load@7:

; 218  :                     MS->advance			(dwLen * sizeof(CKeyQT8));

	add	DWORD PTR [esi+12], ebx

; 219  :                 };
; 220  :                 
; 221  :                 MS->r_fvector3	(M._sizeT);

	lea	edx, DWORD PTR [edi+28]
	push	edx
	mov	ecx, esi
	call	DWORD PTR __imp_?r_fvector3@?$IReaderBase@VIReader@@@@QAEXAAU?$_vector3@M@@@Z

; 222  :                 MS->r_fvector3	(M._initT);

	mov	ecx, esi
$LN4@load@7:

; 223  :             }else
; 224  :             {
; 225  :                 MS->r_fvector3	(M._initT);

	add	edi, 16					; 00000010H
	push	edi
	call	DWORD PTR __imp_?r_fvector3@?$IReaderBase@VIReader@@@@QAEXAAU?$_vector3@M@@@Z
	mov	ecx, DWORD PTR _bones$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _i$124786[esp+272]
	add	eax, 1
	sar	edx, 2
	cmp	eax, edx
	mov	DWORD PTR _i$124786[esp+272], eax
	jb	$LL648@load@7

; 191  : 		for (u32 i=0; i<bones->size(); i++){

	mov	edi, DWORD PTR _m_idx$124772[esp+272]
$LN18@load@7:

; 177  : 
; 178  : 	// load motions
; 179  : 	for (u16 m_idx=0; m_idx<(u16)dwCNT; m_idx++){

	add	edi, 1
	cmp	di, WORD PTR _dwCNT$[esp+272]
	mov	DWORD PTR _m_idx$124772[esp+272], edi
	jb	$LL19@load@7
$LN17@load@7:

; 226  :             }
; 227  : 		}
; 228  : 	}
; 229  : //	Msg("Motions %d/%d %4d/%4d/%d, %s",p_cnt,m_cnt, m_load,m_total,m_r,N);
; 230  : 	MS->close();

	mov	ecx, esi
	call	DWORD PTR __imp_?close@IReader@@QAEXXZ

; 231  : 
; 232  : 	return bRes;

	lea	ecx, DWORD PTR _rm_bones$[esp+272]
	call	??1?$_Impl_vector@GV?$xalloc@G@@@priv@stlp_std@@QAE@XZ ; stlp_std::priv::_Impl_vector<unsigned short,xalloc<unsigned short> >::~_Impl_vector<unsigned short,xalloc<unsigned short> >

; 233  : }

	pop	edi
	pop	esi
	mov	eax, 1
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN653@load@7:
?load@motions_value@@QAEHPBDPAVIReader@@PAV?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@@Z ENDP ; motions_value::load
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$xr_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
??4?$xr_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@@QAEAAV0@ABV0@@Z PROC ; xr_vector<CMotionDef,xalloc<CMotionDef> >::operator=, COMDAT
; _this$ = ecx
; ___that$ = eax
	push	esi
	mov	esi, ecx
	push	eax
	call	??4?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::operator=
	mov	eax, esi
	pop	esi
	ret	0
??4?$xr_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@@QAEAAV0@ABV0@@Z ENDP ; xr_vector<CMotionDef,xalloc<CMotionDef> >::operator=
_TEXT	ENDS
PUBLIC	??4motions_value@@QAEAAU0@ABU0@@Z		; motions_value::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4motions_value@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4motions_value@@QAEAAU0@ABU0@@Z PROC			; motions_value::operator=, COMDAT
; _this$ = ecx
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR ___that$[esp+4]
	push	esi
	push	edi
	mov	edi, ecx
	mov	ebx, ebp
	mov	esi, edi
	call	??4?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::operator=
	lea	ebx, DWORD PTR [ebp+24]
	lea	esi, DWORD PTR [edi+24]
	call	??4?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::operator=
	lea	ebx, DWORD PTR [ebp+48]
	lea	esi, DWORD PTR [edi+48]
	call	??4?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::operator=
	lea	eax, DWORD PTR [ebp+72]
	push	eax
	lea	ecx, DWORD PTR [edi+72]
	call	??4CPartition@@QAEAAV0@ABV0@@Z
	mov	ecx, DWORD PTR [ebp+136]
	lea	ebx, DWORD PTR [ebp+140]
	lea	esi, DWORD PTR [edi+140]
	mov	DWORD PTR [edi+136], ecx
	call	??4?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::operator=
	lea	edx, DWORD PTR [ebp+164]
	push	edx
	lea	esi, DWORD PTR [edi+164]
	call	??4?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::operator=
	mov	ebp, DWORD PTR [ebp+176]
	test	ebp, ebp
	je	SHORT $LN25@operator@133
	add	DWORD PTR [ebp], 1
$LN25@operator@133:
	mov	eax, DWORD PTR [edi+176]
	test	eax, eax
	je	SHORT $LN33@operator@133
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [edi+176]
	cmp	DWORD PTR [eax], 0
	mov	eax, edi
	jne	SHORT $LN34@operator@133
	mov	DWORD PTR [edi+176], 0
	mov	DWORD PTR [edi+176], ebp
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	4
$LN33@operator@133:
	mov	eax, edi
$LN34@operator@133:
	mov	DWORD PTR [edi+176], ebp
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	4
??4motions_value@@QAEAAU0@ABU0@@Z ENDP			; motions_value::operator=
_TEXT	ENDS
PUBLIC	??0CPartition@@QAE@ABV0@@Z			; CPartition::CPartition
; Function compile flags: /Ogtpy
;	COMDAT ??0CPartition@@QAE@ABV0@@Z
_TEXT	SEGMENT
$T521531 = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CPartition@@QAE@ABV0@@Z PROC				; CPartition::CPartition, COMDAT
; _this$ = ecx
	sub	esp, 8
	mov	eax, DWORD PTR ___that$[esp+4]
	push	ebx
	push	ebp
	push	esi
	mov	ebp, ecx
	push	edi
	mov	DWORD PTR _this$[esp+24], ecx
	mov	esi, ecx
	mov	DWORD PTR $T521531[esp+24], 3
	lea	edi, DWORD PTR [eax+4]
	sub	ebp, eax
$LL4@CPartition:
	xor	edx, edx
	mov	DWORD PTR [esi], edx
	mov	eax, DWORD PTR [edi-4]
	cmp	eax, edx
	je	SHORT $LN11@CPartition
	add	DWORD PTR [eax], 1
$LN11@CPartition:
	mov	ecx, DWORD PTR [esi]
	cmp	ecx, edx
	je	SHORT $LN14@CPartition
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [esi]
	cmp	DWORD PTR [ecx], edx
	jne	SHORT $LN14@CPartition
	mov	DWORD PTR [esi], edx
$LN14@CPartition:
	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR [edi+4]
	sub	eax, DWORD PTR [edi]
	mov	DWORD PTR [edi+ebp], edx
	sar	eax, 2
	mov	DWORD PTR [esi+8], edx
	lea	ebx, DWORD PTR [eax*4]
	mov	DWORD PTR [esi+12], edx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	ebx
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	add	ebx, eax
	mov	DWORD PTR [edi+ebp], eax
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], ebx
	mov	edx, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [edi]
	cmp	edx, ecx
	je	SHORT $LN55@CPartition
	mov	ebx, edx
	sub	ebx, ecx
	push	ebx
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, ebx
$LN55@CPartition:
	mov	DWORD PTR [esi+8], eax
	add	esi, 16					; 00000010H
	add	edi, 16					; 00000010H
	sub	DWORD PTR $T521531[esp+24], 1
	jns	SHORT $LL4@CPartition
	mov	eax, DWORD PTR _this$[esp+24]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	4
??0CPartition@@QAE@ABV0@@Z ENDP				; CPartition::CPartition
_TEXT	ENDS
PUBLIC	??1CPartition@@QAE@XZ				; CPartition::~CPartition
; Function compile flags: /Ogtpy
;	COMDAT ??1CPartition@@QAE@XZ
_TEXT	SEGMENT
??1CPartition@@QAE@XZ PROC				; CPartition::~CPartition, COMDAT
; _this$ = ecx
	push	ebx
	mov	ebx, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	push	esi
	push	edi
	lea	esi, DWORD PTR [ecx+64]
	mov	edi, 3
$LL4@CPartition@2:
	mov	eax, DWORD PTR [esi-12]
	sub	esi, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN46@CPartition@2
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	ebx
$LN46@CPartition@2:
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN51@CPartition@2
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN51@CPartition@2
	mov	DWORD PTR [esi], 0
$LN51@CPartition@2:
	sub	edi, 1
	jns	SHORT $LL4@CPartition@2
	pop	edi
	pop	esi
	pop	ebx
	ret	0
??1CPartition@@QAE@XZ ENDP				; CPartition::~CPartition
_TEXT	ENDS
PUBLIC	??0CPartition@@QAE@XZ				; CPartition::CPartition
; Function compile flags: /Ogtpy
;	COMDAT ??0CPartition@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPartition@@QAE@XZ PROC				; CPartition::CPartition, COMDAT
; _this$ = ecx
	push	ecx
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	push	esi
	push	edi
	mov	DWORD PTR _this$[esp+20], ecx
	mov	esi, ecx
	mov	ebx, 3
	xor	edi, edi
	npad	8
$LL4@CPartition@3:
	mov	eax, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
	mov	DWORD PTR [esi], edi
	mov	ecx, DWORD PTR [eax]
	push	edi
	call	ebp
	cmp	eax, edi
	je	SHORT $LN34@CPartition@3
	add	DWORD PTR [eax], 1
$LN34@CPartition@3:
	mov	ecx, DWORD PTR [esi]
	cmp	ecx, edi
	je	SHORT $LN14@CPartition@3
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [esi]
	cmp	DWORD PTR [ecx], edi
	jne	SHORT $LN14@CPartition@3
	mov	DWORD PTR [esi], edi
$LN14@CPartition@3:
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], edi
	mov	DWORD PTR [esi+8], edi
	mov	DWORD PTR [esi+12], edi
	add	esi, 16					; 00000010H
	sub	ebx, 1
	jns	SHORT $LL4@CPartition@3
	mov	eax, DWORD PTR _this$[esp+20]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	pop	ecx
	ret	0
??0CPartition@@QAE@XZ ENDP				; CPartition::CPartition
PUBLIC	??0motions_value@@QAE@ABU0@@Z			; motions_value::motions_value
; Function compile flags: /Ogtpy
;	COMDAT ??0motions_value@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0motions_value@@QAE@ABU0@@Z PROC			; motions_value::motions_value, COMDAT
; _this$ = ecx
	push	ebx
	mov	ebx, DWORD PTR ___that$[esp]
	push	ebp
	push	esi
	mov	ebp, ecx
	push	edi
	mov	edi, ebx
	mov	esi, ebp
	call	??0?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >
	lea	edi, DWORD PTR [ebx+24]
	lea	esi, DWORD PTR [ebp+24]
	call	??0?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >
	lea	edi, DWORD PTR [ebx+48]
	lea	esi, DWORD PTR [ebp+48]
	call	??0?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >
	lea	eax, DWORD PTR [ebx+72]
	push	eax
	lea	ecx, DWORD PTR [ebp+72]
	call	??0CPartition@@QAE@ABV0@@Z
	mov	ecx, DWORD PTR [ebx+136]
	lea	edi, DWORD PTR [ebx+140]
	lea	esi, DWORD PTR [ebp+140]
	mov	DWORD PTR [ebp+136], ecx
	call	??0?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >
	add	ebx, 164				; 000000a4H
	lea	esi, DWORD PTR [ebp+164]
	call	??0?$_Impl_vector@VCMotionDef@@V?$xalloc@VCMotionDef@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<CMotionDef,xalloc<CMotionDef> >::_Impl_vector<CMotionDef,xalloc<CMotionDef> >
	mov	eax, DWORD PTR ___that$[esp+12]
	xor	edx, edx
	mov	DWORD PTR [ebp+176], edx
	mov	eax, DWORD PTR [eax+176]
	cmp	eax, edx
	je	SHORT $LN25@motions_va
	add	DWORD PTR [eax], 1
$LN25@motions_va:
	mov	ecx, DWORD PTR [ebp+176]
	cmp	ecx, edx
	je	SHORT $LN33@motions_va
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [ebp+176]
	cmp	DWORD PTR [ecx], edx
$LN33@motions_va:
	pop	edi
	mov	DWORD PTR [ebp+176], eax
	pop	esi
	mov	eax, ebp
	pop	ebp
	pop	ebx
	ret	4
??0motions_value@@QAE@ABU0@@Z ENDP			; motions_value::motions_value
_TEXT	ENDS
PUBLIC	??1motions_value@@QAE@XZ			; motions_value::~motions_value
; Function compile flags: /Ogtpy
;	COMDAT ??1motions_value@@QAE@XZ
_TEXT	SEGMENT
??1motions_value@@QAE@XZ PROC				; motions_value::~motions_value, COMDAT
; _this$ = ecx
	push	ebx
	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+176]
	xor	ebx, ebx
	cmp	eax, ebx
	push	edi
	je	SHORT $LN5@motions_va@2
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [esi+176]
	cmp	DWORD PTR [eax], ebx
	jne	SHORT $LN5@motions_va@2
	mov	DWORD PTR [esi+176], ebx
$LN5@motions_va@2:
	mov	ecx, DWORD PTR [esi+168]
	mov	eax, DWORD PTR [esi+164]
	push	ecx
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	call	??$__destroy_range_aux@V?$reverse_iterator@PAVCMotionDef@@@stlp_std@@VCMotionDef@@@stlp_std@@YAXV?$reverse_iterator@PAVCMotionDef@@@0@0PAVCMotionDef@@ABU__false_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CMotionDef *>,CMotionDef>
	mov	eax, DWORD PTR [esi+164]
	add	esp, 8
	cmp	eax, ebx
	je	SHORT $LN44@motions_va@2
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN44@motions_va@2:
	cmp	DWORD PTR [esi+156], ebx
	lea	edi, DWORD PTR [esi+140]
	je	SHORT $LN53@motions_va@2
	mov	ecx, DWORD PTR [edi+4]
	push	ecx
	mov	ecx, edi
	call	?_M_erase@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@V?$xr_vector@VCMotion@@V?$xalloc@VCMotion@@@@@@@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > >,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,xr_vector<CMotion,xalloc<CMotion> > > >,xalloc<stlp_std::pair<shared_str,xr_vector<CMotion,xalloc<CMotion> > > > >::_M_erase
	mov	DWORD PTR [edi+8], edi
	mov	DWORD PTR [edi+4], ebx
	mov	DWORD PTR [edi+12], edi
	mov	DWORD PTR [edi+16], ebx
$LN53@motions_va@2:
	lea	ecx, DWORD PTR [esi+72]
	call	??1CPartition@@QAE@XZ
	cmp	DWORD PTR [esi+64], ebx
	lea	edi, DWORD PTR [esi+48]
	je	SHORT $LN70@motions_va@2
	mov	edx, DWORD PTR [edi+4]
	push	edx
	mov	ecx, edi
	call	?_M_erase@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_erase
	mov	DWORD PTR [edi+8], edi
	mov	DWORD PTR [edi+4], ebx
	mov	DWORD PTR [edi+12], edi
	mov	DWORD PTR [edi+16], ebx
$LN70@motions_va@2:
	cmp	DWORD PTR [esi+40], ebx
	lea	edi, DWORD PTR [esi+24]
	je	SHORT $LN87@motions_va@2
	mov	eax, DWORD PTR [edi+4]
	push	eax
	mov	ecx, edi
	call	?_M_erase@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_erase
	mov	DWORD PTR [edi+8], edi
	mov	DWORD PTR [edi+4], ebx
	mov	DWORD PTR [edi+12], edi
	mov	DWORD PTR [edi+16], ebx
$LN87@motions_va@2:
	cmp	DWORD PTR [esi+16], ebx
	je	SHORT $LN104@motions_va@2
	mov	ecx, DWORD PTR [esi+4]
	push	ecx
	mov	ecx, esi
	call	?_M_erase@?$_Rb_tree@Vshared_str@@Uaccel_str_pred@@U?$pair@$$CBVshared_str@@G@stlp_std@@U?$_Select1st@U?$pair@$$CBVshared_str@@G@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@G@stlp_std@@@64@V?$xalloc@U?$pair@Vshared_str@@G@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,accel_str_pred,stlp_std::pair<shared_str const ,unsigned short>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,unsigned short> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,unsigned short> >,xalloc<stlp_std::pair<shared_str,unsigned short> > >::_M_erase
	mov	DWORD PTR [esi+8], esi
	mov	DWORD PTR [esi+4], ebx
	mov	DWORD PTR [esi+12], esi
	mov	DWORD PTR [esi+16], ebx
$LN104@motions_va@2:
	pop	edi
	pop	esi
	pop	ebx
	ret	0
??1motions_value@@QAE@XZ ENDP				; motions_value::~motions_value
_TEXT	ENDS
PUBLIC	??0motions_value@@QAE@XZ			; motions_value::motions_value
; Function compile flags: /Ogtpy
;	COMDAT ??0motions_value@@QAE@XZ
_TEXT	SEGMENT
$T542398 = -1						; size = 1
??0motions_value@@QAE@XZ PROC				; motions_value::motions_value, COMDAT
; _this$ = ecx
	push	ecx
	push	ebx
	xor	ebx, ebx
	xor	eax, eax
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], eax
	mov	BYTE PTR [esi], bl
	mov	DWORD PTR [esi+4], ebx
	mov	DWORD PTR [esi+8], esi
	mov	DWORD PTR [esi+12], esi
	mov	DWORD PTR [esi+16], ebx
	lea	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [eax+16], ebx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	BYTE PTR [eax], bl
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], eax
	mov	DWORD PTR [eax+12], eax
	lea	eax, DWORD PTR [esi+48]
	mov	DWORD PTR [eax], ecx
	lea	ecx, DWORD PTR [esi+72]
	mov	BYTE PTR [eax], bl
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], eax
	mov	DWORD PTR [eax+12], eax
	mov	DWORD PTR [eax+16], ebx
	call	??0CPartition@@QAE@XZ
	lea	eax, DWORD PTR [esi+140]
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	cl, BYTE PTR $T542398[esp+12]
	mov	BYTE PTR [eax], bl
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	DWORD PTR [eax+8], eax
	mov	DWORD PTR [eax+12], eax
	mov	BYTE PTR [eax+20], cl
	mov	DWORD PTR [esi+164], ebx
	mov	DWORD PTR [esi+168], ebx
	mov	DWORD PTR [esi+172], ebx
	mov	DWORD PTR [esi+176], ebx
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ecx
	ret	0
??0motions_value@@QAE@XZ ENDP				; motions_value::motions_value
; Function compile flags: /Ogtpy
;	COMDAT ??_Gmotions_value@@QAEPAXI@Z
_TEXT	SEGMENT
??_Gmotions_value@@QAEPAXI@Z PROC			; motions_value::`scalar deleting destructor', COMDAT
; _this$ = esi
	mov	ecx, esi
	call	??1motions_value@@QAE@XZ
	mov	eax, esi
	ret	0
??_Gmotions_value@@QAEPAXI@Z ENDP			; motions_value::`scalar deleting destructor'
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrmemory_subst_msvc.h
_TEXT	ENDS
;	COMDAT ??R?$xr_special_free@$0A@Umotions_value@@@@QAEXAAPAUmotions_value@@@Z
_TEXT	SEGMENT
??R?$xr_special_free@$0A@Umotions_value@@@@QAEXAAPAUmotions_value@@@Z PROC ; xr_special_free<0,motions_value>::operator(), COMDAT
; _ptr$ = esi

; 143  : 		ptr->~T			();

	mov	ecx, DWORD PTR [esi]
	call	??1motions_value@@QAE@XZ

; 144  : 		Memory.mem_free	(ptr);

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z

; 145  : 	}

	ret	0
??R?$xr_special_free@$0A@Umotions_value@@@@QAEXAAPAUmotions_value@@@Z ENDP ; xr_special_free<0,motions_value>::operator()
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$xr_delete@Umotions_value@@@@YAXAAPAUmotions_value@@@Z
_TEXT	SEGMENT
??$xr_delete@Umotions_value@@@@YAXAAPAUmotions_value@@@Z PROC ; xr_delete<motions_value>, COMDAT
; _ptr$ = esi

; 151  : 	if (ptr) 

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN1@xr_delete@48

; 152  : 	{
; 153  : 		xr_special_free<is_polymorphic<T>::result,T>()(ptr);

	call	??1motions_value@@QAE@XZ
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z

; 154  : 		ptr = NULL;

	mov	DWORD PTR [esi], 0
$LN1@xr_delete@48:

; 155  : 	}
; 156  : }

	ret	0
??$xr_delete@Umotions_value@@@@YAXAAPAUmotions_value@@@Z ENDP ; xr_delete<motions_value>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$xr_new@Umotions_value@@@@YAPAUmotions_value@@XZ
_TEXT	SEGMENT
??$xr_new@Umotions_value@@@@YAPAUmotions_value@@XZ PROC	; xr_new<motions_value>, COMDAT

; 68   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	180					; 000000b4H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 69   : 	return new (ptr) T();

	test	eax, eax
	je	SHORT $LN3@xr_new@46
	mov	ecx, eax
	jmp	??0motions_value@@QAE@XZ
$LN3@xr_new@46:
	xor	eax, eax

; 70   : }

	ret	0
??$xr_new@Umotions_value@@@@YAPAUmotions_value@@XZ ENDP	; xr_new<motions_value>
_TEXT	ENDS
PUBLIC	?clean@motions_container@@QAEX_N@Z		; motions_container::clean
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\skeletonmotions.cpp
;	COMDAT ?clean@motions_container@@QAEX_N@Z
_TEXT	SEGMENT
_force_destroy$ = 8					; size = 1
?clean@motions_container@@QAEX_N@Z PROC			; motions_container::clean, COMDAT
; _this$ = ecx

; 284  : 	SharedMotionsMapIt it	= container.begin();
; 285  : 	SharedMotionsMapIt _E	= container.end();
; 286  : 	if (force_destroy){

	cmp	BYTE PTR _force_destroy$[esp-4], 0
	push	ebx
	push	ebp
	push	esi
	mov	ebx, ecx
	mov	esi, DWORD PTR [ebx+8]
	push	edi
	je	$LN190@clean

; 287  : 		for (; it!=_E; it++){

	cmp	esi, ebx
	setne	al
	test	al, al
	je	SHORT $LN202@clean
	mov	ebp, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LL36@clean:

; 288  : 			motions_value*	sv = it->second;

	mov	edi, DWORD PTR [esi+20]

; 289  : 			xr_delete		(sv);

	test	edi, edi
	je	SHORT $LN7@clean
	mov	ecx, edi
	call	??1motions_value@@QAE@XZ
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	ebp
$LN7@clean:
	mov	eax, DWORD PTR [esi+12]
	test	eax, eax
	je	SHORT $LN42@clean
	mov	esi, eax
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	SHORT $LN38@clean
	npad	6

; 287  : 		for (; it!=_E; it++){

$LL46@clean:
	mov	esi, eax
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jne	SHORT $LL46@clean
	jmp	SHORT $LN38@clean
$LN42@clean:
	mov	eax, DWORD PTR [esi+4]
	cmp	esi, DWORD PTR [eax+12]
	jne	SHORT $LN39@clean
$LL40@clean:
	mov	esi, eax
	mov	eax, DWORD PTR [eax+4]
	cmp	esi, DWORD PTR [eax+12]
	je	SHORT $LL40@clean
$LN39@clean:
	cmp	DWORD PTR [esi+12], eax
	je	SHORT $LN38@clean
	mov	esi, eax
$LN38@clean:
	cmp	esi, ebx
	setne	al
	test	al, al
	jne	SHORT $LL36@clean
$LN202@clean:

; 290  : 		}
; 291  : 		container.clear		();

	cmp	DWORD PTR [ebx+16], 0
	je	$LN3@clean
	mov	eax, DWORD PTR [ebx+4]
	push	eax
	mov	ecx, ebx
	call	?_M_erase@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@AAEXPAU_Rb_tree_node_base@23@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::_M_erase
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebp
	mov	DWORD PTR [ebx+8], ebx
	mov	DWORD PTR [ebx+4], eax
	mov	DWORD PTR [ebx+12], ebx
	mov	DWORD PTR [ebx+16], eax
	pop	ebx

; 304  : 			}
; 305  : 		}
; 306  : 	}
; 307  : }

	ret	4
$LN190@clean:

; 292  : 	}else{
; 293  : 		for (; it!=_E; )	{

	cmp	esi, ebx
	setne	al
	test	al, al
	je	$LN3@clean
	npad	12
$LL4@clean:

; 294  : 			motions_value*	sv = it->second;

	mov	ebp, DWORD PTR [esi+20]

; 295  : 			if (0==sv->m_dwReference)	

	cmp	DWORD PTR [ebp+136], 0

; 296  : 			{
; 297  : 				SharedMotionsMapIt	i_current	= it;
; 298  : 				SharedMotionsMapIt	i_next		= ++it;

	mov	ecx, DWORD PTR [esi+12]
	jne	$LN2@clean
	test	ecx, ecx
	mov	edi, esi
	je	SHORT $LN105@clean
	mov	eax, DWORD PTR [ecx+8]
	test	eax, eax
	je	SHORT $LN108@clean
$LL109@clean:
	mov	ecx, eax
	mov	eax, DWORD PTR [ecx+8]
	test	eax, eax
	jne	SHORT $LL109@clean
$LN108@clean:
	mov	edi, ecx
	jmp	SHORT $LN101@clean
$LN105@clean:
	mov	eax, DWORD PTR [esi+4]
	cmp	esi, DWORD PTR [eax+12]
	jne	SHORT $LN102@clean
$LL103@clean:
	mov	edi, eax
	mov	eax, DWORD PTR [eax+4]
	cmp	edi, DWORD PTR [eax+12]
	je	SHORT $LL103@clean
$LN102@clean:
	cmp	DWORD PTR [edi+12], eax
	je	SHORT $LN101@clean
	mov	edi, eax
$LN101@clean:

; 299  : 				xr_delete			(sv);

	mov	ecx, ebp
	call	??1motions_value@@QAE@XZ
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	ebp
	mov	ebp, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	call	ebp

; 300  : 				container.erase		(i_current);

	lea	ecx, DWORD PTR [ebx+4]
	push	ecx
	lea	eax, DWORD PTR [ebx+12]
	lea	edx, DWORD PTR [ebx+8]
	mov	ecx, esi
	call	?_Rebalance_for_erase@?$_Rb_global@_N@priv@stlp_std@@SAPAU_Rb_tree_node_base@23@PAU423@AAPAU423@11@Z ; stlp_std::priv::_Rb_global<bool>::_Rebalance_for_erase
	mov	ecx, DWORD PTR [eax+16]
	add	esp, 4
	test	ecx, ecx
	je	SHORT $LN203@clean
	add	DWORD PTR [ecx], -1
	mov	edx, DWORD PTR [eax+16]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN203@clean
	mov	DWORD PTR [eax+16], 0
$LN203@clean:
	test	eax, eax
	je	SHORT $LN165@clean
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	ebp
$LN165@clean:
	add	DWORD PTR [ebx+16], -1

; 301  : 				it					= i_next;

	mov	esi, edi

; 302  : 			} else {

	jmp	SHORT $LN176@clean
$LN2@clean:

; 303  : 				it++;

	test	ecx, ecx
	je	SHORT $LN180@clean
	mov	eax, DWORD PTR [ecx+8]
	test	eax, eax
	je	SHORT $LN183@clean
	npad	7
$LL184@clean:
	mov	ecx, eax
	mov	eax, DWORD PTR [ecx+8]
	test	eax, eax
	jne	SHORT $LL184@clean
$LN183@clean:
	mov	esi, ecx
	jmp	SHORT $LN176@clean
$LN180@clean:
	mov	eax, DWORD PTR [esi+4]
	cmp	esi, DWORD PTR [eax+12]
	jne	SHORT $LN177@clean
$LL178@clean:
	mov	esi, eax
	mov	eax, DWORD PTR [eax+4]
	cmp	esi, DWORD PTR [eax+12]
	je	SHORT $LL178@clean
$LN177@clean:
	cmp	DWORD PTR [esi+12], eax
	je	SHORT $LN176@clean
	mov	esi, eax
$LN176@clean:
	cmp	esi, ebx
	setne	al
	test	al, al
	jne	$LL4@clean
$LN3@clean:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 304  : 			}
; 305  : 		}
; 306  : 	}
; 307  : }

	ret	4
?clean@motions_container@@QAEX_N@Z ENDP			; motions_container::clean
_TEXT	ENDS
PUBLIC	?dock@motions_container@@QAEPAUmotions_value@@Vshared_str@@PAVIReader@@PAV?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@@Z ; motions_container::dock
; Function compile flags: /Ogtpy
;	COMDAT ?dock@motions_container@@QAEPAUmotions_value@@Vshared_str@@PAVIReader@@PAV?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@@Z
_TEXT	SEGMENT
$T548793 = -16						; size = 8
$T548796 = -8						; size = 8
_key$ = 8						; size = 4
_data$ = 12						; size = 4
_bones$ = 16						; size = 4
?dock@motions_container@@QAEPAUmotions_value@@Vshared_str@@PAVIReader@@PAV?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@@Z PROC ; motions_container::dock, COMDAT
; _this$ = ecx

; 265  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 20					; 00000014H
	push	ebx
	mov	ebx, ecx

; 266  : 	motions_value*	result		= 0	;
; 267  : 	SharedMotionsMapIt	I		= container.find	(key);

	mov	eax, DWORD PTR [ebx+4]
	test	eax, eax
	push	esi
	mov	esi, DWORD PTR _key$[ebp]
	push	edi
	je	SHORT $LN14@dock
$LL19@dock:
	cmp	DWORD PTR [eax+16], esi
	jb	SHORT $LN17@dock
	mov	ecx, eax
	mov	eax, DWORD PTR [eax+8]
	jmp	SHORT $LN16@dock
$LN17@dock:
	mov	eax, DWORD PTR [eax+12]
$LN16@dock:
	test	eax, eax
	jne	SHORT $LL19@dock
	cmp	ecx, ebx
	je	SHORT $LN165@dock
	cmp	esi, DWORD PTR [ecx+16]
	jae	SHORT $LN14@dock
	mov	ecx, ebx
$LN14@dock:

; 268  : 	if (I!=container.end())		result = I->second;

	cmp	ecx, ebx
	je	SHORT $LN165@dock
	mov	edi, DWORD PTR [ecx+20]

; 269  : 	if (0==result)				{

	test	edi, edi
	jne	$LN145@dock
$LN165@dock:

; 270  : 		// loading motions
; 271  : 		VERIFY					(data);
; 272  : 		result					= xr_new<motions_value>();

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	180					; 000000b4H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	test	eax, eax
	je	SHORT $LN80@dock
	mov	ecx, eax
	call	??0motions_value@@QAE@XZ
	mov	edi, eax
	jmp	SHORT $LN81@dock
$LN80@dock:
	xor	edi, edi
$LN81@dock:

; 273  : 		result->m_dwReference	= 0;

	xor	eax, eax

; 274  : 		BOOL bres				= result->load	(key.c_str(),data,bones);

	cmp	esi, eax
	mov	DWORD PTR [edi+136], eax
	je	SHORT $LN86@dock
	lea	eax, DWORD PTR [esi+16]
$LN86@dock:
	mov	ecx, DWORD PTR _bones$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	push	ecx
	push	edx
	push	eax
	mov	ecx, edi
	call	?load@motions_value@@QAEHPBDPAVIReader@@PAV?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@@Z ; motions_value::load

; 275  : 		if (bres)

	test	eax, eax
	je	SHORT $LN2@dock

; 276  :         	container.insert(mk_pair(key,result));

	test	esi, esi
	je	SHORT $LN123@dock
	add	DWORD PTR [esi], 1
	add	DWORD PTR [esi], 1
	add	DWORD PTR [esi], -1
	add	DWORD PTR [esi], 1
$LN123@dock:
	lea	eax, DWORD PTR $T548793[esp+32]
	push	eax
	lea	ecx, DWORD PTR $T548796[esp+36]
	push	ecx
	mov	eax, ebx
	mov	DWORD PTR $T548793[esp+40], esi
	mov	DWORD PTR $T548793[esp+44], edi
	call	?insert_unique@?$_Rb_tree@Vshared_str@@U?$less@Vshared_str@@@stlp_std@@U?$pair@$$CBVshared_str@@PAUmotions_value@@@3@U?$_Select1st@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@3@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@63@V?$xalloc@U?$pair@Vshared_str@@PAUmotions_value@@@stlp_std@@@@@priv@stlp_std@@QAE?AU?$pair@U?$_Rb_tree_iterator@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@U?$_MapTraitsT@U?$pair@$$CBVshared_str@@PAUmotions_value@@@stlp_std@@@priv@2@@priv@stlp_std@@_N@3@ABU?$pair@$$CBVshared_str@@PAUmotions_value@@@3@@Z ; stlp_std::priv::_Rb_tree<shared_str,stlp_std::less<shared_str>,stlp_std::pair<shared_str const ,motions_value *>,stlp_std::priv::_Select1st<stlp_std::pair<shared_str const ,motions_value *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<shared_str const ,motions_value *> >,xalloc<stlp_std::pair<shared_str,motions_value *> > >::insert_unique
	test	esi, esi
	je	SHORT $LN167@dock
	add	DWORD PTR [esi], -1
	add	DWORD PTR [esi], -1

; 277  : 		else

	jmp	SHORT $LN145@dock
$LN2@dock:

; 278  :         	xr_delete		(result);

	mov	ecx, edi
	call	??1motions_value@@QAE@XZ
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	xor	edi, edi
$LN145@dock:

; 279  : 	}
; 280  : 	return result;

	test	esi, esi
	mov	eax, edi
	je	SHORT $LN160@dock
	add	DWORD PTR [esi], -1

; 281  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN167@dock:

; 279  : 	}
; 280  : 	return result;

	mov	eax, edi
$LN160@dock:

; 281  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?dock@motions_container@@QAEPAUmotions_value@@Vshared_str@@PAVIReader@@PAV?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@@Z ENDP ; motions_container::dock
PUBLIC	?create@shared_motions@@QAE_NVshared_str@@PAVIReader@@PAV?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@@Z ; shared_motions::create
; Function compile flags: /Ogtpy
;	COMDAT ?create@shared_motions@@QAE_NVshared_str@@PAVIReader@@PAV?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@@Z
_TEXT	SEGMENT
_key$ = 8						; size = 4
_data$ = 12						; size = 4
_bones$ = 16						; size = 4
?create@shared_motions@@QAE_NVshared_str@@PAVIReader@@PAV?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@@Z PROC ; shared_motions::create, COMDAT
; _this$ = ecx

; 356  : 	motions_value* v = g_pMotionsContainer->dock(key,data,bones);

	mov	eax, DWORD PTR _bones$[esp-4]
	push	esi
	mov	esi, DWORD PTR _key$[esp]
	test	esi, esi
	push	edi
	push	eax
	mov	edi, ecx
	mov	ecx, DWORD PTR _data$[esp+8]
	push	ecx
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], 0
	je	SHORT $LN6@create@6
	add	DWORD PTR [esi], 1
$LN6@create@6:
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN9@create@6
	add	DWORD PTR [ecx], -1
	mov	edx, DWORD PTR [eax]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN9@create@6
	mov	DWORD PTR [eax], 0
$LN9@create@6:
	mov	DWORD PTR [eax], esi
	mov	ecx, DWORD PTR ?g_pMotionsContainer@@3PAVmotions_container@@A ; g_pMotionsContainer
	call	?dock@motions_container@@QAEPAUmotions_value@@Vshared_str@@PAVIReader@@PAV?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@@Z ; motions_container::dock

; 357  : 	if (0!=v)

	test	eax, eax
	je	SHORT $LN1@create@6

; 358  : 		v->m_dwReference++;

	add	DWORD PTR [eax+136], 1
$LN1@create@6:

; 359  : 	destroy			();

	mov	ecx, DWORD PTR [edi]
	test	ecx, ecx
	je	SHORT $LN13@create@6
	add	DWORD PTR [ecx+136], -1
	mov	ecx, DWORD PTR [edi]
	cmp	DWORD PTR [ecx+136], 0
	jne	SHORT $LN13@create@6
	mov	DWORD PTR [edi], 0
$LN13@create@6:

; 360  : 	p_				= v;
; 361  :     return (0!=v);

	test	eax, eax
	mov	DWORD PTR [edi], eax
	setne	al
	test	esi, esi
	je	SHORT $LN19@create@6
	add	DWORD PTR [esi], -1
$LN19@create@6:

; 362  : }

	pop	edi
	pop	esi
	ret	12					; 0000000cH
?create@shared_motions@@QAE_NVshared_str@@PAVIReader@@PAV?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@@Z ENDP ; shared_motions::create
_SAMPLE_SPF DD	03d088889r			; 0.0333333
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\skeletonmotiondefs.h
;	COMDAT ??__EEND_EPS@@YAXXZ
text$yc	SEGMENT
??__EEND_EPS@@YAXXZ PROC				; `dynamic initializer for 'END_EPS'', COMDAT

; 10   : f32		const	END_EPS				=	SAMPLE_SPF+EPS;

	movss	xmm0, DWORD PTR _SAMPLE_SPF
	addss	xmm0, DWORD PTR _EPS
	movss	DWORD PTR _END_EPS, xmm0
	ret	0
??__EEND_EPS@@YAXXZ ENDP				; `dynamic initializer for 'END_EPS''
_KEY_QuantI DD	038000100r			; 3.05185e-005
_END_EPS DD	01H DUP (?)
_END_EPS$initializer$ DD FLAT:??__EEND_EPS@@YAXXZ
END
