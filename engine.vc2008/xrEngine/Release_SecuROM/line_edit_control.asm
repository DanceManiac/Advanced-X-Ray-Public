; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	D:\CLEARSKY\sources\engine\xrEngine\line_edit_control.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??$clamp@H@@YAXAAHABH1@Z			; clamp<int>
PUBLIC	??$implicit_cast@PAVline_edit_control@text_editor@@PAV12@@detail@fastdelegate@@YAPAVline_edit_control@text_editor@@PAV23@@Z ; fastdelegate::detail::implicit_cast<text_editor::line_edit_control *,text_editor::line_edit_control *>
PUBLIC	??$Convert@Vline_edit_control@text_editor@@P812@AGXXZP8GenericClass@detail@fastdelegate@@AEXXZ@?$SimplifyMemFunc@$03@detail@fastdelegate@@SGPAVGenericClass@12@PAVline_edit_control@text_editor@@P845@AGXXZAAP8312@AEXXZ@Z ; fastdelegate::detail::SimplifyMemFunc<4>::Convert<text_editor::line_edit_control,void (__stdcall text_editor::line_edit_control::*)(void),void (__thiscall fastdelegate::detail::GenericClass::*)(void)>
PUBLIC	??$bindmemfunc@Vline_edit_control@text_editor@@P812@AGXXZ@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AGXXZP6GXXZP6GXXZ@detail@fastdelegate@@QAEXPAVline_edit_control@text_editor@@P834@AGXXZ@Z ; fastdelegate::detail::ClosurePtr<void (__stdcall fastdelegate::detail::GenericClass::*)(void),void (__stdcall*)(void),void (__stdcall*)(void)>::bindmemfunc<text_editor::line_edit_control,void (__stdcall text_editor::line_edit_control::*)(void)>
PUBLIC	??$?0Vline_edit_control@text_editor@@V01@@?$FastDelegate0@X@fastdelegate@@QAE@PAVline_edit_control@text_editor@@P823@AGXXZ@Z ; fastdelegate::FastDelegate0<void>::FastDelegate0<void><text_editor::line_edit_control,text_editor::line_edit_control>
PUBLIC	??$xr_new@Vkey_state_base@text_editor@@W4key_state@2@PAVbase@2@@@YAPAVkey_state_base@text_editor@@ABW4key_state@1@ABQAVbase@1@@Z ; xr_new<text_editor::key_state_base,enum text_editor::key_state,text_editor::base *>
PUBLIC	??$xr_new@Vtype_pair@text_editor@@IDD_N@@YAPAVtype_pair@text_editor@@ABIABD1AB_N@Z ; xr_new<text_editor::type_pair,unsigned int,char,char,bool>
PUBLIC	??$xr_new@Vcallback_base@text_editor@@V?$FastDelegate0@X@fastdelegate@@W4key_state@2@@@YAPAVcallback_base@text_editor@@ABV?$FastDelegate0@X@fastdelegate@@ABW4key_state@1@@Z ; xr_new<text_editor::callback_base,fastdelegate::FastDelegate0<void>,enum text_editor::key_state>
PUBLIC	??1?$buffer_vector@PAVbase@text_editor@@@@QAE@XZ ; buffer_vector<text_editor::base *>::~buffer_vector<text_editor::base *>
PUBLIC	?size@?$buffer_vector@PAVbase@text_editor@@@@QBEIXZ ; buffer_vector<text_editor::base *>::size
PUBLIC	?erase@?$buffer_vector@PAVbase@text_editor@@@@QAEXABQAPAVbase@text_editor@@0@Z ; buffer_vector<text_editor::base *>::erase
PUBLIC	?construct@?$buffer_vector@PAVbase@text_editor@@@@CAXPAPAVbase@text_editor@@ABQAV23@@Z ; buffer_vector<text_editor::base *>::construct
PUBLIC	??$assign@PAPAVbase@text_editor@@@?$buffer_vector@PAVbase@text_editor@@@@QAEXPAPAVbase@text_editor@@ABQAPAV12@@Z ; buffer_vector<text_editor::base *>::assign<text_editor::base * *>
PUBLIC	??$?0PAPAVbase@text_editor@@@?$buffer_vector@PAVbase@text_editor@@@@QAE@PAXABIABQAPAVbase@text_editor@@2@Z ; buffer_vector<text_editor::base *>::buffer_vector<text_editor::base *><text_editor::base * *>
PUBLIC	??$__less@PAVbase@text_editor@@@priv@stlp_std@@YA?AU?$less@PAVbase@text_editor@@@1@PAPAVbase@text_editor@@@Z ; stlp_std::priv::__less<text_editor::base *>
PUBLIC	??$__make_heap@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@PAV12@H@stlp_std@@YAXPAPAVbase@text_editor@@0U?$less@PAVbase@text_editor@@@0@0PAH@Z ; stlp_std::__make_heap<text_editor::base * *,stlp_std::less<text_editor::base *>,text_editor::base *,int>
PUBLIC	??$make_heap@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@0U?$less@PAVbase@text_editor@@@0@@Z ; stlp_std::make_heap<text_editor::base * *,stlp_std::less<text_editor::base *> >
PUBLIC	??$__push_heap@PAPAVbase@text_editor@@HPAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@HHPAV12@U?$less@PAVbase@text_editor@@@0@@Z ; stlp_std::__push_heap<text_editor::base * *,int,text_editor::base *,stlp_std::less<text_editor::base *> >
PUBLIC	??$__adjust_heap@PAPAVbase@text_editor@@HPAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@HHPAV12@U?$less@PAVbase@text_editor@@@0@@Z ; stlp_std::__adjust_heap<text_editor::base * *,int,text_editor::base *,stlp_std::less<text_editor::base *> >
PUBLIC	??$__pop_heap@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@H@stlp_std@@YAXPAPAVbase@text_editor@@00PAV12@U?$less@PAVbase@text_editor@@@0@PAH@Z ; stlp_std::__pop_heap<text_editor::base * *,text_editor::base *,stlp_std::less<text_editor::base *>,int>
PUBLIC	??$__pop_heap_aux@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@00U?$less@PAVbase@text_editor@@@0@@Z ; stlp_std::__pop_heap_aux<text_editor::base * *,text_editor::base *,stlp_std::less<text_editor::base *> >
PUBLIC	??$pop_heap@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@0U?$less@PAVbase@text_editor@@@0@@Z ; stlp_std::pop_heap<text_editor::base * *,stlp_std::less<text_editor::base *> >
PUBLIC	??$sort_heap@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@0U?$less@PAVbase@text_editor@@@0@@Z ; stlp_std::sort_heap<text_editor::base * *,stlp_std::less<text_editor::base *> >
PUBLIC	??$__partial_sort@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@000U?$less@PAVbase@text_editor@@@1@@Z ; stlp_std::priv::__partial_sort<text_editor::base * *,text_editor::base *,stlp_std::less<text_editor::base *> >
PUBLIC	??$partial_sort@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@00U?$less@PAVbase@text_editor@@@0@@Z ; stlp_std::partial_sort<text_editor::base * *,stlp_std::less<text_editor::base *> >
PUBLIC	??$__median@PAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAABQAVbase@text_editor@@ABQAV23@00U?$less@PAVbase@text_editor@@@1@@Z ; stlp_std::priv::__median<text_editor::base *,stlp_std::less<text_editor::base *> >
PUBLIC	?_Ret@?$_IsRefType@AAPAVbase@text_editor@@@stlp_std@@SA?AU__true_type@2@XZ ; stlp_std::_IsRefType<text_editor::base * &>::_Ret
PUBLIC	??$_IsOKToSwap@PAVbase@text_editor@@PAV12@U__true_type@stlp_std@@U34@@stlp_std@@YA?AU?$_OKToSwap@PAVbase@text_editor@@PAV12@U__true_type@stlp_std@@U34@@0@PAPAVbase@text_editor@@0ABU__true_type@0@1@Z ; stlp_std::_IsOKToSwap<text_editor::base *,text_editor::base *,stlp_std::__true_type,stlp_std::__true_type>
PUBLIC	?_Answer@?$_OKToSwap@PAVbase@text_editor@@PAV12@U__true_type@stlp_std@@U34@@stlp_std@@SA?AU__true_type@2@XZ ; stlp_std::_OKToSwap<text_editor::base *,text_editor::base *,stlp_std::__true_type,stlp_std::__true_type>::_Answer
PUBLIC	??$swap@PAVbase@text_editor@@@stlp_std@@YAXAAPAVbase@text_editor@@0@Z ; stlp_std::swap<text_editor::base *>
PUBLIC	??$__iter_swap_aux@PAPAVbase@text_editor@@PAPAV12@@priv@stlp_std@@YAXAAPAPAVbase@text_editor@@0ABU__true_type@1@@Z ; stlp_std::priv::__iter_swap_aux<text_editor::base * *,text_editor::base * *>
PUBLIC	??$iter_swap@PAPAVbase@text_editor@@PAPAV12@@stlp_std@@YAXPAPAVbase@text_editor@@0@Z ; stlp_std::iter_swap<text_editor::base * *,text_editor::base * *>
PUBLIC	??$__unguarded_partition@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAPAPAVbase@text_editor@@PAPAV23@0PAV23@U?$less@PAVbase@text_editor@@@1@@Z ; stlp_std::priv::__unguarded_partition<text_editor::base * *,text_editor::base *,stlp_std::less<text_editor::base *> >
PUBLIC	??$__introsort_loop@PAPAVbase@text_editor@@PAV12@HU?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@00HU?$less@PAVbase@text_editor@@@1@@Z ; stlp_std::priv::__introsort_loop<text_editor::base * *,text_editor::base *,int,stlp_std::less<text_editor::base *> >
PUBLIC	?_Answer@?$_BothPtrType@PAPAVbase@text_editor@@PAPAV12@@stlp_std@@SA?AU__true_type@2@XZ ; stlp_std::_BothPtrType<text_editor::base * *,text_editor::base * *>::_Answer
PUBLIC	??$_UseTrivialCopy@PAVbase@text_editor@@PAV12@@stlp_std@@YA?AU?$_TrivialCopy@PAVbase@text_editor@@PAV12@@0@PAPAVbase@text_editor@@0@Z ; stlp_std::_UseTrivialCopy<text_editor::base *,text_editor::base *>
PUBLIC	?_Answer@?$_TrivialCopy@PAVbase@text_editor@@PAV12@@stlp_std@@SA?AU__true_type@2@XZ ; stlp_std::_TrivialCopy<text_editor::base *,text_editor::base *>::_Answer
PUBLIC	??$__copy_backward_ptrs@PAPAVbase@text_editor@@PAPAV12@@priv@stlp_std@@YAPAPAVbase@text_editor@@PAPAV23@00ABU__true_type@1@@Z ; stlp_std::priv::__copy_backward_ptrs<text_editor::base * *,text_editor::base * *>
PUBLIC	??$__copy_backward_aux@PAPAVbase@text_editor@@PAPAV12@@priv@stlp_std@@YAPAPAVbase@text_editor@@PAPAV23@00ABU__true_type@1@@Z ; stlp_std::priv::__copy_backward_aux<text_editor::base * *,text_editor::base * *>
PUBLIC	??$copy_backward@PAPAVbase@text_editor@@PAPAV12@@stlp_std@@YAPAPAVbase@text_editor@@PAPAV12@00@Z ; stlp_std::copy_backward<text_editor::base * *,text_editor::base * *>
PUBLIC	??$__linear_insert@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@0PAV23@U?$less@PAVbase@text_editor@@@1@@Z ; stlp_std::priv::__linear_insert<text_editor::base * *,text_editor::base *,stlp_std::less<text_editor::base *> >
PUBLIC	??$__insertion_sort@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@00U?$less@PAVbase@text_editor@@@1@@Z ; stlp_std::priv::__insertion_sort<text_editor::base * *,text_editor::base *,stlp_std::less<text_editor::base *> >
PUBLIC	??R?$less@PAVbase@text_editor@@@stlp_std@@QBE_NABQAVbase@text_editor@@0@Z ; stlp_std::less<text_editor::base *>::operator()
PUBLIC	??$__unguarded_linear_insert@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@PAV23@U?$less@PAVbase@text_editor@@@1@@Z ; stlp_std::priv::__unguarded_linear_insert<text_editor::base * *,text_editor::base *,stlp_std::less<text_editor::base *> >
PUBLIC	??$__unguarded_insertion_sort_aux@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@00U?$less@PAVbase@text_editor@@@1@@Z ; stlp_std::priv::__unguarded_insertion_sort_aux<text_editor::base * *,text_editor::base *,stlp_std::less<text_editor::base *> >
PUBLIC	??$__unguarded_insertion_sort@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@0U?$less@PAVbase@text_editor@@@1@@Z ; stlp_std::priv::__unguarded_insertion_sort<text_editor::base * *,stlp_std::less<text_editor::base *> >
PUBLIC	??$__final_insertion_sort@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@0U?$less@PAVbase@text_editor@@@1@@Z ; stlp_std::priv::__final_insertion_sort<text_editor::base * *,stlp_std::less<text_editor::base *> >
PUBLIC	??$sort@PAPAVbase@text_editor@@@stlp_std@@YAXPAPAVbase@text_editor@@0@Z ; stlp_std::sort<text_editor::base * *>
PUBLIC	??$adjacent_find@PAPAVbase@text_editor@@U?$equal_to@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAPAPAVbase@text_editor@@PAPAV12@0U?$equal_to@PAVbase@text_editor@@@0@@Z ; stlp_std::adjacent_find<text_editor::base * *,stlp_std::equal_to<text_editor::base *> >
PUBLIC	??$adjacent_find@PAPAVbase@text_editor@@@stlp_std@@YAPAPAVbase@text_editor@@PAPAV12@0@Z ; stlp_std::adjacent_find<text_editor::base * *>
PUBLIC	??$__equal_to@PAVbase@text_editor@@@priv@stlp_std@@YA?AU?$equal_to@PAVbase@text_editor@@@1@PAPAVbase@text_editor@@@Z ; stlp_std::priv::__equal_to<text_editor::base *>
PUBLIC	??R?$equal_to@PAVbase@text_editor@@@stlp_std@@QBE_NABQAVbase@text_editor@@0@Z ; stlp_std::equal_to<text_editor::base *>::operator()
PUBLIC	??$__unique_copy@PAPAVbase@text_editor@@PAPAV12@U?$equal_to@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAPAPAVbase@text_editor@@PAPAV23@00U?$equal_to@PAVbase@text_editor@@@1@ABUforward_iterator_tag@1@@Z ; stlp_std::priv::__unique_copy<text_editor::base * *,text_editor::base * *,stlp_std::equal_to<text_editor::base *> >
PUBLIC	??$unique_copy@PAPAVbase@text_editor@@PAPAV12@@stlp_std@@YAPAPAVbase@text_editor@@PAPAV12@00@Z ; stlp_std::unique_copy<text_editor::base * *,text_editor::base * *>
PUBLIC	??$unique@PAPAVbase@text_editor@@@stlp_std@@YAPAPAVbase@text_editor@@PAPAV12@0@Z ; stlp_std::unique<text_editor::base * *>
PUBLIC	?destroy@?$buffer_vector@PAVbase@text_editor@@@@CAXPAPAVbase@text_editor@@@Z ; buffer_vector<text_editor::base *>::destroy
PUBLIC	?destroy@?$buffer_vector@PAVbase@text_editor@@@@CAXPAPAVbase@text_editor@@ABQAPAV23@@Z ; buffer_vector<text_editor::base *>::destroy
PUBLIC	?clear@?$buffer_vector@PAVbase@text_editor@@@@QAEXXZ ; buffer_vector<text_editor::base *>::clear
PUBLIC	?begin@?$buffer_vector@PAVbase@text_editor@@@@QAEPAPAVbase@text_editor@@XZ ; buffer_vector<text_editor::base *>::begin
PUBLIC	?end@?$buffer_vector@PAVbase@text_editor@@@@QAEPAPAVbase@text_editor@@XZ ; buffer_vector<text_editor::base *>::end
PUBLIC	??R?$xr_special_free@$00Vbase@text_editor@@@@QAEXAAPAVbase@text_editor@@@Z ; xr_special_free<1,text_editor::base>::operator()
PUBLIC	??$xr_delete@Vbase@text_editor@@@@YAXAAPAVbase@text_editor@@@Z ; xr_delete<text_editor::base>
PUBLIC	??$delete_data@$0A@@?$CHelper1@Vbase@text_editor@@@CDestroyer@@SAXAAVbase@text_editor@@@Z ; CDestroyer::CHelper1<text_editor::base>::delete_data<0>
PUBLIC	??$delete_data@$0A@@?$CHelper2@Vbase@text_editor@@@CDestroyer@@SAXAAVbase@text_editor@@@Z ; CDestroyer::CHelper2<text_editor::base>::delete_data<0>
PUBLIC	??$delete_data@$0A@@?$CHelper4@Vbase@text_editor@@@CDestroyer@@SAXAAVbase@text_editor@@@Z ; CDestroyer::CHelper4<text_editor::base>::delete_data<0>
PUBLIC	??$delete_data@Vbase@text_editor@@@CDestroyer@@SAXAAVbase@text_editor@@@Z ; CDestroyer::delete_data<text_editor::base>
PUBLIC	??$delete_data@$00@?$CHelper2@PAVbase@text_editor@@@CDestroyer@@SAXAAPAVbase@text_editor@@@Z ; CDestroyer::CHelper2<text_editor::base *>::delete_data<1>
PUBLIC	??$delete_data@$0A@@?$CHelper4@PAVbase@text_editor@@@CDestroyer@@SAXAAPAVbase@text_editor@@@Z ; CDestroyer::CHelper4<text_editor::base *>::delete_data<0>
PUBLIC	??$delete_data@PAVbase@text_editor@@@CDestroyer@@SAXAAPAVbase@text_editor@@@Z ; CDestroyer::delete_data<text_editor::base *>
PUBLIC	??$delete_data@V?$buffer_vector@PAVbase@text_editor@@@@@CHelper3@CDestroyer@@SAXAAV?$buffer_vector@PAVbase@text_editor@@@@@Z ; CDestroyer::CHelper3::delete_data<buffer_vector<text_editor::base *> >
PUBLIC	??$delete_data@$00@?$CHelper4@V?$buffer_vector@PAVbase@text_editor@@@@@CDestroyer@@SAXAAV?$buffer_vector@PAVbase@text_editor@@@@@Z ; CDestroyer::CHelper4<buffer_vector<text_editor::base *> >::delete_data<1>
PUBLIC	??$delete_data@V?$buffer_vector@PAVbase@text_editor@@@@@CDestroyer@@SAXAAV?$buffer_vector@PAVbase@text_editor@@@@@Z ; CDestroyer::delete_data<buffer_vector<text_editor::base *> >
PUBLIC	??$delete_data@V?$buffer_vector@PAVbase@text_editor@@@@@@YAXABV?$buffer_vector@PAVbase@text_editor@@@@@Z ; delete_data<buffer_vector<text_editor::base *> >
PUBLIC	?g_console_sensitive@@3MA			; g_console_sensitive
EXTRN	__imp__ActivateKeyboardLayout@8:PROC
EXTRN	__imp_?copy_to_clipboard@os_clipboard@@YAXPBD@Z:PROC
EXTRN	__imp_?paste_from_clipboard@os_clipboard@@YAXPADABI@Z:PROC
?g_console_sensitive@@3MA DD 03e19999ar		; 0.15	; g_console_sensitive
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrserverentities\object_destroyer.h
;	COMDAT ??$delete_data@$0A@@?$CHelper1@Vbase@text_editor@@@CDestroyer@@SAXAAVbase@text_editor@@@Z
_TEXT	SEGMENT
??$delete_data@$0A@@?$CHelper1@Vbase@text_editor@@@CDestroyer@@SAXAAVbase@text_editor@@@Z PROC ; CDestroyer::CHelper1<text_editor::base>::delete_data<0>, COMDAT

; 87   : 		{
; 88   : 		}

	ret	0
??$delete_data@$0A@@?$CHelper1@Vbase@text_editor@@@CDestroyer@@SAXAAVbase@text_editor@@@Z ENDP ; CDestroyer::CHelper1<text_editor::base>::delete_data<0>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$delete_data@$0A@@?$CHelper2@Vbase@text_editor@@@CDestroyer@@SAXAAVbase@text_editor@@@Z
_TEXT	SEGMENT
??$delete_data@$0A@@?$CHelper2@Vbase@text_editor@@@CDestroyer@@SAXAAVbase@text_editor@@@Z PROC ; CDestroyer::CHelper2<text_editor::base>::delete_data<0>, COMDAT

; 101  : 		{
; 102  : 			CHelper1<T>::delete_data<object_type_traits::is_base_and_derived<IPureDestroyableObject,T>::value>(data);
; 103  : 		}

	ret	0
??$delete_data@$0A@@?$CHelper2@Vbase@text_editor@@@CDestroyer@@SAXAAVbase@text_editor@@@Z ENDP ; CDestroyer::CHelper2<text_editor::base>::delete_data<0>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$delete_data@$0A@@?$CHelper4@Vbase@text_editor@@@CDestroyer@@SAXAAVbase@text_editor@@@Z
_TEXT	SEGMENT
??$delete_data@$0A@@?$CHelper4@Vbase@text_editor@@@CDestroyer@@SAXAAVbase@text_editor@@@Z PROC ; CDestroyer::CHelper4<text_editor::base>::delete_data<0>, COMDAT

; 130  : 		{
; 131  : 			CHelper2<T>::delete_data<object_type_traits::is_pointer<T>::value>	(data);
; 132  : 		}

	ret	0
??$delete_data@$0A@@?$CHelper4@Vbase@text_editor@@@CDestroyer@@SAXAAVbase@text_editor@@@Z ENDP ; CDestroyer::CHelper4<text_editor::base>::delete_data<0>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\type_traits.h
_TEXT	ENDS
;	COMDAT ??$_UseTrivialCopy@PAVbase@text_editor@@PAV12@@stlp_std@@YA?AU?$_TrivialCopy@PAVbase@text_editor@@PAV12@@0@PAPAVbase@text_editor@@0@Z
_TEXT	SEGMENT
??$_UseTrivialCopy@PAVbase@text_editor@@PAV12@@stlp_std@@YA?AU?$_TrivialCopy@PAVbase@text_editor@@PAV12@@0@PAPAVbase@text_editor@@0@Z PROC ; stlp_std::_UseTrivialCopy<text_editor::base *,text_editor::base *>, COMDAT

; 485  : { return _TrivialCopy<_Src, _Dst>(); }

	xor	al, al
	ret	0
??$_UseTrivialCopy@PAVbase@text_editor@@PAV12@@stlp_std@@YA?AU?$_TrivialCopy@PAVbase@text_editor@@PAV12@@0@PAPAVbase@text_editor@@0@Z ENDP ; stlp_std::_UseTrivialCopy<text_editor::base *,text_editor::base *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Answer@?$_TrivialCopy@PAVbase@text_editor@@PAV12@@stlp_std@@SA?AU__true_type@2@XZ
_TEXT	SEGMENT
?_Answer@?$_TrivialCopy@PAVbase@text_editor@@PAV12@@stlp_std@@SA?AU__true_type@2@XZ PROC ; stlp_std::_TrivialCopy<text_editor::base *,text_editor::base *>::_Answer, COMDAT

; 390  :   static _Ret _Answer() { return _Ret(); }

	xor	al, al
	ret	0
?_Answer@?$_TrivialCopy@PAVbase@text_editor@@PAV12@@stlp_std@@SA?AU__true_type@2@XZ ENDP ; stlp_std::_TrivialCopy<text_editor::base *,text_editor::base *>::_Answer
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrserverentities\object_destroyer.h
_TEXT	ENDS
;	COMDAT ??$delete_data@Vbase@text_editor@@@CDestroyer@@SAXAAVbase@text_editor@@@Z
_TEXT	SEGMENT
??$delete_data@Vbase@text_editor@@@CDestroyer@@SAXAAVbase@text_editor@@@Z PROC ; CDestroyer::delete_data<text_editor::base>, COMDAT

; 144  : 		CHelper4<T>::delete_data<object_type_traits::is_stl_container<T>::value>(data);
; 145  : 	}

	ret	0
??$delete_data@Vbase@text_editor@@@CDestroyer@@SAXAAVbase@text_editor@@@Z ENDP ; CDestroyer::delete_data<text_editor::base>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$swap@PAVbase@text_editor@@@stlp_std@@YAXAAPAVbase@text_editor@@0@Z
_TEXT	SEGMENT
??$swap@PAVbase@text_editor@@@stlp_std@@YAXAAPAVbase@text_editor@@0@Z PROC ; stlp_std::swap<text_editor::base *>, COMDAT
; ___a$ = ecx
; ___b$ = eax

; 82   : #if defined (_STLP_USE_PARTIAL_SPEC_WORKAROUND) && !defined (_STLP_FUNCTION_TMPL_PARTIAL_ORDER)
; 83   : #  if !defined(__BORLANDC__)
; 84   :   typedef typename _SwapImplemented<_Tp>::_Ret _Implemented;
; 85   : #  else
; 86   :   enum { _Is = _SwapImplemented<_Tp>::_Is };
; 87   :   typedef typename __bool2type<_Is>::_Ret _Implemented;
; 88   : #  endif
; 89   :   _STLP_PRIV __swap_aux(__a, __b, _Implemented());
; 90   : #else
; 91   :   _Tp __tmp = __a;

	mov	edx, DWORD PTR [ecx]
	push	esi

; 92   :   __a = __b;

	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [ecx], esi

; 93   :   __b = __tmp;

	mov	DWORD PTR [eax], edx
	pop	esi

; 94   : #endif /* _STLP_USE_PARTIAL_SPEC_WORKAROUND */
; 95   : }

	ret	0
??$swap@PAVbase@text_editor@@@stlp_std@@YAXAAPAVbase@text_editor@@0@Z ENDP ; stlp_std::swap<text_editor::base *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\type_traits.h
_TEXT	ENDS
;	COMDAT ?_Answer@?$_BothPtrType@PAPAVbase@text_editor@@PAPAV12@@stlp_std@@SA?AU__true_type@2@XZ
_TEXT	SEGMENT
?_Answer@?$_BothPtrType@PAPAVbase@text_editor@@PAPAV12@@stlp_std@@SA?AU__true_type@2@XZ PROC ; stlp_std::_BothPtrType<text_editor::base * *,text_editor::base * *>::_Answer, COMDAT

; 468  :   static _Ret _Answer() { return _Ret(); }

	xor	al, al
	ret	0
?_Answer@?$_BothPtrType@PAPAVbase@text_editor@@PAPAV12@@stlp_std@@SA?AU__true_type@2@XZ ENDP ; stlp_std::_BothPtrType<text_editor::base * *,text_editor::base * *>::_Answer
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__iter_swap_aux@PAPAVbase@text_editor@@PAPAV12@@priv@stlp_std@@YAXAAPAPAVbase@text_editor@@0ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__iter_swap_aux@PAPAVbase@text_editor@@PAPAV12@@priv@stlp_std@@YAXAAPAPAVbase@text_editor@@0ABU__true_type@1@@Z PROC ; stlp_std::priv::__iter_swap_aux<text_editor::base * *,text_editor::base * *>, COMDAT
; ___i1$ = ecx
; ___i2$ = eax

; 108  :   swap(*__i1, *__i2);

	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	esi
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [eax], edx
	pop	esi

; 109  : }

	ret	0
??$__iter_swap_aux@PAPAVbase@text_editor@@PAPAV12@@priv@stlp_std@@YAXAAPAPAVbase@text_editor@@0ABU__true_type@1@@Z ENDP ; stlp_std::priv::__iter_swap_aux<text_editor::base * *,text_editor::base * *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\type_traits.h
_TEXT	ENDS
;	COMDAT ??$_IsOKToSwap@PAVbase@text_editor@@PAV12@U__true_type@stlp_std@@U34@@stlp_std@@YA?AU?$_OKToSwap@PAVbase@text_editor@@PAV12@U__true_type@stlp_std@@U34@@0@PAPAVbase@text_editor@@0ABU__true_type@0@1@Z
_TEXT	SEGMENT
??$_IsOKToSwap@PAVbase@text_editor@@PAV12@U__true_type@stlp_std@@U34@@stlp_std@@YA?AU?$_OKToSwap@PAVbase@text_editor@@PAV12@U__true_type@stlp_std@@U34@@0@PAPAVbase@text_editor@@0ABU__true_type@0@1@Z PROC ; stlp_std::_IsOKToSwap<text_editor::base *,text_editor::base *,stlp_std::__true_type,stlp_std::__true_type>, COMDAT

; 481  : { return _OKToSwap<_Tp1, _Tp2, _IsRef1, _IsRef2>(); }

	xor	al, al
	ret	0
??$_IsOKToSwap@PAVbase@text_editor@@PAV12@U__true_type@stlp_std@@U34@@stlp_std@@YA?AU?$_OKToSwap@PAVbase@text_editor@@PAV12@U__true_type@stlp_std@@U34@@0@PAPAVbase@text_editor@@0ABU__true_type@0@1@Z ENDP ; stlp_std::_IsOKToSwap<text_editor::base *,text_editor::base *,stlp_std::__true_type,stlp_std::__true_type>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Answer@?$_OKToSwap@PAVbase@text_editor@@PAV12@U__true_type@stlp_std@@U34@@stlp_std@@SA?AU__true_type@2@XZ
_TEXT	SEGMENT
?_Answer@?$_OKToSwap@PAVbase@text_editor@@PAV12@U__true_type@stlp_std@@U34@@stlp_std@@SA?AU__true_type@2@XZ PROC ; stlp_std::_OKToSwap<text_editor::base *,text_editor::base *,stlp_std::__true_type,stlp_std::__true_type>::_Answer, COMDAT

; 475  :   static _Type _Answer() { return _Type(); }

	xor	al, al
	ret	0
?_Answer@?$_OKToSwap@PAVbase@text_editor@@PAV12@U__true_type@stlp_std@@U34@@stlp_std@@SA?AU__true_type@2@XZ ENDP ; stlp_std::_OKToSwap<text_editor::base *,text_editor::base *,stlp_std::__true_type,stlp_std::__true_type>::_Answer
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Ret@?$_IsRefType@AAPAVbase@text_editor@@@stlp_std@@SA?AU__true_type@2@XZ
_TEXT	SEGMENT
?_Ret@?$_IsRefType@AAPAVbase@text_editor@@@stlp_std@@SA?AU__true_type@2@XZ PROC ; stlp_std::_IsRefType<text_editor::base * &>::_Ret, COMDAT

; 443  :   static _Type _Ret() { return _Type();}

	xor	al, al
	ret	0
?_Ret@?$_IsRefType@AAPAVbase@text_editor@@@stlp_std@@SA?AU__true_type@2@XZ ENDP ; stlp_std::_IsRefType<text_editor::base * &>::_Ret
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$iter_swap@PAPAVbase@text_editor@@PAPAV12@@stlp_std@@YAXPAPAVbase@text_editor@@0@Z
_TEXT	SEGMENT
??$iter_swap@PAPAVbase@text_editor@@PAPAV12@@stlp_std@@YAXPAPAVbase@text_editor@@0@Z PROC ; stlp_std::iter_swap<text_editor::base * *,text_editor::base * *>, COMDAT
; ___i1$ = ecx
; ___i2$ = eax

; 120  :   // swap(*__i1, *__i2);
; 121  :   _STLP_PRIV __iter_swap_aux( __i1, __i2, _IsOKToSwap(_STLP_VALUE_TYPE(__i1, _ForwardIter1), _STLP_VALUE_TYPE(__i2, _ForwardIter2),
; 122  :                                                       _STLP_IS_REF_TYPE_REAL_REF(__i1, _ForwardIter1),
; 123  :                                                       _STLP_IS_REF_TYPE_REAL_REF(__i2, _ForwardIter2))._Answer());

	mov	edx, DWORD PTR [ecx]
	push	esi
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [eax], edx
	pop	esi

; 124  : }

	ret	0
??$iter_swap@PAPAVbase@text_editor@@PAPAV12@@stlp_std@@YAXPAPAVbase@text_editor@@0@Z ENDP ; stlp_std::iter_swap<text_editor::base * *,text_editor::base * *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_function_base.h
_TEXT	ENDS
;	COMDAT ??R?$equal_to@PAVbase@text_editor@@@stlp_std@@QBE_NABQAVbase@text_editor@@0@Z
_TEXT	SEGMENT
??R?$equal_to@PAVbase@text_editor@@@stlp_std@@QBE_NABQAVbase@text_editor@@0@Z PROC ; stlp_std::equal_to<text_editor::base *>::operator(), COMDAT
; ___x$ = eax
; ___y$ = edx

; 54   :   bool operator()(const _Tp& __x, const _Tp& __y) const { return __x == __y; }

	mov	ecx, DWORD PTR [eax]
	xor	eax, eax
	cmp	ecx, DWORD PTR [edx]
	sete	al
	ret	0
??R?$equal_to@PAVbase@text_editor@@@stlp_std@@QBE_NABQAVbase@text_editor@@0@Z ENDP ; stlp_std::equal_to<text_editor::base *>::operator()
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??R?$less@PAVbase@text_editor@@@stlp_std@@QBE_NABQAVbase@text_editor@@0@Z
_TEXT	SEGMENT
??R?$less@PAVbase@text_editor@@@stlp_std@@QBE_NABQAVbase@text_editor@@0@Z PROC ; stlp_std::less<text_editor::base *>::operator(), COMDAT
; ___x$ = eax
; ___y$ = edx

; 67   :   bool operator()(const _Tp& __x, const _Tp& __y) const { return __x < __y; }

	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR [edx]
	sbb	eax, eax
	neg	eax
	ret	0
??R?$less@PAVbase@text_editor@@@stlp_std@@QBE_NABQAVbase@text_editor@@0@Z ENDP ; stlp_std::less<text_editor::base *>::operator()
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\fastdelegate.h
_TEXT	ENDS
;	COMDAT ??$Convert@Vline_edit_control@text_editor@@P812@AGXXZP8GenericClass@detail@fastdelegate@@AEXXZ@?$SimplifyMemFunc@$03@detail@fastdelegate@@SGPAVGenericClass@12@PAVline_edit_control@text_editor@@P845@AGXXZAAP8312@AEXXZ@Z
_TEXT	SEGMENT
_pthis$ = 8						; size = 4
??$Convert@Vline_edit_control@text_editor@@P812@AGXXZP8GenericClass@detail@fastdelegate@@AEXXZ@?$SimplifyMemFunc@$03@detail@fastdelegate@@SGPAVGenericClass@12@PAVline_edit_control@text_editor@@P845@AGXXZAAP8312@AEXXZ@Z PROC ; fastdelegate::detail::SimplifyMemFunc<4>::Convert<text_editor::line_edit_control,void (__stdcall text_editor::line_edit_control::*)(void),void (__thiscall fastdelegate::detail::GenericClass::*)(void)>, COMDAT
; _function_to_bind$ = ecx
; _bound_func$ = eax

; 310  : 			GenericMemFuncType &bound_func) {
; 311  : #if defined __DMC__  
; 312  : 		// Digital Mars doesn't allow you to cast between abitrary PMF's, 
; 313  : 		// even though the standard says you can. The 32-bit compiler lets you
; 314  : 		// static_cast through an int, but the DOS compiler doesn't.
; 315  : 		bound_func = horrible_cast<GenericMemFuncType>(function_to_bind);
; 316  : #else 
; 317  :         bound_func = reinterpret_cast<GenericMemFuncType>(function_to_bind);

	mov	DWORD PTR [eax], ecx

; 318  : #endif
; 319  :         return reinterpret_cast<GenericClass *>(pthis);

	mov	eax, DWORD PTR _pthis$[esp-4]

; 320  : 	}

	ret	4
??$Convert@Vline_edit_control@text_editor@@P812@AGXXZP8GenericClass@detail@fastdelegate@@AEXXZ@?$SimplifyMemFunc@$03@detail@fastdelegate@@SGPAVGenericClass@12@PAVline_edit_control@text_editor@@P845@AGXXZAAP8312@AEXXZ@Z ENDP ; fastdelegate::detail::SimplifyMemFunc<4>::Convert<text_editor::line_edit_control,void (__stdcall text_editor::line_edit_control::*)(void),void (__thiscall fastdelegate::detail::GenericClass::*)(void)>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.c
_TEXT	ENDS
;	COMDAT ??$__unique_copy@PAPAVbase@text_editor@@PAPAV12@U?$equal_to@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAPAPAVbase@text_editor@@PAPAV23@00U?$equal_to@PAVbase@text_editor@@@1@ABUforward_iterator_tag@1@@Z
_TEXT	SEGMENT
___binary_pred$ = 8					; size = 1
??$__unique_copy@PAPAVbase@text_editor@@PAPAV12@U?$equal_to@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAPAPAVbase@text_editor@@PAPAV23@00U?$equal_to@PAVbase@text_editor@@@1@ABUforward_iterator_tag@1@@Z PROC ; stlp_std::priv::__unique_copy<text_editor::base * *,text_editor::base * *,stlp_std::equal_to<text_editor::base *> >, COMDAT
; ___first$ = eax
; ___last$ = esi
; ___result$ = ecx

; 319  :   *__result = *__first;

	mov	edx, DWORD PTR [eax]

; 320  :   while (++__first != __last)

	add	eax, 4
	cmp	eax, esi
	mov	DWORD PTR [ecx], edx
	je	SHORT $LN9@unique_cop
	npad	5
$LL3@unique_cop:

; 321  :     if (!__binary_pred(*__result, *__first)) *++__result = *__first;

	mov	edx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], edx
	je	SHORT $LN1@unique_cop
	add	ecx, 4
	mov	DWORD PTR [ecx], edx
$LN1@unique_cop:
	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL3@unique_cop
$LN9@unique_cop:

; 322  :   return ++__result;

	lea	eax, DWORD PTR [ecx+4]

; 323  : }

	ret	0
??$__unique_copy@PAPAVbase@text_editor@@PAPAV12@U?$equal_to@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAPAPAVbase@text_editor@@PAPAV23@00U?$equal_to@PAVbase@text_editor@@@1@ABUforward_iterator_tag@1@@Z ENDP ; stlp_std::priv::__unique_copy<text_editor::base * *,text_editor::base * *,stlp_std::equal_to<text_editor::base *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.h
_TEXT	ENDS
;	COMDAT ??$adjacent_find@PAPAVbase@text_editor@@U?$equal_to@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAPAPAVbase@text_editor@@PAPAV12@0U?$equal_to@PAVbase@text_editor@@@0@@Z
_TEXT	SEGMENT
___binary_pred$ = 8					; size = 1
??$adjacent_find@PAPAVbase@text_editor@@U?$equal_to@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAPAPAVbase@text_editor@@PAPAV12@0U?$equal_to@PAVbase@text_editor@@@0@@Z PROC ; stlp_std::adjacent_find<text_editor::base * *,stlp_std::equal_to<text_editor::base *> >, COMDAT
; ___first$ = edx
; ___last$ = eax

; 84   :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__first, __last))
; 85   :   if (__first == __last)

	cmp	edx, eax

; 86   :     return __last;

	je	SHORT $LN5@adjacent_f

; 87   :   _ForwardIter __next = __first;
; 88   :   while(++__next != __last) {

	lea	ecx, DWORD PTR [edx+4]
	cmp	ecx, eax
	push	esi
	je	SHORT $LN12@adjacent_f
	npad	4
$LL3@adjacent_f:

; 89   :     if (__binary_pred(*__first, *__next))

	mov	esi, DWORD PTR [edx]
	cmp	esi, DWORD PTR [ecx]
	je	SHORT $LN10@adjacent_f

; 91   :     __first = __next;

	mov	edx, ecx
	add	ecx, 4
	cmp	ecx, eax
	jne	SHORT $LL3@adjacent_f
	pop	esi

; 92   :   }
; 93   :   return __last;
; 94   : }

	ret	0
$LN10@adjacent_f:

; 90   :       return __first;

	mov	eax, edx
$LN12@adjacent_f:
	pop	esi
$LN5@adjacent_f:

; 92   :   }
; 93   :   return __last;
; 94   : }

	ret	0
??$adjacent_find@PAPAVbase@text_editor@@U?$equal_to@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAPAPAVbase@text_editor@@PAPAV12@0U?$equal_to@PAVbase@text_editor@@@0@@Z ENDP ; stlp_std::adjacent_find<text_editor::base * *,stlp_std::equal_to<text_editor::base *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_function_base.h
_TEXT	ENDS
;	COMDAT ??$__equal_to@PAVbase@text_editor@@@priv@stlp_std@@YA?AU?$equal_to@PAVbase@text_editor@@@1@PAPAVbase@text_editor@@@Z
_TEXT	SEGMENT
??$__equal_to@PAVbase@text_editor@@@priv@stlp_std@@YA?AU?$equal_to@PAVbase@text_editor@@@1@PAPAVbase@text_editor@@@Z PROC ; stlp_std::priv::__equal_to<text_editor::base *>, COMDAT
; ___$ReturnUdt$ = eax

; 99   : equal_to<_Tp> __equal_to(_Tp* ) { return equal_to<_Tp>(); }

	ret	0
??$__equal_to@PAVbase@text_editor@@@priv@stlp_std@@YA?AU?$equal_to@PAVbase@text_editor@@@1@PAPAVbase@text_editor@@@Z ENDP ; stlp_std::priv::__equal_to<text_editor::base *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.c
_TEXT	ENDS
;	COMDAT ??$__unguarded_partition@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAPAPAVbase@text_editor@@PAPAV23@0PAV23@U?$less@PAVbase@text_editor@@@1@@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 1
??$__unguarded_partition@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAPAPAVbase@text_editor@@PAPAV23@0PAV23@U?$less@PAVbase@text_editor@@@1@@Z PROC ; stlp_std::priv::__unguarded_partition<text_editor::base * *,text_editor::base *,stlp_std::less<text_editor::base *> >, COMDAT
; ___first$ = eax
; ___last$ = ecx
; ___pivot$ = edx

; 873  :                                         _Tp __pivot, _Compare __comp) {

	push	esi
	push	edi
$LL7@unguarded_:

; 874  :   for (;;) {
; 875  :     while (__comp(*__first, __pivot)) {

	cmp	DWORD PTR [eax], edx
	jae	SHORT $LN4@unguarded_
$LL5@unguarded_:

; 876  :       _STLP_VERBOSE_ASSERT(!__comp(__pivot, *__first), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 877  :       ++__first;

	add	eax, 4
	cmp	DWORD PTR [eax], edx
	jb	SHORT $LL5@unguarded_
$LN4@unguarded_:

; 878  :     }
; 879  :     --__last;

	sub	ecx, 4

; 880  :     while (__comp(__pivot, *__last)) {

	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN2@unguarded_
$LL3@unguarded_:

; 881  :       _STLP_VERBOSE_ASSERT(!__comp(*__last, __pivot), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 882  :       --__last;

	sub	ecx, 4
	cmp	edx, DWORD PTR [ecx]
	jb	SHORT $LL3@unguarded_
$LN2@unguarded_:

; 883  :     }
; 884  :     if (!(__first < __last))

	cmp	eax, ecx
	jae	SHORT $LN35@unguarded_

; 885  :       return __first;
; 886  :     iter_swap(__first, __last);

	mov	esi, DWORD PTR [eax]
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [ecx], esi

; 887  :     ++__first;

	add	eax, 4

; 888  :   }

	jmp	SHORT $LL7@unguarded_
$LN35@unguarded_:
	pop	edi
	pop	esi

; 889  : }

	ret	0
??$__unguarded_partition@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAPAPAVbase@text_editor@@PAPAV23@0PAV23@U?$less@PAVbase@text_editor@@@1@@Z ENDP ; stlp_std::priv::__unguarded_partition<text_editor::base * *,text_editor::base *,stlp_std::less<text_editor::base *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__median@PAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAABQAVbase@text_editor@@ABQAV23@00U?$less@PAVbase@text_editor@@@1@@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 1
??$__median@PAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAABQAVbase@text_editor@@ABQAV23@00U?$less@PAVbase@text_editor@@@1@@Z PROC ; stlp_std::priv::__median<text_editor::base *,stlp_std::less<text_editor::base *> >, COMDAT
; ___a$ = ebx
; ___b$ = eax
; ___c$ = edi

; 84   :   if (__comp(__a, __b)) {

	mov	ecx, DWORD PTR [ebx]
	mov	edx, DWORD PTR [eax]
	cmp	ecx, edx
	push	esi

; 85   :     _STLP_VERBOSE_ASSERT(!__comp(__b, __a), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 86   :     if (__comp(__b, __c)) {

	mov	esi, DWORD PTR [edi]
	jae	SHORT $LN10@median
	cmp	edx, esi

; 87   :       _STLP_VERBOSE_ASSERT(!__comp(__c, __b), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 88   :       return __b;

	jb	SHORT $LN1@median

; 89   :     }
; 90   :     else if (__comp(__a, __c)) {

	cmp	ecx, esi

; 91   :       _STLP_VERBOSE_ASSERT(!__comp(__c, __a), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 92   :       return __c;

	jb	SHORT $LN23@median
$LN7@median:

; 93   :     }
; 94   :     else
; 95   :       return __a;

	mov	eax, ebx
	pop	esi

; 104  :   }
; 105  :   else
; 106  :     return __b;
; 107  : }

	ret	0
$LN10@median:

; 96   :   }
; 97   :   else if (__comp(__a, __c)) {

	cmp	ecx, esi

; 98   :     _STLP_VERBOSE_ASSERT(!__comp(__c, __a), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 99   :     return __a;

	jb	SHORT $LN7@median

; 100  :   }
; 101  :   else if (__comp(__b, __c)) {

	cmp	edx, esi
	jae	SHORT $LN1@median
$LN23@median:

; 102  :     _STLP_VERBOSE_ASSERT(!__comp(__c, __b), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 103  :     return __c;

	mov	eax, edi
$LN1@median:
	pop	esi

; 104  :   }
; 105  :   else
; 106  :     return __b;
; 107  : }

	ret	0
??$__median@PAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAABQAVbase@text_editor@@ABQAV23@00U?$less@PAVbase@text_editor@@@1@@Z ENDP ; stlp_std::priv::__median<text_editor::base *,stlp_std::less<text_editor::base *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\fastdelegate.h
_TEXT	ENDS
;	COMDAT ??$bindmemfunc@Vline_edit_control@text_editor@@P812@AGXXZ@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AGXXZP6GXXZP6GXXZ@detail@fastdelegate@@QAEXPAVline_edit_control@text_editor@@P834@AGXXZ@Z
_TEXT	SEGMENT
??$bindmemfunc@Vline_edit_control@text_editor@@P812@AGXXZ@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AGXXZP6GXXZP6GXXZ@detail@fastdelegate@@QAEXPAVline_edit_control@text_editor@@P834@AGXXZ@Z PROC ; fastdelegate::detail::ClosurePtr<void (__stdcall fastdelegate::detail::GenericClass::*)(void),void (__stdcall*)(void),void (__stdcall*)(void)>::bindmemfunc<text_editor::line_edit_control,void (__stdcall text_editor::line_edit_control::*)(void)>, COMDAT
; _this$ = eax
; _pthis$ = edx
; _function_to_bind$ = ecx

; 682  : 		m_pthis = SimplifyMemFunc< sizeof(function_to_bind) >
; 683  : 			::Convert(pthis, function_to_bind, m_pFunction);

	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax], edx

; 684  : #if !defined(FASTDELEGATE_USESTATICFUNCTIONHACK)
; 685  : 		m_pStaticFunction = 0;
; 686  : #endif
; 687  : 	}

	ret	0
??$bindmemfunc@Vline_edit_control@text_editor@@P812@AGXXZ@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AGXXZP6GXXZP6GXXZ@detail@fastdelegate@@QAEXPAVline_edit_control@text_editor@@P834@AGXXZ@Z ENDP ; fastdelegate::detail::ClosurePtr<void (__stdcall fastdelegate::detail::GenericClass::*)(void),void (__stdcall*)(void),void (__stdcall*)(void)>::bindmemfunc<text_editor::line_edit_control,void (__stdcall text_editor::line_edit_control::*)(void)>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$implicit_cast@PAVline_edit_control@text_editor@@PAV12@@detail@fastdelegate@@YAPAVline_edit_control@text_editor@@PAV23@@Z
_TEXT	SEGMENT
??$implicit_cast@PAVline_edit_control@text_editor@@PAV12@@detail@fastdelegate@@YAPAVline_edit_control@text_editor@@PAV23@@Z PROC ; fastdelegate::detail::implicit_cast<text_editor::line_edit_control *,text_editor::line_edit_control *>, COMDAT
; _input$ = eax

; 157  : 	return input;
; 158  : }

	ret	0
??$implicit_cast@PAVline_edit_control@text_editor@@PAV12@@detail@fastdelegate@@YAPAVline_edit_control@text_editor@@PAV23@@Z ENDP ; fastdelegate::detail::implicit_cast<text_editor::line_edit_control *,text_editor::line_edit_control *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.c
_TEXT	ENDS
;	COMDAT ??$unique_copy@PAPAVbase@text_editor@@PAPAV12@@stlp_std@@YAPAPAVbase@text_editor@@PAPAV12@00@Z
_TEXT	SEGMENT
??$unique_copy@PAPAVbase@text_editor@@PAPAV12@@stlp_std@@YAPAPAVbase@text_editor@@PAPAV12@00@Z PROC ; stlp_std::unique_copy<text_editor::base * *,text_editor::base * *>, COMDAT
; ___first$ = edx
; ___last$ = esi
; ___result$ = eax

; 348  :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__first, __last))
; 349  :   if (__first == __last) return __result;

	cmp	edx, esi
	je	SHORT $LN2@unique_cop@2
	push	edi

; 350  :   return _STLP_PRIV __unique_copy(__first, __last, __result,
; 351  :                                   _STLP_PRIV __equal_to(_STLP_VALUE_TYPE(__first, _InputIter)),
; 352  :                                   _STLP_ITERATOR_CATEGORY(__result, _OutputIter));

	mov	edi, DWORD PTR [edx]
	mov	DWORD PTR [eax], edi
	mov	ecx, eax
	lea	eax, DWORD PTR [edx+4]
	cmp	eax, esi
	pop	edi
	je	SHORT $LN7@unique_cop@2
$LL8@unique_cop@2:
	mov	edx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], edx
	je	SHORT $LN6@unique_cop@2
	add	ecx, 4
	mov	DWORD PTR [ecx], edx
$LN6@unique_cop@2:
	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL8@unique_cop@2
$LN7@unique_cop@2:
	lea	eax, DWORD PTR [ecx+4]
$LN2@unique_cop@2:

; 353  : }

	ret	0
??$unique_copy@PAPAVbase@text_editor@@PAPAV12@@stlp_std@@YAPAPAVbase@text_editor@@PAPAV12@00@Z ENDP ; stlp_std::unique_copy<text_editor::base * *,text_editor::base * *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.h
_TEXT	ENDS
;	COMDAT ??$adjacent_find@PAPAVbase@text_editor@@@stlp_std@@YAPAPAVbase@text_editor@@PAPAV12@0@Z
_TEXT	SEGMENT
??$adjacent_find@PAPAVbase@text_editor@@@stlp_std@@YAPAPAVbase@text_editor@@PAPAV12@0@Z PROC ; stlp_std::adjacent_find<text_editor::base * *>, COMDAT
; ___first$ = edx
; ___last$ = eax

; 99   :   return adjacent_find(__first, __last,
; 100  :                        _STLP_PRIV __equal_to(_STLP_VALUE_TYPE(__first, _ForwardIter)));

	cmp	edx, eax
	je	SHORT $LN9@adjacent_f@2
	lea	ecx, DWORD PTR [edx+4]
	cmp	ecx, eax
	push	esi
	je	SHORT $LN16@adjacent_f@2
	npad	4
$LL7@adjacent_f@2:
	mov	esi, DWORD PTR [edx]
	cmp	esi, DWORD PTR [ecx]
	je	SHORT $LN14@adjacent_f@2
	mov	edx, ecx
	add	ecx, 4
	cmp	ecx, eax
	jne	SHORT $LL7@adjacent_f@2
	pop	esi

; 101  : }

	ret	0
$LN14@adjacent_f@2:

; 99   :   return adjacent_find(__first, __last,
; 100  :                        _STLP_PRIV __equal_to(_STLP_VALUE_TYPE(__first, _ForwardIter)));

	mov	eax, edx
$LN16@adjacent_f@2:
	pop	esi
$LN9@adjacent_f@2:

; 101  : }

	ret	0
??$adjacent_find@PAPAVbase@text_editor@@@stlp_std@@YAPAPAVbase@text_editor@@PAPAV12@0@Z ENDP ; stlp_std::adjacent_find<text_editor::base * *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_function_base.h
_TEXT	ENDS
;	COMDAT ??$__less@PAVbase@text_editor@@@priv@stlp_std@@YA?AU?$less@PAVbase@text_editor@@@1@PAPAVbase@text_editor@@@Z
_TEXT	SEGMENT
$T212323 = -1						; size = 1
??$__less@PAVbase@text_editor@@@priv@stlp_std@@YA?AU?$less@PAVbase@text_editor@@@1@PAPAVbase@text_editor@@@Z PROC ; stlp_std::priv::__less<text_editor::base *>, COMDAT
; ___$ReturnUdt$ = eax

; 96   : less<_Tp> __less(_Tp* ) { return less<_Tp>(); }

	push	ecx
	mov	cl, BYTE PTR $T212323[esp+4]
	mov	BYTE PTR [eax], cl
	pop	ecx
	ret	0
??$__less@PAVbase@text_editor@@@priv@stlp_std@@YA?AU?$less@PAVbase@text_editor@@@1@PAPAVbase@text_editor@@@Z ENDP ; stlp_std::priv::__less<text_editor::base *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\buffer_vector_inline.h
_TEXT	ENDS
;	COMDAT ?destroy@?$buffer_vector@PAVbase@text_editor@@@@CAXPAPAVbase@text_editor@@@Z
_TEXT	SEGMENT
?destroy@?$buffer_vector@PAVbase@text_editor@@@@CAXPAPAVbase@text_editor@@@Z PROC ; buffer_vector<text_editor::base *>::destroy, COMDAT

; 377  : 	p->~T			();
; 378  : }

	ret	0
?destroy@?$buffer_vector@PAVbase@text_editor@@@@CAXPAPAVbase@text_editor@@@Z ENDP ; buffer_vector<text_editor::base *>::destroy
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?destroy@?$buffer_vector@PAVbase@text_editor@@@@CAXPAPAVbase@text_editor@@ABQAPAV23@@Z
_TEXT	SEGMENT
?destroy@?$buffer_vector@PAVbase@text_editor@@@@CAXPAPAVbase@text_editor@@ABQAPAV23@@Z PROC ; buffer_vector<text_editor::base *>::destroy, COMDAT

; 383  : 	for ( ; begin != end; ++begin)
; 384  : 		destroy		(begin);
; 385  : }

	ret	0
?destroy@?$buffer_vector@PAVbase@text_editor@@@@CAXPAPAVbase@text_editor@@ABQAPAV23@@Z ENDP ; buffer_vector<text_editor::base *>::destroy
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?size@?$buffer_vector@PAVbase@text_editor@@@@QBEIXZ
_TEXT	SEGMENT
?size@?$buffer_vector@PAVbase@text_editor@@@@QBEIXZ PROC ; buffer_vector<text_editor::base *>::size, COMDAT
; _this$ = ecx

; 340  : 	return			(m_end - m_begin);

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 341  : }

	ret	0
?size@?$buffer_vector@PAVbase@text_editor@@@@QBEIXZ ENDP ; buffer_vector<text_editor::base *>::size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?clear@?$buffer_vector@PAVbase@text_editor@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$buffer_vector@PAVbase@text_editor@@@@QAEXXZ PROC ; buffer_vector<text_editor::base *>::clear, COMDAT
; _this$ = eax

; 99   : 	destroy			(m_begin, m_end);
; 100  : 	m_end			= m_begin;

	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [eax+4], ecx

; 101  : }

	ret	0
?clear@?$buffer_vector@PAVbase@text_editor@@@@QAEXXZ ENDP ; buffer_vector<text_editor::base *>::clear
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrmemory_subst_msvc.h
_TEXT	ENDS
;	COMDAT ??R?$xr_special_free@$00Vbase@text_editor@@@@QAEXAAPAVbase@text_editor@@@Z
_TEXT	SEGMENT
??R?$xr_special_free@$00Vbase@text_editor@@@@QAEXAAPAVbase@text_editor@@@Z PROC ; xr_special_free<1,text_editor::base>::operator(), COMDAT
; _ptr$ = esi

; 132  : 		void*	_real_ptr	= dynamic_cast<void*>(ptr);

	mov	eax, DWORD PTR [esi]
	push	edi
	push	eax
	call	___RTCastToVoid

; 133  : 		ptr->~T			();

	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx]
	add	esp, 4
	mov	edi, eax
	mov	eax, DWORD PTR [edx]
	push	0
	call	eax

; 134  : 		Memory.mem_free	(_real_ptr);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	pop	edi

; 135  : 	}

	ret	0
??R?$xr_special_free@$00Vbase@text_editor@@@@QAEXAAPAVbase@text_editor@@@Z ENDP ; xr_special_free<1,text_editor::base>::operator()
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$xr_delete@Vbase@text_editor@@@@YAXAAPAVbase@text_editor@@@Z
_TEXT	SEGMENT
??$xr_delete@Vbase@text_editor@@@@YAXAAPAVbase@text_editor@@@Z PROC ; xr_delete<text_editor::base>, COMDAT
; _ptr$ = esi

; 151  : 	if (ptr) 

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN1@xr_delete
	push	edi

; 152  : 	{
; 153  : 		xr_special_free<is_polymorphic<T>::result,T>()(ptr);

	push	eax
	call	___RTCastToVoid
	mov	ecx, DWORD PTR [esi]
	mov	edi, eax
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	add	esp, 4
	push	0
	call	edx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z

; 154  : 		ptr = NULL;

	mov	DWORD PTR [esi], 0
	pop	edi
$LN1@xr_delete:

; 155  : 	}
; 156  : }

	ret	0
??$xr_delete@Vbase@text_editor@@@@YAXAAPAVbase@text_editor@@@Z ENDP ; xr_delete<text_editor::base>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\vector.h
_TEXT	ENDS
;	COMDAT ??$clamp@H@@YAXAAHABH1@Z
_TEXT	SEGMENT
??$clamp@H@@YAXAAHABH1@Z PROC				; clamp<int>, COMDAT
; _val$ = ecx
; __high$ = eax

; 98   : 	if( val<_low ) val = _low; else if( val>_high ) val = _high;

	mov	eax, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], eax
	jle	SHORT $LN1@clamp
	mov	DWORD PTR [ecx], eax
$LN1@clamp:

; 99   : };

	ret	0
??$clamp@H@@YAXAAHABH1@Z ENDP				; clamp<int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.h
_TEXT	ENDS
;	COMDAT ??$unique@PAPAVbase@text_editor@@@stlp_std@@YAPAPAVbase@text_editor@@PAPAV12@0@Z
_TEXT	SEGMENT
??$unique@PAPAVbase@text_editor@@@stlp_std@@YAPAPAVbase@text_editor@@PAPAV12@0@Z PROC ; stlp_std::unique<text_editor::base * *>, COMDAT
; ___first$ = ecx
; ___last$ = edx

; 300  :   __first = adjacent_find(__first, __last);

	cmp	ecx, edx
	push	esi
	jne	SHORT $LN10@unique
$LN8@unique:
	mov	eax, edx
	pop	esi

; 302  : }

	ret	0

; 300  :   __first = adjacent_find(__first, __last);

$LN10@unique:
	lea	eax, DWORD PTR [ecx+4]
	cmp	eax, edx
	je	SHORT $LN8@unique
$LL9@unique:
	mov	esi, DWORD PTR [ecx]
	cmp	esi, DWORD PTR [eax]
	je	SHORT $LN29@unique
	mov	ecx, eax
	add	eax, 4
	cmp	eax, edx
	jne	SHORT $LL9@unique
	mov	eax, edx
	pop	esi

; 302  : }

	ret	0
$LN29@unique:

; 301  :   return unique_copy(__first, __last, __first);

	cmp	ecx, edx
	mov	eax, ecx
	je	SHORT $LN16@unique
	lea	eax, DWORD PTR [ecx+4]
	cmp	eax, edx
	je	SHORT $LN21@unique
$LL22@unique:
	mov	esi, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], esi
	je	SHORT $LN20@unique
	add	ecx, 4
	mov	DWORD PTR [ecx], esi
$LN20@unique:
	add	eax, 4
	cmp	eax, edx
	jne	SHORT $LL22@unique
$LN21@unique:
	lea	eax, DWORD PTR [ecx+4]
$LN16@unique:
	pop	esi

; 302  : }

	ret	0
??$unique@PAPAVbase@text_editor@@@stlp_std@@YAPAPAVbase@text_editor@@PAPAV12@0@Z ENDP ; stlp_std::unique<text_editor::base * *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\buffer_vector_inline.h
_TEXT	ENDS
;	COMDAT ?end@?$buffer_vector@PAVbase@text_editor@@@@QAEPAPAVbase@text_editor@@XZ
_TEXT	SEGMENT
?end@?$buffer_vector@PAVbase@text_editor@@@@QAEPAPAVbase@text_editor@@XZ PROC ; buffer_vector<text_editor::base *>::end, COMDAT
; _this$ = eax

; 298  : 	return			(m_end);

	mov	eax, DWORD PTR [eax+4]

; 299  : }

	ret	0
?end@?$buffer_vector@PAVbase@text_editor@@@@QAEPAPAVbase@text_editor@@XZ ENDP ; buffer_vector<text_editor::base *>::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$buffer_vector@PAVbase@text_editor@@@@QAEPAPAVbase@text_editor@@XZ
_TEXT	SEGMENT
?begin@?$buffer_vector@PAVbase@text_editor@@@@QAEPAPAVbase@text_editor@@XZ PROC ; buffer_vector<text_editor::base *>::begin, COMDAT
; _this$ = eax

; 286  : 	return			(m_begin);

	mov	eax, DWORD PTR [eax]

; 287  : }

	ret	0
?begin@?$buffer_vector@PAVbase@text_editor@@@@QAEPAPAVbase@text_editor@@XZ ENDP ; buffer_vector<text_editor::base *>::begin
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$buffer_vector@PAVbase@text_editor@@@@QAE@XZ
_TEXT	SEGMENT
??1?$buffer_vector@PAVbase@text_editor@@@@QAE@XZ PROC	; buffer_vector<text_editor::base *>::~buffer_vector<text_editor::base *>, COMDAT
; _this$ = eax

; 54   : 	clear			();

	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [eax+4], ecx

; 55   : }

	ret	0
??1?$buffer_vector@PAVbase@text_editor@@@@QAE@XZ ENDP	; buffer_vector<text_editor::base *>::~buffer_vector<text_editor::base *>
_TEXT	ENDS
PUBLIC	?SwitchKL@line_edit_control@text_editor@@AAGXXZ	; text_editor::line_edit_control::SwitchKL
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\line_edit_control.cpp
;	COMDAT ?SwitchKL@line_edit_control@text_editor@@AAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?SwitchKL@line_edit_control@text_editor@@AAGXXZ PROC	; text_editor::line_edit_control::SwitchKL, COMDAT

; 759  : 	ActivateKeyboardLayout( (HKL)HKL_NEXT, 0 );

	push	0
	push	1
	call	DWORD PTR __imp__ActivateKeyboardLayout@8

; 760  : }

	ret	4
?SwitchKL@line_edit_control@text_editor@@AAGXXZ ENDP	; text_editor::line_edit_control::SwitchKL
_TEXT	ENDS
PUBLIC	?compute_positions@line_edit_control@text_editor@@AAEXXZ ; text_editor::line_edit_control::compute_positions
; Function compile flags: /Ogtpy
;	COMDAT ?compute_positions@line_edit_control@text_editor@@AAEXXZ
_TEXT	SEGMENT
?compute_positions@line_edit_control@text_editor@@AAEXXZ PROC ; text_editor::line_edit_control::compute_positions, COMDAT
; _this$ = ecx

; 735  : 	m_p1 = m_cur_pos;
; 736  : 	m_p2 = m_cur_pos;
; 737  : 	if ( m_unselected_mode )

	cmp	BYTE PTR [ecx+1106], 0
	mov	edx, DWORD PTR [ecx+1056]
	mov	DWORD PTR [ecx+1064], edx
	mov	DWORD PTR [ecx+1068], edx
	jne	SHORT $LN1@compute_po

; 738  : 	{
; 739  : 		return;
; 740  : 	}
; 741  : 
; 742  : 	if( m_cur_pos > m_select_start )

	mov	eax, DWORD PTR [ecx+1060]
	cmp	edx, eax
	jle	SHORT $LN7@compute_po

; 743  : 	{
; 744  : 		m_p1 = m_select_start;

	mov	DWORD PTR [ecx+1064], eax

; 749  : 	}
; 750  : }

	ret	0
$LN7@compute_po:

; 745  : 	}
; 746  : 	else if( m_cur_pos < m_select_start )

	jge	SHORT $LN1@compute_po

; 747  : 	{
; 748  : 		m_p2 = m_select_start;

	mov	DWORD PTR [ecx+1068], eax
$LN1@compute_po:

; 749  : 	}
; 750  : }

	ret	0
?compute_positions@line_edit_control@text_editor@@AAEXXZ ENDP ; text_editor::line_edit_control::compute_positions
_TEXT	ENDS
PUBLIC	?move_pos_right@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::move_pos_right
; Function compile flags: /Ogtpy
;	COMDAT ?move_pos_right@line_edit_control@text_editor@@AAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?move_pos_right@line_edit_control@text_editor@@AAGXXZ PROC ; text_editor::line_edit_control::move_pos_right, COMDAT

; 708  : 	++m_cur_pos;

	mov	eax, DWORD PTR _this$[esp-4]
	add	DWORD PTR [eax+1056], 1

; 709  : }

	ret	4
?move_pos_right@line_edit_control@text_editor@@AAGXXZ ENDP ; text_editor::line_edit_control::move_pos_right
_TEXT	ENDS
PUBLIC	?move_pos_left@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::move_pos_left
; Function compile flags: /Ogtpy
;	COMDAT ?move_pos_left@line_edit_control@text_editor@@AAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?move_pos_left@line_edit_control@text_editor@@AAGXXZ PROC ; text_editor::line_edit_control::move_pos_left, COMDAT

; 703  : 	--m_cur_pos;

	mov	eax, DWORD PTR _this$[esp-4]
	add	DWORD PTR [eax+1056], -1

; 704  : }

	ret	4
?move_pos_left@line_edit_control@text_editor@@AAGXXZ ENDP ; text_editor::line_edit_control::move_pos_left
_TEXT	ENDS
PUBLIC	?move_pos_home@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::move_pos_home
; Function compile flags: /Ogtpy
;	COMDAT ?move_pos_home@line_edit_control@text_editor@@AAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?move_pos_home@line_edit_control@text_editor@@AAGXXZ PROC ; text_editor::line_edit_control::move_pos_home, COMDAT

; 693  : 	m_cur_pos = 0;

	mov	eax, DWORD PTR _this$[esp-4]
	mov	DWORD PTR [eax+1056], 0

; 694  : }

	ret	4
?move_pos_home@line_edit_control@text_editor@@AAGXXZ ENDP ; text_editor::line_edit_control::move_pos_home
_TEXT	ENDS
PUBLIC	?flip_insert_mode@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::flip_insert_mode
; Function compile flags: /Ogtpy
;	COMDAT ?flip_insert_mode@line_edit_control@text_editor@@AAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?flip_insert_mode@line_edit_control@text_editor@@AAGXXZ PROC ; text_editor::line_edit_control::flip_insert_mode, COMDAT

; 629  : 	m_insert_mode = !m_insert_mode;

	mov	eax, DWORD PTR _this$[esp-4]
	cmp	BYTE PTR [eax+1101], 0
	sete	cl
	mov	BYTE PTR [eax+1101], cl

; 630  : }

	ret	4
?flip_insert_mode@line_edit_control@text_editor@@AAGXXZ ENDP ; text_editor::line_edit_control::flip_insert_mode
_TEXT	ENDS
PUBLIC	?paste_from_clipboard@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::paste_from_clipboard
; Function compile flags: /Ogtpy
;	COMDAT ?paste_from_clipboard@line_edit_control@text_editor@@AAGXXZ
_TEXT	SEGMENT
$T212477 = 8						; size = 4
_this$ = 8						; size = 4
?paste_from_clipboard@line_edit_control@text_editor@@AAGXXZ PROC ; text_editor::line_edit_control::paste_from_clipboard, COMDAT

; 603  : 	os_clipboard::paste_from_clipboard( m_inserted, m_buffer_size-1 );

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+1052]
	mov	eax, DWORD PTR [eax+1032]
	lea	edx, DWORD PTR $T212477[esp-4]
	push	edx
	sub	ecx, 1
	push	eax
	mov	DWORD PTR $T212477[esp+4], ecx
	call	DWORD PTR __imp_?paste_from_clipboard@os_clipboard@@YAXPADABI@Z
	add	esp, 8

; 604  : }

	ret	4
?paste_from_clipboard@line_edit_control@text_editor@@AAGXXZ ENDP ; text_editor::line_edit_control::paste_from_clipboard
_TEXT	ENDS
PUBLIC	?empty_inserted@line_edit_control@text_editor@@AAE_NXZ ; text_editor::line_edit_control::empty_inserted
; Function compile flags: /Ogtpy
;	COMDAT ?empty_inserted@line_edit_control@text_editor@@AAE_NXZ
_TEXT	SEGMENT
?empty_inserted@line_edit_control@text_editor@@AAE_NXZ PROC ; text_editor::line_edit_control::empty_inserted, COMDAT
; _this$ = ecx

; 383  : 	return (m_inserted[0] == 0);

	mov	eax, DWORD PTR [ecx+1032]
	xor	ecx, ecx
	cmp	BYTE PTR [eax], cl
	sete	cl
	mov	al, cl

; 384  : }

	ret	0
?empty_inserted@line_edit_control@text_editor@@AAE_NXZ ENDP ; text_editor::line_edit_control::empty_inserted
_TEXT	ENDS
PUBLIC	?clear_inserted@line_edit_control@text_editor@@AAEXXZ ; text_editor::line_edit_control::clear_inserted
; Function compile flags: /Ogtpy
;	COMDAT ?clear_inserted@line_edit_control@text_editor@@AAEXXZ
_TEXT	SEGMENT
?clear_inserted@line_edit_control@text_editor@@AAEXXZ PROC ; text_editor::line_edit_control::clear_inserted, COMDAT
; _this$ = ecx

; 378  : 	m_inserted[0] = m_inserted[1] = 0;

	mov	eax, DWORD PTR [ecx+1032]
	mov	BYTE PTR [eax+1], 0
	mov	ecx, DWORD PTR [ecx+1032]
	mov	BYTE PTR [ecx], 0

; 379  : }

	ret	0
?clear_inserted@line_edit_control@text_editor@@AAEXXZ ENDP ; text_editor::line_edit_control::clear_inserted
_TEXT	ENDS
PUBLIC	?insert_character@line_edit_control@text_editor@@QAEXD@Z ; text_editor::line_edit_control::insert_character
; Function compile flags: /Ogtpy
;	COMDAT ?insert_character@line_edit_control@text_editor@@QAEXD@Z
_TEXT	SEGMENT
_c$ = 8							; size = 1
?insert_character@line_edit_control@text_editor@@QAEXD@Z PROC ; text_editor::line_edit_control::insert_character, COMDAT
; _this$ = ecx

; 373  : 	m_inserted[0] = c;

	mov	eax, DWORD PTR [ecx+1032]
	mov	cl, BYTE PTR _c$[esp-4]
	mov	BYTE PTR [eax], cl

; 374  : }

	ret	4
?insert_character@line_edit_control@text_editor@@QAEXD@Z ENDP ; text_editor::line_edit_control::insert_character
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?get_caps_lock_state@text_editor@@YA_NXZ
_TEXT	SEGMENT
?get_caps_lock_state@text_editor@@YA_NXZ PROC		; text_editor::get_caps_lock_state, COMDAT

; 92   : #if 0
; 93   : 	static bool first_time					= true;
; 94   : 	static bool is_windows_vista_or_later	= false;
; 95   : 	if ( first_time ) {
; 96   : 		first_time							= false;
; 97   : 		OSVERSIONINFO						version_info;
; 98   : 		ZeroMemory							( &version_info, sizeof(version_info) );
; 99   : 		version_info.dwOSVersionInfoSize	= sizeof(version_info);
; 100  : 		GetVersionEx						( &version_info );
; 101  : 		is_windows_vista_or_later			= version_info.dwMajorVersion >= 6;
; 102  : 	}
; 103  : 
; 104  : 	if ( is_windows_vista_or_later )
; 105  : 		return		!!(GetKeyState(VK_CAPITAL) & 1);
; 106  : 	else
; 107  : #else // #if 0
; 108  : 		return		false;

	xor	al, al

; 109  : #endif // #if 0
; 110  : }

	ret	0
?get_caps_lock_state@text_editor@@YA_NXZ ENDP		; text_editor::get_caps_lock_state
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?terminate_char@text_editor@@YA_ND_N@Z
_TEXT	SEGMENT
_check_space$ = 8					; size = 1
?terminate_char@text_editor@@YA_ND_N@Z PROC		; text_editor::terminate_char, COMDAT
; _c$ = eax

; 24   : 	switch ( c )

	movsx	eax, al
	add	eax, -32				; ffffffe0H
	cmp	eax, 94					; 0000005eH
	ja	SHORT $LN3@terminate_
	movzx	eax, BYTE PTR $LN7@terminate_[eax]
	jmp	DWORD PTR $LN8@terminate_[eax*4]
$LN2@terminate_:

; 25   : 	{
; 26   : 		case ' ':
; 27   : 			return check_space;

	mov	al, BYTE PTR _check_space$[esp-4]

; 43   : }

	ret	0
$LN1@terminate_:

; 28   : 		case '(':	case ')':
; 29   : 		case '{':	case '}':
; 30   : 		case '[':	case ']':
; 31   : 		case '<':	case '>':
; 32   : 		case '\'':	case '\"':
; 33   : 		case '=':	case '+':	case '-':	case '*':	case '\\':
; 34   : 		case '/':	case '&':	case '|':
; 35   : 		case '!':	case '@':	case '#':	case '~':	case '`':
; 36   : 		case '$':	case '%':	case '^':
; 37   : 		case ':':	case ';':
; 38   : 		case '?':	case ',':	case '.':
; 39   : 		case '_':
; 40   : 			return true;

	mov	al, 1

; 43   : }

	ret	0
$LN3@terminate_:

; 41   : 	}
; 42   : 	return false;

	xor	al, al

; 43   : }

	ret	0
$LN8@terminate_:
	DD	$LN2@terminate_
	DD	$LN1@terminate_
	DD	$LN3@terminate_
$LN7@terminate_:
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	1
	DB	1
	DB	1
	DB	1
?terminate_char@text_editor@@YA_ND_N@Z ENDP		; text_editor::terminate_char
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
;	COMDAT ??$__copy_backward_ptrs@PAPAVbase@text_editor@@PAPAV12@@priv@stlp_std@@YAPAPAVbase@text_editor@@PAPAV23@00ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__copy_backward_ptrs@PAPAVbase@text_editor@@PAPAV12@@priv@stlp_std@@YAPAPAVbase@text_editor@@PAPAV23@00ABU__true_type@1@@Z PROC ; stlp_std::priv::__copy_backward_ptrs<text_editor::base * *,text_editor::base * *>, COMDAT
; ___first$ = edx
; ___last$ = ecx
; ___result$ = eax

; 294  :   return (_OutputIter)__copy_trivial_backward(__first, __last, __result);

	sub	ecx, edx
	test	ecx, ecx
	jle	SHORT $LN6@copy_backw@12
	push	ecx
	push	edx
	sub	eax, ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN6@copy_backw@12:

; 295  : }

	ret	0
??$__copy_backward_ptrs@PAPAVbase@text_editor@@PAPAV12@@priv@stlp_std@@YAPAPAVbase@text_editor@@PAPAV23@00ABU__true_type@1@@Z ENDP ; stlp_std::priv::__copy_backward_ptrs<text_editor::base * *,text_editor::base * *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_heap.c
_TEXT	ENDS
;	COMDAT ??$__push_heap@PAPAVbase@text_editor@@HPAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@HHPAV12@U?$less@PAVbase@text_editor@@@0@@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 1
??$__push_heap@PAPAVbase@text_editor@@HPAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@HHPAV12@U?$less@PAVbase@text_editor@@@0@@Z PROC ; stlp_std::__push_heap<text_editor::base * *,int,text_editor::base *,stlp_std::less<text_editor::base *> >, COMDAT
; ___first$ = esi
; ___holeIndex$ = ecx
; ___topIndex$ = ebx
; ___val$ = edi

; 79   :   _Distance __parent = (__holeIndex - 1) / 2;

	lea	eax, DWORD PTR [ecx-1]
	cdq
	sub	eax, edx
	sar	eax, 1

; 80   :   while (__holeIndex > __topIndex && __comp(*(__first + __parent), __val)) {

	cmp	ecx, ebx
	jle	SHORT $LN10@push_heap@4
	npad	4
$LL2@push_heap@4:
	mov	edx, DWORD PTR [esi+eax*4]
	cmp	edx, edi
	jae	SHORT $LN10@push_heap@4

; 81   :     _STLP_VERBOSE_ASSERT(!__comp(__val, *(__first + __parent)), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 82   :     *(__first + __holeIndex) = *(__first + __parent);

	mov	DWORD PTR [esi+ecx*4], edx

; 83   :     __holeIndex = __parent;

	mov	ecx, eax

; 84   :     __parent = (__holeIndex - 1) / 2;

	add	eax, -1
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	ecx, ebx
	jg	SHORT $LL2@push_heap@4
$LN10@push_heap@4:

; 85   :   }
; 86   :   *(__first + __holeIndex) = __val;

	mov	DWORD PTR [esi+ecx*4], edi

; 87   : }

	ret	0
??$__push_heap@PAPAVbase@text_editor@@HPAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@HHPAV12@U?$less@PAVbase@text_editor@@@0@@Z ENDP ; stlp_std::__push_heap<text_editor::base * *,int,text_editor::base *,stlp_std::less<text_editor::base *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__copy_backward_aux@PAPAVbase@text_editor@@PAPAV12@@priv@stlp_std@@YAPAPAVbase@text_editor@@PAPAV23@00ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__copy_backward_aux@PAPAVbase@text_editor@@PAPAV12@@priv@stlp_std@@YAPAPAVbase@text_editor@@PAPAV23@00ABU__true_type@1@@Z PROC ; stlp_std::priv::__copy_backward_aux<text_editor::base * *,text_editor::base * *>, COMDAT
; ___first$ = edx
; ___last$ = ecx
; ___result$ = eax

; 304  :   return __copy_backward_ptrs(__first, __last, __result,
; 305  :                               _UseTrivialCopy(_STLP_VALUE_TYPE(__first, _InputIter),
; 306  :                                               _STLP_VALUE_TYPE(__result, _OutputIter))._Answer());

	sub	ecx, edx
	test	ecx, ecx
	jle	SHORT $LN12@copy_backw@13
	push	ecx
	push	edx
	sub	eax, ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN12@copy_backw@13:

; 307  : }

	ret	0
??$__copy_backward_aux@PAPAVbase@text_editor@@PAPAV12@@priv@stlp_std@@YAPAPAVbase@text_editor@@PAPAV23@00ABU__true_type@1@@Z ENDP ; stlp_std::priv::__copy_backward_aux<text_editor::base * *,text_editor::base * *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_heap.c
_TEXT	ENDS
;	COMDAT ??$__adjust_heap@PAPAVbase@text_editor@@HPAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@HHPAV12@U?$less@PAVbase@text_editor@@@0@@Z
_TEXT	SEGMENT
___holeIndex$ = 8					; size = 4
___comp$ = 12						; size = 1
??$__adjust_heap@PAPAVbase@text_editor@@HPAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@HHPAV12@U?$less@PAVbase@text_editor@@@0@@Z PROC ; stlp_std::__adjust_heap<text_editor::base * *,int,text_editor::base *,stlp_std::less<text_editor::base *> >, COMDAT
; ___first$ = ecx
; ___len$ = edx
; ___val$ = ebx

; 148  : {

	push	esi
	mov	esi, DWORD PTR ___holeIndex$[esp]

; 149  :   _Distance __topIndex = __holeIndex;
; 150  :   _Distance __secondChild = 2 * __holeIndex + 2;

	lea	eax, DWORD PTR [esi+esi+2]

; 151  :   while (__secondChild < __len) {

	cmp	eax, edx
	push	edi
	mov	edi, esi
	jge	SHORT $LN21@adjust_hea@4
	push	ebp
$LL4@adjust_hea@4:

; 152  :     if (__comp(*(__first + __secondChild), *(__first + (__secondChild - 1)))) {

	mov	ebp, DWORD PTR [ecx+eax*4]
	cmp	ebp, DWORD PTR [ecx+eax*4-4]
	jae	SHORT $LN2@adjust_hea@4

; 153  :       _STLP_VERBOSE_ASSERT(!__comp(*(__first + (__secondChild - 1)), *(__first + __secondChild)),
; 154  :                            _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 155  :       __secondChild--;

	sub	eax, 1
$LN2@adjust_hea@4:

; 156  :     }
; 157  :     *(__first + __holeIndex) = *(__first + __secondChild);

	mov	ebp, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [ecx+esi*4], ebp

; 158  :     __holeIndex = __secondChild;

	mov	esi, eax

; 159  :     __secondChild = 2 * (__secondChild + 1);

	lea	eax, DWORD PTR [eax+eax+2]
	cmp	eax, edx
	jl	SHORT $LL4@adjust_hea@4
	pop	ebp
$LN21@adjust_hea@4:

; 160  :   }
; 161  :   if (__secondChild == __len) {

	jne	SHORT $LN1@adjust_hea@4

; 162  :     *(__first + __holeIndex) = *(__first + (__secondChild - 1));

	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	DWORD PTR [ecx+esi*4], edx

; 163  :     __holeIndex = __secondChild - 1;

	lea	esi, DWORD PTR [eax-1]
$LN1@adjust_hea@4:

; 164  :   }
; 165  :   __push_heap(__first, __holeIndex, __topIndex, __val, __comp);

	lea	eax, DWORD PTR [esi-1]
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	esi, edi
	jle	SHORT $LN20@adjust_hea@4
$LL10@adjust_hea@4:
	mov	edx, DWORD PTR [ecx+eax*4]
	cmp	edx, ebx
	jae	SHORT $LN20@adjust_hea@4
	mov	DWORD PTR [ecx+esi*4], edx
	mov	esi, eax
	add	eax, -1
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	esi, edi
	jg	SHORT $LL10@adjust_hea@4
$LN20@adjust_hea@4:
	pop	edi
	mov	DWORD PTR [ecx+esi*4], ebx
	pop	esi

; 166  : }

	ret	0
??$__adjust_heap@PAPAVbase@text_editor@@HPAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@HHPAV12@U?$less@PAVbase@text_editor@@@0@@Z ENDP ; stlp_std::__adjust_heap<text_editor::base * *,int,text_editor::base *,stlp_std::less<text_editor::base *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__make_heap@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@PAV12@H@stlp_std@@YAXPAPAVbase@text_editor@@0U?$less@PAVbase@text_editor@@@0@0PAH@Z
_TEXT	SEGMENT
___last$ = 8						; size = 4
$T235337 = 12						; size = 4
??$__make_heap@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@PAV12@H@stlp_std@@YAXPAPAVbase@text_editor@@0U?$less@PAVbase@text_editor@@@0@0PAH@Z PROC ; stlp_std::__make_heap<text_editor::base * *,stlp_std::less<text_editor::base *>,text_editor::base *,int>, COMDAT
; ___first$ = edi

; 218  : {

	push	ebx
	push	ebp
	mov	ebp, DWORD PTR ___last$[esp+4]

; 219  :   if (__last - __first < 2) return;
; 220  :   _Distance __len = __last - __first;

	sub	ebp, edi
	sar	ebp, 2

; 221  :   _Distance __parent = (__len - 2)/2;

	lea	eax, DWORD PTR [ebp-2]
	cdq
	sub	eax, edx
	push	esi
	mov	esi, eax

; 222  : 
; 223  :   for (;;) {
; 224  :     __adjust_heap(__first, __parent, __len, _Tp(*(__first + __parent)),
; 225  :                   __comp);

	mov	eax, DWORD PTR $T235337[esp+8]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	sar	esi, 1
	mov	ebx, DWORD PTR [edi+esi*4]
	push	esi
	mov	edx, ebp
	mov	ecx, edi
	call	??$__adjust_heap@PAPAVbase@text_editor@@HPAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@HHPAV12@U?$less@PAVbase@text_editor@@@0@@Z ; stlp_std::__adjust_heap<text_editor::base * *,int,text_editor::base *,stlp_std::less<text_editor::base *> >
	add	esp, 8

; 226  :     if (__parent == 0) return;

	test	esi, esi
	je	SHORT $LN13@make_heap@7
$LL3@make_heap@7:

; 222  : 
; 223  :   for (;;) {
; 224  :     __adjust_heap(__first, __parent, __len, _Tp(*(__first + __parent)),
; 225  :                   __comp);

	mov	edx, DWORD PTR $T235337[esp+8]
	movzx	eax, BYTE PTR [edx]
	mov	ebx, DWORD PTR [edi+esi*4-4]

; 227  :     __parent--;

	sub	esi, 1
	push	eax
	push	esi
	mov	edx, ebp
	mov	ecx, edi
	call	??$__adjust_heap@PAPAVbase@text_editor@@HPAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@HHPAV12@U?$less@PAVbase@text_editor@@@0@@Z ; stlp_std::__adjust_heap<text_editor::base * *,int,text_editor::base *,stlp_std::less<text_editor::base *> >
	add	esp, 8
	test	esi, esi
	jne	SHORT $LL3@make_heap@7
$LN13@make_heap@7:
	pop	esi
	pop	ebp
	pop	ebx

; 228  :   }
; 229  : }

	ret	0
??$__make_heap@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@PAV12@H@stlp_std@@YAXPAPAVbase@text_editor@@0U?$less@PAVbase@text_editor@@@0@0PAH@Z ENDP ; stlp_std::__make_heap<text_editor::base * *,stlp_std::less<text_editor::base *>,text_editor::base *,int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrserverentities\object_destroyer.h
_TEXT	ENDS
;	COMDAT ??$delete_data@$00@?$CHelper2@PAVbase@text_editor@@@CDestroyer@@SAXAAPAVbase@text_editor@@@Z
_TEXT	SEGMENT
??$delete_data@$00@?$CHelper2@PAVbase@text_editor@@@CDestroyer@@SAXAAPAVbase@text_editor@@@Z PROC ; CDestroyer::CHelper2<text_editor::base *>::delete_data<1>, COMDAT
; _data$ = esi

; 107  : 		{
; 108  : 			if (data)
; 109  : 				CDestroyer::delete_data	(*data);
; 110  : 			xr_delete					(data);

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN4@delete_dat
	push	edi
	push	eax
	call	___RTCastToVoid
	mov	ecx, DWORD PTR [esi]
	mov	edi, eax
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	add	esp, 4
	push	0
	call	edx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi], 0
	pop	edi
$LN4@delete_dat:

; 111  : 		}

	ret	0
??$delete_data@$00@?$CHelper2@PAVbase@text_editor@@@CDestroyer@@SAXAAPAVbase@text_editor@@@Z ENDP ; CDestroyer::CHelper2<text_editor::base *>::delete_data<1>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$delete_data@$0A@@?$CHelper4@PAVbase@text_editor@@@CDestroyer@@SAXAAPAVbase@text_editor@@@Z
_TEXT	SEGMENT
??$delete_data@$0A@@?$CHelper4@PAVbase@text_editor@@@CDestroyer@@SAXAAPAVbase@text_editor@@@Z PROC ; CDestroyer::CHelper4<text_editor::base *>::delete_data<0>, COMDAT
; _data$ = esi

; 130  : 		{
; 131  : 			CHelper2<T>::delete_data<object_type_traits::is_pointer<T>::value>	(data);

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN6@delete_dat@2
	push	edi
	push	eax
	call	___RTCastToVoid
	mov	ecx, DWORD PTR [esi]
	mov	edi, eax
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	add	esp, 4
	push	0
	call	edx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi], 0
	pop	edi
$LN6@delete_dat@2:

; 132  : 		}

	ret	0
??$delete_data@$0A@@?$CHelper4@PAVbase@text_editor@@@CDestroyer@@SAXAAPAVbase@text_editor@@@Z ENDP ; CDestroyer::CHelper4<text_editor::base *>::delete_data<0>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.c
_TEXT	ENDS
;	COMDAT ??$__unguarded_linear_insert@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@PAV23@U?$less@PAVbase@text_editor@@@1@@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 1
??$__unguarded_linear_insert@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@PAV23@U?$less@PAVbase@text_editor@@@1@@Z PROC ; stlp_std::priv::__unguarded_linear_insert<text_editor::base * *,text_editor::base *,stlp_std::less<text_editor::base *> >, COMDAT
; ___last$ = edx
; ___val$ = esi

; 897  :   _RandomAccessIter __next = __last;
; 898  :   --__next;
; 899  :   while (__comp(__val, *__next)) {

	mov	ecx, DWORD PTR [edx-4]
	cmp	esi, ecx
	lea	eax, DWORD PTR [edx-4]
	jae	SHORT $LN9@unguarded_@11
	npad	6
$LL2@unguarded_@11:

; 900  :     _STLP_VERBOSE_ASSERT(!__comp(*__next, __val), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 901  :     *__last = *__next;

	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax-4]

; 902  :     __last = __next;

	mov	edx, eax

; 903  :     --__next;

	sub	eax, 4
	cmp	esi, ecx
	jb	SHORT $LL2@unguarded_@11
$LN9@unguarded_@11:

; 904  :   }
; 905  :   *__last = __val;

	mov	DWORD PTR [edx], esi

; 906  : }

	ret	0
??$__unguarded_linear_insert@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@PAV23@U?$less@PAVbase@text_editor@@@1@@Z ENDP ; stlp_std::priv::__unguarded_linear_insert<text_editor::base * *,text_editor::base *,stlp_std::less<text_editor::base *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$copy_backward@PAPAVbase@text_editor@@PAPAV12@@stlp_std@@YAPAPAVbase@text_editor@@PAPAV12@00@Z
_TEXT	SEGMENT
??$copy_backward@PAPAVbase@text_editor@@PAPAV12@@stlp_std@@YAPAPAVbase@text_editor@@PAPAV12@00@Z PROC ; stlp_std::copy_backward<text_editor::base * *,text_editor::base * *>, COMDAT
; ___first$ = edx
; ___last$ = ecx
; ___result$ = eax

; 313  :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__first, __last))
; 314  :   return _STLP_PRIV __copy_backward_aux(__first, __last, __result, _BothPtrType< _InputIter, _OutputIter>::_Answer() );

	sub	ecx, edx
	test	ecx, ecx
	jle	SHORT $LN16@copy_backw@14
	push	ecx
	push	edx
	sub	eax, ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN16@copy_backw@14:

; 315  : }

	ret	0
??$copy_backward@PAPAVbase@text_editor@@PAPAV12@@stlp_std@@YAPAPAVbase@text_editor@@PAPAV12@00@Z ENDP ; stlp_std::copy_backward<text_editor::base * *,text_editor::base * *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_heap.h
_TEXT	ENDS
;	COMDAT ??$__pop_heap@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@H@stlp_std@@YAXPAPAVbase@text_editor@@00PAV12@U?$less@PAVbase@text_editor@@@0@PAH@Z
_TEXT	SEGMENT
___last$ = 8						; size = 4
___comp$ = 12						; size = 1
??$__pop_heap@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@H@stlp_std@@YAXPAPAVbase@text_editor@@00PAV12@U?$less@PAVbase@text_editor@@@0@PAH@Z PROC ; stlp_std::__pop_heap<text_editor::base * *,text_editor::base *,stlp_std::less<text_editor::base *>,int>, COMDAT
; ___first$ = ecx
; ___result$ = edx
; ___val$ = ebx

; 78   :   *__result = *__first;

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 79   :   __adjust_heap(__first, _Distance(0), _Distance(__last - __first),
; 80   :                 __val, __comp);

	mov	edx, DWORD PTR ___last$[esp-4]
	sub	edx, ecx
	sar	edx, 2
	mov	DWORD PTR ___last$[esp-4], 0
	jmp	??$__adjust_heap@PAPAVbase@text_editor@@HPAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@HHPAV12@U?$less@PAVbase@text_editor@@@0@@Z ; stlp_std::__adjust_heap<text_editor::base * *,int,text_editor::base *,stlp_std::less<text_editor::base *> >
??$__pop_heap@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@H@stlp_std@@YAXPAPAVbase@text_editor@@00PAV12@U?$less@PAVbase@text_editor@@@0@PAH@Z ENDP ; stlp_std::__pop_heap<text_editor::base * *,text_editor::base *,stlp_std::less<text_editor::base *>,int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_heap.c
_TEXT	ENDS
;	COMDAT ??$make_heap@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@0U?$less@PAVbase@text_editor@@@0@@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 1
??$make_heap@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@0U?$less@PAVbase@text_editor@@@0@@Z PROC ; stlp_std::make_heap<text_editor::base * *,stlp_std::less<text_editor::base *> >, COMDAT
; ___first$ = ecx
; ___last$ = eax

; 235  : {

	push	edi
	mov	edi, ecx

; 236  :   __make_heap(__first, __last, __comp,
; 237  :               _STLP_VALUE_TYPE(__first, _RandomAccessIterator), _STLP_DISTANCE_TYPE(__first, _RandomAccessIterator));

	mov	ecx, eax
	sub	ecx, edi
	and	ecx, -4					; fffffffcH
	cmp	ecx, 8
	jl	SHORT $LN7@make_heap@8
	lea	edx, DWORD PTR ___comp$[esp]
	push	edx
	push	eax
	call	??$__make_heap@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@PAV12@H@stlp_std@@YAXPAPAVbase@text_editor@@0U?$less@PAVbase@text_editor@@@0@0PAH@Z ; stlp_std::__make_heap<text_editor::base * *,stlp_std::less<text_editor::base *>,text_editor::base *,int>
	add	esp, 8
$LN7@make_heap@8:
	pop	edi

; 238  : }

	ret	0
??$make_heap@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@0U?$less@PAVbase@text_editor@@@0@@Z ENDP ; stlp_std::make_heap<text_editor::base * *,stlp_std::less<text_editor::base *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrserverentities\object_destroyer.h
_TEXT	ENDS
;	COMDAT ??$delete_data@PAVbase@text_editor@@@CDestroyer@@SAXAAPAVbase@text_editor@@@Z
_TEXT	SEGMENT
??$delete_data@PAVbase@text_editor@@@CDestroyer@@SAXAAPAVbase@text_editor@@@Z PROC ; CDestroyer::delete_data<text_editor::base *>, COMDAT
; _data$ = esi

; 144  : 		CHelper4<T>::delete_data<object_type_traits::is_stl_container<T>::value>(data);

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN8@delete_dat@3
	push	edi
	push	eax
	call	___RTCastToVoid
	mov	ecx, DWORD PTR [esi]
	mov	edi, eax
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	add	esp, 4
	push	0
	call	edx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi], 0
	pop	edi
$LN8@delete_dat@3:

; 145  : 	}

	ret	0
??$delete_data@PAVbase@text_editor@@@CDestroyer@@SAXAAPAVbase@text_editor@@@Z ENDP ; CDestroyer::delete_data<text_editor::base *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.c
_TEXT	ENDS
;	COMDAT ??$__unguarded_insertion_sort_aux@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@00U?$less@PAVbase@text_editor@@@1@@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 1
??$__unguarded_insertion_sort_aux@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@00U?$less@PAVbase@text_editor@@@1@@Z PROC ; stlp_std::priv::__unguarded_insertion_sort_aux<text_editor::base * *,text_editor::base *,stlp_std::less<text_editor::base *> >, COMDAT
; ___first$ = eax
; ___last$ = ebx

; 934  :                                     _Tp*, _Compare __comp) {

	push	edi
	mov	edi, eax

; 935  :   for (_RandomAccessIter __i = __first; __i != __last; ++__i)

	cmp	edi, ebx
	je	SHORT $LN1@unguarded_@12
	push	esi
$LL3@unguarded_@12:

; 936  :     __unguarded_linear_insert<_RandomAccessIter, _Tp, _Compare>(__i, *__i, __comp);

	mov	esi, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edi-4]
	cmp	esi, ecx
	lea	eax, DWORD PTR [edi-4]
	mov	edx, edi
	jae	SHORT $LN6@unguarded_@12
$LL7@unguarded_@12:
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax-4]
	mov	edx, eax
	sub	eax, 4
	cmp	esi, ecx
	jb	SHORT $LL7@unguarded_@12
$LN6@unguarded_@12:
	add	edi, 4
	cmp	edi, ebx
	mov	DWORD PTR [edx], esi
	jne	SHORT $LL3@unguarded_@12
	pop	esi
$LN1@unguarded_@12:
	pop	edi

; 937  : }

	ret	0
??$__unguarded_insertion_sort_aux@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@00U?$less@PAVbase@text_editor@@@1@@Z ENDP ; stlp_std::priv::__unguarded_insertion_sort_aux<text_editor::base * *,text_editor::base *,stlp_std::less<text_editor::base *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__linear_insert@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@0PAV23@U?$less@PAVbase@text_editor@@@1@@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 1
??$__linear_insert@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@0PAV23@U?$less@PAVbase@text_editor@@@1@@Z PROC ; stlp_std::priv::__linear_insert<text_editor::base * *,text_editor::base *,stlp_std::less<text_editor::base *> >, COMDAT
; ___first$ = edi
; ___last$ = edx
; ___val$ = esi

; 911  :   //*TY 12/26/1998 - added __val as a paramter
; 912  :   //  _Tp __val = *__last;        //*TY 12/26/1998 - __val supplied by caller
; 913  :   if (__comp(__val, *__first)) {

	cmp	esi, DWORD PTR [edi]
	jae	SHORT $LN2@linear_ins

; 914  :     _STLP_VERBOSE_ASSERT(!__comp(*__first, __val), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 915  :     copy_backward(__first, __last, __last + 1);

	mov	eax, edx
	sub	eax, edi
	test	eax, eax
	jle	SHORT $LN21@linear_ins
	push	eax
	sub	edx, eax
	add	edx, 4
	push	edi
	push	edx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN21@linear_ins:

; 916  :     *__first = __val;

	mov	DWORD PTR [edi], esi

; 920  : }

	ret	0
$LN2@linear_ins:

; 917  :   }
; 918  :   else
; 919  :     __unguarded_linear_insert(__last, __val, __comp);

	mov	ecx, DWORD PTR [edx-4]
	cmp	esi, ecx
	lea	eax, DWORD PTR [edx-4]
	jae	SHORT $LN23@linear_ins
	npad	6
$LL24@linear_ins:
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax-4]
	mov	edx, eax
	sub	eax, 4
	cmp	esi, ecx
	jb	SHORT $LL24@linear_ins
$LN23@linear_ins:
	mov	DWORD PTR [edx], esi

; 920  : }

	ret	0
??$__linear_insert@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@0PAV23@U?$less@PAVbase@text_editor@@@1@@Z ENDP ; stlp_std::priv::__linear_insert<text_editor::base * *,text_editor::base *,stlp_std::less<text_editor::base *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrserverentities\object_destroyer.h
_TEXT	ENDS
;	COMDAT ??$delete_data@V?$buffer_vector@PAVbase@text_editor@@@@@CHelper3@CDestroyer@@SAXAAV?$buffer_vector@PAVbase@text_editor@@@@@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
??$delete_data@V?$buffer_vector@PAVbase@text_editor@@@@@CHelper3@CDestroyer@@SAXAAV?$buffer_vector@PAVbase@text_editor@@@@@Z PROC ; CDestroyer::CHelper3::delete_data<buffer_vector<text_editor::base *> >, COMDAT

; 118  : 			T::iterator					I = data.begin();

	mov	ecx, DWORD PTR _data$[esp-4]
	push	ebp

; 119  : 			T::iterator					E = data.end();

	mov	ebp, DWORD PTR [ecx+4]
	push	esi
	mov	esi, DWORD PTR [ecx]

; 120  : 			for ( ; I != E; ++I)

	cmp	esi, ebp
	je	SHORT $LN26@delete_dat@4
	push	ebx
	mov	ebx, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	push	edi
$LL3@delete_dat@4:

; 121  : 				CDestroyer::delete_data	(*I);

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN2@delete_dat@4
	push	eax
	call	___RTCastToVoid
	mov	ecx, DWORD PTR [esi]
	mov	edi, eax
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	add	esp, 4
	push	0
	call	edx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	ebx
	mov	ecx, DWORD PTR _data$[esp+12]
	mov	DWORD PTR [esi], 0
$LN2@delete_dat@4:
	add	esi, 4
	cmp	esi, ebp
	jne	SHORT $LL3@delete_dat@4

; 122  : 			data.clear					();

	mov	eax, DWORD PTR [ecx]
	pop	edi
	pop	ebx
	pop	esi
	mov	DWORD PTR [ecx+4], eax
	pop	ebp

; 123  : 		}

	ret	0
$LN26@delete_dat@4:

; 122  : 			data.clear					();

	mov	edx, esi
	pop	esi
	mov	DWORD PTR [ecx+4], edx
	pop	ebp

; 123  : 		}

	ret	0
??$delete_data@V?$buffer_vector@PAVbase@text_editor@@@@@CHelper3@CDestroyer@@SAXAAV?$buffer_vector@PAVbase@text_editor@@@@@Z ENDP ; CDestroyer::CHelper3::delete_data<buffer_vector<text_editor::base *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.c
_TEXT	ENDS
;	COMDAT ??$__unguarded_insertion_sort@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@0U?$less@PAVbase@text_editor@@@1@@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 1
??$__unguarded_insertion_sort@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@0U?$less@PAVbase@text_editor@@@1@@Z PROC ; stlp_std::priv::__unguarded_insertion_sort<text_editor::base * *,stlp_std::less<text_editor::base *> >, COMDAT
; ___first$ = eax
; ___last$ = ebx

; 942  :                                        _Compare __comp) {

	push	edi
	mov	edi, eax

; 943  :   __unguarded_insertion_sort_aux(__first, __last, _STLP_VALUE_TYPE(__first, _RandomAccessIter), __comp);

	cmp	edi, ebx
	je	SHORT $LN3@unguarded_@13
	push	esi
$LL5@unguarded_@13:
	mov	esi, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edi-4]
	cmp	esi, ecx
	lea	eax, DWORD PTR [edi-4]
	mov	edx, edi
	jae	SHORT $LN8@unguarded_@13
$LL9@unguarded_@13:
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax-4]
	mov	edx, eax
	sub	eax, 4
	cmp	esi, ecx
	jb	SHORT $LL9@unguarded_@13
$LN8@unguarded_@13:
	add	edi, 4
	cmp	edi, ebx
	mov	DWORD PTR [edx], esi
	jne	SHORT $LL5@unguarded_@13
	pop	esi
$LN3@unguarded_@13:
	pop	edi

; 944  : }

	ret	0
??$__unguarded_insertion_sort@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@0U?$less@PAVbase@text_editor@@@1@@Z ENDP ; stlp_std::priv::__unguarded_insertion_sort<text_editor::base * *,stlp_std::less<text_editor::base *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__insertion_sort@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@00U?$less@PAVbase@text_editor@@@1@@Z
_TEXT	SEGMENT
___last$ = 8						; size = 4
$T235740 = 12						; size = 4
??$__insertion_sort@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@00U?$less@PAVbase@text_editor@@@1@@Z PROC ; stlp_std::priv::__insertion_sort<text_editor::base * *,text_editor::base *,stlp_std::less<text_editor::base *> >, COMDAT
; ___first$ = ebx

; 925  :                       _Tp *, _Compare __comp) {

	push	esi

; 926  :   if (__first == __last) return;
; 927  :   for (_RandomAccessIter __i = __first + 1; __i != __last; ++__i)

	lea	esi, DWORD PTR [ebx+4]
	cmp	esi, DWORD PTR ___last$[esp]
	je	SHORT $LN1@insertion_
	push	ebp
	mov	ebp, 4
	push	edi
	sub	ebp, ebx
$LL3@insertion_:

; 928  :     __linear_insert<_RandomAccessIter, _Tp, _Compare>(__first, __i, *__i, __comp);  //*TY 12/26/1998 - supply *__i as __val

	mov	edi, DWORD PTR [esi]
	cmp	edi, DWORD PTR [ebx]
	jae	SHORT $LN12@insertion_
	lea	eax, DWORD PTR [esi+ebp-4]
	test	eax, eax
	jle	SHORT $LN31@insertion_
	push	eax
	mov	ecx, esi
	sub	ecx, eax
	add	ecx, 4
	push	ebx
	push	ecx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN31@insertion_:
	mov	DWORD PTR [ebx], edi
	jmp	SHORT $LN2@insertion_
$LN12@insertion_:
	mov	ecx, DWORD PTR [esi-4]
	cmp	edi, ecx
	lea	eax, DWORD PTR [esi-4]
	mov	edx, esi
	jae	SHORT $LN33@insertion_
$LL34@insertion_:
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax-4]
	mov	edx, eax
	sub	eax, 4
	cmp	edi, ecx
	jb	SHORT $LL34@insertion_
$LN33@insertion_:
	mov	DWORD PTR [edx], edi
$LN2@insertion_:

; 926  :   if (__first == __last) return;
; 927  :   for (_RandomAccessIter __i = __first + 1; __i != __last; ++__i)

	add	esi, 4
	cmp	esi, DWORD PTR ___last$[esp+8]
	jne	SHORT $LL3@insertion_
	pop	edi
	pop	ebp
$LN1@insertion_:
	pop	esi

; 929  : }

	ret	0
??$__insertion_sort@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@00U?$less@PAVbase@text_editor@@@1@@Z ENDP ; stlp_std::priv::__insertion_sort<text_editor::base * *,text_editor::base *,stlp_std::less<text_editor::base *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrserverentities\object_destroyer.h
_TEXT	ENDS
;	COMDAT ??$delete_data@$00@?$CHelper4@V?$buffer_vector@PAVbase@text_editor@@@@@CDestroyer@@SAXAAV?$buffer_vector@PAVbase@text_editor@@@@@Z
_TEXT	SEGMENT
??$delete_data@$00@?$CHelper4@V?$buffer_vector@PAVbase@text_editor@@@@@CDestroyer@@SAXAAV?$buffer_vector@PAVbase@text_editor@@@@@Z PROC ; CDestroyer::CHelper4<buffer_vector<text_editor::base *> >::delete_data<1>, COMDAT
; _data$ = eax

; 136  : 		{
; 137  : 			CHelper3::delete_data	(data);

	push	eax
	call	??$delete_data@V?$buffer_vector@PAVbase@text_editor@@@@@CHelper3@CDestroyer@@SAXAAV?$buffer_vector@PAVbase@text_editor@@@@@Z ; CDestroyer::CHelper3::delete_data<buffer_vector<text_editor::base *> >
	pop	ecx

; 138  : 		}

	ret	0
??$delete_data@$00@?$CHelper4@V?$buffer_vector@PAVbase@text_editor@@@@@CDestroyer@@SAXAAV?$buffer_vector@PAVbase@text_editor@@@@@Z ENDP ; CDestroyer::CHelper4<buffer_vector<text_editor::base *> >::delete_data<1>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$delete_data@V?$buffer_vector@PAVbase@text_editor@@@@@CDestroyer@@SAXAAV?$buffer_vector@PAVbase@text_editor@@@@@Z
_TEXT	SEGMENT
??$delete_data@V?$buffer_vector@PAVbase@text_editor@@@@@CDestroyer@@SAXAAV?$buffer_vector@PAVbase@text_editor@@@@@Z PROC ; CDestroyer::delete_data<buffer_vector<text_editor::base *> >, COMDAT
; _data$ = eax

; 144  : 		CHelper4<T>::delete_data<object_type_traits::is_stl_container<T>::value>(data);

	push	eax
	call	??$delete_data@V?$buffer_vector@PAVbase@text_editor@@@@@CHelper3@CDestroyer@@SAXAAV?$buffer_vector@PAVbase@text_editor@@@@@Z ; CDestroyer::CHelper3::delete_data<buffer_vector<text_editor::base *> >
	pop	ecx

; 145  : 	}

	ret	0
??$delete_data@V?$buffer_vector@PAVbase@text_editor@@@@@CDestroyer@@SAXAAV?$buffer_vector@PAVbase@text_editor@@@@@Z ENDP ; CDestroyer::delete_data<buffer_vector<text_editor::base *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.c
_TEXT	ENDS
;	COMDAT ??$__final_insertion_sort@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@0U?$less@PAVbase@text_editor@@@1@@Z
_TEXT	SEGMENT
$T235963 = 8						; size = 1
___last$ = 8						; size = 4
___comp$ = 12						; size = 1
??$__final_insertion_sort@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@0U?$less@PAVbase@text_editor@@@1@@Z PROC ; stlp_std::priv::__final_insertion_sort<text_editor::base * *,stlp_std::less<text_editor::base *> >, COMDAT
; ___first$ = eax

; 948  :                             _RandomAccessIter __last, _Compare __comp) {

	push	ebx
	push	ebp
	mov	ebp, DWORD PTR ___last$[esp+4]
	mov	ebx, eax

; 949  :   if (__last - __first > __stl_threshold) {

	mov	eax, ebp
	sub	eax, ebx
	and	eax, -4					; fffffffcH
	cmp	eax, 64					; 00000040H
	jle	SHORT $LN2@final_inse
	push	edi

; 950  :     __insertion_sort(__first, __first + __stl_threshold, _STLP_VALUE_TYPE(__first,_RandomAccessIter), __comp);

	lea	edi, DWORD PTR [ebx+64]
	cmp	ebx, edi
	je	SHORT $LN9@final_inse
	lea	ecx, DWORD PTR ___comp$[esp+8]
	push	ecx
	push	edi
	call	??$__insertion_sort@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@00U?$less@PAVbase@text_editor@@@1@@Z ; stlp_std::priv::__insertion_sort<text_editor::base * *,text_editor::base *,stlp_std::less<text_editor::base *> >
	add	esp, 8
$LN9@final_inse:

; 951  :     __unguarded_insertion_sort(__first + __stl_threshold, __last, __comp);

	cmp	edi, ebp
	je	SHORT $LN42@final_inse
	push	esi
	npad	1
$LL19@final_inse:
	mov	esi, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edi-4]
	cmp	esi, ecx
	lea	eax, DWORD PTR [edi-4]
	mov	edx, edi
	jae	SHORT $LN22@final_inse
	npad	2
$LL23@final_inse:
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax-4]
	mov	edx, eax
	sub	eax, 4
	cmp	esi, ecx
	jb	SHORT $LL23@final_inse
$LN22@final_inse:
	add	edi, 4
	cmp	edi, ebp
	mov	DWORD PTR [edx], esi
	jne	SHORT $LL19@final_inse
	pop	esi
$LN42@final_inse:
	pop	edi

; 952  :   }
; 953  :   else
; 954  :     __insertion_sort(__first, __last, _STLP_VALUE_TYPE(__first,_RandomAccessIter), __comp);

$LN32@final_inse:
	pop	ebp
	pop	ebx

; 955  : }

	ret	0
$LN2@final_inse:

; 952  :   }
; 953  :   else
; 954  :     __insertion_sort(__first, __last, _STLP_VALUE_TYPE(__first,_RandomAccessIter), __comp);

	cmp	ebx, ebp
	mov	dl, BYTE PTR ___comp$[esp+4]
	mov	BYTE PTR $T235963[esp+4], dl
	je	SHORT $LN32@final_inse
	lea	eax, DWORD PTR $T235963[esp+4]
	push	eax
	push	ebp
	call	??$__insertion_sort@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@00U?$less@PAVbase@text_editor@@@1@@Z ; stlp_std::priv::__insertion_sort<text_editor::base * *,text_editor::base *,stlp_std::less<text_editor::base *> >
	add	esp, 8
	pop	ebp
	pop	ebx

; 955  : }

	ret	0
??$__final_insertion_sort@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@0U?$less@PAVbase@text_editor@@@1@@Z ENDP ; stlp_std::priv::__final_insertion_sort<text_editor::base * *,stlp_std::less<text_editor::base *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\buffer_vector_inline.h
_TEXT	ENDS
;	COMDAT ?construct@?$buffer_vector@PAVbase@text_editor@@@@CAXPAPAVbase@text_editor@@ABQAV23@@Z
_TEXT	SEGMENT
?construct@?$buffer_vector@PAVbase@text_editor@@@@CAXPAPAVbase@text_editor@@ABQAV23@@Z PROC ; buffer_vector<text_editor::base *>::construct, COMDAT
; _p$ = eax
; _value$ = ecx

; 364  : 	new(p) T		(value);

	test	eax, eax
	je	SHORT $LN3@construct
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN3@construct:

; 365  : }

	ret	0
?construct@?$buffer_vector@PAVbase@text_editor@@@@CAXPAPAVbase@text_editor@@ABQAV23@@Z ENDP ; buffer_vector<text_editor::base *>::construct
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrserverentities\object_destroyer.h
_TEXT	ENDS
;	COMDAT ??$delete_data@V?$buffer_vector@PAVbase@text_editor@@@@@@YAXABV?$buffer_vector@PAVbase@text_editor@@@@@Z
_TEXT	SEGMENT
??$delete_data@V?$buffer_vector@PAVbase@text_editor@@@@@@YAXABV?$buffer_vector@PAVbase@text_editor@@@@@Z PROC ; delete_data<buffer_vector<text_editor::base *> >, COMDAT
; _data$ = eax

; 151  : 	T	*temp = const_cast<T*>(&data);
; 152  : 	CDestroyer::delete_data(*temp);

	push	eax
	call	??$delete_data@V?$buffer_vector@PAVbase@text_editor@@@@@CHelper3@CDestroyer@@SAXAAV?$buffer_vector@PAVbase@text_editor@@@@@Z ; CDestroyer::CHelper3::delete_data<buffer_vector<text_editor::base *> >
	pop	ecx

; 153  : }

	ret	0
??$delete_data@V?$buffer_vector@PAVbase@text_editor@@@@@@YAXABV?$buffer_vector@PAVbase@text_editor@@@@@Z ENDP ; delete_data<buffer_vector<text_editor::base *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\buffer_vector_inline.h
_TEXT	ENDS
;	COMDAT ?erase@?$buffer_vector@PAVbase@text_editor@@@@QAEXABQAPAVbase@text_editor@@0@Z
_TEXT	SEGMENT
?erase@?$buffer_vector@PAVbase@text_editor@@@@QAEXABQAPAVbase@text_editor@@0@Z PROC ; buffer_vector<text_editor::base *>::erase, COMDAT
; _this$ = edx
; _begin$ = edi
; _end$ = eax

; 181  : 	VERIFY			(m_begin <= begin);
; 182  : 	VERIFY			(m_end >= begin);
; 183  : 	
; 184  : 	VERIFY			(m_begin <= end);
; 185  : 	VERIFY			(m_end >= end);
; 186  : 	
; 187  : 	VERIFY			(begin <= end);
; 188  : 	if (begin == end)

	mov	ecx, DWORD PTR [edi]
	push	esi
	mov	esi, eax
	mov	eax, DWORD PTR [esi]
	cmp	ecx, eax
	je	SHORT $LN1@erase@4

; 189  : 		return;
; 190  : 
; 191  : 	for (iterator i = begin, j = end; j != m_end; ++i, ++j) {

	cmp	eax, DWORD PTR [edx+4]
	je	SHORT $LN7@erase@4
	push	ebx
$LL9@erase@4:

; 192  : 		destroy		(i);
; 193  : 		construct	(i, *j);

	test	ecx, ecx
	je	SHORT $LN8@erase@4
	mov	ebx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], ebx
$LN8@erase@4:
	add	eax, 4
	add	ecx, 4
	cmp	eax, DWORD PTR [edx+4]
	jne	SHORT $LL9@erase@4
	pop	ebx
$LN7@erase@4:

; 194  : 	}
; 195  : 
; 196  : 	size_type		count = end - begin;

	mov	esi, DWORD PTR [esi]

; 197  : 	size_type		size = this->size();

	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	sub	esi, DWORD PTR [edi]
	sub	ecx, eax
	sar	ecx, 2
	sar	esi, 2

; 198  : 	VERIFY			(size >= count);
; 199  : 	size_type		new_size = size - count;
; 200  : 	destroy			(m_begin + new_size, m_end);
; 201  : 	m_end			= m_begin + new_size;

	sub	ecx, esi
	lea	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [edx+4], eax
$LN1@erase@4:
	pop	esi

; 202  : 	VERIFY			(m_max_end >= m_end);
; 203  : }

	ret	0
?erase@?$buffer_vector@PAVbase@text_editor@@@@QAEXABQAPAVbase@text_editor@@0@Z ENDP ; buffer_vector<text_editor::base *>::erase
_TEXT	ENDS
PUBLIC	?split_cmd@text_editor@@YAXPAD0PBD@Z		; text_editor::split_cmd
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\line_edit_control.cpp
;	COMDAT ?split_cmd@text_editor@@YAXPAD0PBD@Z
_TEXT	SEGMENT
_first$ = 8						; size = 4
_second$ = 12						; size = 4
_str$ = 16						; size = 4
?split_cmd@text_editor@@YAXPAD0PBD@Z PROC		; text_editor::split_cmd, COMDAT

; 799  : 	first[0] = 0;

	mov	edx, DWORD PTR _first$[esp-4]

; 800  : 	second[0] = 0;

	mov	eax, DWORD PTR _second$[esp-4]
	push	ebp
	mov	ebp, DWORD PTR _str$[esp]
	push	edi

; 801  : 	u32 str_size = xr_strlen( str );

	mov	edi, ebp
	mov	BYTE PTR [edx], 0
	mov	BYTE PTR [eax], 0
	lea	ecx, DWORD PTR [edi+1]
	npad	7
$LL13@split_cmd:
	mov	al, BYTE PTR [edi]
	add	edi, 1
	test	al, al
	jne	SHORT $LL13@split_cmd
	sub	edi, ecx

; 802  : 	if ( str_size < 1 )

	cmp	edi, 1
	jb	SHORT $LN1@split_cmd
	push	esi

; 803  : 	{
; 804  : 		return;
; 805  : 	}
; 806  : 
; 807  : 	// split into =>>(cmd) (params)
; 808  : 	u32 a = 0;

	xor	esi, esi

; 809  : 	while ( a < str_size && str[a] != ' ' ) { ++a; }

	test	edi, edi
	jbe	SHORT $LN4@split_cmd
$LL5@split_cmd:
	cmp	BYTE PTR [esi+ebp], 32			; 00000020H
	je	SHORT $LN4@split_cmd
	add	esi, 1
	cmp	esi, edi
	jb	SHORT $LL5@split_cmd
$LN4@split_cmd:
	push	ebx

; 810  : 	strncpy_s( first, str_size+1, str, a );

	push	esi
	push	ebp
	lea	ebx, DWORD PTR [edi+1]
	push	ebx
	push	edx
	call	DWORD PTR __imp__strncpy_s
	add	esp, 16					; 00000010H

; 811  : 	if ( a < str_size )		{ first[a] = 0; }	else	{ first[str_size] = 0; }

	cmp	esi, edi
	jae	SHORT $LN3@split_cmd
	mov	ecx, DWORD PTR _first$[esp+12]
	mov	BYTE PTR [esi+ecx], 0
	jmp	SHORT $LN2@split_cmd
$LN3@split_cmd:
	mov	edx, DWORD PTR _first$[esp+12]
	mov	BYTE PTR [edi+edx], 0
$LN2@split_cmd:

; 812  : 	++a;

	add	esi, 1

; 813  : 	if ( a < str_size )

	cmp	esi, edi
	jae	SHORT $LN15@split_cmd

; 814  : 	{
; 815  : 		strncpy_s( second, str_size+1, str + a, str_size - a );

	sub	edi, esi
	push	edi
	add	esi, ebp
	push	esi
	mov	esi, DWORD PTR _second$[esp+20]
	push	ebx
	push	esi
	call	DWORD PTR __imp__strncpy_s
	add	esp, 16					; 00000010H

; 816  : 		second[str_size - a] = 0;

	mov	BYTE PTR [edi+esi], 0
$LN15@split_cmd:
	pop	ebx
	pop	esi
$LN1@split_cmd:
	pop	edi
	pop	ebp

; 817  : 	}
; 818  : }

	ret	0
?split_cmd@text_editor@@YAXPAD0PBD@Z ENDP		; text_editor::split_cmd
_TEXT	ENDS
PUBLIC	?remove_spaces@text_editor@@YAXPAD@Z		; text_editor::remove_spaces
EXTRN	__alloca_probe_16:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?remove_spaces@text_editor@@YAXPAD@Z
_TEXT	SEGMENT
_new_str$ = -8						; size = 4
_i$ = -4						; size = 4
_str$ = 8						; size = 4
?remove_spaces@text_editor@@YAXPAD@Z PROC		; text_editor::remove_spaces, COMDAT

; 765  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx

; 766  : 	u32 str_size = xr_strlen( str );

	mov	ebx, DWORD PTR _str$[ebp]
	push	esi
	push	edi
	lea	ecx, DWORD PTR [ebx+1]
	npad	1
$LL20@remove_spa:
	mov	al, BYTE PTR [ebx]
	add	ebx, 1
	test	al, al
	jne	SHORT $LL20@remove_spa
	sub	ebx, ecx

; 767  : 	if ( str_size < 1 )

	cmp	ebx, 1
	jb	$LN1@remove_spa

; 768  : 	{
; 769  : 		return;
; 770  : 	}
; 771  : 	PSTR new_str = (PSTR)_alloca( (str_size + 1) * sizeof(char) );

	lea	eax, DWORD PTR [ebx+1]
	call	__alloca_probe_16
	mov	eax, esp

; 772  : 	new_str[0] = 0;
; 773  : 
; 774  : 	u32 a = 0, b = 0, i = 0;

	xor	ecx, ecx
	xor	esi, esi

; 775  : 	while ( b < str_size )

	test	ebx, ebx
	mov	DWORD PTR _new_str$[ebp], eax
	mov	BYTE PTR [eax], 0
	mov	DWORD PTR _i$[ebp], ecx
	jbe	SHORT $LN7@remove_spa
	npad	1
$LL8@remove_spa:

; 776  : 	{
; 777  : 		a = b;
; 778  : 		while ( a < str_size && str[a] == ' ' ) { ++a; }

	cmp	esi, ebx
	mov	edi, esi
	jae	SHORT $LN22@remove_spa
$LL6@remove_spa:
	mov	eax, DWORD PTR _str$[ebp]
	cmp	BYTE PTR [edi+eax], 32			; 00000020H
	jne	SHORT $LN5@remove_spa
	add	edi, 1
	cmp	edi, ebx
	jb	SHORT $LL6@remove_spa
	jmp	SHORT $LN5@remove_spa
$LN22@remove_spa:
	mov	eax, DWORD PTR _str$[ebp]
$LN5@remove_spa:

; 779  : 		b = a;
; 780  : 		while ( b < str_size && str[b] != ' ' ) { ++b; }

	cmp	edi, ebx
	mov	esi, edi
	jae	SHORT $LN3@remove_spa
$LL4@remove_spa:
	cmp	BYTE PTR [esi+eax], 32			; 00000020H
	je	SHORT $LN3@remove_spa
	add	esi, 1
	cmp	esi, ebx
	jb	SHORT $LL4@remove_spa
$LN3@remove_spa:

; 781  : 		strncpy_s( new_str + i, str_size+1, str + a, b - a );

	mov	edx, esi
	sub	edx, edi
	push	edx
	mov	edx, DWORD PTR _new_str$[ebp]
	add	eax, edi
	push	eax
	lea	eax, DWORD PTR [ebx+1]
	push	eax
	add	ecx, edx
	push	ecx
	call	DWORD PTR __imp__strncpy_s

; 782  : 		i += (b-a);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, esi
	sub	ecx, edi
	add	eax, ecx
	add	esp, 16					; 00000010H

; 783  : 		if ( i < str_size ) 

	cmp	eax, ebx
	jae	SHORT $LN2@remove_spa

; 784  : 		{
; 785  : 			new_str[i] = ' ';

	mov	edx, DWORD PTR _new_str$[ebp]
	mov	BYTE PTR [eax+edx], 32			; 00000020H
$LN2@remove_spa:

; 786  : 		}
; 787  : 		++b;
; 788  : 		++i;

	add	eax, 1
	add	esi, 1
	cmp	esi, ebx
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, eax
	jb	SHORT $LL8@remove_spa

; 775  : 	while ( b < str_size )

	mov	eax, DWORD PTR _new_str$[ebp]
$LN7@remove_spa:

; 789  : 	}
; 790  : 	--i;

	sub	ecx, 1

; 791  : 	if ( i < str_size )

	cmp	ecx, ebx
	jae	SHORT $LN1@remove_spa

; 792  : 	{
; 793  : 		strncpy_s( str, str_size, new_str, i );

	push	ecx
	push	eax
	mov	eax, DWORD PTR _str$[ebp]
	push	ebx
	push	eax
	call	DWORD PTR __imp__strncpy_s
	add	esp, 16					; 00000010H
$LN1@remove_spa:

; 794  : 	}
; 795  : }

	lea	esp, DWORD PTR [ebp-20]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?remove_spaces@text_editor@@YAXPAD@Z ENDP		; text_editor::remove_spaces
_TEXT	ENDS
PUBLIC	?clamp_cur_pos@line_edit_control@text_editor@@AAEXXZ ; text_editor::line_edit_control::clamp_cur_pos
; Function compile flags: /Ogtpy
;	COMDAT ?clamp_cur_pos@line_edit_control@text_editor@@AAEXXZ
_TEXT	SEGMENT
?clamp_cur_pos@line_edit_control@text_editor@@AAEXXZ PROC ; text_editor::line_edit_control::clamp_cur_pos, COMDAT
; _this$ = ecx

; 754  : 	clamp( m_cur_pos, 0, (int)xr_strlen( m_edit_str ) );

	mov	eax, DWORD PTR [ecx+1024]
	push	esi
	lea	esi, DWORD PTR [eax+1]
	npad	6
$LL10@clamp_cur_:
	mov	dl, BYTE PTR [eax]
	add	eax, 1
	test	dl, dl
	jne	SHORT $LL10@clamp_cur_
	mov	edx, DWORD PTR [ecx+1056]
	sub	eax, esi
	test	edx, edx
	pop	esi
	jge	SHORT $LN7@clamp_cur_
	mov	DWORD PTR [ecx+1056], 0

; 755  : }

	ret	0

; 754  : 	clamp( m_cur_pos, 0, (int)xr_strlen( m_edit_str ) );

$LN7@clamp_cur_:
	cmp	edx, eax
	jle	SHORT $LN5@clamp_cur_
	mov	DWORD PTR [ecx+1056], eax
$LN5@clamp_cur_:

; 755  : }

	ret	0
?clamp_cur_pos@line_edit_control@text_editor@@AAEXXZ ENDP ; text_editor::line_edit_control::clamp_cur_pos
_TEXT	ENDS
PUBLIC	?move_pos_right_word@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::move_pos_right_word
; Function compile flags: /Ogtpy
;	COMDAT ?move_pos_right_word@line_edit_control@text_editor@@AAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?move_pos_right_word@line_edit_control@text_editor@@AAGXXZ PROC ; text_editor::line_edit_control::move_pos_right_word, COMDAT

; 724  : {

	push	esi
	push	edi

; 725  : 	int edit_len = (int)xr_strlen( m_edit_str );

	mov	edi, DWORD PTR _this$[esp+4]
	mov	esi, DWORD PTR [edi+1024]
	mov	eax, esi
	lea	edx, DWORD PTR [eax+1]
$LL13@move_pos_r:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL13@move_pos_r

; 726  : 	int i = m_cur_pos + 1;

	mov	ecx, DWORD PTR [edi+1056]
	sub	eax, edx
	mov	edx, eax
	add	ecx, 1

; 727  : 	while( i < edit_len && !terminate_char( m_edit_str[i], true ) )	{ ++i; }

	cmp	ecx, edx
	jge	SHORT $LN16@move_pos_r
	npad	5
$LL4@move_pos_r:
	mov	al, BYTE PTR [esi+ecx]
	push	1
	call	?terminate_char@text_editor@@YA_ND_N@Z	; text_editor::terminate_char
	add	esp, 4
	test	al, al
	jne	SHORT $LN10@move_pos_r
	add	ecx, 1
	cmp	ecx, edx
	jl	SHORT $LL4@move_pos_r

; 730  : 	m_cur_pos = i;

	mov	DWORD PTR [edi+1056], ecx
	pop	edi
	pop	esi

; 731  : }

	ret	4
$LN10@move_pos_r:

; 728  : 	//while( i < edit_len && terminate_char( m_edit_str[i] ) )		{ ++i; }
; 729  : 	while( i < edit_len && m_edit_str[i] == ' ' )					{ ++i; }

	cmp	ecx, edx
	jge	SHORT $LN16@move_pos_r
$LL2@move_pos_r:
	cmp	BYTE PTR [esi+ecx], 32			; 00000020H
	jne	SHORT $LN16@move_pos_r
	add	ecx, 1
	cmp	ecx, edx
	jl	SHORT $LL2@move_pos_r
$LN16@move_pos_r:

; 730  : 	m_cur_pos = i;

	mov	DWORD PTR [edi+1056], ecx
	pop	edi
	pop	esi

; 731  : }

	ret	4
?move_pos_right_word@line_edit_control@text_editor@@AAGXXZ ENDP ; text_editor::line_edit_control::move_pos_right_word
_TEXT	ENDS
PUBLIC	?move_pos_left_word@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::move_pos_left_word
; Function compile flags: /Ogtpy
;	COMDAT ?move_pos_left_word@line_edit_control@text_editor@@AAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?move_pos_left_word@line_edit_control@text_editor@@AAGXXZ PROC ; text_editor::line_edit_control::move_pos_left_word, COMDAT

; 712  : {

	push	esi

; 713  : 	int i = m_cur_pos - 1;

	mov	esi, DWORD PTR _this$[esp]
	mov	ecx, DWORD PTR [esi+1056]
	sub	ecx, 1

; 714  : 	while ( i >= 0 && m_edit_str[i] == ' ' ) { --i; }

	js	SHORT $LN4@move_pos_l
	mov	eax, DWORD PTR [esi+1024]
$LL5@move_pos_l:
	cmp	BYTE PTR [eax+ecx], 32			; 00000020H
	jne	SHORT $LN4@move_pos_l
	sub	ecx, 1
	jns	SHORT $LL5@move_pos_l
$LN4@move_pos_l:

; 715  : 	if ( !terminate_char( m_edit_str[i] ) )

	mov	edx, DWORD PTR [esi+1024]
	mov	al, BYTE PTR [edx+ecx]
	push	0
	call	?terminate_char@text_editor@@YA_ND_N@Z	; text_editor::terminate_char
	add	esp, 4
	test	al, al
	jne	SHORT $LN12@move_pos_l

; 716  : 	{
; 717  : 		while ( i >= 0 && !terminate_char( m_edit_str[i], true )  ) { --i; }

	test	ecx, ecx
	jl	SHORT $LN1@move_pos_l
	npad	4
$LL2@move_pos_l:
	mov	al, BYTE PTR [edx+ecx]
	push	1
	call	?terminate_char@text_editor@@YA_ND_N@Z	; text_editor::terminate_char
	add	esp, 4
	test	al, al
	jne	SHORT $LN1@move_pos_l
	sub	ecx, 1
	jns	SHORT $LL2@move_pos_l
$LN1@move_pos_l:

; 718  : 		++i;

	add	ecx, 1
$LN12@move_pos_l:

; 719  : 	}
; 720  : 	m_cur_pos = i;

	mov	DWORD PTR [esi+1056], ecx
	pop	esi

; 721  : }

	ret	4
?move_pos_left_word@line_edit_control@text_editor@@AAGXXZ ENDP ; text_editor::line_edit_control::move_pos_left_word
_TEXT	ENDS
PUBLIC	?move_pos_end@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::move_pos_end
; Function compile flags: /Ogtpy
;	COMDAT ?move_pos_end@line_edit_control@text_editor@@AAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?move_pos_end@line_edit_control@text_editor@@AAGXXZ PROC ; text_editor::line_edit_control::move_pos_end, COMDAT

; 698  : 	m_cur_pos = (int)xr_strlen( m_edit_str );

	mov	edx, DWORD PTR _this$[esp-4]
	mov	eax, DWORD PTR [edx+1024]
	push	esi
	lea	esi, DWORD PTR [eax+1]
	npad	2
$LL5@move_pos_e:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL5@move_pos_e
	sub	eax, esi
	mov	DWORD PTR [edx+1056], eax
	pop	esi

; 699  : }

	ret	4
?move_pos_end@line_edit_control@text_editor@@AAGXXZ ENDP ; text_editor::line_edit_control::move_pos_end
_TEXT	ENDS
PUBLIC	?delete_selected@line_edit_control@text_editor@@AAEX_N@Z ; text_editor::line_edit_control::delete_selected
; Function compile flags: /Ogtpy
;	COMDAT ?delete_selected@line_edit_control@text_editor@@AAEX_N@Z
_TEXT	SEGMENT
_back$ = 8						; size = 1
?delete_selected@line_edit_control@text_editor@@AAEX_N@Z PROC ; text_editor::line_edit_control::delete_selected, COMDAT
; _this$ = ecx

; 644  : {

	push	esi
	mov	esi, ecx

; 645  : 	clamp_cur_pos();

	mov	eax, DWORD PTR [esi+1024]
	push	edi
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL30@delete_sel:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL30@delete_sel
	mov	ecx, DWORD PTR [esi+1056]
	sub	eax, edx
	test	ecx, ecx
	jge	SHORT $LN16@delete_sel
	mov	DWORD PTR [esi+1056], 0
	jmp	SHORT $LN14@delete_sel
$LN16@delete_sel:
	cmp	ecx, eax
	jle	SHORT $LN14@delete_sel
	mov	DWORD PTR [esi+1056], eax
$LN14@delete_sel:

; 646  : 	int edit_len = (int)xr_strlen( m_edit_str );

	mov	edx, DWORD PTR [esi+1024]
	mov	edi, edx
	lea	ecx, DWORD PTR [edi+1]
$LL31@delete_sel:
	mov	al, BYTE PTR [edi]
	add	edi, 1
	test	al, al
	jne	SHORT $LL31@delete_sel
	sub	edi, ecx

; 647  : 	if ( edit_len > 0 )

	test	edi, edi
	jle	$LN34@delete_sel

; 648  : 	{
; 649  : 		if ( back )

	cmp	BYTE PTR _back$[esp+4], 0

; 650  : 		{
; 651  : 			u8 dp = ( (m_p1 == m_p2) && m_p1 > 0 )? 1 : 0;

	mov	eax, DWORD PTR [esi+1064]
	mov	ecx, DWORD PTR [esi+1068]
	push	ebx
	push	ebp
	je	SHORT $LN2@delete_sel
	cmp	eax, ecx
	jne	SHORT $LN6@delete_sel
	test	eax, eax
	jle	SHORT $LN6@delete_sel
	mov	bl, 1
	jmp	SHORT $LN7@delete_sel
$LN6@delete_sel:
	xor	bl, bl
$LN7@delete_sel:

; 652  : 			strncpy_s( m_undo_buf,             m_buffer_size, m_edit_str + m_p1 - dp, m_p2 - m_p1 + dp );

	movzx	ebp, bl
	mov	ebx, ebp
	sub	ebx, eax
	add	ebx, ecx
	mov	ecx, DWORD PTR [esi+1028]
	sub	eax, ebp
	push	ebx
	mov	ebx, DWORD PTR __imp__strncpy_s
	add	eax, edx
	push	eax
	mov	eax, DWORD PTR [esi+1052]
	push	eax
	push	ecx
	call	ebx

; 653  : 			strncpy_s( m_edit_str + m_p1 - dp, m_buffer_size, m_edit_str + m_p2,      edit_len - m_p2  );

	mov	eax, DWORD PTR [esi+1068]
	mov	ecx, DWORD PTR [esi+1024]
	mov	edx, DWORD PTR [esi+1052]
	sub	edi, eax
	add	eax, ecx
	push	edi
	push	eax
	mov	eax, DWORD PTR [esi+1064]
	sub	eax, ebp
	push	edx
	add	eax, ecx
	push	eax
	call	ebx

; 654  : 			m_cur_pos = m_p1 - dp;

	mov	ecx, DWORD PTR [esi+1064]
	add	esp, 32					; 00000020H
	sub	ecx, ebp

; 655  : 		}
; 656  : 		else

	jmp	SHORT $LN35@delete_sel
$LN2@delete_sel:

; 657  : 		{
; 658  : 			u8 dn = ( (m_p1 == m_p2) && m_p2 < edit_len )? 1 : 0;

	cmp	eax, ecx
	jne	SHORT $LN8@delete_sel
	cmp	ecx, edi
	jge	SHORT $LN8@delete_sel
	mov	bl, 1
	jmp	SHORT $LN9@delete_sel
$LN8@delete_sel:
	xor	bl, bl
$LN9@delete_sel:

; 659  : 			strncpy_s( m_undo_buf,        m_buffer_size, m_edit_str + m_p1,      m_p2 - m_p1 + dn     );

	movzx	ebp, bl
	mov	ebx, ebp
	sub	ebx, eax
	add	ebx, ecx
	push	ebx
	mov	ebx, DWORD PTR __imp__strncpy_s
	add	eax, edx
	mov	edx, DWORD PTR [esi+1052]
	push	eax
	mov	eax, DWORD PTR [esi+1028]
	push	edx
	push	eax
	call	ebx

; 660  : 			strncpy_s( m_edit_str + m_p1, m_buffer_size, m_edit_str + m_p2 + dn, edit_len - m_p2 - dn );

	mov	eax, DWORD PTR [esi+1068]
	mov	ecx, DWORD PTR [esi+1024]
	mov	edx, DWORD PTR [esi+1052]
	sub	edi, ebp
	sub	edi, eax
	add	ebp, eax
	mov	eax, DWORD PTR [esi+1064]
	push	edi
	add	ebp, ecx
	push	ebp
	push	edx
	add	eax, ecx
	push	eax
	call	ebx

; 661  : 			m_cur_pos = m_p1;

	mov	ecx, DWORD PTR [esi+1064]
	add	esp, 32					; 00000020H
$LN35@delete_sel:

; 662  : 		}
; 663  : 		clamp_cur_pos();

	mov	eax, DWORD PTR [esi+1024]
	pop	ebp
	mov	DWORD PTR [esi+1056], ecx
	lea	edx, DWORD PTR [eax+1]
	pop	ebx
$LL32@delete_sel:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL32@delete_sel
	mov	ecx, DWORD PTR [esi+1056]
	sub	eax, edx
	test	ecx, ecx
	jge	SHORT $LN27@delete_sel
	mov	DWORD PTR [esi+1056], 0
$LN34@delete_sel:

; 664  : 	}
; 665  : 	m_select_start = m_cur_pos;

	mov	edx, DWORD PTR [esi+1056]
	pop	edi
	mov	DWORD PTR [esi+1060], edx
	pop	esi

; 666  : }

	ret	4

; 662  : 		}
; 663  : 		clamp_cur_pos();

$LN27@delete_sel:
	cmp	ecx, eax
	jle	SHORT $LN33@delete_sel
	mov	DWORD PTR [esi+1056], eax
	pop	edi

; 664  : 	}
; 665  : 	m_select_start = m_cur_pos;

	mov	DWORD PTR [esi+1060], eax
	pop	esi

; 666  : }

	ret	4
$LN33@delete_sel:
	pop	edi

; 664  : 	}
; 665  : 	m_select_start = m_cur_pos;

	mov	DWORD PTR [esi+1060], ecx
	pop	esi

; 666  : }

	ret	4
?delete_selected@line_edit_control@text_editor@@AAEX_N@Z ENDP ; text_editor::line_edit_control::delete_selected
_TEXT	ENDS
PUBLIC	?delete_selected_forward@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::delete_selected_forward
; Function compile flags: /Ogtpy
;	COMDAT ?delete_selected_forward@line_edit_control@text_editor@@AAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?delete_selected_forward@line_edit_control@text_editor@@AAGXXZ PROC ; text_editor::line_edit_control::delete_selected_forward, COMDAT

; 640  : 	delete_selected( false );

	mov	ecx, DWORD PTR _this$[esp-4]
	push	0
	call	?delete_selected@line_edit_control@text_editor@@AAEX_N@Z ; text_editor::line_edit_control::delete_selected

; 641  : }

	ret	4
?delete_selected_forward@line_edit_control@text_editor@@AAGXXZ ENDP ; text_editor::line_edit_control::delete_selected_forward
_TEXT	ENDS
PUBLIC	?delete_selected_back@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::delete_selected_back
; Function compile flags: /Ogtpy
;	COMDAT ?delete_selected_back@line_edit_control@text_editor@@AAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?delete_selected_back@line_edit_control@text_editor@@AAGXXZ PROC ; text_editor::line_edit_control::delete_selected_back, COMDAT

; 635  : 	delete_selected( true );

	mov	ecx, DWORD PTR _this$[esp-4]
	push	1
	call	?delete_selected@line_edit_control@text_editor@@AAEX_N@Z ; text_editor::line_edit_control::delete_selected

; 636  : }

	ret	4
?delete_selected_back@line_edit_control@text_editor@@AAGXXZ ENDP ; text_editor::line_edit_control::delete_selected_back
_TEXT	ENDS
PUBLIC	?select_all_buf@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::select_all_buf
; Function compile flags: /Ogtpy
;	COMDAT ?select_all_buf@line_edit_control@text_editor@@AAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?select_all_buf@line_edit_control@text_editor@@AAGXXZ PROC ; text_editor::line_edit_control::select_all_buf, COMDAT

; 622  : 	m_select_start = 0;

	mov	ecx, DWORD PTR _this$[esp-4]

; 623  : 	m_cur_pos = (int)xr_strlen( m_edit_str );

	mov	eax, DWORD PTR [ecx+1024]
	push	esi
	mov	DWORD PTR [ecx+1060], 0
	lea	esi, DWORD PTR [eax+1]
$LL5@select_all:
	mov	dl, BYTE PTR [eax]
	add	eax, 1
	test	dl, dl
	jne	SHORT $LL5@select_all
	sub	eax, esi
	mov	DWORD PTR [ecx+1056], eax

; 624  : 	m_mark = false;

	mov	BYTE PTR [ecx+1103], dl
	pop	esi

; 625  : }

	ret	4
?select_all_buf@line_edit_control@text_editor@@AAGXXZ ENDP ; text_editor::line_edit_control::select_all_buf
_TEXT	ENDS
PUBLIC	?undo_buf@line_edit_control@text_editor@@AAGXXZ	; text_editor::line_edit_control::undo_buf
; Function compile flags: /Ogtpy
;	COMDAT ?undo_buf@line_edit_control@text_editor@@AAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?undo_buf@line_edit_control@text_editor@@AAGXXZ PROC	; text_editor::line_edit_control::undo_buf, COMDAT

; 615  : {

	push	esi

; 616  : 	xr_strcpy( m_inserted, m_buffer_size, m_undo_buf );

	mov	esi, DWORD PTR _this$[esp]
	mov	eax, DWORD PTR [esi+1052]
	mov	ecx, DWORD PTR [esi+1028]
	mov	edx, DWORD PTR [esi+1032]
	push	eax
	push	ecx
	push	eax
	push	edx
	call	DWORD PTR __imp__strncpy_s

; 617  : 	m_undo_buf[0] = 0;

	mov	eax, DWORD PTR [esi+1028]
	add	esp, 16					; 00000010H
	mov	BYTE PTR [eax], 0
	pop	esi

; 618  : }

	ret	4
?undo_buf@line_edit_control@text_editor@@AAGXXZ ENDP	; text_editor::line_edit_control::undo_buf
_TEXT	ENDS
PUBLIC	?copy_to_clipboard@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::copy_to_clipboard
; Function compile flags: /Ogtpy
;	COMDAT ?copy_to_clipboard@line_edit_control@text_editor@@AAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?copy_to_clipboard@line_edit_control@text_editor@@AAGXXZ PROC ; text_editor::line_edit_control::copy_to_clipboard, COMDAT

; 588  : {

	push	ebp
	mov	ebp, esp

; 589  : 	if ( m_p1 >= m_p2 )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1064]
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR [eax+1068]
	cmp	ecx, edi
	jge	SHORT $LN2@copy_to_cl

; 590  : 	{
; 591  : 		return;
; 592  : 	}
; 593  : 	u32 edit_len = xr_strlen( m_edit_str );

	mov	eax, DWORD PTR [eax+1024]
	lea	edx, DWORD PTR [eax+1]
$LL6@copy_to_cl:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL6@copy_to_cl
	sub	eax, edx
	mov	ebx, eax

; 594  : 	PSTR buf = (PSTR)_alloca( (edit_len + 1) * sizeof(char) );

	lea	eax, DWORD PTR [ebx+1]
	call	__alloca_probe_16

; 595  : 	strncpy_s( buf, edit_len + 1, m_edit_str + m_p1, m_p2 - m_p1 );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+1064]
	mov	ecx, DWORD PTR [ecx+1024]
	mov	esi, esp
	sub	edi, eax
	push	edi
	add	ecx, eax
	push	ecx
	lea	eax, DWORD PTR [ebx+1]
	push	eax
	push	esi
	call	DWORD PTR __imp__strncpy_s

; 596  : 	buf[edit_len] = 0;
; 597  : 	os_clipboard::copy_to_clipboard( buf );

	push	esi
	mov	BYTE PTR [esi+ebx], 0
	call	DWORD PTR __imp_?copy_to_clipboard@os_clipboard@@YAXPBD@Z

; 598  : 	m_mark = false;

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 20					; 00000014H
	mov	BYTE PTR [eax+1103], 0
$LN2@copy_to_cl:

; 599  : }

	lea	esp, DWORD PTR [ebp-12]
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
?copy_to_clipboard@line_edit_control@text_editor@@AAGXXZ ENDP ; text_editor::line_edit_control::copy_to_clipboard
_TEXT	ENDS
PUBLIC	?add_inserted_text@line_edit_control@text_editor@@AAEXXZ ; text_editor::line_edit_control::add_inserted_text
; Function compile flags: /Ogtpy
;	COMDAT ?add_inserted_text@line_edit_control@text_editor@@AAEXXZ
_TEXT	SEGMENT
_old_edit_size$ = -8					; size = 4
_buf$ = -4						; size = 4
?add_inserted_text@line_edit_control@text_editor@@AAEXXZ PROC ; text_editor::line_edit_control::add_inserted_text, COMDAT
; _this$ = ecx

; 542  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx
	push	esi
	mov	esi, ecx

; 543  : 	if ( empty_inserted() )

	mov	eax, DWORD PTR [esi+1032]
	cmp	BYTE PTR [eax], 0
	push	edi
	je	$LN29@add_insert

; 544  : 	{
; 545  : 		return;
; 546  : 	}
; 547  : 	
; 548  : 	int old_edit_size = (int)xr_strlen( m_edit_str );

	mov	eax, DWORD PTR [esi+1024]
	lea	edx, DWORD PTR [eax+1]
$LL36@add_insert:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL36@add_insert
	sub	eax, edx

; 549  : 	for ( int i = 0; i < old_edit_size; ++i )

	xor	edx, edx
	test	eax, eax
	mov	DWORD PTR _old_edit_size$[ebp], eax
	jle	SHORT $LN5@add_insert
	npad	9
$LL7@add_insert:

; 550  : 	{
; 551  : 		if ( ( m_edit_str[i] == '\n' ) || ( m_edit_str[i] == '\t' ) )

	mov	ecx, DWORD PTR [esi+1024]
	lea	edi, DWORD PTR [ecx+edx]
	mov	cl, BYTE PTR [edi]
	cmp	cl, 10					; 0000000aH
	je	SHORT $LN3@add_insert
	cmp	cl, 9
	jne	SHORT $LN6@add_insert
$LN3@add_insert:

; 552  : 		{
; 553  : 			m_edit_str[i]=' ';

	mov	BYTE PTR [edi], 32			; 00000020H
$LN6@add_insert:

; 549  : 	for ( int i = 0; i < old_edit_size; ++i )

	add	edx, 1
	cmp	edx, eax
	jl	SHORT $LL7@add_insert
$LN5@add_insert:

; 554  : 		}
; 555  : 	}
; 556  : 
; 557  : 	PSTR buf = (PSTR)_alloca( (m_buffer_size + 1) * sizeof(char) );

	mov	edi, DWORD PTR [esi+1052]
	lea	eax, DWORD PTR [edi+1]
	call	__alloca_probe_16

; 558  : 
; 559  : 	strncpy_s( buf,        m_buffer_size, m_edit_str,        m_p1        ); // part 1

	mov	edx, DWORD PTR [esi+1064]
	mov	ecx, DWORD PTR [esi+1024]
	mov	eax, esp
	push	edx
	push	ecx
	push	edi
	mov	edi, DWORD PTR __imp__strncpy_s
	push	eax
	mov	DWORD PTR _buf$[ebp], eax
	call	edi

; 560  : 	strncpy_s( m_undo_buf, m_buffer_size, m_edit_str + m_p1, m_p2 - m_p1 );

	mov	eax, DWORD PTR [esi+1064]
	mov	edx, DWORD PTR [esi+1068]
	mov	ecx, DWORD PTR [esi+1024]
	sub	edx, eax
	push	edx
	mov	edx, DWORD PTR [esi+1052]
	add	ecx, eax
	mov	eax, DWORD PTR [esi+1028]
	push	ecx
	push	edx
	push	eax
	call	edi

; 561  : 
; 562  : 	int new_size = (int)xr_strlen( m_inserted );

	mov	edx, DWORD PTR [esi+1032]
	mov	edi, edx
	add	esp, 32					; 00000020H
	lea	ecx, DWORD PTR [edi+1]
$LL37@add_insert:
	mov	al, BYTE PTR [edi]
	add	edi, 1
	test	al, al
	jne	SHORT $LL37@add_insert

; 563  : 	if ( m_buffer_size - 1 < m_p1 + new_size )

	mov	eax, DWORD PTR [esi+1052]
	sub	edi, ecx
	mov	ecx, DWORD PTR [esi+1064]
	add	ecx, edi
	lea	ebx, DWORD PTR [eax-1]
	cmp	ebx, ecx
	jge	SHORT $LN2@add_insert

; 564  : 	{
; 565  : 		m_inserted[m_buffer_size - 1 - m_p1] = 0;

	sub	eax, DWORD PTR [esi+1064]
	mov	BYTE PTR [eax+edx-1], 0

; 566  : 		new_size = xr_strlen( m_inserted );

	mov	edx, DWORD PTR [esi+1032]
	mov	edi, edx
	lea	ecx, DWORD PTR [edi+1]
$LL38@add_insert:
	mov	al, BYTE PTR [edi]
	add	edi, 1
	test	al, al
	jne	SHORT $LL38@add_insert
	sub	edi, ecx
$LN2@add_insert:

; 567  : 	}
; 568  : 	strncpy_s( buf + m_p1, m_buffer_size, m_inserted, _min(new_size, m_buffer_size - m_p1) ); // part 2

	mov	ecx, DWORD PTR [esi+1064]
	mov	eax, DWORD PTR [esi+1052]
	sub	eax, ecx
	mov	ecx, edi
	sub	ecx, eax
	mov	ebx, ecx
	sar	ebx, 31					; 0000001fH
	and	ebx, ecx
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ebx, eax
	mov	eax, DWORD PTR [esi+1052]
	push	ebx
	push	edx
	push	eax
	mov	eax, DWORD PTR [esi+1064]
	add	eax, ecx
	push	eax
	call	DWORD PTR __imp__strncpy_s
	add	esp, 16					; 00000010H

; 569  : 
; 570  : 	u8 ds = (m_insert_mode && m_p2 < old_edit_size)? 1 : 0;

	cmp	BYTE PTR [esi+1101], 0
	je	SHORT $LN11@add_insert
	mov	edx, DWORD PTR _old_edit_size$[ebp]
	cmp	DWORD PTR [esi+1068], edx
	jge	SHORT $LN11@add_insert
	mov	bl, 1
	jmp	SHORT $LN12@add_insert
$LN11@add_insert:
	xor	bl, bl
$LN12@add_insert:

; 571  : 	strncpy_s( buf + m_p1 + new_size, m_buffer_size, m_edit_str + m_p2 + ds,
; 572  : 		_min(old_edit_size - m_p2 - ds, m_buffer_size - m_p1 - new_size) ); // part 3

	mov	eax, DWORD PTR [esi+1064]
	mov	ecx, DWORD PTR [esi+1052]
	mov	edx, DWORD PTR [esi+1068]
	sub	ecx, eax
	mov	eax, DWORD PTR _old_edit_size$[ebp]
	movzx	ebx, bl
	sub	eax, ebx
	sub	eax, edx
	sub	ecx, edi
	sub	eax, ecx
	mov	edx, eax
	sar	edx, 31					; 0000001fH
	and	edx, eax
	mov	eax, DWORD PTR [esi+1024]
	add	eax, ebx
	add	eax, DWORD PTR [esi+1068]
	add	edx, ecx
	push	edx
	push	eax
	mov	eax, DWORD PTR [esi+1052]
	push	eax
	mov	eax, DWORD PTR [esi+1064]
	add	eax, edi
	add	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	DWORD PTR __imp__strncpy_s

; 573  : 	buf[m_buffer_size] = 0;

	mov	ecx, DWORD PTR [esi+1052]
	mov	edx, DWORD PTR _buf$[ebp]
	mov	BYTE PTR [edx+ecx], 0

; 574  : 
; 575  : 	int szn = m_p1 + new_size + old_edit_size - m_p2 - ds;

	mov	eax, DWORD PTR [esi+1064]

; 576  : 	if ( szn < m_buffer_size )

	mov	ecx, DWORD PTR [esi+1052]
	sub	eax, ebx
	sub	eax, DWORD PTR [esi+1068]
	add	esp, 16					; 00000010H
	add	eax, edi
	add	eax, DWORD PTR _old_edit_size$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN1@add_insert

; 577  : 	{
; 578  : 		strncpy_s( m_edit_str, m_buffer_size, buf, szn ); // part 1+2+3

	push	eax
	push	edx
	mov	edx, DWORD PTR [esi+1024]
	push	ecx
	push	edx
	call	DWORD PTR __imp__strncpy_s

; 579  : 		m_edit_str[m_buffer_size-1] = 0;

	mov	eax, DWORD PTR [esi+1024]
	mov	ecx, DWORD PTR [esi+1052]
	mov	BYTE PTR [eax+ecx-1], 0

; 580  : 		m_cur_pos = m_p1 + new_size;

	mov	edx, DWORD PTR [esi+1064]
	add	esp, 16					; 00000010H
	add	edx, edi
	mov	DWORD PTR [esi+1056], edx
$LN1@add_insert:

; 581  : 	}
; 582  : 	clamp_cur_pos();

	mov	eax, DWORD PTR [esi+1024]
	lea	edx, DWORD PTR [eax+1]
$LL39@add_insert:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL39@add_insert
	mov	ecx, DWORD PTR [esi+1056]
	sub	eax, edx
	test	ecx, ecx
	jge	SHORT $LN31@add_insert
	mov	DWORD PTR [esi+1056], 0

; 583  : }

	lea	esp, DWORD PTR [ebp-20]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0

; 581  : 	}
; 582  : 	clamp_cur_pos();

$LN31@add_insert:
	cmp	ecx, eax
	jle	SHORT $LN29@add_insert
	mov	DWORD PTR [esi+1056], eax
$LN29@add_insert:

; 583  : }

	lea	esp, DWORD PTR [ebp-20]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?add_inserted_text@line_edit_control@text_editor@@AAEXXZ ENDP ; text_editor::line_edit_control::add_inserted_text
_TEXT	ENDS
PUBLIC	?update_bufs@line_edit_control@text_editor@@AAEXXZ ; text_editor::line_edit_control::update_bufs
; Function compile flags: /Ogtpy
;	COMDAT ?update_bufs@line_edit_control@text_editor@@AAEXXZ
_TEXT	SEGMENT
?update_bufs@line_edit_control@text_editor@@AAEXXZ PROC	; text_editor::line_edit_control::update_bufs, COMDAT
; _this$ = ecx

; 521  : {

	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx

; 522  : 	//separate_buffer
; 523  : 	m_buf0[0] = 0;

	mov	eax, DWORD PTR [esi+1036]
	mov	BYTE PTR [eax], 0

; 524  : 	m_buf1[0] = 0;

	mov	ecx, DWORD PTR [esi+1040]
	mov	BYTE PTR [ecx], 0

; 525  : 	m_buf2[0] = 0;

	mov	edx, DWORD PTR [esi+1044]
	mov	BYTE PTR [edx], 0

; 526  : 	m_buf3[0] = 0;

	mov	eax, DWORD PTR [esi+1048]
	mov	BYTE PTR [eax], 0

; 527  : 
; 528  : 	int edit_size = (int)xr_strlen( m_edit_str );

	mov	edx, DWORD PTR [esi+1024]
	mov	eax, edx
	push	edi
	lea	edi, DWORD PTR [eax+1]
$LL7@update_buf:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL7@update_buf
	sub	eax, edi

; 529  : 	int ds = (m_cursor_view && m_insert_mode && m_p2 < edit_size)? 1 : 0;

	cmp	BYTE PTR [esi+1104], cl
	mov	edi, eax
	je	SHORT $LN3@update_buf
	cmp	BYTE PTR [esi+1101], cl
	je	SHORT $LN3@update_buf
	cmp	DWORD PTR [esi+1068], edi
	jge	SHORT $LN3@update_buf
	mov	ebp, 1
	jmp	SHORT $LN4@update_buf
$LN3@update_buf:
	xor	ebp, ebp
$LN4@update_buf:

; 530  : 	strncpy_s( m_buf0, m_buffer_size, m_edit_str,             m_cur_pos             );

	mov	ecx, DWORD PTR [esi+1056]
	mov	eax, DWORD PTR [esi+1036]
	mov	ebx, DWORD PTR __imp__strncpy_s
	push	ecx
	push	edx
	mov	edx, DWORD PTR [esi+1052]
	push	edx
	push	eax
	call	ebx

; 531  : 	strncpy_s( m_buf1, m_buffer_size, m_edit_str,             m_p1                  );

	mov	ecx, DWORD PTR [esi+1064]
	mov	edx, DWORD PTR [esi+1024]
	mov	eax, DWORD PTR [esi+1052]
	push	ecx
	mov	ecx, DWORD PTR [esi+1040]
	push	edx
	push	eax
	push	ecx
	call	ebx

; 532  : 	strncpy_s( m_buf2, m_buffer_size, m_edit_str + m_p1,      m_p2 - m_p1 + ds      );

	mov	eax, DWORD PTR [esi+1064]
	mov	edx, DWORD PTR [esi+1068]
	mov	ecx, DWORD PTR [esi+1024]
	sub	edx, eax
	add	edx, ebp
	push	edx
	mov	edx, DWORD PTR [esi+1052]
	add	ecx, eax
	mov	eax, DWORD PTR [esi+1044]
	push	ecx
	push	edx
	push	eax
	call	ebx

; 533  : 	strncpy_s( m_buf3, m_buffer_size, m_edit_str + m_p2 + ds, edit_size - m_p2 - ds );

	mov	eax, DWORD PTR [esi+1068]
	mov	ecx, DWORD PTR [esi+1052]
	mov	edx, DWORD PTR [esi+1048]
	sub	edi, eax
	add	eax, ebp
	add	eax, DWORD PTR [esi+1024]
	sub	edi, ebp
	push	edi
	push	eax
	push	ecx
	push	edx
	call	ebx
	add	esp, 64					; 00000040H

; 534  : 	
; 535  : 	m_need_update = true;

	mov	BYTE PTR [esi+1105], 1

; 536  : 	m_last_changed_frame = Device.dwFrame;

	mov	eax, DWORD PTR ?Device@@3VCRenderDevice@@A+24
	pop	edi
	mov	DWORD PTR [esi+1092], eax
	pop	esi
	pop	ebp
	pop	ebx

; 537  : //	if ( m_cursor_view )	{
; 538  : //		Msg( " m_p1=%d  m_p2=%d  cur=%d  sstart=%d", m_p1, m_p2, m_cur_pos, m_select_start );	}
; 539  : }

	ret	0
?update_bufs@line_edit_control@text_editor@@AAEXXZ ENDP	; text_editor::line_edit_control::update_bufs
_TEXT	ENDS
PUBLIC	?set_edit@line_edit_control@text_editor@@QAEXPBD@Z ; text_editor::line_edit_control::set_edit
; Function compile flags: /Ogtpy
;	COMDAT ?set_edit@line_edit_control@text_editor@@QAEXPBD@Z
_TEXT	SEGMENT
_str$ = 8						; size = 4
?set_edit@line_edit_control@text_editor@@QAEXPBD@Z PROC	; text_editor::line_edit_control::set_edit, COMDAT
; _this$ = ecx

; 387  : {

	push	ebx

; 388  : 	u32 str_size = xr_strlen( str );

	mov	ebx, DWORD PTR _str$[esp]
	push	esi
	mov	eax, ebx
	push	edi
	mov	esi, ecx
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL10@set_edit:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL10@set_edit
	sub	eax, edx
	mov	edi, eax

; 389  : 	clamp( str_size, (u32)0, (u32)(m_buffer_size-1) );

	mov	eax, DWORD PTR [esi+1052]
	lea	ecx, DWORD PTR [eax-1]
	cmp	edi, ecx
	cmova	edi, ecx

; 390  : 	strncpy_s( m_edit_str, m_buffer_size, str, str_size );

	push	edi
	push	ebx
	push	eax
	mov	eax, DWORD PTR [esi+1024]
	push	eax
	call	DWORD PTR __imp__strncpy_s

; 391  : 	m_edit_str[str_size] = 0;

	mov	ecx, DWORD PTR [esi+1024]

; 392  : 
; 393  : 	m_cur_pos      = str_size;
; 394  : 	m_select_start = m_cur_pos;
; 395  : 	m_accel        = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	mov	BYTE PTR [edi+ecx], 0
	add	esp, 16					; 00000010H

; 396  : 	update_bufs();

	mov	ecx, esi
	mov	DWORD PTR [esi+1056], edi
	mov	DWORD PTR [esi+1060], edi
	movss	DWORD PTR [esi+1072], xmm0
	call	?update_bufs@line_edit_control@text_editor@@AAEXXZ ; text_editor::line_edit_control::update_bufs
	pop	edi
	pop	esi
	pop	ebx

; 397  : }

	ret	4
?set_edit@line_edit_control@text_editor@@QAEXPBD@Z ENDP	; text_editor::line_edit_control::set_edit
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_heap.c
;	COMDAT ??$__pop_heap_aux@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@00U?$less@PAVbase@text_editor@@@0@@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 1
??$__pop_heap_aux@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@00U?$less@PAVbase@text_editor@@@0@@Z PROC ; stlp_std::__pop_heap_aux<text_editor::base * *,text_editor::base *,stlp_std::less<text_editor::base *> >, COMDAT
; ___first$ = ecx
; ___last$ = edx

; 174  :   __pop_heap(__first, __last - 1, __last - 1, _Tp(*(__last - 1)), __comp,
; 175  :              _STLP_DISTANCE_TYPE(__first, _RandomAccessIterator));

	mov	eax, DWORD PTR [ecx]
	push	ebx
	mov	ebx, DWORD PTR [edx-4]
	mov	DWORD PTR [edx-4], eax
	mov	eax, DWORD PTR ___comp$[esp]
	sub	edx, ecx
	push	eax
	sub	edx, 4
	sar	edx, 2
	push	0
	call	??$__adjust_heap@PAPAVbase@text_editor@@HPAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@HHPAV12@U?$less@PAVbase@text_editor@@@0@@Z ; stlp_std::__adjust_heap<text_editor::base * *,int,text_editor::base *,stlp_std::less<text_editor::base *> >
	add	esp, 8
	pop	ebx

; 176  : }

	ret	0
??$__pop_heap_aux@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@00U?$less@PAVbase@text_editor@@@0@@Z ENDP ; stlp_std::__pop_heap_aux<text_editor::base * *,text_editor::base *,stlp_std::less<text_editor::base *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$pop_heap@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@0U?$less@PAVbase@text_editor@@@0@@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 1
??$pop_heap@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@0U?$less@PAVbase@text_editor@@@0@@Z PROC ; stlp_std::pop_heap<text_editor::base * *,stlp_std::less<text_editor::base *> >, COMDAT
; ___first$ = ecx
; ___last$ = edx

; 184  :     __pop_heap_aux(__first, __last, _STLP_VALUE_TYPE(__first, _RandomAccessIterator), __comp);

	mov	eax, DWORD PTR [ecx]
	push	ebx
	mov	ebx, DWORD PTR [edx-4]
	mov	DWORD PTR [edx-4], eax
	mov	eax, DWORD PTR ___comp$[esp]
	sub	edx, ecx
	push	eax
	sub	edx, 4
	sar	edx, 2
	push	0
	call	??$__adjust_heap@PAPAVbase@text_editor@@HPAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@HHPAV12@U?$less@PAVbase@text_editor@@@0@@Z ; stlp_std::__adjust_heap<text_editor::base * *,int,text_editor::base *,stlp_std::less<text_editor::base *> >
	add	esp, 8
	pop	ebx

; 185  : }

	ret	0
??$pop_heap@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@0U?$less@PAVbase@text_editor@@@0@@Z ENDP ; stlp_std::pop_heap<text_editor::base * *,stlp_std::less<text_editor::base *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_heap.h
_TEXT	ENDS
;	COMDAT ??$sort_heap@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@0U?$less@PAVbase@text_editor@@@0@@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 1
??$sort_heap@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@0U?$less@PAVbase@text_editor@@@0@@Z PROC ; stlp_std::sort_heap<text_editor::base * *,stlp_std::less<text_editor::base *> >, COMDAT
; ___first$ = esi
; ___last$ = eax

; 111  :   while (__last - __first > 1)

	sub	eax, esi
	mov	ecx, eax
	and	ecx, -4					; fffffffcH
	cmp	ecx, 4
	jle	SHORT $LN1@sort_heap@4
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR ___comp$[esp+4]
	push	edi
$LL2@sort_heap@4:

; 112  :     pop_heap(__first, __last--, __comp);

	mov	edx, DWORD PTR [esi]
	mov	ebx, DWORD PTR [esi+eax-4]
	mov	DWORD PTR [esi+eax-4], edx
	lea	edi, DWORD PTR [eax-4]
	push	ebp
	mov	edx, edi
	sar	edx, 2
	push	0
	mov	ecx, esi
	call	??$__adjust_heap@PAPAVbase@text_editor@@HPAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@HHPAV12@U?$less@PAVbase@text_editor@@@0@@Z ; stlp_std::__adjust_heap<text_editor::base * *,int,text_editor::base *,stlp_std::less<text_editor::base *> >
	mov	eax, edi
	mov	ecx, edi
	and	ecx, -4					; fffffffcH
	add	esp, 8
	cmp	ecx, 4
	jg	SHORT $LL2@sort_heap@4
	pop	edi
	pop	ebp
	pop	ebx
$LN1@sort_heap@4:

; 113  : }

	ret	0
??$sort_heap@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@0U?$less@PAVbase@text_editor@@@0@@Z ENDP ; stlp_std::sort_heap<text_editor::base * *,stlp_std::less<text_editor::base *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.c
_TEXT	ENDS
;	COMDAT ??$__partial_sort@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@000U?$less@PAVbase@text_editor@@@1@@Z
_TEXT	SEGMENT
$T286648 = -8						; size = 1
tv288 = -4						; size = 4
___last$ = 8						; size = 4
___comp$ = 12						; size = 1
??$__partial_sort@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@000U?$less@PAVbase@text_editor@@@1@@Z PROC ; stlp_std::priv::__partial_sort<text_editor::base * *,text_editor::base *,stlp_std::less<text_editor::base *> >, COMDAT
; ___first$ = ecx
; ___middle$ = eax

; 1209 :                     _RandomAccessIter __last, _Tp*, _Compare __comp) {

	sub	esp, 8
	push	ebx
	push	ebp
	push	esi
	mov	esi, eax

; 1210 :   make_heap(__first, __middle, __comp);

	mov	al, BYTE PTR ___comp$[esp+16]
	push	edi
	mov	edi, ecx
	mov	ebx, esi
	sub	ebx, edi
	mov	ebp, ebx
	sar	ebp, 2
	cmp	ebp, 2
	mov	BYTE PTR $T286648[esp+24], al
	mov	DWORD PTR tv288[esp+24], ebx
	jl	SHORT $LN13@partial_so@4
	lea	ecx, DWORD PTR $T286648[esp+24]
	push	ecx
	push	esi
	call	??$__make_heap@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@PAV12@H@stlp_std@@YAXPAPAVbase@text_editor@@0U?$less@PAVbase@text_editor@@@0@0PAH@Z ; stlp_std::__make_heap<text_editor::base * *,stlp_std::less<text_editor::base *>,text_editor::base *,int>
	add	esp, 8
$LN13@partial_so@4:

; 1211 :   for (_RandomAccessIter __i = __middle; __i < __last; ++__i) {

	cmp	esi, DWORD PTR ___last$[esp+20]
	jae	SHORT $LN2@partial_so@4
	npad	7
$LL4@partial_so@4:

; 1212 :     if (__comp(*__i, *__first)) {

	mov	ebx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edi]
	cmp	ebx, eax
	jae	SHORT $LN3@partial_so@4

; 1213 :       _STLP_VERBOSE_ASSERT(!__comp(*__first, *__i), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 1214 :       __pop_heap(__first, __middle, __i, _Tp(*__i), __comp,
; 1215 :                  _STLP_DISTANCE_TYPE(__first, _RandomAccessIter));

	mov	edx, DWORD PTR ___comp$[esp+20]
	push	edx
	push	0
	mov	edx, ebp
	mov	ecx, edi
	mov	DWORD PTR [esi], eax
	call	??$__adjust_heap@PAPAVbase@text_editor@@HPAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@HHPAV12@U?$less@PAVbase@text_editor@@@0@@Z ; stlp_std::__adjust_heap<text_editor::base * *,int,text_editor::base *,stlp_std::less<text_editor::base *> >
	add	esp, 8
$LN3@partial_so@4:
	add	esi, 4
	cmp	esi, DWORD PTR ___last$[esp+20]
	jb	SHORT $LL4@partial_so@4

; 1211 :   for (_RandomAccessIter __i = __middle; __i < __last; ++__i) {

	mov	ebx, DWORD PTR tv288[esp+24]
$LN2@partial_so@4:

; 1216 :     }
; 1217 :   }
; 1218 :   sort_heap(__first, __middle, __comp);

	cmp	ebp, 1
	jle	SHORT $LN23@partial_so@4
	mov	eax, ebx
$LL24@partial_so@4:
	mov	ecx, DWORD PTR [edi]
	mov	ebx, DWORD PTR [edi+eax-4]
	mov	DWORD PTR [edi+eax-4], ecx
	lea	ebp, DWORD PTR [eax-4]
	mov	ecx, ebp
	sar	ecx, 2
	mov	eax, 2
	xor	esi, esi
	cmp	eax, ecx
	jge	SHORT $LN56@partial_so@4
	npad	2
$LL36@partial_so@4:
	mov	edx, DWORD PTR [edi+eax*4]
	cmp	edx, DWORD PTR [edi+eax*4-4]
	jae	SHORT $LN34@partial_so@4
	sub	eax, 1
$LN34@partial_so@4:
	mov	edx, DWORD PTR [edi+eax*4]
	mov	DWORD PTR [edi+esi*4], edx
	mov	esi, eax
	lea	eax, DWORD PTR [eax+eax+2]
	cmp	eax, ecx
	jl	SHORT $LL36@partial_so@4
$LN56@partial_so@4:
	jne	SHORT $LN33@partial_so@4
	mov	ecx, DWORD PTR [edi+eax*4-4]
	mov	DWORD PTR [edi+esi*4], ecx
	lea	esi, DWORD PTR [eax-1]
$LN33@partial_so@4:
	lea	eax, DWORD PTR [esi-1]
	cdq
	sub	eax, edx
	sar	eax, 1
	test	esi, esi
	mov	ecx, esi
	jle	SHORT $LN41@partial_so@4
$LL42@partial_so@4:
	mov	edx, DWORD PTR [edi+eax*4]
	cmp	edx, ebx
	jae	SHORT $LN41@partial_so@4
	mov	DWORD PTR [edi+ecx*4], edx
	mov	ecx, eax
	add	eax, -1
	cdq
	sub	eax, edx
	sar	eax, 1
	test	ecx, ecx
	jg	SHORT $LL42@partial_so@4
$LN41@partial_so@4:
	mov	eax, ebp
	mov	edx, ebp
	and	edx, -4					; fffffffcH
	cmp	edx, 4
	mov	DWORD PTR [edi+ecx*4], ebx
	jg	SHORT $LL24@partial_so@4
$LN23@partial_so@4:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 1219 : }

	add	esp, 8
	ret	0
??$__partial_sort@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@000U?$less@PAVbase@text_editor@@@1@@Z ENDP ; stlp_std::priv::__partial_sort<text_editor::base * *,text_editor::base *,stlp_std::less<text_editor::base *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$partial_sort@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@00U?$less@PAVbase@text_editor@@@0@@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___middle$ = 12						; size = 4
___comp$ = 16						; size = 1
??$partial_sort@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@00U?$less@PAVbase@text_editor@@@0@@Z PROC ; stlp_std::partial_sort<text_editor::base * *,stlp_std::less<text_editor::base *> >, COMDAT
; ___last$ = ecx

; 1235 :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__first, __middle))
; 1236 :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__middle, __last))
; 1237 :   _STLP_PRIV __partial_sort(__first, __middle, __last, _STLP_VALUE_TYPE(__first, _RandomAccessIter), __comp);

	mov	eax, DWORD PTR ___comp$[esp-4]
	push	eax
	mov	eax, DWORD PTR ___middle$[esp]
	push	ecx
	mov	ecx, DWORD PTR ___first$[esp+4]
	call	??$__partial_sort@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@000U?$less@PAVbase@text_editor@@@1@@Z ; stlp_std::priv::__partial_sort<text_editor::base * *,text_editor::base *,stlp_std::less<text_editor::base *> >
	add	esp, 8

; 1238 : }

	ret	0
??$partial_sort@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@@stlp_std@@YAXPAPAVbase@text_editor@@00U?$less@PAVbase@text_editor@@@0@@Z ENDP ; stlp_std::partial_sort<text_editor::base * *,stlp_std::less<text_editor::base *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__introsort_loop@PAPAVbase@text_editor@@PAV12@HU?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@00HU?$less@PAVbase@text_editor@@@1@@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
___formal$ = 16						; size = 4
___depth_limit$ = 20					; size = 4
___comp$ = 24						; size = 1
??$__introsort_loop@PAPAVbase@text_editor@@PAV12@HU?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@00HU?$less@PAVbase@text_editor@@@1@@Z PROC ; stlp_std::priv::__introsort_loop<text_editor::base * *,text_editor::base *,int,stlp_std::less<text_editor::base *> >, COMDAT

; 960  :                       _Size __depth_limit, _Compare __comp) {

	push	ebp

; 961  :   while (__last - __first > __stl_threshold) {

	mov	ebp, DWORD PTR ___last$[esp]
	push	edi
	mov	edi, DWORD PTR ___first$[esp+4]
	mov	eax, ebp
	sub	eax, edi
	and	eax, -4					; fffffffcH
	cmp	eax, 64					; 00000040H
	jle	$LN2@introsort_@4
	push	ebx
	push	esi
	npad	4
$LL3@introsort_@4:

; 962  :     if (__depth_limit == 0) {

	cmp	DWORD PTR ___depth_limit$[esp+12], 0
	je	$LN63@introsort_@4

; 964  :       return;
; 965  :     }
; 966  :     --__depth_limit;

	sub	DWORD PTR ___depth_limit$[esp+12], 1

; 967  :     _RandomAccessIter __cut =
; 968  :       __unguarded_partition(__first, __last,
; 969  :                             _Tp(__median(*__first,
; 970  :                                          *(__first + (__last - __first)/2),
; 971  :                                          *(__last - 1), __comp)),
; 972  :        __comp);

	mov	ebx, DWORD PTR [ebp-4]
	mov	eax, ebp
	sub	eax, edi
	sar	eax, 2
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR [edi+eax*4]
	lea	edx, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ecx
	lea	esi, DWORD PTR [ebp-4]
	jae	SHORT $LN17@introsort_@4
	cmp	ecx, ebx
	jb	SHORT $LN9@introsort_@4
	cmp	eax, ebx
	jae	SHORT $LN14@introsort_@4
	mov	eax, esi
	jmp	SHORT $LN8@introsort_@4
$LN17@introsort_@4:
	cmp	eax, ebx
	jae	SHORT $LN11@introsort_@4
$LN14@introsort_@4:
	mov	eax, edi
	jmp	SHORT $LN8@introsort_@4
$LN11@introsort_@4:
	cmp	ecx, ebx
	mov	eax, esi
	jb	SHORT $LN8@introsort_@4
$LN9@introsort_@4:
	mov	eax, edx
$LN8@introsort_@4:
	mov	ecx, DWORD PTR [eax]
	mov	eax, ebp
	mov	esi, edi
$LL36@introsort_@4:
	cmp	DWORD PTR [esi], ecx
	jae	SHORT $LN33@introsort_@4
$LL34@introsort_@4:
	add	esi, 4
	cmp	DWORD PTR [esi], ecx
	jb	SHORT $LL34@introsort_@4
$LN33@introsort_@4:
	sub	eax, 4
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN31@introsort_@4
$LL32@introsort_@4:
	sub	eax, 4
	cmp	ecx, DWORD PTR [eax]
	jb	SHORT $LL32@introsort_@4
$LN31@introsort_@4:
	cmp	esi, eax
	jae	SHORT $LN62@introsort_@4
	mov	edx, DWORD PTR [esi]
	mov	ebx, DWORD PTR [eax]
	mov	DWORD PTR [esi], ebx
	mov	DWORD PTR [eax], edx
	add	esi, 4
	jmp	SHORT $LL36@introsort_@4
$LN62@introsort_@4:

; 973  :     __introsort_loop(__cut, __last, (_Tp*) 0, __depth_limit, __comp);

	mov	ecx, DWORD PTR ___comp$[esp+12]
	mov	edx, DWORD PTR ___depth_limit$[esp+12]
	push	ecx
	push	edx
	push	0
	push	ebp
	push	esi
	call	??$__introsort_loop@PAPAVbase@text_editor@@PAV12@HU?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@00HU?$less@PAVbase@text_editor@@@1@@Z ; stlp_std::priv::__introsort_loop<text_editor::base * *,text_editor::base *,int,stlp_std::less<text_editor::base *> >

; 974  :     __last = __cut;

	mov	ebp, esi
	sub	esi, edi
	and	esi, -4					; fffffffcH
	add	esp, 20					; 00000014H
	cmp	esi, 64					; 00000040H
	jg	$LL3@introsort_@4
	pop	esi
	pop	ebx
	pop	edi
	pop	ebp

; 975  :   }
; 976  : }

	ret	0
$LN63@introsort_@4:

; 963  :       partial_sort(__first, __last, __last, __comp);

	mov	eax, DWORD PTR ___comp$[esp+12]
	push	eax
	push	ebp
	mov	eax, ebp
	mov	ecx, edi
	call	??$__partial_sort@PAPAVbase@text_editor@@PAV12@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@000U?$less@PAVbase@text_editor@@@1@@Z ; stlp_std::priv::__partial_sort<text_editor::base * *,text_editor::base *,stlp_std::less<text_editor::base *> >
	add	esp, 8
	pop	esi
	pop	ebx
$LN2@introsort_@4:
	pop	edi
	pop	ebp

; 975  :   }
; 976  : }

	ret	0
??$__introsort_loop@PAPAVbase@text_editor@@PAV12@HU?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@00HU?$less@PAVbase@text_editor@@@1@@Z ENDP ; stlp_std::priv::__introsort_loop<text_editor::base * *,text_editor::base *,int,stlp_std::less<text_editor::base *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\buffer_vector_inline.h
_TEXT	ENDS
;	COMDAT ??$assign@PAPAVbase@text_editor@@@?$buffer_vector@PAVbase@text_editor@@@@QAEXPAPAVbase@text_editor@@ABQAPAV12@@Z
_TEXT	SEGMENT
??$assign@PAPAVbase@text_editor@@@?$buffer_vector@PAVbase@text_editor@@@@QAEXPAPAVbase@text_editor@@ABQAPAV12@@Z PROC ; buffer_vector<text_editor::base *>::assign<text_editor::base * *>, COMDAT
; _this$ = ecx
; _begin$ = eax
; _end$ = edx

; 66   : {

	push	esi
	push	edi

; 67   : 	destroy			(m_begin, m_end);
; 68   : 
; 69   : 	m_end			= m_begin + (end - begin);

	mov	edi, DWORD PTR [edx]
	sub	edi, eax
	mov	esi, ecx
	mov	ecx, DWORD PTR [esi]
	sar	edi, 2
	lea	edi, DWORD PTR [ecx+edi*4]
	mov	DWORD PTR [esi+4], edi

; 70   : 	VERIFY			(m_max_end >= m_end);
; 71   : 
; 72   : 	for (iterator I = m_begin; begin != end; ++begin, ++I)

	cmp	eax, DWORD PTR [edx]
	je	SHORT $LN1@assign
$LL3@assign:

; 73   : 		construct	(I, *begin);

	test	ecx, ecx
	je	SHORT $LN2@assign
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [ecx], esi
$LN2@assign:
	add	eax, 4
	add	ecx, 4
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LL3@assign
$LN1@assign:
	pop	edi
	pop	esi

; 74   : }

	ret	0
??$assign@PAPAVbase@text_editor@@@?$buffer_vector@PAVbase@text_editor@@@@QAEXPAPAVbase@text_editor@@ABQAPAV12@@Z ENDP ; buffer_vector<text_editor::base *>::assign<text_editor::base * *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrmemory_subst_msvc.h
_TEXT	ENDS
;	COMDAT ??$xr_new@Vtype_pair@text_editor@@IDD_N@@YAPAVtype_pair@text_editor@@ABIABD1AB_N@Z
_TEXT	SEGMENT
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
_p3$ = 16						; size = 4
_p4$ = 20						; size = 4
??$xr_new@Vtype_pair@text_editor@@IDD_N@@YAPAVtype_pair@text_editor@@ABIABD1AB_N@Z PROC ; xr_new<text_editor::type_pair,unsigned int,char,char,bool>, COMDAT

; 92   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	16					; 00000010H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 93   : 	return new (ptr) T(p1,p2,p3,p4);

	test	eax, eax
	je	SHORT $LN3@xr_new@8
	mov	ecx, DWORD PTR _p4$[esp-4]
	mov	cl, BYTE PTR [ecx]
	mov	edx, DWORD PTR _p3$[esp-4]
	mov	dl, BYTE PTR [edx]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _p2$[esp+4]
	mov	bl, BYTE PTR [esi]
	mov	esi, DWORD PTR _p1$[esp+4]
	mov	esi, DWORD PTR [esi]
	mov	DWORD PTR [eax+8], esi
	pop	esi
	mov	BYTE PTR [eax+13], bl
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax], OFFSET ??_7type_pair@text_editor@@6B@
	mov	BYTE PTR [eax+12], cl
	mov	BYTE PTR [eax+14], dl
	pop	ebx

; 94   : }

	ret	0
$LN3@xr_new@8:

; 93   : 	return new (ptr) T(p1,p2,p3,p4);

	xor	eax, eax

; 94   : }

	ret	0
??$xr_new@Vtype_pair@text_editor@@IDD_N@@YAPAVtype_pair@text_editor@@ABIABD1AB_N@Z ENDP ; xr_new<text_editor::type_pair,unsigned int,char,char,bool>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$xr_new@Vkey_state_base@text_editor@@W4key_state@2@PAVbase@2@@@YAPAVkey_state_base@text_editor@@ABW4key_state@1@ABQAVbase@1@@Z
_TEXT	SEGMENT
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
??$xr_new@Vkey_state_base@text_editor@@W4key_state@2@PAVbase@2@@@YAPAVkey_state_base@text_editor@@ABW4key_state@1@ABQAVbase@1@@Z PROC ; xr_new<text_editor::key_state_base,enum text_editor::key_state,text_editor::base *>, COMDAT

; 80   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	16					; 00000010H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 81   : 	return new (ptr) T(p1,p2);

	test	eax, eax
	je	SHORT $LN3@xr_new@9
	mov	ecx, DWORD PTR _p1$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR _p2$[esp-4]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax], OFFSET ??_7key_state_base@text_editor@@6B@
	mov	DWORD PTR [eax+12], ecx

; 82   : }

	ret	0
$LN3@xr_new@9:

; 81   : 	return new (ptr) T(p1,p2);

	xor	eax, eax

; 82   : }

	ret	0
??$xr_new@Vkey_state_base@text_editor@@W4key_state@2@PAVbase@2@@@YAPAVkey_state_base@text_editor@@ABW4key_state@1@ABQAVbase@1@@Z ENDP ; xr_new<text_editor::key_state_base,enum text_editor::key_state,text_editor::base *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\fastdelegate.h
_TEXT	ENDS
;	COMDAT ??$?0Vline_edit_control@text_editor@@V01@@?$FastDelegate0@X@fastdelegate@@QAE@PAVline_edit_control@text_editor@@P823@AGXXZ@Z
_TEXT	SEGMENT
??$?0Vline_edit_control@text_editor@@V01@@?$FastDelegate0@X@fastdelegate@@QAE@PAVline_edit_control@text_editor@@P823@AGXXZ@Z PROC ; fastdelegate::FastDelegate0<void>::FastDelegate0<void><text_editor::line_edit_control,text_editor::line_edit_control>, COMDAT
; _this$ = eax
; _pthis$ = edx
; _function_to_bind$ = ecx

; 892  : 			m_Closure.bindmemfunc(detail::implicit_cast<X*>(pthis), function_to_bind); }

	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax], edx
	ret	0
??$?0Vline_edit_control@text_editor@@V01@@?$FastDelegate0@X@fastdelegate@@QAE@PAVline_edit_control@text_editor@@P823@AGXXZ@Z ENDP ; fastdelegate::FastDelegate0<void>::FastDelegate0<void><text_editor::line_edit_control,text_editor::line_edit_control>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.c
_TEXT	ENDS
;	COMDAT ??$sort@PAPAVbase@text_editor@@@stlp_std@@YAXPAPAVbase@text_editor@@0@Z
_TEXT	SEGMENT
$T287081 = -4						; size = 1
$T287068 = -4						; size = 1
??$sort@PAPAVbase@text_editor@@@stlp_std@@YAXPAPAVbase@text_editor@@0@Z PROC ; stlp_std::sort<text_editor::base * *>, COMDAT
; ___first$ = edi
; ___last$ = esi

; 981  : void sort(_RandomAccessIter __first, _RandomAccessIter __last) {

	push	ecx

; 982  :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__first, __last))
; 983  :   if (__first != __last) {

	cmp	edi, esi
	je	SHORT $LN1@sort@4

; 984  :     _STLP_PRIV __introsort_loop(__first, __last,
; 985  :                                 _STLP_VALUE_TYPE(__first, _RandomAccessIter),
; 986  :                                 _STLP_PRIV __lg(__last - __first) * 2,
; 987  :                                 _STLP_PRIV __less(_STLP_VALUE_TYPE(__first, _RandomAccessIter)));

	mov	eax, esi
	sub	eax, edi
	sar	eax, 2
	xor	ecx, ecx
	cmp	eax, 1
	je	SHORT $LN6@sort@4
$LL8@sort@4:
	sar	eax, 1
	add	ecx, 1
	cmp	eax, 1
	jne	SHORT $LL8@sort@4
$LN6@sort@4:
	mov	eax, DWORD PTR $T287068[esp+4]
	push	eax
	add	ecx, ecx
	push	ecx
	push	0
	push	esi
	push	edi
	call	??$__introsort_loop@PAPAVbase@text_editor@@PAV12@HU?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@00HU?$less@PAVbase@text_editor@@@1@@Z ; stlp_std::priv::__introsort_loop<text_editor::base * *,text_editor::base *,int,stlp_std::less<text_editor::base *> >

; 988  :     _STLP_PRIV __final_insertion_sort(__first, __last,
; 989  :                                       _STLP_PRIV __less(_STLP_VALUE_TYPE(__first, _RandomAccessIter)));

	mov	edx, DWORD PTR $T287081[esp+24]
	push	edx
	push	esi
	mov	eax, edi
	call	??$__final_insertion_sort@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@0U?$less@PAVbase@text_editor@@@1@@Z ; stlp_std::priv::__final_insertion_sort<text_editor::base * *,stlp_std::less<text_editor::base *> >
	add	esp, 28					; 0000001cH
$LN1@sort@4:

; 990  :   }
; 991  : }

	pop	ecx
	ret	0
??$sort@PAPAVbase@text_editor@@@stlp_std@@YAXPAPAVbase@text_editor@@0@Z ENDP ; stlp_std::sort<text_editor::base * *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\buffer_vector_inline.h
_TEXT	ENDS
;	COMDAT ??$?0PAPAVbase@text_editor@@@?$buffer_vector@PAVbase@text_editor@@@@QAE@PAXABIABQAPAVbase@text_editor@@2@Z
_TEXT	SEGMENT
_begin$ = 8						; size = 4
??$?0PAPAVbase@text_editor@@@?$buffer_vector@PAVbase@text_editor@@@@QAE@PAXABIABQAPAVbase@text_editor@@2@Z PROC ; buffer_vector<text_editor::base *>::buffer_vector<text_editor::base *><text_editor::base * *>, COMDAT
; _this$ = eax
; _buffer$ = edx
; _max_count$ = ecx
; _end$ = esi

; 47   : {

	mov	ecx, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [eax+8], ecx

; 48   : 	assign			(begin, end);

	mov	ecx, DWORD PTR _begin$[esp-4]
	push	edi
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx]
	mov	edi, DWORD PTR [esi]
	sub	edi, ecx
	sar	edi, 2
	lea	edi, DWORD PTR [edx+edi*4]
	mov	DWORD PTR [eax+4], edi
	cmp	ecx, DWORD PTR [esi]
	je	SHORT $LN3@base@2
$LL5@base@2:
	test	edx, edx
	je	SHORT $LN4@base@2
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR [edx], edi
$LN4@base@2:
	add	ecx, 4
	add	edx, 4
	cmp	ecx, DWORD PTR [esi]
	jne	SHORT $LL5@base@2
$LN3@base@2:
	pop	edi

; 49   : }

	ret	4
??$?0PAPAVbase@text_editor@@@?$buffer_vector@PAVbase@text_editor@@@@QAE@PAXABIABQAPAVbase@text_editor@@2@Z ENDP ; buffer_vector<text_editor::base *>::buffer_vector<text_editor::base *><text_editor::base * *>
_TEXT	ENDS
PUBLIC	?delete_word_forward@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::delete_word_forward
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\line_edit_control.cpp
;	COMDAT ?delete_word_forward@line_edit_control@text_editor@@AAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?delete_word_forward@line_edit_control@text_editor@@AAGXXZ PROC ; text_editor::line_edit_control::delete_word_forward, COMDAT

; 683  : {

	push	esi

; 684  : 	set_key_state( ks_Shift, true );

	mov	esi, DWORD PTR _this$[esp]
	push	edi
	push	1
	lea	edi, DWORD PTR [esi+1096]
	push	3
	mov	ecx, edi
	call	?set@?$_flags@I@@QAEAAU1@IH@Z		; _flags<unsigned int>::set

; 685  : 	move_pos_right_word();

	push	esi
	call	?move_pos_right_word@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::move_pos_right_word

; 686  : 	compute_positions();

	cmp	BYTE PTR [esi+1106], 0
	mov	eax, DWORD PTR [esi+1056]
	mov	DWORD PTR [esi+1064], eax
	mov	DWORD PTR [esi+1068], eax
	jne	SHORT $LN9@delete_wor
	mov	ecx, DWORD PTR [esi+1060]
	cmp	eax, ecx
	jle	SHORT $LN21@delete_wor
	mov	DWORD PTR [esi+1064], ecx
	jmp	SHORT $LN9@delete_wor
$LN21@delete_wor:
	jge	SHORT $LN9@delete_wor
	mov	DWORD PTR [esi+1068], ecx
$LN9@delete_wor:

; 687  : 	delete_selected( false );

	push	0
	mov	ecx, esi
	call	?delete_selected@line_edit_control@text_editor@@AAEX_N@Z ; text_editor::line_edit_control::delete_selected

; 688  : 	set_key_state( ks_Shift, false );

	push	0
	push	3
	mov	ecx, edi
	call	?set@?$_flags@I@@QAEAAU1@IH@Z		; _flags<unsigned int>::set
	pop	edi
	pop	esi

; 689  : }

	ret	4
?delete_word_forward@line_edit_control@text_editor@@AAGXXZ ENDP ; text_editor::line_edit_control::delete_word_forward
_TEXT	ENDS
PUBLIC	?delete_word_back@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::delete_word_back
; Function compile flags: /Ogtpy
;	COMDAT ?delete_word_back@line_edit_control@text_editor@@AAGXXZ
_TEXT	SEGMENT
_right_shift$ = 8					; size = 1
_this$ = 8						; size = 4
?delete_word_back@line_edit_control@text_editor@@AAGXXZ PROC ; text_editor::line_edit_control::delete_word_back, COMDAT

; 669  : {

	push	ebx
	push	esi

; 670  : 	bool const left_shift	= get_key_state(ks_LShift);

	mov	esi, DWORD PTR _this$[esp+4]
	push	edi
	lea	edi, DWORD PTR [esi+1096]
	push	1
	mov	ecx, edi
	call	?test@?$_flags@I@@QBEHI@Z		; _flags<unsigned int>::test
	test	eax, eax

; 671  : 	bool const right_shift	= get_key_state(ks_RShift);

	push	2
	mov	ecx, edi
	setne	bl
	call	?test@?$_flags@I@@QBEHI@Z		; _flags<unsigned int>::test

; 672  : 	set_key_state			( ks_Shift, true );

	push	1
	test	eax, eax
	push	3
	mov	ecx, edi
	setne	BYTE PTR _right_shift$[esp+16]
	call	?set@?$_flags@I@@QAEAAU1@IH@Z		; _flags<unsigned int>::set

; 673  : 
; 674  : 	move_pos_left_word		( );

	push	esi
	call	?move_pos_left_word@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::move_pos_left_word

; 675  : 	compute_positions		( );

	cmp	BYTE PTR [esi+1106], 0
	mov	eax, DWORD PTR [esi+1056]
	mov	DWORD PTR [esi+1064], eax
	mov	DWORD PTR [esi+1068], eax
	jne	SHORT $LN21@delete_wor@2
	mov	ecx, DWORD PTR [esi+1060]
	cmp	eax, ecx
	jle	SHORT $LN39@delete_wor@2
	mov	DWORD PTR [esi+1064], ecx
	jmp	SHORT $LN21@delete_wor@2
$LN39@delete_wor@2:
	jge	SHORT $LN21@delete_wor@2
	mov	DWORD PTR [esi+1068], ecx
$LN21@delete_wor@2:

; 676  : 	delete_selected			( true );

	push	1
	mov	ecx, esi
	call	?delete_selected@line_edit_control@text_editor@@AAEX_N@Z ; text_editor::line_edit_control::delete_selected

; 677  : 
; 678  : 	set_key_state			( ks_LShift, left_shift );

	movzx	eax, bl
	push	eax
	push	1
	mov	ecx, edi
	call	?set@?$_flags@I@@QAEAAU1@IH@Z		; _flags<unsigned int>::set

; 679  : 	set_key_state			( ks_RShift, right_shift );

	movzx	ecx, BYTE PTR _right_shift$[esp+8]
	push	ecx
	push	2
	mov	ecx, edi
	call	?set@?$_flags@I@@QAEAAU1@IH@Z		; _flags<unsigned int>::set
	pop	edi
	pop	esi
	pop	ebx

; 680  : }

	ret	4
?delete_word_back@line_edit_control@text_editor@@AAGXXZ ENDP ; text_editor::line_edit_control::delete_word_back
_TEXT	ENDS
PUBLIC	?cut_to_clipboard@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::cut_to_clipboard
; Function compile flags: /Ogtpy
;	COMDAT ?cut_to_clipboard@line_edit_control@text_editor@@AAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?cut_to_clipboard@line_edit_control@text_editor@@AAGXXZ PROC ; text_editor::line_edit_control::cut_to_clipboard, COMDAT

; 607  : {

	push	esi

; 608  : 	copy_to_clipboard();

	mov	esi, DWORD PTR _this$[esp]
	push	esi
	call	?copy_to_clipboard@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::copy_to_clipboard

; 609  : 	delete_selected_forward();

	push	0
	mov	ecx, esi
	call	?delete_selected@line_edit_control@text_editor@@AAEX_N@Z ; text_editor::line_edit_control::delete_selected
	pop	esi

; 610  : }

	ret	4
?cut_to_clipboard@line_edit_control@text_editor@@AAGXXZ ENDP ; text_editor::line_edit_control::cut_to_clipboard
_TEXT	ENDS
PUBLIC	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair
; Function compile flags: /Ogtpy
;	COMDAT ?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z
_TEXT	SEGMENT
_dik$ = 8						; size = 4
_c$ = 12						; size = 1
_c_shift$ = 16						; size = 1
_translate$ = 20					; size = 1
?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z PROC ; text_editor::line_edit_control::create_char_pair, COMDAT
; _this$ = ecx

; 354  : {

	push	esi

; 355  : 	if ( m_actions[dik] )

	mov	esi, DWORD PTR _dik$[esp]
	push	edi
	mov	edi, ecx
	cmp	DWORD PTR [edi+esi*4], 0
	je	SHORT $LN4@create_cha

; 356  : 	{
; 357  : 		xr_delete( m_actions[dik] );

	mov	eax, DWORD PTR [edi+esi*4]
	test	eax, eax
	je	SHORT $LN4@create_cha
	push	ebx
	push	eax
	call	___RTCastToVoid
	mov	ecx, DWORD PTR [edi+esi*4]
	mov	ebx, eax
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	add	esp, 4
	push	0
	call	edx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	ebx
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [edi+esi*4], 0
	pop	ebx
$LN4@create_cha:

; 358  : 	}
; 359  : 
; 360  : 	m_actions[dik] = xr_new<text_editor::type_pair>( dik, c, c_shift, translate );

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	16					; 00000010H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	test	eax, eax
	je	SHORT $LN11@create_cha
	mov	cl, BYTE PTR _translate$[esp+4]
	mov	dl, BYTE PTR _c$[esp+4]
	mov	BYTE PTR [eax+12], cl
	mov	cl, BYTE PTR _c_shift$[esp+4]
	mov	DWORD PTR [eax+8], esi
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax], OFFSET ??_7type_pair@text_editor@@6B@
	mov	BYTE PTR [eax+13], dl
	mov	BYTE PTR [eax+14], cl
	mov	DWORD PTR [edi+esi*4], eax
	pop	edi
	pop	esi

; 361  : }

	ret	16					; 00000010H

; 358  : 	}
; 359  : 
; 360  : 	m_actions[dik] = xr_new<text_editor::type_pair>( dik, c, c_shift, translate );

$LN11@create_cha:
	xor	eax, eax
	mov	DWORD PTR [edi+esi*4], eax
	pop	edi
	pop	esi

; 361  : }

	ret	16					; 00000010H
?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ENDP ; text_editor::line_edit_control::create_char_pair
_TEXT	ENDS
PUBLIC	?create_key_state@line_edit_control@text_editor@@AAEXIW4key_state@2@@Z ; text_editor::line_edit_control::create_key_state
; Function compile flags: /Ogtpy
;	COMDAT ?create_key_state@line_edit_control@text_editor@@AAEXIW4key_state@2@@Z
_TEXT	SEGMENT
_dik$ = 8						; size = 4
_state$ = 12						; size = 4
?create_key_state@line_edit_control@text_editor@@AAEXIW4key_state@2@@Z PROC ; text_editor::line_edit_control::create_key_state, COMDAT
; _this$ = ecx

; 344  : {

	push	ebx
	push	esi
	push	edi

; 345  : 	Base* prev = m_actions[dik];

	mov	edi, DWORD PTR _dik$[esp+8]
	mov	esi, ecx

; 346  : 	//if ( m_actions[dik] )
; 347  : 	//{
; 348  : 	//	xr_delete( m_actions[dik] );
; 349  : 	//}
; 350  : 	m_actions[dik] = xr_new<text_editor::key_state_base>( state, prev );

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	mov	ebx, DWORD PTR [esi+edi*4]
	push	16					; 00000010H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	test	eax, eax
	je	SHORT $LN5@create_key
	mov	ecx, DWORD PTR _state$[esp+8]
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax], OFFSET ??_7key_state_base@text_editor@@6B@
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [esi+edi*4], eax
	pop	edi
	pop	esi
	pop	ebx

; 351  : }

	ret	8

; 346  : 	//if ( m_actions[dik] )
; 347  : 	//{
; 348  : 	//	xr_delete( m_actions[dik] );
; 349  : 	//}
; 350  : 	m_actions[dik] = xr_new<text_editor::key_state_base>( state, prev );

$LN5@create_key:
	xor	eax, eax
	mov	DWORD PTR [esi+edi*4], eax
	pop	edi
	pop	esi
	pop	ebx

; 351  : }

	ret	8
?create_key_state@line_edit_control@text_editor@@AAEXIW4key_state@2@@Z ENDP ; text_editor::line_edit_control::create_key_state
_TEXT	ENDS
PUBLIC	?assign_char_pairs@line_edit_control@text_editor@@AAEXW4init_mode@2@@Z ; text_editor::line_edit_control::assign_char_pairs
; Function compile flags: /Ogtpy
;	COMDAT ?assign_char_pairs@line_edit_control@text_editor@@AAEXW4init_mode@2@@Z
_TEXT	SEGMENT
_mode$ = 8						; size = 4
?assign_char_pairs@line_edit_control@text_editor@@AAEXW4init_mode@2@@Z PROC ; text_editor::line_edit_control::assign_char_pairs, COMDAT
; _this$ = ecx

; 236  : {

	push	esi

; 237  : 	create_char_pair( DIK_NUMPAD0, '0', '0' );

	push	0
	push	48					; 00000030H
	push	48					; 00000030H
	push	82					; 00000052H
	mov	esi, ecx
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 238  : 	create_char_pair( DIK_NUMPAD1, '1', '1' );

	push	0
	push	49					; 00000031H
	push	49					; 00000031H
	push	79					; 0000004fH
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 239  : 	create_char_pair( DIK_NUMPAD2, '2', '2' );

	push	0
	push	50					; 00000032H
	push	50					; 00000032H
	push	80					; 00000050H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 240  : 	create_char_pair( DIK_NUMPAD3, '3', '3' );

	push	0
	push	51					; 00000033H
	push	51					; 00000033H
	push	81					; 00000051H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 241  : 	create_char_pair( DIK_NUMPAD4, '4', '4' );

	push	0
	push	52					; 00000034H
	push	52					; 00000034H
	push	75					; 0000004bH
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 242  : 	create_char_pair( DIK_NUMPAD5, '5', '5' );

	push	0
	push	53					; 00000035H
	push	53					; 00000035H
	push	76					; 0000004cH
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 243  : 	create_char_pair( DIK_NUMPAD6, '6', '6' );

	push	0
	push	54					; 00000036H
	push	54					; 00000036H
	push	77					; 0000004dH
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 244  : 	create_char_pair( DIK_NUMPAD7, '7', '7' );

	push	0
	push	55					; 00000037H
	push	55					; 00000037H
	push	71					; 00000047H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 245  : 	create_char_pair( DIK_NUMPAD8, '8', '8' );

	push	0
	push	56					; 00000038H
	push	56					; 00000038H
	push	72					; 00000048H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 246  : 	create_char_pair( DIK_NUMPAD9, '9', '9' );

	push	0
	push	57					; 00000039H
	push	57					; 00000039H
	push	73					; 00000049H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 247  : 
; 248  : 	if ( mode == im_number_only )

	mov	eax, DWORD PTR _mode$[esp]
	cmp	eax, 1

; 249  : 	{
; 250  : 		create_char_pair( DIK_0, '0', '0' );

	mov	ecx, esi
	jne	$LN3@assign_cha
	push	0
	push	48					; 00000030H
	push	48					; 00000030H
	push	11					; 0000000bH
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 251  : 		create_char_pair( DIK_1, '1', '1' );

	push	0
	push	49					; 00000031H
	push	49					; 00000031H
	push	2
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 252  : 		create_char_pair( DIK_2, '2', '2' );

	push	0
	push	50					; 00000032H
	push	50					; 00000032H
	push	3
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 253  : 		create_char_pair( DIK_3, '3', '3' );

	push	0
	push	51					; 00000033H
	push	51					; 00000033H
	push	4
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 254  : 		create_char_pair( DIK_4, '4', '4' );

	push	0
	push	52					; 00000034H
	push	52					; 00000034H
	push	5
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 255  : 		create_char_pair( DIK_5, '5', '5' );

	push	0
	push	53					; 00000035H
	push	53					; 00000035H
	push	6
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 256  : 		create_char_pair( DIK_6, '6', '6' );

	push	0
	push	54					; 00000036H
	push	54					; 00000036H
	push	7
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 257  : 		create_char_pair( DIK_7, '7', '7' );

	push	0
	push	55					; 00000037H
	push	55					; 00000037H
	push	8
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 258  : 		create_char_pair( DIK_8, '8', '8' );

	push	0
	push	56					; 00000038H
	push	56					; 00000038H
	push	9
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 259  : 		create_char_pair( DIK_9, '9', '9' );

	push	0
	push	57					; 00000039H
	push	57					; 00000039H
	push	10					; 0000000aH
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 260  : 		create_char_pair( DIK_NUMPADMINUS , '-', '-' );

	push	0
	push	45					; 0000002dH
	push	45					; 0000002dH
	push	74					; 0000004aH
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 261  : 		create_char_pair( DIK_MINUS       , '-', '-' );

	push	0
	push	45					; 0000002dH
	push	45					; 0000002dH
	push	12					; 0000000cH
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 262  : 		create_char_pair( DIK_NUMPADPLUS  , '+', '+' );

	push	0
	push	43					; 0000002bH
	push	43					; 0000002bH
	push	78					; 0000004eH
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 263  : 		create_char_pair( DIK_EQUALS	  , '+', '+' );

	push	0
	push	43					; 0000002bH
	push	43					; 0000002bH
	push	13					; 0000000dH

; 340  : 	create_char_pair( DIK_Z, 'z', 'Z', true );

	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair
	pop	esi

; 341  : }

	ret	4
$LN3@assign_cha:

; 264  : 		return;
; 265  : 	}
; 266  : 
; 267  : 	if ( mode != im_file_name_mode )

	cmp	eax, 3
	je	$LN2@assign_cha

; 268  : 	{
; 269  : 		create_char_pair( DIK_0, '0', ')', true );

	push	1
	push	41					; 00000029H
	push	48					; 00000030H
	push	11					; 0000000bH
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 270  : 		create_char_pair( DIK_1, '1', '!', true );

	push	1
	push	33					; 00000021H
	push	49					; 00000031H
	push	2
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 271  : 		create_char_pair( DIK_2, '2', '@', true );

	push	1
	push	64					; 00000040H
	push	50					; 00000032H
	push	3
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 272  : 		create_char_pair( DIK_3, '3', '#', true );

	push	1
	push	35					; 00000023H
	push	51					; 00000033H
	push	4
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 273  : 		create_char_pair( DIK_4, '4', '$', true );

	push	1
	push	36					; 00000024H
	push	52					; 00000034H
	push	5
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 274  : 		create_char_pair( DIK_5, '5', '%', true );

	push	1
	push	37					; 00000025H
	push	53					; 00000035H
	push	6
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 275  : 		create_char_pair( DIK_6, '6', '^', true );

	push	1
	push	94					; 0000005eH
	push	54					; 00000036H
	push	7
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 276  : 		create_char_pair( DIK_7, '7', '&', true );

	push	1
	push	38					; 00000026H
	push	55					; 00000037H
	push	8
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 277  : 		create_char_pair( DIK_8, '8', '*', true );

	push	1
	push	42					; 0000002aH
	push	56					; 00000038H
	push	9
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 278  : 		create_char_pair( DIK_9, '9', '(', true );

	push	1
	push	40					; 00000028H
	push	57					; 00000039H
	push	10					; 0000000aH
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 279  : 
; 280  : 		create_char_pair( DIK_BACKSLASH , '\\', '|', true );

	push	1
	push	124					; 0000007cH
	push	92					; 0000005cH
	push	43					; 0000002bH
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 281  : 		create_char_pair( DIK_LBRACKET  , '[' , '{', true );

	push	1
	push	123					; 0000007bH
	push	91					; 0000005bH
	push	26					; 0000001aH
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 282  : 		create_char_pair( DIK_RBRACKET  , ']' , '}', true );

	push	1
	push	125					; 0000007dH
	push	93					; 0000005dH
	push	27					; 0000001bH
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 283  : 		create_char_pair( DIK_APOSTROPHE, '\'', '\"',true );

	push	1
	push	34					; 00000022H
	push	39					; 00000027H
	push	40					; 00000028H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 284  : 		create_char_pair( DIK_COMMA     , ',' , '<', true );

	push	1
	push	60					; 0000003cH
	push	44					; 0000002cH
	push	51					; 00000033H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 285  : 		create_char_pair( DIK_PERIOD    , '.' , '>', true );

	push	1
	push	62					; 0000003eH
	push	46					; 0000002eH
	push	52					; 00000034H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 286  : 		create_char_pair( DIK_EQUALS    , '=' , '+', true );

	push	1
	push	43					; 0000002bH
	push	61					; 0000003dH
	push	13					; 0000000dH
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 287  : 		create_char_pair( DIK_SEMICOLON , ';' , ':', true );

	push	1
	push	58					; 0000003aH
	push	59					; 0000003bH
	push	39					; 00000027H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 288  : 		create_char_pair( DIK_SLASH     , '/' , '?', true );

	push	1
	push	63					; 0000003fH
	push	47					; 0000002fH
	push	53					; 00000035H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 289  : 
; 290  : 		create_char_pair( DIK_NUMPADSTAR , '*', '*' );

	push	0
	push	42					; 0000002aH
	push	42					; 0000002aH
	push	55					; 00000037H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 291  : 		create_char_pair( DIK_NUMPADSLASH, '/', '/' );

	push	0
	push	47					; 0000002fH
	push	47					; 0000002fH
	push	181					; 000000b5H

; 292  : 	}
; 293  : 	else

	jmp	$LN7@assign_cha
$LN2@assign_cha:

; 294  : 	{
; 295  : 		create_char_pair( DIK_0, '0', '0' );

	push	0
	push	48					; 00000030H
	push	48					; 00000030H
	push	11					; 0000000bH
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 296  : 		create_char_pair( DIK_1, '1', '1' );

	push	0
	push	49					; 00000031H
	push	49					; 00000031H
	push	2
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 297  : 		create_char_pair( DIK_2, '2', '2' );

	push	0
	push	50					; 00000032H
	push	50					; 00000032H
	push	3
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 298  : 		create_char_pair( DIK_3, '3', '3' );

	push	0
	push	51					; 00000033H
	push	51					; 00000033H
	push	4
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 299  : 		create_char_pair( DIK_4, '4', '4' );

	push	0
	push	52					; 00000034H
	push	52					; 00000034H
	push	5
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 300  : 		create_char_pair( DIK_5, '5', '5' );

	push	0
	push	53					; 00000035H
	push	53					; 00000035H
	push	6
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 301  : 		create_char_pair( DIK_6, '6', '6' );

	push	0
	push	54					; 00000036H
	push	54					; 00000036H
	push	7
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 302  : 		create_char_pair( DIK_7, '7', '7' );

	push	0
	push	55					; 00000037H
	push	55					; 00000037H
	push	8
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 303  : 		create_char_pair( DIK_8, '8', '8' );

	push	0
	push	56					; 00000038H
	push	56					; 00000038H
	push	9
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 304  : 		create_char_pair( DIK_9, '9', '9' );

	push	0
	push	57					; 00000039H
	push	57					; 00000039H
	push	10					; 0000000aH
$LN7@assign_cha:
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 305  : 	}
; 306  : 
; 307  : 	create_char_pair( DIK_NUMPADMINUS , '-', '-' );

	push	0
	push	45					; 0000002dH
	push	45					; 0000002dH
	push	74					; 0000004aH
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 308  : 	create_char_pair( DIK_NUMPADPLUS  , '+', '+' );

	push	0
	push	43					; 0000002bH
	push	43					; 0000002bH
	push	78					; 0000004eH
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 309  : 	create_char_pair( DIK_NUMPADPERIOD, '.', '.' );

	push	0
	push	46					; 0000002eH
	push	46					; 0000002eH
	push	83					; 00000053H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 310  : 
; 311  : 	create_char_pair( DIK_MINUS       , '-', '_', true );

	push	1
	push	95					; 0000005fH
	push	45					; 0000002dH
	push	12					; 0000000cH
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 312  : 	create_char_pair( DIK_SPACE       , ' ', ' ' );

	push	0
	push	32					; 00000020H
	push	32					; 00000020H
	push	57					; 00000039H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 313  : 	create_char_pair( DIK_GRAVE       , '`', '~', true );

	push	1
	push	126					; 0000007eH
	push	96					; 00000060H
	push	41					; 00000029H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 314  : 
; 315  : 	create_char_pair( DIK_A, 'a', 'A', true );

	push	1
	push	65					; 00000041H
	push	97					; 00000061H
	push	30					; 0000001eH
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 316  : 	create_char_pair( DIK_B, 'b', 'B', true );

	push	1
	push	66					; 00000042H
	push	98					; 00000062H
	push	48					; 00000030H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 317  : 	create_char_pair( DIK_C, 'c', 'C', true );

	push	1
	push	67					; 00000043H
	push	99					; 00000063H
	push	46					; 0000002eH
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 318  : 	create_char_pair( DIK_D, 'd', 'D', true );

	push	1
	push	68					; 00000044H
	push	100					; 00000064H
	push	32					; 00000020H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 319  : 	create_char_pair( DIK_E, 'e', 'E', true );

	push	1
	push	69					; 00000045H
	push	101					; 00000065H
	push	18					; 00000012H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 320  : 	create_char_pair( DIK_F, 'f', 'F', true );

	push	1
	push	70					; 00000046H
	push	102					; 00000066H
	push	33					; 00000021H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 321  : 	create_char_pair( DIK_G, 'g', 'G', true );

	push	1
	push	71					; 00000047H
	push	103					; 00000067H
	push	34					; 00000022H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 322  : 	create_char_pair( DIK_H, 'h', 'H', true );

	push	1
	push	72					; 00000048H
	push	104					; 00000068H
	push	35					; 00000023H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 323  : 	create_char_pair( DIK_I, 'i', 'I', true );

	push	1
	push	73					; 00000049H
	push	105					; 00000069H
	push	23					; 00000017H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 324  : 	create_char_pair( DIK_J, 'j', 'J', true );

	push	1
	push	74					; 0000004aH
	push	106					; 0000006aH
	push	36					; 00000024H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 325  : 	create_char_pair( DIK_K, 'k', 'K', true );

	push	1
	push	75					; 0000004bH
	push	107					; 0000006bH
	push	37					; 00000025H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 326  : 	create_char_pair( DIK_L, 'l', 'L', true );

	push	1
	push	76					; 0000004cH
	push	108					; 0000006cH
	push	38					; 00000026H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 327  : 	create_char_pair( DIK_M, 'm', 'M', true );

	push	1
	push	77					; 0000004dH
	push	109					; 0000006dH
	push	50					; 00000032H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 328  : 	create_char_pair( DIK_N, 'n', 'N', true );

	push	1
	push	78					; 0000004eH
	push	110					; 0000006eH
	push	49					; 00000031H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 329  : 	create_char_pair( DIK_O, 'o', 'O', true );

	push	1
	push	79					; 0000004fH
	push	111					; 0000006fH
	push	24					; 00000018H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 330  : 	create_char_pair( DIK_P, 'p', 'P', true );

	push	1
	push	80					; 00000050H
	push	112					; 00000070H
	push	25					; 00000019H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 331  : 	create_char_pair( DIK_Q, 'q', 'Q', true );

	push	1
	push	81					; 00000051H
	push	113					; 00000071H
	push	16					; 00000010H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 332  : 	create_char_pair( DIK_R, 'r', 'R', true );

	push	1
	push	82					; 00000052H
	push	114					; 00000072H
	push	19					; 00000013H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 333  : 	create_char_pair( DIK_S, 's', 'S', true );

	push	1
	push	83					; 00000053H
	push	115					; 00000073H
	push	31					; 0000001fH
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 334  : 	create_char_pair( DIK_T, 't', 'T', true );

	push	1
	push	84					; 00000054H
	push	116					; 00000074H
	push	20					; 00000014H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 335  : 	create_char_pair( DIK_U, 'u', 'U', true );

	push	1
	push	85					; 00000055H
	push	117					; 00000075H
	push	22					; 00000016H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 336  : 	create_char_pair( DIK_V, 'v', 'V', true );

	push	1
	push	86					; 00000056H
	push	118					; 00000076H
	push	47					; 0000002fH
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 337  : 	create_char_pair( DIK_W, 'w', 'W', true );

	push	1
	push	87					; 00000057H
	push	119					; 00000077H
	push	17					; 00000011H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 338  : 	create_char_pair( DIK_X, 'x', 'X', true );

	push	1
	push	88					; 00000058H
	push	120					; 00000078H
	push	45					; 0000002dH
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 339  : 	create_char_pair( DIK_Y, 'y', 'Y', true );

	push	1
	push	89					; 00000059H
	push	121					; 00000079H
	push	21					; 00000015H
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair

; 340  : 	create_char_pair( DIK_Z, 'z', 'Z', true );

	push	1
	push	90					; 0000005aH
	push	122					; 0000007aH
	push	44					; 0000002cH
	mov	ecx, esi
	call	?create_char_pair@line_edit_control@text_editor@@AAEXIDD_N@Z ; text_editor::line_edit_control::create_char_pair
	pop	esi

; 341  : }

	ret	4
?assign_char_pairs@line_edit_control@text_editor@@AAEXW4init_mode@2@@Z ENDP ; text_editor::line_edit_control::assign_char_pairs
_TEXT	ENDS
PUBLIC	?update_key_states@line_edit_control@text_editor@@AAEXXZ ; text_editor::line_edit_control::update_key_states
; Function compile flags: /Ogtpy
;	COMDAT ?update_key_states@line_edit_control@text_editor@@AAEXXZ
_TEXT	SEGMENT
?update_key_states@line_edit_control@text_editor@@AAEXXZ PROC ; text_editor::line_edit_control::update_key_states, COMDAT
; _this$ = ecx

; 113  : {

	push	esi

; 114  : 	m_key_state.zero( );

	lea	esi, DWORD PTR [ecx+1096]
	mov	DWORD PTR [esi], 0

; 115  : 
; 116  : 	set_key_state	( ks_LShift,	!!pInput->iGetAsyncKeyState(DIK_LSHIFT)		);

	mov	ecx, DWORD PTR ?pInput@@3PAVCInput@@A	; pInput
	xor	eax, eax
	cmp	DWORD PTR [ecx+240], eax
	mov	ecx, esi
	setne	al
	push	eax
	push	1
	call	?set@?$_flags@I@@QAEAAU1@IH@Z		; _flags<unsigned int>::set

; 117  : 	set_key_state	( ks_RShift,	!!pInput->iGetAsyncKeyState(DIK_RSHIFT)		);

	mov	eax, DWORD PTR ?pInput@@3PAVCInput@@A	; pInput
	xor	edx, edx
	cmp	DWORD PTR [eax+288], edx
	mov	ecx, esi
	setne	dl
	push	edx
	push	2
	call	?set@?$_flags@I@@QAEAAU1@IH@Z		; _flags<unsigned int>::set

; 118  : 	set_key_state	( ks_LCtrl,		!!pInput->iGetAsyncKeyState(DIK_LCONTROL)	);

	mov	edx, DWORD PTR ?pInput@@3PAVCInput@@A	; pInput
	xor	ecx, ecx
	cmp	DWORD PTR [edx+188], ecx
	setne	cl
	push	ecx
	push	4
	mov	ecx, esi
	call	?set@?$_flags@I@@QAEAAU1@IH@Z		; _flags<unsigned int>::set

; 119  : 	set_key_state	( ks_RCtrl,		!!pInput->iGetAsyncKeyState(DIK_RCONTROL)	);

	mov	ecx, DWORD PTR ?pInput@@3PAVCInput@@A	; pInput
	xor	eax, eax
	cmp	DWORD PTR [ecx+700], eax
	mov	ecx, esi
	setne	al
	push	eax
	push	8
	call	?set@?$_flags@I@@QAEAAU1@IH@Z		; _flags<unsigned int>::set

; 120  : 	set_key_state	( ks_LAlt,		!!pInput->iGetAsyncKeyState(DIK_LALT)		);

	mov	eax, DWORD PTR ?pInput@@3PAVCInput@@A	; pInput
	xor	edx, edx
	cmp	DWORD PTR [eax+296], edx
	mov	ecx, esi
	setne	dl
	push	edx
	push	16					; 00000010H
	call	?set@?$_flags@I@@QAEAAU1@IH@Z		; _flags<unsigned int>::set

; 121  : 	set_key_state	( ks_RAlt,		!!pInput->iGetAsyncKeyState(DIK_RALT)		);

	mov	edx, DWORD PTR ?pInput@@3PAVCInput@@A	; pInput
	xor	ecx, ecx
	cmp	DWORD PTR [edx+808], ecx
	setne	cl
	push	ecx
	push	32					; 00000020H
	mov	ecx, esi
	call	?set@?$_flags@I@@QAEAAU1@IH@Z		; _flags<unsigned int>::set

; 122  : 	set_key_state	( ks_CapsLock,	text_editor::get_caps_lock_state()			);

	push	0
	push	64					; 00000040H
	mov	ecx, esi
	call	?set@?$_flags@I@@QAEAAU1@IH@Z		; _flags<unsigned int>::set
	pop	esi

; 123  : }

	ret	0
?update_key_states@line_edit_control@text_editor@@AAEXXZ ENDP ; text_editor::line_edit_control::update_key_states
_TEXT	ENDS
PUBLIC	??1line_edit_control@text_editor@@QAE@XZ	; text_editor::line_edit_control::~line_edit_control
; Function compile flags: /Ogtpy
;	COMDAT ??1line_edit_control@text_editor@@QAE@XZ
_TEXT	SEGMENT
$T287480 = -16						; size = 1
$T287471 = -16						; size = 1
_actions$ = -12						; size = 12
??1line_edit_control@text_editor@@QAE@XZ PROC		; text_editor::line_edit_control::~line_edit_control, COMDAT
; _this$ = ecx

; 68   : {

	sub	esp, 16					; 00000010H
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx

; 69   : 	xr_free( m_edit_str );

	mov	eax, DWORD PTR [esi+1024]
	lea	ebx, DWORD PTR [esi+1024]
	xor	ebp, ebp
	cmp	eax, ebp
	push	edi
	mov	edi, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	je	SHORT $LN3@line_edit_
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
	mov	DWORD PTR [ebx], ebp
$LN3@line_edit_:

; 70   : 	xr_free( m_inserted );

	mov	eax, DWORD PTR [esi+1032]
	cmp	eax, ebp
	je	SHORT $LN6@line_edit_
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
	mov	DWORD PTR [esi+1032], ebp
$LN6@line_edit_:

; 71   : 	xr_free( m_undo_buf );

	mov	eax, DWORD PTR [esi+1028]
	cmp	eax, ebp
	je	SHORT $LN9@line_edit_
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
	mov	DWORD PTR [esi+1028], ebp
$LN9@line_edit_:

; 72   : 	xr_free( m_buf0 );

	mov	eax, DWORD PTR [esi+1036]
	cmp	eax, ebp
	je	SHORT $LN12@line_edit_
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
	mov	DWORD PTR [esi+1036], ebp
$LN12@line_edit_:

; 73   : 	xr_free( m_buf1 );

	mov	eax, DWORD PTR [esi+1040]
	cmp	eax, ebp
	je	SHORT $LN15@line_edit_
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
	mov	DWORD PTR [esi+1040], ebp
$LN15@line_edit_:

; 74   : 	xr_free( m_buf2 );

	mov	eax, DWORD PTR [esi+1044]
	cmp	eax, ebp
	je	SHORT $LN18@line_edit_
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
	mov	DWORD PTR [esi+1044], ebp
$LN18@line_edit_:

; 75   : 	xr_free( m_buf3 );

	mov	eax, DWORD PTR [esi+1048]
	cmp	eax, ebp
	je	SHORT $LN21@line_edit_
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
	mov	DWORD PTR [esi+1048], ebp
$LN21@line_edit_:

; 76   : 
; 77   : 	size_t const array_size	= sizeof(m_actions)/sizeof(m_actions[0]);
; 78   : 	buffer_vector<Base*>	actions(m_actions, array_size, &m_actions[0], &m_actions[0] + array_size);

	mov	ecx, ebx
	sub	ecx, esi
	sar	ecx, 2
	cmp	esi, ebx
	lea	edi, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR _actions$[esp+32], esi
	mov	DWORD PTR _actions$[esp+40], ebx
	mov	eax, esi
	mov	DWORD PTR _actions$[esp+36], edi
	je	SHORT $LN26@line_edit_
	npad	2
$LL28@line_edit_:
	cmp	eax, ebp
	je	SHORT $LN27@line_edit_
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [eax], edx
$LN27@line_edit_:
	add	eax, 4
	cmp	eax, ebx
	jne	SHORT $LL28@line_edit_
$LN26@line_edit_:

; 79   : 	std::sort				(actions.begin(), actions.end());

	cmp	esi, edi
	je	SHORT $LN44@line_edit_
	mov	eax, edi
	sub	eax, esi
	sar	eax, 2
	xor	ecx, ecx
	cmp	eax, 1
	je	SHORT $LN49@line_edit_
$LL51@line_edit_:
	sar	eax, 1
	add	ecx, 1
	cmp	eax, 1
	jne	SHORT $LL51@line_edit_
$LN49@line_edit_:
	mov	eax, DWORD PTR $T287471[esp+32]
	push	eax
	add	ecx, ecx
	push	ecx
	push	ebp
	push	edi
	push	esi
	call	??$__introsort_loop@PAPAVbase@text_editor@@PAV12@HU?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@00HU?$less@PAVbase@text_editor@@@1@@Z ; stlp_std::priv::__introsort_loop<text_editor::base * *,text_editor::base *,int,stlp_std::less<text_editor::base *> >
	mov	edx, DWORD PTR $T287480[esp+52]
	push	edx
	push	edi
	mov	eax, esi
	call	??$__final_insertion_sort@PAPAVbase@text_editor@@U?$less@PAVbase@text_editor@@@stlp_std@@@priv@stlp_std@@YAXPAPAVbase@text_editor@@0U?$less@PAVbase@text_editor@@@1@@Z ; stlp_std::priv::__final_insertion_sort<text_editor::base * *,stlp_std::less<text_editor::base *> >
	add	esp, 28					; 0000001cH
$LN44@line_edit_:

; 80   : 	actions.erase			(
; 81   : 		std::unique(
; 82   : 			actions.begin(),
; 83   : 			actions.end()
; 84   : 		),
; 85   : 		actions.end()
; 86   : 	);

	mov	edx, edi
	mov	ecx, esi
	call	??$unique@PAPAVbase@text_editor@@@stlp_std@@YAPAPAVbase@text_editor@@PAPAV12@0@Z ; stlp_std::unique<text_editor::base * *>
	cmp	eax, edi
	je	SHORT $LN62@line_edit_
	mov	ecx, edi
	sub	ecx, eax
	sub	edi, esi
	sar	ecx, 2
	sar	edi, 2
	sub	edi, ecx
	lea	edx, DWORD PTR [esi+edi*4]
	mov	DWORD PTR _actions$[esp+36], edx
$LN62@line_edit_:

; 87   : 	delete_data				( actions );

	lea	eax, DWORD PTR _actions$[esp+32]
	push	eax
	call	??$delete_data@V?$buffer_vector@PAVbase@text_editor@@@@@CHelper3@CDestroyer@@SAXAAV?$buffer_vector@PAVbase@text_editor@@@@@Z ; CDestroyer::CHelper3::delete_data<buffer_vector<text_editor::base *> >
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 88   : }

	add	esp, 16					; 00000010H
	ret	0
??1line_edit_control@text_editor@@QAE@XZ ENDP		; text_editor::line_edit_control::~line_edit_control
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrmemory_subst_msvc.h
;	COMDAT ??$xr_new@Vcallback_base@text_editor@@V?$FastDelegate0@X@fastdelegate@@W4key_state@2@@@YAPAVcallback_base@text_editor@@ABV?$FastDelegate0@X@fastdelegate@@ABW4key_state@1@@Z
_TEXT	SEGMENT
_p2$ = 8						; size = 4
??$xr_new@Vcallback_base@text_editor@@V?$FastDelegate0@X@fastdelegate@@W4key_state@2@@@YAPAVcallback_base@text_editor@@ABV?$FastDelegate0@X@fastdelegate@@ABW4key_state@1@@Z PROC ; xr_new<text_editor::callback_base,fastdelegate::FastDelegate0<void>,enum text_editor::key_state>, COMDAT
; _p1$ = esi

; 80   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 81   : 	return new (ptr) T(p1,p2);

	xor	edx, edx
	cmp	eax, edx
	je	SHORT $LN3@xr_new@15
	mov	ecx, DWORD PTR _p2$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+12], edx
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax+12], edx
	mov	DWORD PTR [eax+8], ecx

; 82   : }

	ret	0
$LN3@xr_new@15:

; 81   : 	return new (ptr) T(p1,p2);

	xor	eax, eax

; 82   : }

	ret	0
??$xr_new@Vcallback_base@text_editor@@V?$FastDelegate0@X@fastdelegate@@W4key_state@2@@@YAPAVcallback_base@text_editor@@ABV?$FastDelegate0@X@fastdelegate@@ABW4key_state@1@@Z ENDP ; xr_new<text_editor::callback_base,fastdelegate::FastDelegate0<void>,enum text_editor::key_state>
_TEXT	ENDS
PUBLIC	__real@3ecccccd
PUBLIC	__real@3d88850a
PUBLIC	?on_frame@line_edit_control@text_editor@@QAEXXZ	; text_editor::line_edit_control::on_frame
;	COMDAT __real@3ecccccd
; File d:\clearsky\sources\engine\xrengine\line_edit_control.cpp
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3d88850a
CONST	SEGMENT
__real@3d88850a DD 03d88850ar			; 0.06666
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?on_frame@line_edit_control@text_editor@@QAEXXZ
_TEXT	SEGMENT
tv227 = -4						; size = 4
_dt$ = -4						; size = 4
?on_frame@line_edit_control@text_editor@@QAEXXZ PROC	; text_editor::line_edit_control::on_frame, COMDAT
; _this$ = ecx

; 484  : {

	push	ecx
	push	esi
	mov	esi, ecx

; 485  : 	update_key_states	( );

	call	?update_key_states@line_edit_control@text_editor@@AAEXXZ ; text_editor::line_edit_control::update_key_states

; 486  : 
; 487  : 	u32   fr_time = Device.dwTimeContinual;

	mov	ecx, DWORD PTR ?Device@@3VCRenderDevice@@A+44

; 488  : 	float dt      = (fr_time - m_last_frame_time) * 0.001f;

	mov	eax, ecx
	sub	eax, DWORD PTR [esi+1088]
	test	eax, eax
	mov	DWORD PTR tv227[esp+8], eax
	fild	DWORD PTR tv227[esp+8]
	jge	SHORT $LN9@on_frame
	fadd	DWORD PTR __real@4f800000
$LN9@on_frame:
	fmul	DWORD PTR _EPS_L
	fst	DWORD PTR _dt$[esp+8]

; 489  : 	if ( dt > 0.06666f )

	fld	DWORD PTR __real@3d88850a
	fxch	ST(1)
	fcomip	ST(1)
	fstp	ST(0)
	jbe	SHORT $LN8@on_frame

; 490  : 	{
; 491  : 		dt = 0.06666f;

	movss	xmm2, DWORD PTR __real@3d88850a
	jmp	SHORT $LN5@on_frame
$LN8@on_frame:
	movss	xmm2, DWORD PTR _dt$[esp+8]
$LN5@on_frame:

; 492  : 	}
; 493  : 	m_last_frame_time = fr_time;
; 494  : 	m_cur_time += dt;

	movss	xmm0, DWORD PTR [esi+1076]
	mov	DWORD PTR [esi+1088], ecx
	addss	xmm0, xmm2

; 495  : 
; 496  : 	m_cursor_view = true;

	mov	eax, 1

; 497  : 	if ( m_cur_time > 0.3f ) { m_cursor_view = false; }

	xor	cl, cl
	comiss	xmm0, DWORD PTR _particles_time
	movss	DWORD PTR [esi+1076], xmm0
	mov	BYTE PTR [esi+1104], al
	jbe	SHORT $LN4@on_frame
	mov	BYTE PTR [esi+1104], cl
$LN4@on_frame:

; 498  : 	if ( m_cur_time > 0.4f ) { m_cur_time = 0.0f; }

	comiss	xmm0, DWORD PTR __real@3ecccccd
	xorps	xmm3, xmm3
	jbe	SHORT $LN3@on_frame
	movss	DWORD PTR [esi+1076], xmm3
$LN3@on_frame:

; 499  : 
; 500  : 	m_rep_time += dt * m_accel;

	movss	xmm1, DWORD PTR [esi+1072]
	movaps	xmm0, xmm1
	mulss	xmm0, xmm2
	addss	xmm0, DWORD PTR [esi+1080]
	movss	DWORD PTR [esi+1080], xmm0

; 501  : 	if ( m_rep_time > g_console_sensitive )//0.2

	comiss	xmm0, DWORD PTR ?g_console_sensitive@@3MA
	jbe	SHORT $LN2@on_frame

; 502  : 	{
; 503  : 		m_rep_time    = 0.0f;
; 504  : 		m_repeat_mode = true;
; 505  : 		m_accel       += 0.2f;

	addss	xmm1, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [esi+1080], xmm3
	mov	BYTE PTR [esi+1102], al
	movss	DWORD PTR [esi+1072], xmm1
$LN2@on_frame:

; 506  : 	}
; 507  : 	m_last_key_time += dt;

	movss	xmm0, DWORD PTR [esi+1084]

; 508  : 
; 509  : 	if ( m_last_changed_frame + 1 < Device.dwFrame )

	mov	edx, DWORD PTR [esi+1092]
	addss	xmm0, xmm2
	add	edx, eax
	movss	DWORD PTR [esi+1084], xmm0
	cmp	edx, DWORD PTR ?Device@@3VCRenderDevice@@A+24
	jae	SHORT $LN1@on_frame

; 510  : 	{
; 511  : 		m_need_update = false;

	mov	BYTE PTR [esi+1105], cl
$LN1@on_frame:
	pop	esi

; 512  : 	}
; 513  : 	
; 514  : 	/*if ( Device.dwFrame % 100 == 0 )
; 515  : 	{
; 516  : 	Msg( " cur_time=%.2f  re=%d  acc=%.2f   rep_time=%.2f", cur_time, bRepeat, fAccel, rep_time );
; 517  : 	}*/
; 518  : }

	pop	ecx
	ret	0
?on_frame@line_edit_control@text_editor@@QAEXXZ ENDP	; text_editor::line_edit_control::on_frame
_TEXT	ENDS
PUBLIC	?on_key_release@line_edit_control@text_editor@@QAEXH@Z ; text_editor::line_edit_control::on_key_release
; Function compile flags: /Ogtpy
;	COMDAT ?on_key_release@line_edit_control@text_editor@@QAEXH@Z
_TEXT	SEGMENT
_dik$ = 8						; size = 4
?on_key_release@line_edit_control@text_editor@@QAEXH@Z PROC ; text_editor::line_edit_control::on_key_release, COMDAT
; _this$ = ecx

; 475  : 	m_accel         = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	push	esi
	mov	esi, ecx
	movss	DWORD PTR [esi+1072], xmm0

; 476  : 	m_rep_time      = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR [esi+1080], xmm0

; 477  : 	m_last_key_time = 0.0f;

	movss	DWORD PTR [esi+1084], xmm0

; 478  : 
; 479  : 	update_key_states( );

	call	?update_key_states@line_edit_control@text_editor@@AAEXXZ ; text_editor::line_edit_control::update_key_states

; 480  : 	update_bufs		( );

	mov	ecx, esi
	call	?update_bufs@line_edit_control@text_editor@@AAEXXZ ; text_editor::line_edit_control::update_bufs
	pop	esi

; 481  : }

	ret	4
?on_key_release@line_edit_control@text_editor@@QAEXH@Z ENDP ; text_editor::line_edit_control::on_key_release
_TEXT	ENDS
PUBLIC	?on_key_press@line_edit_control@text_editor@@QAEXH@Z ; text_editor::line_edit_control::on_key_press
; Function compile flags: /Ogtpy
;	COMDAT ?on_key_press@line_edit_control@text_editor@@QAEXH@Z
_TEXT	SEGMENT
_dik$ = 8						; size = 4
?on_key_press@line_edit_control@text_editor@@QAEXH@Z PROC ; text_editor::line_edit_control::on_key_press, COMDAT
; _this$ = ecx

; 402  : {

	push	esi
	push	edi

; 403  : 	if ( DIK_COUNT <= dik )

	mov	edi, DWORD PTR _dik$[esp+4]
	cmp	edi, 256				; 00000100H
	mov	esi, ecx
	jge	$LN8@on_key_pre@5
	push	ebx

; 404  : 	{
; 405  : 		return;
; 406  : 	}
; 407  : 	if ( !m_hold_mode )

	xor	ebx, ebx
	cmp	BYTE PTR [esi+1100], bl
	jne	SHORT $LN6@on_key_pre@5

; 408  : 	{
; 409  : 		m_last_key_time = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR [esi+1084], xmm0

; 410  : 		m_accel = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esi+1072], xmm0
$LN6@on_key_pre@5:

; 411  : 	}
; 412  : 	m_mark = true;
; 413  : 
; 414  : 	clamp_cur_pos();

	mov	eax, DWORD PTR [esi+1024]
	mov	BYTE PTR [esi+1103], 1
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL50@on_key_pre@5:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	cmp	cl, bl
	jne	SHORT $LL50@on_key_pre@5
	mov	ecx, DWORD PTR [esi+1056]
	sub	eax, edx
	cmp	ecx, ebx
	jge	SHORT $LN16@on_key_pre@5
	mov	DWORD PTR [esi+1056], ebx
	jmp	SHORT $LN14@on_key_pre@5
$LN16@on_key_pre@5:
	cmp	ecx, eax
	jle	SHORT $LN14@on_key_pre@5
	mov	DWORD PTR [esi+1056], eax
$LN14@on_key_pre@5:

; 415  : 	clear_inserted();

	mov	eax, DWORD PTR [esi+1032]
	mov	BYTE PTR [eax+1], bl
	mov	ecx, DWORD PTR [esi+1032]
	mov	BYTE PTR [ecx], bl

; 416  : 	compute_positions();

	cmp	BYTE PTR [esi+1106], bl
	mov	eax, DWORD PTR [esi+1056]
	mov	DWORD PTR [esi+1064], eax
	mov	DWORD PTR [esi+1068], eax
	jne	SHORT $LN21@on_key_pre@5
	mov	ecx, DWORD PTR [esi+1060]
	cmp	eax, ecx
	jle	SHORT $LN52@on_key_pre@5
	mov	DWORD PTR [esi+1064], ecx
	jmp	SHORT $LN21@on_key_pre@5
$LN52@on_key_pre@5:
	jge	SHORT $LN21@on_key_pre@5
	mov	DWORD PTR [esi+1068], ecx
$LN21@on_key_pre@5:

; 417  : 
; 418  : 	if ( m_actions[dik] )

	cmp	DWORD PTR [esi+edi*4], ebx
	je	SHORT $LN5@on_key_pre@5

; 419  : 	{
; 420  : 		m_actions[dik]->on_key_press( this );

	mov	ecx, DWORD PTR [esi+edi*4]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	push	esi
	call	eax
$LN5@on_key_pre@5:

; 421  : 	}
; 422  : 	// ===========
; 423  : 	if ( dik == DIK_LCONTROL || dik == DIK_RCONTROL )

	cmp	edi, 29					; 0000001dH
	je	SHORT $LN3@on_key_pre@5
	cmp	edi, 157				; 0000009dH
	jne	SHORT $LN4@on_key_pre@5
$LN3@on_key_pre@5:

; 424  : 	{
; 425  : 		m_mark = false;	

	mov	BYTE PTR [esi+1103], bl
$LN4@on_key_pre@5:

; 426  : 	}
; 427  : 	
; 428  : 	m_edit_str[m_buffer_size-1] = 0;

	mov	edx, DWORD PTR [esi+1024]
	mov	ecx, DWORD PTR [esi+1052]
	mov	BYTE PTR [ecx+edx-1], bl

; 429  : 	clamp_cur_pos();

	mov	eax, DWORD PTR [esi+1024]
	lea	edx, DWORD PTR [eax+1]
$LL51@on_key_pre@5:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	cmp	cl, bl
	jne	SHORT $LL51@on_key_pre@5
	mov	ecx, DWORD PTR [esi+1056]
	sub	eax, edx
	cmp	ecx, ebx
	jge	SHORT $LN33@on_key_pre@5
	mov	DWORD PTR [esi+1056], ebx
	jmp	SHORT $LN31@on_key_pre@5
$LN33@on_key_pre@5:
	cmp	ecx, eax
	jle	SHORT $LN31@on_key_pre@5
	mov	DWORD PTR [esi+1056], eax
$LN31@on_key_pre@5:

; 430  : 
; 431  : 	add_inserted_text();

	mov	ecx, esi
	call	?add_inserted_text@line_edit_control@text_editor@@AAEXXZ ; text_editor::line_edit_control::add_inserted_text

; 432  : 	if ( m_mark && (!get_key_state( ks_Shift ) || !empty_inserted() ) )

	cmp	BYTE PTR [esi+1103], bl
	je	SHORT $LN2@on_key_pre@5
	push	3
	lea	ecx, DWORD PTR [esi+1096]
	call	?test@?$_flags@I@@QBEHI@Z		; _flags<unsigned int>::test
	test	eax, eax
	je	SHORT $LN1@on_key_pre@5
	mov	eax, DWORD PTR [esi+1032]
	cmp	BYTE PTR [eax], bl
	je	SHORT $LN2@on_key_pre@5
$LN1@on_key_pre@5:

; 433  : 	{
; 434  : 		m_select_start = m_cur_pos;

	mov	ecx, DWORD PTR [esi+1056]
	mov	DWORD PTR [esi+1060], ecx
$LN2@on_key_pre@5:

; 435  : 	}
; 436  : 	compute_positions();

	cmp	BYTE PTR [esi+1106], bl
	mov	eax, DWORD PTR [esi+1056]
	mov	DWORD PTR [esi+1064], eax
	mov	DWORD PTR [esi+1068], eax
	jne	SHORT $LN44@on_key_pre@5
	mov	ecx, DWORD PTR [esi+1060]
	cmp	eax, ecx
	jle	SHORT $LN53@on_key_pre@5
	mov	DWORD PTR [esi+1064], ecx
	jmp	SHORT $LN44@on_key_pre@5
$LN53@on_key_pre@5:
	jge	SHORT $LN44@on_key_pre@5
	mov	DWORD PTR [esi+1068], ecx
$LN44@on_key_pre@5:

; 437  : 
; 438  : 	m_repeat_mode = false;
; 439  : 	m_rep_time    = 0.0f;

	xorps	xmm0, xmm0

; 440  : 	
; 441  : 	update_key_states( );

	mov	ecx, esi
	mov	BYTE PTR [esi+1102], bl
	movss	DWORD PTR [esi+1080], xmm0
	call	?update_key_states@line_edit_control@text_editor@@AAEXXZ ; text_editor::line_edit_control::update_key_states

; 442  : 	update_bufs();

	mov	ecx, esi
	call	?update_bufs@line_edit_control@text_editor@@AAEXXZ ; text_editor::line_edit_control::update_bufs
	pop	ebx
$LN8@on_key_pre@5:
	pop	edi
	pop	esi

; 443  : }

	ret	4
?on_key_press@line_edit_control@text_editor@@QAEXH@Z ENDP ; text_editor::line_edit_control::on_key_press
_TEXT	ENDS
PUBLIC	?assign_callback@line_edit_control@text_editor@@QAEXIW4key_state@2@ABV?$FastDelegate0@X@fastdelegate@@@Z ; text_editor::line_edit_control::assign_callback
; Function compile flags: /Ogtpy
;	COMDAT ?assign_callback@line_edit_control@text_editor@@QAEXIW4key_state@2@ABV?$FastDelegate0@X@fastdelegate@@@Z
_TEXT	SEGMENT
_dik$ = 8						; size = 4
_state$ = 12						; size = 4
_callback$ = 16						; size = 4
?assign_callback@line_edit_control@text_editor@@QAEXIW4key_state@2@ABV?$FastDelegate0@X@fastdelegate@@@Z PROC ; text_editor::line_edit_control::assign_callback, COMDAT
; _this$ = ecx

; 364  : {

	push	ebx
	push	esi
	push	edi

; 365  : 	VERIFY( dik < DIK_COUNT );
; 366  : 	Base* prev_action = m_actions[dik];

	mov	edi, DWORD PTR _dik$[esp+8]
	mov	esi, ecx

; 367  : 	m_actions[dik] = xr_new<text_editor::callback_base>( callback, state );

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	mov	ebx, DWORD PTR [esi+edi*4]
	push	20					; 00000014H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	xor	ecx, ecx
	cmp	eax, ecx
	je	SHORT $LN8@assign_cal
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	ecx, DWORD PTR _callback$[esp+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR _state$[esp+8]
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [esi+edi*4], eax
	pop	edi
	pop	esi

; 368  : 	m_actions[dik]->on_assign( prev_action );

	mov	DWORD PTR [eax+4], ebx
	pop	ebx

; 369  : }

	ret	12					; 0000000cH

; 367  : 	m_actions[dik] = xr_new<text_editor::callback_base>( callback, state );

$LN8@assign_cal:
	xor	eax, eax
	mov	DWORD PTR [esi+edi*4], eax
	pop	edi
	pop	esi

; 368  : 	m_actions[dik]->on_assign( prev_action );

	mov	DWORD PTR [eax+4], ebx
	pop	ebx

; 369  : }

	ret	12					; 0000000cH
?assign_callback@line_edit_control@text_editor@@QAEXIW4key_state@2@ABV?$FastDelegate0@X@fastdelegate@@@Z ENDP ; text_editor::line_edit_control::assign_callback
_TEXT	ENDS
PUBLIC	?clear_states@line_edit_control@text_editor@@QAEXXZ ; text_editor::line_edit_control::clear_states
; Function compile flags: /Ogtpy
;	COMDAT ?clear_states@line_edit_control@text_editor@@QAEXXZ
_TEXT	SEGMENT
?clear_states@line_edit_control@text_editor@@QAEXXZ PROC ; text_editor::line_edit_control::clear_states, COMDAT
; _this$ = ecx

; 127  : 	m_edit_str[0]	= 0;

	mov	edx, DWORD PTR [ecx+1024]
	xor	eax, eax
	mov	BYTE PTR [edx], al

; 128  : 	clear_inserted();

	mov	edx, DWORD PTR [ecx+1032]
	mov	BYTE PTR [edx+1], al
	mov	edx, DWORD PTR [ecx+1032]
	mov	BYTE PTR [edx], al

; 129  : 	m_undo_buf[0]	= 0;

	mov	edx, DWORD PTR [ecx+1028]
	mov	BYTE PTR [edx], al

; 130  : 
; 131  : 	m_buf0[0]		= 0;

	mov	edx, DWORD PTR [ecx+1036]

; 132  : 	m_buf1[0]		= 0;
; 133  : 	m_buf2[0]		= 0;
; 134  : 	m_buf3[0]		= 0;
; 135  : 
; 136  : 	m_cur_pos		= 0;
; 137  : 	m_select_start	= 0;
; 138  : 	m_p1			= 0;
; 139  : 	m_p2			= 0;
; 140  : 
; 141  : 	m_accel				= 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	mov	BYTE PTR [edx], al
	mov	edx, DWORD PTR [ecx+1040]
	mov	BYTE PTR [edx], al
	mov	edx, DWORD PTR [ecx+1044]
	mov	BYTE PTR [edx], al
	mov	edx, DWORD PTR [ecx+1048]
	mov	BYTE PTR [edx], al
	movss	DWORD PTR [ecx+1072], xmm0

; 142  : 	m_cur_time			= 0.0f;

	xorps	xmm0, xmm0
	mov	DWORD PTR [ecx+1056], eax
	mov	DWORD PTR [ecx+1060], eax
	mov	DWORD PTR [ecx+1064], eax
	mov	DWORD PTR [ecx+1068], eax
	movss	DWORD PTR [ecx+1076], xmm0

; 143  : 	m_rep_time			= 0.0f;

	movss	DWORD PTR [ecx+1080], xmm0

; 144  : 	m_last_frame_time	= 0;

	mov	DWORD PTR [ecx+1088], eax

; 145  : 	m_last_key_time		= 0.0f;

	movss	DWORD PTR [ecx+1084], xmm0

; 146  : 	m_last_changed_frame  = 0;

	mov	DWORD PTR [ecx+1092], eax

; 147  : 
; 148  : 	m_hold_mode			= false;

	mov	BYTE PTR [ecx+1100], al

; 149  : 	m_insert_mode		= false;

	mov	BYTE PTR [ecx+1101], al

; 150  : 	m_repeat_mode		= false;

	mov	BYTE PTR [ecx+1102], al

; 151  : 	m_mark				= false;

	mov	BYTE PTR [ecx+1103], al

; 152  : 	m_cursor_view		= false;

	mov	BYTE PTR [ecx+1104], al

; 153  : 	m_need_update		= false;

	mov	BYTE PTR [ecx+1105], al

; 154  : 	m_unselected_mode	= false;

	mov	BYTE PTR [ecx+1106], al

; 155  : 
; 156  : 	update_key_states	( );

	jmp	?update_key_states@line_edit_control@text_editor@@AAEXXZ ; text_editor::line_edit_control::update_key_states
?clear_states@line_edit_control@text_editor@@QAEXXZ ENDP ; text_editor::line_edit_control::clear_states
PUBLIC	?on_key_hold@line_edit_control@text_editor@@QAEXH@Z ; text_editor::line_edit_control::on_key_hold
; Function compile flags: /Ogtpy
;	COMDAT ?on_key_hold@line_edit_control@text_editor@@QAEXH@Z
_TEXT	SEGMENT
_buf_time$119733 = 8					; size = 4
_dik$ = 8						; size = 4
?on_key_hold@line_edit_control@text_editor@@QAEXH@Z PROC ; text_editor::line_edit_control::on_key_hold, COMDAT
; _this$ = ecx

; 448  : {

	push	esi
	mov	esi, ecx

; 449  : 	update_key_states( );

	call	?update_key_states@line_edit_control@text_editor@@AAEXXZ ; text_editor::line_edit_control::update_key_states

; 450  : 	update_bufs();

	mov	ecx, esi
	call	?update_bufs@line_edit_control@text_editor@@AAEXXZ ; text_editor::line_edit_control::update_bufs

; 451  : 	switch ( dik )

	mov	ecx, DWORD PTR _dik$[esp]
	lea	eax, DWORD PTR [ecx-15]
	cmp	eax, 169				; 000000a9H
	ja	SHORT $LN3@on_key_hol
	movzx	eax, BYTE PTR $LN7@on_key_hol[eax]
	jmp	DWORD PTR $LN8@on_key_hol[eax*4]
$LN3@on_key_hol:

; 452  : 	{
; 453  : 	case DIK_TAB:
; 454  : 	case DIK_LSHIFT:   case DIK_RSHIFT:
; 455  : 	case DIK_LCONTROL: case DIK_RCONTROL:
; 456  : 	case DIK_LALT:     case DIK_RALT:
; 457  : 		return;
; 458  : 		break;
; 459  : 	}
; 460  : 
; 461  : 	if ( m_repeat_mode && m_last_key_time > 5.0f * g_console_sensitive )

	cmp	BYTE PTR [esi+1102], 0
	je	SHORT $LN1@on_key_hol
	movss	xmm0, DWORD PTR ?g_console_sensitive@@3MA
	mulss	xmm0, DWORD PTR __real@40a00000
	movss	xmm1, DWORD PTR [esi+1084]
	comiss	xmm1, xmm0
	jbe	SHORT $LN1@on_key_hol

; 462  : 	{
; 463  : 		float buf_time = m_rep_time;

	movss	xmm0, DWORD PTR [esi+1080]

; 464  : 		m_hold_mode    = true;
; 465  : 		
; 466  : 		on_key_press( dik );

	push	ecx
	mov	ecx, esi
	movss	DWORD PTR _buf_time$119733[esp+4], xmm0
	mov	BYTE PTR [esi+1100], 1
	call	?on_key_press@line_edit_control@text_editor@@QAEXH@Z ; text_editor::line_edit_control::on_key_press

; 467  : 		
; 468  : 		m_hold_mode    = false;
; 469  : 		m_rep_time     = buf_time;

	movss	xmm0, DWORD PTR _buf_time$119733[esp]
	mov	BYTE PTR [esi+1100], 0
	movss	DWORD PTR [esi+1080], xmm0
$LN1@on_key_hol:
	pop	esi

; 470  : 	}
; 471  : }

	ret	4
	npad	1
$LN8@on_key_hol:
	DD	$LN1@on_key_hol
	DD	$LN3@on_key_hol
$LN7@on_key_hol:
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
?on_key_hold@line_edit_control@text_editor@@QAEXH@Z ENDP ; text_editor::line_edit_control::on_key_hold
_TEXT	ENDS
PUBLIC	?init@line_edit_control@text_editor@@QAEXIW4init_mode@2@@Z ; text_editor::line_edit_control::init
; Function compile flags: /Ogtpy
;	COMDAT ?init@line_edit_control@text_editor@@QAEXIW4init_mode@2@@Z
_TEXT	SEGMENT
_i$119574 = -8						; size = 4
_prev$424280 = -4					; size = 4
_prev$424234 = -4					; size = 4
_prev$424188 = -4					; size = 4
_prev$424142 = -4					; size = 4
_prev$424096 = -4					; size = 4
_prev$424050 = -4					; size = 4
_prev_action$424003 = -4				; size = 4
_prev_action$423826 = -4				; size = 4
_prev_action$423648 = -4				; size = 4
_prev_action$423470 = -4				; size = 4
_prev_action$423292 = -4				; size = 4
_prev_action$423114 = -4				; size = 4
_prev_action$422905 = -4				; size = 4
_prev_action$422758 = -4				; size = 4
_prev_action$422580 = -4				; size = 4
_prev_action$422402 = -4				; size = 4
_prev_action$422224 = -4				; size = 4
_prev_action$422046 = -4				; size = 4
_prev_action$421838 = -4				; size = 4
_prev_action$421690 = -4				; size = 4
_prev_action$421512 = -4				; size = 4
_prev_action$421334 = -4				; size = 4
_prev_action$421156 = -4				; size = 4
_prev_action$420977 = -4				; size = 4
_prev_action$420772 = -4				; size = 4
_prev_action$420622 = -4				; size = 4
_prev_action$420444 = -4				; size = 4
_prev_action$420266 = -4				; size = 4
_prev_action$420088 = -4				; size = 4
_prev_action$419909 = -4				; size = 4
_prev_action$419732 = -4				; size = 4
_prev_action$419554 = -4				; size = 4
_prev_action$419376 = -4				; size = 4
_prev_action$419198 = -4				; size = 4
_prev_action$419020 = -4				; size = 4
_prev_action$418811 = -4				; size = 4
__real_ptr$418663 = -4					; size = 4
_str_buffer_size$ = 8					; size = 4
_mode$ = 12						; size = 4
?init@line_edit_control@text_editor@@QAEXIW4init_mode@2@@Z PROC ; text_editor::line_edit_control::init, COMDAT
; _this$ = ecx

; 160  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H

; 161  : 	m_buffer_size = str_buffer_size;

	mov	eax, DWORD PTR _str_buffer_size$[ebp]
	sub	esp, 12					; 0000000cH

; 162  : 	clamp( m_buffer_size, (int)MIN_BUF_SIZE, (int)MAX_BUF_SIZE );

	cmp	eax, 8
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR [esi+1052], eax
	jge	SHORT $LN10@init@4
	mov	DWORD PTR [esi+1052], 8
	jmp	SHORT $LN8@init@4
$LN10@init@4:
	cmp	eax, 4096				; 00001000H
	jle	SHORT $LN8@init@4
	mov	DWORD PTR [esi+1052], 4096		; 00001000H
$LN8@init@4:

; 163  : 
; 164  : 	xr_free( m_edit_str );	m_edit_str = (LPSTR)xr_malloc( m_buffer_size * sizeof(char) );

	mov	eax, DWORD PTR [esi+1024]
	xor	edi, edi
	cmp	eax, edi
	je	SHORT $LN13@init@4
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi+1024], edi
$LN13@init@4:
	mov	eax, DWORD PTR [esi+1052]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	mov	ebx, DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	push	eax
	call	ebx
	mov	DWORD PTR [esi+1024], eax

; 165  : 	xr_free( m_inserted );	m_inserted = (LPSTR)xr_malloc( m_buffer_size * sizeof(char) );

	mov	eax, DWORD PTR [esi+1032]
	cmp	eax, edi
	je	SHORT $LN18@init@4
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi+1032], edi
$LN18@init@4:
	mov	eax, DWORD PTR [esi+1052]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	ebx
	mov	DWORD PTR [esi+1032], eax

; 166  : 	xr_free( m_undo_buf );	m_undo_buf = (LPSTR)xr_malloc( m_buffer_size * sizeof(char) );

	mov	eax, DWORD PTR [esi+1028]
	cmp	eax, edi
	je	SHORT $LN23@init@4
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi+1028], edi
$LN23@init@4:
	mov	eax, DWORD PTR [esi+1052]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	ebx
	mov	DWORD PTR [esi+1028], eax

; 167  : 	
; 168  : 	xr_free( m_buf0 );		m_buf0 = (LPSTR)xr_malloc( m_buffer_size * sizeof(char) );

	mov	eax, DWORD PTR [esi+1036]
	cmp	eax, edi
	je	SHORT $LN28@init@4
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi+1036], edi
$LN28@init@4:
	mov	eax, DWORD PTR [esi+1052]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	ebx
	mov	DWORD PTR [esi+1036], eax

; 169  : 	xr_free( m_buf1 );		m_buf1 = (LPSTR)xr_malloc( m_buffer_size * sizeof(char) );

	mov	eax, DWORD PTR [esi+1040]
	cmp	eax, edi
	je	SHORT $LN33@init@4
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi+1040], edi
$LN33@init@4:
	mov	eax, DWORD PTR [esi+1052]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	ebx
	mov	DWORD PTR [esi+1040], eax

; 170  : 	xr_free( m_buf2 );		m_buf2 = (LPSTR)xr_malloc( m_buffer_size * sizeof(char) );

	mov	eax, DWORD PTR [esi+1044]
	cmp	eax, edi
	je	SHORT $LN38@init@4
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi+1044], edi
$LN38@init@4:
	mov	eax, DWORD PTR [esi+1052]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	ebx
	mov	DWORD PTR [esi+1044], eax

; 171  : 	xr_free( m_buf3 );		m_buf3 = (LPSTR)xr_malloc( m_buffer_size * sizeof(char) );

	mov	eax, DWORD PTR [esi+1048]
	cmp	eax, edi
	je	SHORT $LN43@init@4
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi+1048], edi
$LN43@init@4:
	mov	eax, DWORD PTR [esi+1052]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	ebx

; 172  : 
; 173  : 	clear_states();

	mov	ecx, esi
	mov	DWORD PTR [esi+1048], eax
	call	?clear_states@line_edit_control@text_editor@@QAEXXZ ; text_editor::line_edit_control::clear_states

; 174  : 
; 175  : 	for ( u32 i = 0; i < DIK_COUNT; ++i )

	mov	DWORD PTR _i$119574[esp+24], edi
	mov	eax, edi
	npad	4
$LL5@init@4:

; 176  : 	{
; 177  : 		xr_delete( m_actions[i] );

	mov	ecx, DWORD PTR [esi+eax*4]
	cmp	ecx, edi
	je	SHORT $LN48@init@4
	push	ecx
	call	___RTCastToVoid
	mov	ecx, DWORD PTR _i$119574[esp+28]
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	edx, DWORD PTR [ecx]
	add	esp, 4
	mov	DWORD PTR __real_ptr$418663[esp+24], eax
	mov	eax, DWORD PTR [edx]
	push	edi
	call	eax
	mov	ecx, DWORD PTR __real_ptr$418663[esp+24]
	push	ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	edx, DWORD PTR _i$119574[esp+24]
	mov	DWORD PTR [esi+edx*4], edi
	mov	eax, edx
$LN48@init@4:

; 178  : 		m_actions[i] = NULL;

	mov	DWORD PTR [esi+eax*4], edi
	add	eax, 1
	cmp	eax, 256				; 00000100H
	mov	DWORD PTR _i$119574[esp+24], eax
	jb	SHORT $LL5@init@4

; 179  : 	}
; 180  : 
; 181  : 	if ( mode == im_read_only )

	mov	eax, DWORD PTR _mode$[ebp]
	cmp	eax, 2
	jne	$LN2@init@4

; 182  : 	{
; 183  : 		assign_callback( DIK_A     , ks_Ctrl, Callback( this, &line_edit_control::select_all_buf       ) );

	mov	eax, DWORD PTR [esi+120]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$418811[esp+28], eax
	call	ebx
	cmp	eax, edi
	je	SHORT $LN72@init@4
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?select_all_buf@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::select_all_buf
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], 12			; 0000000cH
	jmp	SHORT $LN73@init@4
$LN72@init@4:
	xor	eax, eax
$LN73@init@4:
	mov	ecx, DWORD PTR _prev_action$418811[esp+24]
	mov	DWORD PTR [esi+120], eax
	mov	DWORD PTR [eax+4], ecx

; 184  : 		assign_callback( DIK_C     , ks_Ctrl, Callback( this, &line_edit_control::copy_to_clipboard    ) );

	mov	edx, DWORD PTR [esi+184]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$419020[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN117@init@4
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?copy_to_clipboard@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::copy_to_clipboard
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], 12			; 0000000cH
	jmp	SHORT $LN118@init@4
$LN117@init@4:
	xor	eax, eax
$LN118@init@4:
	mov	ecx, DWORD PTR _prev_action$419020[esp+24]
	mov	DWORD PTR [esi+184], eax
	mov	DWORD PTR [eax+4], ecx

; 185  : 		assign_callback( DIK_INSERT, ks_Ctrl, Callback( this, &line_edit_control::copy_to_clipboard    ) );

	mov	edx, DWORD PTR [esi+840]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$419198[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN162@init@4
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?copy_to_clipboard@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::copy_to_clipboard
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], 12			; 0000000cH
	jmp	SHORT $LN163@init@4
$LN162@init@4:
	xor	eax, eax
$LN163@init@4:
	mov	ecx, DWORD PTR _prev_action$419198[esp+24]
	mov	DWORD PTR [esi+840], eax
	mov	DWORD PTR [eax+4], ecx

; 186  : 
; 187  : 		assign_callback( DIK_HOME  , ks_free, Callback( this, &line_edit_control::move_pos_home        ) );

	mov	edx, DWORD PTR [esi+796]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$419376[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN207@init@4
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?move_pos_home@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::move_pos_home
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], edi
	jmp	SHORT $LN208@init@4
$LN207@init@4:
	xor	eax, eax
$LN208@init@4:
	mov	ecx, DWORD PTR _prev_action$419376[esp+24]
	mov	DWORD PTR [esi+796], eax
	mov	DWORD PTR [eax+4], ecx

; 188  : 		assign_callback( DIK_END   , ks_free, Callback( this, &line_edit_control::move_pos_end         ) );

	mov	edx, DWORD PTR [esi+828]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$419554[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN252@init@4
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?move_pos_end@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::move_pos_end
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], edi
	jmp	SHORT $LN253@init@4
$LN252@init@4:
	xor	eax, eax
$LN253@init@4:
	mov	ecx, DWORD PTR _prev_action$419554[esp+24]
	mov	DWORD PTR [esi+828], eax
	mov	DWORD PTR [eax+4], ecx

; 189  : 		assign_callback( DIK_LEFT  , ks_free, Callback( this, &line_edit_control::move_pos_left        ) );

	mov	edx, DWORD PTR [esi+812]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$419732[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN297@init@4
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?move_pos_left@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::move_pos_left
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], edi
	jmp	SHORT $LN298@init@4
$LN297@init@4:
	xor	eax, eax
$LN298@init@4:
	mov	ecx, DWORD PTR _prev_action$419732[esp+24]
	mov	DWORD PTR [esi+812], eax
	mov	DWORD PTR [eax+4], ecx

; 190  : 		assign_callback( DIK_RIGHT , ks_free, Callback( this, &line_edit_control::move_pos_right       ) );

	mov	edx, DWORD PTR [esi+820]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$419909[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN342@init@4
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?move_pos_right@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::move_pos_right
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], edi
	jmp	SHORT $LN343@init@4
$LN342@init@4:
	xor	eax, eax
$LN343@init@4:
	mov	ecx, DWORD PTR _prev_action$419909[esp+24]
	mov	DWORD PTR [esi+820], eax
	mov	DWORD PTR [eax+4], ecx

; 191  : 		assign_callback( DIK_LEFT  , ks_Ctrl, Callback( this, &line_edit_control::move_pos_left_word   ) );

	mov	edx, DWORD PTR [esi+812]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$420088[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN387@init@4
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?move_pos_left_word@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::move_pos_left_word
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], 12			; 0000000cH
	jmp	SHORT $LN388@init@4
$LN387@init@4:
	xor	eax, eax
$LN388@init@4:
	mov	ecx, DWORD PTR _prev_action$420088[esp+24]
	mov	DWORD PTR [esi+812], eax
	mov	DWORD PTR [eax+4], ecx

; 192  : 		assign_callback( DIK_RIGHT , ks_Ctrl, Callback( this, &line_edit_control::move_pos_right_word  ) );

	mov	edx, DWORD PTR [esi+820]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$420266[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN432@init@4
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?move_pos_right_word@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::move_pos_right_word
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], 12			; 0000000cH
	mov	DWORD PTR [esi+820], eax

; 193  : 	}
; 194  : 	else

	jmp	$LN1477@init@4

; 192  : 		assign_callback( DIK_RIGHT , ks_Ctrl, Callback( this, &line_edit_control::move_pos_right_word  ) );

$LN432@init@4:
	xor	eax, eax
	mov	DWORD PTR [esi+820], eax

; 193  : 	}
; 194  : 	else

	jmp	$LN1477@init@4
$LN2@init@4:

; 195  : 	{
; 196  : 		assign_char_pairs( mode );

	push	eax
	mov	ecx, esi
	call	?assign_char_pairs@line_edit_control@text_editor@@AAEXW4init_mode@2@@Z ; text_editor::line_edit_control::assign_char_pairs

; 197  : 
; 198  : 		assign_callback( DIK_INSERT, ks_free, Callback( this, &line_edit_control::flip_insert_mode     ) );

	mov	edx, DWORD PTR [esi+840]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$420444[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN477@init@4
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?flip_insert_mode@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::flip_insert_mode
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], edi
	jmp	SHORT $LN478@init@4
$LN477@init@4:
	xor	eax, eax
$LN478@init@4:
	mov	ecx, DWORD PTR _prev_action$420444[esp+24]
	mov	DWORD PTR [esi+840], eax
	mov	DWORD PTR [eax+4], ecx

; 199  : 		assign_callback( DIK_A     , ks_Ctrl, Callback( this, &line_edit_control::select_all_buf       ) );

	mov	edx, DWORD PTR [esi+120]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$420622[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN522@init@4
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?select_all_buf@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::select_all_buf
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], 12			; 0000000cH
	jmp	SHORT $LN523@init@4
$LN522@init@4:
	xor	eax, eax
$LN523@init@4:
	mov	ecx, DWORD PTR _prev_action$420622[esp+24]
	mov	DWORD PTR [esi+120], eax
	mov	DWORD PTR [eax+4], ecx

; 200  : 		assign_callback( DIK_Z     , ks_Ctrl, Callback( this, &line_edit_control::undo_buf             ) );

	mov	edx, DWORD PTR [esi+176]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$420772[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN567@init@4
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?undo_buf@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::undo_buf
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], 12			; 0000000cH
	jmp	SHORT $LN568@init@4
$LN567@init@4:
	xor	eax, eax
$LN568@init@4:
	mov	ecx, DWORD PTR _prev_action$420772[esp+24]
	mov	DWORD PTR [esi+176], eax
	mov	DWORD PTR [eax+4], ecx

; 201  : 
; 202  : 		assign_callback( DIK_C     , ks_Ctrl, Callback( this, &line_edit_control::copy_to_clipboard    ) );

	mov	edx, DWORD PTR [esi+184]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$420977[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN612@init@4
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?copy_to_clipboard@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::copy_to_clipboard
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], 12			; 0000000cH
	jmp	SHORT $LN613@init@4
$LN612@init@4:
	xor	eax, eax
$LN613@init@4:
	mov	ecx, DWORD PTR _prev_action$420977[esp+24]
	mov	DWORD PTR [esi+184], eax
	mov	DWORD PTR [eax+4], ecx

; 203  : 		assign_callback( DIK_V     , ks_Ctrl, Callback( this, &line_edit_control::paste_from_clipboard ) );

	mov	edx, DWORD PTR [esi+188]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$421156[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN657@init@4
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?paste_from_clipboard@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::paste_from_clipboard
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], 12			; 0000000cH
	jmp	SHORT $LN658@init@4
$LN657@init@4:
	xor	eax, eax
$LN658@init@4:
	mov	ecx, DWORD PTR _prev_action$421156[esp+24]
	mov	DWORD PTR [esi+188], eax
	mov	DWORD PTR [eax+4], ecx

; 204  : 		assign_callback( DIK_X     , ks_Ctrl, Callback( this, &line_edit_control::cut_to_clipboard     ) );

	mov	edx, DWORD PTR [esi+180]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$421334[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN702@init@4
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?cut_to_clipboard@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::cut_to_clipboard
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], 12			; 0000000cH
	jmp	SHORT $LN703@init@4
$LN702@init@4:
	xor	eax, eax
$LN703@init@4:
	mov	ecx, DWORD PTR _prev_action$421334[esp+24]
	mov	DWORD PTR [esi+180], eax
	mov	DWORD PTR [eax+4], ecx

; 205  : 
; 206  : 		assign_callback( DIK_INSERT, ks_Ctrl, Callback( this, &line_edit_control::copy_to_clipboard    ) );

	mov	edx, DWORD PTR [esi+840]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$421512[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN747@init@4
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?copy_to_clipboard@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::copy_to_clipboard
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], 12			; 0000000cH
	jmp	SHORT $LN748@init@4
$LN747@init@4:
	xor	eax, eax
$LN748@init@4:
	mov	ecx, DWORD PTR _prev_action$421512[esp+24]
	mov	DWORD PTR [esi+840], eax
	mov	DWORD PTR [eax+4], ecx

; 207  : 		assign_callback( DIK_INSERT, ks_Shift,Callback( this, &line_edit_control::paste_from_clipboard ) );

	mov	edx, DWORD PTR [esi+840]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$421690[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN792@init@4
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?paste_from_clipboard@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::paste_from_clipboard
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], 3
	jmp	SHORT $LN793@init@4
$LN792@init@4:
	xor	eax, eax
$LN793@init@4:
	mov	ecx, DWORD PTR _prev_action$421690[esp+24]
	mov	DWORD PTR [esi+840], eax
	mov	DWORD PTR [eax+4], ecx

; 208  : 		assign_callback( DIK_DELETE, ks_Shift,Callback( this, &line_edit_control::cut_to_clipboard     ) );

	mov	edx, DWORD PTR [esi+844]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$421838[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN837@init@4
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?cut_to_clipboard@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::cut_to_clipboard
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], 3
	jmp	SHORT $LN838@init@4
$LN837@init@4:
	xor	eax, eax
$LN838@init@4:
	mov	ecx, DWORD PTR _prev_action$421838[esp+24]
	mov	DWORD PTR [esi+844], eax
	mov	DWORD PTR [eax+4], ecx

; 209  : 
; 210  : 		assign_callback( DIK_HOME  , ks_free, Callback( this, &line_edit_control::move_pos_home        ) );

	mov	edx, DWORD PTR [esi+796]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$422046[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN882@init@4
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?move_pos_home@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::move_pos_home
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], edi
	jmp	SHORT $LN883@init@4
$LN882@init@4:
	xor	eax, eax
$LN883@init@4:
	mov	ecx, DWORD PTR _prev_action$422046[esp+24]
	mov	DWORD PTR [esi+796], eax
	mov	DWORD PTR [eax+4], ecx

; 211  : 		assign_callback( DIK_END   , ks_free, Callback( this, &line_edit_control::move_pos_end         ) );

	mov	edx, DWORD PTR [esi+828]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$422224[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN927@init@4
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?move_pos_end@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::move_pos_end
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], edi
	jmp	SHORT $LN928@init@4
$LN927@init@4:
	xor	eax, eax
$LN928@init@4:
	mov	ecx, DWORD PTR _prev_action$422224[esp+24]
	mov	DWORD PTR [esi+828], eax
	mov	DWORD PTR [eax+4], ecx

; 212  : 		assign_callback( DIK_LEFT  , ks_free, Callback( this, &line_edit_control::move_pos_left        ) );

	mov	edx, DWORD PTR [esi+812]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$422402[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN972@init@4
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?move_pos_left@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::move_pos_left
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], edi
	jmp	SHORT $LN973@init@4
$LN972@init@4:
	xor	eax, eax
$LN973@init@4:
	mov	ecx, DWORD PTR _prev_action$422402[esp+24]
	mov	DWORD PTR [esi+812], eax
	mov	DWORD PTR [eax+4], ecx

; 213  : 		assign_callback( DIK_RIGHT , ks_free, Callback( this, &line_edit_control::move_pos_right       ) );

	mov	edx, DWORD PTR [esi+820]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$422580[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN1017@init@4
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?move_pos_right@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::move_pos_right
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], edi
	jmp	SHORT $LN1018@init@4
$LN1017@init@4:
	xor	eax, eax
$LN1018@init@4:
	mov	ecx, DWORD PTR _prev_action$422580[esp+24]
	mov	DWORD PTR [esi+820], eax
	mov	DWORD PTR [eax+4], ecx

; 214  : 		assign_callback( DIK_LEFT  , ks_Ctrl, Callback( this, &line_edit_control::move_pos_left_word   ) );

	mov	edx, DWORD PTR [esi+812]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$422758[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN1062@init@4
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?move_pos_left_word@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::move_pos_left_word
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], 12			; 0000000cH
	jmp	SHORT $LN1063@init@4
$LN1062@init@4:
	xor	eax, eax
$LN1063@init@4:
	mov	ecx, DWORD PTR _prev_action$422758[esp+24]
	mov	DWORD PTR [esi+812], eax
	mov	DWORD PTR [eax+4], ecx

; 215  : 		assign_callback( DIK_RIGHT , ks_Ctrl, Callback( this, &line_edit_control::move_pos_right_word  ) );

	mov	edx, DWORD PTR [esi+820]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$422905[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN1107@init@4
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?move_pos_right_word@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::move_pos_right_word
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], 12			; 0000000cH
	jmp	SHORT $LN1108@init@4
$LN1107@init@4:
	xor	eax, eax
$LN1108@init@4:
	mov	ecx, DWORD PTR _prev_action$422905[esp+24]
	mov	DWORD PTR [esi+820], eax
	mov	DWORD PTR [eax+4], ecx

; 216  : 
; 217  : 		assign_callback( DIK_BACK  , ks_free, Callback( this, &line_edit_control::delete_selected_back ) );

	mov	edx, DWORD PTR [esi+56]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$423114[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN1152@init@4
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?delete_selected_back@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::delete_selected_back
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], edi
	jmp	SHORT $LN1153@init@4
$LN1152@init@4:
	xor	eax, eax
$LN1153@init@4:
	mov	ecx, DWORD PTR _prev_action$423114[esp+24]
	mov	DWORD PTR [esi+56], eax
	mov	DWORD PTR [eax+4], ecx

; 218  : 		assign_callback( DIK_DELETE, ks_free, Callback( this, &line_edit_control::delete_selected_forward ) );

	mov	edx, DWORD PTR [esi+844]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$423292[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN1197@init@4
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?delete_selected_forward@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::delete_selected_forward
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], edi
	jmp	SHORT $LN1198@init@4
$LN1197@init@4:
	xor	eax, eax
$LN1198@init@4:
	mov	ecx, DWORD PTR _prev_action$423292[esp+24]
	mov	DWORD PTR [esi+844], eax
	mov	DWORD PTR [eax+4], ecx

; 219  : 		assign_callback( DIK_BACK  , ks_Ctrl, Callback( this, &line_edit_control::delete_word_back     ) );

	mov	edx, DWORD PTR [esi+56]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$423470[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN1242@init@4
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?delete_word_back@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::delete_word_back
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], 12			; 0000000cH
	jmp	SHORT $LN1243@init@4
$LN1242@init@4:
	xor	eax, eax
$LN1243@init@4:
	mov	ecx, DWORD PTR _prev_action$423470[esp+24]
	mov	DWORD PTR [esi+56], eax
	mov	DWORD PTR [eax+4], ecx

; 220  : 		assign_callback( DIK_DELETE, ks_Ctrl, Callback( this, &line_edit_control::delete_word_forward  ) );

	mov	edx, DWORD PTR [esi+844]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$423648[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN1287@init@4
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?delete_word_forward@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::delete_word_forward
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], 12			; 0000000cH
	jmp	SHORT $LN1288@init@4
$LN1287@init@4:
	xor	eax, eax
$LN1288@init@4:
	mov	ecx, DWORD PTR _prev_action$423648[esp+24]
	mov	DWORD PTR [esi+844], eax
	mov	DWORD PTR [eax+4], ecx

; 221  : 
; 222  : 		assign_callback( DIK_LSHIFT, ks_Ctrl, Callback( this, &line_edit_control::SwitchKL ) );

	mov	edx, DWORD PTR [esi+168]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$423826[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN1332@init@4
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?SwitchKL@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::SwitchKL
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], 12			; 0000000cH
	jmp	SHORT $LN1333@init@4
$LN1332@init@4:
	xor	eax, eax
$LN1333@init@4:
	mov	ecx, DWORD PTR _prev_action$423826[esp+24]
	mov	DWORD PTR [esi+168], eax
	mov	DWORD PTR [eax+4], ecx

; 223  : 		assign_callback( DIK_LSHIFT, ks_Alt, Callback( this, &line_edit_control::SwitchKL  ) );

	mov	edx, DWORD PTR [esi+168]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$424003[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN1377@init@4
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?SwitchKL@line_edit_control@text_editor@@AAGXXZ ; text_editor::line_edit_control::SwitchKL
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], 48			; 00000030H
	jmp	SHORT $LN1378@init@4
$LN1377@init@4:
	xor	eax, eax
$LN1378@init@4:
	mov	DWORD PTR [esi+168], eax
$LN1477@init@4:
	mov	ecx, DWORD PTR _prev_action$424003[esp+24]
	mov	DWORD PTR [eax+4], ecx

; 224  : 
; 225  : 	} // if mode
; 226  : 
; 227  : 	create_key_state( DIK_LSHIFT  , ks_LShift );

	mov	edx, DWORD PTR [esi+168]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	16					; 00000010H
	mov	DWORD PTR _prev$424050[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN1407@init@4
	mov	ecx, DWORD PTR _prev$424050[esp+24]
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7key_state_base@text_editor@@6B@
	mov	DWORD PTR [eax+8], 1
	mov	DWORD PTR [eax+12], ecx
	jmp	SHORT $LN1408@init@4
$LN1407@init@4:
	xor	eax, eax
$LN1408@init@4:

; 228  : 	create_key_state( DIK_RSHIFT  , ks_RShift );

	mov	edx, DWORD PTR [esi+216]
	mov	DWORD PTR [esi+168], eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	16					; 00000010H
	mov	DWORD PTR _prev$424096[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN1419@init@4
	mov	ecx, DWORD PTR _prev$424096[esp+24]
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7key_state_base@text_editor@@6B@
	mov	DWORD PTR [eax+8], 2
	mov	DWORD PTR [eax+12], ecx
	jmp	SHORT $LN1420@init@4
$LN1419@init@4:
	xor	eax, eax
$LN1420@init@4:

; 229  : 	create_key_state( DIK_LCONTROL, ks_LCtrl  );

	mov	edx, DWORD PTR [esi+116]
	mov	DWORD PTR [esi+216], eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	16					; 00000010H
	mov	DWORD PTR _prev$424142[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN1431@init@4
	mov	ecx, DWORD PTR _prev$424142[esp+24]
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7key_state_base@text_editor@@6B@
	mov	DWORD PTR [eax+8], 4
	mov	DWORD PTR [eax+12], ecx
	jmp	SHORT $LN1432@init@4
$LN1431@init@4:
	xor	eax, eax
$LN1432@init@4:

; 230  : 	create_key_state( DIK_RCONTROL, ks_RCtrl  );

	mov	edx, DWORD PTR [esi+628]
	mov	DWORD PTR [esi+116], eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	16					; 00000010H
	mov	DWORD PTR _prev$424188[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN1443@init@4
	mov	ecx, DWORD PTR _prev$424188[esp+24]
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7key_state_base@text_editor@@6B@
	mov	DWORD PTR [eax+8], 8
	mov	DWORD PTR [eax+12], ecx
	jmp	SHORT $LN1444@init@4
$LN1443@init@4:
	xor	eax, eax
$LN1444@init@4:

; 231  : 	create_key_state( DIK_LALT    , ks_LAlt   );

	mov	edx, DWORD PTR [esi+224]
	mov	DWORD PTR [esi+628], eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	16					; 00000010H
	mov	DWORD PTR _prev$424234[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN1455@init@4
	mov	ecx, DWORD PTR _prev$424234[esp+24]
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7key_state_base@text_editor@@6B@
	mov	DWORD PTR [eax+8], 16			; 00000010H
	mov	DWORD PTR [eax+12], ecx
	jmp	SHORT $LN1456@init@4
$LN1455@init@4:
	xor	eax, eax
$LN1456@init@4:

; 232  : 	create_key_state( DIK_RALT    , ks_RAlt   );

	mov	edx, DWORD PTR [esi+736]
	mov	DWORD PTR [esi+224], eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	16					; 00000010H
	mov	DWORD PTR _prev$424280[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN1467@init@4
	mov	ecx, DWORD PTR _prev$424280[esp+24]
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7key_state_base@text_editor@@6B@
	mov	DWORD PTR [eax+8], 32			; 00000020H
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [esi+736], eax

; 233  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8

; 232  : 	create_key_state( DIK_RALT    , ks_RAlt   );

$LN1467@init@4:
	mov	DWORD PTR [esi+736], edi

; 233  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?init@line_edit_control@text_editor@@QAEXIW4init_mode@2@@Z ENDP ; text_editor::line_edit_control::init
_TEXT	ENDS
PUBLIC	??0line_edit_control@text_editor@@QAE@I@Z	; text_editor::line_edit_control::line_edit_control
; Function compile flags: /Ogtpy
;	COMDAT ??0line_edit_control@text_editor@@QAE@I@Z
_TEXT	SEGMENT
_str_buffer_size$ = 8					; size = 4
??0line_edit_control@text_editor@@QAE@I@Z PROC		; text_editor::line_edit_control::line_edit_control, COMDAT
; _this$ = ecx

; 49   : 	m_edit_str	= NULL;

	xor	edx, edx
	push	esi
	mov	esi, ecx
	push	edi

; 50   : 	m_inserted	= NULL;
; 51   : 	m_undo_buf	= NULL;
; 52   : 	m_buf0		= NULL;
; 53   : 	m_buf1		= NULL;
; 54   : 	m_buf2		= NULL;
; 55   : 	m_buf3		= NULL;
; 56   : 
; 57   : 	for ( u32 i = 0; i < DIK_COUNT; ++i )
; 58   : 	{
; 59   : 		m_actions[i] = NULL;

	xor	eax, eax
	mov	DWORD PTR [esi+1024], edx
	mov	DWORD PTR [esi+1032], edx
	mov	DWORD PTR [esi+1028], edx
	mov	DWORD PTR [esi+1036], edx
	mov	DWORD PTR [esi+1040], edx
	mov	DWORD PTR [esi+1044], edx
	mov	DWORD PTR [esi+1048], edx
	mov	ecx, 256				; 00000100H
	mov	edi, esi
	rep stosd

; 60   : 	}
; 61   : 
; 62   : 	init( str_buffer_size );

	mov	eax, DWORD PTR _str_buffer_size$[esp+4]
	push	edx
	push	eax
	mov	ecx, esi
	call	?init@line_edit_control@text_editor@@QAEXIW4init_mode@2@@Z ; text_editor::line_edit_control::init

; 63   : 
; 64   : 	update_key_states	();

	mov	ecx, esi
	call	?update_key_states@line_edit_control@text_editor@@AAEXXZ ; text_editor::line_edit_control::update_key_states
	pop	edi

; 65   : }

	mov	eax, esi
	pop	esi
	ret	4
??0line_edit_control@text_editor@@QAE@I@Z ENDP		; text_editor::line_edit_control::line_edit_control
END
