; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	D:\CLEARSKY\sources\engine\xrEngine\xr_collide_form.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?_RayQuery@CCF_Shape@@UAEHABUray_defs@collide@@AAVrq_results@3@@Z ; CCF_Shape::_RayQuery
PUBLIC	?_RayQuery@CCF_EventBox@@UAEHABUray_defs@collide@@AAVrq_results@3@@Z ; CCF_EventBox::_RayQuery
PUBLIC	?_RayQuery@CCF_Skeleton@@UAEHABUray_defs@collide@@AAVrq_results@3@@Z ; CCF_Skeleton::_RayQuery
PUBLIC	?identity@?$_box3@M@@QAEAAV1@XZ			; _box3<float>::identity
PUBLIC	?intersect@?$_sphere@M@@QBEHABU?$_vector3@M@@0@Z ; _sphere<float>::intersect
PUBLIC	??0?$xalloc@USElement@CCF_Skeleton@@@@QAE@XZ	; xalloc<CCF_Skeleton::SElement>::xalloc<CCF_Skeleton::SElement>
PUBLIC	??0?$_Vector_base@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@ABV?$xalloc@USElement@CCF_Skeleton@@@@@Z ; stlp_std::priv::_Vector_base<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_Vector_base<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >
PUBLIC	??0?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@ABV?$xalloc@USElement@CCF_Skeleton@@@@@Z ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >
PUBLIC	??0?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAE@ABV?$xalloc@USElement@CCF_Skeleton@@@@@Z ; stlp_std::vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >
PUBLIC	??0?$xr_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@@QAE@XZ ; xr_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::xr_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >
PUBLIC	?identity@?$_sphere@M@@QAEXXZ			; _sphere<float>::identity
PUBLIC	?empty@?$_Impl_vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@priv@stlp_std@@QBE_NXZ ; stlp_std::priv::_Impl_vector<collide::rq_result,xalloc<collide::rq_result> >::empty
PUBLIC	?empty@?$vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@stlp_std@@QBE_NXZ ; stlp_std::vector<collide::rq_result,xalloc<collide::rq_result> >::empty
PUBLIC	?back@?$_Impl_vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@priv@stlp_std@@QAEAAUrq_result@collide@@XZ ; stlp_std::priv::_Impl_vector<collide::rq_result,xalloc<collide::rq_result> >::back
PUBLIC	?to_value_type_ref@?$_CastTraits@Urq_result@collide@@U12@@priv@stlp_std@@SAAAUrq_result@collide@@AAU45@@Z ; stlp_std::priv::_CastTraits<collide::rq_result,collide::rq_result>::to_value_type_ref
PUBLIC	?back@?$vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@stlp_std@@QAEAAUrq_result@collide@@XZ ; stlp_std::vector<collide::rq_result,xalloc<collide::rq_result> >::back
PUBLIC	?_M_set@?$_Impl_vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@priv@stlp_std@@AAEXPAUrq_result@collide@@00@Z ; stlp_std::priv::_Impl_vector<collide::rq_result,xalloc<collide::rq_result> >::_M_set
PUBLIC	??$__fill_n@PAUrq_result@collide@@IU12@@priv@stlp_std@@YAPAUrq_result@collide@@PAU23@IABU23@@Z ; stlp_std::priv::__fill_n<collide::rq_result *,unsigned int,collide::rq_result>
PUBLIC	?_M_insert_overflow@?$_Impl_vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@priv@stlp_std@@AAEXPAUrq_result@collide@@ABU45@ABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<collide::rq_result,xalloc<collide::rq_result> >::_M_insert_overflow
PUBLIC	??$_Copy_Construct@Urq_result@collide@@@stlp_std@@YAXPAUrq_result@collide@@ABU12@@Z ; stlp_std::_Copy_Construct<collide::rq_result>
PUBLIC	?push_back@?$_Impl_vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@priv@stlp_std@@QAEXABUrq_result@collide@@@Z ; stlp_std::priv::_Impl_vector<collide::rq_result,xalloc<collide::rq_result> >::push_back
PUBLIC	?to_storage_type_cref@?$_CastTraits@Urq_result@collide@@U12@@priv@stlp_std@@SAABUrq_result@collide@@ABU45@@Z ; stlp_std::priv::_CastTraits<collide::rq_result,collide::rq_result>::to_storage_type_cref
PUBLIC	?push_back@?$vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@stlp_std@@QAEXABUrq_result@collide@@@Z ; stlp_std::vector<collide::rq_result,xalloc<collide::rq_result> >::push_back
PUBLIC	?append_result@rq_results@collide@@QAEHPAVCObject@@MHH@Z ; collide::rq_results::append_result
PUBLIC	??A?$_vector3@M@@QAEAAMH@Z			; _vector3<float>::operator[]
PUBLIC	?IR@?$_box3@M@@QAEAAIAAM@Z			; _box3<float>::IR
PUBLIC	?Pick2@?$_box3@M@@QAE?AW4ERP_Result@1@ABU?$_vector3@M@@0AAU3@@Z ; _box3<float>::Pick2
PUBLIC	?RAYvsOBB@@YA_NABU?$_matrix@M@@ABU?$_vector3@M@@11AAMH@Z ; RAYvsOBB
PUBLIC	?intersect@?$_sphere@M@@QBE?AW4ERP_Result@1@ABU?$_vector3@M@@0MAAHQAM@Z ; _sphere<float>::intersect
PUBLIC	?intersect@?$_sphere@M@@QBE?AW4ERP_Result@1@ABU?$_vector3@M@@0AAM@Z ; _sphere<float>::intersect
PUBLIC	?RAYvsSPHERE@@YA_NABU?$_sphere@M@@ABU?$_vector3@M@@1AAMH@Z ; RAYvsSPHERE
PUBLIC	?normalize_magn@?$_vector3@M@@QAEMXZ		; _vector3<float>::normalize_magn
PUBLIC	?generate_orthonormal_basis@?$_vector3@M@@SAXABU1@AAU1@1@Z ; _vector3<float>::generate_orthonormal_basis
PUBLIC	?intersect@?$_cylinder@M@@QBEHABU?$_vector3@M@@0QAMQAW4ecode@1@@Z ; _cylinder<float>::intersect
PUBLIC	?intersect@?$_cylinder@M@@QBE?AW4ERP_Result@1@ABU?$_vector3@M@@0AAM@Z ; _cylinder<float>::intersect
PUBLIC	?RAYvsCYLINDER@@YA_NABV?$_cylinder@M@@ABU?$_vector3@M@@1AAMH@Z ; RAYvsCYLINDER
PUBLIC	??$__distance@PAUSElement@CCF_Skeleton@@@stlp_std@@YAHABQAUSElement@CCF_Skeleton@@0ABUrandom_access_iterator_tag@0@@Z ; stlp_std::__distance<CCF_Skeleton::SElement *>
PUBLIC	??$distance@PAUSElement@CCF_Skeleton@@@stlp_std@@YAHPAUSElement@CCF_Skeleton@@0@Z ; stlp_std::distance<CCF_Skeleton::SElement *>
PUBLIC	??$__advance@PAUSElement@CCF_Skeleton@@H@stlp_std@@YAXAAPAUSElement@CCF_Skeleton@@HABUrandom_access_iterator_tag@0@@Z ; stlp_std::__advance<CCF_Skeleton::SElement *,int>
PUBLIC	??$advance@PAUSElement@CCF_Skeleton@@H@stlp_std@@YAXAAPAUSElement@CCF_Skeleton@@H@Z ; stlp_std::advance<CCF_Skeleton::SElement *,int>
PUBLIC	??$__lower_bound@PAUSElement@CCF_Skeleton@@GP6A_NABU12@G@ZP6A_N0G@ZH@priv@stlp_std@@YAPAUSElement@CCF_Skeleton@@PAU23@0ABGP6A_NABU23@G@Z3PAH@Z ; stlp_std::priv::__lower_bound<CCF_Skeleton::SElement *,unsigned short,bool (__cdecl*)(CCF_Skeleton::SElement const &,unsigned short),bool (__cdecl*)(CCF_Skeleton::SElement const &,unsigned short),int>
PUBLIC	??$lower_bound@PAUSElement@CCF_Skeleton@@GP6A_NABU12@G@Z@stlp_std@@YAPAUSElement@CCF_Skeleton@@PAU12@0ABGP6A_NABU12@G@Z@Z ; stlp_std::lower_bound<CCF_Skeleton::SElement *,unsigned short,bool (__cdecl*)(CCF_Skeleton::SElement const &,unsigned short)>
PUBLIC	?min@?$numeric_limits@M@stlp_std@@SAMXZ		; stlp_std::numeric_limits<float>::min
PUBLIC	?invert_b@?$_matrix@M@@QAE_NABU1@@Z		; _matrix<float>::invert_b
PUBLIC	?set@?$_box3@M@@QAEAAV1@ABV1@@Z			; _box3<float>::set
PUBLIC	?xform_get@?$_obb@M@@QBEXAAU?$_matrix@M@@@Z	; _obb<float>::xform_get
PUBLIC	?_M_set@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@AAEXPAUSElement@CCF_Skeleton@@00@Z ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_M_set
PUBLIC	??$__fill_n@PAUSElement@CCF_Skeleton@@IU12@@priv@stlp_std@@YAPAUSElement@CCF_Skeleton@@PAU23@IABU23@@Z ; stlp_std::priv::__fill_n<CCF_Skeleton::SElement *,unsigned int,CCF_Skeleton::SElement>
PUBLIC	?_M_insert_overflow@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@AAEXPAUSElement@CCF_Skeleton@@ABU45@ABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_M_insert_overflow
PUBLIC	??$_Copy_Construct@USElement@CCF_Skeleton@@@stlp_std@@YAXPAUSElement@CCF_Skeleton@@ABU12@@Z ; stlp_std::_Copy_Construct<CCF_Skeleton::SElement>
PUBLIC	?push_back@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEXABUSElement@CCF_Skeleton@@@Z ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::push_back
PUBLIC	?to_storage_type_cref@?$_CastTraits@USElement@CCF_Skeleton@@U12@@priv@stlp_std@@SAABUSElement@CCF_Skeleton@@ABU45@@Z ; stlp_std::priv::_CastTraits<CCF_Skeleton::SElement,CCF_Skeleton::SElement>::to_storage_type_cref
PUBLIC	?push_back@?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAEXABUSElement@CCF_Skeleton@@@Z ; stlp_std::vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::push_back
PUBLIC	?begin@?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAEPAUSElement@CCF_Skeleton@@XZ ; stlp_std::vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::begin
PUBLIC	?end@?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAEPAUSElement@CCF_Skeleton@@XZ ; stlp_std::vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::end
PUBLIC	??$__copy_ptrs@PAUSElement@CCF_Skeleton@@PAU12@@priv@stlp_std@@YAPAUSElement@CCF_Skeleton@@PAU23@00ABU__true_type@1@@Z ; stlp_std::priv::__copy_ptrs<CCF_Skeleton::SElement *,CCF_Skeleton::SElement *>
PUBLIC	?_M_erase@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@AAEPAUSElement@CCF_Skeleton@@PAU45@0ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_M_erase
PUBLIC	?erase@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEPAUSElement@CCF_Skeleton@@PAU45@0@Z ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::erase
PUBLIC	?to_value_type_ptr@?$_CastTraits@USElement@CCF_Skeleton@@U12@@priv@stlp_std@@SAPAUSElement@CCF_Skeleton@@PAU45@@Z ; stlp_std::priv::_CastTraits<CCF_Skeleton::SElement,CCF_Skeleton::SElement>::to_value_type_ptr
PUBLIC	?to_storage_type_ptr@?$_CastTraits@USElement@CCF_Skeleton@@U12@@priv@stlp_std@@SAPAUSElement@CCF_Skeleton@@PAU45@@Z ; stlp_std::priv::_CastTraits<CCF_Skeleton::SElement,CCF_Skeleton::SElement>::to_storage_type_ptr
PUBLIC	?erase@?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAEPAUSElement@CCF_Skeleton@@PAU34@0@Z ; stlp_std::vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::erase
PUBLIC	?clear_not_free@?$xr_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@@QAEXXZ ; xr_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::clear_not_free
PUBLIC	?is@?$_flags@G@@QBEHG@Z				; _flags<unsigned short>::is
PUBLIC	?average@?$_vector3@M@@QAEAAU1@ABU1@@Z		; _vector3<float>::average
PUBLIC	?grow@?$_box3@M@@QAEAAV1@M@Z			; _box3<float>::grow
PUBLIC	?square_magnitude@?$_vector3@M@@QBEMXZ		; _vector3<float>::square_magnitude
PUBLIC	?magnitude@?$_vector3@M@@QBEMXZ			; _vector3<float>::magnitude
PUBLIC	?set@?$_box3@M@@QAEAAV1@MMMMMM@Z		; _box3<float>::set
PUBLIC	??0?$xalloc@Ushape_def@CCF_Shape@@@@QAE@XZ	; xalloc<CCF_Shape::shape_def>::xalloc<CCF_Shape::shape_def>
PUBLIC	??0?$_Vector_base@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Ushape_def@CCF_Shape@@@@@Z ; stlp_std::priv::_Vector_base<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_Vector_base<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >
PUBLIC	??0?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Ushape_def@CCF_Shape@@@@@Z ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >
PUBLIC	??0?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QAE@ABV?$xalloc@Ushape_def@CCF_Shape@@@@@Z ; stlp_std::vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >
PUBLIC	??0?$xr_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@@QAE@XZ ; xr_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::xr_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >
PUBLIC	?set@?$_sphere@M@@QAEXABU1@@Z			; _sphere<float>::set
PUBLIC	?set@?$_matrix@M@@QAEAAU1@ABU1@@Z		; _matrix<float>::set
PUBLIC	?back@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEAAUshape_def@CCF_Shape@@XZ ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::back
PUBLIC	?to_value_type_ref@?$_CastTraits@Ushape_def@CCF_Shape@@U12@@priv@stlp_std@@SAAAUshape_def@CCF_Shape@@AAU45@@Z ; stlp_std::priv::_CastTraits<CCF_Shape::shape_def,CCF_Shape::shape_def>::to_value_type_ref
PUBLIC	?back@?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QAEAAUshape_def@CCF_Shape@@XZ ; stlp_std::vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::back
PUBLIC	?_M_set@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@AAEXPAUshape_def@CCF_Shape@@00@Z ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_M_set
PUBLIC	??$__fill_n@PAUshape_def@CCF_Shape@@IU12@@priv@stlp_std@@YAPAUshape_def@CCF_Shape@@PAU23@IABU23@@Z ; stlp_std::priv::__fill_n<CCF_Shape::shape_def *,unsigned int,CCF_Shape::shape_def>
PUBLIC	?_M_insert_overflow@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@AAEXPAUshape_def@CCF_Shape@@ABU45@ABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_M_insert_overflow
PUBLIC	??$_Copy_Construct@Ushape_def@CCF_Shape@@@stlp_std@@YAXPAUshape_def@CCF_Shape@@ABU12@@Z ; stlp_std::_Copy_Construct<CCF_Shape::shape_def>
PUBLIC	?push_back@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEXABUshape_def@CCF_Shape@@@Z ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::push_back
PUBLIC	?to_storage_type_cref@?$_CastTraits@Ushape_def@CCF_Shape@@U12@@priv@stlp_std@@SAABUshape_def@CCF_Shape@@ABU45@@Z ; stlp_std::priv::_CastTraits<CCF_Shape::shape_def,CCF_Shape::shape_def>::to_storage_type_cref
PUBLIC	?push_back@?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QAEXABUshape_def@CCF_Shape@@@Z ; stlp_std::vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::push_back
PUBLIC	?add@?$_vector3@M@@QAEAAU1@M@Z			; _vector3<float>::add
PUBLIC	?sub@?$_vector3@M@@QAEAAU1@M@Z			; _vector3<float>::sub
PUBLIC	?invalidate@?$_box3@M@@QAEAAV1@XZ		; _box3<float>::invalidate
PUBLIC	?min@?$_vector3@M@@QAEAAU1@ABU1@@Z		; _vector3<float>::min
PUBLIC	?max@?$_vector3@M@@QAEAAU1@ABU1@@Z		; _vector3<float>::max
PUBLIC	?modify@?$_box3@M@@QAEAAV1@ABU?$_vector3@M@@@Z	; _box3<float>::modify
PUBLIC	?getsphere@?$_box3@M@@QBEABV1@AAU?$_vector3@M@@AAM@Z ; _box3<float>::getsphere
PUBLIC	?transform_tiny@?$_matrix@M@@QBEXAAU?$_vector3@M@@@Z ; _matrix<float>::transform_tiny
PUBLIC	?build@?$_plane@M@@QAEAAV1@ABU?$_vector3@M@@00@Z ; _plane<float>::build
PUBLIC	?intersect@?$_sphere@M@@QBEHABU1@@Z		; _sphere<float>::intersect
PUBLIC	?size@?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QBEIXZ ; stlp_std::vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::size
PUBLIC	?size@?$xr_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@@QBEIXZ ; xr_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::size
PUBLIC	?to_value_type_ptr@?$_CastTraits@Ushape_def@CCF_Shape@@U12@@priv@stlp_std@@SAPAUshape_def@CCF_Shape@@PAU45@@Z ; stlp_std::priv::_CastTraits<CCF_Shape::shape_def,CCF_Shape::shape_def>::to_value_type_ptr
PUBLIC	?begin@?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QAEPAUshape_def@CCF_Shape@@XZ ; stlp_std::vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::begin
PUBLIC	??A?$xr_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@@QAEAAUshape_def@CCF_Shape@@I@Z ; xr_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::operator[]
PUBLIC	??_C@_0CN@CEENEOHL@?$CB?5ERROR?3?5invalid?5bone?5xform?5?4?5Bo@ ; `string'
PUBLIC	??_C@_0CL@LPIDHOGD@?$CB?5ERROR?3?5bone_id?$DN?$FL?$CFd?$FN?0?5world_pos@ ; `string'
PUBLIC	??_C@_0P@NKBIFLEF@visual?5name?5?$CFs?$AA@	; `string'
PUBLIC	??_C@_0P@PEKPNBJL@object?5name?5?$CFs?$AA@	; `string'
;	COMDAT ??_C@_0P@PEKPNBJL@object?5name?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0P@PEKPNBJL@object?5name?5?$CFs?$AA@ DB 'object name %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NKBIFLEF@visual?5name?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0P@NKBIFLEF@visual?5name?5?$CFs?$AA@ DB 'visual name %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@LPIDHOGD@?$CB?5ERROR?3?5bone_id?$DN?$FL?$CFd?$FN?0?5world_pos@
CONST	SEGMENT
??_C@_0CL@LPIDHOGD@?$CB?5ERROR?3?5bone_id?$DN?$FL?$CFd?$FN?0?5world_pos@ DB '!'
	DB	' ERROR: bone_id=[%d], world_pos[%f,%f,%f]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@CEENEOHL@?$CB?5ERROR?3?5invalid?5bone?5xform?5?4?5Bo@
CONST	SEGMENT
??_C@_0CN@CEENEOHL@?$CB?5ERROR?3?5invalid?5bone?5xform?5?4?5Bo@ DB '! ERR'
	DB	'OR: invalid bone xform . Bone disabled.', 00H ; `string'
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_vector3d.h
;	COMDAT ?square_magnitude@?$_vector3@M@@QBEMXZ
_TEXT	SEGMENT
?square_magnitude@?$_vector3@M@@QBEMXZ PROC		; _vector3<float>::square_magnitude, COMDAT
; _this$ = eax

; 167  : 		return x*x + y*y + z*z;

	movss	xmm3, DWORD PTR [eax]
	movss	xmm2, DWORD PTR [eax+4]
	movss	xmm1, DWORD PTR [eax+8]
	movaps	xmm0, xmm3
	mulss	xmm0, xmm3
	movaps	xmm3, xmm2
	mulss	xmm3, xmm2
	movaps	xmm2, xmm1
	addss	xmm0, xmm3
	mulss	xmm2, xmm1
	addss	xmm0, xmm2

; 168  : 	}

	ret	0
?square_magnitude@?$_vector3@M@@QBEMXZ ENDP		; _vector3<float>::square_magnitude
_TEXT	ENDS
PUBLIC	__real@00800000
;	COMDAT __real@00800000
; File d:\clearsky\sources\sdk\include\stlport\stl\_limits.h
CONST	SEGMENT
__real@00800000 DD 000800000r			; 1.17549e-038
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?min@?$numeric_limits@M@stlp_std@@SAMXZ
_TEXT	SEGMENT
?min@?$numeric_limits@M@stlp_std@@SAMXZ PROC		; stlp_std::numeric_limits<float>::min, COMDAT

; 464  :   static float (_STLP_CALL min) () _STLP_NOTHROW { return FLT_MIN; }

	movss	xmm0, DWORD PTR __real@00800000
	ret	0
?min@?$numeric_limits@M@stlp_std@@SAMXZ ENDP		; stlp_std::numeric_limits<float>::min
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_iterator_base.h
_TEXT	ENDS
;	COMDAT ??$__advance@PAUSElement@CCF_Skeleton@@H@stlp_std@@YAXAAPAUSElement@CCF_Skeleton@@HABUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
??$__advance@PAUSElement@CCF_Skeleton@@H@stlp_std@@YAXAAPAUSElement@CCF_Skeleton@@HABUrandom_access_iterator_tag@0@@Z PROC ; stlp_std::__advance<CCF_Skeleton::SElement *,int>, COMDAT
; ___i$ = ecx
; ___n$ = eax

; 522  :   __i += __n;

	lea	eax, DWORD PTR [eax+eax*4]
	shl	eax, 4
	add	DWORD PTR [ecx], eax

; 523  : }

	ret	0
??$__advance@PAUSElement@CCF_Skeleton@@H@stlp_std@@YAXAAPAUSElement@CCF_Skeleton@@HABUrandom_access_iterator_tag@0@@Z ENDP ; stlp_std::__advance<CCF_Skeleton::SElement *,int>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__distance@PAUSElement@CCF_Skeleton@@@stlp_std@@YAHABQAUSElement@CCF_Skeleton@@0ABUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
??$__distance@PAUSElement@CCF_Skeleton@@@stlp_std@@YAHABQAUSElement@CCF_Skeleton@@0ABUrandom_access_iterator_tag@0@@Z PROC ; stlp_std::__distance<CCF_Skeleton::SElement *>, COMDAT
; ___first$ = edx
; ___last$ = eax

; 372  :   return __last - __first;

	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR [edx]
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx

; 373  : }

	ret	0
??$__distance@PAUSElement@CCF_Skeleton@@@stlp_std@@YAHABQAUSElement@CCF_Skeleton@@0ABUrandom_access_iterator_tag@0@@Z ENDP ; stlp_std::__distance<CCF_Skeleton::SElement *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$advance@PAUSElement@CCF_Skeleton@@H@stlp_std@@YAXAAPAUSElement@CCF_Skeleton@@H@Z
_TEXT	SEGMENT
??$advance@PAUSElement@CCF_Skeleton@@H@stlp_std@@YAXAAPAUSElement@CCF_Skeleton@@H@Z PROC ; stlp_std::advance<CCF_Skeleton::SElement *,int>, COMDAT
; ___i$ = ecx
; ___n$ = eax

; 527  :   __advance(__i, __n, _STLP_ITERATOR_CATEGORY(__i, _InputIterator));

	lea	eax, DWORD PTR [eax+eax*4]
	shl	eax, 4
	add	DWORD PTR [ecx], eax

; 528  : }

	ret	0
??$advance@PAUSElement@CCF_Skeleton@@H@stlp_std@@YAXAAPAUSElement@CCF_Skeleton@@H@Z ENDP ; stlp_std::advance<CCF_Skeleton::SElement *,int>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$distance@PAUSElement@CCF_Skeleton@@@stlp_std@@YAHPAUSElement@CCF_Skeleton@@0@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
??$distance@PAUSElement@CCF_Skeleton@@@stlp_std@@YAHPAUSElement@CCF_Skeleton@@0@Z PROC ; stlp_std::distance<CCF_Skeleton::SElement *>, COMDAT
; ___last$ = eax

; 378  :   return __distance(__first, __last, _STLP_ITERATOR_CATEGORY(__first, _InputIterator));

	sub	eax, DWORD PTR ___first$[esp-4]
	mov	ecx, eax
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx

; 379  : }

	ret	0
??$distance@PAUSElement@CCF_Skeleton@@@stlp_std@@YAHPAUSElement@CCF_Skeleton@@0@Z ENDP ; stlp_std::distance<CCF_Skeleton::SElement *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.c
_TEXT	ENDS
;	COMDAT ??$__lower_bound@PAUSElement@CCF_Skeleton@@GP6A_NABU12@G@ZP6A_N0G@ZH@priv@stlp_std@@YAPAUSElement@CCF_Skeleton@@PAU23@0ABGP6A_NABU23@G@Z3PAH@Z
_TEXT	SEGMENT
___val$ = 8						; size = 4
??$__lower_bound@PAUSElement@CCF_Skeleton@@GP6A_NABU12@G@ZP6A_N0G@ZH@priv@stlp_std@@YAPAUSElement@CCF_Skeleton@@PAU23@0ABGP6A_NABU23@G@Z3PAH@Z PROC ; stlp_std::priv::__lower_bound<CCF_Skeleton::SElement *,unsigned short,bool (__cdecl*)(CCF_Skeleton::SElement const &,unsigned short),bool (__cdecl*)(CCF_Skeleton::SElement const &,unsigned short),int>, COMDAT
; ___first$ = ecx
; ___last$ = eax

; 374  :                            _Compare1 __comp1, _Compare2 __comp2, _Distance*) {

	push	esi
	mov	esi, ecx

; 375  :   _Distance __len = distance(__first, __last);

	sub	eax, esi
	mov	ecx, eax
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 5
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	add	ecx, edx

; 376  :   _Distance __half;
; 377  :   _ForwardIter __middle;
; 378  : 
; 379  :   while (__len > 0) {

	test	ecx, ecx
	jle	SHORT $LN18@lower_boun
	mov	eax, DWORD PTR ___val$[esp]
	push	edi
	movzx	edi, WORD PTR [eax]
$LL4@lower_boun:

; 380  :     __half = __len >> 1;

	mov	eax, ecx
	sar	eax, 1

; 381  :     __middle = __first;
; 382  :     advance(__middle, __half);

	lea	edx, DWORD PTR [eax+eax*4]
	shl	edx, 4
	add	edx, esi

; 383  :     if (__comp1(*__middle, __val)) {

	cmp	WORD PTR [edx+78], di
	jae	SHORT $LN2@lower_boun

; 384  :       _STLP_VERBOSE_ASSERT(!__comp2(__val, *__middle), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 385  :       __first = __middle;
; 386  :       ++__first;

	lea	esi, DWORD PTR [edx+80]

; 387  :       __len = __len - __half - 1;

	or	edx, -1
	sub	edx, eax
	add	ecx, edx

; 388  :     }
; 389  :     else

	jmp	SHORT $LN1@lower_boun
$LN2@lower_boun:

; 390  :       __len = __half;

	mov	ecx, eax
$LN1@lower_boun:

; 376  :   _Distance __half;
; 377  :   _ForwardIter __middle;
; 378  : 
; 379  :   while (__len > 0) {

	test	ecx, ecx
	jg	SHORT $LL4@lower_boun
	pop	edi
$LN18@lower_boun:

; 391  :   }
; 392  :   return __first;

	mov	eax, esi
	pop	esi

; 393  : }

	ret	0
??$__lower_bound@PAUSElement@CCF_Skeleton@@GP6A_NABU12@G@ZP6A_N0G@ZH@priv@stlp_std@@YAPAUSElement@CCF_Skeleton@@PAU23@0ABGP6A_NABU23@G@Z3PAH@Z ENDP ; stlp_std::priv::__lower_bound<CCF_Skeleton::SElement *,unsigned short,bool (__cdecl*)(CCF_Skeleton::SElement const &,unsigned short),bool (__cdecl*)(CCF_Skeleton::SElement const &,unsigned short),int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__fill_n@PAUshape_def@CCF_Shape@@IU12@@priv@stlp_std@@YAPAUshape_def@CCF_Shape@@PAU23@IABU23@@Z
_TEXT	SEGMENT
??$__fill_n@PAUshape_def@CCF_Shape@@IU12@@priv@stlp_std@@YAPAUshape_def@CCF_Shape@@PAU23@IABU23@@Z PROC ; stlp_std::priv::__fill_n<CCF_Shape::shape_def *,unsigned int,CCF_Shape::shape_def>, COMDAT
; ___first$ = eax
; ___n$ = edx
; ___val$ = ebx

; 403  :   _STLP_FIX_LITERAL_BUG(__first)
; 404  :   for ( ; __n > 0; --__n, ++__first)

	test	edx, edx
	jbe	SHORT $LN1@fill_n@9
	push	esi
	push	edi
$LL3@fill_n@9:

; 405  :     *__first = __val;

	mov	edi, eax
	sub	edx, 1
	mov	ecx, 33					; 00000021H
	mov	esi, ebx
	add	eax, 132				; 00000084H
	test	edx, edx
	rep movsd
	ja	SHORT $LL3@fill_n@9
	pop	edi
	pop	esi
$LN1@fill_n@9:

; 406  :   return __first;
; 407  : }

	ret	0
??$__fill_n@PAUshape_def@CCF_Shape@@IU12@@priv@stlp_std@@YAPAUshape_def@CCF_Shape@@PAU23@IABU23@@Z ENDP ; stlp_std::priv::__fill_n<CCF_Shape::shape_def *,unsigned int,CCF_Shape::shape_def>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__fill_n@PAUSElement@CCF_Skeleton@@IU12@@priv@stlp_std@@YAPAUSElement@CCF_Skeleton@@PAU23@IABU23@@Z
_TEXT	SEGMENT
??$__fill_n@PAUSElement@CCF_Skeleton@@IU12@@priv@stlp_std@@YAPAUSElement@CCF_Skeleton@@PAU23@IABU23@@Z PROC ; stlp_std::priv::__fill_n<CCF_Skeleton::SElement *,unsigned int,CCF_Skeleton::SElement>, COMDAT
; ___first$ = eax
; ___n$ = edx
; ___val$ = ebx

; 403  :   _STLP_FIX_LITERAL_BUG(__first)
; 404  :   for ( ; __n > 0; --__n, ++__first)

	test	edx, edx
	jbe	SHORT $LN1@fill_n@10
	push	esi
	push	edi
$LL3@fill_n@10:

; 405  :     *__first = __val;

	mov	edi, eax
	sub	edx, 1
	mov	ecx, 20					; 00000014H
	mov	esi, ebx
	add	eax, 80					; 00000050H
	test	edx, edx
	rep movsd
	ja	SHORT $LL3@fill_n@10
	pop	edi
	pop	esi
$LN1@fill_n@10:

; 406  :   return __first;
; 407  : }

	ret	0
??$__fill_n@PAUSElement@CCF_Skeleton@@IU12@@priv@stlp_std@@YAPAUSElement@CCF_Skeleton@@PAU23@IABU23@@Z ENDP ; stlp_std::priv::__fill_n<CCF_Skeleton::SElement *,unsigned int,CCF_Skeleton::SElement>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__fill_n@PAUrq_result@collide@@IU12@@priv@stlp_std@@YAPAUrq_result@collide@@PAU23@IABU23@@Z
_TEXT	SEGMENT
??$__fill_n@PAUrq_result@collide@@IU12@@priv@stlp_std@@YAPAUrq_result@collide@@PAU23@IABU23@@Z PROC ; stlp_std::priv::__fill_n<collide::rq_result *,unsigned int,collide::rq_result>, COMDAT
; ___first$ = eax
; ___n$ = edx
; ___val$ = ecx

; 403  :   _STLP_FIX_LITERAL_BUG(__first)
; 404  :   for ( ; __n > 0; --__n, ++__first)

	test	edx, edx
	jbe	SHORT $LN1@fill_n@11
	push	esi
$LL3@fill_n@11:

; 405  :     *__first = __val;

	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	mov	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], esi
	sub	edx, 1
	add	eax, 12					; 0000000cH
	test	edx, edx
	ja	SHORT $LL3@fill_n@11
	pop	esi
$LN1@fill_n@11:

; 406  :   return __first;
; 407  : }

	ret	0
??$__fill_n@PAUrq_result@collide@@IU12@@priv@stlp_std@@YAPAUrq_result@collide@@PAU23@IABU23@@Z ENDP ; stlp_std::priv::__fill_n<collide::rq_result *,unsigned int,collide::rq_result>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?_M_set@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@AAEXPAUshape_def@CCF_Shape@@00@Z
_TEXT	SEGMENT
___e$ = 8						; size = 4
?_M_set@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@AAEXPAUshape_def@CCF_Shape@@00@Z PROC ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_M_set, COMDAT
; _this$ = eax
; ___s$ = ecx
; ___f$ = edx

; 626  :     this->_M_start = __s;

	mov	DWORD PTR [eax], ecx

; 627  :     this->_M_finish = __f;
; 628  :     this->_M_end_of_storage._M_data = __e;

	mov	ecx, DWORD PTR ___e$[esp-4]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx

; 629  :   }

	ret	4
?_M_set@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@AAEXPAUshape_def@CCF_Shape@@00@Z ENDP ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_M_set
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_set@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@AAEXPAUSElement@CCF_Skeleton@@00@Z
_TEXT	SEGMENT
___e$ = 8						; size = 4
?_M_set@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@AAEXPAUSElement@CCF_Skeleton@@00@Z PROC ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_M_set, COMDAT
; _this$ = eax
; ___s$ = ecx
; ___f$ = edx

; 626  :     this->_M_start = __s;

	mov	DWORD PTR [eax], ecx

; 627  :     this->_M_finish = __f;
; 628  :     this->_M_end_of_storage._M_data = __e;

	mov	ecx, DWORD PTR ___e$[esp-4]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx

; 629  :   }

	ret	4
?_M_set@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@AAEXPAUSElement@CCF_Skeleton@@00@Z ENDP ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_M_set
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_set@?$_Impl_vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@priv@stlp_std@@AAEXPAUrq_result@collide@@00@Z
_TEXT	SEGMENT
___e$ = 8						; size = 4
?_M_set@?$_Impl_vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@priv@stlp_std@@AAEXPAUrq_result@collide@@00@Z PROC ; stlp_std::priv::_Impl_vector<collide::rq_result,xalloc<collide::rq_result> >::_M_set, COMDAT
; _this$ = eax
; ___s$ = ecx
; ___f$ = edx

; 626  :     this->_M_start = __s;

	mov	DWORD PTR [eax], ecx

; 627  :     this->_M_finish = __f;
; 628  :     this->_M_end_of_storage._M_data = __e;

	mov	ecx, DWORD PTR ___e$[esp-4]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx

; 629  :   }

	ret	4
?_M_set@?$_Impl_vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@priv@stlp_std@@AAEXPAUrq_result@collide@@00@Z ENDP ; stlp_std::priv::_Impl_vector<collide::rq_result,xalloc<collide::rq_result> >::_M_set
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.h
_TEXT	ENDS
;	COMDAT ??$lower_bound@PAUSElement@CCF_Skeleton@@GP6A_NABU12@G@Z@stlp_std@@YAPAUSElement@CCF_Skeleton@@PAU12@0ABGP6A_NABU12@G@Z@Z
_TEXT	SEGMENT
___last$ = 8						; size = 4
??$lower_bound@PAUSElement@CCF_Skeleton@@GP6A_NABU12@G@Z@stlp_std@@YAPAUSElement@CCF_Skeleton@@PAU12@0ABGP6A_NABU12@G@Z@Z PROC ; stlp_std::lower_bound<CCF_Skeleton::SElement *,unsigned short,bool (__cdecl*)(CCF_Skeleton::SElement const &,unsigned short)>, COMDAT
; ___first$ = ecx
; ___val$ = eax

; 508  :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__first, __last))
; 509  :   return _STLP_PRIV __lower_bound(__first, __last, __val, __comp, __comp,
; 510  :                                   _STLP_DISTANCE_TYPE(__first, _ForwardIter));

	push	eax
	mov	eax, DWORD PTR ___last$[esp]
	call	??$__lower_bound@PAUSElement@CCF_Skeleton@@GP6A_NABU12@G@ZP6A_N0G@ZH@priv@stlp_std@@YAPAUSElement@CCF_Skeleton@@PAU23@0ABGP6A_NABU23@G@Z3PAH@Z ; stlp_std::priv::__lower_bound<CCF_Skeleton::SElement *,unsigned short,bool (__cdecl*)(CCF_Skeleton::SElement const &,unsigned short),bool (__cdecl*)(CCF_Skeleton::SElement const &,unsigned short),int>
	add	esp, 4

; 511  : }

	ret	0
??$lower_bound@PAUSElement@CCF_Skeleton@@GP6A_NABU12@G@Z@stlp_std@@YAPAUSElement@CCF_Skeleton@@PAU12@0ABGP6A_NABU12@G@Z@Z ENDP ; stlp_std::lower_bound<CCF_Skeleton::SElement *,unsigned short,bool (__cdecl*)(CCF_Skeleton::SElement const &,unsigned short)>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_tools.h
_TEXT	ENDS
;	COMDAT ?to_value_type_ptr@?$_CastTraits@Ushape_def@CCF_Shape@@U12@@priv@stlp_std@@SAPAUshape_def@CCF_Shape@@PAU45@@Z
_TEXT	SEGMENT
?to_value_type_ptr@?$_CastTraits@Ushape_def@CCF_Shape@@U12@@priv@stlp_std@@SAPAUshape_def@CCF_Shape@@PAU45@@Z PROC ; stlp_std::priv::_CastTraits<CCF_Shape::shape_def,CCF_Shape::shape_def>::to_value_type_ptr, COMDAT
; ___ptr$ = eax

; 237  :   { return __ptr; }

	ret	0
?to_value_type_ptr@?$_CastTraits@Ushape_def@CCF_Shape@@U12@@priv@stlp_std@@SAPAUshape_def@CCF_Shape@@PAU45@@Z ENDP ; stlp_std::priv::_CastTraits<CCF_Shape::shape_def,CCF_Shape::shape_def>::to_value_type_ptr
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_storage_type_ptr@?$_CastTraits@USElement@CCF_Skeleton@@U12@@priv@stlp_std@@SAPAUSElement@CCF_Skeleton@@PAU45@@Z
_TEXT	SEGMENT
?to_storage_type_ptr@?$_CastTraits@USElement@CCF_Skeleton@@U12@@priv@stlp_std@@SAPAUSElement@CCF_Skeleton@@PAU45@@Z PROC ; stlp_std::priv::_CastTraits<CCF_Skeleton::SElement,CCF_Skeleton::SElement>::to_storage_type_ptr, COMDAT
; ___ptr$ = eax

; 248  :   { return __ptr; }

	ret	0
?to_storage_type_ptr@?$_CastTraits@USElement@CCF_Skeleton@@U12@@priv@stlp_std@@SAPAUSElement@CCF_Skeleton@@PAU45@@Z ENDP ; stlp_std::priv::_CastTraits<CCF_Skeleton::SElement,CCF_Skeleton::SElement>::to_storage_type_ptr
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_storage_type_cref@?$_CastTraits@Ushape_def@CCF_Shape@@U12@@priv@stlp_std@@SAABUshape_def@CCF_Shape@@ABU45@@Z
_TEXT	SEGMENT
?to_storage_type_cref@?$_CastTraits@Ushape_def@CCF_Shape@@U12@@priv@stlp_std@@SAABUshape_def@CCF_Shape@@ABU45@@Z PROC ; stlp_std::priv::_CastTraits<CCF_Shape::shape_def,CCF_Shape::shape_def>::to_storage_type_cref, COMDAT
; ___ref$ = eax

; 254  :   { return __ref; }

	ret	0
?to_storage_type_cref@?$_CastTraits@Ushape_def@CCF_Shape@@U12@@priv@stlp_std@@SAABUshape_def@CCF_Shape@@ABU45@@Z ENDP ; stlp_std::priv::_CastTraits<CCF_Shape::shape_def,CCF_Shape::shape_def>::to_storage_type_cref
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_value_type_ref@?$_CastTraits@Ushape_def@CCF_Shape@@U12@@priv@stlp_std@@SAAAUshape_def@CCF_Shape@@AAU45@@Z
_TEXT	SEGMENT
?to_value_type_ref@?$_CastTraits@Ushape_def@CCF_Shape@@U12@@priv@stlp_std@@SAAAUshape_def@CCF_Shape@@AAU45@@Z PROC ; stlp_std::priv::_CastTraits<CCF_Shape::shape_def,CCF_Shape::shape_def>::to_value_type_ref, COMDAT
; ___ref$ = eax

; 243  :   { return __ref; }

	ret	0
?to_value_type_ref@?$_CastTraits@Ushape_def@CCF_Shape@@U12@@priv@stlp_std@@SAAAUshape_def@CCF_Shape@@AAU45@@Z ENDP ; stlp_std::priv::_CastTraits<CCF_Shape::shape_def,CCF_Shape::shape_def>::to_value_type_ref
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_storage_type_cref@?$_CastTraits@USElement@CCF_Skeleton@@U12@@priv@stlp_std@@SAABUSElement@CCF_Skeleton@@ABU45@@Z
_TEXT	SEGMENT
?to_storage_type_cref@?$_CastTraits@USElement@CCF_Skeleton@@U12@@priv@stlp_std@@SAABUSElement@CCF_Skeleton@@ABU45@@Z PROC ; stlp_std::priv::_CastTraits<CCF_Skeleton::SElement,CCF_Skeleton::SElement>::to_storage_type_cref, COMDAT
; ___ref$ = eax

; 254  :   { return __ref; }

	ret	0
?to_storage_type_cref@?$_CastTraits@USElement@CCF_Skeleton@@U12@@priv@stlp_std@@SAABUSElement@CCF_Skeleton@@ABU45@@Z ENDP ; stlp_std::priv::_CastTraits<CCF_Skeleton::SElement,CCF_Skeleton::SElement>::to_storage_type_cref
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_value_type_ptr@?$_CastTraits@USElement@CCF_Skeleton@@U12@@priv@stlp_std@@SAPAUSElement@CCF_Skeleton@@PAU45@@Z
_TEXT	SEGMENT
?to_value_type_ptr@?$_CastTraits@USElement@CCF_Skeleton@@U12@@priv@stlp_std@@SAPAUSElement@CCF_Skeleton@@PAU45@@Z PROC ; stlp_std::priv::_CastTraits<CCF_Skeleton::SElement,CCF_Skeleton::SElement>::to_value_type_ptr, COMDAT
; ___ptr$ = eax

; 237  :   { return __ptr; }

	ret	0
?to_value_type_ptr@?$_CastTraits@USElement@CCF_Skeleton@@U12@@priv@stlp_std@@SAPAUSElement@CCF_Skeleton@@PAU45@@Z ENDP ; stlp_std::priv::_CastTraits<CCF_Skeleton::SElement,CCF_Skeleton::SElement>::to_value_type_ptr
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_storage_type_cref@?$_CastTraits@Urq_result@collide@@U12@@priv@stlp_std@@SAABUrq_result@collide@@ABU45@@Z
_TEXT	SEGMENT
?to_storage_type_cref@?$_CastTraits@Urq_result@collide@@U12@@priv@stlp_std@@SAABUrq_result@collide@@ABU45@@Z PROC ; stlp_std::priv::_CastTraits<collide::rq_result,collide::rq_result>::to_storage_type_cref, COMDAT
; ___ref$ = eax

; 254  :   { return __ref; }

	ret	0
?to_storage_type_cref@?$_CastTraits@Urq_result@collide@@U12@@priv@stlp_std@@SAABUrq_result@collide@@ABU45@@Z ENDP ; stlp_std::priv::_CastTraits<collide::rq_result,collide::rq_result>::to_storage_type_cref
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_value_type_ref@?$_CastTraits@Urq_result@collide@@U12@@priv@stlp_std@@SAAAUrq_result@collide@@AAU45@@Z
_TEXT	SEGMENT
?to_value_type_ref@?$_CastTraits@Urq_result@collide@@U12@@priv@stlp_std@@SAAAUrq_result@collide@@AAU45@@Z PROC ; stlp_std::priv::_CastTraits<collide::rq_result,collide::rq_result>::to_value_type_ref, COMDAT
; ___ref$ = eax

; 243  :   { return __ref; }

	ret	0
?to_value_type_ref@?$_CastTraits@Urq_result@collide@@U12@@priv@stlp_std@@SAAAUrq_result@collide@@AAU45@@Z ENDP ; stlp_std::priv::_CastTraits<collide::rq_result,collide::rq_result>::to_value_type_ref
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xalloc@Ushape_def@CCF_Shape@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xalloc@Ushape_def@CCF_Shape@@@@QAE@XZ PROC		; xalloc<CCF_Shape::shape_def>::xalloc<CCF_Shape::shape_def>, COMDAT
; _this$ = eax

; 77   : 													xalloc			()										{	}

	ret	0
??0?$xalloc@Ushape_def@CCF_Shape@@@@QAE@XZ ENDP		; xalloc<CCF_Shape::shape_def>::xalloc<CCF_Shape::shape_def>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$xalloc@USElement@CCF_Skeleton@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xalloc@USElement@CCF_Skeleton@@@@QAE@XZ PROC	; xalloc<CCF_Skeleton::SElement>::xalloc<CCF_Skeleton::SElement>, COMDAT
; _this$ = eax

; 77   : 													xalloc			()										{	}

	ret	0
??0?$xalloc@USElement@CCF_Skeleton@@@@QAE@XZ ENDP	; xalloc<CCF_Skeleton::SElement>::xalloc<CCF_Skeleton::SElement>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_fbox.h
_TEXT	ENDS
;	COMDAT ?IR@?$_box3@M@@QAEAAIAAM@Z
_TEXT	SEGMENT
?IR@?$_box3@M@@QAEAAIAAM@Z PROC				; _box3<float>::IR, COMDAT
; _x$ = eax

; 194  : 	IC u32& IR(T &x) { return (u32&)x; }

	ret	0
?IR@?$_box3@M@@QAEAAIAAM@Z ENDP				; _box3<float>::IR
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?empty@?$_Impl_vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@priv@stlp_std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$_Impl_vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@priv@stlp_std@@QBE_NXZ PROC ; stlp_std::priv::_Impl_vector<collide::rq_result,xalloc<collide::rq_result> >::empty, COMDAT
; _this$ = eax

; 188  :   bool empty() const            { return this->_M_start == this->_M_finish; }

	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	sete	dl
	mov	al, dl
	ret	0
?empty@?$_Impl_vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@priv@stlp_std@@QBE_NXZ ENDP ; stlp_std::priv::_Impl_vector<collide::rq_result,xalloc<collide::rq_result> >::empty
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_vector3d.h
_TEXT	ENDS
;	COMDAT ??A?$_vector3@M@@QAEAAMH@Z
_TEXT	SEGMENT
??A?$_vector3@M@@QAEAAMH@Z PROC				; _vector3<float>::operator[], COMDAT
; _this$ = eax
; _i$ = ecx

; 20   : 	ICF	T&			operator[] (int i)					{ return *((T*)this + i); }

	lea	eax, DWORD PTR [eax+ecx*4]
	ret	0
??A?$_vector3@M@@QAEAAMH@Z ENDP				; _vector3<float>::operator[]
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_flags.h
_TEXT	ENDS
;	COMDAT ?is@?$_flags@G@@QBEHG@Z
_TEXT	SEGMENT
?is@?$_flags@G@@QBEHG@Z PROC				; _flags<unsigned short>::is, COMDAT
; _this$ = eax

; 23   : 	IC 	BOOL	is		(const T mask)						const	{ return mask==(flags&mask);			}

	mov	al, BYTE PTR [eax]
	and	al, 1
	sub	al, 1
	neg	al
	sbb	eax, eax
	add	eax, 1
	ret	0
?is@?$_flags@G@@QBEHG@Z ENDP				; _flags<unsigned short>::is
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?empty@?$vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@stlp_std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@stlp_std@@QBE_NXZ PROC ; stlp_std::vector<collide::rq_result,xalloc<collide::rq_result> >::empty, COMDAT
; _this$ = eax

; 93   :   bool empty() const            { return _M_impl.empty(); }

	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	sete	dl
	mov	al, dl
	ret	0
?empty@?$vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@stlp_std@@QBE_NXZ ENDP ; stlp_std::vector<collide::rq_result,xalloc<collide::rq_result> >::empty
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_vector3d.h
_TEXT	ENDS
;	COMDAT ?average@?$_vector3@M@@QAEAAU1@ABU1@@Z
_TEXT	SEGMENT
?average@?$_vector3@M@@QAEAAU1@ABU1@@Z PROC		; _vector3<float>::average, COMDAT
; _this$ = eax
; _p$ = ecx

; 113  : 		x = (x+p.x)*0.5f;

	movss	xmm1, DWORD PTR [ecx]
	addss	xmm1, DWORD PTR [eax]
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm1, xmm0
	movss	DWORD PTR [eax], xmm1

; 114  : 		y = (y+p.y)*0.5f;

	movss	xmm1, DWORD PTR [ecx+4]
	addss	xmm1, DWORD PTR [eax+4]
	mulss	xmm1, xmm0
	movss	DWORD PTR [eax+4], xmm1

; 115  : 		z = (z+p.z)*0.5f;

	movss	xmm1, DWORD PTR [ecx+8]
	addss	xmm1, DWORD PTR [eax+8]
	mulss	xmm1, xmm0
	movss	DWORD PTR [eax+8], xmm1

; 116  : 		return *this;	
; 117  : 	}

	ret	0
?average@?$_vector3@M@@QAEAAU1@ABU1@@Z ENDP		; _vector3<float>::average
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?sub@?$_vector3@M@@QAEAAU1@M@Z
_TEXT	SEGMENT
?sub@?$_vector3@M@@QAEAAU1@M@Z PROC			; _vector3<float>::sub, COMDAT
; _this$ = eax
; _s$ = xmm0s

; 35   : 	ICF SelfRef	sub(T s)								{ x-=s;		y-=s;		z-=s;			return *this;	};

	movss	xmm1, DWORD PTR [eax]
	subss	xmm1, xmm0
	movss	DWORD PTR [eax], xmm1
	movss	xmm1, DWORD PTR [eax+4]
	subss	xmm1, xmm0
	movss	DWORD PTR [eax+4], xmm1
	movss	xmm1, DWORD PTR [eax+8]
	subss	xmm1, xmm0
	movss	DWORD PTR [eax+8], xmm1
	ret	0
?sub@?$_vector3@M@@QAEAAU1@M@Z ENDP			; _vector3<float>::sub
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?add@?$_vector3@M@@QAEAAU1@M@Z
_TEXT	SEGMENT
?add@?$_vector3@M@@QAEAAU1@M@Z PROC			; _vector3<float>::add, COMDAT
; _this$ = eax
; _s$ = xmm0s

; 30   : 	ICF SelfRef	add(T s)								{ x+=s;		y+=s;		z+=s;			return *this;	};

	movss	xmm1, DWORD PTR [eax]
	addss	xmm1, xmm0
	movss	DWORD PTR [eax], xmm1
	movss	xmm1, DWORD PTR [eax+4]
	addss	xmm1, xmm0
	movss	DWORD PTR [eax+4], xmm1
	movss	xmm1, DWORD PTR [eax+8]
	addss	xmm1, xmm0
	movss	DWORD PTR [eax+8], xmm1
	ret	0
?add@?$_vector3@M@@QAEAAU1@M@Z ENDP			; _vector3<float>::add
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\xr_collide_form.cpp
_TEXT	ENDS
;	COMDAT ?_RayQuery@CCF_EventBox@@UAEHABUray_defs@collide@@AAVrq_results@3@@Z
_TEXT	SEGMENT
_Q$ = 8							; size = 4
_R$ = 12						; size = 4
?_RayQuery@CCF_EventBox@@UAEHABUray_defs@collide@@AAVrq_results@3@@Z PROC ; CCF_EventBox::_RayQuery, COMDAT
; _this$ = ecx

; 304  : {	return FALSE; }

	xor	eax, eax
	ret	8
?_RayQuery@CCF_EventBox@@UAEHABUray_defs@collide@@AAVrq_results@3@@Z ENDP ; CCF_EventBox::_RayQuery
_TEXT	ENDS
PUBLIC	?pred_find_elem@@YA_NABUSElement@CCF_Skeleton@@G@Z ; pred_find_elem
; Function compile flags: /Ogtpy
;	COMDAT ?pred_find_elem@@YA_NABUSElement@CCF_Skeleton@@G@Z
_TEXT	SEGMENT
_E$ = 8							; size = 4
_elem$ = 12						; size = 2
?pred_find_elem@@YA_NABUSElement@CCF_Skeleton@@G@Z PROC	; pred_find_elem, COMDAT

; 59   : 	return E.elem_id<elem;

	mov	eax, DWORD PTR _E$[esp-4]
	mov	cx, WORD PTR [eax+78]
	cmp	cx, WORD PTR _elem$[esp-4]
	sbb	eax, eax
	neg	eax

; 60   : }

	ret	0
?pred_find_elem@@YA_NABUSElement@CCF_Skeleton@@G@Z ENDP	; pred_find_elem
_TEXT	ENDS
PUBLIC	??1ICollisionForm@@UAE@XZ			; ICollisionForm::~ICollisionForm
; Function compile flags: /Ogtpy
;	COMDAT ??1ICollisionForm@@UAE@XZ
_TEXT	SEGMENT
??1ICollisionForm@@UAE@XZ PROC				; ICollisionForm::~ICollisionForm, COMDAT
; _this$ = ecx

; 36   : {

	mov	DWORD PTR [ecx], OFFSET ??_7ICollisionForm@@6B@

; 37   : }

	ret	0
??1ICollisionForm@@UAE@XZ ENDP				; ICollisionForm::~ICollisionForm
_TEXT	ENDS
PUBLIC	??4FSlideWindowItem@@QAEAAU0@ABU0@@Z		; FSlideWindowItem::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4FSlideWindowItem@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4FSlideWindowItem@@QAEAAU0@ABU0@@Z PROC		; FSlideWindowItem::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], ecx
	ret	4
??4FSlideWindowItem@@QAEAAU0@ABU0@@Z ENDP		; FSlideWindowItem::operator=
_TEXT	ENDS
PUBLIC	??0FSlideWindowItem@@QAE@XZ			; FSlideWindowItem::FSlideWindowItem
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\fmesh.h
;	COMDAT ??0FSlideWindowItem@@QAE@XZ
_TEXT	SEGMENT
??0FSlideWindowItem@@QAE@XZ PROC			; FSlideWindowItem::FSlideWindowItem, COMDAT
; _this$ = ecx

; 112  : 	FSlideWindowItem() : sw(0),count(0)	{};

	mov	eax, ecx
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
	ret	0
??0FSlideWindowItem@@QAE@XZ ENDP			; FSlideWindowItem::FSlideWindowItem
_TEXT	ENDS
PUBLIC	??4FSlideWindow@@QAEAAU0@ABU0@@Z		; FSlideWindow::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4FSlideWindow@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4FSlideWindow@@QAEAAU0@ABU0@@Z PROC			; FSlideWindow::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
	ret	4
??4FSlideWindow@@QAEAAU0@ABU0@@Z ENDP			; FSlideWindow::operator=
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_vector3d.h
;	COMDAT ?magnitude@?$_vector3@M@@QBEMXZ
_TEXT	SEGMENT
?magnitude@?$_vector3@M@@QBEMXZ PROC			; _vector3<float>::magnitude, COMDAT
; _this$ = eax

; 171  : 	{

	push	ecx

; 172  : 		return _sqrt(square_magnitude());

	movss	xmm2, DWORD PTR [eax]
	movss	xmm1, DWORD PTR [eax+4]
	movss	xmm0, DWORD PTR [eax+8]
	movaps	xmm3, xmm2
	mulss	xmm3, xmm2
	movaps	xmm2, xmm1
	mulss	xmm2, xmm1
	movaps	xmm1, xmm0
	addss	xmm3, xmm2
	mulss	xmm1, xmm0
	push	ecx
	addss	xmm3, xmm1
	movss	DWORD PTR [esp], xmm3
	call	_sqrtf
	add	esp, 4
	pop	ecx

; 173  : 	}

	ret	0
?magnitude@?$_vector3@M@@QBEMXZ ENDP			; _vector3<float>::magnitude
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__copy_ptrs@PAUSElement@CCF_Skeleton@@PAU12@@priv@stlp_std@@YAPAUSElement@CCF_Skeleton@@PAU23@00ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__copy_ptrs@PAUSElement@CCF_Skeleton@@PAU12@@priv@stlp_std@@YAPAUSElement@CCF_Skeleton@@PAU23@00ABU__true_type@1@@Z PROC ; stlp_std::priv::__copy_ptrs<CCF_Skeleton::SElement *,CCF_Skeleton::SElement *>, COMDAT
; ___first$ = edx
; ___last$ = ecx
; ___result$ = eax

; 255  :   // we know they all pointers, so this cast is OK
; 256  :   //  return (_OutputIter)__copy_trivial(&(*__first), &(*__last), &(*__result));
; 257  :   return (_OutputIter)__copy_trivial(__first, __last, __result);

	sub	ecx, edx
	push	esi
	mov	esi, ecx
	je	SHORT $LN6@copy_ptrs@15
	push	esi
	push	edx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN6@copy_ptrs@15:
	pop	esi

; 258  : }

	ret	0
??$__copy_ptrs@PAUSElement@CCF_Skeleton@@PAU12@@priv@stlp_std@@YAPAUSElement@CCF_Skeleton@@PAU23@00ABU__true_type@1@@Z ENDP ; stlp_std::priv::__copy_ptrs<CCF_Skeleton::SElement *,CCF_Skeleton::SElement *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$_Copy_Construct@Ushape_def@CCF_Shape@@@stlp_std@@YAXPAUshape_def@CCF_Shape@@ABU12@@Z
_TEXT	SEGMENT
??$_Copy_Construct@Ushape_def@CCF_Shape@@@stlp_std@@YAXPAUshape_def@CCF_Shape@@ABU12@@Z PROC ; stlp_std::_Copy_Construct<CCF_Shape::shape_def>, COMDAT
; ___p$ = eax
; ___val$ = edx

; 109  : inline void _Copy_Construct(_Tp* __p, const _Tp& __val) {

	push	edi
	mov	edi, eax

; 110  : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 111  :   memset((char*)__p, _STLP_SHRED_BYTE, sizeof(_Tp));
; 112  : #endif
; 113  :   _STLP_PLACEMENT_NEW (__p) _Tp(__val);

	test	edi, edi
	je	SHORT $LN3@Copy_Const@10
	push	esi
	mov	ecx, 33					; 00000021H
	mov	esi, edx
	rep movsd
	pop	esi
$LN3@Copy_Const@10:
	pop	edi

; 114  : }

	ret	0
??$_Copy_Construct@Ushape_def@CCF_Shape@@@stlp_std@@YAXPAUshape_def@CCF_Shape@@ABU12@@Z ENDP ; stlp_std::_Copy_Construct<CCF_Shape::shape_def>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Copy_Construct@USElement@CCF_Skeleton@@@stlp_std@@YAXPAUSElement@CCF_Skeleton@@ABU12@@Z
_TEXT	SEGMENT
??$_Copy_Construct@USElement@CCF_Skeleton@@@stlp_std@@YAXPAUSElement@CCF_Skeleton@@ABU12@@Z PROC ; stlp_std::_Copy_Construct<CCF_Skeleton::SElement>, COMDAT
; ___p$ = eax
; ___val$ = edx

; 109  : inline void _Copy_Construct(_Tp* __p, const _Tp& __val) {

	push	edi
	mov	edi, eax

; 110  : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 111  :   memset((char*)__p, _STLP_SHRED_BYTE, sizeof(_Tp));
; 112  : #endif
; 113  :   _STLP_PLACEMENT_NEW (__p) _Tp(__val);

	test	edi, edi
	je	SHORT $LN3@Copy_Const@11
	push	esi
	mov	ecx, 20					; 00000014H
	mov	esi, edx
	rep movsd
	pop	esi
$LN3@Copy_Const@11:
	pop	edi

; 114  : }

	ret	0
??$_Copy_Construct@USElement@CCF_Skeleton@@@stlp_std@@YAXPAUSElement@CCF_Skeleton@@ABU12@@Z ENDP ; stlp_std::_Copy_Construct<CCF_Skeleton::SElement>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Copy_Construct@Urq_result@collide@@@stlp_std@@YAXPAUrq_result@collide@@ABU12@@Z
_TEXT	SEGMENT
??$_Copy_Construct@Urq_result@collide@@@stlp_std@@YAXPAUrq_result@collide@@ABU12@@Z PROC ; stlp_std::_Copy_Construct<collide::rq_result>, COMDAT
; ___p$ = eax
; ___val$ = ecx

; 110  : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 111  :   memset((char*)__p, _STLP_SHRED_BYTE, sizeof(_Tp));
; 112  : #endif
; 113  :   _STLP_PLACEMENT_NEW (__p) _Tp(__val);

	test	eax, eax
	je	SHORT $LN3@Copy_Const@12
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
$LN3@Copy_Const@12:

; 114  : }

	ret	0
??$_Copy_Construct@Urq_result@collide@@@stlp_std@@YAXPAUrq_result@collide@@ABU12@@Z ENDP ; stlp_std::_Copy_Construct<collide::rq_result>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?_M_erase@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@AAEPAUSElement@CCF_Skeleton@@PAU45@0ABU__false_type@3@@Z
_TEXT	SEGMENT
?_M_erase@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@AAEPAUSElement@CCF_Skeleton@@PAU45@0ABU__false_type@3@@Z PROC ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_M_erase, COMDAT
; _this$ = ebx
; ___first$ = edi
; ___last$ = eax

; 578  :   iterator _M_erase(iterator __first, iterator __last, const __false_type& /*_Movable*/) {

	push	esi

; 579  :     pointer __i = _STLP_PRIV __copy_ptrs(__last, this->_M_finish, __first, _TrivialCopy());

	mov	esi, DWORD PTR [ebx+4]
	sub	esi, eax
	je	SHORT $LN7@M_erase@12
	push	esi
	push	eax
	push	edi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi

; 580  :     _STLP_STD::_Destroy_Range(__i, this->_M_finish);
; 581  :     this->_M_finish = __i;

	mov	DWORD PTR [ebx+4], eax

; 582  :     return __first;

	mov	eax, edi
	pop	esi

; 583  :   }

	ret	0

; 579  :     pointer __i = _STLP_PRIV __copy_ptrs(__last, this->_M_finish, __first, _TrivialCopy());

$LN7@M_erase@12:

; 580  :     _STLP_STD::_Destroy_Range(__i, this->_M_finish);
; 581  :     this->_M_finish = __i;

	mov	DWORD PTR [ebx+4], edi

; 582  :     return __first;

	mov	eax, edi
	pop	esi

; 583  :   }

	ret	0
?_M_erase@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@AAEPAUSElement@CCF_Skeleton@@PAU45@0ABU__false_type@3@@Z ENDP ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_M_erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?erase@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEPAUSElement@CCF_Skeleton@@PAU45@0@Z
_TEXT	SEGMENT
?erase@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEPAUSElement@CCF_Skeleton@@PAU45@0@Z PROC ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::erase, COMDAT
; _this$ = ebx
; ___first$ = edi
; ___last$ = eax

; 590  :     if (__first == __last)

	cmp	edi, eax

; 591  :       return __first;

	je	SHORT $LN12@erase@13
	push	esi

; 592  :     return _M_erase(__first, __last, _Movable());

	mov	esi, DWORD PTR [ebx+4]
	sub	esi, eax
	je	SHORT $LN10@erase@13
	push	esi
	push	eax
	push	edi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
	mov	DWORD PTR [ebx+4], eax
	pop	esi
	mov	eax, edi

; 593  :   }

	ret	0

; 592  :     return _M_erase(__first, __last, _Movable());

$LN10@erase@13:
	mov	eax, edi
	mov	DWORD PTR [ebx+4], eax
	pop	esi
$LN12@erase@13:
	mov	eax, edi

; 593  :   }

	ret	0
?erase@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEPAUSElement@CCF_Skeleton@@PAU45@0@Z ENDP ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::erase
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_vector3d.h
_TEXT	ENDS
;	COMDAT ?generate_orthonormal_basis@?$_vector3@M@@SAXABU1@AAU1@1@Z
_TEXT	SEGMENT
tv198 = -16						; size = 4
tv203 = -12						; size = 4
tv199 = -8						; size = 4
_fInvLength$ = -8					; size = 4
tv193 = -4						; size = 4
?generate_orthonormal_basis@?$_vector3@M@@SAXABU1@AAU1@1@Z PROC ; _vector3<float>::generate_orthonormal_basis, COMDAT
; _dir$ = edi
; _up$ = esi
; _right$ = ebx

; 384  :     {

	sub	esp, 20					; 00000014H

; 385  :         T fInvLength;
; 386  : 
; 387  :         if ( _abs(dir.x) >= _abs(dir.y) ){

	fld	DWORD PTR [edi]
	push	ecx
	fst	DWORD PTR tv193[esp+24]
	fld	DWORD PTR [edi+4]
	fstp	DWORD PTR tv198[esp+24]
	fstp	DWORD PTR [esp]
	call	_fabsf
	fstp	DWORD PTR tv199[esp+24]
	fld	DWORD PTR tv198[esp+24]
	fstp	DWORD PTR [esp]
	call	_fabsf
	fld	DWORD PTR tv199[esp+24]

; 388  :             // W.x or W.z is the largest magnitude component, swap them
; 389  :             fInvLength = 1.f/_sqrt(dir.x*dir.x+dir.z*dir.z);

	movss	xmm0, DWORD PTR [edi+8]
	movss	xmm1, DWORD PTR tv198[esp+24]
	movss	xmm2, DWORD PTR tv193[esp+24]
	add	esp, 4
	fcomip	ST(1)
	fstp	ST(0)
	push	ecx
	movss	DWORD PTR tv203[esp+24], xmm0
	jb	SHORT $LN2@generate_o
	movaps	xmm1, xmm0
	mulss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, xmm2
	addss	xmm1, xmm0
	movss	DWORD PTR [esp], xmm1
	call	_sqrtf
	fld1
	fdivrp	ST(1), ST(0)

; 390  :             up.x = -dir.z*fInvLength;

	movss	xmm3, DWORD PTR tv203[esp+24]
	movss	xmm1, DWORD PTR __real@80000000
	movaps	xmm0, xmm3
	fst	DWORD PTR _fInvLength$[esp+24]

; 391  :             up.y = 0.0f;
; 392  :             up.z = +dir.x*fInvLength;

	fmul	DWORD PTR tv193[esp+24]
	mulss	xmm0, DWORD PTR _fInvLength$[esp+24]
	subss	xmm1, xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [esi], xmm1

; 393  :         }
; 394  :         else

	jmp	SHORT $LN23@generate_o
$LN2@generate_o:

; 395  :         {
; 396  :             // W.y or W.z is the largest magnitude component, swap them
; 397  :             fInvLength = 1.f/_sqrt(dir.y*dir.y+dir.z*dir.z);

	movaps	xmm2, xmm0
	mulss	xmm2, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, xmm1
	addss	xmm2, xmm0
	movss	DWORD PTR [esp], xmm2
	call	_sqrtf
	fld1
	fdivrp	ST(1), ST(0)

; 398  :             up.x = 0.0f;

	xorps	xmm0, xmm0

; 399  :             up.y = +dir.z*fInvLength;

	movss	xmm3, DWORD PTR tv203[esp+24]
	movss	DWORD PTR [esi], xmm0
	movaps	xmm0, xmm3
	fst	DWORD PTR _fInvLength$[esp+24]

; 400  :             up.z = -dir.y*fInvLength;

	fmul	DWORD PTR tv198[esp+24]
	mulss	xmm0, DWORD PTR _fInvLength$[esp+24]
	fchs
$LN23@generate_o:

; 401  :         }
; 402  : 
; 403  :         right.crossproduct(up,dir); //. <->

	movss	xmm4, DWORD PTR tv198[esp+24]
	fstp	DWORD PTR [esi+8]
	movaps	xmm2, xmm0
	movss	DWORD PTR [esi+4], xmm0
	movss	xmm0, DWORD PTR [esi+8]
	movaps	xmm5, xmm0
	movaps	xmm1, xmm2
	mulss	xmm1, xmm3
	mulss	xmm5, xmm4
	subss	xmm1, xmm5
	movss	xmm5, DWORD PTR tv193[esp+24]
	movss	DWORD PTR [ebx], xmm1
	movss	xmm1, DWORD PTR [esi]
	movaps	xmm6, xmm1
	mulss	xmm0, xmm5
	mulss	xmm6, xmm3
	mulss	xmm1, xmm4
	mulss	xmm2, xmm5
	subss	xmm0, xmm6
	subss	xmm1, xmm2
	add	esp, 4
	movss	DWORD PTR [ebx+4], xmm0
	movss	DWORD PTR [ebx+8], xmm1

; 404  :     }

	add	esp, 20					; 00000014H
	ret	0
?generate_orthonormal_basis@?$_vector3@M@@SAXABU1@AAU1@1@Z ENDP ; _vector3<float>::generate_orthonormal_basis
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?normalize_magn@?$_vector3@M@@QAEMXZ
_TEXT	SEGMENT
_len$ = -16						; size = 4
tv138 = -12						; size = 4
tv134 = -8						; size = 4
tv130 = -4						; size = 4
?normalize_magn@?$_vector3@M@@QAEMXZ PROC		; _vector3<float>::normalize_magn, COMDAT
; _this$ = esi

; 177  : 	{

	sub	esp, 16					; 00000010H

; 178  : 		VERIFY(square_magnitude() > std::numeric_limits<T>::min());
; 179  : 		T len		= magnitude();

	movss	xmm2, DWORD PTR [esi]
	movss	xmm1, DWORD PTR [esi+4]
	movss	xmm0, DWORD PTR [esi+8]
	movaps	xmm3, xmm2
	mulss	xmm3, xmm2
	movss	DWORD PTR tv138[esp+16], xmm2
	movaps	xmm2, xmm1
	mulss	xmm2, xmm1
	movss	DWORD PTR tv134[esp+16], xmm1
	movaps	xmm1, xmm0
	addss	xmm3, xmm2
	mulss	xmm1, xmm0
	push	ecx
	addss	xmm3, xmm1
	movss	DWORD PTR tv130[esp+20], xmm0
	movss	DWORD PTR [esp], xmm3
	call	_sqrtf
	fst	DWORD PTR _len$[esp+20]

; 180  :         T inv_len 	= T(1)/len;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _len$[esp+20]

; 181  : 		x *= inv_len;

	movss	xmm1, DWORD PTR tv138[esp+20]
	mulss	xmm1, xmm0
	movss	DWORD PTR [esi], xmm1

; 182  : 		y *= inv_len;

	movss	xmm1, DWORD PTR tv134[esp+20]
	mulss	xmm1, xmm0
	movss	DWORD PTR [esi+4], xmm1

; 183  : 		z *= inv_len;

	movss	xmm1, DWORD PTR tv130[esp+20]
	mulss	xmm1, xmm0
	movss	DWORD PTR [esi+8], xmm1

; 184  :         return len;
; 185  : 	}

	add	esp, 20					; 00000014H
	ret	0
?normalize_magn@?$_vector3@M@@QAEMXZ ENDP		; _vector3<float>::normalize_magn
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?back@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEAAUshape_def@CCF_Shape@@XZ
_TEXT	SEGMENT
?back@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEAAUshape_def@CCF_Shape@@XZ PROC ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::back, COMDAT
; _this$ = eax

; 195  :   reference back()              { return *(end() - 1); }

	mov	eax, DWORD PTR [eax+4]
	sub	eax, 132				; 00000084H
	ret	0
?back@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEAAUshape_def@CCF_Shape@@XZ ENDP ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::back
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?size@?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QBEIXZ PROC ; stlp_std::vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::size, COMDAT
; _this$ = eax

; 89   :   size_type size() const        { return _M_impl.size(); }

	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR [eax]
	mov	eax, 1041204193				; 3e0f83e1H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	ret	0
?size@?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QBEIXZ ENDP ; stlp_std::vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QAEPAUshape_def@CCF_Shape@@XZ
_TEXT	SEGMENT
?begin@?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QAEPAUshape_def@CCF_Shape@@XZ PROC ; stlp_std::vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::begin, COMDAT
; _this$ = eax

; 79   :   iterator begin()             { return cast_traits::to_value_type_ptr(_M_impl.begin()); }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QAEPAUshape_def@CCF_Shape@@XZ ENDP ; stlp_std::vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::begin
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?erase@?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAEPAUSElement@CCF_Skeleton@@PAU34@0@Z
_TEXT	SEGMENT
?erase@?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAEPAUSElement@CCF_Skeleton@@PAU34@0@Z PROC ; stlp_std::vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::erase, COMDAT
; _this$ = ebx
; ___first$ = edi
; ___last$ = eax

; 208  :     return cast_traits::to_value_type_ptr(_M_impl.erase(cast_traits::to_storage_type_ptr(__first),
; 209  :                                                         cast_traits::to_storage_type_ptr(__last)));

	cmp	edi, eax
	je	SHORT $LN20@erase@14
	push	esi
	mov	esi, DWORD PTR [ebx+4]
	sub	esi, eax
	je	SHORT $LN16@erase@14
	push	esi
	push	eax
	push	edi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
	mov	DWORD PTR [ebx+4], eax
	pop	esi
	mov	eax, edi

; 210  :   }

	ret	0

; 208  :     return cast_traits::to_value_type_ptr(_M_impl.erase(cast_traits::to_storage_type_ptr(__first),
; 209  :                                                         cast_traits::to_storage_type_ptr(__last)));

$LN16@erase@14:
	mov	eax, edi
	mov	DWORD PTR [ebx+4], eax
	pop	esi
$LN20@erase@14:
	mov	eax, edi

; 210  :   }

	ret	0
?erase@?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAEPAUSElement@CCF_Skeleton@@PAU34@0@Z ENDP ; stlp_std::vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::erase
_TEXT	ENDS
PUBLIC	__real@2b8cbccc
;	COMDAT __real@2b8cbccc
; File j:\msvs8\vc\include\math.h
CONST	SEGMENT
__real@2b8cbccc DD 02b8cbcccr			; 1e-012
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_cylinder.h
CONST	ENDS
;	COMDAT ?intersect@?$_cylinder@M@@QBEHABU?$_vector3@M@@0QAMQAW4ecode@1@@Z
_TEXT	SEGMENT
_fT0$ = -52						; size = 4
_kD$ = -48						; size = 12
_kP$ = -36						; size = 12
_kU$ = -36						; size = 12
_kW$ = -24						; size = 12
_kV$ = -12						; size = 12
_fRoot$ = 8						; size = 4
_fDiscr$ = 8						; size = 4
_fRadiusSqr$ = 8					; size = 4
_this$ = 8						; size = 4
tv527 = 12						; size = 4
_fB$ = 12						; size = 4
_start$ = 12						; size = 4
_fA$ = 16						; size = 4
_fHalfHeight$ = 16					; size = 4
_dir$ = 16						; size = 4
_fT1$ = 20						; size = 4
_afT$ = 20						; size = 4
_len$247168 = 24					; size = 4
_fInvDLength$ = 24					; size = 4
_code$ = 24						; size = 4
?intersect@?$_cylinder@M@@QBEHABU?$_vector3@M@@0QAMQAW4ecode@1@@Z PROC ; _cylinder<float>::intersect, COMDAT

; 21   :     {

	sub	esp, 56					; 00000038H

; 22   :         T fEpsilon = 1e-12f;
; 23   : 
; 24   :         // set up quadratic Q(t) = a*t^2 + 2*b*t + c
; 25   :         _vector3<T> kU, kV, kW = m_direction;

	mov	eax, DWORD PTR _this$[esp+52]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [eax+20]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _code$[esp+60]
	push	esi
	push	edi

; 26   :         _vector3<T>::generate_orthonormal_basis(kW,kU,kV);

	lea	ebx, DWORD PTR _kV$[esp+72]
	lea	esi, DWORD PTR _kU$[esp+72]
	lea	edi, DWORD PTR _kW$[esp+72]
	mov	DWORD PTR _kW$[esp+72], ecx
	mov	DWORD PTR _kW$[esp+76], edx
	mov	DWORD PTR _kW$[esp+80], eax
	call	?generate_orthonormal_basis@?$_vector3@M@@SAXABU1@AAU1@1@Z ; _vector3<float>::generate_orthonormal_basis

; 27   :         _vector3<T> kD; kD.set(kU.dotproduct(dir),kV.dotproduct(dir),kW.dotproduct(dir));

	mov	eax, DWORD PTR _dir$[esp+68]
	movss	xmm3, DWORD PTR [eax+4]
	movss	xmm0, DWORD PTR [eax+8]
	movss	xmm4, DWORD PTR [eax]
	movaps	xmm2, xmm3
	mulss	xmm2, DWORD PTR _kU$[esp+76]
	movaps	xmm1, xmm0
	mulss	xmm1, DWORD PTR _kU$[esp+80]
	addss	xmm1, xmm2
	movaps	xmm5, xmm3
	mulss	xmm5, DWORD PTR _kV$[esp+76]
	mulss	xmm3, DWORD PTR _kW$[esp+76]
	movaps	xmm2, xmm4
	mulss	xmm2, DWORD PTR _kU$[esp+72]
	addss	xmm1, xmm2
	movaps	xmm2, xmm0
	mulss	xmm2, DWORD PTR _kV$[esp+80]
	mulss	xmm0, DWORD PTR _kW$[esp+80]
	addss	xmm2, xmm5
	addss	xmm0, xmm3
	movaps	xmm5, xmm4
	mulss	xmm5, DWORD PTR _kV$[esp+72]
	mulss	xmm4, DWORD PTR _kW$[esp+72]
	addss	xmm2, xmm5

; 28   : #ifdef DEBUG
; 29   : 		if(kD.square_magnitude() <= std::numeric_limits<T>::min())
; 30   : 		{
; 31   : 			Msg("dir :%f,%f,%f",dir.x,dir.y,dir.z);
; 32   : 			Msg("kU :%f,%f,%f",kU.x,kU.y,kU.z);
; 33   : 			Msg("kV :%f,%f,%f",kV.x,kV.y,kV.z);
; 34   : 			Msg("kW :%f,%f,%f",kW.x,kW.y,kW.z);
; 35   : 			VERIFY2(0,"KD is zero");
; 36   : 		}
; 37   : #endif
; 38   :         T fDLength = kD.normalize_magn();

	movaps	xmm3, xmm2
	mulss	xmm3, xmm2
	movss	DWORD PTR _kD$[esp+76], xmm2
	movaps	xmm2, xmm1
	addss	xmm0, xmm4
	mulss	xmm2, xmm1
	movss	DWORD PTR _kD$[esp+72], xmm1
	movaps	xmm1, xmm0
	addss	xmm3, xmm2
	mulss	xmm1, xmm0
	push	ecx
	addss	xmm3, xmm1
	movss	DWORD PTR _kD$[esp+84], xmm0
	movss	DWORD PTR [esp], xmm3
	call	_sqrtf
	fst	DWORD PTR _len$247168[esp+72]

; 39   :         T fInvDLength = 1.0f/fDLength;

	fld1
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _len$247168[esp+72]
	fdivrp	ST(1), ST(0)

; 40   :         _vector3<T> kDiff; kDiff.sub(start,m_center);

	mov	ecx, DWORD PTR _start$[esp+72]
	mov	eax, DWORD PTR _this$[esp+72]
	movss	xmm2, DWORD PTR [ecx+8]
	subss	xmm2, DWORD PTR [eax+8]
	movaps	xmm1, xmm0
	mulss	xmm1, DWORD PTR _kD$[esp+76]
	movss	DWORD PTR _kD$[esp+76], xmm1
	movaps	xmm1, xmm0
	mulss	xmm0, DWORD PTR _kD$[esp+84]
	mulss	xmm1, DWORD PTR _kD$[esp+80]
	movss	DWORD PTR _kD$[esp+84], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _kD$[esp+80], xmm1
	movss	xmm1, DWORD PTR [ecx]
	subss	xmm1, DWORD PTR [eax]

; 41   :         _vector3<T> kP; kP.set(kU.dotproduct(kDiff),kV.dotproduct(kDiff),kW.dotproduct(kDiff));

	movaps	xmm3, xmm0
	mulss	xmm3, DWORD PTR _kU$[esp+80]
	movaps	xmm4, xmm2
	mulss	xmm4, DWORD PTR _kU$[esp+84]
	fstp	DWORD PTR _fInvDLength$[esp+72]

; 42   :         T fHalfHeight = 0.5f*m_height;
; 43   :         T fRadiusSqr = m_radius*m_radius;
; 44   : 
; 45   :         T fInv, fA, fB, fC, fDiscr, fRoot, fT, fT0, fT1, fTmp0, fTmp1;
; 46   : 
; 47   :         if ( _abs(kD.z) >= 1.0f - fEpsilon ){

	fld	DWORD PTR _kD$[esp+84]
	addss	xmm3, xmm4
	movaps	xmm4, xmm1
	fstp	DWORD PTR [esp]
	mulss	xmm4, DWORD PTR _kU$[esp+76]
	addss	xmm3, xmm4
	movss	DWORD PTR _kP$[esp+76], xmm3
	movaps	xmm3, xmm0
	mulss	xmm0, DWORD PTR _kW$[esp+80]
	mulss	xmm3, DWORD PTR _kV$[esp+80]
	movaps	xmm4, xmm2
	mulss	xmm4, DWORD PTR _kV$[esp+84]
	mulss	xmm2, DWORD PTR _kW$[esp+84]
	addss	xmm3, xmm4
	addss	xmm0, xmm2
	movaps	xmm4, xmm1
	mulss	xmm1, DWORD PTR _kW$[esp+76]
	mulss	xmm4, DWORD PTR _kV$[esp+76]
	addss	xmm0, xmm1
	movss	DWORD PTR _kP$[esp+84], xmm0
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _fHalfHeight$[esp+72], xmm0
	movss	xmm0, DWORD PTR [eax+28]
	addss	xmm3, xmm4
	mulss	xmm0, xmm0
	movss	DWORD PTR _kP$[esp+80], xmm3
	movss	DWORD PTR _fRadiusSqr$[esp+72], xmm0
	call	_fabsf
	fst	DWORD PTR tv527[esp+72]
	fld1
	add	esp, 4
	fxch	ST(1)
	fcomip	ST(1)
	fstp	ST(0)
	jb	$LN27@intersect

; 48   :             // line is parallel to cylinder axis
; 49   :             if ( kP.x*kP.x+kP.y*kP.y <= fRadiusSqr ){

	movss	xmm0, DWORD PTR _kP$[esp+76]
	movaps	xmm1, xmm0
	mulss	xmm1, xmm0
	movss	xmm0, DWORD PTR _kP$[esp+72]
	movaps	xmm2, xmm0
	mulss	xmm2, xmm0
	movss	xmm0, DWORD PTR _fRadiusSqr$[esp+68]
	addss	xmm1, xmm2
	comiss	xmm0, xmm1
	jb	SHORT $LN28@intersect

; 50   :                 fTmp0 = fInvDLength/kD.z;
; 51   :                 afT[0] = (+fHalfHeight - kP.z)*fTmp0;

	movss	xmm2, DWORD PTR _fHalfHeight$[esp+68]
	movss	xmm1, DWORD PTR _kP$[esp+80]
	movss	xmm0, DWORD PTR _fInvDLength$[esp+68]
	divss	xmm0, DWORD PTR _kD$[esp+80]
	mov	eax, DWORD PTR _afT$[esp+68]
	movaps	xmm3, xmm2
	subss	xmm3, xmm1
	mulss	xmm3, xmm0
	movss	DWORD PTR [eax], xmm3

; 52   :                 afT[1] = (-fHalfHeight - kP.z)*fTmp0;

	movss	xmm3, DWORD PTR __real@80000000
	subss	xmm3, xmm2
	subss	xmm3, xmm1
	mulss	xmm3, xmm0
	movss	DWORD PTR [eax+4], xmm3

; 53   : 				code[0] = cyl_cap;

	mov	DWORD PTR [ebp], 0

; 54   : 				code[1] = cyl_cap;

	mov	DWORD PTR [ebp+4], 0
$LN89@intersect:

; 55   :                 return 2;

	mov	eax, 2

; 185  : 				}
; 186  :             }
; 187  :         }
; 188  : 
; 189  :         return iQuantity;
; 190  :     }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 56					; 00000038H
	ret	20					; 00000014H
$LN28@intersect:

; 56   :             }
; 57   :             else{
; 58   :                 return 0;

	xor	eax, eax

; 185  : 				}
; 186  :             }
; 187  :         }
; 188  : 
; 189  :         return iQuantity;
; 190  :     }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 56					; 00000038H
	ret	20					; 00000014H
$LN27@intersect:

; 59   :             }
; 60   :         }
; 61   : 
; 62   :         if ( _abs(kD.z) <= fEpsilon ){

	movss	xmm0, DWORD PTR __real@2b8cbccc
	comiss	xmm0, DWORD PTR tv527[esp+68]
	jb	$LN21@intersect

; 63   :             // line is perpendicular to axis of cylinder
; 64   :             if ( _abs(kP.z) > fHalfHeight ){

	fld	DWORD PTR _kP$[esp+80]
	push	ecx
	fstp	DWORD PTR [esp]
	call	_fabsf
	fld	DWORD PTR _fHalfHeight$[esp+72]
	add	esp, 4
	fxch	ST(1)
	fcomip	ST(1)
	fstp	ST(0)

; 65   :                 // line is outside the planar caps of cylinder
; 66   :                 return 0;

	ja	SHORT $LN28@intersect

; 67   :             }
; 68   : 
; 69   :             fA = kD.x*kD.x + kD.y*kD.y;

	movss	xmm0, DWORD PTR _kD$[esp+76]
	movss	xmm1, DWORD PTR _kD$[esp+72]

; 70   :             fB = kP.x*kD.x + kP.y*kD.y;

	movss	xmm4, DWORD PTR _kP$[esp+76]
	movaps	xmm3, xmm1
	mulss	xmm3, xmm1
	movaps	xmm2, xmm0
	mulss	xmm2, xmm0
	addss	xmm2, xmm3
	movss	xmm3, DWORD PTR _kP$[esp+72]

; 71   :             fC = kP.x*kP.x + kP.y*kP.y - fRadiusSqr;

	movaps	xmm5, xmm4
	mulss	xmm5, xmm4
	mulss	xmm0, xmm4
	mulss	xmm1, xmm3
	addss	xmm0, xmm1
	movaps	xmm4, xmm3
	mulss	xmm4, xmm3

; 72   :             fDiscr = fB*fB - fA*fC;
; 73   :             if ( fDiscr < 0.0f ){

	xorps	xmm3, xmm3
	addss	xmm5, xmm4
	subss	xmm5, DWORD PTR _fRadiusSqr$[esp+68]
	movaps	xmm1, xmm0
	mulss	xmm1, xmm0
	mulss	xmm5, xmm2
	subss	xmm1, xmm5
	comiss	xmm3, xmm1
	movss	DWORD PTR _fA$[esp+68], xmm2
	movss	DWORD PTR _fB$[esp+68], xmm0
	movss	DWORD PTR _fDiscr$[esp+68], xmm1

; 74   :                 // line does not intersect cylinder wall
; 75   :                 return 0;

	ja	$LN28@intersect

; 76   :             }
; 77   :             else if ( fDiscr > 0.0f ){

	comiss	xmm1, xmm3
	jbe	SHORT $LN22@intersect

; 78   :                 fRoot = _sqrt(fDiscr);

	fld	DWORD PTR _fDiscr$[esp+68]
	push	ecx
	fstp	DWORD PTR [esp]
	call	_sqrtf

; 79   :                 fTmp0 = fInvDLength/fA;
; 80   :                 afT[0] = (-fB - fRoot)*fTmp0;

	movss	xmm2, DWORD PTR _fB$[esp+72]
	fstp	DWORD PTR _fRoot$[esp+72]
	movss	xmm3, DWORD PTR __real@80000000
	movss	xmm1, DWORD PTR _fRoot$[esp+72]
	mov	eax, DWORD PTR _afT$[esp+72]
	movss	xmm0, DWORD PTR _fInvDLength$[esp+72]
	divss	xmm0, DWORD PTR _fA$[esp+72]
	subss	xmm3, xmm2
	subss	xmm3, xmm1

; 81   :                 afT[1] = (-fB + fRoot)*fTmp0;

	subss	xmm1, xmm2
	mulss	xmm3, xmm0
	mulss	xmm1, xmm0
	movss	DWORD PTR [eax], xmm3
	movss	DWORD PTR [eax+4], xmm1
	add	esp, 4

; 82   : 				code[0] = cyl_wall;

	mov	DWORD PTR [ebp], 1

; 83   : 				code[1] = cyl_wall;

	mov	DWORD PTR [ebp+4], 1

; 84   :                 return 2;	//wall

	mov	eax, 2

; 185  : 				}
; 186  :             }
; 187  :         }
; 188  : 
; 189  :         return iQuantity;
; 190  :     }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 56					; 00000038H
	ret	20					; 00000014H
$LN22@intersect:

; 85   :             }else{
; 86   :                 afT[0] = -fB*fInvDLength/fA;

	movss	xmm1, DWORD PTR __real@80000000
	mov	ecx, DWORD PTR _afT$[esp+68]
	divss	xmm0, xmm2
	mulss	xmm0, DWORD PTR _fInvDLength$[esp+68]
	subss	xmm1, xmm0
	movss	DWORD PTR [ecx], xmm1

; 87   : 				code[0] = cyl_wall;

	mov	DWORD PTR [ebp], 1

; 88   :                 return 1; //wall

	mov	eax, 1

; 185  : 				}
; 186  :             }
; 187  :         }
; 188  : 
; 189  :         return iQuantity;
; 190  :     }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 56					; 00000038H
	ret	20					; 00000014H
$LN21@intersect:

; 89   :             }
; 90   :         }
; 91   : 
; 92   :         // test plane intersections first
; 93   :         int iQuantity = 0;
; 94   :         fInv = 1.0f/kD.z;

	movss	xmm3, DWORD PTR __real@3f800000

; 95   :         fT0 = (+fHalfHeight - kP.z)*fInv;

	movss	xmm4, DWORD PTR _fHalfHeight$[esp+68]
	divss	xmm3, DWORD PTR _kD$[esp+80]
	subss	xmm4, DWORD PTR _kP$[esp+80]

; 96   :         fTmp0 = kP.x + fT0*kD.x;
; 97   :         fTmp1 = kP.y + fT0*kD.y;

	movss	xmm2, DWORD PTR _kD$[esp+76]
	movss	xmm5, DWORD PTR _kD$[esp+72]
	movss	xmm6, DWORD PTR _kP$[esp+72]

; 98   :         if ( fTmp0*fTmp0 + fTmp1*fTmp1 <= fRadiusSqr )
; 99   : 		{
; 100  :             code[iQuantity]	= cyl_cap;
; 101  : 			afT[iQuantity++]= fT0*fInvDLength;

	mov	edi, DWORD PTR _afT$[esp+68]
	mulss	xmm4, xmm3
	movaps	xmm1, xmm4
	mulss	xmm1, xmm2
	addss	xmm1, DWORD PTR _kP$[esp+76]
	movaps	xmm7, xmm1
	movaps	xmm0, xmm4
	mulss	xmm0, xmm5
	addss	xmm0, xmm6
	mulss	xmm7, xmm1
	movaps	xmm1, xmm0
	mulss	xmm1, xmm0
	movss	xmm0, DWORD PTR _fRadiusSqr$[esp+68]
	xor	esi, esi
	addss	xmm7, xmm1
	comiss	xmm0, xmm7
	movss	DWORD PTR _fT0$[esp+72], xmm4
	jb	SHORT $LN20@intersect
	movaps	xmm0, xmm4
	mulss	xmm0, DWORD PTR _fInvDLength$[esp+68]
	mov	DWORD PTR [ebp], esi
	movss	DWORD PTR [edi], xmm0
	mov	esi, 1
$LN20@intersect:

; 102  : 			
; 103  : 		}
; 104  : 
; 105  :         fT1 = (-fHalfHeight - kP.z)*fInv;

	movss	xmm0, DWORD PTR __real@80000000
	subss	xmm0, DWORD PTR _fHalfHeight$[esp+68]
	subss	xmm0, DWORD PTR _kP$[esp+80]
	mulss	xmm0, xmm3

; 106  :         fTmp0 = kP.x + fT1*kD.x;
; 107  :         fTmp1 = kP.y + fT1*kD.y;

	movaps	xmm3, xmm0
	mulss	xmm3, xmm2
	addss	xmm3, DWORD PTR _kP$[esp+76]

; 108  :         if ( fTmp0*fTmp0 + fTmp1*fTmp1 <= fRadiusSqr )

	movaps	xmm7, xmm3
	movaps	xmm1, xmm0
	mulss	xmm1, xmm5
	addss	xmm1, xmm6
	mulss	xmm7, xmm3
	movaps	xmm3, xmm1
	mulss	xmm3, xmm1
	movss	xmm1, DWORD PTR _fRadiusSqr$[esp+68]
	addss	xmm7, xmm3
	comiss	xmm1, xmm7
	movss	DWORD PTR _fT1$[esp+68], xmm0
	jb	SHORT $LN19@intersect

; 109  : 		{
; 110  :             code[iQuantity]	= cyl_cap;
; 111  : 			afT[iQuantity++] = fT1*fInvDLength;

	movaps	xmm1, xmm0
	mulss	xmm1, DWORD PTR _fInvDLength$[esp+68]
	mov	DWORD PTR [ebp+esi*4], 0
	movss	DWORD PTR [edi+esi*4], xmm1
	add	esi, 1
$LN19@intersect:

; 112  : 		}
; 113  : 
; 114  :         if ( iQuantity == 2 ){

	cmp	esi, 2

; 115  :             // line intersects both top and bottom
; 116  :             return 2;//both caps

	je	$LN89@intersect

; 117  :         }
; 118  : 
; 119  :         // If iQuantity == 1, then line must intersect cylinder wall
; 120  :         // somewhere between caps in a single point.  This case is detected
; 121  :         // in the following code that tests for intersection between line and
; 122  :         // cylinder wall.
; 123  : 
; 124  :         fA = kD.x*kD.x + kD.y*kD.y;
; 125  :         fB = kP.x*kD.x + kP.y*kD.y;

	movss	xmm7, DWORD PTR _kP$[esp+76]
	movaps	xmm3, xmm5
	mulss	xmm3, xmm5
	mulss	xmm5, xmm6
	movaps	xmm1, xmm2
	mulss	xmm1, xmm2
	mulss	xmm2, xmm7
	addss	xmm2, xmm5

; 126  :         fC = kP.x*kP.x + kP.y*kP.y - fRadiusSqr;

	movaps	xmm5, xmm7
	mulss	xmm5, xmm7
	addss	xmm1, xmm3
	movaps	xmm7, xmm6
	mulss	xmm7, xmm6
	addss	xmm5, xmm7
	subss	xmm5, DWORD PTR _fRadiusSqr$[esp+68]

; 127  :         fDiscr = fB*fB - fA*fC;

	movaps	xmm3, xmm2
	mulss	xmm5, xmm1
	mulss	xmm3, xmm2
	subss	xmm3, xmm5

; 128  :         if ( fDiscr < 0.0f ){

	xorps	xmm5, xmm5
	comiss	xmm5, xmm3
	movss	DWORD PTR _fA$[esp+68], xmm1
	movss	DWORD PTR _fB$[esp+68], xmm2
	movss	DWORD PTR _fDiscr$[esp+68], xmm3

; 129  :             // line does not intersect cylinder wall
; 130  :             //VERIFY( iQuantity == 0 );
; 131  :             return 0;

	ja	$LN28@intersect

; 132  :         }else if ( fDiscr > 0.0f ){

	comiss	xmm3, xmm5
	jbe	$LN15@intersect

; 133  :             fRoot = _sqrt(fDiscr);

	fld	DWORD PTR _fDiscr$[esp+68]
	push	ecx
	fstp	DWORD PTR [esp]
	call	_sqrtf

; 134  :             fInv = 1.0f/fA;

	movss	xmm0, DWORD PTR __real@3f800000
	fstp	DWORD PTR _fRoot$[esp+72]
	divss	xmm0, DWORD PTR _fA$[esp+72]

; 135  :             fT = (-fB - fRoot)*fInv;

	movss	xmm5, DWORD PTR _fB$[esp+72]
	movss	xmm1, DWORD PTR _fRoot$[esp+72]

; 136  :             if ( fT0 <= fT1 ){

	movss	xmm3, DWORD PTR _fT1$[esp+72]
	movss	xmm4, DWORD PTR _fT0$[esp+76]
	movaps	xmm2, xmm0
	movss	xmm0, DWORD PTR __real@80000000
	subss	xmm0, xmm5
	add	esp, 4
	comiss	xmm3, xmm4
	subss	xmm0, xmm1
	mulss	xmm0, xmm2
	jb	SHORT $LN14@intersect

; 137  :                 if ( fT0 <= fT && fT <= fT1 )

	comiss	xmm0, xmm4
	jb	SHORT $LN83@intersect
	comiss	xmm3, xmm0
$LN86@intersect:
	jb	SHORT $LN83@intersect

; 138  : 				{
; 139  : 					code[iQuantity]	= cyl_wall;                    
; 140  : 					afT[iQuantity++] = fT*fInvDLength;

	movss	xmm6, DWORD PTR _fInvDLength$[esp+68]
	mulss	xmm0, xmm6
	mov	DWORD PTR [ebp+esi*4], 1
	movss	DWORD PTR [edi+esi*4], xmm0
	add	esi, 1

; 141  : 
; 142  : 				}
; 143  :             }else{

	jmp	SHORT $LN11@intersect
$LN14@intersect:

; 144  :                 if ( fT1 <= fT && fT <= fT0 )

	comiss	xmm0, xmm3
	jb	SHORT $LN83@intersect
	comiss	xmm4, xmm0

; 145  : 				{
; 146  : 					code[iQuantity]	= cyl_wall;
; 147  : 					afT[iQuantity++] = fT*fInvDLength;

	jmp	SHORT $LN86@intersect
$LN83@intersect:
	movss	xmm6, DWORD PTR _fInvDLength$[esp+68]
$LN11@intersect:

; 148  : 
; 149  : 				}
; 150  :             }
; 151  : 
; 152  :             if ( iQuantity == 2 ){

	cmp	esi, 2

; 153  :                 // Line intersects one of top/bottom of cylinder and once on
; 154  :                 // cylinder wall.
; 155  :                 return 2;

	je	$LN89@intersect

; 156  :             }
; 157  : 
; 158  :             fT = (-fB + fRoot)*fInv;
; 159  :             if ( fT0 <= fT1 ){

	comiss	xmm3, xmm4
	subss	xmm1, xmm5
	mulss	xmm1, xmm2
	jb	SHORT $LN9@intersect

; 160  :                 if ( fT0 <= fT && fT <= fT1 )

	comiss	xmm1, xmm4
	jb	SHORT $LN1@intersect
	comiss	xmm3, xmm1
	jb	SHORT $LN1@intersect

; 161  : 				{
; 162  :                     code[iQuantity]	= cyl_wall;
; 163  : 					afT[iQuantity++] = fT*fInvDLength;

	mulss	xmm1, xmm6

; 164  : 				}
; 165  :             }else{

	jmp	SHORT $LN87@intersect
$LN9@intersect:

; 166  :                 if ( fT1 <= fT && fT <= fT0 )

	comiss	xmm1, xmm3
	jb	SHORT $LN1@intersect
	comiss	xmm4, xmm1
	jb	SHORT $LN1@intersect

; 167  : 				{
; 168  :                     code[iQuantity]	= cyl_wall;
; 169  : 					afT[iQuantity++] = fT*fInvDLength;

	mulss	xmm1, xmm6

; 170  : 				}
; 171  :             }
; 172  :         }else{

	jmp	SHORT $LN87@intersect
$LN15@intersect:

; 173  :             fT = -fB/fA;
; 174  :             if ( fT0 <= fT1 ){

	comiss	xmm0, xmm4
	divss	xmm2, xmm1
	movss	xmm1, DWORD PTR __real@80000000
	subss	xmm1, xmm2
	jb	SHORT $LN4@intersect

; 175  :                 if ( fT0 <= fT && fT <= fT1 )

	comiss	xmm1, xmm4
	jb	SHORT $LN1@intersect
	comiss	xmm0, xmm1

; 176  : 				{
; 177  :                     code[iQuantity]	= cyl_wall;
; 178  : 					afT[iQuantity++] = fT*fInvDLength;
; 179  : 				}
; 180  :             }else{

	jmp	SHORT $LN88@intersect
$LN4@intersect:

; 181  :                 if ( fT1 <= fT && fT <= fT0 )

	comiss	xmm1, xmm0
	jb	SHORT $LN1@intersect
	comiss	xmm4, xmm1
$LN88@intersect:
	jb	SHORT $LN1@intersect

; 184  :                     afT[iQuantity++] = fT*fInvDLength;

	mulss	xmm1, DWORD PTR _fInvDLength$[esp+68]
$LN87@intersect:

; 182  : 				{
; 183  : 					code[iQuantity]	= cyl_wall;

	mov	DWORD PTR [ebp+esi*4], 1

; 184  :                     afT[iQuantity++] = fT*fInvDLength;

	movss	DWORD PTR [edi+esi*4], xmm1
	add	esi, 1
$LN1@intersect:

; 185  : 				}
; 186  :             }
; 187  :         }
; 188  : 
; 189  :         return iQuantity;
; 190  :     }

	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 56					; 00000038H
	ret	20					; 00000014H
?intersect@?$_cylinder@M@@QBEHABU?$_vector3@M@@0QAMQAW4ecode@1@@Z ENDP ; _cylinder<float>::intersect
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?back@?$_Impl_vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@priv@stlp_std@@QAEAAUrq_result@collide@@XZ
_TEXT	SEGMENT
?back@?$_Impl_vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@priv@stlp_std@@QAEAAUrq_result@collide@@XZ PROC ; stlp_std::priv::_Impl_vector<collide::rq_result,xalloc<collide::rq_result> >::back, COMDAT
; _this$ = eax

; 195  :   reference back()              { return *(end() - 1); }

	mov	eax, DWORD PTR [eax+4]
	sub	eax, 12					; 0000000cH
	ret	0
?back@?$_Impl_vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@priv@stlp_std@@QAEAAUrq_result@collide@@XZ ENDP ; stlp_std::priv::_Impl_vector<collide::rq_result,xalloc<collide::rq_result> >::back
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_vector3d.h
_TEXT	ENDS
;	COMDAT ?max@?$_vector3@M@@QAEAAU1@ABU1@@Z
_TEXT	SEGMENT
?max@?$_vector3@M@@QAEAAU1@ABU1@@Z PROC			; _vector3<float>::max, COMDAT
; _this$ = eax
; _v$ = ecx

; 55   : 	IC	SelfRef	max(const Self &v)						{ x = _max(x,v.x);	y = _max(y,v.y);	z = _max(z,v.z);			return *this;	}

	movss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR [ecx]
	comiss	xmm0, xmm1
	ja	SHORT $LN6@max@4
	movaps	xmm0, xmm1
$LN6@max@4:
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	xmm1, DWORD PTR [ecx+4]
	comiss	xmm0, xmm1
	ja	SHORT $LN10@max@4
	movaps	xmm0, xmm1
$LN10@max@4:
	movss	DWORD PTR [eax+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	xmm1, DWORD PTR [ecx+8]
	comiss	xmm0, xmm1
	ja	SHORT $LN14@max@4
	movaps	xmm0, xmm1
$LN14@max@4:
	movss	DWORD PTR [eax+8], xmm0
	ret	0
?max@?$_vector3@M@@QAEAAU1@ABU1@@Z ENDP			; _vector3<float>::max
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?min@?$_vector3@M@@QAEAAU1@ABU1@@Z
_TEXT	SEGMENT
?min@?$_vector3@M@@QAEAAU1@ABU1@@Z PROC			; _vector3<float>::min, COMDAT
; _this$ = eax
; _v$ = ecx

; 53   : 	IC	SelfRef	min(const Self &v)						{ x = _min(x,v.x);	y = _min(y,v.y);	z = _min(z,v.z);			return *this;	}

	movss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR [ecx]
	comiss	xmm1, xmm0
	ja	SHORT $LN6@min@4
	movaps	xmm0, xmm1
$LN6@min@4:
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	xmm1, DWORD PTR [ecx+4]
	comiss	xmm1, xmm0
	ja	SHORT $LN10@min@4
	movaps	xmm0, xmm1
$LN10@min@4:
	movss	DWORD PTR [eax+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	xmm1, DWORD PTR [ecx+8]
	comiss	xmm1, xmm0
	ja	SHORT $LN14@min@4
	movaps	xmm0, xmm1
$LN14@min@4:
	movss	DWORD PTR [eax+8], xmm0
	ret	0
?min@?$_vector3@M@@QAEAAU1@ABU1@@Z ENDP			; _vector3<float>::min
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?back@?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QAEAAUshape_def@CCF_Shape@@XZ
_TEXT	SEGMENT
?back@?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QAEAAUshape_def@CCF_Shape@@XZ PROC ; stlp_std::vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::back, COMDAT
; _this$ = eax

; 100  :   reference back()              { return cast_traits::to_value_type_ref(_M_impl.back()); }

	mov	eax, DWORD PTR [eax+4]
	sub	eax, 132				; 00000084H
	ret	0
?back@?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QAEAAUshape_def@CCF_Shape@@XZ ENDP ; stlp_std::vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::back
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??A?$xr_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@@QAEAAUshape_def@CCF_Shape@@I@Z
_TEXT	SEGMENT
??A?$xr_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@@QAEAAUshape_def@CCF_Shape@@I@Z PROC ; xr_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::operator[], COMDAT
; _this$ = ecx
; __Pos$ = eax

; 139  : 	reference operator[]		(size_type _Pos)					{ {VERIFY2(_Pos<size(),make_string("index is out of range: index requested[%d], size of container[%d]", _Pos, size()).c_str());} return (*(begin() + _Pos)); }

	imul	eax, 132				; 00000084H
	add	eax, DWORD PTR [ecx]
	ret	0
??A?$xr_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@@QAEAAUshape_def@CCF_Shape@@I@Z ENDP ; xr_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::operator[]
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?size@?$xr_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@@QBEIXZ
_TEXT	SEGMENT
?size@?$xr_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@@QBEIXZ PROC ; xr_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::size, COMDAT
; _this$ = eax

; 126  : 	u32		size				() const							{ return (u32)inherited::size();} 

	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR [eax]
	mov	eax, 1041204193				; 3e0f83e1H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	ret	0
?size@?$xr_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@@QBEIXZ ENDP ; xr_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::size
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?end@?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAEPAUSElement@CCF_Skeleton@@XZ
_TEXT	SEGMENT
?end@?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAEPAUSElement@CCF_Skeleton@@XZ PROC ; stlp_std::vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::end, COMDAT
; _this$ = eax

; 81   :   iterator end()               { return cast_traits::to_value_type_ptr(_M_impl.end()); }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?end@?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAEPAUSElement@CCF_Skeleton@@XZ ENDP ; stlp_std::vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAEPAUSElement@CCF_Skeleton@@XZ
_TEXT	SEGMENT
?begin@?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAEPAUSElement@CCF_Skeleton@@XZ PROC ; stlp_std::vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::begin, COMDAT
; _this$ = eax

; 79   :   iterator begin()             { return cast_traits::to_value_type_ptr(_M_impl.begin()); }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAEPAUSElement@CCF_Skeleton@@XZ ENDP ; stlp_std::vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::begin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?clear_not_free@?$xr_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear_not_free@?$xr_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@@QAEXXZ PROC ; xr_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::clear_not_free, COMDAT
; _this$ = edi

; 129  : 	void	clear_not_free		()									{ erase(begin(),end());			}

	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ecx
	je	SHORT $LN22@clear_not_@2
	push	esi
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN30@clear_not_@2
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN30@clear_not_@2:
	mov	DWORD PTR [edi+4], eax
	pop	esi
$LN22@clear_not_@2:
	ret	0
?clear_not_free@?$xr_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@@QAEXXZ ENDP ; xr_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::clear_not_free
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_cylinder.h
_TEXT	ENDS
;	COMDAT ?intersect@?$_cylinder@M@@QBE?AW4ERP_Result@1@ABU?$_vector3@M@@0AAM@Z
_TEXT	SEGMENT
_code$ = -24						; size = 8
_afT$ = -16						; size = 8
_this$ = 8						; size = 4
_start$ = 12						; size = 4
?intersect@?$_cylinder@M@@QBE?AW4ERP_Result@1@ABU?$_vector3@M@@0AAM@Z PROC ; _cylinder<float>::intersect, COMDAT
; _dir$ = edx
; _dist$ = esi

; 198  :     {

	sub	esp, 28					; 0000001cH
	push	ebx
	push	edi

; 199  :     	T				afT[2];
; 200  : 		ecode 			code[2];
; 201  :         int cnt;
; 202  : 		if (0!=(cnt=intersect(start,dir,afT,code))){

	lea	eax, DWORD PTR _code$[esp+36]
	push	eax
	mov	eax, DWORD PTR _start$[esp+36]
	lea	ecx, DWORD PTR _afT$[esp+40]
	push	ecx
	mov	ecx, DWORD PTR _this$[esp+40]
	push	edx
	push	eax
	push	ecx
	call	?intersect@?$_cylinder@M@@QBEHABU?$_vector3@M@@0QAMQAW4ecode@1@@Z ; _cylinder<float>::intersect
	test	eax, eax
	je	$LN8@intersect@2

; 203  : 			bool		o_inside	= false;
; 204  : 			bool		b_result	= false;
; 205  : 			for (int k=0; k<cnt; k++){

	xorps	xmm1, xmm1
	xor	bl, bl
	xor	dl, dl
	xor	ecx, ecx
	cmp	eax, 4
	jl	$LC16@intersect@2
	lea	edi, DWORD PTR [eax-3]
	npad	4
$LL29@intersect@2:

; 206  : 				if (afT[k]<0.f)		{if(cnt==2)o_inside=true;	continue;	}

	movss	xmm0, DWORD PTR _afT$[esp+ecx*4+36]
	comiss	xmm1, xmm0
	jbe	SHORT $LN18@intersect@2
	cmp	eax, 2
	jne	SHORT $LN19@intersect@2
	mov	bl, 1
	jmp	SHORT $LN19@intersect@2
$LN18@intersect@2:

; 207  : 				if (afT[k]<dist)	{dist=afT[k];		b_result=true;				}

	movss	xmm2, DWORD PTR [esi]
	comiss	xmm2, xmm0
	jbe	SHORT $LN19@intersect@2
	movss	DWORD PTR [esi], xmm0
	mov	dl, 1
$LN19@intersect@2:
	movss	xmm0, DWORD PTR _afT$[esp+ecx*4+40]
	comiss	xmm1, xmm0
	jbe	SHORT $LN21@intersect@2

; 206  : 				if (afT[k]<0.f)		{if(cnt==2)o_inside=true;	continue;	}

	cmp	eax, 2
	jne	SHORT $LN22@intersect@2
	mov	bl, 1
	jmp	SHORT $LN22@intersect@2
$LN21@intersect@2:

; 207  : 				if (afT[k]<dist)	{dist=afT[k];		b_result=true;				}

	movss	xmm2, DWORD PTR [esi]
	comiss	xmm2, xmm0
	jbe	SHORT $LN22@intersect@2
	movss	DWORD PTR [esi], xmm0
	mov	dl, 1
$LN22@intersect@2:
	movss	xmm0, DWORD PTR _afT$[esp+ecx*4+44]
	comiss	xmm1, xmm0
	jbe	SHORT $LN24@intersect@2

; 206  : 				if (afT[k]<0.f)		{if(cnt==2)o_inside=true;	continue;	}

	cmp	eax, 2
	jne	SHORT $LN25@intersect@2
	mov	bl, 1
	jmp	SHORT $LN25@intersect@2
$LN24@intersect@2:

; 207  : 				if (afT[k]<dist)	{dist=afT[k];		b_result=true;				}

	movss	xmm2, DWORD PTR [esi]
	comiss	xmm2, xmm0
	jbe	SHORT $LN25@intersect@2
	movss	DWORD PTR [esi], xmm0
	mov	dl, 1
$LN25@intersect@2:
	movss	xmm0, DWORD PTR _afT$[esp+ecx*4+48]
	comiss	xmm1, xmm0
	jbe	SHORT $LN27@intersect@2

; 206  : 				if (afT[k]<0.f)		{if(cnt==2)o_inside=true;	continue;	}

	cmp	eax, 2
	jne	SHORT $LN28@intersect@2
	mov	bl, 1
	jmp	SHORT $LN28@intersect@2
$LN27@intersect@2:

; 207  : 				if (afT[k]<dist)	{dist=afT[k];		b_result=true;				}

	movss	xmm2, DWORD PTR [esi]
	comiss	xmm2, xmm0
	jbe	SHORT $LN28@intersect@2
	movss	DWORD PTR [esi], xmm0
	mov	dl, 1
$LN28@intersect@2:
	add	ecx, 4
	cmp	ecx, edi
	jl	$LL29@intersect@2
$LC16@intersect@2:

; 203  : 			bool		o_inside	= false;
; 204  : 			bool		b_result	= false;
; 205  : 			for (int k=0; k<cnt; k++){

	cmp	ecx, eax
	jge	SHORT $LN15@intersect@2
	npad	5
$LC7@intersect@2:

; 206  : 				if (afT[k]<0.f)		{if(cnt==2)o_inside=true;	continue;	}

	movss	xmm0, DWORD PTR _afT$[esp+ecx*4+36]
	comiss	xmm1, xmm0
	jbe	SHORT $LN4@intersect@2
	cmp	eax, 2
	jne	SHORT $LN6@intersect@2
	mov	bl, 1
	jmp	SHORT $LN6@intersect@2
$LN4@intersect@2:

; 207  : 				if (afT[k]<dist)	{dist=afT[k];		b_result=true;				}

	movss	xmm2, DWORD PTR [esi]
	comiss	xmm2, xmm0
	jbe	SHORT $LN6@intersect@2
	movss	DWORD PTR [esi], xmm0
	mov	dl, 1
$LN6@intersect@2:
	add	ecx, 1
	cmp	ecx, eax
	jl	SHORT $LC7@intersect@2
$LN15@intersect@2:

; 208  : 			}
; 209  : 			return		b_result?(o_inside?rpOriginInside:rpOriginOutside):rpNone;

	test	dl, dl
	je	SHORT $LN8@intersect@2
	neg	bl
	sbb	ebx, ebx
	add	ebx, 2
	mov	eax, ebx

; 210  : 		}else{
; 211  : 			return		rpNone;
; 212  : 		}
; 213  :     }

	pop	edi
	pop	ebx
	add	esp, 28					; 0000001cH
	ret	8
$LN8@intersect@2:
	pop	edi
	xor	eax, eax
	pop	ebx
	add	esp, 28					; 0000001cH
	ret	8
?intersect@?$_cylinder@M@@QBE?AW4ERP_Result@1@ABU?$_vector3@M@@0AAM@Z ENDP ; _cylinder<float>::intersect
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_sphere.h
_TEXT	ENDS
;	COMDAT ?intersect@?$_sphere@M@@QBEHABU1@@Z
_TEXT	SEGMENT
?intersect@?$_sphere@M@@QBEHABU1@@Z PROC		; _sphere<float>::intersect, COMDAT
; _this$ = ecx
; _S$ = eax

; 121  : 		T SumR = R+S.R;
; 122  : 		return P.distance_to_sqr(S.P) < SumR*SumR;

	movss	xmm3, DWORD PTR [ecx]
	subss	xmm3, DWORD PTR [eax]
	movss	xmm2, DWORD PTR [ecx+4]
	subss	xmm2, DWORD PTR [eax+4]
	movss	xmm1, DWORD PTR [ecx+8]
	subss	xmm1, DWORD PTR [eax+8]
	movss	xmm0, DWORD PTR [eax+12]
	addss	xmm0, DWORD PTR [ecx+12]
	movaps	xmm4, xmm3
	mulss	xmm4, xmm3
	movaps	xmm3, xmm2
	mulss	xmm3, xmm2
	movaps	xmm2, xmm1
	mulss	xmm2, xmm1
	addss	xmm4, xmm3
	movaps	xmm1, xmm0
	addss	xmm4, xmm2
	mulss	xmm1, xmm0
	comiss	xmm1, xmm4
	jbe	SHORT $LN3@intersect@3
	mov	eax, 1

; 123  : 	}

	ret	0
$LN3@intersect@3:

; 121  : 		T SumR = R+S.R;
; 122  : 		return P.distance_to_sqr(S.P) < SumR*SumR;

	xor	eax, eax

; 123  : 	}

	ret	0
?intersect@?$_sphere@M@@QBEHABU1@@Z ENDP		; _sphere<float>::intersect
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?intersect@?$_sphere@M@@QBEHABU?$_vector3@M@@0@Z
_TEXT	SEGMENT
_c$ = -16						; size = 4
_Q$ = -12						; size = 12
?intersect@?$_sphere@M@@QBEHABU?$_vector3@M@@0@Z PROC	; _sphere<float>::intersect, COMDAT
; _this$ = esi
; _S$ = eax
; _D$ = edi

; 111  : 	{

	sub	esp, 16					; 00000010H

; 112  : 		_vector3<T> Q;	Q.sub(P,S);

	movss	xmm0, DWORD PTR [esi]
	subss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR [esi+4]
	subss	xmm1, DWORD PTR [eax+4]
	movss	xmm2, DWORD PTR [esi+8]
	subss	xmm2, DWORD PTR [eax+8]

; 113  : 	
; 114  : 		T c = Q.magnitude	();

	movaps	xmm3, xmm0
	mulss	xmm3, xmm0
	movss	DWORD PTR _Q$[esp+16], xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, xmm1
	addss	xmm3, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, xmm2
	push	ecx
	addss	xmm3, xmm0
	movss	DWORD PTR _Q$[esp+24], xmm1
	movss	DWORD PTR _Q$[esp+28], xmm2
	movss	DWORD PTR [esp], xmm3
	call	_sqrtf
	fstp	DWORD PTR _c$[esp+20]

; 115  : 		T v = Q.dotproduct	(D);

	movss	xmm0, DWORD PTR [edi+4]
	mulss	xmm0, DWORD PTR _Q$[esp+24]
	movss	xmm1, DWORD PTR [edi+8]
	mulss	xmm1, DWORD PTR _Q$[esp+28]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [edi]
	mulss	xmm1, DWORD PTR _Q$[esp+20]
	addss	xmm0, xmm1

; 116  : 		T d = R*R - (c*c - v*v);

	movss	xmm1, DWORD PTR [esi+12]
	movaps	xmm2, xmm1
	mulss	xmm2, xmm1
	movss	xmm1, DWORD PTR _c$[esp+20]
	movaps	xmm3, xmm1
	mulss	xmm3, xmm1
	movaps	xmm1, xmm0
	mulss	xmm1, xmm0
	subss	xmm3, xmm1
	add	esp, 4
	subss	xmm2, xmm3

; 117  : 		return (d > 0);

	comiss	xmm2, DWORD PTR __real@00000000
	jbe	SHORT $LN3@intersect@4
	mov	eax, 1

; 118  : 	}

	add	esp, 16					; 00000010H
	ret	0
$LN3@intersect@4:

; 117  : 		return (d > 0);

	xor	eax, eax

; 118  : 	}

	add	esp, 16					; 00000010H
	ret	0
?intersect@?$_sphere@M@@QBEHABU?$_vector3@M@@0@Z ENDP	; _sphere<float>::intersect
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?intersect@?$_sphere@M@@QBE?AW4ERP_Result@1@ABU?$_vector3@M@@0MAAHQAM@Z
_TEXT	SEGMENT
_fA$ = -8						; size = 4
_fB$ = -4						; size = 4
_fRoot$129869 = 8					; size = 4
_fDiscr$ = 8						; size = 4
_this$ = 8						; size = 4
_range$ = 12						; size = 4
?intersect@?$_sphere@M@@QBE?AW4ERP_Result@1@ABU?$_vector3@M@@0MAAHQAM@Z PROC ; _sphere<float>::intersect, COMDAT
; _S$ = edx
; _D$ = ecx
; _quantity$ = esi
; _afT$ = ebx

; 21   : 	{

	sub	esp, 8
	mov	eax, DWORD PTR _this$[esp+4]

; 22   : 		// set up quadratic Q(t) = a*t^2 + 2*b*t + c
; 23   : 		_vector3<T> kDiff;  kDiff.sub	(S,P);

	movss	xmm2, DWORD PTR [edx+4]
	subss	xmm2, DWORD PTR [eax+4]
	movss	xmm3, DWORD PTR [edx+8]
	subss	xmm3, DWORD PTR [eax+8]

; 24   : 		T fA				= range*range;
; 25   : 		T fB				= kDiff.dotproduct(D)		* range;

	movss	xmm0, DWORD PTR [ecx+4]
	movss	xmm4, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR [edx]
	subss	xmm1, DWORD PTR [eax]
	movss	xmm6, DWORD PTR _range$[esp+4]
	mulss	xmm0, xmm2
	mulss	xmm4, xmm3
	addss	xmm0, xmm4
	movss	xmm4, DWORD PTR [ecx]
	mulss	xmm4, xmm1

; 26   : 		T fC				= kDiff.square_magnitude()	- R*R;

	movaps	xmm7, xmm1
	mulss	xmm7, xmm1
	movaps	xmm1, xmm2
	mulss	xmm1, xmm2
	addss	xmm7, xmm1
	movaps	xmm1, xmm3
	mulss	xmm1, xmm3

; 27   : 		ERP_Result result	= rpNone;
; 28   : 
; 29   : 		T fDiscr			= fB*fB - fA*fC;

	addss	xmm7, xmm1
	movss	xmm1, DWORD PTR [eax+12]
	addss	xmm0, xmm4
	mulss	xmm0, xmm6
	movaps	xmm2, xmm1
	mulss	xmm2, xmm1
	movaps	xmm5, xmm6
	mulss	xmm5, xmm6
	subss	xmm7, xmm2

; 30   : 		if ( fDiscr < (T)0.0 ){

	xorps	xmm2, xmm2
	movaps	xmm4, xmm0
	push	edi
	mulss	xmm4, xmm0
	mulss	xmm7, xmm5
	subss	xmm4, xmm7
	xor	edi, edi
	comiss	xmm2, xmm4
	movss	DWORD PTR _fA$[esp+12], xmm5
	movss	DWORD PTR _fB$[esp+12], xmm0
	movss	DWORD PTR _fDiscr$[esp+8], xmm4

; 31   : 			quantity		= 0;

	ja	$LN2@intersect@5

; 32   : 		} else if ( fDiscr > (T)0.0 ){

	comiss	xmm4, xmm2
	jbe	$LN8@intersect@5

; 33   : 			T fRoot 		= _sqrt(fDiscr);

	fld	DWORD PTR _fDiscr$[esp+8]
	push	ecx
	fstp	DWORD PTR [esp]
	call	_sqrtf

; 34   : 			T fInvA 		= ((T)1.0)/fA;
; 35   : 			afT[0]			= range*(-fB - fRoot)*fInvA;

	movss	xmm4, DWORD PTR _fB$[esp+16]
	fstp	DWORD PTR _fRoot$129869[esp+12]
	movss	xmm0, DWORD PTR __real@80000000
	movss	xmm1, DWORD PTR _fRoot$129869[esp+12]
	movss	xmm2, DWORD PTR __real@3f800000
	divss	xmm2, DWORD PTR _fA$[esp+16]
	movss	xmm3, DWORD PTR _range$[esp+12]
	subss	xmm0, xmm4
	subss	xmm0, xmm1

; 36   : 			afT[1]			= range*(-fB + fRoot)*fInvA;

	subss	xmm1, xmm4
	mulss	xmm0, xmm2
	mulss	xmm1, xmm2

; 37   : 			if ( afT[0] >= (T)0.0 )		{	quantity	= 2;					result = rpOriginOutside;	}

	xorps	xmm2, xmm2
	mulss	xmm0, xmm3
	add	esp, 4
	comiss	xmm0, xmm2
	mulss	xmm1, xmm3
	movss	DWORD PTR [ebx], xmm0
	movss	DWORD PTR [ebx+4], xmm1
	jb	SHORT $LN7@intersect@5
	mov	DWORD PTR [esi], 2
	lea	eax, DWORD PTR [edi+2]

; 46   : 	}

	pop	edi
	add	esp, 8
	ret	8
$LN7@intersect@5:

; 38   : 			else if ( afT[1] >= (T)0.0 ){	quantity	= 1; afT[0] = afT[1];	result = rpOriginInside;	}

	comiss	xmm1, xmm2
	jb	SHORT $LN2@intersect@5
	mov	eax, 1
	movss	DWORD PTR [ebx], xmm1

; 42   : 			if ( afT[0] >= (T)0.0 )		{	quantity	= 1;					result = rpOriginOutside;	}

	mov	DWORD PTR [esi], eax

; 46   : 	}

	pop	edi
	add	esp, 8
	ret	8
$LN8@intersect@5:

; 39   : 			else							quantity	= 0;
; 40   : 		} else {
; 41   : 			afT[0]			= range*(-fB/fA);

	movss	xmm1, DWORD PTR __real@80000000
	divss	xmm0, xmm5
	subss	xmm1, xmm0
	mulss	xmm1, xmm6

; 42   : 			if ( afT[0] >= (T)0.0 )		{	quantity	= 1;					result = rpOriginOutside;	}

	comiss	xmm1, xmm2
	movss	DWORD PTR [ebx], xmm1
	jb	SHORT $LN2@intersect@5
	mov	eax, 2
	mov	DWORD PTR [esi], 1

; 46   : 	}

	pop	edi
	add	esp, 8
	ret	8
$LN2@intersect@5:

; 43   : 			else							quantity	= 0;

	mov	DWORD PTR [esi], edi

; 44   : 		}
; 45   : 		return result;

	mov	eax, edi

; 46   : 	}

	pop	edi
	add	esp, 8
	ret	8
?intersect@?$_sphere@M@@QBE?AW4ERP_Result@1@ABU?$_vector3@M@@0MAAHQAM@Z ENDP ; _sphere<float>::intersect
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?identity@?$_sphere@M@@QAEXXZ
_TEXT	SEGMENT
?identity@?$_sphere@M@@QAEXXZ PROC			; _sphere<float>::identity, COMDAT
; _this$ = eax

; 11   : 	IC void		identity()							{ P.set(0,0,0); R=1; }

	xorps	xmm0, xmm0
	movss	DWORD PTR [eax], xmm0
	movss	DWORD PTR [eax+4], xmm0
	movss	DWORD PTR [eax+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+12], xmm0
	ret	0
?identity@?$_sphere@M@@QAEXXZ ENDP			; _sphere<float>::identity
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?set@?$_sphere@M@@QAEXABU1@@Z
_TEXT	SEGMENT
?set@?$_sphere@M@@QAEXABU1@@Z PROC			; _sphere<float>::set, COMDAT
; _this$ = ecx
; _S$ = eax

; 10   : 	IC void		set(const _sphere<T> &S)			{ P.set(S.P); R=S.R; }

	fld	DWORD PTR [eax]
	fstp	DWORD PTR [ecx]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [ecx+4]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR [ecx+8]
	fld	DWORD PTR [eax+12]
	fstp	DWORD PTR [ecx+12]
	ret	0
?set@?$_sphere@M@@QAEXABU1@@Z ENDP			; _sphere<float>::set
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_obb.h
_TEXT	ENDS
;	COMDAT ?xform_get@?$_obb@M@@QBEXAAU?$_matrix@M@@@Z
_TEXT	SEGMENT
?xform_get@?$_obb@M@@QBEXAAU?$_matrix@M@@@Z PROC	; _obb<float>::xform_get, COMDAT
; _this$ = ecx
; _D$ = eax

; 63   : 		D.i.set(m_rotate.i); D._14_ = 0;

	fld	DWORD PTR [ecx]
	xorps	xmm0, xmm0
	fstp	DWORD PTR [eax]
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+4]
	fld	DWORD PTR [ecx+8]
	movss	DWORD PTR [eax+12], xmm0
	fstp	DWORD PTR [eax+8]

; 64   : 		D.j.set(m_rotate.j); D._24_ = 0;

	fld	DWORD PTR [ecx+12]
	fstp	DWORD PTR [eax+16]
	fld	DWORD PTR [ecx+16]
	fstp	DWORD PTR [eax+20]
	fld	DWORD PTR [ecx+20]
	fstp	DWORD PTR [eax+24]
	movss	DWORD PTR [eax+28], xmm0

; 65   : 		D.k.set(m_rotate.k); D._34_ = 0;

	fld	DWORD PTR [ecx+24]
	fstp	DWORD PTR [eax+32]
	fld	DWORD PTR [ecx+28]
	fstp	DWORD PTR [eax+36]
	fld	DWORD PTR [ecx+32]
	fstp	DWORD PTR [eax+40]
	movss	DWORD PTR [eax+44], xmm0

; 66   : 		D.c.set(m_translate);D._44_ = 1;

	fld	DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR __real@3f800000
	fstp	DWORD PTR [eax+48]
	fld	DWORD PTR [ecx+40]
	fstp	DWORD PTR [eax+52]
	fld	DWORD PTR [ecx+44]
	fstp	DWORD PTR [eax+56]
	movss	DWORD PTR [eax+60], xmm0

; 67   : 	}

	ret	0
?xform_get@?$_obb@M@@QBEXAAU?$_matrix@M@@@Z ENDP	; _obb<float>::xform_get
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_fbox.h
_TEXT	ENDS
;	COMDAT ?Pick2@?$_box3@M@@QAE?AW4ERP_Result@1@ABU?$_vector3@M@@0AAU3@@Z
_TEXT	SEGMENT
_MaxT$ = -12						; size = 12
?Pick2@?$_box3@M@@QAE?AW4ERP_Result@1@ABU?$_vector3@M@@0AAU3@@Z PROC ; _box3<float>::Pick2, COMDAT
; _this$ = ecx
; _origin$ = edx
; _dir$ = eax
; _coord$ = esi

; 202  : 	{

	sub	esp, 12					; 0000000cH

; 203  : 		BOOL Inside = TRUE;
; 204  : 		Tvector		MaxT;
; 205  : 		MaxT.x=MaxT.y=MaxT.z=-1.0f;

	movss	xmm0, DWORD PTR __real@bf800000

; 206  : 		
; 207  : 		// Find candidate planes.
; 208  : 		{
; 209  : 			if(origin[0] < min[0]) {

	movss	xmm1, DWORD PTR [edx]
	movss	xmm2, DWORD PTR [ecx]
	comiss	xmm2, xmm1
	push	edi
	movaps	xmm4, xmm0
	movaps	xmm3, xmm0
	mov	edi, 1
	movss	DWORD PTR _MaxT$[esp+24], xmm4
	movss	DWORD PTR _MaxT$[esp+20], xmm3
	movss	DWORD PTR _MaxT$[esp+16], xmm0
	jbe	SHORT $LN34@Pick2

; 210  : 				coord[0]	= min[0];
; 211  : 				Inside		= FALSE;

	xor	edi, edi
	movss	DWORD PTR [esi], xmm2

; 212  : 				if(IR(dir[0]))	MaxT[0] = (min[0] - origin[0]) / dir[0]; // Calculate T distances to candidate planes

	cmp	DWORD PTR [eax], edi
	je	SHORT $LN30@Pick2
	movss	xmm0, DWORD PTR [ecx]
	jmp	SHORT $LN265@Pick2
$LN34@Pick2:

; 213  : 			} else if(origin[0] > max[0]) {

	movss	xmm2, DWORD PTR [ecx+12]
	comiss	xmm1, xmm2
	jbe	SHORT $LN30@Pick2

; 214  : 				coord[0]	= max[0];
; 215  : 				Inside		= FALSE;

	xor	edi, edi
	movss	DWORD PTR [esi], xmm2

; 216  : 				if(IR(dir[0]))	MaxT[0] = (max[0] - origin[0]) / dir[0]; // Calculate T distances to candidate planes

	cmp	DWORD PTR [eax], edi
	je	SHORT $LN30@Pick2
	movss	xmm0, DWORD PTR [ecx+12]
$LN265@Pick2:
	subss	xmm0, DWORD PTR [edx]
	divss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _MaxT$[esp+16], xmm0
$LN30@Pick2:

; 217  : 			}
; 218  : 		}
; 219  : 		{
; 220  : 			if(origin[1] < min[1]) {

	movss	xmm1, DWORD PTR [edx+4]
	movss	xmm2, DWORD PTR [ecx+4]
	comiss	xmm2, xmm1
	jbe	SHORT $LN29@Pick2

; 221  : 				coord[1]	= min[1];
; 222  : 				Inside		= FALSE;

	xor	edi, edi
	movss	DWORD PTR [esi+4], xmm2

; 223  : 				if(IR(dir[1]))	MaxT[1] = (min[1] - origin[1]) / dir[1]; // Calculate T distances to candidate planes

	cmp	DWORD PTR [eax+4], edi
	je	SHORT $LN25@Pick2
	movss	xmm3, DWORD PTR [ecx+4]
	jmp	SHORT $LN266@Pick2
$LN29@Pick2:

; 224  : 			} else if(origin[1] > max[1]) {

	movss	xmm2, DWORD PTR [ecx+16]
	comiss	xmm1, xmm2
	jbe	SHORT $LN25@Pick2

; 225  : 				coord[1]	= max[1];
; 226  : 				Inside		= FALSE;

	xor	edi, edi
	movss	DWORD PTR [esi+4], xmm2

; 227  : 				if(IR(dir[1]))	MaxT[1] = (max[1] - origin[1]) / dir[1]; // Calculate T distances to candidate planes

	cmp	DWORD PTR [eax+4], edi
	je	SHORT $LN25@Pick2
	movss	xmm3, DWORD PTR [ecx+16]
$LN266@Pick2:
	subss	xmm3, DWORD PTR [edx+4]
	divss	xmm3, DWORD PTR [eax+4]
	movss	DWORD PTR _MaxT$[esp+20], xmm3
$LN25@Pick2:

; 228  : 			}
; 229  : 		}
; 230  : 		{
; 231  : 			if(origin[2] < min[2]) {

	movss	xmm1, DWORD PTR [edx+8]
	movss	xmm2, DWORD PTR [ecx+8]
	comiss	xmm2, xmm1
	jbe	$LN24@Pick2

; 232  : 				coord[2]	= min[2];

	movss	DWORD PTR [esi+8], xmm2

; 233  : 				Inside		= FALSE;
; 234  : 				if(IR(dir[2]))	MaxT[2] = (min[2] - origin[2]) / dir[2]; // Calculate T distances to candidate planes

	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN19@Pick2
	movss	xmm4, DWORD PTR [ecx+8]
$LN267@Pick2:
	subss	xmm4, DWORD PTR [edx+8]
	divss	xmm4, DWORD PTR [eax+8]
	movss	DWORD PTR _MaxT$[esp+24], xmm4
$LN19@Pick2:

; 247  : 		}
; 248  : 		
; 249  : 		// Get largest of the maxT's for final choice of intersection
; 250  : 		u32 WhichPlane = 0;

	xor	edi, edi

; 251  : 		if(MaxT[1] > MaxT[0])			WhichPlane = 1;

	comiss	xmm3, xmm0
	jbe	SHORT $LN18@Pick2
	mov	edi, 1
$LN18@Pick2:

; 252  : 		if(MaxT[2] > MaxT[WhichPlane])	WhichPlane = 2;

	comiss	xmm4, DWORD PTR _MaxT$[esp+edi*4+16]
	jbe	SHORT $LN17@Pick2
	mov	edi, 2
$LN17@Pick2:

; 253  : 		
; 254  : 		// Check final candidate actually inside box
; 255  : 		if(IR(MaxT[WhichPlane])&0x80000000) return rpNone;

	test	DWORD PTR _MaxT$[esp+edi*4+16], -2147483648 ; 80000000H
	jne	$LN5@Pick2

; 256  : 		
; 257  : 		if (0==WhichPlane)

	test	edi, edi
	jne	$LN15@Pick2

; 258  : 		{
; 259  : 			// 1 & 2
; 260  : 			coord[1] = origin[1] + MaxT[0] * dir[1];

	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm1, xmm0
	addss	xmm1, DWORD PTR [edx+4]
	movss	DWORD PTR [esi+4], xmm1

; 261  : 			if((coord[1] < min[1]) || (coord[1] > max[1]))	return rpNone;

	movss	xmm2, DWORD PTR [ecx+4]
	comiss	xmm2, xmm1
	ja	$LN5@Pick2
	comiss	xmm1, DWORD PTR [ecx+16]
	ja	$LN5@Pick2

; 262  : 			coord[2] = origin[2] + MaxT[0] * dir[2];

	movss	xmm1, DWORD PTR [eax+8]
	mulss	xmm1, xmm0
	addss	xmm1, DWORD PTR [edx+8]
	movss	DWORD PTR [esi+8], xmm1

; 263  : 			if((coord[2] < min[2]) || (coord[2] > max[2]))	return rpNone;

	movss	xmm0, DWORD PTR [ecx+8]
	comiss	xmm0, xmm1
	ja	$LN5@Pick2
	comiss	xmm1, DWORD PTR [ecx+20]
	ja	$LN5@Pick2

; 264  : 			return rpOriginOutside;

	lea	eax, DWORD PTR [edi+2]
	pop	edi

; 285  : 	}

	add	esp, 12					; 0000000cH
	ret	0
$LN24@Pick2:

; 235  : 			} else if(origin[2] > max[2]) {

	movss	xmm2, DWORD PTR [ecx+20]
	comiss	xmm1, xmm2
	jbe	SHORT $LN20@Pick2

; 236  : 				coord[2]	= max[2];

	movss	DWORD PTR [esi+8], xmm2

; 237  : 				Inside		= FALSE;
; 238  : 				if(IR(dir[2]))	MaxT[2] = (max[2] - origin[2]) / dir[2]; // Calculate T distances to candidate planes

	cmp	DWORD PTR [eax+8], 0
	je	$LN19@Pick2
	movss	xmm4, DWORD PTR [ecx+20]

; 239  : 			}
; 240  : 		}
; 241  : 		
; 242  : 		// Ray origin inside bounding box
; 243  : 		if(Inside)

	jmp	$LN267@Pick2
$LN20@Pick2:
	test	edi, edi
	je	$LN19@Pick2

; 244  : 		{
; 245  : 			coord	= origin;

	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [esi], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [esi+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [esi+8], edx

; 246  : 			return	rpOriginInside;

	mov	eax, 1
	pop	edi

; 285  : 	}

	add	esp, 12					; 0000000cH
	ret	0
$LN15@Pick2:

; 265  : 		}
; 266  : 		if (1==WhichPlane)

	cmp	edi, 1
	jne	SHORT $LN10@Pick2

; 267  : 		{
; 268  : 			// 0 & 2
; 269  : 			coord[0] = origin[0] + MaxT[1] * dir[0];

	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, xmm3
	addss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR [esi], xmm0

; 270  : 			if((coord[0] < min[0]) || (coord[0] > max[0]))	return rpNone;

	movss	xmm1, DWORD PTR [ecx]
	comiss	xmm1, xmm0
	ja	SHORT $LN5@Pick2
	comiss	xmm0, DWORD PTR [ecx+12]
	ja	SHORT $LN5@Pick2

; 271  : 			coord[2] = origin[2] + MaxT[1] * dir[2];

	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, xmm3
	addss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR [esi+8], xmm0

; 272  : 			if((coord[2] < min[2]) || (coord[2] > max[2]))	return rpNone;

	movss	xmm1, DWORD PTR [ecx+8]
	comiss	xmm1, xmm0
	ja	SHORT $LN5@Pick2
	comiss	xmm0, DWORD PTR [ecx+20]
	ja	SHORT $LN5@Pick2

; 273  : 			return rpOriginOutside;

	lea	eax, DWORD PTR [edi+1]
	pop	edi

; 285  : 	}

	add	esp, 12					; 0000000cH
	ret	0
$LN10@Pick2:

; 274  : 		}
; 275  : 		if (2==WhichPlane)

	cmp	edi, 2
	jne	SHORT $LN5@Pick2

; 276  : 		{
; 277  : 			// 0 & 1
; 278  : 			coord[0] = origin[0] + MaxT[2] * dir[0];

	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, xmm4
	addss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR [esi], xmm0

; 279  : 			if((coord[0] < min[0]) || (coord[0] > max[0]))	return rpNone;

	movss	xmm1, DWORD PTR [ecx]
	comiss	xmm1, xmm0
	ja	SHORT $LN5@Pick2
	comiss	xmm0, DWORD PTR [ecx+12]
	ja	SHORT $LN5@Pick2

; 280  : 			coord[1] = origin[1] + MaxT[2] * dir[1];

	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, xmm4
	addss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR [esi+4], xmm0

; 281  : 			if((coord[1] < min[1]) || (coord[1] > max[1]))	return rpNone;

	movss	xmm1, DWORD PTR [ecx+4]
	comiss	xmm1, xmm0
	ja	SHORT $LN5@Pick2
	comiss	xmm0, DWORD PTR [ecx+16]
	ja	SHORT $LN5@Pick2

; 282  : 			return rpOriginOutside;

	mov	eax, edi
	pop	edi

; 285  : 	}

	add	esp, 12					; 0000000cH
	ret	0
$LN5@Pick2:

; 283  : 		}
; 284  : 		return rpNone;

	xor	eax, eax
	pop	edi

; 285  : 	}

	add	esp, 12					; 0000000cH
	ret	0
?Pick2@?$_box3@M@@QAE?AW4ERP_Result@1@ABU?$_vector3@M@@0AAU3@@Z ENDP ; _box3<float>::Pick2
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?getsphere@?$_box3@M@@QBEABV1@AAU?$_vector3@M@@AAM@Z
_TEXT	SEGMENT
_R$ = 8							; size = 4
?getsphere@?$_box3@M@@QBEABV1@AAU?$_vector3@M@@AAM@Z PROC ; _box3<float>::getsphere, COMDAT
; _this$ = esi
; _C$ = eax

; 115  : 		getcenter			(C);

	movss	xmm0, DWORD PTR [esi]
	addss	xmm0, DWORD PTR [esi+12]
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR [esi+16]
	addss	xmm0, DWORD PTR [esi+4]

; 116  : 		R = C.distance_to	(max);

	movss	xmm2, DWORD PTR [eax]
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax+4], xmm0
	movss	xmm0, DWORD PTR [esi+20]
	addss	xmm0, DWORD PTR [esi+8]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR [eax+4]
	movss	DWORD PTR [eax+8], xmm0
	subss	xmm0, DWORD PTR [esi+20]
	subss	xmm2, DWORD PTR [esi+12]
	subss	xmm1, DWORD PTR [esi+16]
	movaps	xmm3, xmm0
	mulss	xmm3, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, xmm2
	addss	xmm3, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, xmm1
	push	ecx
	addss	xmm3, xmm0
	movss	DWORD PTR [esp], xmm3
	call	_sqrtf
	mov	eax, DWORD PTR _R$[esp]
	fstp	DWORD PTR [eax]
	add	esp, 4

; 117  : 		return				*this;

	mov	eax, esi

; 118  : 	};

	ret	4
?getsphere@?$_box3@M@@QBEABV1@AAU?$_vector3@M@@AAM@Z ENDP ; _box3<float>::getsphere
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?modify@?$_box3@M@@QAEAAV1@ABU?$_vector3@M@@@Z
_TEXT	SEGMENT
?modify@?$_box3@M@@QAEAAV1@ABU?$_vector3@M@@@Z PROC	; _box3<float>::modify, COMDAT
; _this$ = eax
; _p$ = ecx

; 55   : 	ICF	SelfRef	modify		(const Tvector &p)				{ min.min(p); max.max(p);				return *this;	}

	movss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR [ecx]
	comiss	xmm1, xmm0
	ja	SHORT $LN8@modify
	movaps	xmm0, xmm1
$LN8@modify:
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	xmm1, DWORD PTR [ecx+4]
	comiss	xmm1, xmm0
	ja	SHORT $LN12@modify
	movaps	xmm0, xmm1
$LN12@modify:
	movss	DWORD PTR [eax+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	xmm1, DWORD PTR [ecx+8]
	comiss	xmm1, xmm0
	ja	SHORT $LN16@modify
	movaps	xmm0, xmm1
$LN16@modify:
	movss	DWORD PTR [eax+8], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	xmm1, DWORD PTR [ecx]
	comiss	xmm0, xmm1
	ja	SHORT $LN22@modify
	movaps	xmm0, xmm1
$LN22@modify:
	movss	DWORD PTR [eax+12], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	xmm1, DWORD PTR [ecx+4]
	comiss	xmm0, xmm1
	ja	SHORT $LN26@modify
	movaps	xmm0, xmm1
$LN26@modify:
	movss	DWORD PTR [eax+16], xmm0
	movss	xmm0, DWORD PTR [eax+20]
	movss	xmm1, DWORD PTR [ecx+8]
	comiss	xmm0, xmm1
	ja	SHORT $LN30@modify
	movaps	xmm0, xmm1
$LN30@modify:
	movss	DWORD PTR [eax+20], xmm0
	ret	0
?modify@?$_box3@M@@QAEAAV1@ABU?$_vector3@M@@@Z ENDP	; _box3<float>::modify
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?grow@?$_box3@M@@QAEAAV1@M@Z
_TEXT	SEGMENT
?grow@?$_box3@M@@QAEAAV1@M@Z PROC			; _box3<float>::grow, COMDAT
; _this$ = eax

; 41   : 	IC	SelfRef	grow		(T s)							{ min.sub(s); max.add(s);	return *this;	};

	movss	xmm0, DWORD PTR _LDIST
	movss	xmm1, DWORD PTR [eax]
	subss	xmm1, xmm0
	movss	DWORD PTR [eax], xmm1
	movss	xmm1, DWORD PTR [eax+4]
	subss	xmm1, xmm0
	movss	DWORD PTR [eax+4], xmm1
	movss	xmm1, DWORD PTR [eax+8]
	subss	xmm1, xmm0
	movss	DWORD PTR [eax+8], xmm1
	movss	xmm1, DWORD PTR [eax+12]
	addss	xmm1, xmm0
	movss	DWORD PTR [eax+12], xmm1
	movss	xmm1, DWORD PTR [eax+16]
	addss	xmm1, xmm0
	movss	DWORD PTR [eax+16], xmm1
	movss	xmm1, DWORD PTR [eax+20]
	addss	xmm1, xmm0
	movss	DWORD PTR [eax+20], xmm1
	ret	0
?grow@?$_box3@M@@QAEAAV1@M@Z ENDP			; _box3<float>::grow
_TEXT	ENDS
PUBLIC	__real@ff7fffff
;	COMDAT __real@ff7fffff
; File d:\clearsky\sources\engine\xrcore\_vector3d.h
CONST	SEGMENT
__real@ff7fffff DD 0ff7fffffr			; -3.40282e+038
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_fbox.h
CONST	ENDS
;	COMDAT ?invalidate@?$_box3@M@@QAEAAV1@XZ
_TEXT	SEGMENT
?invalidate@?$_box3@M@@QAEAAV1@XZ PROC			; _box3<float>::invalidate, COMDAT
; _this$ = eax

; 37   : 	IC	SelfRef	invalidate	()								{ min.set(type_max(T),type_max(T),type_max(T)); max.set(type_min(T),type_min(T),type_min(T));	return *this;	}

	movss	xmm0, DWORD PTR __real@7f7fffff
	movss	DWORD PTR [eax], xmm0
	movss	DWORD PTR [eax+4], xmm0
	movss	DWORD PTR [eax+8], xmm0
	movss	xmm0, DWORD PTR __real@ff7fffff
	movss	DWORD PTR [eax+12], xmm0
	movss	DWORD PTR [eax+16], xmm0
	movss	DWORD PTR [eax+20], xmm0
	ret	0
?invalidate@?$_box3@M@@QAEAAV1@XZ ENDP			; _box3<float>::invalidate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?identity@?$_box3@M@@QAEAAV1@XZ
_TEXT	SEGMENT
?identity@?$_box3@M@@QAEAAV1@XZ PROC			; _box3<float>::identity, COMDAT
; _this$ = eax

; 36   : 	IC	SelfRef	identity	()								{ min.set(-0.5,-0.5,-0.5);	max.set(0.5,0.5,0.5);						return *this;	};

	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [eax], xmm0
	movss	DWORD PTR [eax+4], xmm0
	movss	DWORD PTR [eax+8], xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [eax+12], xmm0
	movss	DWORD PTR [eax+16], xmm0
	movss	DWORD PTR [eax+20], xmm0
	ret	0
?identity@?$_box3@M@@QAEAAV1@XZ ENDP			; _box3<float>::identity
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?set@?$_box3@M@@QAEAAV1@ABV1@@Z
_TEXT	SEGMENT
?set@?$_box3@M@@QAEAAV1@ABV1@@Z PROC			; _box3<float>::set, COMDAT
; _this$ = eax
; _b$ = ecx

; 32   : 	IC	SelfRef	set			(SelfCRef b)								{ min.set(b.min);	max.set(b.max);		return *this;	};

	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+4]
	fld	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+8]
	fld	DWORD PTR [ecx+12]
	fstp	DWORD PTR [eax+12]
	fld	DWORD PTR [ecx+16]
	fstp	DWORD PTR [eax+16]
	fld	DWORD PTR [ecx+20]
	fstp	DWORD PTR [eax+20]
	ret	0
?set@?$_box3@M@@QAEAAV1@ABV1@@Z ENDP			; _box3<float>::set
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?set@?$_box3@M@@QAEAAV1@MMMMMM@Z
_TEXT	SEGMENT
?set@?$_box3@M@@QAEAAV1@MMMMMM@Z PROC			; _box3<float>::set, COMDAT
; _this$ = eax

; 31   : 	IC	SelfRef	set			(T x1, T y1, T z1, T x2, T y2, T z2)		{ min.set(x1,y1,z1);max.set(x2,y2,z2);	return *this;	};

	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [eax], xmm0
	movss	DWORD PTR [eax+4], xmm0
	movss	DWORD PTR [eax+8], xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [eax+12], xmm0
	movss	DWORD PTR [eax+16], xmm0
	movss	DWORD PTR [eax+20], xmm0
	ret	0
?set@?$_box3@M@@QAEAAV1@MMMMMM@Z ENDP			; _box3<float>::set
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?back@?$vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@stlp_std@@QAEAAUrq_result@collide@@XZ
_TEXT	SEGMENT
?back@?$vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@stlp_std@@QAEAAUrq_result@collide@@XZ PROC ; stlp_std::vector<collide::rq_result,xalloc<collide::rq_result> >::back, COMDAT
; _this$ = eax

; 100  :   reference back()              { return cast_traits::to_value_type_ref(_M_impl.back()); }

	mov	eax, DWORD PTR [eax+4]
	sub	eax, 12					; 0000000cH
	ret	0
?back@?$vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@stlp_std@@QAEAAUrq_result@collide@@XZ ENDP ; stlp_std::vector<collide::rq_result,xalloc<collide::rq_result> >::back
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_matrix.h
_TEXT	ENDS
;	COMDAT ?transform_tiny@?$_matrix@M@@QBEXAAU?$_vector3@M@@@Z
_TEXT	SEGMENT
?transform_tiny@?$_matrix@M@@QBEXAAU?$_vector3@M@@@Z PROC ; _matrix<float>::transform_tiny, COMDAT
; _this$ = eax
; _v$ = ecx

; 544  : 		Tvector			res;
; 545  : 		transform_tiny	(res,v);

	movss	xmm4, DWORD PTR [ecx+4]
	movss	xmm3, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [eax+16]
	movss	xmm1, DWORD PTR [eax+32]
	movss	xmm5, DWORD PTR [ecx]
	movss	xmm2, DWORD PTR [eax+20]
	mulss	xmm1, xmm3
	mulss	xmm0, xmm4
	addss	xmm0, xmm1
	mulss	xmm2, xmm4
	movaps	xmm1, xmm5
	mulss	xmm1, DWORD PTR [eax]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [eax+48]
	mulss	xmm1, xmm5
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR [eax+36]
	mulss	xmm2, xmm3
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR [eax+8]
	addss	xmm1, DWORD PTR [eax+52]
	mulss	xmm2, xmm5
	movss	xmm5, DWORD PTR [eax+24]
	mulss	xmm5, xmm4
	movss	xmm4, DWORD PTR [eax+40]
	addss	xmm2, xmm5
	mulss	xmm4, xmm3
	addss	xmm2, xmm4
	addss	xmm2, DWORD PTR [eax+56]

; 546  : 		v.set			(res);

	movss	DWORD PTR [ecx], xmm0
	movss	DWORD PTR [ecx+4], xmm1
	movss	DWORD PTR [ecx+8], xmm2

; 547  : 	}

	ret	0
?transform_tiny@?$_matrix@M@@QBEXAAU?$_vector3@M@@@Z ENDP ; _matrix<float>::transform_tiny
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?invert_b@?$_matrix@M@@QAE_NABU1@@Z
_TEXT	SEGMENT
_fDetInv$ = -4						; size = 4
?invert_b@?$_matrix@M@@QAE_NABU1@@Z PROC		; _matrix<float>::invert_b, COMDAT
; _this$ = edi
; _a$ = esi

; 183  : 	IC	bool	invert_b	( const Self &a )	{		// important: this is 4x3 invert, not the 4x4 one

	push	ecx

; 184  : 		// faster than self-invert
; 185  : 		T fDetInv = ( a._11 * ( a._22 * a._33 - a._23 * a._32 ) -
; 186  : 			a._12 * ( a._21 * a._33 - a._23 * a._31 ) +
; 187  : 			a._13 * ( a._21 * a._32 - a._22 * a._31 ) );

	movss	xmm3, DWORD PTR [esi+40]
	movss	xmm4, DWORD PTR [esi+20]
	movss	xmm6, DWORD PTR [esi+24]
	movss	xmm5, DWORD PTR [esi+36]
	movss	xmm0, DWORD PTR [esi+16]
	movss	xmm2, DWORD PTR [esi+32]
	movaps	xmm1, xmm4
	mulss	xmm1, xmm3
	movaps	xmm7, xmm6
	mulss	xmm7, xmm5
	subss	xmm1, xmm7
	mulss	xmm1, DWORD PTR [esi]
	movaps	xmm7, xmm0
	mulss	xmm7, xmm3
	movaps	xmm3, xmm2
	mulss	xmm3, xmm6
	mulss	xmm0, xmm5
	subss	xmm7, xmm3
	mulss	xmm7, DWORD PTR [esi+4]
	mulss	xmm2, xmm4
	subss	xmm0, xmm2
	mulss	xmm0, DWORD PTR [esi+8]
	subss	xmm1, xmm7
	addss	xmm1, xmm0
	movss	DWORD PTR _fDetInv$[esp+4], xmm1

; 188  : 
; 189  : 		if (_abs(fDetInv)<=flt_zero)	return	false;

	fld	DWORD PTR _fDetInv$[esp+4]
	push	ecx
	fstp	DWORD PTR [esp]
	call	_fabsf
	fld	DWORD PTR __real@00800000
	add	esp, 4
	fcomip	ST(1)
	fstp	ST(0)
	jb	SHORT $LN1@invert_b
	xor	al, al

; 212  : 	}

	pop	ecx
	ret	0
$LN1@invert_b:

; 190  : 		fDetInv=1.0f/fDetInv;
; 191  : 
; 192  : 		_11 =  fDetInv * ( a._22 * a._33 - a._23 * a._32 );

	movss	xmm1, DWORD PTR [esi+20]
	mulss	xmm1, DWORD PTR [esi+40]
	movss	xmm2, DWORD PTR [esi+36]
	mulss	xmm2, DWORD PTR [esi+24]
	movss	xmm3, DWORD PTR __real@3f800000
	subss	xmm1, xmm2
	movaps	xmm0, xmm3
	divss	xmm0, DWORD PTR _fDetInv$[esp+4]
	mulss	xmm1, xmm0
	movss	DWORD PTR [edi], xmm1

; 193  : 		_12 = -fDetInv * ( a._12 * a._33 - a._13 * a._32 );

	movss	xmm2, DWORD PTR [esi+4]
	mulss	xmm2, DWORD PTR [esi+40]
	movss	xmm1, DWORD PTR [esi+36]
	mulss	xmm1, DWORD PTR [esi+8]
	subss	xmm2, xmm1
	movss	xmm1, DWORD PTR __real@80000000
	mulss	xmm2, xmm0
	movaps	xmm4, xmm1
	subss	xmm4, xmm2
	movss	DWORD PTR [edi+4], xmm4

; 194  : 		_13 =  fDetInv * ( a._12 * a._23 - a._13 * a._22 );

	movss	xmm2, DWORD PTR [esi+4]
	mulss	xmm2, DWORD PTR [esi+24]
	movss	xmm4, DWORD PTR [esi+8]
	mulss	xmm4, DWORD PTR [esi+20]
	subss	xmm2, xmm4
	mulss	xmm2, xmm0
	movss	DWORD PTR [edi+8], xmm2

; 195  : 		_14 = 0.0f;

	xorps	xmm2, xmm2
	movss	DWORD PTR [edi+12], xmm2

; 196  : 
; 197  : 		_21 = -fDetInv * ( a._21 * a._33 - a._23 * a._31 );

	movss	xmm4, DWORD PTR [esi+16]
	mulss	xmm4, DWORD PTR [esi+40]
	movss	xmm5, DWORD PTR [esi+32]
	mulss	xmm5, DWORD PTR [esi+24]
	subss	xmm4, xmm5
	mulss	xmm4, xmm0
	movaps	xmm5, xmm1
	subss	xmm5, xmm4
	movss	DWORD PTR [edi+16], xmm5

; 198  : 		_22 =  fDetInv * ( a._11 * a._33 - a._13 * a._31 );

	movss	xmm4, DWORD PTR [esi]
	mulss	xmm4, DWORD PTR [esi+40]
	movss	xmm5, DWORD PTR [esi+32]
	mulss	xmm5, DWORD PTR [esi+8]
	subss	xmm4, xmm5
	mulss	xmm4, xmm0
	movss	DWORD PTR [edi+20], xmm4

; 199  : 		_23 = -fDetInv * ( a._11 * a._23 - a._13 * a._21 );

	movss	xmm4, DWORD PTR [esi]
	mulss	xmm4, DWORD PTR [esi+24]
	movss	xmm5, DWORD PTR [esi+16]
	mulss	xmm5, DWORD PTR [esi+8]
	subss	xmm4, xmm5
	mulss	xmm4, xmm0

; 200  : 		_24 = 0.0f;

	movss	DWORD PTR [edi+28], xmm2
	movaps	xmm5, xmm1
	subss	xmm5, xmm4
	movss	DWORD PTR [edi+24], xmm5

; 201  : 
; 202  : 		_31 =  fDetInv * ( a._21 * a._32 - a._22 * a._31 );

	movss	xmm4, DWORD PTR [esi+36]
	mulss	xmm4, DWORD PTR [esi+16]
	movss	xmm5, DWORD PTR [esi+32]
	mulss	xmm5, DWORD PTR [esi+20]
	subss	xmm4, xmm5
	mulss	xmm4, xmm0
	movss	DWORD PTR [edi+32], xmm4

; 203  : 		_32 = -fDetInv * ( a._11 * a._32 - a._12 * a._31 );

	movss	xmm4, DWORD PTR [esi+36]
	mulss	xmm4, DWORD PTR [esi]
	movss	xmm5, DWORD PTR [esi+32]
	mulss	xmm5, DWORD PTR [esi+4]
	subss	xmm4, xmm5
	mulss	xmm4, xmm0
	movaps	xmm5, xmm1
	subss	xmm5, xmm4
	movss	DWORD PTR [edi+36], xmm5

; 204  : 		_33 =  fDetInv * ( a._11 * a._22 - a._12 * a._21 );

	movss	xmm4, DWORD PTR [esi+20]
	mulss	xmm4, DWORD PTR [esi]
	movss	xmm5, DWORD PTR [esi+16]
	mulss	xmm5, DWORD PTR [esi+4]
	subss	xmm4, xmm5
	mulss	xmm4, xmm0
	movss	DWORD PTR [edi+40], xmm4

; 205  : 		_34 = 0.0f;

	movss	DWORD PTR [edi+44], xmm2

; 206  : 
; 207  : 		_41 = -( a._41 * _11 + a._42 * _21 + a._43 * _31 );

	movss	xmm0, DWORD PTR [esi+52]
	mulss	xmm0, DWORD PTR [edi+16]
	movss	xmm2, DWORD PTR [edi+32]
	mulss	xmm2, DWORD PTR [esi+56]
	addss	xmm0, xmm2
	movss	xmm2, DWORD PTR [esi+48]
	mulss	xmm2, DWORD PTR [edi]
	addss	xmm0, xmm2
	movaps	xmm2, xmm1
	subss	xmm2, xmm0
	movss	DWORD PTR [edi+48], xmm2

; 208  : 		_42 = -( a._41 * _12 + a._42 * _22 + a._43 * _32 );

	movss	xmm0, DWORD PTR [esi+48]
	mulss	xmm0, DWORD PTR [edi+4]
	movss	xmm2, DWORD PTR [edi+36]
	mulss	xmm2, DWORD PTR [esi+56]
	addss	xmm0, xmm2
	movss	xmm2, DWORD PTR [esi+52]
	mulss	xmm2, DWORD PTR [edi+20]
	addss	xmm0, xmm2
	movaps	xmm2, xmm1
	subss	xmm2, xmm0
	movss	DWORD PTR [edi+52], xmm2

; 209  : 		_43 = -( a._41 * _13 + a._42 * _23 + a._43 * _33 );

	movss	xmm0, DWORD PTR [esi+52]
	movss	xmm2, DWORD PTR [esi+48]
	mulss	xmm2, DWORD PTR [edi+8]
	mulss	xmm0, DWORD PTR [edi+24]
	addss	xmm0, xmm2
	movss	xmm2, DWORD PTR [esi+56]
	mulss	xmm2, xmm4
	addss	xmm0, xmm2
	subss	xmm1, xmm0
	movss	DWORD PTR [edi+56], xmm1

; 210  : 		_44 = 1.0f;

	movss	DWORD PTR [edi+60], xmm3

; 211  : 		return true;

	mov	al, 1

; 212  : 	}

	pop	ecx
	ret	0
?invert_b@?$_matrix@M@@QAE_NABU1@@Z ENDP		; _matrix<float>::invert_b
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?set@?$_matrix@M@@QAEAAU1@ABU1@@Z
_TEXT	SEGMENT
?set@?$_matrix@M@@QAEAAU1@ABU1@@Z PROC			; _matrix<float>::set, COMDAT
; _this$ = eax
; _a$ = ecx

; 56   : 		i.set(a.i); _14_=a._14;

	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+4]
	fld	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+8]
	fld	DWORD PTR [ecx+12]
	fstp	DWORD PTR [eax+12]

; 57   : 		j.set(a.j); _24_=a._24;

	fld	DWORD PTR [ecx+16]
	fstp	DWORD PTR [eax+16]
	fld	DWORD PTR [ecx+20]
	fstp	DWORD PTR [eax+20]
	fld	DWORD PTR [ecx+24]
	fstp	DWORD PTR [eax+24]
	fld	DWORD PTR [ecx+28]
	fstp	DWORD PTR [eax+28]

; 58   : 		k.set(a.k); _34_=a._34;

	fld	DWORD PTR [ecx+32]
	fstp	DWORD PTR [eax+32]
	fld	DWORD PTR [ecx+36]
	fstp	DWORD PTR [eax+36]
	fld	DWORD PTR [ecx+40]
	fstp	DWORD PTR [eax+40]
	fld	DWORD PTR [ecx+44]
	fstp	DWORD PTR [eax+44]

; 59   : 		c.set(a.c); _44_=a._44;

	fld	DWORD PTR [ecx+48]
	fstp	DWORD PTR [eax+48]
	fld	DWORD PTR [ecx+52]
	fstp	DWORD PTR [eax+52]
	fld	DWORD PTR [ecx+56]
	fstp	DWORD PTR [eax+56]
	fld	DWORD PTR [ecx+60]
	fstp	DWORD PTR [eax+60]

; 60   : 		return *this;
; 61   : 	}

	ret	0
?set@?$_matrix@M@@QAEAAU1@ABU1@@Z ENDP			; _matrix<float>::set
_TEXT	ENDS
PUBLIC	?ComputeBounds@CCF_Shape@@QAEXXZ		; CCF_Shape::ComputeBounds
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\xr_collide_form.cpp
;	COMDAT ?ComputeBounds@CCF_Shape@@QAEXXZ
_TEXT	SEGMENT
tv1150 = -48						; size = 4
tv1141 = -44						; size = 4
tv1145 = -40						; size = 4
tv1155 = -36						; size = 4
tv1168 = -32						; size = 4
tv1159 = -28						; size = 4
tv1163 = -24						; size = 4
_bCalcSphere$ = -24					; size = 4
_el$129024 = -20					; size = 4
_T$129033 = -16						; size = 16
?ComputeBounds@CCF_Shape@@QAEXXZ PROC			; CCF_Shape::ComputeBounds, COMDAT
; _this$ = ecx

; 389  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 48					; 00000030H

; 390  : 	bv_box.invalidate	();

	movss	xmm0, DWORD PTR __real@7f7fffff
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx
	movss	DWORD PTR [esi+12], xmm0
	movss	DWORD PTR [esi+16], xmm0
	movss	DWORD PTR [esi+20], xmm0
	movss	xmm0, DWORD PTR __real@ff7fffff
	movss	DWORD PTR [esi+24], xmm0
	movss	DWORD PTR [esi+28], xmm0
	movss	DWORD PTR [esi+32], xmm0

; 391  : 
; 392  : 	BOOL bCalcSphere	= (shapes.size()>1);

	mov	ecx, DWORD PTR [esi+60]
	sub	ecx, DWORD PTR [esi+56]
	mov	eax, 1041204193				; 3e0f83e1H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx

; 393  : 	for (u32 el=0; el<shapes.size(); el++)

	movss	xmm1, DWORD PTR __real@3f000000
	mov	ecx, 1
	cmp	ecx, eax
	mov	ecx, DWORD PTR [esi+60]
	sbb	ebx, ebx
	sub	ecx, DWORD PTR [esi+56]
	mov	eax, 1041204193				; 3e0f83e1H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	push	edi
	neg	ebx
	xor	edi, edi
	shr	eax, 31					; 0000001fH
	add	eax, edx
	mov	DWORD PTR _bCalcSphere$[esp+64], ebx
	mov	DWORD PTR _el$129024[esp+64], edi
	je	$LN6@ComputeBou
$LN8@ComputeBou:

; 394  : 	{
; 395  : 		switch (shapes[el].type)

	mov	ecx, DWORD PTR [esi+56]
	mov	eax, edi
	imul	eax, 132				; 00000084H
	mov	edx, DWORD PTR [eax+ecx]
	sub	edx, 0
	je	$LN54@ComputeBou
	sub	edx, 1
	jne	$LN7@ComputeBou

; 404  : 			}
; 405  : 			break;
; 406  : 		case 1:	// box
; 407  : 			{
; 408  : 				Fvector		A,B;
; 409  : 				Fmatrix&	T		= shapes[el].data.box;
; 410  : 				
; 411  : 				// Build points
; 412  : 				A.set( -.5f, -.5f, -.5f); T.transform_tiny	(B,A); bv_box.modify(B);

	movss	xmm2, DWORD PTR [eax+ecx+4]
	addss	xmm2, DWORD PTR [eax+ecx+36]
	addss	xmm2, DWORD PTR [eax+ecx+20]
	movss	xmm0, DWORD PTR [eax+ecx+52]
	lea	ebp, DWORD PTR [eax+ecx+40]
	mov	DWORD PTR tv1141[esp+64], ebp
	lea	ebp, DWORD PTR [eax+ecx+24]
	mov	DWORD PTR tv1145[esp+64], ebp
	lea	ebp, DWORD PTR [eax+ecx+8]
	mov	DWORD PTR tv1150[esp+64], ebp
	lea	ebp, DWORD PTR [eax+ecx+56]
	mov	DWORD PTR tv1155[esp+64], ebp
	mov	ebp, DWORD PTR tv1150[esp+64]
	movss	xmm3, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1145[esp+64]
	addss	xmm3, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1141[esp+64]
	addss	xmm3, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1155[esp+64]
	movss	xmm4, DWORD PTR [eax+ecx+60]
	lea	edx, DWORD PTR [eax+ecx+36]
	lea	edi, DWORD PTR [eax+ecx+20]
	lea	ebx, DWORD PTR [eax+ecx+52]
	mulss	xmm2, xmm1
	subss	xmm0, xmm2
	movss	xmm2, DWORD PTR [ebp]
	lea	ebp, DWORD PTR [eax+ecx+44]
	mov	DWORD PTR tv1159[esp+64], ebp
	lea	ebp, DWORD PTR [eax+ecx+28]
	mov	DWORD PTR tv1163[esp+64], ebp
	mulss	xmm3, xmm1
	lea	ebp, DWORD PTR [eax+ecx+12]
	subss	xmm2, xmm3
	mov	DWORD PTR tv1168[esp+64], ebp
	mov	ebp, DWORD PTR tv1159[esp+64]
	movss	xmm3, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1163[esp+64]
	addss	xmm3, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1168[esp+64]
	addss	xmm3, DWORD PTR [ebp]
	mulss	xmm3, xmm1
	subss	xmm4, xmm3
	movss	xmm3, DWORD PTR [esi+12]
	comiss	xmm0, xmm3
	ja	SHORT $LN153@ComputeBou
	movaps	xmm3, xmm0
$LN153@ComputeBou:
	movss	DWORD PTR [esi+12], xmm3
	movss	xmm3, DWORD PTR [esi+16]
	comiss	xmm2, xmm3
	ja	SHORT $LN157@ComputeBou
	movaps	xmm3, xmm2
$LN157@ComputeBou:
	movss	DWORD PTR [esi+16], xmm3
	movss	xmm3, DWORD PTR [esi+20]
	comiss	xmm4, xmm3
	ja	SHORT $LN161@ComputeBou
	movaps	xmm3, xmm4
$LN161@ComputeBou:
	movss	DWORD PTR [esi+20], xmm3
	movss	xmm3, DWORD PTR [esi+24]
	comiss	xmm3, xmm0
	jbe	SHORT $LN166@ComputeBou
	movaps	xmm0, xmm3
$LN166@ComputeBou:
	movss	DWORD PTR [esi+24], xmm0
	movss	xmm0, DWORD PTR [esi+28]
	comiss	xmm0, xmm2
	ja	SHORT $LN171@ComputeBou
	movaps	xmm0, xmm2
$LN171@ComputeBou:
	movss	DWORD PTR [esi+28], xmm0
	movss	xmm0, DWORD PTR [esi+32]
	comiss	xmm0, xmm4
	jbe	SHORT $LN174@ComputeBou
	movaps	xmm4, xmm0
$LN174@ComputeBou:

; 413  : 				A.set( -.5f, -.5f, +.5f); T.transform_tiny	(B,A); bv_box.modify(B);

	mov	ebp, DWORD PTR tv1141[esp+64]
	movss	DWORD PTR [esi+32], xmm4
	movss	xmm2, DWORD PTR [edi]
	addss	xmm2, DWORD PTR [eax+ecx+4]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm2, xmm1
	mulss	xmm0, xmm1
	subss	xmm0, xmm2
	movss	xmm2, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1150[esp+64]
	movss	xmm3, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1145[esp+64]
	addss	xmm3, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1155[esp+64]
	addss	xmm0, DWORD PTR [ebx]
	mulss	xmm3, xmm1
	mulss	xmm2, xmm1
	subss	xmm2, xmm3
	addss	xmm2, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1159[esp+64]
	movss	xmm3, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1163[esp+64]
	movss	xmm4, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1168[esp+64]
	addss	xmm4, DWORD PTR [ebp]
	mulss	xmm3, xmm1
	mulss	xmm4, xmm1
	subss	xmm3, xmm4
	movss	xmm4, DWORD PTR [esi+12]
	comiss	xmm0, xmm4
	addss	xmm3, DWORD PTR [eax+ecx+60]
	ja	SHORT $LN187@ComputeBou
	movaps	xmm4, xmm0
$LN187@ComputeBou:
	movss	DWORD PTR [esi+12], xmm4
	movss	xmm4, DWORD PTR [esi+16]
	comiss	xmm2, xmm4
	ja	SHORT $LN191@ComputeBou
	movaps	xmm4, xmm2
$LN191@ComputeBou:
	movss	DWORD PTR [esi+16], xmm4
	movss	xmm4, DWORD PTR [esi+20]
	comiss	xmm3, xmm4
	ja	SHORT $LN195@ComputeBou
	movaps	xmm4, xmm3
$LN195@ComputeBou:
	movss	DWORD PTR [esi+20], xmm4
	movss	xmm4, DWORD PTR [esi+24]
	comiss	xmm4, xmm0
	jbe	SHORT $LN200@ComputeBou
	movaps	xmm0, xmm4
$LN200@ComputeBou:
	movss	DWORD PTR [esi+24], xmm0
	movss	xmm0, DWORD PTR [esi+28]
	comiss	xmm0, xmm2
	ja	SHORT $LN205@ComputeBou
	movaps	xmm0, xmm2
$LN205@ComputeBou:
	movss	DWORD PTR [esi+28], xmm0
	movss	xmm0, DWORD PTR [esi+32]
	comiss	xmm0, xmm3
	jbe	SHORT $LN208@ComputeBou
	movaps	xmm3, xmm0
$LN208@ComputeBou:

; 414  : 				A.set( -.5f, +.5f, +.5f); T.transform_tiny	(B,A); bv_box.modify(B);

	mov	ebp, DWORD PTR tv1141[esp+64]
	movss	DWORD PTR [esi+32], xmm3
	movss	xmm0, DWORD PTR [edx]
	addss	xmm0, DWORD PTR [edi]
	movss	xmm2, DWORD PTR [eax+ecx+4]
	mulss	xmm2, xmm1
	mulss	xmm0, xmm1
	subss	xmm0, xmm2
	movss	xmm2, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1145[esp+64]
	addss	xmm2, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1150[esp+64]
	movss	xmm3, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1155[esp+64]
	addss	xmm0, DWORD PTR [ebx]
	mulss	xmm3, xmm1
	mulss	xmm2, xmm1
	subss	xmm2, xmm3
	addss	xmm2, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1159[esp+64]
	movss	xmm3, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1163[esp+64]
	addss	xmm3, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1168[esp+64]
	movss	xmm4, DWORD PTR [ebp]
	mulss	xmm3, xmm1
	mulss	xmm4, xmm1
	subss	xmm3, xmm4
	movss	xmm4, DWORD PTR [esi+12]
	comiss	xmm0, xmm4
	addss	xmm3, DWORD PTR [eax+ecx+60]
	ja	SHORT $LN221@ComputeBou
	movaps	xmm4, xmm0
$LN221@ComputeBou:
	movss	DWORD PTR [esi+12], xmm4
	movss	xmm4, DWORD PTR [esi+16]
	comiss	xmm2, xmm4
	ja	SHORT $LN225@ComputeBou
	movaps	xmm4, xmm2
$LN225@ComputeBou:
	movss	DWORD PTR [esi+16], xmm4
	movss	xmm4, DWORD PTR [esi+20]
	comiss	xmm3, xmm4
	ja	SHORT $LN229@ComputeBou
	movaps	xmm4, xmm3
$LN229@ComputeBou:
	movss	DWORD PTR [esi+20], xmm4
	movss	xmm4, DWORD PTR [esi+24]
	comiss	xmm4, xmm0
	jbe	SHORT $LN234@ComputeBou
	movaps	xmm0, xmm4
$LN234@ComputeBou:
	movss	DWORD PTR [esi+24], xmm0
	movss	xmm0, DWORD PTR [esi+28]
	comiss	xmm0, xmm2
	ja	SHORT $LN239@ComputeBou
	movaps	xmm0, xmm2
$LN239@ComputeBou:
	movss	DWORD PTR [esi+28], xmm0
	movss	xmm0, DWORD PTR [esi+32]
	comiss	xmm0, xmm3
	jbe	SHORT $LN242@ComputeBou
	movaps	xmm3, xmm0
$LN242@ComputeBou:

; 415  : 				A.set( -.5f, +.5f, -.5f); T.transform_tiny	(B,A); bv_box.modify(B);

	mov	ebp, DWORD PTR tv1145[esp+64]
	movss	DWORD PTR [esi+32], xmm3
	movss	xmm2, DWORD PTR [edx]
	addss	xmm2, DWORD PTR [eax+ecx+4]
	movss	xmm0, DWORD PTR [edi]
	mulss	xmm2, xmm1
	mulss	xmm0, xmm1
	subss	xmm0, xmm2
	movss	xmm2, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1150[esp+64]
	movss	xmm3, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1141[esp+64]
	addss	xmm3, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1155[esp+64]
	addss	xmm0, DWORD PTR [ebx]
	mulss	xmm3, xmm1
	mulss	xmm2, xmm1
	subss	xmm2, xmm3
	addss	xmm2, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1163[esp+64]
	movss	xmm3, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1159[esp+64]
	movss	xmm4, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1168[esp+64]
	addss	xmm4, DWORD PTR [ebp]
	mulss	xmm3, xmm1
	mulss	xmm4, xmm1
	subss	xmm3, xmm4
	movss	xmm4, DWORD PTR [esi+12]
	comiss	xmm0, xmm4
	addss	xmm3, DWORD PTR [eax+ecx+60]
	ja	SHORT $LN255@ComputeBou
	movaps	xmm4, xmm0
$LN255@ComputeBou:
	movss	DWORD PTR [esi+12], xmm4
	movss	xmm4, DWORD PTR [esi+16]
	comiss	xmm2, xmm4
	ja	SHORT $LN259@ComputeBou
	movaps	xmm4, xmm2
$LN259@ComputeBou:
	movss	DWORD PTR [esi+16], xmm4
	movss	xmm4, DWORD PTR [esi+20]
	comiss	xmm3, xmm4
	ja	SHORT $LN263@ComputeBou
	movaps	xmm4, xmm3
$LN263@ComputeBou:
	movss	DWORD PTR [esi+20], xmm4
	movss	xmm4, DWORD PTR [esi+24]
	comiss	xmm4, xmm0
	jbe	SHORT $LN268@ComputeBou
	movaps	xmm0, xmm4
$LN268@ComputeBou:
	movss	DWORD PTR [esi+24], xmm0
	movss	xmm0, DWORD PTR [esi+28]
	comiss	xmm0, xmm2
	ja	SHORT $LN273@ComputeBou
	movaps	xmm0, xmm2
$LN273@ComputeBou:
	movss	DWORD PTR [esi+28], xmm0
	movss	xmm0, DWORD PTR [esi+32]
	comiss	xmm0, xmm3
	jbe	SHORT $LN276@ComputeBou
	movaps	xmm3, xmm0
$LN276@ComputeBou:

; 416  : 				A.set( +.5f, +.5f, +.5f); T.transform_tiny	(B,A); bv_box.modify(B);

	mov	ebp, DWORD PTR tv1150[esp+64]
	movss	DWORD PTR [esi+32], xmm3
	movss	xmm2, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1145[esp+64]
	addss	xmm2, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1141[esp+64]
	addss	xmm2, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1155[esp+64]
	movss	xmm0, DWORD PTR [eax+ecx+4]
	addss	xmm0, DWORD PTR [edx]
	addss	xmm0, DWORD PTR [edi]
	movss	xmm4, DWORD PTR [esi+12]
	mulss	xmm2, xmm1
	addss	xmm2, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1159[esp+64]
	movss	xmm3, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1163[esp+64]
	addss	xmm3, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1168[esp+64]
	addss	xmm3, DWORD PTR [ebp]
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR [ebx]
	comiss	xmm0, xmm4
	mulss	xmm3, xmm1
	addss	xmm3, DWORD PTR [eax+ecx+60]
	ja	SHORT $LN289@ComputeBou
	movaps	xmm4, xmm0
$LN289@ComputeBou:
	movss	DWORD PTR [esi+12], xmm4
	movss	xmm4, DWORD PTR [esi+16]
	comiss	xmm2, xmm4
	ja	SHORT $LN293@ComputeBou
	movaps	xmm4, xmm2
$LN293@ComputeBou:
	movss	DWORD PTR [esi+16], xmm4
	movss	xmm4, DWORD PTR [esi+20]
	comiss	xmm3, xmm4
	ja	SHORT $LN297@ComputeBou
	movaps	xmm4, xmm3
$LN297@ComputeBou:
	movss	DWORD PTR [esi+20], xmm4
	movss	xmm4, DWORD PTR [esi+24]
	comiss	xmm4, xmm0
	jbe	SHORT $LN302@ComputeBou
	movaps	xmm0, xmm4
$LN302@ComputeBou:
	movss	DWORD PTR [esi+24], xmm0
	movss	xmm0, DWORD PTR [esi+28]
	comiss	xmm0, xmm2
	ja	SHORT $LN307@ComputeBou
	movaps	xmm0, xmm2
$LN307@ComputeBou:
	movss	DWORD PTR [esi+28], xmm0
	movss	xmm0, DWORD PTR [esi+32]
	comiss	xmm0, xmm3
	jbe	SHORT $LN310@ComputeBou
	movaps	xmm3, xmm0
$LN310@ComputeBou:

; 417  : 				A.set( +.5f, +.5f, -.5f); T.transform_tiny	(B,A); bv_box.modify(B);

	mov	ebp, DWORD PTR tv1150[esp+64]
	movss	DWORD PTR [esi+32], xmm3
	movss	xmm0, DWORD PTR [edi]
	addss	xmm0, DWORD PTR [eax+ecx+4]
	movss	xmm2, DWORD PTR [edx]
	mulss	xmm2, xmm1
	mulss	xmm0, xmm1
	subss	xmm0, xmm2
	movss	xmm2, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1145[esp+64]
	addss	xmm2, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1141[esp+64]
	movss	xmm3, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1155[esp+64]
	addss	xmm0, DWORD PTR [ebx]
	mulss	xmm3, xmm1
	mulss	xmm2, xmm1
	subss	xmm2, xmm3
	addss	xmm2, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1163[esp+64]
	movss	xmm3, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1168[esp+64]
	addss	xmm3, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1159[esp+64]
	movss	xmm4, DWORD PTR [ebp]
	mulss	xmm3, xmm1
	mulss	xmm4, xmm1
	subss	xmm3, xmm4
	movss	xmm4, DWORD PTR [esi+12]
	comiss	xmm0, xmm4
	addss	xmm3, DWORD PTR [eax+ecx+60]
	ja	SHORT $LN323@ComputeBou
	movaps	xmm4, xmm0
$LN323@ComputeBou:
	movss	DWORD PTR [esi+12], xmm4
	movss	xmm4, DWORD PTR [esi+16]
	comiss	xmm2, xmm4
	ja	SHORT $LN327@ComputeBou
	movaps	xmm4, xmm2
$LN327@ComputeBou:
	movss	DWORD PTR [esi+16], xmm4
	movss	xmm4, DWORD PTR [esi+20]
	comiss	xmm3, xmm4
	ja	SHORT $LN331@ComputeBou
	movaps	xmm4, xmm3
$LN331@ComputeBou:
	movss	DWORD PTR [esi+20], xmm4
	movss	xmm4, DWORD PTR [esi+24]
	comiss	xmm4, xmm0
	jbe	SHORT $LN336@ComputeBou
	movaps	xmm0, xmm4
$LN336@ComputeBou:
	movss	DWORD PTR [esi+24], xmm0
	movss	xmm0, DWORD PTR [esi+28]
	comiss	xmm0, xmm2
	ja	SHORT $LN341@ComputeBou
	movaps	xmm0, xmm2
$LN341@ComputeBou:
	movss	DWORD PTR [esi+28], xmm0
	movss	xmm0, DWORD PTR [esi+32]
	comiss	xmm0, xmm3
	jbe	SHORT $LN344@ComputeBou
	movaps	xmm3, xmm0
$LN344@ComputeBou:

; 418  : 				A.set( +.5f, -.5f, +.5f); T.transform_tiny	(B,A); bv_box.modify(B);

	mov	ebp, DWORD PTR tv1150[esp+64]
	movss	DWORD PTR [esi+32], xmm3
	movss	xmm0, DWORD PTR [edx]
	addss	xmm0, DWORD PTR [eax+ecx+4]
	movss	xmm2, DWORD PTR [edi]
	mulss	xmm2, xmm1
	mulss	xmm0, xmm1
	subss	xmm0, xmm2
	movss	xmm2, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1141[esp+64]
	addss	xmm2, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1145[esp+64]
	movss	xmm3, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1155[esp+64]
	addss	xmm0, DWORD PTR [ebx]
	mulss	xmm3, xmm1
	mulss	xmm2, xmm1
	subss	xmm2, xmm3
	addss	xmm2, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1159[esp+64]
	movss	xmm3, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1168[esp+64]
	addss	xmm3, DWORD PTR [ebp]
	mov	ebp, DWORD PTR tv1163[esp+64]
	movss	xmm4, DWORD PTR [ebp]
	mulss	xmm3, xmm1
	mulss	xmm4, xmm1
	subss	xmm3, xmm4
	movss	xmm4, DWORD PTR [esi+12]
	comiss	xmm0, xmm4
	addss	xmm3, DWORD PTR [eax+ecx+60]
	lea	ebp, DWORD PTR [eax+ecx+60]
	ja	SHORT $LN357@ComputeBou
	movaps	xmm4, xmm0
$LN357@ComputeBou:
	movss	DWORD PTR [esi+12], xmm4
	movss	xmm4, DWORD PTR [esi+16]
	comiss	xmm2, xmm4
	ja	SHORT $LN361@ComputeBou
	movaps	xmm4, xmm2
$LN361@ComputeBou:
	movss	DWORD PTR [esi+16], xmm4
	movss	xmm4, DWORD PTR [esi+20]
	comiss	xmm3, xmm4
	ja	SHORT $LN365@ComputeBou
	movaps	xmm4, xmm3
$LN365@ComputeBou:
	movss	DWORD PTR [esi+20], xmm4
	movss	xmm4, DWORD PTR [esi+24]
	comiss	xmm4, xmm0
	jbe	SHORT $LN370@ComputeBou
	movaps	xmm0, xmm4
$LN370@ComputeBou:
	movss	DWORD PTR [esi+24], xmm0
	movss	xmm0, DWORD PTR [esi+28]
	comiss	xmm0, xmm2
	ja	SHORT $LN375@ComputeBou
	movaps	xmm0, xmm2
$LN375@ComputeBou:
	movss	DWORD PTR [esi+28], xmm0
	movss	xmm0, DWORD PTR [esi+32]
	comiss	xmm0, xmm3
	jbe	SHORT $LN378@ComputeBou
	movaps	xmm3, xmm0
$LN378@ComputeBou:
	movss	DWORD PTR [esi+32], xmm3

; 419  : 				A.set( +.5f, -.5f, -.5f); T.transform_tiny	(B,A); bv_box.modify(B);

	movss	xmm0, DWORD PTR [eax+ecx+4]
	movss	xmm2, DWORD PTR [edx]
	addss	xmm2, DWORD PTR [edi]
	mov	edx, DWORD PTR tv1141[esp+64]
	mov	ecx, DWORD PTR tv1150[esp+64]
	mov	eax, DWORD PTR tv1145[esp+64]
	movss	xmm3, DWORD PTR [edx]
	addss	xmm3, DWORD PTR [eax]
	mov	eax, DWORD PTR tv1159[esp+64]
	mov	edx, DWORD PTR tv1168[esp+64]
	movss	xmm4, DWORD PTR [eax]
	mulss	xmm2, xmm1
	mulss	xmm0, xmm1
	subss	xmm0, xmm2
	movss	xmm2, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv1155[esp+64]
	addss	xmm0, DWORD PTR [ebx]
	mulss	xmm3, xmm1
	mulss	xmm2, xmm1
	subss	xmm2, xmm3
	addss	xmm2, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv1163[esp+64]
	addss	xmm4, DWORD PTR [ecx]
	movss	xmm3, DWORD PTR [edx]
	mulss	xmm3, xmm1
	mulss	xmm4, xmm1
	subss	xmm3, xmm4
	movss	xmm4, DWORD PTR [esi+12]
	comiss	xmm0, xmm4
	addss	xmm3, DWORD PTR [ebp]
	ja	SHORT $LN391@ComputeBou
	movaps	xmm4, xmm0
$LN391@ComputeBou:
	movss	DWORD PTR [esi+12], xmm4
	movss	xmm4, DWORD PTR [esi+16]
	comiss	xmm2, xmm4
	ja	SHORT $LN395@ComputeBou
	movaps	xmm4, xmm2
$LN395@ComputeBou:
	movss	DWORD PTR [esi+16], xmm4
	movss	xmm4, DWORD PTR [esi+20]
	comiss	xmm3, xmm4
	ja	SHORT $LN399@ComputeBou
	movaps	xmm4, xmm3
$LN399@ComputeBou:
	movss	DWORD PTR [esi+20], xmm4
	movss	xmm4, DWORD PTR [esi+24]
	comiss	xmm4, xmm0
	jbe	SHORT $LN404@ComputeBou
	movaps	xmm0, xmm4
$LN404@ComputeBou:
	movss	DWORD PTR [esi+24], xmm0
	movss	xmm0, DWORD PTR [esi+28]
	comiss	xmm0, xmm2
	ja	SHORT $LN409@ComputeBou
	movaps	xmm0, xmm2
$LN409@ComputeBou:
	movss	DWORD PTR [esi+28], xmm0
	movss	xmm0, DWORD PTR [esi+32]
	comiss	xmm0, xmm3
	ja	SHORT $LN413@ComputeBou
	movaps	xmm0, xmm3
$LN413@ComputeBou:

; 420  : 
; 421  : 				bCalcSphere	= TRUE;
; 422  : 			}
; 423  : 			break;

	mov	edi, DWORD PTR _el$129024[esp+64]
	mov	ebx, 1
	movss	DWORD PTR [esi+32], xmm0
	mov	DWORD PTR _bCalcSphere$[esp+64], ebx
	jmp	$LN7@ComputeBou

; 396  : 		{
; 397  : 		case 0: // sphere
; 398  : 			{
; 399  : 				Fsphere		T		= shapes[el].data.sphere;

$LN54@ComputeBou:
	mov	edx, DWORD PTR [eax+ecx+4]
	mov	ebx, DWORD PTR [eax+ecx+8]
	mov	ebp, DWORD PTR [eax+ecx+12]
	mov	eax, DWORD PTR [eax+ecx+16]

; 400  : 				Fvector		P;
; 401  : 				P.set		(T.P);	P.sub(T.R);	bv_box.modify(P);

	movss	xmm5, DWORD PTR [esi+12]
	mov	DWORD PTR _T$129033[esp+64], edx
	movss	xmm6, DWORD PTR _T$129033[esp+64]
	mov	DWORD PTR _T$129033[esp+76], eax
	movss	xmm0, DWORD PTR _T$129033[esp+76]
	mov	DWORD PTR _T$129033[esp+68], ebx
	movss	xmm7, DWORD PTR _T$129033[esp+68]
	movaps	xmm2, xmm6
	mov	DWORD PTR _T$129033[esp+72], ebp
	movss	xmm4, DWORD PTR _T$129033[esp+72]
	subss	xmm2, xmm0
	comiss	xmm2, xmm5
	movaps	xmm3, xmm7
	subss	xmm3, xmm0
	subss	xmm4, xmm0
	ja	SHORT $LN74@ComputeBou
	movaps	xmm5, xmm2
$LN74@ComputeBou:
	movss	DWORD PTR [esi+12], xmm5
	movss	xmm5, DWORD PTR [esi+16]
	comiss	xmm3, xmm5
	ja	SHORT $LN78@ComputeBou
	movaps	xmm5, xmm3
$LN78@ComputeBou:
	movss	DWORD PTR [esi+16], xmm5
	movss	xmm5, DWORD PTR [esi+20]
	comiss	xmm4, xmm5
	ja	SHORT $LN82@ComputeBou
	movaps	xmm5, xmm4
$LN82@ComputeBou:
	movss	DWORD PTR [esi+20], xmm5
	movss	xmm5, DWORD PTR [esi+24]
	comiss	xmm5, xmm2
	jbe	SHORT $LN87@ComputeBou
	movaps	xmm2, xmm5
$LN87@ComputeBou:
	movss	DWORD PTR [esi+24], xmm2
	movss	xmm2, DWORD PTR [esi+28]
	comiss	xmm2, xmm3
	ja	SHORT $LN92@ComputeBou
	movaps	xmm2, xmm3
$LN92@ComputeBou:
	movss	DWORD PTR [esi+28], xmm2
	movss	xmm2, DWORD PTR [esi+32]
	comiss	xmm2, xmm4
	jbe	SHORT $LN95@ComputeBou
	movaps	xmm4, xmm2
$LN95@ComputeBou:

; 402  : 				P.set		(T.P);	P.add(T.R);	bv_box.modify(P);

	movss	xmm3, DWORD PTR _T$129033[esp+72]
	addss	xmm6, xmm0
	movss	DWORD PTR [esi+32], xmm4
	addss	xmm7, xmm0
	addss	xmm3, xmm0
	movss	xmm0, DWORD PTR [esi+12]
	movaps	xmm2, xmm6
	comiss	xmm2, xmm0
	ja	SHORT $LN108@ComputeBou
	movaps	xmm0, xmm2
$LN108@ComputeBou:
	movss	DWORD PTR [esi+12], xmm0
	movss	xmm0, DWORD PTR [esi+16]
	comiss	xmm7, xmm0
	ja	SHORT $LN112@ComputeBou
	movaps	xmm0, xmm7
$LN112@ComputeBou:
	movss	DWORD PTR [esi+16], xmm0
	movss	xmm0, DWORD PTR [esi+20]
	comiss	xmm3, xmm0
	ja	SHORT $LN116@ComputeBou
	movaps	xmm0, xmm3
$LN116@ComputeBou:
	movss	DWORD PTR [esi+20], xmm0
	movss	xmm0, DWORD PTR [esi+24]
	comiss	xmm0, xmm2
	ja	SHORT $LN122@ComputeBou
	movaps	xmm0, xmm2
$LN122@ComputeBou:
	movss	DWORD PTR [esi+24], xmm0
	movss	xmm0, DWORD PTR [esi+28]
	comiss	xmm0, xmm7
	ja	SHORT $LN126@ComputeBou
	movaps	xmm0, xmm7
$LN126@ComputeBou:
	movss	DWORD PTR [esi+28], xmm0
	movss	xmm0, DWORD PTR [esi+32]
	comiss	xmm0, xmm3
	ja	SHORT $LN130@ComputeBou
	movaps	xmm0, xmm3
$LN130@ComputeBou:
	movss	DWORD PTR [esi+32], xmm0

; 403  : 				bv_sphere	= T;

	mov	DWORD PTR [esi+36], edx
	mov	DWORD PTR [esi+40], ebx
	mov	ebx, DWORD PTR _bCalcSphere$[esp+64]
	mov	DWORD PTR [esi+44], ebp
	mov	DWORD PTR [esi+48], eax
$LN7@ComputeBou:
	mov	ecx, DWORD PTR [esi+60]
	sub	ecx, DWORD PTR [esi+56]
	mov	eax, 1041204193				; 3e0f83e1H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	edi, 1
	add	eax, edx
	cmp	edi, eax
	mov	DWORD PTR _el$129024[esp+64], edi
	jb	$LN8@ComputeBou
$LN6@ComputeBou:

; 424  : 		}
; 425  : 	}
; 426  : 	if (bCalcSphere) bv_box.getsphere(bv_sphere.P,bv_sphere.R);

	test	ebx, ebx
	je	$LN414@ComputeBou
	movss	xmm0, DWORD PTR [esi+12]
	addss	xmm0, DWORD PTR [esi+24]
	mulss	xmm0, xmm1
	movss	DWORD PTR [esi+36], xmm0
	movss	xmm0, DWORD PTR [esi+28]
	addss	xmm0, DWORD PTR [esi+16]
	movss	xmm2, DWORD PTR [esi+36]
	mulss	xmm0, xmm1
	movss	DWORD PTR [esi+40], xmm0
	movss	xmm0, DWORD PTR [esi+32]
	addss	xmm0, DWORD PTR [esi+20]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR [esi+40]
	movss	DWORD PTR [esi+44], xmm0
	subss	xmm0, DWORD PTR [esi+32]
	subss	xmm2, DWORD PTR [esi+24]
	subss	xmm1, DWORD PTR [esi+28]
	movaps	xmm3, xmm0
	mulss	xmm3, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, xmm2
	addss	xmm3, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, xmm1
	push	ecx
	addss	xmm3, xmm0
	movss	DWORD PTR [esp], xmm3
	call	_sqrtf
	fstp	DWORD PTR [esi+48]
	add	esp, 4
$LN414@ComputeBou:

; 427  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ComputeBounds@CCF_Shape@@QAEXXZ ENDP			; CCF_Shape::ComputeBounds
_TEXT	ENDS
PUBLIC	?BuildTopLevel@CCF_Skeleton@@AAEXXZ		; CCF_Skeleton::BuildTopLevel
; Function compile flags: /Ogtpy
;	COMDAT ?BuildTopLevel@CCF_Skeleton@@AAEXXZ
_TEXT	SEGMENT
?BuildTopLevel@CCF_Skeleton@@AAEXXZ PROC		; CCF_Skeleton::BuildTopLevel, COMDAT
; _this$ = ecx

; 192  : 	dwFrameTL			= Device.dwFrame;

	mov	eax, DWORD PTR ?Device@@3VCRenderDevice@@A+24
	push	esi
	mov	esi, ecx

; 193  : 	IRenderVisual* K	= owner->Visual();

	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [esi+80], eax
	mov	eax, DWORD PTR [ecx+144]

; 194  : 	vis_data &vis = K->getVisData();

	mov	edx, DWORD PTR [eax]
	push	eax
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 195  : 	Fbox& B				= vis.box;
; 196  : 	bv_box.min.average	(B.min);

	movss	xmm1, DWORD PTR [esi+12]
	addss	xmm1, DWORD PTR [eax+16]
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm1, xmm0
	movss	DWORD PTR [esi+12], xmm1
	movss	xmm1, DWORD PTR [eax+20]
	addss	xmm1, DWORD PTR [esi+16]
	mulss	xmm1, xmm0
	movss	DWORD PTR [esi+16], xmm1
	movss	xmm1, DWORD PTR [eax+24]
	addss	xmm1, DWORD PTR [esi+20]
	mulss	xmm1, xmm0
	movss	DWORD PTR [esi+20], xmm1

; 197  : 	bv_box.max.average	(B.max);

	movss	xmm1, DWORD PTR [eax+28]
	addss	xmm1, DWORD PTR [esi+24]
	mulss	xmm1, xmm0
	movss	DWORD PTR [esi+24], xmm1
	movss	xmm1, DWORD PTR [eax+32]
	addss	xmm1, DWORD PTR [esi+28]
	mulss	xmm1, xmm0
	movss	DWORD PTR [esi+28], xmm1
	movss	xmm1, DWORD PTR [eax+36]
	addss	xmm1, DWORD PTR [esi+32]
	mulss	xmm1, xmm0
	movss	DWORD PTR [esi+32], xmm1

; 198  : 	bv_box.grow			(0.05f);

	movss	xmm2, DWORD PTR [esi+12]
	movss	xmm1, DWORD PTR _LDIST
	subss	xmm2, xmm1
	movss	DWORD PTR [esi+12], xmm2
	movss	xmm2, DWORD PTR [esi+16]
	subss	xmm2, xmm1
	movss	DWORD PTR [esi+16], xmm2
	movss	xmm2, DWORD PTR [esi+20]
	subss	xmm2, xmm1
	movss	DWORD PTR [esi+20], xmm2
	movss	xmm2, DWORD PTR [esi+24]
	addss	xmm2, xmm1
	movss	DWORD PTR [esi+24], xmm2
	movss	xmm2, DWORD PTR [esi+28]
	addss	xmm2, xmm1
	movss	DWORD PTR [esi+28], xmm2
	movss	xmm2, DWORD PTR [esi+32]
	addss	xmm2, xmm1
	movss	DWORD PTR [esi+32], xmm2

; 199  : 	bv_sphere.P.average	(vis.sphere.P);

	movss	xmm1, DWORD PTR [eax]
	addss	xmm1, DWORD PTR [esi+36]
	mulss	xmm1, xmm0
	movss	DWORD PTR [esi+36], xmm1
	movss	xmm1, DWORD PTR [eax+4]
	addss	xmm1, DWORD PTR [esi+40]
	mulss	xmm1, xmm0
	movss	DWORD PTR [esi+40], xmm1
	movss	xmm1, DWORD PTR [eax+8]
	addss	xmm1, DWORD PTR [esi+44]
	mulss	xmm1, xmm0
	movss	DWORD PTR [esi+44], xmm1

; 200  : 	bv_sphere.R			+= vis.sphere.R;
; 201  : 	bv_sphere.R			*= 0.5f;

	movss	xmm1, DWORD PTR [eax+12]
	addss	xmm1, DWORD PTR [esi+48]
	mulss	xmm1, xmm0
	movss	DWORD PTR [esi+48], xmm1
	pop	esi

; 202  : 	VERIFY(_valid(bv_sphere));
; 203  : }

	ret	0
?BuildTopLevel@CCF_Skeleton@@AAEXXZ ENDP		; CCF_Skeleton::BuildTopLevel
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?RAYvsCYLINDER@@YA_NABV?$_cylinder@M@@ABU?$_vector3@M@@1AAMH@Z
_TEXT	SEGMENT
_bCull$ = 8						; size = 4
?RAYvsCYLINDER@@YA_NABV?$_cylinder@M@@ABU?$_vector3@M@@1AAMH@Z PROC ; RAYvsCYLINDER, COMDAT
; _c_cylinder$ = ecx
; _S$ = eax
; _D$ = edx
; _R$ = esi

; 99   : 	// Actual test
; 100  : 	Fcylinder::ERP_Result rp_res = c_cylinder.intersect(S,D,R);

	push	eax
	push	ecx
	call	?intersect@?$_cylinder@M@@QBE?AW4ERP_Result@1@ABU?$_vector3@M@@0AAM@Z ; _cylinder<float>::intersect

; 101  : 	VERIFY				(R>=0.f);
; 102  : 	return				((rp_res==Fcylinder::rpOriginOutside)||(!bCull&&(rp_res==Fcylinder::rpOriginInside)));

	cmp	eax, 2
	je	SHORT $LN7@RAYvsCYLIN
	cmp	DWORD PTR _bCull$[esp-4], 0
	jne	SHORT $LN6@RAYvsCYLIN
	cmp	eax, 1
	je	SHORT $LN7@RAYvsCYLIN
$LN6@RAYvsCYLIN:
	xor	eax, eax

; 103  : }

	ret	0
$LN7@RAYvsCYLIN:

; 101  : 	VERIFY				(R>=0.f);
; 102  : 	return				((rp_res==Fcylinder::rpOriginOutside)||(!bCull&&(rp_res==Fcylinder::rpOriginInside)));

	mov	eax, 1

; 103  : }

	ret	0
?RAYvsCYLINDER@@YA_NABV?$_cylinder@M@@ABU?$_vector3@M@@1AAMH@Z ENDP ; RAYvsCYLINDER
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?RAYvsOBB@@YA_NABU?$_matrix@M@@ABU?$_vector3@M@@11AAMH@Z
_TEXT	SEGMENT
tv348 = -80						; size = 4
tv335 = -76						; size = 4
tv330 = -72						; size = 4
tv353 = -68						; size = 4
_SL$ = -64						; size = 12
_DL$ = -52						; size = 12
_PL$ = -40						; size = 12
_E$ = -28						; size = 24
tv326 = 8						; size = 4
_d$128812 = 8						; size = 4
_b_hsize$ = 8						; size = 4
_bCull$ = 12						; size = 4
?RAYvsOBB@@YA_NABU?$_matrix@M@@ABU?$_vector3@M@@11AAMH@Z PROC ; RAYvsOBB, COMDAT
; _IM$ = eax
; _S$ = edx
; _D$ = ecx
; _R$ = edi

; 72   : {

	sub	esp, 80					; 00000050H

; 73   : 	Fbox E	= {-b_hsize.x, -b_hsize.y, -b_hsize.z,	b_hsize.x,	b_hsize.y,	b_hsize.z};

	movss	xmm0, DWORD PTR __real@80000000

; 74   : 	// XForm world-2-local
; 75   : 	Fvector	SL,DL,PL;
; 76   : 	IM.transform_tiny	(SL,S);

	movss	xmm5, DWORD PTR [eax+16]
	movss	xmm6, DWORD PTR [eax]
	movss	xmm4, DWORD PTR [eax+32]
	movaps	xmm2, xmm0
	movaps	xmm3, xmm0
	push	esi
	mov	esi, DWORD PTR _b_hsize$[esp+80]
	movss	xmm1, DWORD PTR [esi]
	subss	xmm2, xmm1
	movss	DWORD PTR _E$[esp+84], xmm2
	movss	xmm2, DWORD PTR [esi+4]
	subss	xmm3, xmm2
	movss	DWORD PTR _E$[esp+88], xmm3
	movss	xmm3, DWORD PTR [esi+8]
	subss	xmm0, xmm3
	movss	DWORD PTR _E$[esp+92], xmm0
	movss	DWORD PTR _E$[esp+104], xmm3
	movss	xmm3, DWORD PTR [edx]
	movaps	xmm0, xmm3
	mulss	xmm0, xmm6
	movss	DWORD PTR _E$[esp+100], xmm2
	movss	xmm2, DWORD PTR [edx+4]
	movaps	xmm7, xmm2
	mulss	xmm7, xmm5
	addss	xmm0, xmm7
	movss	DWORD PTR _E$[esp+96], xmm1
	movss	xmm1, DWORD PTR [edx+8]
	movaps	xmm7, xmm1
	mulss	xmm7, xmm4
	addss	xmm0, xmm7
	addss	xmm0, DWORD PTR [eax+48]
	movss	xmm7, DWORD PTR [eax+20]
	movss	DWORD PTR _SL$[esp+84], xmm0
	movss	xmm0, DWORD PTR [eax+36]
	movss	DWORD PTR tv326[esp+80], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR tv335[esp+84], xmm0
	mulss	xmm0, xmm3
	movss	DWORD PTR tv330[esp+84], xmm7
	mulss	xmm7, xmm2
	addss	xmm0, xmm7
	movss	xmm7, DWORD PTR tv326[esp+80]
	mulss	xmm7, xmm1
	addss	xmm0, xmm7
	addss	xmm0, DWORD PTR [eax+52]
	movss	xmm7, DWORD PTR [eax+40]
	movss	DWORD PTR _SL$[esp+88], xmm0
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR tv348[esp+84], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR tv353[esp+84], xmm0
	mulss	xmm0, xmm3
	movss	xmm3, DWORD PTR tv348[esp+84]
	mulss	xmm3, xmm2
	addss	xmm0, xmm3
	movaps	xmm2, xmm7
	mulss	xmm2, xmm1

; 77   : 	IM.transform_dir	(DL,D);

	movss	xmm1, DWORD PTR [ecx+8]
	addss	xmm0, xmm2
	addss	xmm0, DWORD PTR [eax+56]
	movss	xmm2, DWORD PTR [ecx+4]
	movss	DWORD PTR _SL$[esp+92], xmm0
	movss	xmm0, DWORD PTR [ecx]
	movaps	xmm3, xmm0
	mulss	xmm3, xmm6
	movaps	xmm6, xmm2
	mulss	xmm6, xmm5
	addss	xmm3, xmm6
	movaps	xmm5, xmm1
	mulss	xmm5, xmm4
	addss	xmm3, xmm5
	movss	DWORD PTR _DL$[esp+84], xmm3
	movaps	xmm3, xmm1
	mulss	xmm3, DWORD PTR tv326[esp+80]
	movaps	xmm4, xmm0
	mulss	xmm4, DWORD PTR tv335[esp+84]
	addss	xmm3, xmm4
	movaps	xmm4, xmm2
	mulss	xmm4, DWORD PTR tv330[esp+84]
	addss	xmm3, xmm4
	mulss	xmm0, DWORD PTR tv353[esp+84]
	mulss	xmm2, DWORD PTR tv348[esp+84]
	addss	xmm0, xmm2
	mulss	xmm1, xmm7
	addss	xmm0, xmm1

; 78   : 
; 79   : 	// Actual test
; 80   : 	Fbox::ERP_Result rp_res = E.Pick2(SL,DL,PL);

	lea	esi, DWORD PTR _PL$[esp+84]
	lea	eax, DWORD PTR _DL$[esp+84]
	lea	edx, DWORD PTR _SL$[esp+84]
	lea	ecx, DWORD PTR _E$[esp+84]
	movss	DWORD PTR _DL$[esp+88], xmm3
	movss	DWORD PTR _DL$[esp+92], xmm0
	call	?Pick2@?$_box3@M@@QAE?AW4ERP_Result@1@ABU?$_vector3@M@@0AAU3@@Z ; _box3<float>::Pick2

; 81   : 	if ((rp_res==Fbox::rpOriginOutside)||(!bCull&&(rp_res==Fbox::rpOriginInside))){

	cmp	eax, 2
	je	SHORT $LN5@RAYvsOBB
	cmp	DWORD PTR _bCull$[esp+80], 0
	jne	SHORT $LN4@RAYvsOBB
	cmp	eax, 1
	jne	SHORT $LN4@RAYvsOBB
$LN5@RAYvsOBB:

; 82   : 		float d = PL.distance_to_sqr(SL);

	movss	xmm2, DWORD PTR _PL$[esp+92]
	subss	xmm2, DWORD PTR _SL$[esp+92]
	movss	xmm1, DWORD PTR _PL$[esp+88]
	subss	xmm1, DWORD PTR _SL$[esp+88]
	movss	xmm0, DWORD PTR _PL$[esp+84]
	subss	xmm0, DWORD PTR _SL$[esp+84]
	movaps	xmm3, xmm2
	mulss	xmm3, xmm2
	mulss	xmm0, xmm0
	movaps	xmm2, xmm1
	mulss	xmm2, xmm1

; 83   : 		if (d<R*R) {

	movss	xmm1, DWORD PTR [edi]
	addss	xmm0, xmm3
	addss	xmm0, xmm2
	movaps	xmm2, xmm1
	mulss	xmm2, xmm1
	comiss	xmm2, xmm0
	movss	DWORD PTR _d$128812[esp+80], xmm0
	jbe	SHORT $LN4@RAYvsOBB

; 84   : 			R		= _sqrt(d);

	fld	DWORD PTR _d$128812[esp+80]
	push	ecx
	fstp	DWORD PTR [esp]
	call	_sqrtf
	fstp	DWORD PTR [edi]
	add	esp, 4

; 85   : 			VERIFY	(R>=0.f);
; 86   : 			return true;

	mov	al, 1

; 90   : }

	pop	esi
	add	esp, 80					; 00000050H
	ret	0
$LN4@RAYvsOBB:

; 87   : 		}
; 88   : 	}
; 89   : 	return false;

	xor	al, al

; 90   : }

	pop	esi
	add	esp, 80					; 00000050H
	ret	0
?RAYvsOBB@@YA_NABU?$_matrix@M@@ABU?$_vector3@M@@11AAMH@Z ENDP ; RAYvsOBB
_TEXT	ENDS
PUBLIC	?center@SElement@CCF_Skeleton@@QBEXAAU?$_vector3@M@@@Z ; CCF_Skeleton::SElement::center
; Function compile flags: /Ogtpy
;	COMDAT ?center@SElement@CCF_Skeleton@@QBEXAAU?$_vector3@M@@@Z
_TEXT	SEGMENT
_center$ = 8						; size = 4
?center@SElement@CCF_Skeleton@@QBEXAAU?$_vector3@M@@@Z PROC ; CCF_Skeleton::SElement::center, COMDAT
; _this$ = ecx

; 42   : 	switch (type){

	movzx	eax, WORD PTR [ecx+76]
	sub	eax, 1
	je	SHORT $LN4@center

; 47   : 	break;
; 48   : 	case SBoneShape::stSphere: 
; 49   : 		center.set(s_sphere.P);
; 50   : 	break;
; 51   : 	case SBoneShape::stCylinder: 
; 52   : 		center.set(c_cylinder.m_center);

	fld	DWORD PTR [ecx]
	sub	eax, 1
	mov	eax, DWORD PTR _center$[esp-4]
	fstp	DWORD PTR [eax]
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+4]
	fld	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+8]

; 53   : 	break;
; 54   : 	default:
; 55   : 		NODEFAULT;
; 56   : 	}
; 57   : }

	ret	4
$LN4@center:

; 43   : 	case SBoneShape::stBox:
; 44   : 		center.set(	-b_IM.c.dotproduct(b_IM.i),
; 45   : 					-b_IM.c.dotproduct(b_IM.j),
; 46   : 					-b_IM.c.dotproduct(b_IM.k));

	movss	xmm2, DWORD PTR [ecx+24]
	mulss	xmm2, DWORD PTR [ecx+56]
	movss	xmm0, DWORD PTR [ecx+20]
	mulss	xmm0, DWORD PTR [ecx+52]
	movss	xmm3, DWORD PTR [ecx+40]
	mulss	xmm3, DWORD PTR [ecx+56]
	movss	xmm4, DWORD PTR [ecx+52]
	mulss	xmm4, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _center$[esp-4]
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mulss	xmm0, DWORD PTR [ecx+48]
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR __real@80000000
	movaps	xmm1, xmm0
	subss	xmm1, xmm2
	movss	xmm2, DWORD PTR [ecx+36]
	mulss	xmm2, DWORD PTR [ecx+52]
	addss	xmm3, xmm2
	movss	xmm2, DWORD PTR [ecx+32]
	mulss	xmm2, DWORD PTR [ecx+48]
	addss	xmm3, xmm2
	movaps	xmm2, xmm0
	subss	xmm2, xmm3
	movss	xmm3, DWORD PTR [ecx+56]
	mulss	xmm3, DWORD PTR [ecx+8]
	addss	xmm3, xmm4
	movss	xmm4, DWORD PTR [ecx+48]
	mulss	xmm4, DWORD PTR [ecx]
	addss	xmm3, xmm4
	subss	xmm0, xmm3
	movss	DWORD PTR [eax], xmm0
	movss	DWORD PTR [eax+4], xmm1
	movss	DWORD PTR [eax+8], xmm2

; 53   : 	break;
; 54   : 	default:
; 55   : 		NODEFAULT;
; 56   : 	}
; 57   : }

	ret	4
?center@SElement@CCF_Skeleton@@QBEXAAU?$_vector3@M@@@Z ENDP ; CCF_Skeleton::SElement::center
_TEXT	ENDS
PUBLIC	??0ICollisionForm@@QAE@PAVCObject@@W4ECollisionFormType@@@Z ; ICollisionForm::ICollisionForm
; Function compile flags: /Ogtpy
;	COMDAT ??0ICollisionForm@@QAE@PAVCObject@@W4ECollisionFormType@@@Z
_TEXT	SEGMENT
__owner$ = 8						; size = 4
_tp$ = 12						; size = 4
??0ICollisionForm@@QAE@PAVCObject@@W4ECollisionFormType@@@Z PROC ; ICollisionForm::ICollisionForm, COMDAT
; _this$ = ecx

; 30   : 	owner				= _owner;
; 31   : 	m_type				= tp;
; 32   : 	bv_sphere.identity	( );

	xorps	xmm0, xmm0
	mov	edx, DWORD PTR _tp$[esp-4]
	mov	eax, ecx
	mov	ecx, DWORD PTR __owner$[esp-4]
	mov	DWORD PTR [eax], OFFSET ??_7ICollisionForm@@6B@
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+52], edx
	movss	DWORD PTR [eax+36], xmm0
	movss	DWORD PTR [eax+40], xmm0
	movss	DWORD PTR [eax+44], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+48], xmm0

; 33   : }

	ret	8
??0ICollisionForm@@QAE@PAVCObject@@W4ECollisionFormType@@@Z ENDP ; ICollisionForm::ICollisionForm
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
;	COMDAT ??0?$_Vector_base@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Ushape_def@CCF_Shape@@@@@Z
_TEXT	SEGMENT
??0?$_Vector_base@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Ushape_def@CCF_Shape@@@@@Z PROC ; stlp_std::priv::_Vector_base<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_Vector_base<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >, COMDAT
; _this$ = eax

; 67   :     : _M_start(0), _M_finish(0), _M_end_of_storage(__a, 0) {}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$_Vector_base@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Ushape_def@CCF_Shape@@@@@Z ENDP ; stlp_std::priv::_Vector_base<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_Vector_base<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Vector_base@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@ABV?$xalloc@USElement@CCF_Skeleton@@@@@Z
_TEXT	SEGMENT
??0?$_Vector_base@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@ABV?$xalloc@USElement@CCF_Skeleton@@@@@Z PROC ; stlp_std::priv::_Vector_base<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_Vector_base<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >, COMDAT
; _this$ = eax

; 67   :     : _M_start(0), _M_finish(0), _M_end_of_storage(__a, 0) {}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$_Vector_base@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@ABV?$xalloc@USElement@CCF_Skeleton@@@@@Z ENDP ; stlp_std::priv::_Vector_base<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_Vector_base<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Ushape_def@CCF_Shape@@@@@Z
_TEXT	SEGMENT
??0?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Ushape_def@CCF_Shape@@@@@Z PROC ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >, COMDAT
; _this$ = eax

; 208  :     : _STLP_PRIV _Vector_base<_Tp, _Alloc>(__a) {}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Ushape_def@CCF_Shape@@@@@Z ENDP ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@ABV?$xalloc@USElement@CCF_Skeleton@@@@@Z
_TEXT	SEGMENT
??0?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@ABV?$xalloc@USElement@CCF_Skeleton@@@@@Z PROC ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >, COMDAT
; _this$ = eax

; 208  :     : _STLP_PRIV _Vector_base<_Tp, _Alloc>(__a) {}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@ABV?$xalloc@USElement@CCF_Skeleton@@@@@Z ENDP ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ??0?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QAE@ABV?$xalloc@Ushape_def@CCF_Shape@@@@@Z
_TEXT	SEGMENT
??0?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QAE@ABV?$xalloc@Ushape_def@CCF_Shape@@@@@Z PROC ; stlp_std::vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >, COMDAT
; _this$ = eax

; 106  :   explicit vector(const allocator_type& __a = allocator_type())

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QAE@ABV?$xalloc@Ushape_def@CCF_Shape@@@@@Z ENDP ; stlp_std::vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAE@ABV?$xalloc@USElement@CCF_Skeleton@@@@@Z
_TEXT	SEGMENT
??0?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAE@ABV?$xalloc@USElement@CCF_Skeleton@@@@@Z PROC ; stlp_std::vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >, COMDAT
; _this$ = eax

; 106  :   explicit vector(const allocator_type& __a = allocator_type())

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAE@ABV?$xalloc@USElement@CCF_Skeleton@@@@@Z ENDP ; stlp_std::vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xr_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xr_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@@QAE@XZ PROC ; xr_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::xr_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >, COMDAT
; _this$ = eax

; 123  : 			xr_vector			()									: inherited	()					{}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$xr_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@@QAE@XZ ENDP ; xr_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::xr_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$xr_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xr_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@@QAE@XZ PROC ; xr_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::xr_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >, COMDAT
; _this$ = eax

; 123  : 			xr_vector			()									: inherited	()					{}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$xr_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@@QAE@XZ ENDP ; xr_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::xr_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_sphere.h
_TEXT	ENDS
;	COMDAT ?intersect@?$_sphere@M@@QBE?AW4ERP_Result@1@ABU?$_vector3@M@@0AAM@Z
_TEXT	SEGMENT
_fRoot$302546 = -20					; size = 4
_fDiscr$302542 = -20					; size = 4
_fA$302538 = -16					; size = 4
_fB$302539 = -12					; size = 4
$T302555 = -8						; size = 4
tv193 = -4						; size = 4
?intersect@?$_sphere@M@@QBE?AW4ERP_Result@1@ABU?$_vector3@M@@0AAM@Z PROC ; _sphere<float>::intersect, COMDAT
; _this$ = eax
; _start$ = edx
; _dir$ = ecx
; _dist$ = esi

; 77   : 	{

	sub	esp, 20					; 00000014H

; 78   : 		int				quantity;
; 79   : 		T				afT[2];
; 80   : 		ERP_Result		result	= intersect(start,dir,dist,quantity,afT);

	movss	xmm2, DWORD PTR [edx+4]
	subss	xmm2, DWORD PTR [eax+4]
	movss	xmm3, DWORD PTR [edx+8]
	subss	xmm3, DWORD PTR [eax+8]
	movss	xmm0, DWORD PTR [ecx+8]
	movss	xmm4, DWORD PTR [ecx+4]
	movss	xmm1, DWORD PTR [edx]
	subss	xmm1, DWORD PTR [eax]
	movss	xmm5, DWORD PTR [esi]
	mulss	xmm4, xmm2
	movaps	xmm7, xmm1
	mulss	xmm7, xmm1
	mulss	xmm0, xmm3
	addss	xmm0, xmm4
	movss	xmm4, DWORD PTR [ecx]
	mulss	xmm4, xmm1
	movaps	xmm1, xmm3
	mulss	xmm1, xmm3
	addss	xmm7, xmm1
	movaps	xmm1, xmm2
	mulss	xmm1, xmm2
	addss	xmm7, xmm1
	movss	xmm1, DWORD PTR [eax+12]
	addss	xmm0, xmm4
	mulss	xmm0, xmm5
	movaps	xmm2, xmm1
	mulss	xmm2, xmm1
	movaps	xmm6, xmm5
	mulss	xmm6, xmm5
	subss	xmm7, xmm2
	xorps	xmm2, xmm2
	movaps	xmm4, xmm0
	mulss	xmm4, xmm0
	mulss	xmm7, xmm6
	subss	xmm4, xmm7
	comiss	xmm2, xmm4
	movss	DWORD PTR tv193[esp+20], xmm5
	movss	DWORD PTR $T302555[esp+20], xmm5
	movss	DWORD PTR _fA$302538[esp+20], xmm6
	movss	DWORD PTR _fB$302539[esp+20], xmm0
	movss	DWORD PTR _fDiscr$302542[esp+20], xmm4
	ja	$LN1@intersect@6
	comiss	xmm4, xmm2
	jbe	SHORT $LN15@intersect@6
	fld	DWORD PTR _fDiscr$302542[esp+20]
	push	ecx
	fstp	DWORD PTR [esp]
	call	_sqrtf
	movss	xmm4, DWORD PTR _fB$302539[esp+24]
	fstp	DWORD PTR _fRoot$302546[esp+24]
	movss	xmm1, DWORD PTR __real@80000000
	movss	xmm0, DWORD PTR _fRoot$302546[esp+24]
	movss	xmm2, DWORD PTR __real@3f800000
	divss	xmm2, DWORD PTR _fA$302538[esp+24]
	movss	xmm3, DWORD PTR $T302555[esp+24]
	subss	xmm1, xmm4
	subss	xmm1, xmm0
	subss	xmm0, xmm4
	mulss	xmm1, xmm2
	mulss	xmm0, xmm2
	xorps	xmm2, xmm2
	add	esp, 4
	mulss	xmm1, xmm3
	comiss	xmm1, xmm2
	mulss	xmm0, xmm3
	jae	SHORT $LN31@intersect@6
	comiss	xmm0, xmm2
	jb	SHORT $LN1@intersect@6
	movaps	xmm1, xmm0
	mov	eax, 1
	jmp	SHORT $LN30@intersect@6
$LN15@intersect@6:
	movss	xmm1, DWORD PTR __real@80000000
	divss	xmm0, xmm6
	subss	xmm1, xmm0
	mulss	xmm1, xmm5
	comiss	xmm1, xmm2
	jb	SHORT $LN1@intersect@6
$LN31@intersect@6:
	mov	eax, 2
$LN30@intersect@6:

; 81   : 		if (rpNone!=result){
; 82   : 			VERIFY		(quantity>0);
; 83   : 			if (afT[0]<dist){

	movss	xmm0, DWORD PTR tv193[esp+20]
	comiss	xmm0, xmm1
	jbe	SHORT $LN1@intersect@6

; 84   : 				dist	= afT[0];

	movss	DWORD PTR [esi], xmm1

; 89   : 	}

	add	esp, 20					; 00000014H
	ret	0
$LN1@intersect@6:

; 85   : 				return	result;
; 86   : 			}
; 87   : 		}
; 88   : 		return			rpNone;

	xor	eax, eax

; 89   : 	}

	add	esp, 20					; 00000014H
	ret	0
?intersect@?$_sphere@M@@QBE?AW4ERP_Result@1@ABU?$_vector3@M@@0AAM@Z ENDP ; _sphere<float>::intersect
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_plane.h
_TEXT	ENDS
;	COMDAT ?build@?$_plane@M@@QAEAAV1@ABU?$_vector3@M@@00@Z
_TEXT	SEGMENT
_mag$302582 = -16					; size = 4
tv224 = -12						; size = 4
tv228 = -8						; size = 4
tv233 = -4						; size = 4
?build@?$_plane@M@@QAEAAV1@ABU?$_vector3@M@@00@Z PROC	; _plane<float>::build, COMDAT
; _this$ = esi
; _v1$ = edi
; _v2$ = ecx
; _v3$ = eax

; 26   : 	{

	sub	esp, 16					; 00000010H

; 27   : 		_vector3<T> t1,t2;
; 28   : 		n.crossproduct(t1.sub(v1,v2), t2.sub(v1,v3)).normalize();

	movss	xmm0, DWORD PTR [edi+4]
	movss	xmm2, DWORD PTR [edi+8]
	movss	xmm1, DWORD PTR [edi]
	movaps	xmm4, xmm0
	subss	xmm0, DWORD PTR [ecx+4]
	subss	xmm4, DWORD PTR [eax+4]
	movaps	xmm3, xmm1
	subss	xmm1, DWORD PTR [ecx]
	subss	xmm3, DWORD PTR [eax]
	movaps	xmm5, xmm2
	subss	xmm2, DWORD PTR [ecx+8]
	subss	xmm5, DWORD PTR [eax+8]
	movaps	xmm6, xmm0
	movaps	xmm7, xmm2
	mulss	xmm0, xmm5
	mulss	xmm7, xmm4
	subss	xmm0, xmm7
	movaps	xmm7, xmm1
	mulss	xmm1, xmm4
	mulss	xmm6, xmm3
	subss	xmm1, xmm6
	mulss	xmm2, xmm3
	movaps	xmm3, xmm1
	mulss	xmm3, xmm1
	movss	DWORD PTR tv233[esp+16], xmm1
	mulss	xmm7, xmm5
	subss	xmm2, xmm7
	movaps	xmm1, xmm2
	mulss	xmm1, xmm2
	addss	xmm3, xmm1
	movaps	xmm1, xmm0
	mulss	xmm1, xmm0
	movss	DWORD PTR tv224[esp+16], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm3, xmm1
	push	ecx
	divss	xmm0, xmm3
	movss	DWORD PTR tv228[esp+20], xmm2
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	fstp	DWORD PTR _mag$302582[esp+20]
	movss	xmm2, DWORD PTR _mag$302582[esp+20]
	movss	xmm0, DWORD PTR tv224[esp+20]
	movss	xmm1, DWORD PTR tv233[esp+20]
	mulss	xmm0, xmm2
	movaps	xmm3, xmm0
	movss	xmm0, DWORD PTR tv228[esp+20]
	mulss	xmm1, xmm2
	movss	DWORD PTR [esi+8], xmm1
	mulss	xmm0, xmm2
	movss	DWORD PTR [esi+4], xmm0
	movss	DWORD PTR [esi], xmm3

; 29   : 		d = -n.dotproduct(v1);

	mulss	xmm1, DWORD PTR [edi+8]
	mulss	xmm0, DWORD PTR [edi+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [edi]
	mulss	xmm1, xmm3
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@80000000
	subss	xmm1, xmm0
	movss	DWORD PTR [esi+12], xmm1

; 30   : 		return *this;

	mov	eax, esi

; 31   : 	}

	add	esp, 20					; 00000014H
	ret	0
?build@?$_plane@M@@QAEAAV1@ABU?$_vector3@M@@00@Z ENDP	; _plane<float>::build
_TEXT	ENDS
PUBLIC	?Contact@CCF_Shape@@QAEHPAVCObject@@@Z		; CCF_Shape::Contact
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\xr_collide_form.cpp
;	COMDAT ?Contact@CCF_Shape@@QAEHPAVCObject@@@Z
_TEXT	SEGMENT
tv3026 = -340						; size = 4
tv1270 = -340						; size = 4
tv1267 = -340						; size = 4
tv1262 = -340						; size = 4
_mag$303129 = -340					; size = 4
_mag$303067 = -340					; size = 4
_mag$303010 = -340					; size = 4
_mag$302953 = -340					; size = 4
tv997 = -340						; size = 4
tv515 = -340						; size = 4
tv511 = -340						; size = 4
tv509 = -340						; size = 4
_mag$302896 = -340					; size = 4
_mag$302842 = -340					; size = 4
_S$ = -336						; size = 16
_P$129067 = -320					; size = 16
tv1697 = -304						; size = 4
tv1683 = -300						; size = 4
tv1701 = -296						; size = 4
tv1687 = -292						; size = 4
_el$129050 = -288					; size = 4
tv2482 = -284						; size = 4
tv1672 = -280						; size = 4
tv2927 = -276						; size = 4
tv1665 = -272						; size = 4
tv2499 = -268						; size = 4
_B$129066 = -264					; size = 96
tv2431 = -164						; size = 4
tv2412 = -160						; size = 4
tv2416 = -156						; size = 4
tv2444 = -152						; size = 4
tv2491 = -148						; size = 4
tv2429 = -144						; size = 4
tv2442 = -140						; size = 4
tv2425 = -136						; size = 4
tv2418 = -132						; size = 4
tv2438 = -128						; size = 4
tv2526 = -124						; size = 4
tv2440 = -120						; size = 4
tv2462 = -116						; size = 4
tv2571 = -112						; size = 4
tv2453 = -108						; size = 4
tv2581 = -104						; size = 4
tv2569 = -100						; size = 4
_SumR$302712 = -96					; size = 4
tv2579 = -92						; size = 4
tv2464 = -88						; size = 4
tv2414 = -84						; size = 4
tv2474 = -80						; size = 4
tv2472 = -76						; size = 4
tv2451 = -72						; size = 4
tv2427 = -68						; size = 4
_Q$129063 = -64						; size = 64
_O$ = 8							; size = 4
?Contact@CCF_Shape@@QAEHPAVCObject@@@Z PROC		; CCF_Shape::Contact, COMDAT
; _this$ = ecx

; 430  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi

; 431  : 	// Build object-sphere in World-Space
; 432  : 	Fsphere			S;
; 433  : 	if (O->Visual()){

	mov	esi, DWORD PTR _O$[ebp]
	cmp	DWORD PTR [esi+144], 0
	push	edi
	mov	ebx, ecx
	je	SHORT $LN18@Contact

; 434  : 		O->Center		(S.P);

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax+16]
	lea	ecx, DWORD PTR _S$[esp+352]
	push	ecx
	mov	ecx, esi
	call	edx

; 435  : 		S.R				= O->Radius();

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax+20]
	mov	ecx, esi
	call	edx
	fstp	DWORD PTR _S$[esp+364]
	movss	xmm5, DWORD PTR _S$[esp+360]
	movss	xmm4, DWORD PTR _S$[esp+356]
	movss	xmm2, DWORD PTR _S$[esp+352]
	jmp	$LN15@Contact
$LN18@Contact:

; 436  : 	}else if (O->CFORM()){

	mov	eax, DWORD PTR [esi+160]
	test	eax, eax
	je	$LN16@Contact

; 437  : 		S = O->CFORM()->getSphere();

	mov	ecx, DWORD PTR [eax+36]

; 438  : 		O->XFORM().transform_tiny(S.P);

	movss	xmm2, DWORD PTR [esi+112]
	movss	xmm3, DWORD PTR [esi+96]
	movss	xmm4, DWORD PTR [esi+80]
	movss	xmm5, DWORD PTR [esi+116]
	mov	DWORD PTR _S$[esp+352], ecx
	mov	edx, DWORD PTR [eax+40]
	mov	DWORD PTR _S$[esp+356], edx
	mov	ecx, DWORD PTR [eax+44]
	movss	xmm1, DWORD PTR _S$[esp+356]
	mov	DWORD PTR _S$[esp+360], ecx
	movss	xmm0, DWORD PTR _S$[esp+360]
	mov	edx, DWORD PTR [eax+48]
	mulss	xmm2, xmm0
	mulss	xmm3, xmm1
	addss	xmm2, xmm3
	movss	xmm3, DWORD PTR _S$[esp+352]
	mulss	xmm4, xmm3
	mulss	xmm5, xmm0
	addss	xmm2, xmm4
	movss	xmm4, DWORD PTR [esi+84]
	addss	xmm2, DWORD PTR [esi+128]
	mulss	xmm4, xmm3
	addss	xmm4, xmm5
	movss	xmm5, DWORD PTR [esi+100]
	mulss	xmm5, xmm1
	addss	xmm4, xmm5
	movss	xmm5, DWORD PTR [esi+88]
	addss	xmm4, DWORD PTR [esi+132]
	mulss	xmm5, xmm3
	movss	xmm3, DWORD PTR [esi+120]
	mulss	xmm3, xmm0
	movss	xmm0, DWORD PTR [esi+104]
	addss	xmm5, xmm3
	mulss	xmm0, xmm1
	addss	xmm5, xmm0
	addss	xmm5, DWORD PTR [esi+136]
	mov	DWORD PTR _S$[esp+364], edx
	movss	DWORD PTR _S$[esp+352], xmm2
	movss	DWORD PTR _S$[esp+356], xmm4
	movss	DWORD PTR _S$[esp+360], xmm5
$LN15@Contact:

; 439  : 	}else return FALSE;
; 440  : 	
; 441  : 	// Get our matrix
; 442  : 	const Fmatrix& XF	= Owner()->XFORM();
; 443  : 	
; 444  : 	// Iterate
; 445  : 	for (u32 el=0; el<shapes.size(); el++)

	mov	ecx, DWORD PTR [ebx+60]
	sub	ecx, DWORD PTR [ebx+56]
	mov	edi, DWORD PTR [ebx+4]
	mov	eax, 1041204193				; 3e0f83e1H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	edi, 80					; 00000050H
	add	eax, edx
	mov	DWORD PTR _el$129050[esp+352], 0
	je	$LN16@Contact
	mov	esi, DWORD PTR [ebx+56]
	movss	xmm1, DWORD PTR _S$[esp+364]
	mov	DWORD PTR tv2927[esp+352], esi
	add	esi, 24					; 00000018H
	npad	7
$LL14@Contact:

; 446  : 	{
; 447  : 		switch (shapes[el].type)

	mov	ecx, DWORD PTR tv2927[esp+352]
	mov	eax, DWORD PTR [ecx]
	sub	eax, 0
	je	$LN60@Contact
	sub	eax, 1
	jne	$LN13@Contact

; 456  : 			}
; 457  : 			break;
; 458  : 		case 1:	// box
; 459  : 			{
; 460  : 				Fmatrix		Q;
; 461  : 				Fmatrix&	T		= shapes[el].data.box;
; 462  : 				Q.mul_43			( XF,T);

	movss	xmm6, DWORD PTR [esi-16]
	movss	xmm7, DWORD PTR [esi-20]
	movss	xmm4, DWORD PTR [edi+16]
	movss	xmm0, DWORD PTR [edi]
	movss	xmm2, DWORD PTR [esi-12]
	movss	xmm1, DWORD PTR [edi+32]
	movss	xmm5, DWORD PTR [edi+20]
	movss	DWORD PTR tv1672[esp+352], xmm4
	mulss	xmm4, xmm6
	movss	DWORD PTR tv1665[esp+352], xmm1
	mulss	xmm1, xmm2
	movaps	xmm3, xmm0
	mulss	xmm3, xmm7
	addss	xmm3, xmm4
	movss	DWORD PTR tv1687[esp+352], xmm5
	mulss	xmm5, xmm6
	addss	xmm3, xmm1
	movss	xmm1, DWORD PTR [edi+36]
	movss	DWORD PTR tv1683[esp+352], xmm1
	movss	xmm1, DWORD PTR [edi+4]
	movaps	xmm4, xmm1
	mulss	xmm4, xmm7
	addss	xmm4, xmm5
	movss	xmm5, DWORD PTR tv1683[esp+352]
	mulss	xmm5, xmm2
	movss	xmm2, DWORD PTR [edi+40]
	movss	DWORD PTR tv1697[esp+352], xmm2
	movss	xmm2, DWORD PTR [edi+24]
	addss	xmm4, xmm5
	movss	DWORD PTR tv1701[esp+352], xmm2
	movss	xmm2, DWORD PTR [edi+8]
	movaps	xmm5, xmm2
	mulss	xmm5, xmm7
	movss	xmm7, DWORD PTR tv1701[esp+352]
	mulss	xmm7, xmm6
	movss	xmm6, DWORD PTR [esi-12]
	addss	xmm5, xmm7
	movss	xmm7, DWORD PTR tv1697[esp+352]
	mulss	xmm7, xmm6
	movss	xmm6, DWORD PTR [esi]
	addss	xmm5, xmm7
	movss	xmm7, DWORD PTR tv1672[esp+352]
	mulss	xmm7, xmm6
	movss	xmm6, DWORD PTR [esi-4]
	movss	DWORD PTR tv515[esp+352], xmm7
	movaps	xmm7, xmm0
	mulss	xmm7, xmm6
	movss	xmm6, DWORD PTR tv515[esp+352]
	addss	xmm6, xmm7
	movss	xmm7, DWORD PTR tv1665[esp+352]
	movss	DWORD PTR tv515[esp+352], xmm6
	movss	xmm6, DWORD PTR [esi+4]
	mulss	xmm7, xmm6
	movss	xmm6, DWORD PTR tv515[esp+352]
	addss	xmm6, xmm7
	movss	DWORD PTR _Q$129063[esp+368], xmm6
	movss	xmm6, DWORD PTR [esi-4]
	movaps	xmm7, xmm1
	mulss	xmm7, xmm6
	movss	xmm6, DWORD PTR [esi+4]
	movss	DWORD PTR tv511[esp+352], xmm7
	movss	xmm7, DWORD PTR tv1683[esp+352]
	mulss	xmm7, xmm6
	movss	xmm6, DWORD PTR tv511[esp+352]
	addss	xmm6, xmm7
	movss	xmm7, DWORD PTR tv1687[esp+352]
	movss	DWORD PTR tv511[esp+352], xmm6
	movss	xmm6, DWORD PTR [esi]
	mulss	xmm7, xmm6
	movss	xmm6, DWORD PTR tv511[esp+352]
	addss	xmm6, xmm7
	movss	DWORD PTR _Q$129063[esp+372], xmm6
	movss	xmm6, DWORD PTR [esi-4]
	movaps	xmm7, xmm2
	mulss	xmm7, xmm6
	movss	xmm6, DWORD PTR [esi+4]
	movss	DWORD PTR tv509[esp+352], xmm7
	movss	xmm7, DWORD PTR tv1697[esp+352]
	mulss	xmm7, xmm6
	movss	xmm6, DWORD PTR tv509[esp+352]
	addss	xmm6, xmm7
	movss	DWORD PTR tv509[esp+352], xmm6
	movss	xmm6, DWORD PTR [esi]
	movss	xmm7, DWORD PTR tv1701[esp+352]
	mulss	xmm7, xmm6
	movss	xmm6, DWORD PTR tv509[esp+352]
	addss	xmm6, xmm7
	movss	DWORD PTR _Q$129063[esp+376], xmm6
	movss	xmm6, DWORD PTR [esi+12]
	movaps	xmm7, xmm0
	mulss	xmm7, xmm6
	movss	xmm6, DWORD PTR [esi+16]
	movss	DWORD PTR tv1270[esp+352], xmm7
	movss	xmm7, DWORD PTR tv1672[esp+352]
	mulss	xmm7, xmm6
	movss	xmm6, DWORD PTR tv1270[esp+352]
	addss	xmm6, xmm7
	movss	xmm7, DWORD PTR tv1665[esp+352]
	movss	DWORD PTR tv1270[esp+352], xmm6
	movss	xmm6, DWORD PTR [esi+20]
	mulss	xmm7, xmm6
	movss	xmm6, DWORD PTR tv1270[esp+352]
	addss	xmm6, xmm7
	movss	DWORD PTR _Q$129063[esp+384], xmm6
	movss	xmm6, DWORD PTR [esi+12]
	movaps	xmm7, xmm1
	mulss	xmm7, xmm6
	movss	xmm6, DWORD PTR [esi+16]
	movss	DWORD PTR tv1267[esp+352], xmm7
	movss	xmm7, DWORD PTR tv1687[esp+352]
	mulss	xmm7, xmm6
	movss	xmm6, DWORD PTR tv1267[esp+352]
	addss	xmm6, xmm7
	movss	xmm7, DWORD PTR tv1683[esp+352]
	movss	DWORD PTR tv1267[esp+352], xmm6
	movss	xmm6, DWORD PTR [esi+20]
	mulss	xmm7, xmm6
	movss	xmm6, DWORD PTR tv1267[esp+352]
	addss	xmm6, xmm7
	movss	DWORD PTR _Q$129063[esp+388], xmm6
	movss	xmm6, DWORD PTR [esi+12]
	movaps	xmm7, xmm2
	mulss	xmm7, xmm6
	movss	xmm6, DWORD PTR [esi+16]
	movss	DWORD PTR tv1262[esp+352], xmm7
	movss	xmm7, DWORD PTR tv1701[esp+352]
	mulss	xmm7, xmm6
	movss	xmm6, DWORD PTR tv1262[esp+352]
	addss	xmm6, xmm7
	movss	xmm7, DWORD PTR tv1697[esp+352]
	movss	DWORD PTR tv1262[esp+352], xmm6
	movss	xmm6, DWORD PTR [esi+20]
	mulss	xmm7, xmm6
	movss	xmm6, DWORD PTR tv1262[esp+352]
	addss	xmm6, xmm7
	movss	xmm7, DWORD PTR [esi+32]
	movss	DWORD PTR _Q$129063[esp+392], xmm6
	movss	xmm6, DWORD PTR [esi+28]
	mulss	xmm0, xmm6
	movss	xmm6, DWORD PTR tv1672[esp+352]
	mulss	xmm6, xmm7
	movss	xmm7, DWORD PTR [esi+36]
	addss	xmm0, xmm6
	movss	xmm6, DWORD PTR tv1665[esp+352]
	mulss	xmm6, xmm7
	movss	xmm7, DWORD PTR [esi+32]
	addss	xmm0, xmm6
	movss	xmm6, DWORD PTR [esi+28]
	addss	xmm0, DWORD PTR [edi+48]
	mulss	xmm1, xmm6
	movss	xmm6, DWORD PTR tv1687[esp+352]
	mulss	xmm6, xmm7
	movss	xmm7, DWORD PTR [esi+36]
	addss	xmm1, xmm6
	movss	xmm6, DWORD PTR tv1683[esp+352]
	mulss	xmm6, xmm7
	movss	xmm7, DWORD PTR [esi+32]
	addss	xmm1, xmm6
	movss	xmm6, DWORD PTR [esi+28]
	addss	xmm1, DWORD PTR [edi+52]
	mulss	xmm2, xmm6
	movss	xmm6, DWORD PTR tv1701[esp+352]
	mulss	xmm6, xmm7
	addss	xmm2, xmm6
	movss	xmm7, DWORD PTR [esi+36]
	movss	xmm6, DWORD PTR tv1697[esp+352]
	mulss	xmm6, xmm7

; 463  : 
; 464  : 				// Build points
; 465  : 				Fvector A,B[8];
; 466  : 				Fplane  P;
; 467  : 				A.set(-.5f, -.5f, -.5f);	Q.transform_tiny(B[0],A);

	movss	xmm7, DWORD PTR __real@bf000000
	addss	xmm2, xmm6
	movaps	xmm6, xmm3
	mulss	xmm6, xmm7
	movss	DWORD PTR tv2412[esp+352], xmm6
	movss	xmm6, DWORD PTR _Q$129063[esp+384]
	mulss	xmm6, xmm7
	movss	DWORD PTR tv2414[esp+352], xmm6
	addss	xmm6, DWORD PTR tv2412[esp+352]
	movss	DWORD PTR tv2416[esp+352], xmm6
	movss	xmm6, DWORD PTR _Q$129063[esp+368]
	mulss	xmm6, xmm7
	movss	DWORD PTR tv2418[esp+352], xmm6
	addss	xmm2, DWORD PTR [edi+56]
	movaps	xmm7, xmm0
	addss	xmm7, xmm6
	addss	xmm7, DWORD PTR tv2416[esp+352]
	movss	DWORD PTR _B$129066[esp+352], xmm7
	movss	xmm7, DWORD PTR __real@bf000000
	movaps	xmm6, xmm4
	mulss	xmm6, xmm7
	movss	DWORD PTR tv2425[esp+352], xmm6
	movss	xmm6, DWORD PTR _Q$129063[esp+388]
	mulss	xmm6, xmm7
	movss	DWORD PTR tv2427[esp+352], xmm6
	addss	xmm6, DWORD PTR tv2425[esp+352]
	movss	DWORD PTR tv2429[esp+352], xmm6
	movss	xmm6, DWORD PTR _Q$129063[esp+372]
	mulss	xmm6, xmm7
	movss	DWORD PTR tv2431[esp+352], xmm6
	movaps	xmm7, xmm1
	addss	xmm7, xmm6
	addss	xmm7, DWORD PTR tv2429[esp+352]
	movss	DWORD PTR _B$129066[esp+356], xmm7
	movss	xmm7, DWORD PTR __real@bf000000
	movaps	xmm6, xmm5
	mulss	xmm6, xmm7
	movss	DWORD PTR tv2438[esp+352], xmm6
	movss	xmm6, DWORD PTR _Q$129063[esp+392]
	mulss	xmm6, xmm7
	movss	DWORD PTR tv2440[esp+352], xmm6
	addss	xmm6, DWORD PTR tv2438[esp+352]
	movss	DWORD PTR tv2442[esp+352], xmm6
	movss	xmm6, DWORD PTR _Q$129063[esp+376]
	mulss	xmm6, xmm7
	movss	DWORD PTR tv2444[esp+352], xmm6
	movaps	xmm7, xmm2
	addss	xmm7, xmm6
	addss	xmm7, DWORD PTR tv2442[esp+352]

; 468  : 				A.set(-.5f, -.5f, +.5f);	Q.transform_tiny(B[1],A);

	movss	xmm6, DWORD PTR _Q$129063[esp+384]
	mulss	xmm6, DWORD PTR __real@3f000000
	movss	DWORD PTR _B$129066[esp+360], xmm7
	movss	DWORD PTR tv2451[esp+352], xmm6
	addss	xmm6, DWORD PTR tv2412[esp+352]
	movss	DWORD PTR tv2453[esp+352], xmm6
	movaps	xmm7, xmm0
	addss	xmm7, xmm6
	addss	xmm7, DWORD PTR tv2418[esp+352]
	movss	xmm6, DWORD PTR _Q$129063[esp+388]
	mulss	xmm6, DWORD PTR __real@3f000000
	movss	DWORD PTR _B$129066[esp+364], xmm7
	movss	DWORD PTR tv2462[esp+352], xmm6
	addss	xmm6, DWORD PTR tv2425[esp+352]
	movss	DWORD PTR tv2464[esp+352], xmm6
	movaps	xmm7, xmm1
	addss	xmm7, xmm6
	addss	xmm7, DWORD PTR tv2431[esp+352]
	movss	xmm6, DWORD PTR _Q$129063[esp+392]
	mulss	xmm6, DWORD PTR __real@3f000000
	movss	DWORD PTR _B$129066[esp+368], xmm7
	movss	DWORD PTR tv2472[esp+352], xmm6
	addss	xmm6, DWORD PTR tv2438[esp+352]
	movaps	xmm7, xmm2
	addss	xmm7, xmm6
	addss	xmm7, DWORD PTR tv2444[esp+352]
	movss	DWORD PTR tv2474[esp+352], xmm6

; 469  : 				A.set(-.5f, +.5f, +.5f);	Q.transform_tiny(B[2],A);

	movss	xmm6, DWORD PTR _Q$129063[esp+368]
	mulss	xmm6, DWORD PTR __real@3f000000

; 470  : 				A.set(-.5f, +.5f, -.5f);	Q.transform_tiny(B[3],A);
; 471  : 				A.set(+.5f, +.5f, +.5f);	Q.transform_tiny(B[4],A);

	mulss	xmm3, DWORD PTR __real@3f000000
	movss	DWORD PTR tv2482[esp+352], xmm6
	mulss	xmm4, DWORD PTR __real@3f000000
	movss	DWORD PTR _B$129066[esp+372], xmm7
	mulss	xmm5, DWORD PTR __real@3f000000
	movaps	xmm7, xmm0
	addss	xmm7, xmm6
	addss	xmm7, DWORD PTR tv2453[esp+352]
	movss	xmm6, DWORD PTR _Q$129063[esp+372]
	mulss	xmm6, DWORD PTR __real@3f000000
	movss	DWORD PTR tv2491[esp+352], xmm6
	movss	DWORD PTR _B$129066[esp+376], xmm7
	movaps	xmm7, xmm1
	addss	xmm7, xmm6
	addss	xmm7, DWORD PTR tv2464[esp+352]
	movss	xmm6, DWORD PTR _Q$129063[esp+376]
	mulss	xmm6, DWORD PTR __real@3f000000
	movss	DWORD PTR tv2499[esp+352], xmm6
	movss	DWORD PTR _B$129066[esp+380], xmm7
	movaps	xmm7, xmm2
	addss	xmm7, xmm6
	addss	xmm7, DWORD PTR tv2474[esp+352]
	movaps	xmm6, xmm0
	addss	xmm6, DWORD PTR tv2482[esp+352]
	addss	xmm6, DWORD PTR tv2416[esp+352]
	movss	DWORD PTR _B$129066[esp+388], xmm6
	movaps	xmm6, xmm1
	addss	xmm6, DWORD PTR tv2491[esp+352]
	addss	xmm6, DWORD PTR tv2429[esp+352]
	movss	DWORD PTR _B$129066[esp+392], xmm6
	movss	DWORD PTR tv2526[esp+352], xmm3
	movaps	xmm6, xmm2
	addss	xmm6, DWORD PTR tv2499[esp+352]
	addss	xmm6, DWORD PTR tv2442[esp+352]
	movss	DWORD PTR _B$129066[esp+396], xmm6
	movss	DWORD PTR _B$129066[esp+384], xmm7
	movaps	xmm7, xmm3
	addss	xmm7, DWORD PTR tv2451[esp+352]
	movaps	xmm6, xmm0
	addss	xmm6, xmm7
	addss	xmm6, DWORD PTR tv2482[esp+352]
	movss	DWORD PTR _B$129066[esp+400], xmm6
	movaps	xmm6, xmm4
	addss	xmm6, DWORD PTR tv2462[esp+352]
	movss	DWORD PTR tv2569[esp+352], xmm4
	movss	xmm4, DWORD PTR tv2491[esp+352]
	movss	DWORD PTR tv2571[esp+352], xmm6
	movaps	xmm3, xmm1
	addss	xmm3, xmm6
	addss	xmm3, xmm4
	movss	DWORD PTR _B$129066[esp+404], xmm3
	movaps	xmm6, xmm5
	addss	xmm6, DWORD PTR tv2472[esp+352]
	movaps	xmm3, xmm2
	addss	xmm3, xmm6
	addss	xmm3, DWORD PTR tv2499[esp+352]
	movss	DWORD PTR _B$129066[esp+408], xmm3

; 472  : 				A.set(+.5f, +.5f, -.5f);	Q.transform_tiny(B[5],A);

	movaps	xmm3, xmm1
	addss	xmm3, DWORD PTR tv2569[esp+352]

; 473  : 				A.set(+.5f, -.5f, +.5f);	Q.transform_tiny(B[6],A);

	addss	xmm1, DWORD PTR tv2571[esp+352]
	addss	xmm1, DWORD PTR tv2431[esp+352]
	addss	xmm3, xmm4
	addss	xmm3, DWORD PTR tv2427[esp+352]
	movss	DWORD PTR tv2581[esp+352], xmm6
	movaps	xmm6, xmm0
	addss	xmm6, DWORD PTR tv2526[esp+352]
	addss	xmm6, DWORD PTR tv2482[esp+352]
	addss	xmm6, DWORD PTR tv2414[esp+352]
	movaps	xmm4, xmm2
	addss	xmm4, xmm5
	addss	xmm4, DWORD PTR tv2499[esp+352]
	addss	xmm4, DWORD PTR tv2440[esp+352]
	addss	xmm0, xmm7
	addss	xmm0, DWORD PTR tv2418[esp+352]
	movss	DWORD PTR tv2579[esp+352], xmm5
	movss	DWORD PTR _B$129066[esp+412], xmm6
	movss	DWORD PTR _B$129066[esp+416], xmm3
	movss	DWORD PTR _B$129066[esp+420], xmm4
	movss	DWORD PTR _B$129066[esp+424], xmm0
	addss	xmm2, DWORD PTR tv2581[esp+352]
	addss	xmm2, DWORD PTR tv2444[esp+352]

; 474  : 				A.set(+.5f, -.5f, -.5f);	Q.transform_tiny(B[7],A);
; 475  : 
; 476  : 				P.build(B[0],B[3],B[5]);	if (P.classify(S.P)>S.R) break;

	movss	xmm7, DWORD PTR _B$129066[esp+352]
	movss	DWORD PTR _B$129066[esp+428], xmm1
	movss	xmm1, DWORD PTR _B$129066[esp+356]
	movaps	xmm0, xmm1
	subss	xmm0, xmm3
	movss	DWORD PTR _B$129066[esp+432], xmm2
	movss	xmm2, DWORD PTR _B$129066[esp+360]
	subss	xmm2, xmm4
	movaps	xmm3, xmm1
	subss	xmm3, DWORD PTR _B$129066[esp+392]
	movss	xmm1, DWORD PTR _B$129066[esp+360]
	subss	xmm1, DWORD PTR _B$129066[esp+396]
	movaps	xmm5, xmm7
	subss	xmm5, xmm6
	movaps	xmm6, xmm7
	subss	xmm6, DWORD PTR _B$129066[esp+388]
	movaps	xmm4, xmm3
	mulss	xmm4, xmm2
	movaps	xmm7, xmm1
	mulss	xmm7, xmm0
	mulss	xmm0, xmm6
	mulss	xmm2, xmm6
	mulss	xmm3, xmm5
	subss	xmm0, xmm3
	movaps	xmm3, xmm0
	mulss	xmm3, xmm0
	subss	xmm4, xmm7
	movss	DWORD PTR _P$129067[esp+360], xmm0
	mulss	xmm1, xmm5
	subss	xmm1, xmm2
	movaps	xmm2, xmm4
	mulss	xmm2, xmm4
	movaps	xmm0, xmm1
	mulss	xmm0, xmm1
	addss	xmm2, xmm3
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	divss	xmm0, xmm2
	movss	DWORD PTR _P$129067[esp+356], xmm4
	movss	DWORD PTR _P$129067[esp+360], xmm1
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	fstp	DWORD PTR _mag$302842[esp+356]
	movss	xmm3, DWORD PTR _mag$302842[esp+356]
	movss	xmm1, DWORD PTR _P$129067[esp+356]
	movss	xmm2, DWORD PTR _P$129067[esp+360]
	movss	xmm0, DWORD PTR _P$129067[esp+364]
	movss	xmm5, DWORD PTR _S$[esp+364]
	mulss	xmm0, xmm3
	mulss	xmm1, xmm3
	mulss	xmm2, xmm3
	movaps	xmm3, xmm0
	mulss	xmm3, DWORD PTR _B$129066[esp+364]
	movaps	xmm4, xmm1
	mulss	xmm4, DWORD PTR _B$129066[esp+356]
	addss	xmm4, xmm3
	movaps	xmm3, xmm2
	mulss	xmm3, DWORD PTR _B$129066[esp+360]
	addss	xmm4, xmm3
	movss	xmm3, DWORD PTR __real@80000000
	subss	xmm3, xmm4
	movss	xmm4, DWORD PTR _S$[esp+360]
	mulss	xmm0, xmm5
	mulss	xmm2, xmm4
	addss	xmm0, xmm2
	movss	xmm2, DWORD PTR _S$[esp+356]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _S$[esp+368]
	add	esp, 4
	addss	xmm0, xmm3
	comiss	xmm0, xmm1
	ja	$LN13@Contact

; 477  : 				P.build(B[1],B[2],B[3]);	if (P.classify(S.P)>S.R) break;

	movss	xmm1, DWORD PTR _B$129066[esp+372]
	movss	xmm3, DWORD PTR _B$129066[esp+368]
	movss	xmm5, DWORD PTR _B$129066[esp+364]
	movaps	xmm0, xmm3
	subss	xmm0, DWORD PTR _B$129066[esp+392]
	subss	xmm3, DWORD PTR _B$129066[esp+380]
	movaps	xmm2, xmm1
	subss	xmm2, DWORD PTR _B$129066[esp+396]
	subss	xmm1, DWORD PTR _B$129066[esp+384]
	movaps	xmm6, xmm3
	mulss	xmm6, xmm2
	movaps	xmm7, xmm1
	mulss	xmm7, xmm0
	movaps	xmm4, xmm5
	subss	xmm4, DWORD PTR _B$129066[esp+388]
	subss	xmm5, DWORD PTR _B$129066[esp+376]
	mulss	xmm0, xmm5
	mulss	xmm2, xmm5
	mulss	xmm3, xmm4
	subss	xmm0, xmm3
	movaps	xmm3, xmm0
	mulss	xmm3, xmm0
	subss	xmm6, xmm7
	movss	DWORD PTR _P$129067[esp+360], xmm0
	mulss	xmm1, xmm4
	subss	xmm1, xmm2
	movaps	xmm2, xmm6
	mulss	xmm2, xmm6
	movaps	xmm0, xmm1
	mulss	xmm0, xmm1
	addss	xmm2, xmm3
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	divss	xmm0, xmm2
	movss	DWORD PTR _P$129067[esp+356], xmm6
	movss	DWORD PTR _P$129067[esp+360], xmm1
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	fstp	DWORD PTR _mag$302896[esp+356]
	movss	xmm3, DWORD PTR _mag$302896[esp+356]
	movss	xmm2, DWORD PTR _P$129067[esp+360]
	movss	xmm0, DWORD PTR _P$129067[esp+364]
	movss	xmm4, DWORD PTR _B$129066[esp+368]
	movss	xmm5, DWORD PTR _S$[esp+364]
	mulss	xmm0, xmm3
	mulss	xmm2, xmm3
	movaps	xmm1, xmm3
	mulss	xmm1, DWORD PTR _P$129067[esp+356]
	movss	xmm3, DWORD PTR _B$129066[esp+376]
	mulss	xmm3, xmm0
	mulss	xmm4, xmm1
	addss	xmm4, xmm3
	movss	xmm3, DWORD PTR _B$129066[esp+372]
	mulss	xmm3, xmm2
	addss	xmm4, xmm3
	movss	xmm3, DWORD PTR __real@80000000
	subss	xmm3, xmm4
	movss	xmm4, DWORD PTR _S$[esp+360]
	mulss	xmm0, xmm5
	mulss	xmm2, xmm4
	addss	xmm0, xmm2
	movss	xmm2, DWORD PTR _S$[esp+356]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _S$[esp+368]
	add	esp, 4
	addss	xmm0, xmm3
	comiss	xmm0, xmm1
	ja	$LN13@Contact

; 478  : 				P.build(B[6],B[5],B[4]);	if (P.classify(S.P)>S.R) break;

	movss	xmm1, DWORD PTR _B$129066[esp+432]
	movss	xmm3, DWORD PTR _B$129066[esp+428]
	movss	xmm5, DWORD PTR _B$129066[esp+424]
	movaps	xmm0, xmm3
	subss	xmm0, DWORD PTR _B$129066[esp+404]
	subss	xmm3, DWORD PTR _B$129066[esp+416]
	movaps	xmm2, xmm1
	subss	xmm2, DWORD PTR _B$129066[esp+408]
	subss	xmm1, DWORD PTR _B$129066[esp+420]
	movaps	xmm6, xmm3
	mulss	xmm6, xmm2
	movaps	xmm7, xmm1
	mulss	xmm7, xmm0
	movaps	xmm4, xmm5
	subss	xmm4, DWORD PTR _B$129066[esp+400]
	subss	xmm5, DWORD PTR _B$129066[esp+412]
	mulss	xmm0, xmm5
	mulss	xmm2, xmm5
	mulss	xmm3, xmm4
	subss	xmm0, xmm3
	movaps	xmm3, xmm0
	mulss	xmm3, xmm0
	subss	xmm6, xmm7
	movss	DWORD PTR _P$129067[esp+360], xmm0
	mulss	xmm1, xmm4
	subss	xmm1, xmm2
	movaps	xmm2, xmm6
	mulss	xmm2, xmm6
	movaps	xmm0, xmm1
	mulss	xmm0, xmm1
	addss	xmm2, xmm3
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	divss	xmm0, xmm2
	movss	DWORD PTR _P$129067[esp+356], xmm6
	movss	DWORD PTR _P$129067[esp+360], xmm1
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	fstp	DWORD PTR _mag$302953[esp+356]
	movss	xmm3, DWORD PTR _mag$302953[esp+356]
	movss	xmm2, DWORD PTR _P$129067[esp+360]
	movss	xmm0, DWORD PTR _P$129067[esp+364]
	movss	xmm4, DWORD PTR _B$129066[esp+428]
	movss	xmm5, DWORD PTR _S$[esp+364]
	mulss	xmm0, xmm3
	mulss	xmm2, xmm3
	movaps	xmm1, xmm3
	mulss	xmm1, DWORD PTR _P$129067[esp+356]
	movaps	xmm3, xmm0
	mulss	xmm3, DWORD PTR _B$129066[esp+436]
	mulss	xmm4, xmm1
	addss	xmm4, xmm3
	movaps	xmm3, xmm2
	mulss	xmm3, DWORD PTR _B$129066[esp+432]
	addss	xmm4, xmm3
	movss	xmm3, DWORD PTR __real@80000000
	subss	xmm3, xmm4
	movss	xmm4, DWORD PTR _S$[esp+360]
	mulss	xmm0, xmm5
	mulss	xmm2, xmm4
	addss	xmm0, xmm2
	movss	xmm2, DWORD PTR _S$[esp+356]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _S$[esp+368]
	add	esp, 4
	addss	xmm0, xmm3
	comiss	xmm0, xmm1
	ja	$LN13@Contact

; 479  : 				P.build(B[4],B[2],B[1]);	if (P.classify(S.P)>S.R) break;

	movss	xmm1, DWORD PTR _B$129066[esp+408]
	movss	xmm3, DWORD PTR _B$129066[esp+404]
	movss	xmm6, DWORD PTR _B$129066[esp+400]
	movaps	xmm0, xmm3
	subss	xmm0, DWORD PTR _B$129066[esp+368]
	subss	xmm3, DWORD PTR _B$129066[esp+380]
	movaps	xmm2, xmm1
	subss	xmm2, DWORD PTR _B$129066[esp+372]
	subss	xmm1, DWORD PTR _B$129066[esp+384]
	movaps	xmm4, xmm3
	mulss	xmm4, xmm2
	movaps	xmm7, xmm1
	mulss	xmm7, xmm0
	movaps	xmm5, xmm6
	subss	xmm5, DWORD PTR _B$129066[esp+364]
	subss	xmm6, DWORD PTR _B$129066[esp+376]
	mulss	xmm0, xmm6
	mulss	xmm2, xmm6
	mulss	xmm3, xmm5
	subss	xmm0, xmm3
	movaps	xmm3, xmm0
	mulss	xmm3, xmm0
	subss	xmm4, xmm7
	movss	DWORD PTR _P$129067[esp+360], xmm0
	mulss	xmm1, xmm5
	subss	xmm1, xmm2
	movaps	xmm2, xmm4
	mulss	xmm2, xmm4
	movaps	xmm0, xmm1
	mulss	xmm0, xmm1
	addss	xmm2, xmm3
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	divss	xmm0, xmm2
	movss	DWORD PTR _P$129067[esp+356], xmm4
	movss	DWORD PTR _P$129067[esp+360], xmm1
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	fstp	DWORD PTR _mag$303010[esp+356]
	movss	xmm3, DWORD PTR _mag$303010[esp+356]
	movss	xmm2, DWORD PTR _P$129067[esp+360]
	movss	xmm0, DWORD PTR _P$129067[esp+364]
	movss	xmm7, DWORD PTR _B$129066[esp+404]
	movss	xmm5, DWORD PTR _S$[esp+364]
	mulss	xmm0, xmm3
	mulss	xmm2, xmm3
	movaps	xmm1, xmm3
	mulss	xmm1, DWORD PTR _P$129067[esp+356]
	movaps	xmm3, xmm0
	mulss	xmm3, DWORD PTR _B$129066[esp+412]
	movaps	xmm4, xmm7
	mulss	xmm4, xmm1
	addss	xmm4, xmm3
	movaps	xmm3, xmm2
	mulss	xmm3, DWORD PTR _B$129066[esp+408]
	addss	xmm4, xmm3
	movss	xmm3, DWORD PTR __real@80000000
	subss	xmm3, xmm4
	movss	xmm4, DWORD PTR _S$[esp+360]
	mulss	xmm0, xmm5
	mulss	xmm2, xmm4
	addss	xmm0, xmm2
	movss	xmm2, DWORD PTR _S$[esp+356]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _S$[esp+368]
	add	esp, 4
	addss	xmm0, xmm3
	comiss	xmm0, xmm1
	ja	$LN13@Contact

; 480  : 				P.build(B[3],B[2],B[4]);	if (P.classify(S.P)>S.R) break;

	movss	xmm6, DWORD PTR _B$129066[esp+388]
	movss	xmm1, DWORD PTR _B$129066[esp+396]
	movss	xmm3, DWORD PTR _B$129066[esp+392]
	movaps	xmm0, xmm3
	subss	xmm0, DWORD PTR _B$129066[esp+404]
	subss	xmm3, DWORD PTR _B$129066[esp+380]
	movaps	xmm2, xmm1
	subss	xmm2, DWORD PTR _B$129066[esp+408]
	subss	xmm1, DWORD PTR _B$129066[esp+384]
	movaps	xmm5, xmm6
	subss	xmm6, DWORD PTR _B$129066[esp+376]
	subss	xmm5, xmm7
	movaps	xmm4, xmm3
	mulss	xmm4, xmm2
	movaps	xmm7, xmm1
	mulss	xmm7, xmm0
	mulss	xmm0, xmm6
	mulss	xmm2, xmm6
	mulss	xmm3, xmm5
	subss	xmm0, xmm3
	movaps	xmm3, xmm0
	mulss	xmm3, xmm0
	subss	xmm4, xmm7
	movss	DWORD PTR _P$129067[esp+360], xmm0
	mulss	xmm1, xmm5
	subss	xmm1, xmm2
	movaps	xmm2, xmm4
	mulss	xmm2, xmm4
	movaps	xmm0, xmm1
	mulss	xmm0, xmm1
	addss	xmm2, xmm3
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	divss	xmm0, xmm2
	movss	DWORD PTR _P$129067[esp+356], xmm4
	movss	DWORD PTR _P$129067[esp+360], xmm1
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	fstp	DWORD PTR _mag$303067[esp+356]
	movss	xmm3, DWORD PTR _mag$303067[esp+356]
	movss	xmm2, DWORD PTR _P$129067[esp+360]
	movss	xmm0, DWORD PTR _P$129067[esp+364]
	movss	xmm5, DWORD PTR _S$[esp+364]
	mulss	xmm0, xmm3
	mulss	xmm2, xmm3
	movaps	xmm1, xmm3
	mulss	xmm1, DWORD PTR _P$129067[esp+356]
	movss	xmm3, DWORD PTR _B$129066[esp+392]
	mulss	xmm3, xmm1
	movaps	xmm4, xmm0
	mulss	xmm4, DWORD PTR _B$129066[esp+400]
	addss	xmm4, xmm3
	movss	xmm3, DWORD PTR _B$129066[esp+396]
	mulss	xmm3, xmm2
	addss	xmm4, xmm3
	movss	xmm3, DWORD PTR __real@80000000
	subss	xmm3, xmm4
	movss	xmm4, DWORD PTR _S$[esp+360]
	mulss	xmm0, xmm5
	mulss	xmm2, xmm4
	addss	xmm0, xmm2
	movss	xmm2, DWORD PTR _S$[esp+356]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _S$[esp+368]
	add	esp, 4
	addss	xmm0, xmm3
	comiss	xmm0, xmm1
	ja	$LN13@Contact

; 481  : 				P.build(B[1],B[0],B[6]);	if (P.classify(S.P)>S.R) break;

	movss	xmm1, DWORD PTR _B$129066[esp+372]
	movss	xmm3, DWORD PTR _B$129066[esp+368]
	movss	xmm6, DWORD PTR _B$129066[esp+364]
	movaps	xmm0, xmm3
	subss	xmm0, DWORD PTR _B$129066[esp+428]
	subss	xmm3, DWORD PTR _B$129066[esp+356]
	movaps	xmm2, xmm1
	subss	xmm2, DWORD PTR _B$129066[esp+432]
	subss	xmm1, DWORD PTR _B$129066[esp+360]
	movaps	xmm4, xmm3
	mulss	xmm4, xmm2
	movaps	xmm7, xmm1
	mulss	xmm7, xmm0
	movaps	xmm5, xmm6
	subss	xmm5, DWORD PTR _B$129066[esp+424]
	subss	xmm6, DWORD PTR _B$129066[esp+352]
	mulss	xmm0, xmm6
	mulss	xmm2, xmm6
	mulss	xmm3, xmm5
	subss	xmm0, xmm3
	movaps	xmm3, xmm0
	mulss	xmm3, xmm0
	subss	xmm4, xmm7
	movss	DWORD PTR _P$129067[esp+360], xmm0
	mulss	xmm1, xmm5
	subss	xmm1, xmm2
	movaps	xmm2, xmm4
	mulss	xmm2, xmm4
	movaps	xmm0, xmm1
	mulss	xmm0, xmm1
	addss	xmm2, xmm3
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	divss	xmm0, xmm2
	movss	DWORD PTR _P$129067[esp+356], xmm4
	movss	DWORD PTR _P$129067[esp+360], xmm1
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	fstp	DWORD PTR _mag$303129[esp+356]
	movss	xmm3, DWORD PTR _mag$303129[esp+356]
	movss	xmm2, DWORD PTR _P$129067[esp+360]
	movss	xmm0, DWORD PTR _P$129067[esp+364]
	movss	xmm4, DWORD PTR _B$129066[esp+376]
	movss	xmm5, DWORD PTR _S$[esp+364]
	movss	xmm6, DWORD PTR __real@80000000
	mulss	xmm0, xmm3
	mulss	xmm2, xmm3
	mulss	xmm4, xmm0
	movaps	xmm1, xmm3
	mulss	xmm1, DWORD PTR _P$129067[esp+356]
	movss	xmm3, DWORD PTR _B$129066[esp+368]
	mulss	xmm3, xmm1
	addss	xmm3, xmm4
	movss	xmm4, DWORD PTR _B$129066[esp+372]
	mulss	xmm4, xmm2
	addss	xmm3, xmm4
	movss	xmm4, DWORD PTR _S$[esp+360]
	mulss	xmm0, xmm5
	mulss	xmm2, xmm4
	addss	xmm0, xmm2
	movss	xmm2, DWORD PTR _S$[esp+356]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _S$[esp+368]
	subss	xmm6, xmm3
	add	esp, 4
	addss	xmm0, xmm6
	comiss	xmm0, xmm1
	ja	$LN13@Contact
$LN264@Contact:

; 455  : 				if (S.intersect(Q))	return TRUE;

	mov	eax, 1

; 482  : 				return TRUE;
; 483  : 			}
; 484  : 			break;
; 485  : 		}
; 486  : 	}
; 487  : 	return FALSE;
; 488  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4

; 448  : 		{
; 449  : 		case 0: // sphere
; 450  : 			{
; 451  : 				Fsphere		Q;
; 452  : 				Fsphere&	T		= shapes[el].data.sphere;

$LN60@Contact:

; 453  : 				XF.transform_tiny	(Q.P,T.P);

	movss	xmm6, DWORD PTR [esi-16]
	movss	xmm3, DWORD PTR [esi-12]
	movss	xmm0, DWORD PTR [edi+16]
	movss	xmm7, DWORD PTR [edi+32]
	mulss	xmm7, xmm3
	movss	xmm3, DWORD PTR [edi]
	mulss	xmm0, xmm6
	addss	xmm0, xmm7
	movss	xmm7, DWORD PTR [esi-20]
	mulss	xmm3, xmm7
	addss	xmm0, xmm3
	movss	xmm3, DWORD PTR [edi+4]
	mulss	xmm3, xmm7
	movss	xmm7, DWORD PTR [edi+20]
	mulss	xmm7, xmm6
	movss	xmm6, DWORD PTR [esi-12]
	addss	xmm3, xmm7
	movss	xmm7, DWORD PTR [edi+36]
	mulss	xmm7, xmm6
	movss	xmm6, DWORD PTR [esi-20]
	addss	xmm0, DWORD PTR [edi+48]
	addss	xmm3, xmm7
	movss	xmm7, DWORD PTR [edi+8]
	addss	xmm3, DWORD PTR [edi+52]
	mulss	xmm7, xmm6
	movss	xmm6, DWORD PTR [esi-16]
	movss	DWORD PTR tv997[esp+352], xmm7
	movss	xmm7, DWORD PTR [edi+24]
	mulss	xmm7, xmm6
	movss	xmm6, DWORD PTR tv997[esp+352]
	addss	xmm6, xmm7
	movss	xmm7, DWORD PTR [edi+40]
	movss	DWORD PTR tv997[esp+352], xmm6
	movss	xmm6, DWORD PTR [esi-12]
	mulss	xmm7, xmm6
	movss	xmm6, DWORD PTR tv997[esp+352]
	addss	xmm6, xmm7

; 454  : 				Q.R					= T.R;

	movss	xmm7, DWORD PTR [esi-8]
	addss	xmm6, DWORD PTR [edi+56]

; 455  : 				if (S.intersect(Q))	return TRUE;

	addss	xmm7, xmm1
	movss	DWORD PTR _SumR$302712[esp+352], xmm7
	movaps	xmm7, xmm5
	subss	xmm7, xmm6
	movaps	xmm6, xmm4
	subss	xmm6, xmm3
	movaps	xmm3, xmm2
	subss	xmm3, xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, xmm3
	movaps	xmm3, xmm6
	mulss	xmm3, xmm6
	addss	xmm0, xmm3
	movaps	xmm3, xmm7
	mulss	xmm3, xmm7
	addss	xmm0, xmm3
	movss	DWORD PTR tv3026[esp+352], xmm0
	movss	xmm0, DWORD PTR _SumR$302712[esp+352]
	movaps	xmm3, xmm0
	mulss	xmm3, xmm0
	movss	xmm0, DWORD PTR tv3026[esp+352]
	comiss	xmm3, xmm0
	ja	$LN264@Contact
$LN13@Contact:

; 439  : 	}else return FALSE;
; 440  : 	
; 441  : 	// Get our matrix
; 442  : 	const Fmatrix& XF	= Owner()->XFORM();
; 443  : 	
; 444  : 	// Iterate
; 445  : 	for (u32 el=0; el<shapes.size(); el++)

	mov	ecx, DWORD PTR [ebx+60]
	sub	ecx, DWORD PTR [ebx+56]
	add	DWORD PTR _el$129050[esp+352], 1
	add	DWORD PTR tv2927[esp+352], 132		; 00000084H
	mov	eax, 1041204193				; 3e0f83e1H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	add	esi, 132				; 00000084H
	cmp	DWORD PTR _el$129050[esp+352], eax
	jb	$LL14@Contact
$LN16@Contact:

; 482  : 				return TRUE;
; 483  : 			}
; 484  : 			break;
; 485  : 		}
; 486  : 	}
; 487  : 	return FALSE;
; 488  : }

	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Contact@CCF_Shape@@QAEHPAVCObject@@@Z ENDP		; CCF_Shape::Contact
_TEXT	ENDS
PUBLIC	??0CCF_Shape@@QAE@PAVCObject@@@Z		; CCF_Shape::CCF_Shape
; Function compile flags: /Ogtpy
;	COMDAT ??0CCF_Shape@@QAE@PAVCObject@@@Z
_TEXT	SEGMENT
__owner$ = 8						; size = 4
??0CCF_Shape@@QAE@PAVCObject@@@Z PROC			; CCF_Shape::CCF_Shape, COMDAT
; _this$ = ecx

; 314  : {

	xorps	xmm0, xmm0
	mov	eax, ecx
	mov	ecx, DWORD PTR __owner$[esp-4]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+52], 1
	movss	DWORD PTR [eax+36], xmm0
	movss	DWORD PTR [eax+40], xmm0
	movss	DWORD PTR [eax+44], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	xor	ecx, ecx
	movss	DWORD PTR [eax+48], xmm0
	mov	DWORD PTR [eax], OFFSET ??_7CCF_Shape@@6B@
	mov	DWORD PTR [eax+56], ecx
	mov	DWORD PTR [eax+60], ecx
	mov	DWORD PTR [eax+64], ecx

; 315  : }

	ret	4
??0CCF_Shape@@QAE@PAVCObject@@@Z ENDP			; CCF_Shape::CCF_Shape
_TEXT	ENDS
PUBLIC	?Contact@CCF_EventBox@@QAEHPAVCObject@@@Z	; CCF_EventBox::Contact
; Function compile flags: /Ogtpy
;	COMDAT ?Contact@CCF_EventBox@@QAEHPAVCObject@@@Z
_TEXT	SEGMENT
_O$ = 8							; size = 4
?Contact@CCF_EventBox@@QAEHPAVCObject@@@Z PROC		; CCF_EventBox::Contact, COMDAT
; _this$ = ecx

; 289  : {

	push	esi

; 290  : 	IRenderVisual*	V		= O->Visual();

	mov	esi, DWORD PTR _O$[esp]
	mov	eax, DWORD PTR [esi+144]
	push	edi
	mov	edi, ecx

; 291  : 	vis_data & vis = V->getVisData();

	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	push	eax
	call	edx

; 292  : 	Fvector&		P	= vis.sphere.P;
; 293  : 	float			R	= vis.sphere.R;
; 294  : 	
; 295  : 	Fvector			PT;
; 296  : 	O->XFORM().transform_tiny(PT,P);

	movss	xmm4, DWORD PTR [eax+4]
	movss	xmm3, DWORD PTR [eax+8]
	movss	xmm5, DWORD PTR [eax]
	movss	xmm0, DWORD PTR [esi+96]
	movss	xmm1, DWORD PTR [esi+112]
	movss	xmm2, DWORD PTR [esi+100]
	movss	xmm6, DWORD PTR [eax+12]
	mulss	xmm1, xmm3
	mulss	xmm0, xmm4
	addss	xmm0, xmm1
	mulss	xmm2, xmm4
	movaps	xmm1, xmm5
	mulss	xmm1, DWORD PTR [esi+80]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [esi+84]
	addss	xmm0, DWORD PTR [esi+128]
	mulss	xmm1, xmm5
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR [esi+116]
	mulss	xmm2, xmm3
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR [esi+88]
	addss	xmm1, DWORD PTR [esi+132]
	mulss	xmm2, xmm5
	movss	xmm5, DWORD PTR [esi+104]
	mulss	xmm5, xmm4
	movss	xmm4, DWORD PTR [esi+120]
	addss	xmm2, xmm5
	mulss	xmm4, xmm3
	lea	ecx, DWORD PTR [edi+60]
	addss	xmm2, xmm4
	addss	xmm2, DWORD PTR [esi+136]
	pop	edi

; 297  : 	
; 298  : 	for (int i=0; i<6; i++) {

	xor	eax, eax
	pop	esi
$LL4@Contact@2:

; 299  : 		if (Planes[i].classify(PT)>R) return FALSE;

	movss	xmm3, DWORD PTR [ecx+4]
	movss	xmm4, DWORD PTR [ecx-4]
	mulss	xmm3, xmm2
	mulss	xmm4, xmm0
	addss	xmm3, xmm4
	movaps	xmm4, xmm1
	mulss	xmm4, DWORD PTR [ecx]
	addss	xmm3, xmm4
	addss	xmm3, DWORD PTR [ecx+8]
	comiss	xmm3, xmm6
	ja	SHORT $LN18@Contact@2
	add	eax, 1
	add	ecx, 16					; 00000010H
	cmp	eax, 6
	jl	SHORT $LL4@Contact@2

; 300  : 	}
; 301  : 	return TRUE;

	mov	eax, 1

; 302  : }

	ret	4
$LN18@Contact@2:

; 299  : 		if (Planes[i].classify(PT)>R) return FALSE;

	xor	eax, eax

; 302  : }

	ret	4
?Contact@CCF_EventBox@@QAEHPAVCObject@@@Z ENDP		; CCF_EventBox::Contact
_TEXT	ENDS
PUBLIC	??0CCF_EventBox@@QAE@PAVCObject@@@Z		; CCF_EventBox::CCF_EventBox
; Function compile flags: /Ogtpy
;	COMDAT ??0CCF_EventBox@@QAE@PAVCObject@@@Z
_TEXT	SEGMENT
tv2516 = -172						; size = 4
_mag$303648 = -172					; size = 4
_mag$303598 = -172					; size = 4
_mag$303548 = -172					; size = 4
_mag$303498 = -172					; size = 4
_mag$303448 = -172					; size = 4
_mag$303399 = -172					; size = 4
tv2506 = -168						; size = 4
tv2019 = -168						; size = 4
tv1960 = -168						; size = 4
tv1893 = -168						; size = 4
tv1826 = -168						; size = 4
tv1759 = -168						; size = 4
tv1692 = -168						; size = 4
tv2028 = -164						; size = 4
tv1969 = -164						; size = 4
tv1902 = -164						; size = 4
tv1835 = -164						; size = 4
tv1768 = -164						; size = 4
tv1701 = -164						; size = 4
tv1573 = -164						; size = 4
tv2023 = -160						; size = 4
tv1964 = -160						; size = 4
tv1897 = -160						; size = 4
tv1830 = -160						; size = 4
tv1763 = -160						; size = 4
tv1696 = -160						; size = 4
tv1593 = -160						; size = 4
tv2647 = -156						; size = 4
tv2466 = -156						; size = 4
tv2554 = -152						; size = 4
tv2504 = -152						; size = 4
tv1564 = -152						; size = 4
tv2564 = -148						; size = 4
tv2514 = -148						; size = 4
tv1584 = -148						; size = 4
tv2639 = -144						; size = 4
tv2462 = -144						; size = 4
tv2552 = -140						; size = 4
tv1568 = -140						; size = 4
tv2452 = -136						; size = 4
tv2562 = -132						; size = 4
tv1588 = -132						; size = 4
tv2541 = -128						; size = 4
tv1548 = -128						; size = 4
tv2492 = -124						; size = 4
tv1541 = -124						; size = 4
tv2605 = -120						; size = 4
tv2460 = -120						; size = 4
tv2543 = -116						; size = 4
tv2448 = -116						; size = 4
tv2597 = -112						; size = 4
tv2446 = -112						; size = 4
tv2495 = -108						; size = 4
tv2432 = -108						; size = 4
_B$ = -104						; size = 96
tv1554 = -8						; size = 4
tv2396 = -4						; size = 4
_O$ = 8							; size = 4
??0CCF_EventBox@@QAE@PAVCObject@@@Z PROC		; CCF_EventBox::CCF_EventBox, COMDAT
; _this$ = ecx

; 259  : {

	sub	esp, 172				; 000000acH
	mov	eax, DWORD PTR _O$[esp+168]
	xorps	xmm0, xmm0
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+52], 1
	movss	DWORD PTR [esi+36], xmm0
	movss	DWORD PTR [esi+40], xmm0
	movss	DWORD PTR [esi+44], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esi+48], xmm0

; 260  : 	Fvector A[8],B[8];
; 261  : 	A[0].set( -1, -1, -1);
; 262  : 	A[1].set( -1, -1, +1);
; 263  : 	A[2].set( -1, +1, +1);
; 264  : 	A[3].set( -1, +1, -1);
; 265  : 	A[4].set( +1, +1, +1);
; 266  : 	A[5].set( +1, +1, -1);
; 267  : 	A[6].set( +1, -1, +1);
; 268  : 	A[7].set( +1, -1, -1);
; 269  : 
; 270  : 	const Fmatrix& T = O->XFORM();
; 271  : 	for (int i=0; i<8; i++) {
; 272  : 		A[i].mul(.5f);
; 273  : 		T.transform_tiny(B[i],A[i]);

	movss	xmm0, DWORD PTR __real@bf000000
	mov	DWORD PTR [esi], OFFSET ??_7CCF_EventBox@@6B@
	movss	xmm5, DWORD PTR [eax+80]
	movss	xmm4, DWORD PTR [eax+96]
	movss	xmm2, DWORD PTR [eax+128]
	movss	xmm3, DWORD PTR [eax+112]
	movss	xmm7, DWORD PTR [eax+84]
	movss	xmm6, DWORD PTR [eax+100]
	movss	DWORD PTR tv1548[esp+176], xmm4
	mulss	xmm4, xmm0
	movss	DWORD PTR tv1568[esp+176], xmm6
	mulss	xmm6, xmm0
	movss	DWORD PTR tv1541[esp+176], xmm3
	movss	DWORD PTR tv1554[esp+176], xmm5
	mulss	xmm5, xmm0
	movss	DWORD PTR tv1573[esp+176], xmm7
	mulss	xmm7, xmm0
	mulss	xmm3, xmm0
	movss	DWORD PTR tv2432[esp+176], xmm4
	movaps	xmm1, xmm2
	addss	xmm1, xmm5
	addss	xmm1, xmm4
	movss	xmm4, DWORD PTR [eax+116]
	addss	xmm1, xmm3
	movss	DWORD PTR _B$[esp+176], xmm1
	movss	DWORD PTR tv2396[esp+176], xmm3
	movss	xmm3, DWORD PTR [eax+132]
	movss	DWORD PTR tv1564[esp+176], xmm4
	mulss	xmm4, xmm0
	movaps	xmm1, xmm3
	addss	xmm1, xmm7
	addss	xmm1, xmm6
	addss	xmm1, xmm4
	movss	DWORD PTR _B$[esp+180], xmm1
	movss	xmm1, DWORD PTR [eax+104]
	movss	DWORD PTR tv2448[esp+176], xmm6
	movss	xmm6, DWORD PTR [eax+120]
	movss	DWORD PTR tv1588[esp+176], xmm1
	movss	DWORD PTR tv2452[esp+176], xmm7
	movss	xmm7, DWORD PTR [eax+88]
	mulss	xmm1, xmm0
	movss	DWORD PTR tv1584[esp+176], xmm6
	mulss	xmm6, xmm0
	movss	DWORD PTR tv2462[esp+176], xmm1
	movss	DWORD PTR tv1593[esp+176], xmm7
	mulss	xmm7, xmm0
	movss	DWORD PTR tv2446[esp+176], xmm4
	movss	xmm4, DWORD PTR [eax+136]
	movss	DWORD PTR tv2460[esp+176], xmm6
	movaps	xmm1, xmm4
	addss	xmm1, xmm7
	addss	xmm1, DWORD PTR tv2462[esp+176]
	addss	xmm1, xmm6
	movss	xmm6, DWORD PTR tv1541[esp+176]
	movss	DWORD PTR _B$[esp+184], xmm1
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm6, xmm1
	movss	DWORD PTR tv2492[esp+176], xmm6
	addss	xmm6, DWORD PTR tv2432[esp+176]
	movss	DWORD PTR tv2466[esp+176], xmm7
	movss	DWORD PTR tv2495[esp+176], xmm6
	movaps	xmm7, xmm2
	addss	xmm7, xmm6
	movss	xmm6, DWORD PTR tv1564[esp+176]
	mulss	xmm6, xmm1
	movss	DWORD PTR tv2504[esp+176], xmm6
	addss	xmm6, DWORD PTR tv2448[esp+176]
	addss	xmm7, xmm5
	movss	DWORD PTR _B$[esp+188], xmm7
	movss	DWORD PTR tv2506[esp+176], xmm6
	movaps	xmm7, xmm3
	addss	xmm7, xmm6
	addss	xmm7, DWORD PTR tv2452[esp+176]
	movss	xmm6, DWORD PTR tv1584[esp+176]
	mulss	xmm6, xmm1
	movss	DWORD PTR tv2514[esp+176], xmm6
	addss	xmm6, DWORD PTR tv2462[esp+176]
	movss	DWORD PTR tv2516[esp+176], xmm6
	movss	DWORD PTR _B$[esp+192], xmm7
	movaps	xmm7, xmm4
	addss	xmm7, xmm6
	addss	xmm7, DWORD PTR tv2466[esp+176]
	movss	xmm6, DWORD PTR tv1548[esp+176]
	mulss	xmm6, xmm1
	movss	DWORD PTR tv2541[esp+176], xmm6
	addss	xmm6, DWORD PTR tv2492[esp+176]
	movss	DWORD PTR tv2543[esp+176], xmm6
	movss	DWORD PTR _B$[esp+196], xmm7
	movaps	xmm7, xmm2
	addss	xmm7, xmm6
	movss	xmm6, DWORD PTR tv1568[esp+176]
	mulss	xmm6, xmm1
	movss	DWORD PTR tv2552[esp+176], xmm6
	addss	xmm6, DWORD PTR tv2504[esp+176]
	addss	xmm7, xmm5
	movss	DWORD PTR tv2554[esp+176], xmm6
	movss	DWORD PTR _B$[esp+200], xmm7
	movaps	xmm7, xmm3
	addss	xmm7, xmm6
	addss	xmm7, DWORD PTR tv2452[esp+176]
	movss	xmm6, DWORD PTR tv1588[esp+176]
	mulss	xmm6, xmm1
	movss	DWORD PTR tv2562[esp+176], xmm6
	addss	xmm6, DWORD PTR tv2514[esp+176]
	movss	DWORD PTR tv2564[esp+176], xmm6
	movss	DWORD PTR _B$[esp+204], xmm7
	movaps	xmm7, xmm4
	addss	xmm7, xmm6
	addss	xmm7, DWORD PTR tv2466[esp+176]
	movss	xmm6, DWORD PTR tv2541[esp+176]
	addss	xmm6, DWORD PTR tv2396[esp+176]
	movss	DWORD PTR _B$[esp+208], xmm7
	movaps	xmm7, xmm6
	addss	xmm6, xmm2
	addss	xmm6, xmm5
	movss	xmm5, DWORD PTR tv2552[esp+176]
	addss	xmm5, DWORD PTR tv2446[esp+176]
	movss	DWORD PTR _B$[esp+212], xmm6
	movaps	xmm6, xmm5
	movss	DWORD PTR tv2597[esp+176], xmm6
	movaps	xmm5, xmm3
	addss	xmm5, xmm6
	addss	xmm5, DWORD PTR tv2452[esp+176]
	movss	DWORD PTR _B$[esp+216], xmm5
	movss	xmm5, DWORD PTR tv2562[esp+176]
	addss	xmm5, DWORD PTR tv2460[esp+176]
	movaps	xmm6, xmm5
	movss	DWORD PTR tv2605[esp+176], xmm6
	movaps	xmm5, xmm4
	addss	xmm5, xmm6
	addss	xmm5, DWORD PTR tv2466[esp+176]
	movss	DWORD PTR _B$[esp+220], xmm5
	movss	xmm5, DWORD PTR tv1554[esp+176]
	mulss	xmm5, xmm1
	movaps	xmm6, xmm5
	addss	xmm6, xmm2
	addss	xmm6, DWORD PTR tv2543[esp+176]
	movss	DWORD PTR _B$[esp+224], xmm6
	movss	xmm6, DWORD PTR tv1573[esp+176]
	mulss	xmm6, xmm1
	movss	DWORD PTR tv2639[esp+176], xmm6
	addss	xmm6, xmm3
	addss	xmm6, DWORD PTR tv2554[esp+176]
	movss	DWORD PTR _B$[esp+228], xmm6
	movss	xmm6, DWORD PTR tv1593[esp+176]
	mulss	xmm6, xmm1
	movss	DWORD PTR tv2647[esp+176], xmm6
	addss	xmm6, xmm4
	addss	xmm6, DWORD PTR tv2564[esp+176]
	movss	DWORD PTR _B$[esp+232], xmm6
	movaps	xmm6, xmm5
	addss	xmm5, xmm2
	addss	xmm5, DWORD PTR tv2495[esp+176]

; 274  : 	}
; 275  : 	bv_box.set		(-.5f,-.5f,-.5f,+.5f,+.5f,+.5f);

	movss	DWORD PTR [esi+12], xmm0
	movss	DWORD PTR [esi+16], xmm0
	movss	DWORD PTR [esi+20], xmm0
	movss	DWORD PTR [esi+24], xmm1
	movss	DWORD PTR [esi+28], xmm1
	movss	DWORD PTR [esi+32], xmm1

; 276  : 	Fvector R; R.set(bv_box.min);
; 277  : 	T.transform_dir	(R);

	movss	xmm0, DWORD PTR [eax+80]
	movss	xmm1, DWORD PTR [eax+112]
	addss	xmm6, xmm7
	addss	xmm6, xmm2
	movss	xmm2, DWORD PTR tv2639[esp+176]
	addss	xmm2, xmm3
	addss	xmm2, DWORD PTR tv2506[esp+176]
	movss	DWORD PTR _B$[esp+252], xmm2
	movss	xmm2, DWORD PTR tv2647[esp+176]
	movss	DWORD PTR _B$[esp+236], xmm6
	movss	xmm6, DWORD PTR tv2639[esp+176]
	addss	xmm6, xmm3
	addss	xmm6, DWORD PTR tv2597[esp+176]
	movss	xmm3, DWORD PTR [esi+12]
	addss	xmm2, xmm4
	addss	xmm2, DWORD PTR tv2516[esp+176]
	mulss	xmm0, xmm3
	movss	DWORD PTR _B$[esp+256], xmm2
	movss	xmm2, DWORD PTR [eax+116]
	movss	DWORD PTR _B$[esp+240], xmm6
	movss	xmm6, DWORD PTR tv2647[esp+176]
	movss	DWORD PTR _B$[esp+248], xmm5
	movss	xmm5, DWORD PTR [esi+20]
	mulss	xmm1, xmm5
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [eax+96]
	mulss	xmm2, xmm5
	addss	xmm6, xmm4
	movss	xmm4, DWORD PTR [esi+16]
	addss	xmm6, DWORD PTR tv2605[esp+176]
	mulss	xmm1, xmm4
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [eax+84]
	mulss	xmm1, xmm3
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR [eax+100]
	mulss	xmm2, xmm4
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR [eax+88]
	mulss	xmm2, xmm3
	movss	xmm3, DWORD PTR [eax+120]
	mulss	xmm3, xmm5
	addss	xmm2, xmm3
	movss	xmm3, DWORD PTR [eax+104]
	mulss	xmm3, xmm4
	addss	xmm2, xmm3

; 278  : 	bv_sphere.R		= R.magnitude();

	movaps	xmm3, xmm2
	mulss	xmm3, xmm2
	movaps	xmm2, xmm1
	mulss	xmm2, xmm1
	movaps	xmm1, xmm0
	addss	xmm3, xmm2
	mulss	xmm1, xmm0
	push	ecx
	addss	xmm3, xmm1
	movss	DWORD PTR _B$[esp+248], xmm6
	movss	DWORD PTR [esp], xmm3
	call	_sqrtf
	fstp	DWORD PTR [esi+48]

; 279  : 
; 280  : 	Planes[0].build(B[0],B[3],B[5]);

	movss	xmm4, DWORD PTR _B$[esp+184]
	movss	xmm2, DWORD PTR _B$[esp+188]
	movss	xmm6, DWORD PTR _B$[esp+180]
	movaps	xmm1, xmm4
	subss	xmm4, DWORD PTR _B$[esp+220]
	subss	xmm1, DWORD PTR _B$[esp+244]
	movaps	xmm3, xmm2
	subss	xmm3, DWORD PTR _B$[esp+248]
	subss	xmm2, DWORD PTR _B$[esp+224]
	movaps	xmm5, xmm6
	subss	xmm5, DWORD PTR _B$[esp+240]
	subss	xmm6, DWORD PTR _B$[esp+216]
	movaps	xmm0, xmm4
	mulss	xmm0, xmm3
	movaps	xmm7, xmm2
	mulss	xmm7, xmm1
	mulss	xmm3, xmm6
	mulss	xmm1, xmm6
	mulss	xmm2, xmm5
	subss	xmm2, xmm3
	mulss	xmm4, xmm5
	subss	xmm1, xmm4
	movaps	xmm3, xmm1
	mulss	xmm3, xmm1
	movss	DWORD PTR tv1701[esp+180], xmm1
	subss	xmm0, xmm7
	movaps	xmm1, xmm2
	mulss	xmm1, xmm2
	addss	xmm3, xmm1
	movaps	xmm1, xmm0
	mulss	xmm1, xmm0
	movss	DWORD PTR tv1692[esp+180], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm3, xmm1
	divss	xmm0, xmm3
	movss	DWORD PTR tv1696[esp+180], xmm2
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	fstp	DWORD PTR _mag$303399[esp+180]
	movss	xmm3, DWORD PTR _mag$303399[esp+180]
	movss	xmm2, DWORD PTR tv1696[esp+180]
	movss	xmm0, DWORD PTR tv1701[esp+180]
	movss	xmm1, DWORD PTR tv1692[esp+180]

; 281  : 	Planes[1].build(B[1],B[2],B[3]);

	movss	xmm4, DWORD PTR _B$[esp+196]
	movss	xmm6, DWORD PTR _B$[esp+192]
	mulss	xmm1, xmm3
	mulss	xmm0, xmm3
	mulss	xmm2, xmm3
	movss	DWORD PTR [esi+56], xmm1
	mulss	xmm1, DWORD PTR _B$[esp+180]
	movss	DWORD PTR [esi+64], xmm0
	mulss	xmm0, DWORD PTR _B$[esp+188]
	movss	DWORD PTR [esi+60], xmm2
	mulss	xmm2, DWORD PTR _B$[esp+184]
	addss	xmm0, xmm2
	movss	xmm2, DWORD PTR _B$[esp+200]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@80000000
	subss	xmm1, xmm0
	movss	DWORD PTR [esi+68], xmm1
	movaps	xmm3, xmm2
	subss	xmm3, DWORD PTR _B$[esp+224]
	subss	xmm2, DWORD PTR _B$[esp+212]
	movaps	xmm1, xmm4
	subss	xmm1, DWORD PTR _B$[esp+220]
	subss	xmm4, DWORD PTR _B$[esp+208]
	movaps	xmm7, xmm2
	mulss	xmm7, xmm1
	movaps	xmm5, xmm6
	subss	xmm5, DWORD PTR _B$[esp+216]
	subss	xmm6, DWORD PTR _B$[esp+204]
	mulss	xmm1, xmm6
	movaps	xmm0, xmm4
	mulss	xmm0, xmm3
	mulss	xmm3, xmm6
	mulss	xmm2, xmm5
	subss	xmm2, xmm3
	mulss	xmm4, xmm5
	subss	xmm1, xmm4
	movaps	xmm3, xmm1
	mulss	xmm3, xmm1
	movss	DWORD PTR tv1768[esp+180], xmm1
	subss	xmm0, xmm7
	movaps	xmm1, xmm2
	mulss	xmm1, xmm2
	addss	xmm3, xmm1
	movaps	xmm1, xmm0
	mulss	xmm1, xmm0
	movss	DWORD PTR tv1759[esp+180], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm3, xmm1
	divss	xmm0, xmm3
	movss	DWORD PTR tv1763[esp+180], xmm2
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	movss	xmm2, DWORD PTR tv1763[esp+180]
	fstp	DWORD PTR _mag$303448[esp+180]
	movss	xmm3, DWORD PTR _mag$303448[esp+180]
	movss	xmm0, DWORD PTR tv1768[esp+180]
	movss	xmm1, DWORD PTR tv1759[esp+180]

; 282  : 	Planes[2].build(B[6],B[5],B[4]);

	movss	xmm4, DWORD PTR _B$[esp+256]
	movss	xmm6, DWORD PTR _B$[esp+252]
	mulss	xmm1, xmm3
	mulss	xmm0, xmm3
	mulss	xmm2, xmm3
	movss	DWORD PTR [esi+72], xmm1
	mulss	xmm1, DWORD PTR _B$[esp+192]
	movss	DWORD PTR [esi+80], xmm0
	mulss	xmm0, DWORD PTR _B$[esp+200]
	movss	DWORD PTR [esi+76], xmm2
	mulss	xmm2, DWORD PTR _B$[esp+196]
	addss	xmm0, xmm2
	movss	xmm2, DWORD PTR _B$[esp+260]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@80000000
	subss	xmm1, xmm0
	movss	DWORD PTR [esi+84], xmm1
	movaps	xmm3, xmm2
	subss	xmm3, DWORD PTR _B$[esp+236]
	subss	xmm2, DWORD PTR _B$[esp+248]
	movaps	xmm1, xmm4
	subss	xmm1, DWORD PTR _B$[esp+232]
	subss	xmm4, DWORD PTR _B$[esp+244]
	movaps	xmm7, xmm2
	mulss	xmm7, xmm1
	movaps	xmm5, xmm6
	subss	xmm5, DWORD PTR _B$[esp+228]
	subss	xmm6, DWORD PTR _B$[esp+240]
	mulss	xmm1, xmm6
	movaps	xmm0, xmm4
	mulss	xmm0, xmm3
	mulss	xmm3, xmm6
	mulss	xmm2, xmm5
	subss	xmm2, xmm3
	mulss	xmm4, xmm5
	subss	xmm1, xmm4
	movaps	xmm3, xmm1
	mulss	xmm3, xmm1
	movss	DWORD PTR tv1835[esp+180], xmm1
	subss	xmm0, xmm7
	movaps	xmm1, xmm2
	mulss	xmm1, xmm2
	addss	xmm3, xmm1
	movaps	xmm1, xmm0
	mulss	xmm1, xmm0
	movss	DWORD PTR tv1826[esp+180], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm3, xmm1
	divss	xmm0, xmm3
	movss	DWORD PTR tv1830[esp+180], xmm2
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	fstp	DWORD PTR _mag$303498[esp+180]
	movss	xmm3, DWORD PTR _mag$303498[esp+180]
	movss	xmm2, DWORD PTR tv1830[esp+180]
	movss	xmm0, DWORD PTR tv1835[esp+180]
	movss	xmm1, DWORD PTR tv1826[esp+180]

; 283  : 	Planes[3].build(B[4],B[2],B[1]);

	movss	xmm6, DWORD PTR _B$[esp+228]
	movss	xmm4, DWORD PTR _B$[esp+232]
	mulss	xmm1, xmm3
	mulss	xmm0, xmm3
	movss	DWORD PTR [esi+88], xmm1
	mulss	xmm1, DWORD PTR _B$[esp+252]
	mulss	xmm2, xmm3
	movss	DWORD PTR [esi+96], xmm0
	mulss	xmm0, DWORD PTR _B$[esp+260]
	movss	DWORD PTR [esi+92], xmm2
	mulss	xmm2, DWORD PTR _B$[esp+256]
	addss	xmm0, xmm2
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@80000000
	subss	xmm1, xmm0
	movss	DWORD PTR [esi+100], xmm1
	movaps	xmm5, xmm6
	subss	xmm5, DWORD PTR _B$[esp+192]
	movaps	xmm1, xmm4
	subss	xmm1, DWORD PTR _B$[esp+196]
	movss	xmm2, DWORD PTR _B$[esp+236]
	subss	xmm4, DWORD PTR _B$[esp+208]
	subss	xmm6, DWORD PTR _B$[esp+204]
	movaps	xmm3, xmm2
	subss	xmm3, DWORD PTR _B$[esp+200]
	subss	xmm2, DWORD PTR _B$[esp+212]
	movaps	xmm7, xmm2
	mulss	xmm7, xmm1
	mulss	xmm1, xmm6
	movaps	xmm0, xmm4
	mulss	xmm0, xmm3
	mulss	xmm3, xmm6
	mulss	xmm2, xmm5
	subss	xmm2, xmm3
	mulss	xmm4, xmm5
	subss	xmm1, xmm4
	movaps	xmm3, xmm1
	mulss	xmm3, xmm1
	movss	DWORD PTR tv1902[esp+180], xmm1
	subss	xmm0, xmm7
	movaps	xmm1, xmm2
	mulss	xmm1, xmm2
	addss	xmm3, xmm1
	movaps	xmm1, xmm0
	mulss	xmm1, xmm0
	movss	DWORD PTR tv1893[esp+180], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm3, xmm1
	divss	xmm0, xmm3
	movss	DWORD PTR tv1897[esp+180], xmm2
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	fstp	DWORD PTR _mag$303548[esp+180]
	movss	xmm3, DWORD PTR _mag$303548[esp+180]
	movss	xmm0, DWORD PTR tv1893[esp+180]
	movss	xmm1, DWORD PTR tv1897[esp+180]
	movss	xmm7, DWORD PTR _B$[esp+236]
	movss	xmm2, DWORD PTR tv1902[esp+180]

; 284  : 	Planes[4].build(B[3],B[2],B[4]);

	movss	xmm6, DWORD PTR _B$[esp+216]
	mulss	xmm0, xmm3
	mulss	xmm1, xmm3
	mulss	xmm2, xmm3
	movss	DWORD PTR [esi+112], xmm2
	movaps	xmm3, xmm7
	mulss	xmm3, xmm2
	movss	xmm2, DWORD PTR _B$[esp+232]
	movaps	xmm4, xmm2
	mulss	xmm4, xmm1
	addss	xmm3, xmm4
	movss	DWORD PTR [esi+108], xmm1
	movss	xmm1, DWORD PTR _B$[esp+228]
	movaps	xmm4, xmm1
	mulss	xmm4, xmm0
	addss	xmm3, xmm4
	movss	xmm4, DWORD PTR _B$[esp+220]
	movss	DWORD PTR [esi+104], xmm0
	movss	xmm0, DWORD PTR __real@80000000
	subss	xmm0, xmm3
	movaps	xmm5, xmm6
	subss	xmm6, DWORD PTR _B$[esp+204]
	subss	xmm5, xmm1
	movaps	xmm1, xmm4
	subss	xmm4, DWORD PTR _B$[esp+208]
	subss	xmm1, xmm2
	movss	xmm2, DWORD PTR _B$[esp+224]
	movaps	xmm3, xmm2
	subss	xmm2, DWORD PTR _B$[esp+212]
	movss	DWORD PTR [esi+116], xmm0
	subss	xmm3, xmm7
	movaps	xmm7, xmm2
	movaps	xmm0, xmm4
	mulss	xmm0, xmm3
	mulss	xmm7, xmm1
	mulss	xmm2, xmm5
	mulss	xmm3, xmm6
	subss	xmm0, xmm7
	subss	xmm2, xmm3
	movss	DWORD PTR tv1960[esp+180], xmm0
	movss	DWORD PTR tv1964[esp+180], xmm2
	mulss	xmm1, xmm6
	mulss	xmm4, xmm5
	subss	xmm1, xmm4
	movaps	xmm3, xmm1
	mulss	xmm3, xmm1
	movss	DWORD PTR tv1969[esp+180], xmm1
	movaps	xmm1, xmm2
	mulss	xmm1, xmm2
	addss	xmm3, xmm1
	movaps	xmm1, xmm0
	mulss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm3, xmm1
	divss	xmm0, xmm3
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	fstp	DWORD PTR _mag$303598[esp+180]
	movss	xmm1, DWORD PTR _mag$303598[esp+180]
	movss	xmm0, DWORD PTR tv1960[esp+180]
	mulss	xmm0, xmm1

; 285  : 	Planes[5].build(B[1],B[0],B[6]);

	movss	xmm4, DWORD PTR _B$[esp+196]
	movaps	xmm2, xmm0
	movss	xmm0, DWORD PTR tv1964[esp+180]
	mulss	xmm0, xmm1
	movss	xmm6, DWORD PTR _B$[esp+192]
	movaps	xmm3, xmm0
	movss	xmm0, DWORD PTR tv1969[esp+180]
	mulss	xmm0, xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR _B$[esp+224]
	mulss	xmm0, xmm1
	movss	DWORD PTR [esi+128], xmm1
	movss	xmm1, DWORD PTR _B$[esp+220]
	mulss	xmm1, xmm3
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _B$[esp+216]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@80000000
	subss	xmm1, xmm0
	movss	DWORD PTR [esi+132], xmm1
	movss	DWORD PTR [esi+124], xmm3
	movss	DWORD PTR [esi+120], xmm2
	movss	xmm2, DWORD PTR _B$[esp+200]
	movaps	xmm3, xmm2
	subss	xmm3, DWORD PTR _B$[esp+260]
	subss	xmm2, DWORD PTR _B$[esp+188]
	movaps	xmm1, xmm4
	subss	xmm1, DWORD PTR _B$[esp+256]
	subss	xmm4, DWORD PTR _B$[esp+184]
	movaps	xmm7, xmm2
	mulss	xmm7, xmm1
	movaps	xmm5, xmm6
	subss	xmm5, DWORD PTR _B$[esp+252]
	subss	xmm6, DWORD PTR _B$[esp+180]
	mulss	xmm1, xmm6
	movaps	xmm0, xmm4
	mulss	xmm0, xmm3
	mulss	xmm3, xmm6
	mulss	xmm2, xmm5
	subss	xmm2, xmm3
	mulss	xmm4, xmm5
	subss	xmm1, xmm4
	movaps	xmm3, xmm1
	mulss	xmm3, xmm1
	movss	DWORD PTR tv2028[esp+180], xmm1
	subss	xmm0, xmm7
	movaps	xmm1, xmm2
	mulss	xmm1, xmm2
	addss	xmm3, xmm1
	movaps	xmm1, xmm0
	mulss	xmm1, xmm0
	movss	DWORD PTR tv2019[esp+180], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm3, xmm1
	divss	xmm0, xmm3
	movss	DWORD PTR tv2023[esp+180], xmm2
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	fstp	DWORD PTR _mag$303648[esp+180]
	movss	xmm1, DWORD PTR _mag$303648[esp+180]
	add	esp, 4
	movss	xmm0, DWORD PTR tv2019[esp+176]
	mulss	xmm0, xmm1
	movaps	xmm2, xmm0
	movss	xmm0, DWORD PTR tv2023[esp+176]
	mulss	xmm0, xmm1
	movaps	xmm3, xmm0
	movss	xmm0, DWORD PTR tv2028[esp+176]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _B$[esp+192]
	movss	DWORD PTR [esi+144], xmm0
	mulss	xmm0, DWORD PTR _B$[esp+196]
	mulss	xmm1, xmm3
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _B$[esp+188]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@80000000
	subss	xmm1, xmm0
	movss	DWORD PTR [esi+136], xmm2
	movss	DWORD PTR [esi+140], xmm3
	movss	DWORD PTR [esi+148], xmm1

; 286  : }

	mov	eax, esi
	pop	esi
	add	esp, 172				; 000000acH
	ret	4
??0CCF_EventBox@@QAE@PAVCObject@@@Z ENDP		; CCF_EventBox::CCF_EventBox
_TEXT	ENDS
PUBLIC	??0CCF_Skeleton@@QAE@PAVCObject@@@Z		; CCF_Skeleton::CCF_Skeleton
; Function compile flags: /Ogtpy
;	COMDAT ??0CCF_Skeleton@@QAE@PAVCObject@@@Z
_TEXT	SEGMENT
_O$ = 8							; size = 4
??0CCF_Skeleton@@QAE@PAVCObject@@@Z PROC		; CCF_Skeleton::CCF_Skeleton, COMDAT
; _this$ = ecx

; 106  : {

	mov	eax, DWORD PTR _O$[esp-4]
	xorps	xmm0, xmm0
	push	ebx
	xor	ebx, ebx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+52], ebx
	movss	DWORD PTR [esi+36], xmm0
	movss	DWORD PTR [esi+40], xmm0
	movss	DWORD PTR [esi+44], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esi+48], xmm0
	mov	DWORD PTR [esi], OFFSET ??_7CCF_Skeleton@@6B@
	mov	DWORD PTR [esi+64], ebx
	mov	DWORD PTR [esi+68], ebx
	push	edi
	mov	DWORD PTR [esi+72], ebx

; 107  : 	//getVisData
; 108  : 	IRenderVisual	*pVisual = O->Visual();

	mov	edi, DWORD PTR [eax+144]

; 109  : 	//IKinematics* K	= PKinematics(pVisual); VERIFY3(K,"Can't create skeleton without Kinematics.",*O->cNameVisual());
; 110  : 	IKinematics* K	= PKinematics(pVisual); VERIFY3(K,"Can't create skeleton without Kinematics.",*O->cNameVisual());

	cmp	edi, ebx
	je	SHORT $LN30@CCF_Skelet@2
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax+12]
	push	edi
	call	ecx
$LN30@CCF_Skelet@2:

; 111  : 	//bv_box.set		(K->vis.box);
; 112  : 	bv_box.set		(pVisual->getVisData().box);

	mov	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx+4]
	push	edi
	call	eax
	fld	DWORD PTR [eax+16]
	fstp	DWORD PTR [esi+12]

; 113  : 	bv_box.getsphere(bv_sphere.P,bv_sphere.R);

	movss	xmm1, DWORD PTR __real@3f000000
	fld	DWORD PTR [eax+20]
	add	eax, 16					; 00000010H
	fstp	DWORD PTR [esi+16]
	push	ecx
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR [esi+20]
	fld	DWORD PTR [eax+12]
	fstp	DWORD PTR [esi+24]
	fld	DWORD PTR [eax+16]
	fstp	DWORD PTR [esi+28]
	fld	DWORD PTR [eax+20]
	fstp	DWORD PTR [esi+32]
	movss	xmm0, DWORD PTR [esi+12]
	addss	xmm0, DWORD PTR [esi+24]
	mulss	xmm0, xmm1
	movss	DWORD PTR [esi+36], xmm0
	movss	xmm0, DWORD PTR [esi+28]
	addss	xmm0, DWORD PTR [esi+16]
	movss	xmm2, DWORD PTR [esi+36]
	mulss	xmm0, xmm1
	movss	DWORD PTR [esi+40], xmm0
	movss	xmm0, DWORD PTR [esi+32]
	addss	xmm0, DWORD PTR [esi+20]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR [esi+40]
	movss	DWORD PTR [esi+44], xmm0
	subss	xmm2, DWORD PTR [esi+24]
	subss	xmm1, DWORD PTR [esi+28]
	subss	xmm0, DWORD PTR [esi+32]
	movaps	xmm3, xmm2
	mulss	xmm3, xmm2
	movaps	xmm2, xmm1
	mulss	xmm2, xmm1
	movaps	xmm1, xmm0
	addss	xmm3, xmm2
	mulss	xmm1, xmm0
	addss	xmm3, xmm1
	movss	DWORD PTR [esp], xmm3
	call	_sqrtf
	fstp	DWORD PTR [esi+48]
	add	esp, 4
	pop	edi

; 114  : 	vis_mask		= 0;

	mov	DWORD PTR [esi+56], ebx
	mov	DWORD PTR [esi+60], ebx

; 115  : }

	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??0CCF_Skeleton@@QAE@PAVCObject@@@Z ENDP		; CCF_Skeleton::CCF_Skeleton
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?RAYvsSPHERE@@YA_NABU?$_sphere@M@@ABU?$_vector3@M@@1AAMH@Z
_TEXT	SEGMENT
_fRoot$303868 = -20					; size = 4
_fDiscr$303864 = -20					; size = 4
_fA$303860 = -16					; size = 4
_fB$303861 = -12					; size = 4
$T303847 = -8						; size = 4
tv225 = -4						; size = 4
_bCull$ = 8						; size = 4
?RAYvsSPHERE@@YA_NABU?$_sphere@M@@ABU?$_vector3@M@@1AAMH@Z PROC ; RAYvsSPHERE, COMDAT
; _s_sphere$ = eax
; _S$ = edx
; _D$ = ecx
; _R$ = esi

; 92   : {

	sub	esp, 20					; 00000014H

; 93   : 	Fsphere::ERP_Result rp_res = s_sphere.intersect(S,D,R);

	movss	xmm2, DWORD PTR [edx+4]
	subss	xmm2, DWORD PTR [eax+4]
	movss	xmm3, DWORD PTR [edx+8]
	subss	xmm3, DWORD PTR [eax+8]
	movss	xmm0, DWORD PTR [ecx+8]
	movss	xmm4, DWORD PTR [ecx+4]
	movss	xmm1, DWORD PTR [edx]
	subss	xmm1, DWORD PTR [eax]
	movss	xmm5, DWORD PTR [esi]
	mulss	xmm4, xmm2
	movaps	xmm7, xmm1
	mulss	xmm7, xmm1
	mulss	xmm0, xmm3
	addss	xmm0, xmm4
	movss	xmm4, DWORD PTR [ecx]
	mulss	xmm4, xmm1
	movaps	xmm1, xmm3
	mulss	xmm1, xmm3
	addss	xmm7, xmm1
	movaps	xmm1, xmm2
	mulss	xmm1, xmm2
	addss	xmm7, xmm1
	movss	xmm1, DWORD PTR [eax+12]
	addss	xmm0, xmm4
	mulss	xmm0, xmm5
	movaps	xmm2, xmm1
	mulss	xmm2, xmm1
	movaps	xmm6, xmm5
	mulss	xmm6, xmm5
	subss	xmm7, xmm2
	xorps	xmm2, xmm2
	movaps	xmm4, xmm0
	mulss	xmm4, xmm0
	mulss	xmm7, xmm6
	subss	xmm4, xmm7
	comiss	xmm2, xmm4
	movss	DWORD PTR tv225[esp+20], xmm5
	movss	DWORD PTR $T303847[esp+20], xmm5
	movss	DWORD PTR _fA$303860[esp+20], xmm6
	movss	DWORD PTR _fB$303861[esp+20], xmm0
	movss	DWORD PTR _fDiscr$303864[esp+20], xmm4
	ja	$LN9@RAYvsSPHER
	comiss	xmm4, xmm2
	jbe	SHORT $LN23@RAYvsSPHER
	fld	DWORD PTR _fDiscr$303864[esp+20]
	push	ecx
	fstp	DWORD PTR [esp]
	call	_sqrtf
	movss	xmm4, DWORD PTR _fB$303861[esp+24]
	fstp	DWORD PTR _fRoot$303868[esp+24]
	movss	xmm1, DWORD PTR __real@80000000
	movss	xmm0, DWORD PTR _fRoot$303868[esp+24]
	movss	xmm2, DWORD PTR __real@3f800000
	divss	xmm2, DWORD PTR _fA$303860[esp+24]
	movss	xmm3, DWORD PTR $T303847[esp+24]
	subss	xmm1, xmm4
	subss	xmm1, xmm0
	subss	xmm0, xmm4
	mulss	xmm1, xmm2
	mulss	xmm0, xmm2
	xorps	xmm2, xmm2
	add	esp, 4
	mulss	xmm1, xmm3
	comiss	xmm1, xmm2
	mulss	xmm0, xmm3
	jae	SHORT $LN40@RAYvsSPHER
	comiss	xmm0, xmm2
	jb	SHORT $LN9@RAYvsSPHER
	movaps	xmm1, xmm0
	mov	eax, 1
	jmp	SHORT $LN39@RAYvsSPHER
$LN23@RAYvsSPHER:
	movss	xmm1, DWORD PTR __real@80000000
	divss	xmm0, xmm6
	subss	xmm1, xmm0
	mulss	xmm1, xmm5
	comiss	xmm1, xmm2
	jb	SHORT $LN9@RAYvsSPHER
$LN40@RAYvsSPHER:
	mov	eax, 2
$LN39@RAYvsSPHER:
	movss	xmm0, DWORD PTR tv225[esp+20]
	comiss	xmm0, xmm1
	jbe	SHORT $LN9@RAYvsSPHER

; 94   : 	VERIFY				(R>=0.f);
; 95   : 	return				((rp_res==Fsphere::rpOriginOutside)||(!bCull&&(rp_res==Fsphere::rpOriginInside)));

	cmp	eax, 2
	movss	DWORD PTR [esi], xmm1
	je	SHORT $LN7@RAYvsSPHER
$LN38@RAYvsSPHER:
	cmp	DWORD PTR _bCull$[esp+16], 0
	jne	SHORT $LN6@RAYvsSPHER
	cmp	eax, 1
	je	SHORT $LN7@RAYvsSPHER
$LN6@RAYvsSPHER:
	xor	eax, eax

; 96   : }

	add	esp, 20					; 00000014H
	ret	0

; 93   : 	Fsphere::ERP_Result rp_res = s_sphere.intersect(S,D,R);

$LN9@RAYvsSPHER:
	xor	eax, eax

; 94   : 	VERIFY				(R>=0.f);
; 95   : 	return				((rp_res==Fsphere::rpOriginOutside)||(!bCull&&(rp_res==Fsphere::rpOriginInside)));

	jmp	SHORT $LN38@RAYvsSPHER
$LN7@RAYvsSPHER:
	mov	eax, 1

; 96   : }

	add	esp, 20					; 00000014H
	ret	0
?RAYvsSPHERE@@YA_NABU?$_sphere@M@@ABU?$_vector3@M@@1AAMH@Z ENDP ; RAYvsSPHERE
_TEXT	ENDS
PUBLIC	?_ElementCenter@CCF_Skeleton@@QAE_NGAAU?$_vector3@M@@@Z ; CCF_Skeleton::_ElementCenter
; Function compile flags: /Ogtpy
;	COMDAT ?_ElementCenter@CCF_Skeleton@@QAE_NGAAU?$_vector3@M@@@Z
_TEXT	SEGMENT
_elem_id$ = 8						; size = 2
_e_center$ = 12						; size = 4
?_ElementCenter@CCF_Skeleton@@QAE_NGAAU?$_vector3@M@@@Z PROC ; CCF_Skeleton::_ElementCenter, COMDAT
; _this$ = ecx

; 63   : 	ElementVecIt it = std::lower_bound(elements.begin(),elements.end(),elem_id,pred_find_elem);

	mov	eax, DWORD PTR [ecx+68]
	mov	ecx, DWORD PTR [ecx+64]
	lea	edx, DWORD PTR _elem_id$[esp-4]
	push	edx
	call	??$__lower_bound@PAUSElement@CCF_Skeleton@@GP6A_NABU12@G@ZP6A_N0G@ZH@priv@stlp_std@@YAPAUSElement@CCF_Skeleton@@PAU23@0ABGP6A_NABU23@G@Z3PAH@Z ; stlp_std::priv::__lower_bound<CCF_Skeleton::SElement *,unsigned short,bool (__cdecl*)(CCF_Skeleton::SElement const &,unsigned short),bool (__cdecl*)(CCF_Skeleton::SElement const &,unsigned short),int>

; 64   : 	if (it->elem_id==elem_id){

	mov	cx, WORD PTR [eax+78]
	add	esp, 4
	cmp	cx, WORD PTR _elem_id$[esp-4]
	jne	$LN1@ElementCen

; 65   : 		it->center(e_center);

	movzx	ecx, WORD PTR [eax+76]
	sub	ecx, 1
	je	SHORT $LN21@ElementCen
	fld	DWORD PTR [eax]
	sub	ecx, 1
	mov	ecx, DWORD PTR _e_center$[esp-4]
	fstp	DWORD PTR [ecx]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [ecx+4]
	fld	DWORD PTR [eax+8]

; 66   : 		return true;

	mov	al, 1
	fstp	DWORD PTR [ecx+8]

; 69   : }

	ret	8

; 65   : 		it->center(e_center);

$LN21@ElementCen:
	movss	xmm2, DWORD PTR [eax+24]
	mulss	xmm2, DWORD PTR [eax+56]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR [eax+52]
	movss	xmm3, DWORD PTR [eax+40]
	mulss	xmm3, DWORD PTR [eax+56]
	movss	xmm4, DWORD PTR [eax+52]
	mulss	xmm4, DWORD PTR [eax+4]
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR [eax+48]
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR __real@80000000
	movaps	xmm1, xmm0
	subss	xmm1, xmm2
	movss	xmm2, DWORD PTR [eax+36]
	mulss	xmm2, DWORD PTR [eax+52]
	addss	xmm3, xmm2
	movss	xmm2, DWORD PTR [eax+32]
	mulss	xmm2, DWORD PTR [eax+48]
	addss	xmm3, xmm2
	movaps	xmm2, xmm0
	subss	xmm2, xmm3
	movss	xmm3, DWORD PTR [eax+56]
	mulss	xmm3, DWORD PTR [eax+8]
	addss	xmm3, xmm4
	movss	xmm4, DWORD PTR [eax+48]
	mulss	xmm4, DWORD PTR [eax]
	mov	eax, DWORD PTR _e_center$[esp-4]
	addss	xmm3, xmm4
	subss	xmm0, xmm3
	movss	DWORD PTR [eax], xmm0
	movss	DWORD PTR [eax+4], xmm1
	movss	DWORD PTR [eax+8], xmm2

; 66   : 		return true;

	mov	al, 1

; 69   : }

	ret	8
$LN1@ElementCen:

; 67   : 	}
; 68   : 	return false;

	xor	al, al

; 69   : }

	ret	8
?_ElementCenter@CCF_Skeleton@@QAE_NGAAU?$_vector3@M@@@Z ENDP ; CCF_Skeleton::_ElementCenter
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.c
;	COMDAT ?_M_insert_overflow@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@AAEXPAUshape_def@CCF_Shape@@ABU45@ABU__true_type@3@I_N@Z
_TEXT	SEGMENT
___fill_len$ = -8					; size = 4
___new_start$ = -4					; size = 4
_this$ = 8						; size = 4
___old_size$ = 12					; size = 4
___pos$ = 12						; size = 4
___x$ = 16						; size = 4
?_M_insert_overflow@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@AAEXPAUshape_def@CCF_Shape@@ABU45@ABU__true_type@3@I_N@Z PROC ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_M_insert_overflow, COMDAT

; 109  :                                              size_type __fill_len, bool __atend ) {

	sub	esp, 8
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR ___pos$[esp+12]
	push	esi

; 110  :   const size_type __old_size = size();

	mov	esi, DWORD PTR _this$[esp+16]
	mov	ecx, DWORD PTR [esi+4]
	sub	ecx, DWORD PTR [esi]
	mov	eax, 1041204193				; 3e0f83e1H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	push	edi
	add	eax, edx

; 111  :   size_type __len = __old_size + (max)(__old_size, __fill_len);

	lea	ecx, DWORD PTR ___fill_len$[esp+24]
	push	ecx
	lea	edx, DWORD PTR ___old_size$[esp+24]
	push	edx
	mov	DWORD PTR ___fill_len$[esp+32], 1
	mov	DWORD PTR ___old_size$[esp+28], eax
	call	??$max@I@stlp_std@@YAABIABI0@Z		; stlp_std::max<unsigned int>
	mov	ebx, DWORD PTR [eax]
	add	ebx, DWORD PTR ___old_size$[esp+28]

; 112  : 
; 113  :   pointer __new_start = this->_M_end_of_storage.allocate(__len, __len);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	imul	ebx, 132				; 00000084H
	add	esp, 8
	push	ebx
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	mov	edi, eax

; 114  :   pointer __new_finish = __STATIC_CAST(pointer, _STLP_PRIV __copy_trivial(this->_M_start, __pos, __new_start));

	mov	eax, DWORD PTR [esi]
	sub	ebp, eax
	mov	DWORD PTR ___new_start$[esp+24], edi
	je	SHORT $LN22@M_insert_o@12
	push	ebp
	push	eax
	push	edi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, ebp
	jmp	SHORT $LN23@M_insert_o@12
$LN22@M_insert_o@12:
	mov	eax, edi
$LN23@M_insert_o@12:

; 115  :   // handle insertion
; 116  :   __new_finish = _STLP_PRIV __fill_n(__new_finish, __fill_len, __x);

	mov	edx, DWORD PTR ___fill_len$[esp+24]
	test	edx, edx
	mov	ebp, eax
	jbe	SHORT $LN24@M_insert_o@12
$LL26@M_insert_o@12:
	mov	esi, DWORD PTR ___x$[esp+20]
	mov	edi, ebp
	sub	edx, 1
	mov	ecx, 33					; 00000021H
	add	ebp, 132				; 00000084H
	test	edx, edx
	rep movsd
	ja	SHORT $LL26@M_insert_o@12
	mov	edi, DWORD PTR ___new_start$[esp+24]
	mov	esi, DWORD PTR _this$[esp+20]
$LN24@M_insert_o@12:

; 117  :   if (!__atend)
; 118  :     __new_finish = __STATIC_CAST(pointer, _STLP_PRIV __copy_trivial(__pos, this->_M_finish, __new_finish)); // copy remainder
; 119  :   _M_clear();

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN63@M_insert_o@12
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN63@M_insert_o@12:

; 120  :   _M_set(__new_start, __new_finish, __new_start + __len);

	add	ebx, edi
	mov	DWORD PTR [esi], edi

; 121  : }

	pop	edi
	mov	DWORD PTR [esi+4], ebp
	mov	DWORD PTR [esi+8], ebx
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	12					; 0000000cH
?_M_insert_overflow@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@AAEXPAUshape_def@CCF_Shape@@ABU45@ABU__true_type@3@I_N@Z ENDP ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_M_insert_overflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_insert_overflow@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@AAEXPAUSElement@CCF_Skeleton@@ABU45@ABU__true_type@3@I_N@Z
_TEXT	SEGMENT
___old_size$ = -16					; size = 4
___fill_len$ = -12					; size = 4
$T376029 = -8						; size = 4
___new_start$ = -4					; size = 4
___x$ = 8						; size = 4
?_M_insert_overflow@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@AAEXPAUSElement@CCF_Skeleton@@ABU45@ABU__true_type@3@I_N@Z PROC ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_M_insert_overflow, COMDAT
; _this$ = ebx
; ___pos$ = eax

; 109  :                                              size_type __fill_len, bool __atend ) {

	sub	esp, 16					; 00000010H

; 110  :   const size_type __old_size = size();

	mov	ecx, DWORD PTR [ebx+4]
	sub	ecx, DWORD PTR [ebx]
	push	ebp
	push	esi
	mov	esi, eax
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	push	edi
	add	eax, edx

; 111  :   size_type __len = __old_size + (max)(__old_size, __fill_len);

	lea	ecx, DWORD PTR ___fill_len$[esp+28]
	push	ecx
	lea	edx, DWORD PTR ___old_size$[esp+32]
	push	edx
	mov	DWORD PTR ___fill_len$[esp+36], 1
	mov	DWORD PTR ___old_size$[esp+36], eax
	call	??$max@I@stlp_std@@YAABIABI0@Z		; stlp_std::max<unsigned int>
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR ___old_size$[esp+36]

; 112  : 
; 113  :   pointer __new_start = this->_M_end_of_storage.allocate(__len, __len);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	lea	ebp, DWORD PTR [eax+eax*4]
	add	esp, 8
	shl	ebp, 4
	push	ebp
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	mov	edi, eax

; 114  :   pointer __new_finish = __STATIC_CAST(pointer, _STLP_PRIV __copy_trivial(this->_M_start, __pos, __new_start));

	mov	eax, DWORD PTR [ebx]
	sub	esi, eax
	mov	DWORD PTR ___new_start$[esp+28], edi
	je	SHORT $LN22@M_insert_o@13
	push	esi
	push	eax
	push	edi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
	jmp	SHORT $LN23@M_insert_o@13
$LN22@M_insert_o@13:
	mov	eax, edi
$LN23@M_insert_o@13:

; 115  :   // handle insertion
; 116  :   __new_finish = _STLP_PRIV __fill_n(__new_finish, __fill_len, __x);

	mov	edx, DWORD PTR ___fill_len$[esp+28]
	test	edx, edx
	mov	DWORD PTR $T376029[esp+28], eax
	jbe	SHORT $LN24@M_insert_o@13
	npad	1
$LL26@M_insert_o@13:
	mov	esi, DWORD PTR ___x$[esp+24]
	mov	edi, eax
	sub	edx, 1
	mov	ecx, 20					; 00000014H
	add	eax, 80					; 00000050H
	test	edx, edx
	rep movsd
	ja	SHORT $LL26@M_insert_o@13
	mov	edi, DWORD PTR ___new_start$[esp+28]
	mov	DWORD PTR $T376029[esp+28], eax
$LN24@M_insert_o@13:

; 117  :   if (!__atend)
; 118  :     __new_finish = __STATIC_CAST(pointer, _STLP_PRIV __copy_trivial(__pos, this->_M_finish, __new_finish)); // copy remainder
; 119  :   _M_clear();

	mov	ecx, DWORD PTR [ebx]
	test	ecx, ecx
	je	SHORT $LN63@M_insert_o@13
	push	ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	eax, DWORD PTR $T376029[esp+28]
$LN63@M_insert_o@13:

; 120  :   _M_set(__new_start, __new_finish, __new_start + __len);

	add	ebp, edi
	mov	DWORD PTR [ebx], edi

; 121  : }

	pop	edi
	pop	esi
	mov	DWORD PTR [ebx+8], ebp
	mov	DWORD PTR [ebx+4], eax
	pop	ebp
	add	esp, 16					; 00000010H
	ret	4
?_M_insert_overflow@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@AAEXPAUSElement@CCF_Skeleton@@ABU45@ABU__true_type@3@I_N@Z ENDP ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_M_insert_overflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_insert_overflow@?$_Impl_vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@priv@stlp_std@@AAEXPAUrq_result@collide@@ABU45@ABU__true_type@3@I_N@Z
_TEXT	SEGMENT
___fill_len$ = -8					; size = 4
___new_start$ = -4					; size = 4
___old_size$ = 8					; size = 4
___x$ = 8						; size = 4
?_M_insert_overflow@?$_Impl_vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@priv@stlp_std@@AAEXPAUrq_result@collide@@ABU45@ABU__true_type@3@I_N@Z PROC ; stlp_std::priv::_Impl_vector<collide::rq_result,xalloc<collide::rq_result> >::_M_insert_overflow, COMDAT
; _this$ = edi
; ___pos$ = eax

; 109  :                                              size_type __fill_len, bool __atend ) {

	sub	esp, 8

; 110  :   const size_type __old_size = size();

	mov	ecx, DWORD PTR [edi+4]
	sub	ecx, DWORD PTR [edi]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR ___x$[esp+12]
	push	esi
	mov	esi, eax
	mov	eax, 715827883				; 2aaaaaabH
	imul	ecx
	sar	edx, 1
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx

; 111  :   size_type __len = __old_size + (max)(__old_size, __fill_len);

	lea	ecx, DWORD PTR ___fill_len$[esp+20]
	push	ecx
	lea	edx, DWORD PTR ___old_size$[esp+20]
	push	edx
	mov	DWORD PTR ___fill_len$[esp+28], 1
	mov	DWORD PTR ___old_size$[esp+24], eax
	call	??$max@I@stlp_std@@YAABIABI0@Z		; stlp_std::max<unsigned int>
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR ___old_size$[esp+24]

; 112  : 
; 113  :   pointer __new_start = this->_M_end_of_storage.allocate(__len, __len);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	lea	ebx, DWORD PTR [eax+eax*2]
	add	ebx, ebx
	add	esp, 8
	add	ebx, ebx
	push	ebx
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 114  :   pointer __new_finish = __STATIC_CAST(pointer, _STLP_PRIV __copy_trivial(this->_M_start, __pos, __new_start));

	mov	ecx, DWORD PTR [edi]
	sub	esi, ecx
	mov	edx, eax
	mov	DWORD PTR ___new_start$[esp+20], edx
	je	SHORT $LN23@M_insert_o@14
	push	esi
	push	ecx
	push	edx
	call	DWORD PTR __imp__memmove
	mov	edx, DWORD PTR ___new_start$[esp+32]
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN23@M_insert_o@14:

; 115  :   // handle insertion
; 116  :   __new_finish = _STLP_PRIV __fill_n(__new_finish, __fill_len, __x);

	mov	ecx, DWORD PTR ___fill_len$[esp+20]
	test	ecx, ecx
	mov	esi, eax
	jbe	SHORT $LN24@M_insert_o@14
$LL26@M_insert_o@14:
	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR [ebp+4]
	mov	DWORD PTR [esi+4], eax
	mov	eax, DWORD PTR [ebp+8]
	mov	DWORD PTR [esi+8], eax
	sub	ecx, 1
	add	esi, 12					; 0000000cH
	test	ecx, ecx
	ja	SHORT $LL26@M_insert_o@14
$LN24@M_insert_o@14:

; 117  :   if (!__atend)
; 118  :     __new_finish = __STATIC_CAST(pointer, _STLP_PRIV __copy_trivial(__pos, this->_M_finish, __new_finish)); // copy remainder
; 119  :   _M_clear();

	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN63@M_insert_o@14
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	edx, DWORD PTR ___new_start$[esp+20]
$LN63@M_insert_o@14:

; 120  :   _M_set(__new_start, __new_finish, __new_start + __len);

	mov	DWORD PTR [edi+4], esi

; 121  : }

	pop	esi
	add	ebx, edx
	pop	ebp
	mov	DWORD PTR [edi+8], ebx
	mov	DWORD PTR [edi], edx
	pop	ebx
	add	esp, 8
	ret	4
?_M_insert_overflow@?$_Impl_vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@priv@stlp_std@@AAEXPAUrq_result@collide@@ABU45@ABU__true_type@3@I_N@Z ENDP ; stlp_std::priv::_Impl_vector<collide::rq_result,xalloc<collide::rq_result> >::_M_insert_overflow
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?push_back@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEXABUshape_def@CCF_Shape@@@Z
_TEXT	SEGMENT
?push_back@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEXABUshape_def@CCF_Shape@@@Z PROC ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::push_back, COMDAT
; _this$ = eax
; ___x$ = ecx

; 360  :   void push_back(const _Tp& __x) {

	push	esi
	push	edi

; 361  : #endif /*!_STLP_DONT_SUP_DFLT_PARAM && !_STLP_NO_ANACHRONISMS*/
; 362  :     if (this->_M_finish != this->_M_end_of_storage._M_data) {

	mov	edi, DWORD PTR [eax+4]
	cmp	edi, DWORD PTR [eax+8]
	mov	esi, ecx
	je	SHORT $LN2@push_back@20

; 363  :       _Copy_Construct(this->_M_finish, __x);

	test	edi, edi
	je	SHORT $LN7@push_back@20
	mov	ecx, 33					; 00000021H
	rep movsd
$LN7@push_back@20:

; 364  :       ++this->_M_finish;

	add	DWORD PTR [eax+4], 132			; 00000084H
	pop	edi
	pop	esi

; 368  :   }

	ret	0
$LN2@push_back@20:

; 365  :     }
; 366  :     else
; 367  :       _M_insert_overflow(this->_M_finish, __x, _TrivialCopy(), 1UL, true);

	push	esi
	push	edi
	push	eax
	call	?_M_insert_overflow@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@AAEXPAUshape_def@CCF_Shape@@ABU45@ABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_M_insert_overflow
	pop	edi
	pop	esi

; 368  :   }

	ret	0
?push_back@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEXABUshape_def@CCF_Shape@@@Z ENDP ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::push_back
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?push_back@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEXABUSElement@CCF_Skeleton@@@Z
_TEXT	SEGMENT
?push_back@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEXABUSElement@CCF_Skeleton@@@Z PROC ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::push_back, COMDAT
; _this$ = ecx
; ___x$ = eax

; 360  :   void push_back(const _Tp& __x) {

	push	ebx
	mov	ebx, ecx
	push	esi
	mov	esi, eax

; 361  : #endif /*!_STLP_DONT_SUP_DFLT_PARAM && !_STLP_NO_ANACHRONISMS*/
; 362  :     if (this->_M_finish != this->_M_end_of_storage._M_data) {

	mov	eax, DWORD PTR [ebx+4]
	cmp	eax, DWORD PTR [ebx+8]
	je	SHORT $LN2@push_back@21

; 363  :       _Copy_Construct(this->_M_finish, __x);

	test	eax, eax
	je	SHORT $LN7@push_back@21
	push	edi
	mov	ecx, 20					; 00000014H
	mov	edi, eax
	rep movsd
	pop	edi
$LN7@push_back@21:

; 364  :       ++this->_M_finish;

	add	DWORD PTR [ebx+4], 80			; 00000050H
	pop	esi
	pop	ebx

; 368  :   }

	ret	0
$LN2@push_back@21:

; 365  :     }
; 366  :     else
; 367  :       _M_insert_overflow(this->_M_finish, __x, _TrivialCopy(), 1UL, true);

	push	esi
	call	?_M_insert_overflow@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@AAEXPAUSElement@CCF_Skeleton@@ABU45@ABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_M_insert_overflow
	pop	esi
	pop	ebx

; 368  :   }

	ret	0
?push_back@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEXABUSElement@CCF_Skeleton@@@Z ENDP ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::push_back
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?push_back@?$_Impl_vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@priv@stlp_std@@QAEXABUrq_result@collide@@@Z
_TEXT	SEGMENT
?push_back@?$_Impl_vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@priv@stlp_std@@QAEXABUrq_result@collide@@@Z PROC ; stlp_std::priv::_Impl_vector<collide::rq_result,xalloc<collide::rq_result> >::push_back, COMDAT
; _this$ = eax
; ___x$ = ecx

; 360  :   void push_back(const _Tp& __x) {

	push	edi
	mov	edi, eax

; 361  : #endif /*!_STLP_DONT_SUP_DFLT_PARAM && !_STLP_NO_ANACHRONISMS*/
; 362  :     if (this->_M_finish != this->_M_end_of_storage._M_data) {

	mov	eax, DWORD PTR [edi+4]
	cmp	eax, DWORD PTR [edi+8]
	je	SHORT $LN2@push_back@22

; 363  :       _Copy_Construct(this->_M_finish, __x);

	test	eax, eax
	je	SHORT $LN7@push_back@22
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
$LN7@push_back@22:

; 364  :       ++this->_M_finish;

	add	DWORD PTR [edi+4], 12			; 0000000cH
	pop	edi

; 368  :   }

	ret	0
$LN2@push_back@22:

; 365  :     }
; 366  :     else
; 367  :       _M_insert_overflow(this->_M_finish, __x, _TrivialCopy(), 1UL, true);

	push	ecx
	call	?_M_insert_overflow@?$_Impl_vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@priv@stlp_std@@AAEXPAUrq_result@collide@@ABU45@ABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<collide::rq_result,xalloc<collide::rq_result> >::_M_insert_overflow
	pop	edi

; 368  :   }

	ret	0
?push_back@?$_Impl_vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@priv@stlp_std@@QAEXABUrq_result@collide@@@Z ENDP ; stlp_std::priv::_Impl_vector<collide::rq_result,xalloc<collide::rq_result> >::push_back
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?push_back@?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QAEXABUshape_def@CCF_Shape@@@Z
_TEXT	SEGMENT
?push_back@?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QAEXABUshape_def@CCF_Shape@@@Z PROC ; stlp_std::vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::push_back, COMDAT
; _this$ = eax
; ___x$ = ecx

; 171  :   { _M_impl.push_back(cast_traits::to_storage_type_cref(__x)); }

	push	esi
	push	edi
	mov	edi, DWORD PTR [eax+4]
	cmp	edi, DWORD PTR [eax+8]
	mov	esi, ecx
	je	SHORT $LN6@push_back@23
	test	edi, edi
	je	SHORT $LN11@push_back@23
	mov	ecx, 33					; 00000021H
	rep movsd
$LN11@push_back@23:
	add	DWORD PTR [eax+4], 132			; 00000084H
	pop	edi
	pop	esi
	ret	0
$LN6@push_back@23:
	push	esi
	push	edi
	push	eax
	call	?_M_insert_overflow@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@AAEXPAUshape_def@CCF_Shape@@ABU45@ABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_M_insert_overflow
	pop	edi
	pop	esi
	ret	0
?push_back@?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QAEXABUshape_def@CCF_Shape@@@Z ENDP ; stlp_std::vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::push_back
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?push_back@?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAEXABUSElement@CCF_Skeleton@@@Z
_TEXT	SEGMENT
?push_back@?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAEXABUSElement@CCF_Skeleton@@@Z PROC ; stlp_std::vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::push_back, COMDAT
; _this$ = ecx
; ___x$ = eax

; 171  :   { _M_impl.push_back(cast_traits::to_storage_type_cref(__x)); }

	push	ebx
	mov	ebx, ecx
	push	esi
	mov	esi, eax
	mov	eax, DWORD PTR [ebx+4]
	cmp	eax, DWORD PTR [ebx+8]
	je	SHORT $LN6@push_back@24
	test	eax, eax
	je	SHORT $LN11@push_back@24
	push	edi
	mov	ecx, 20					; 00000014H
	mov	edi, eax
	rep movsd
	pop	edi
$LN11@push_back@24:
	add	DWORD PTR [ebx+4], 80			; 00000050H
	pop	esi
	pop	ebx
	ret	0
$LN6@push_back@24:
	push	esi
	call	?_M_insert_overflow@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@AAEXPAUSElement@CCF_Skeleton@@ABU45@ABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_M_insert_overflow
	pop	esi
	pop	ebx
	ret	0
?push_back@?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAEXABUSElement@CCF_Skeleton@@@Z ENDP ; stlp_std::vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::push_back
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?push_back@?$vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@stlp_std@@QAEXABUrq_result@collide@@@Z
_TEXT	SEGMENT
?push_back@?$vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@stlp_std@@QAEXABUrq_result@collide@@@Z PROC ; stlp_std::vector<collide::rq_result,xalloc<collide::rq_result> >::push_back, COMDAT
; _this$ = eax
; ___x$ = ecx

; 171  :   { _M_impl.push_back(cast_traits::to_storage_type_cref(__x)); }

	push	edi
	mov	edi, eax
	mov	eax, DWORD PTR [edi+4]
	cmp	eax, DWORD PTR [edi+8]
	je	SHORT $LN6@push_back@25
	test	eax, eax
	je	SHORT $LN11@push_back@25
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
$LN11@push_back@25:
	add	DWORD PTR [edi+4], 12			; 0000000cH
	pop	edi
	ret	0
$LN6@push_back@25:
	push	ecx
	call	?_M_insert_overflow@?$_Impl_vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@priv@stlp_std@@AAEXPAUrq_result@collide@@ABU45@ABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<collide::rq_result,xalloc<collide::rq_result> >::_M_insert_overflow
	pop	edi
	ret	0
?push_back@?$vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@stlp_std@@QAEXABUrq_result@collide@@@Z ENDP ; stlp_std::vector<collide::rq_result,xalloc<collide::rq_result> >::push_back
_TEXT	ENDS
PUBLIC	?add_box@CCF_Shape@@QAEXAAU?$_matrix@M@@@Z	; CCF_Shape::add_box
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\xr_collide_form.cpp
;	COMDAT ?add_box@CCF_Shape@@QAEXAAU?$_matrix@M@@@Z
_TEXT	SEGMENT
$T376586 = -132						; size = 132
_B$ = 8							; size = 4
?add_box@CCF_Shape@@QAEXAAU?$_matrix@M@@@Z PROC		; CCF_Shape::add_box, COMDAT
; _this$ = ecx

; 381  : {

	sub	esp, 132				; 00000084H
	push	ebx
	push	edi

; 382  : 	shapes.push_back(shape_def());

	push	132					; 00000084H
	lea	eax, DWORD PTR $T376586[esp+144]
	push	0
	push	eax
	mov	ebx, ecx
	call	_memset
	mov	edi, DWORD PTR [ebx+60]
	lea	eax, DWORD PTR [ebx+56]
	add	esp, 12					; 0000000cH
	cmp	edi, DWORD PTR [eax+8]
	je	SHORT $LN8@add_box
	test	edi, edi
	je	SHORT $LN13@add_box
	push	esi
	mov	ecx, 33					; 00000021H
	lea	esi, DWORD PTR $T376586[esp+144]
	rep movsd
	pop	esi
$LN13@add_box:
	add	DWORD PTR [eax+4], 132			; 00000084H
	jmp	SHORT $LN7@add_box
$LN8@add_box:
	lea	ecx, DWORD PTR $T376586[esp+140]
	push	ecx
	push	edi
	push	eax
	call	?_M_insert_overflow@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@AAEXPAUshape_def@CCF_Shape@@ABU45@ABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_M_insert_overflow
$LN7@add_box:

; 383  : 	shapes.back().type	= 1;
; 384  : 	shapes.back().data.box.set(B);

	mov	ecx, DWORD PTR _B$[esp+136]
	mov	edx, DWORD PTR [ebx+60]
	mov	DWORD PTR [edx-132], 1
	fld	DWORD PTR [ecx]
	mov	eax, DWORD PTR [ebx+60]
	fstp	DWORD PTR [eax-128]

; 385  : 	shapes.back().data.ibox.invert(B);

	add	eax, -64				; ffffffc0H
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax-60]
	fld	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax-56]
	fld	DWORD PTR [ecx+12]
	fstp	DWORD PTR [eax-52]
	fld	DWORD PTR [ecx+16]
	fstp	DWORD PTR [eax-48]
	fld	DWORD PTR [ecx+20]
	fstp	DWORD PTR [eax-44]
	fld	DWORD PTR [ecx+24]
	fstp	DWORD PTR [eax-40]
	fld	DWORD PTR [ecx+28]
	fstp	DWORD PTR [eax-36]
	fld	DWORD PTR [ecx+32]
	fstp	DWORD PTR [eax-32]
	fld	DWORD PTR [ecx+36]
	fstp	DWORD PTR [eax-28]
	fld	DWORD PTR [ecx+40]
	fstp	DWORD PTR [eax-24]
	fld	DWORD PTR [ecx+44]
	fstp	DWORD PTR [eax-20]
	fld	DWORD PTR [ecx+48]
	fstp	DWORD PTR [eax-16]
	fld	DWORD PTR [ecx+52]
	fstp	DWORD PTR [eax-12]
	fld	DWORD PTR [ecx+56]
	fstp	DWORD PTR [eax-8]
	fld	DWORD PTR [ecx+60]
	fstp	DWORD PTR [eax-4]
	call	?invert@?$_matrix@M@@QAEAAU1@ABU1@@Z	; _matrix<float>::invert
	pop	edi
	pop	ebx

; 386  : }

	add	esp, 132				; 00000084H
	ret	4
?add_box@CCF_Shape@@QAEXAAU?$_matrix@M@@@Z ENDP		; CCF_Shape::add_box
_TEXT	ENDS
PUBLIC	?add_sphere@CCF_Shape@@QAEXAAU?$_sphere@M@@@Z	; CCF_Shape::add_sphere
; Function compile flags: /Ogtpy
;	COMDAT ?add_sphere@CCF_Shape@@QAEXAAU?$_sphere@M@@@Z
_TEXT	SEGMENT
$T376733 = -132						; size = 132
_S$ = 8							; size = 4
?add_sphere@CCF_Shape@@QAEXAAU?$_sphere@M@@@Z PROC	; CCF_Shape::add_sphere, COMDAT
; _this$ = ecx

; 374  : {

	sub	esp, 132				; 00000084H
	push	ebx
	push	edi

; 375  : 	shapes.push_back(shape_def());

	push	132					; 00000084H
	lea	eax, DWORD PTR $T376733[esp+144]
	push	0
	push	eax
	mov	ebx, ecx
	call	_memset
	mov	edi, DWORD PTR [ebx+60]
	lea	eax, DWORD PTR [ebx+56]
	add	esp, 12					; 0000000cH
	cmp	edi, DWORD PTR [eax+8]
	je	SHORT $LN8@add_sphere
	test	edi, edi
	je	SHORT $LN13@add_sphere
	push	esi
	mov	ecx, 33					; 00000021H
	lea	esi, DWORD PTR $T376733[esp+144]
	rep movsd
	pop	esi
$LN13@add_sphere:
	add	DWORD PTR [eax+4], 132			; 00000084H
	jmp	SHORT $LN7@add_sphere
$LN8@add_sphere:
	lea	ecx, DWORD PTR $T376733[esp+140]
	push	ecx
	push	edi
	push	eax
	call	?_M_insert_overflow@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@AAEXPAUshape_def@CCF_Shape@@ABU45@ABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_M_insert_overflow
$LN7@add_sphere:

; 376  : 	shapes.back().type	= 0;

	mov	edx, DWORD PTR [ebx+60]

; 377  : 	shapes.back().data.sphere.set(S);

	mov	ecx, DWORD PTR _S$[esp+136]
	mov	DWORD PTR [edx-132], 0
	fld	DWORD PTR [ecx]
	mov	eax, DWORD PTR [ebx+60]
	fstp	DWORD PTR [eax-128]
	sub	eax, 128				; 00000080H
	fld	DWORD PTR [ecx+4]
	pop	edi
	fstp	DWORD PTR [eax+4]
	pop	ebx
	fld	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+8]
	fld	DWORD PTR [ecx+12]
	fstp	DWORD PTR [eax+12]

; 378  : }

	add	esp, 132				; 00000084H
	ret	4
?add_sphere@CCF_Shape@@QAEXAAU?$_sphere@M@@@Z ENDP	; CCF_Shape::add_sphere
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcdb\xr_collide_defs.h
_TEXT	ENDS
;	COMDAT ?append_result@rq_results@collide@@QAEHPAVCObject@@MHH@Z
_TEXT	SEGMENT
$T376838 = -12						; size = 12
__who$ = 8						; size = 4
__range$ = 12						; size = 4
_bNearest$ = 16						; size = 4
?append_result@rq_results@collide@@QAEHPAVCObject@@MHH@Z PROC ; collide::rq_results::append_result, COMDAT
; _this$ = eax
; __element$ = ebx

; 108  : 		{

	sub	esp, 12					; 0000000cH

; 109  : 			if (bNearest&&!results.empty()){

	cmp	DWORD PTR _bNearest$[esp+8], 0
	push	ebp
	mov	ebp, DWORD PTR __who$[esp+12]
	push	edi
	mov	edi, eax
	je	SHORT $LN2@append_res
	mov	eax, DWORD PTR [edi+4]
	cmp	DWORD PTR [edi], eax
	je	SHORT $LN2@append_res

; 110  : 				rq_result& R		= results.back();
; 111  : 				if (_range<R.range){

	movss	xmm1, DWORD PTR [eax-8]
	movss	xmm0, DWORD PTR __range$[esp+16]
	comiss	xmm1, xmm0
	jbe	SHORT $LN1@append_res

; 112  : 					R.O				=_who;

	mov	DWORD PTR [eax-12], ebp
	pop	edi

; 113  : 					R.range			=_range;

	movss	DWORD PTR [eax-8], xmm0

; 114  : 					R.element		=_element;

	mov	DWORD PTR [eax-4], ebx

; 124  : 			return TRUE	;

	mov	eax, 1
	pop	ebp

; 125  : 		}

	add	esp, 12					; 0000000cH
	ret	12					; 0000000cH
$LN1@append_res:
	pop	edi

; 115  : 					return			TRUE;
; 116  : 				}
; 117  : 				return				FALSE;

	xor	eax, eax
	pop	ebp

; 125  : 		}

	add	esp, 12					; 0000000cH
	ret	12					; 0000000cH
$LN2@append_res:

; 118  : 			}
; 119  : 			results.push_back		(rq_result());

	xor	eax, eax
	push	esi
	mov	ecx, eax
	mov	edx, eax
	mov	esi, eax
	mov	eax, DWORD PTR [edi+4]
	cmp	eax, DWORD PTR [edi+8]
	mov	DWORD PTR $T376838[esp+24], ecx
	mov	DWORD PTR $T376838[esp+28], edx
	mov	DWORD PTR $T376838[esp+32], esi
	je	SHORT $LN22@append_res
	test	eax, eax
	je	SHORT $LN27@append_res
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], esi
$LN27@append_res:
	add	DWORD PTR [edi+4], 12			; 0000000cH
	jmp	SHORT $LN21@append_res
$LN22@append_res:
	lea	ecx, DWORD PTR $T376838[esp+24]
	push	ecx
	call	?_M_insert_overflow@?$_Impl_vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@priv@stlp_std@@AAEXPAUrq_result@collide@@ABU45@ABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<collide::rq_result,xalloc<collide::rq_result> >::_M_insert_overflow
$LN21@append_res:

; 120  : 			rq_result& rq			= results.back();

	mov	eax, DWORD PTR [edi+4]

; 121  : 			rq.range	=_range;

	movss	xmm0, DWORD PTR __range$[esp+20]
	sub	eax, 12					; 0000000cH
	pop	esi

; 122  : 			rq.element	=_element;
; 123  : 			rq.O		=_who;

	mov	DWORD PTR [eax], ebp
	pop	edi
	movss	DWORD PTR [eax+4], xmm0
	mov	DWORD PTR [eax+8], ebx

; 124  : 			return TRUE	;

	mov	eax, 1
	pop	ebp

; 125  : 		}

	add	esp, 12					; 0000000cH
	ret	12					; 0000000cH
?append_result@rq_results@collide@@QAEHPAVCObject@@MHH@Z ENDP ; collide::rq_results::append_result
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\xr_collide_form.cpp
;	COMDAT ?_RayQuery@CCF_Shape@@UAEHABUray_defs@collide@@AAVrq_results@3@@Z
_TEXT	SEGMENT
_dS$ = -196						; size = 12
tv730 = -184						; size = 4
_c$448887 = -184					; size = 4
_range$128988 = -180					; size = 4
_bHIT$ = -176						; size = 4
tv954 = -172						; size = 4
_dD$ = -168						; size = 12
_Q$448886 = -156					; size = 12
_D1$129002 = -156					; size = 12
_fA$448989 = -144					; size = 4
tv726 = -140						; size = 4
_fDiscr$448993 = -136					; size = 4
_d$129007 = -132					; size = 4
_fB$448990 = -128					; size = 4
tv712 = -124						; size = 4
tv708 = -120						; size = 4
_fRoot$448997 = -116					; size = 4
_S1$129001 = -112					; size = 12
_P$129003 = -100					; size = 12
_temp$ = -88						; size = 64
_box$128999 = -24					; size = 24
_Q$ = 8							; size = 4
_R$ = 12						; size = 4
?_RayQuery@CCF_Shape@@UAEHABUray_defs@collide@@AAVrq_results@3@@Z PROC ; CCF_Shape::_RayQuery, COMDAT
; _this$ = ecx

; 317  : {	

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx

; 318  : 	// Convert ray into local model space
; 319  : 	Fvector dS, dD;
; 320  : 	Fmatrix temp; 
; 321  : 	temp.invert			(owner->XFORM());

	mov	ecx, DWORD PTR [edi+4]
	add	ecx, 80					; 00000050H
	lea	eax, DWORD PTR _temp$[esp+208]
	call	?invert@?$_matrix@M@@QAEAAU1@ABU1@@Z	; _matrix<float>::invert

; 322  : 	temp.transform_tiny	(dS,Q.start);

	mov	esi, DWORD PTR _Q$[ebp]
	movss	xmm3, DWORD PTR [esi+8]
	movss	xmm0, DWORD PTR [esi]
	movss	xmm7, DWORD PTR _temp$[esp+240]
	movss	xmm4, DWORD PTR [esi+4]
	movaps	xmm2, xmm0
	mulss	xmm2, DWORD PTR _temp$[esp+208]
	movaps	xmm1, xmm3
	mulss	xmm1, xmm7
	addss	xmm1, xmm2
	movaps	xmm2, xmm4
	mulss	xmm2, DWORD PTR _temp$[esp+224]
	addss	xmm1, xmm2
	movaps	xmm2, xmm0
	mulss	xmm0, DWORD PTR _temp$[esp+216]
	mulss	xmm2, DWORD PTR _temp$[esp+212]
	addss	xmm1, DWORD PTR _temp$[esp+256]
	movaps	xmm5, xmm4
	mulss	xmm5, DWORD PTR _temp$[esp+228]
	mulss	xmm4, DWORD PTR _temp$[esp+232]
	addss	xmm0, xmm4

; 323  : 	temp.transform_dir	(dD,Q.dir);

	movss	xmm4, DWORD PTR [esi+20]
	addss	xmm2, xmm5
	movaps	xmm5, xmm3
	mulss	xmm3, DWORD PTR _temp$[esp+248]
	mulss	xmm5, DWORD PTR _temp$[esp+244]
	addss	xmm0, xmm3
	addss	xmm0, DWORD PTR _temp$[esp+264]
	movss	xmm3, DWORD PTR [esi+12]
	movss	DWORD PTR _dS$[esp+216], xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR _temp$[esp+208]
	addss	xmm2, xmm5
	movss	xmm5, DWORD PTR [esi+16]
	addss	xmm2, DWORD PTR _temp$[esp+260]
	movaps	xmm6, xmm4
	mulss	xmm6, xmm7
	addss	xmm6, xmm0
	movaps	xmm0, xmm5
	mulss	xmm0, DWORD PTR _temp$[esp+224]
	addss	xmm6, xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR _temp$[esp+212]
	mulss	xmm3, DWORD PTR _temp$[esp+216]
	movss	DWORD PTR _dD$[esp+208], xmm6
	movaps	xmm6, xmm5
	mulss	xmm6, DWORD PTR _temp$[esp+228]
	mulss	xmm5, DWORD PTR _temp$[esp+232]
	addss	xmm0, xmm6
	movaps	xmm6, xmm4
	mulss	xmm6, DWORD PTR _temp$[esp+244]
	mulss	xmm4, DWORD PTR _temp$[esp+248]
	addss	xmm0, xmm6
	movss	DWORD PTR _dD$[esp+212], xmm0

; 324  : 
; 325  : 	// 
; 326  : 	if (!bv_sphere.intersect(dS,dD))	return FALSE;

	movss	xmm0, DWORD PTR [edi+36]
	subss	xmm0, xmm1
	movss	DWORD PTR _dS$[esp+208], xmm1
	movss	xmm1, DWORD PTR [edi+40]
	subss	xmm1, xmm2
	movss	DWORD PTR _dS$[esp+212], xmm2
	movss	xmm2, DWORD PTR [edi+44]
	subss	xmm2, DWORD PTR _dS$[esp+216]
	addss	xmm3, xmm5
	addss	xmm3, xmm4
	movss	DWORD PTR _dD$[esp+216], xmm3
	movaps	xmm3, xmm2
	mulss	xmm3, xmm2
	movss	DWORD PTR _Q$448886[esp+216], xmm2
	movaps	xmm2, xmm1
	mulss	xmm2, xmm1
	movss	DWORD PTR _Q$448886[esp+208], xmm0
	movss	DWORD PTR _Q$448886[esp+212], xmm1
	addss	xmm3, xmm2
	movaps	xmm1, xmm0
	mulss	xmm1, xmm0
	push	ecx
	addss	xmm3, xmm1
	movss	DWORD PTR [esp], xmm3
	call	_sqrtf
	fstp	DWORD PTR _c$448887[esp+212]
	movss	xmm0, DWORD PTR _Q$448886[esp+220]
	mulss	xmm0, DWORD PTR _dD$[esp+220]
	movss	xmm1, DWORD PTR _Q$448886[esp+216]
	mulss	xmm1, DWORD PTR _dD$[esp+216]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _Q$448886[esp+212]
	mulss	xmm1, DWORD PTR _dD$[esp+212]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [edi+48]
	movaps	xmm2, xmm1
	mulss	xmm2, xmm1
	movss	xmm1, DWORD PTR _c$448887[esp+212]
	movaps	xmm3, xmm1
	mulss	xmm3, xmm1
	movaps	xmm1, xmm0
	mulss	xmm1, xmm0
	subss	xmm3, xmm1
	add	esp, 4
	subss	xmm2, xmm3
	comiss	xmm2, DWORD PTR __real@00000000
	ja	SHORT $LN15@RayQuery
	xor	eax, eax

; 368  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN15@RayQuery:

; 329  : 	for (u32 el=0; el<shapes.size(); el++)

	mov	ecx, DWORD PTR [edi+60]
	sub	ecx, DWORD PTR [edi+56]
	mov	eax, 1041204193				; 3e0f83e1H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	xor	ebx, ebx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	mov	DWORD PTR _bHIT$[esp+208], ebx
	je	$LN12@RayQuery

; 327  : 
; 328  : 	BOOL bHIT = FALSE;

	mov	DWORD PTR tv954[esp+208], ebx
	npad	11
$LL113@RayQuery:

; 330  : 	{
; 331  : 		shape_def& shape= shapes[el];

	mov	eax, DWORD PTR [edi+56]
	add	eax, DWORD PTR tv954[esp+208]

; 332  : 		float range		= Q.range;

	movss	xmm6, DWORD PTR [esi+24]

; 333  : 		switch (shape.type)

	mov	ecx, DWORD PTR [eax]
	sub	ecx, 0
	movss	xmm0, DWORD PTR __real@bf000000
	movss	xmm1, DWORD PTR __real@3f000000
	movss	DWORD PTR _range$128988[esp+208], xmm6
	je	$LN9@RayQuery
	sub	ecx, 1
	jne	$LN13@RayQuery

; 342  : 				}
; 343  : 			}
; 344  : 			break;
; 345  : 		case 1: // box
; 346  : 			{
; 347  : 				Fbox				box;
; 348  : 				box.identity		();
; 349  : 				Fmatrix& B			= shape.data.ibox;
; 350  : 				Fvector				S1,D1,P;
; 351  : 				B.transform_tiny	(S1,dS);

	movss	xmm3, DWORD PTR [eax+100]
	movss	xmm4, DWORD PTR [eax+84]
	movss	xmm6, DWORD PTR _dS$[esp+208]
	movss	xmm5, DWORD PTR [eax+88]
	movss	DWORD PTR _box$128999[esp+208], xmm0
	movss	DWORD PTR _box$128999[esp+212], xmm0
	movss	DWORD PTR _box$128999[esp+216], xmm0
	movss	xmm0, DWORD PTR [eax+68]
	movss	DWORD PTR _box$128999[esp+220], xmm1
	movss	DWORD PTR _box$128999[esp+224], xmm1
	movss	DWORD PTR _box$128999[esp+228], xmm1
	movaps	xmm2, xmm4
	mulss	xmm2, DWORD PTR _dS$[esp+212]
	movaps	xmm1, xmm3
	mulss	xmm1, DWORD PTR _dS$[esp+216]
	addss	xmm1, xmm2
	movaps	xmm2, xmm0
	mulss	xmm2, xmm6
	addss	xmm1, xmm2
	addss	xmm1, DWORD PTR [eax+116]
	movss	xmm2, DWORD PTR [eax+104]
	movss	DWORD PTR _S1$129001[esp+208], xmm1
	movss	xmm1, DWORD PTR [eax+72]
	movss	DWORD PTR tv708[esp+208], xmm2
	movss	DWORD PTR tv712[esp+208], xmm5
	mulss	xmm5, DWORD PTR _dS$[esp+212]
	movaps	xmm7, xmm1
	mulss	xmm7, xmm6
	movss	xmm6, DWORD PTR _dS$[esp+216]
	mulss	xmm2, xmm6
	addss	xmm7, xmm2
	movss	xmm2, DWORD PTR [eax+92]
	addss	xmm7, xmm5
	addss	xmm7, DWORD PTR [eax+120]
	movss	xmm5, DWORD PTR [eax+108]
	movss	DWORD PTR tv730[esp+208], xmm2
	movss	xmm2, DWORD PTR [eax+76]
	movss	DWORD PTR _S1$129001[esp+212], xmm7
	movss	DWORD PTR tv726[esp+208], xmm5
	movaps	xmm7, xmm2
	mulss	xmm7, DWORD PTR _dS$[esp+208]
	mulss	xmm5, xmm6

; 352  : 				B.transform_dir		(D1,dD);

	movss	xmm6, DWORD PTR _dD$[esp+212]
	addss	xmm7, xmm5
	movss	xmm5, DWORD PTR tv730[esp+208]
	mulss	xmm5, DWORD PTR _dS$[esp+212]
	addss	xmm7, xmm5
	movss	xmm5, DWORD PTR _dD$[esp+208]
	addss	xmm7, DWORD PTR [eax+124]
	mulss	xmm0, xmm5
	mulss	xmm4, xmm6
	addss	xmm0, xmm4
	movss	xmm4, DWORD PTR _dD$[esp+216]
	mulss	xmm3, xmm4
	addss	xmm0, xmm3
	movss	DWORD PTR _D1$129002[esp+208], xmm0
	movss	xmm0, DWORD PTR tv712[esp+208]
	mulss	xmm0, xmm6
	mulss	xmm1, xmm5
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv708[esp+208]
	mulss	xmm0, xmm4
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv730[esp+208]
	mulss	xmm0, xmm6
	mulss	xmm2, xmm5
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR tv726[esp+208]
	mulss	xmm0, xmm4
	addss	xmm2, xmm0

; 353  : 				Fbox::ERP_Result	rp_res 	= box.Pick2(S1,D1,P);

	lea	esi, DWORD PTR _P$129003[esp+208]
	lea	eax, DWORD PTR _D1$129002[esp+208]
	lea	edx, DWORD PTR _S1$129001[esp+208]
	lea	ecx, DWORD PTR _box$128999[esp+208]
	movss	DWORD PTR _S1$129001[esp+216], xmm7
	movss	DWORD PTR _D1$129002[esp+212], xmm1
	movss	DWORD PTR _D1$129002[esp+216], xmm2
	call	?Pick2@?$_box3@M@@QAE?AW4ERP_Result@1@ABU?$_vector3@M@@0AAU3@@Z ; _box3<float>::Pick2

; 354  : 				if ((rp_res==Fbox::rpOriginOutside)||(!(Q.flags&CDB::OPT_CULL)&&(rp_res==Fbox::rpOriginInside))){

	cmp	eax, 2
	je	SHORT $LN3@RayQuery
	mov	ecx, DWORD PTR _Q$[ebp]
	test	BYTE PTR [ecx+28], 1
	jne	$LN111@RayQuery
	cmp	eax, 1
	jne	$LN111@RayQuery
$LN3@RayQuery:

; 355  : 					float d			= P.distance_to_sqr(dS);

	movss	xmm2, DWORD PTR _P$129003[esp+212]
	subss	xmm2, DWORD PTR _dS$[esp+212]
	movss	xmm1, DWORD PTR _P$129003[esp+216]
	subss	xmm1, DWORD PTR _dS$[esp+216]
	movss	xmm0, DWORD PTR _P$129003[esp+208]
	subss	xmm0, DWORD PTR _dS$[esp+208]
	movaps	xmm3, xmm2
	mulss	xmm3, xmm2
	mulss	xmm0, xmm0
	movaps	xmm2, xmm1
	mulss	xmm2, xmm1

; 356  : 					if (d<range*range) {

	movss	xmm1, DWORD PTR _range$128988[esp+208]
	addss	xmm0, xmm3
	addss	xmm0, xmm2
	movaps	xmm2, xmm1
	mulss	xmm2, xmm1
	comiss	xmm2, xmm0
	movss	DWORD PTR _d$129007[esp+208], xmm0
	jbe	$LN111@RayQuery

; 357  : 						range		= _sqrt(d);
; 358  : 						bHIT		= TRUE;
; 359  : 						R.append_result(owner,range,el,Q.flags&CDB::OPT_ONLYNEAREST);

	mov	edx, DWORD PTR _Q$[ebp]
	fld	DWORD PTR _d$129007[esp+208]
	mov	eax, DWORD PTR [edx+28]
	and	eax, 4
	push	eax
	sub	esp, 8
	fstp	DWORD PTR [esp]
	mov	DWORD PTR _bHIT$[esp+220], 1
	call	_sqrtf
	fstp	DWORD PTR [esp+4]
	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR _R$[ebp]
	add	esp, 4
	push	ecx
	call	?append_result@rq_results@collide@@QAEHPAVCObject@@MHH@Z ; collide::rq_results::append_result

; 360  : 						if (Q.flags&CDB::OPT_ONLYFIRST) return TRUE;

	mov	edx, DWORD PTR _Q$[ebp]
	test	BYTE PTR [edx+28], 2
	jne	$LN104@RayQuery

; 361  : 					}
; 362  : 				}
; 363  : 			}
; 364  : 			break;

	mov	esi, edx
	jmp	$LN13@RayQuery
$LN9@RayQuery:

; 334  : 		{
; 335  : 		case 0:
; 336  : 			{ // sphere
; 337  : 				Fsphere::ERP_Result	rp_res 	= shape.data.sphere.intersect(dS,dD,range);

	movss	xmm3, DWORD PTR _dS$[esp+216]
	subss	xmm3, DWORD PTR [eax+12]
	movss	xmm2, DWORD PTR _dS$[esp+212]
	subss	xmm2, DWORD PTR [eax+8]
	movss	xmm1, DWORD PTR _dS$[esp+208]
	subss	xmm1, DWORD PTR [eax+4]
	movaps	xmm4, xmm2
	mulss	xmm4, DWORD PTR _dD$[esp+212]
	movaps	xmm7, xmm3
	mulss	xmm7, xmm3
	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR _dD$[esp+216]
	movaps	xmm3, xmm2
	addss	xmm0, xmm4
	mulss	xmm3, xmm2
	addss	xmm7, xmm3
	movaps	xmm2, xmm1
	mulss	xmm2, xmm1
	addss	xmm7, xmm2
	movaps	xmm4, xmm1
	mulss	xmm4, DWORD PTR _dD$[esp+208]
	movss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm4
	mulss	xmm0, xmm6
	movaps	xmm2, xmm1
	mulss	xmm2, xmm1
	movaps	xmm5, xmm6
	mulss	xmm5, xmm6
	subss	xmm7, xmm2
	xorps	xmm2, xmm2
	movaps	xmm4, xmm0
	mulss	xmm4, xmm0
	mulss	xmm7, xmm5
	subss	xmm4, xmm7
	comiss	xmm2, xmm4
	movss	DWORD PTR _fA$448989[esp+208], xmm5
	movss	DWORD PTR _fB$448990[esp+208], xmm0
	movss	DWORD PTR _fDiscr$448993[esp+208], xmm4
	ja	$LN57@RayQuery
	comiss	xmm4, xmm2
	jbe	SHORT $LN71@RayQuery
	fld	DWORD PTR _fDiscr$448993[esp+208]
	push	ecx
	fstp	DWORD PTR [esp]
	call	_sqrtf
	movss	xmm3, DWORD PTR _fB$448990[esp+212]
	fstp	DWORD PTR _fRoot$448997[esp+212]
	movss	xmm1, DWORD PTR __real@80000000
	movss	xmm0, DWORD PTR _fRoot$448997[esp+212]
	movss	xmm2, DWORD PTR __real@3f800000
	divss	xmm2, DWORD PTR _fA$448989[esp+212]
	movss	xmm6, DWORD PTR _range$128988[esp+212]
	subss	xmm1, xmm3
	subss	xmm1, xmm0
	subss	xmm0, xmm3
	mulss	xmm1, xmm2
	mulss	xmm0, xmm2
	xorps	xmm2, xmm2
	add	esp, 4
	mulss	xmm1, xmm6
	comiss	xmm1, xmm2
	mulss	xmm0, xmm6
	jae	SHORT $LN117@RayQuery
	comiss	xmm0, xmm2
	jb	$LN57@RayQuery
	movaps	xmm1, xmm0
	mov	eax, 1
	jmp	SHORT $LN108@RayQuery
$LN71@RayQuery:
	movss	xmm1, DWORD PTR __real@80000000
	divss	xmm0, xmm5
	subss	xmm1, xmm0
	mulss	xmm1, xmm6
	comiss	xmm1, xmm2
	jb	$LN57@RayQuery
$LN117@RayQuery:
	mov	eax, 2
$LN108@RayQuery:
	comiss	xmm6, xmm1
	jbe	SHORT $LN57@RayQuery

; 338  : 				if ((rp_res==Fsphere::rpOriginOutside)||(!(Q.flags&CDB::OPT_CULL)&&(rp_res==Fsphere::rpOriginInside))){

	cmp	eax, 2
	movss	DWORD PTR _range$128988[esp+208], xmm1
	je	SHORT $LN7@RayQuery
$LN107@RayQuery:
	test	BYTE PTR [esi+28], 1
	jne	SHORT $LN13@RayQuery
	cmp	eax, 1
	jne	SHORT $LN13@RayQuery
$LN7@RayQuery:

; 339  : 					bHIT	= TRUE;
; 340  : 					R.append_result(owner,range,el,Q.flags&CDB::OPT_ONLYNEAREST);

	mov	eax, DWORD PTR [esi+28]
	fld	DWORD PTR _range$128988[esp+208]
	and	eax, 4
	push	eax
	mov	eax, DWORD PTR _R$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [edi+4]
	fstp	DWORD PTR [esp]
	push	ecx
	mov	DWORD PTR _bHIT$[esp+220], 1
	call	?append_result@rq_results@collide@@QAEHPAVCObject@@MHH@Z ; collide::rq_results::append_result

; 341  : 					if (Q.flags&CDB::OPT_ONLYFIRST) return TRUE;

	mov	edx, DWORD PTR _Q$[ebp]
	test	BYTE PTR [edx+28], 2
	jne	SHORT $LN104@RayQuery
$LN111@RayQuery:

; 361  : 					}
; 362  : 				}
; 363  : 			}
; 364  : 			break;

	mov	esi, DWORD PTR _Q$[ebp]
$LN13@RayQuery:

; 329  : 	for (u32 el=0; el<shapes.size(); el++)

	mov	ecx, DWORD PTR [edi+60]
	sub	ecx, DWORD PTR [edi+56]
	add	DWORD PTR tv954[esp+208], 132		; 00000084H
	mov	eax, 1041204193				; 3e0f83e1H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	ebx, 1
	add	eax, edx
	cmp	ebx, eax
	jb	$LL113@RayQuery
$LN12@RayQuery:

; 365  : 		}
; 366  : 	}
; 367  : 	return bHIT;

	mov	eax, DWORD PTR _bHIT$[esp+208]

; 368  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8

; 334  : 		{
; 335  : 		case 0:
; 336  : 			{ // sphere
; 337  : 				Fsphere::ERP_Result	rp_res 	= shape.data.sphere.intersect(dS,dD,range);

$LN57@RayQuery:
	xor	eax, eax

; 338  : 				if ((rp_res==Fsphere::rpOriginOutside)||(!(Q.flags&CDB::OPT_CULL)&&(rp_res==Fsphere::rpOriginInside))){

	jmp	SHORT $LN107@RayQuery
$LN104@RayQuery:

; 368  : }

	pop	edi
	pop	esi
	mov	eax, 1
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?_RayQuery@CCF_Shape@@UAEHABUray_defs@collide@@AAVrq_results@3@@Z ENDP ; CCF_Shape::_RayQuery
_TEXT	ENDS
PUBLIC	?BuildState@CCF_Skeleton@@AAEXXZ		; CCF_Skeleton::BuildState
; Function compile flags: /Ogtpy
;	COMDAT ?BuildState@CCF_Skeleton@@AAEXXZ
_TEXT	SEGMENT
tv2211 = -268						; size = 4
tv879 = -268						; size = 4
tv869 = -268						; size = 4
tv456 = -268						; size = 4
tv448 = -268						; size = 4
tv439 = -268						; size = 4
tv431 = -268						; size = 4
_K$ = -264						; size = 4
_i$128855 = -260					; size = 2
tv1716 = -260						; size = 4
tv1784 = -256						; size = 4
tv1211 = -256						; size = 4
_this$ = -252						; size = 4
_I$128864 = -248					; size = 4
tv1787 = -244						; size = 4
_pVisual$ = -244					; size = 4
tv1719 = -240						; size = 4
tv1705 = -236						; size = 4
tv1696 = -232						; size = 4
tv1708 = -228						; size = 4
tv1798 = -224						; size = 4
tv1775 = -220						; size = 4
_ME$128870 = -216					; size = 64
tv1802 = -148						; size = 4
_T$128871 = -144					; size = 64
_TW$128872 = -80					; size = 64
$T449061 = -80						; size = 80
?BuildState@CCF_Skeleton@@AAEXXZ PROC			; CCF_Skeleton::BuildState, COMDAT
; _this$ = ecx

; 118  : {

	push	ebp
	mov	ebp, esp
	and	esp, -64				; ffffffc0H
	sub	esp, 304				; 00000130H

; 119  : 	dwFrame				= Device.dwFrame;

	mov	eax, DWORD PTR ?Device@@3VCRenderDevice@@A+24
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, ecx

; 120  : 	IRenderVisual* pVisual = owner->Visual();

	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR [edi+76], eax
	mov	ebx, DWORD PTR [ecx+144]

; 121  : 	IKinematics* K		= PKinematics(pVisual);

	test	ebx, ebx
	mov	DWORD PTR _this$[esp+320], edi
	mov	DWORD PTR _pVisual$[esp+320], ebx
	je	SHORT $LN27@BuildState
	mov	edx, DWORD PTR [ebx]
	mov	eax, DWORD PTR [edx+12]
	push	ebx
	call	eax
	mov	esi, eax
	mov	DWORD PTR _K$[esp+320], esi
	jmp	SHORT $LN28@BuildState
$LN27@BuildState:
	mov	DWORD PTR _K$[esp+320], 0
	mov	esi, DWORD PTR _K$[esp+320]
$LN28@BuildState:

; 122  : 	K->CalculateBones();

	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+108]
	push	0
	mov	ecx, esi
	call	eax

; 123  : 	const Fmatrix& L2W	= owner->XFORM();
; 124  : 	
; 125  : 	if (vis_mask!=K->LL_GetBonesVisible()){

	mov	ecx, DWORD PTR [esi]
	mov	ebp, DWORD PTR [edi+4]
	mov	edx, DWORD PTR [ecx+100]
	push	esi
	add	ebp, 80					; 00000050H
	call	edx
	mov	ecx, DWORD PTR [edi+56]
	cmp	ecx, eax
	jne	SHORT $LN209@BuildState
	mov	eax, DWORD PTR [edi+60]
	cmp	eax, edx
	je	$LN17@BuildState
$LN209@BuildState:

; 126  : 		vis_mask		= K->LL_GetBonesVisible();

	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx+100]
	push	esi
	call	edx
	mov	DWORD PTR [edi+60], edx

; 127  : 		elements.clear_not_free();

	lea	edx, DWORD PTR [edi+64]
	mov	DWORD PTR [edi+56], eax
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, eax
	mov	DWORD PTR tv1211[esp+320], edx
	je	SHORT $LN52@BuildState
	mov	ebx, eax
	sub	ebx, eax
	je	SHORT $LN60@BuildState
	push	ebx
	push	eax
	push	ecx
	call	DWORD PTR __imp__memmove
	mov	edx, DWORD PTR tv1211[esp+332]
	add	esp, 12					; 0000000cH
	add	eax, ebx
	jmp	SHORT $LN61@BuildState
$LN60@BuildState:
	mov	eax, ecx
$LN61@BuildState:
	mov	ebx, DWORD PTR _pVisual$[esp+320]
	mov	DWORD PTR [edx+4], eax
$LN52@BuildState:

; 128  : 		bv_box.set		(pVisual->getVisData().box);

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [eax+4]
	push	ebx
	call	ecx
	fld	DWORD PTR [eax+16]
	fstp	DWORD PTR [edi+12]

; 129  : 		bv_box.getsphere(bv_sphere.P,bv_sphere.R);

	movss	xmm1, DWORD PTR __real@3f000000
	fld	DWORD PTR [eax+20]
	add	eax, 16					; 00000010H
	fstp	DWORD PTR [edi+16]
	push	ecx
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR [edi+20]
	fld	DWORD PTR [eax+12]
	fstp	DWORD PTR [edi+24]
	fld	DWORD PTR [eax+16]
	fstp	DWORD PTR [edi+28]
	fld	DWORD PTR [eax+20]
	fstp	DWORD PTR [edi+32]
	movss	xmm0, DWORD PTR [edi+24]
	addss	xmm0, DWORD PTR [edi+12]
	mulss	xmm0, xmm1
	movss	DWORD PTR [edi+36], xmm0
	movss	xmm0, DWORD PTR [edi+28]
	addss	xmm0, DWORD PTR [edi+16]
	movss	xmm2, DWORD PTR [edi+36]
	mulss	xmm0, xmm1
	movss	DWORD PTR [edi+40], xmm0
	movss	xmm0, DWORD PTR [edi+32]
	addss	xmm0, DWORD PTR [edi+20]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR [edi+40]
	movss	DWORD PTR [edi+44], xmm0
	subss	xmm2, DWORD PTR [edi+24]
	subss	xmm1, DWORD PTR [edi+28]
	subss	xmm0, DWORD PTR [edi+32]
	movaps	xmm3, xmm2
	mulss	xmm3, xmm2
	movaps	xmm2, xmm1
	mulss	xmm2, xmm1
	movaps	xmm1, xmm0
	addss	xmm3, xmm2
	mulss	xmm1, xmm0
	addss	xmm3, xmm1
	movss	DWORD PTR [esp], xmm3
	call	_sqrtf
	fstp	DWORD PTR [edi+48]

; 130  : 		for (u16 i=0; i<K->LL_BoneCount(); i++){

	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+48]
	add	esp, 4
	xor	ebx, ebx
	push	esi
	mov	DWORD PTR _i$128855[esp+324], ebx
	call	eax
	test	ax, ax
	jbe	$LN17@BuildState
$LL19@BuildState:

; 131  : 			if (!K->LL_GetBoneVisible(i))					continue;

	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx+92]
	push	ebx
	push	esi
	call	edx
	test	eax, eax
	je	SHORT $LN18@BuildState

; 132  : 			SBoneShape&	shape	= K->LL_GetData(i).shape;

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax+40]
	push	ebx
	push	esi
	call	ecx

; 133  : 			if (SBoneShape::stNone==shape.type)				continue;

	movzx	ecx, WORD PTR [eax+200]
	add	eax, 200				; 000000c8H
	test	cx, cx
	je	SHORT $LN18@BuildState

; 134  : 			if (shape.flags.is(SBoneShape::sfNoPickable))	continue;

	test	BYTE PTR [eax+2], 1
	jne	SHORT $LN18@BuildState

; 135  : 			elements.push_back	(SElement(i,shape.type));

	mov	edx, DWORD PTR tv1211[esp+320]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR [edx+8]
	mov	WORD PTR $T449061[esp+396], cx
	mov	WORD PTR $T449061[esp+398], bx
	je	SHORT $LN91@BuildState
	test	eax, eax
	je	SHORT $LN96@BuildState
	mov	ebx, DWORD PTR _i$128855[esp+320]
	mov	ecx, 20					; 00000014H
	lea	esi, DWORD PTR $T449061[esp+320]
	mov	edi, eax
	rep movsd
	mov	edi, DWORD PTR _this$[esp+320]
	mov	esi, DWORD PTR _K$[esp+320]
$LN96@BuildState:
	add	DWORD PTR [edx+4], 80			; 00000050H
	jmp	SHORT $LN18@BuildState
$LN91@BuildState:
	lea	ecx, DWORD PTR $T449061[esp+320]
	push	ecx
	mov	ebx, edx
	call	?_M_insert_overflow@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@AAEXPAUSElement@CCF_Skeleton@@ABU45@ABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_M_insert_overflow
	mov	ebx, DWORD PTR _i$128855[esp+320]
$LN18@BuildState:
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+48]
	add	ebx, 1
	push	esi
	mov	DWORD PTR _i$128855[esp+324], ebx
	call	eax
	cmp	bx, ax
	jb	$LL19@BuildState
$LN17@BuildState:

; 136  : 		}
; 137  : 	}
; 138  : 
; 139  : 	for (ElementVecIt I=elements.begin(); I!=elements.end(); I++){

	mov	ebx, DWORD PTR [edi+64]
	cmp	ebx, DWORD PTR [edi+68]
	mov	DWORD PTR _I$128864[esp+320], ebx
	je	$LN11@BuildState
	add	ebx, 20					; 00000014H
$LL13@BuildState:

; 140  : 		if (!I->valid())		continue;

	movzx	eax, WORD PTR [ebx+58]
	cmp	ax, 65535				; 0000ffffH
	je	$LN12@BuildState
	cmp	WORD PTR [ebx+56], 0
	je	$LN12@BuildState

; 141  : 		SBoneShape&	shape		= K->LL_GetData(I->elem_id).shape;

	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx+40]
	push	eax
	push	esi
	call	edx

; 142  : 		Fmatrix					ME,T,TW;
; 143  : 		const Fmatrix& Mbone	= K->LL_GetTransform(I->elem_id);

	movzx	edx, WORD PTR [ebx+58]
	mov	esi, eax
	mov	eax, DWORD PTR _K$[esp+320]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+60]
	add	esi, 200				; 000000c8H
	call	eax

; 144  : 
; 145  : 		VERIFY2( DET(Mbone)>EPS, ( make_string("0 scale bone matrix, %d \n", I->elem_id ) + dbg_object_full_dump_string( owner ) ).c_str()  );
; 146  : 
; 147  : 		switch (I->type){

	movzx	ecx, WORD PTR [ebx+56]
	sub	ecx, 1
	je	$LN4@BuildState
	sub	ecx, 1
	je	$LN2@BuildState
	sub	ecx, 1
	jne	$LN213@BuildState

; 177  : 			case SBoneShape::stCylinder:{
; 178  : 				const Fcylinder& C	= shape.cylinder;
; 179  : 				Mbone.transform_tiny(I->c_cylinder.m_center,C.m_center);

	movss	xmm0, DWORD PTR [esi+84]
	mulss	xmm0, DWORD PTR [eax+16]
	movss	xmm1, DWORD PTR [eax]
	mulss	xmm1, DWORD PTR [esi+80]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [eax+32]
	mulss	xmm1, DWORD PTR [esi+88]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _I$128864[esp+320]
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [esi+84]
	mulss	xmm0, DWORD PTR [eax+20]
	movss	xmm1, DWORD PTR [eax+36]
	mulss	xmm1, DWORD PTR [esi+88]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR [esi+80]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR [ebx-16], xmm0
	movss	xmm0, DWORD PTR [esi+84]
	mulss	xmm0, DWORD PTR [eax+24]
	movss	xmm1, DWORD PTR [eax+40]
	mulss	xmm1, DWORD PTR [esi+88]

; 180  : 				L2W.transform_tiny	(I->c_cylinder.m_center);

	movss	xmm4, DWORD PTR [ebx-16]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [eax+8]
	mulss	xmm1, DWORD PTR [esi+80]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR [eax+56]
	movss	xmm1, DWORD PTR [ecx]
	movss	DWORD PTR [ebx-12], xmm0
	movss	xmm2, DWORD PTR [ebp+16]
	movss	xmm3, DWORD PTR [ebp]
	movss	xmm5, DWORD PTR [ebp+20]
	mulss	xmm3, xmm1
	mulss	xmm2, xmm4
	addss	xmm2, xmm3
	movss	xmm3, DWORD PTR [ebp+32]
	mulss	xmm3, xmm0
	addss	xmm2, xmm3
	movss	xmm3, DWORD PTR [ebp+4]
	addss	xmm2, DWORD PTR [ebp+48]
	mulss	xmm3, xmm1
	mulss	xmm1, DWORD PTR [ebp+8]
	mulss	xmm5, xmm4
	mulss	xmm4, DWORD PTR [ebp+24]
	addss	xmm1, xmm4
	addss	xmm3, xmm5
	movss	xmm5, DWORD PTR [ebp+36]
	mulss	xmm5, xmm0
	mulss	xmm0, DWORD PTR [ebp+40]
	addss	xmm1, xmm0
	addss	xmm1, DWORD PTR [ebp+56]
	addss	xmm3, xmm5
	addss	xmm3, DWORD PTR [ebp+52]
	movss	DWORD PTR [ecx], xmm2
	movss	DWORD PTR [ebx-16], xmm3
	movss	DWORD PTR [ebx-12], xmm1

; 181  : 				Mbone.transform_dir	(I->c_cylinder.m_direction,C.m_direction);

	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [esi+92]
	movss	xmm1, DWORD PTR [eax+32]
	mulss	xmm1, DWORD PTR [esi+100]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [esi+96]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	movss	DWORD PTR [ebx-8], xmm0
	movss	xmm0, DWORD PTR [eax+36]
	mulss	xmm0, DWORD PTR [esi+100]
	movss	xmm1, DWORD PTR [eax+20]
	mulss	xmm1, DWORD PTR [esi+96]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR [esi+92]
	addss	xmm0, xmm1
	movss	DWORD PTR [ebx-4], xmm0
	movss	xmm0, DWORD PTR [eax+40]
	mulss	xmm0, DWORD PTR [esi+100]
	movss	xmm1, DWORD PTR [eax+24]
	mulss	xmm1, DWORD PTR [esi+96]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [eax+8]
	mulss	xmm1, DWORD PTR [esi+92]
	addss	xmm0, xmm1
	movss	DWORD PTR [ebx], xmm0

; 182  : 				L2W.transform_dir	(I->c_cylinder.m_direction);

	movss	xmm2, DWORD PTR [ebx-4]
	movss	xmm3, DWORD PTR [ebp+16]
	movss	xmm4, DWORD PTR [ebp]
	movss	xmm5, DWORD PTR [ebp+20]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR [ebx-8]
	mulss	xmm4, xmm0
	mulss	xmm3, xmm2
	addss	xmm3, xmm4
	movss	xmm4, DWORD PTR [ebp+32]
	mulss	xmm4, xmm1
	addss	xmm3, xmm4
	movss	xmm4, DWORD PTR [ebp+4]
	mulss	xmm4, xmm0
	mulss	xmm0, DWORD PTR [ebp+8]
	mulss	xmm5, xmm2
	mulss	xmm2, DWORD PTR [ebp+24]
	addss	xmm4, xmm5
	movss	xmm5, DWORD PTR [ebp+36]
	mulss	xmm5, xmm1
	mulss	xmm1, DWORD PTR [ebp+40]
	movss	DWORD PTR [ebx-8], xmm3
	addss	xmm0, xmm2
	addss	xmm4, xmm5
	movss	DWORD PTR [ebx-4], xmm4
	addss	xmm0, xmm1
	movss	DWORD PTR [ebx], xmm0

; 183  : 				I->c_cylinder.m_height	= C.m_height;

	fld	DWORD PTR [esi+104]
	fstp	DWORD PTR [ebx+4]

; 184  : 				I->c_cylinder.m_radius	= C.m_radius;

	fld	DWORD PTR [esi+108]
	fstp	DWORD PTR [ebx+8]

; 185  : 			}break;

	jmp	$LN213@BuildState
$LN2@BuildState:

; 169  : 				}
; 170  : 								   }break;
; 171  : 			case SBoneShape::stSphere:{
; 172  : 				const Fsphere& S	= shape.sphere;
; 173  : 				Mbone.transform_tiny(I->s_sphere.P,S.P);

	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR [esi+72]
	movss	xmm1, DWORD PTR [eax+16]
	mulss	xmm1, DWORD PTR [esi+68]
	mov	ecx, DWORD PTR _I$128864[esp+320]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [eax]
	mulss	xmm1, DWORD PTR [esi+64]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR [eax+48]
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+36]
	mulss	xmm0, DWORD PTR [esi+72]
	movss	xmm1, DWORD PTR [eax+20]
	mulss	xmm1, DWORD PTR [esi+68]

; 174  : 				L2W.transform_tiny	(I->s_sphere.P);

	movss	xmm5, DWORD PTR [ecx]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR [esi+64]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR [ebx-16], xmm0
	movss	xmm0, DWORD PTR [eax+40]
	mulss	xmm0, DWORD PTR [esi+72]
	movss	xmm1, DWORD PTR [eax+24]
	mulss	xmm1, DWORD PTR [esi+68]
	movss	xmm4, DWORD PTR [ebx-16]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [eax+8]
	mulss	xmm1, DWORD PTR [esi+64]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR [eax+56]
	movss	DWORD PTR [ebx-12], xmm0
	movss	xmm1, DWORD PTR [ebp+16]
	movss	xmm2, DWORD PTR [ebp+32]
	movss	xmm3, DWORD PTR [ebp+4]
	mulss	xmm2, xmm0
	mulss	xmm1, xmm4
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR [ebp]
	mulss	xmm2, xmm5
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR [ebp+20]
	addss	xmm1, DWORD PTR [ebp+48]
	mulss	xmm3, xmm5
	mulss	xmm2, xmm4
	addss	xmm2, xmm3
	movss	xmm3, DWORD PTR [ebp+36]
	mulss	xmm3, xmm0
	addss	xmm2, xmm3
	movss	xmm3, DWORD PTR [ebp+24]
	addss	xmm2, DWORD PTR [ebp+52]
	mulss	xmm3, xmm4
	movss	xmm4, DWORD PTR [ebp+8]
	mulss	xmm4, xmm5
	addss	xmm3, xmm4
	movss	xmm4, DWORD PTR [ebp+40]
	mulss	xmm4, xmm0
	addss	xmm3, xmm4
	addss	xmm3, DWORD PTR [ebp+56]
	movss	DWORD PTR [ecx], xmm1
	movss	DWORD PTR [ebx-16], xmm2
	movss	DWORD PTR [ebx-12], xmm3

; 175  : 				I->s_sphere.R		= S.R;

	fld	DWORD PTR [esi+76]
	fstp	DWORD PTR [ebx-8]

; 176  : 			}break;

	jmp	$LN213@BuildState
$LN4@BuildState:

; 148  : 			case SBoneShape::stBox:{
; 149  : 				const Fobb& B		= shape.box;
; 150  : 				B.xform_get			(ME			);

	movss	xmm0, DWORD PTR [esi+16]

; 151  : 
; 152  : 				//VERIFY2( DET(ME)>EPS, ( make_string("0 scale bone matrix, %d \n", I->elem_id ) + dbg_object_full_dump_string( owner ) ).c_str()  );
; 153  : 
; 154  : 				I->b_hsize.set		(B.m_halfsize);

	fld	DWORD PTR [esi+52]
	movss	xmm2, DWORD PTR [esi+4]
	movss	xmm3, DWORD PTR [esi+8]
	movss	xmm4, DWORD PTR [esi+12]
	movss	DWORD PTR _ME$128870[esp+336], xmm0
	movss	xmm0, DWORD PTR [esi+20]
	movss	DWORD PTR _ME$128870[esp+340], xmm0
	movss	xmm0, DWORD PTR [esi+24]
	movss	DWORD PTR _ME$128870[esp+344], xmm0
	movss	xmm0, DWORD PTR [esi+28]
	movss	DWORD PTR _ME$128870[esp+352], xmm0
	movss	xmm0, DWORD PTR [esi+32]
	movss	DWORD PTR _ME$128870[esp+356], xmm0
	movss	xmm0, DWORD PTR [esi+36]
	movss	DWORD PTR _ME$128870[esp+360], xmm0
	movss	xmm0, DWORD PTR [esi+40]
	movss	DWORD PTR _ME$128870[esp+368], xmm0
	movss	xmm0, DWORD PTR [esi+44]
	movss	DWORD PTR _ME$128870[esp+372], xmm0
	movss	xmm0, DWORD PTR [esi+48]
	fstp	DWORD PTR [ebx+44]
	fld	DWORD PTR [esi+56]
	movss	DWORD PTR _ME$128870[esp+376], xmm0
	fstp	DWORD PTR [ebx+48]
	movss	DWORD PTR _ME$128870[esp+320], xmm2
	fld	DWORD PTR [esi+60]
	fstp	DWORD PTR [ebx+52]

; 155  : 				// prepare matrix World to Element
; 156  : 				T.mul_43					(Mbone,ME	);		// model space

	movss	xmm0, DWORD PTR [eax+32]
	movss	xmm5, DWORD PTR [eax]
	movss	xmm1, DWORD PTR [eax+16]
	movss	xmm7, DWORD PTR [eax+20]
	mulss	xmm5, xmm2
	movss	DWORD PTR tv1705[esp+320], xmm7
	mulss	xmm7, xmm3
	movaps	xmm6, xmm0
	mulss	xmm6, xmm4
	addss	xmm5, xmm6
	movss	xmm6, DWORD PTR [eax+36]
	movss	DWORD PTR tv1696[esp+320], xmm1
	mulss	xmm1, xmm3
	movss	DWORD PTR tv1708[esp+320], xmm6
	mulss	xmm6, xmm4
	addss	xmm6, xmm7
	addss	xmm5, xmm1
	movss	xmm1, DWORD PTR [eax+4]
	movaps	xmm7, xmm1
	mulss	xmm7, xmm2
	movss	xmm2, DWORD PTR [eax+24]
	addss	xmm6, xmm7
	movss	xmm7, DWORD PTR [eax+40]
	movss	DWORD PTR tv1719[esp+320], xmm7
	mulss	xmm7, xmm4
	movss	DWORD PTR tv1716[esp+320], xmm2
	movss	xmm4, DWORD PTR tv1716[esp+320]
	movss	xmm2, DWORD PTR [eax+8]
	mulss	xmm4, xmm3
	addss	xmm7, xmm4
	movaps	xmm3, xmm2
	mulss	xmm3, DWORD PTR _ME$128870[esp+320]
	addss	xmm7, xmm3
	movaps	xmm3, xmm0
	mulss	xmm3, DWORD PTR _ME$128870[esp+344]
	movss	DWORD PTR tv869[esp+320], xmm3
	movss	xmm4, DWORD PTR tv869[esp+320]
	movss	xmm3, DWORD PTR tv1696[esp+320]
	mulss	xmm3, DWORD PTR _ME$128870[esp+340]
	addss	xmm4, xmm3
	movaps	xmm3, xmm4
	movss	xmm4, DWORD PTR _ME$128870[esp+336]
	movss	DWORD PTR tv869[esp+320], xmm3
	movss	xmm3, DWORD PTR [eax]
	mulss	xmm4, xmm3
	movss	xmm3, DWORD PTR tv869[esp+320]
	addss	xmm3, xmm4
	movss	DWORD PTR _T$128871[esp+336], xmm3
	movaps	xmm3, xmm1
	mulss	xmm3, DWORD PTR _ME$128870[esp+336]
	movss	DWORD PTR tv879[esp+320], xmm3
	movss	xmm3, DWORD PTR tv1708[esp+320]
	mulss	xmm3, DWORD PTR _ME$128870[esp+344]
	movss	xmm4, DWORD PTR tv879[esp+320]
	addss	xmm4, xmm3
	movaps	xmm3, xmm4
	movss	DWORD PTR tv879[esp+320], xmm3
	movss	xmm3, DWORD PTR tv1705[esp+320]
	mulss	xmm3, DWORD PTR _ME$128870[esp+340]
	addss	xmm4, xmm3
	movaps	xmm3, xmm4
	movss	DWORD PTR _T$128871[esp+340], xmm3
	movaps	xmm3, xmm2
	mulss	xmm3, DWORD PTR _ME$128870[esp+336]
	movss	DWORD PTR tv456[esp+320], xmm3
	movss	xmm4, DWORD PTR tv456[esp+320]
	movss	xmm3, DWORD PTR tv1719[esp+320]
	mulss	xmm3, DWORD PTR _ME$128870[esp+344]
	addss	xmm4, xmm3
	movaps	xmm3, xmm4
	movss	DWORD PTR tv456[esp+320], xmm3
	movss	xmm3, DWORD PTR tv1716[esp+320]
	mulss	xmm3, DWORD PTR _ME$128870[esp+340]
	addss	xmm4, xmm3
	movaps	xmm3, xmm4
	movss	DWORD PTR _T$128871[esp+344], xmm3
	movaps	xmm3, xmm0
	mulss	xmm3, DWORD PTR _ME$128870[esp+360]
	movss	DWORD PTR tv448[esp+320], xmm3
	movss	xmm4, DWORD PTR tv448[esp+320]
	movss	xmm3, DWORD PTR tv1696[esp+320]
	mulss	xmm3, DWORD PTR _ME$128870[esp+356]
	addss	xmm4, xmm3
	movaps	xmm3, xmm4
	movss	xmm4, DWORD PTR _ME$128870[esp+352]
	movss	DWORD PTR tv448[esp+320], xmm3
	movss	xmm3, DWORD PTR [eax]
	mulss	xmm4, xmm3
	movss	xmm3, DWORD PTR tv448[esp+320]
	addss	xmm3, xmm4
	movss	DWORD PTR _T$128871[esp+352], xmm3
	mulss	xmm0, DWORD PTR _ME$128870[esp+376]
	movaps	xmm3, xmm1
	mulss	xmm3, DWORD PTR _ME$128870[esp+352]
	movss	DWORD PTR tv439[esp+320], xmm3
	movss	xmm4, DWORD PTR tv439[esp+320]
	movss	xmm3, DWORD PTR tv1708[esp+320]
	mulss	xmm3, DWORD PTR _ME$128870[esp+360]
	addss	xmm4, xmm3
	movaps	xmm3, xmm4
	movss	DWORD PTR tv439[esp+320], xmm3
	movss	xmm3, DWORD PTR tv1705[esp+320]
	mulss	xmm3, DWORD PTR _ME$128870[esp+356]
	addss	xmm4, xmm3
	movaps	xmm3, xmm4
	movss	DWORD PTR _T$128871[esp+356], xmm3
	movaps	xmm3, xmm2
	mulss	xmm3, DWORD PTR _ME$128870[esp+352]
	movss	DWORD PTR tv431[esp+320], xmm3
	movss	xmm3, DWORD PTR tv1719[esp+320]
	mulss	xmm3, DWORD PTR _ME$128870[esp+360]
	movss	xmm4, DWORD PTR tv431[esp+320]
	addss	xmm4, xmm3
	movaps	xmm3, xmm4
	movss	DWORD PTR tv431[esp+320], xmm3
	movss	xmm3, DWORD PTR tv1716[esp+320]
	mulss	xmm3, DWORD PTR _ME$128870[esp+356]
	addss	xmm4, xmm3
	movaps	xmm3, xmm4
	movss	xmm4, DWORD PTR _ME$128870[esp+368]
	movss	DWORD PTR _T$128871[esp+360], xmm3
	movss	xmm3, DWORD PTR tv1696[esp+320]
	mulss	xmm3, DWORD PTR _ME$128870[esp+372]
	addss	xmm0, xmm3
	movss	xmm3, DWORD PTR [eax]
	mulss	xmm4, xmm3
	movss	xmm3, DWORD PTR _ME$128870[esp+368]
	addss	xmm0, xmm4
	addss	xmm0, DWORD PTR [eax+48]
	movss	DWORD PTR _T$128871[esp+368], xmm0
	movss	xmm0, DWORD PTR tv1708[esp+320]
	mulss	xmm0, DWORD PTR _ME$128870[esp+376]
	mulss	xmm1, xmm3
	addss	xmm1, xmm0
	movss	xmm4, DWORD PTR _ME$128870[esp+372]
	movss	xmm0, DWORD PTR tv1705[esp+320]
	mulss	xmm0, xmm4
	addss	xmm1, xmm0
	addss	xmm1, DWORD PTR [eax+52]
	movss	xmm0, DWORD PTR tv1719[esp+320]
	mulss	xmm0, DWORD PTR _ME$128870[esp+376]
	movss	DWORD PTR _T$128871[esp+372], xmm1

; 157  : 				TW.mul_43					(L2W,T		);		// world space

	movss	xmm1, DWORD PTR [ebp]
	mulss	xmm1, xmm5
	mulss	xmm2, xmm3
	movss	xmm3, DWORD PTR [ebp+16]
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR tv1716[esp+320]
	mulss	xmm0, xmm4
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR [ebp+32]
	movss	DWORD PTR tv1775[esp+320], xmm0
	mulss	xmm0, xmm7
	movaps	xmm4, xmm3
	mulss	xmm4, xmm6
	addss	xmm1, xmm4
	movss	xmm4, DWORD PTR [ebp+4]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR [ebp+36]
	movss	DWORD PTR _TW$128872[esp+320], xmm1
	movss	xmm1, DWORD PTR [ebp+20]
	movss	DWORD PTR tv1787[esp+320], xmm1
	mulss	xmm1, xmm6
	movss	DWORD PTR tv1784[esp+320], xmm0
	mulss	xmm0, xmm7
	addss	xmm1, xmm0
	movaps	xmm0, xmm4
	mulss	xmm0, xmm5
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR [ebp+40]
	movss	DWORD PTR _TW$128872[esp+324], xmm1
	movss	xmm1, DWORD PTR [ebp+24]
	movss	DWORD PTR tv1798[esp+320], xmm1
	movss	xmm1, DWORD PTR [ebp+8]
	movss	DWORD PTR tv1802[esp+320], xmm1
	movss	xmm1, DWORD PTR tv1798[esp+320]
	mulss	xmm1, xmm6
	addss	xmm2, DWORD PTR [eax+56]
	movaps	xmm6, xmm0
	mulss	xmm6, xmm7
	addss	xmm1, xmm6
	movss	DWORD PTR tv2211[esp+320], xmm1
	movss	xmm1, DWORD PTR tv1802[esp+320]
	movaps	xmm6, xmm1
	mulss	xmm6, xmm5
	movss	xmm5, DWORD PTR tv2211[esp+320]
	addss	xmm5, xmm6
	movss	DWORD PTR _TW$128872[esp+328], xmm5
	xorps	xmm5, xmm5
	movss	DWORD PTR _TW$128872[esp+332], xmm5
	movss	xmm5, DWORD PTR tv1775[esp+320]
	mulss	xmm5, DWORD PTR _T$128871[esp+344]
	movaps	xmm6, xmm3
	mulss	xmm6, DWORD PTR _T$128871[esp+340]
	addss	xmm6, xmm5
	movss	xmm5, DWORD PTR [ebp]
	movaps	xmm7, xmm5
	movss	xmm5, DWORD PTR _T$128871[esp+336]
	mulss	xmm7, xmm5
	addss	xmm6, xmm7
	movss	DWORD PTR _TW$128872[esp+336], xmm6
	movaps	xmm6, xmm4
	mulss	xmm6, xmm5
	movss	xmm5, DWORD PTR tv1787[esp+320]
	mulss	xmm5, DWORD PTR _T$128871[esp+340]
	addss	xmm6, xmm5
	movss	xmm5, DWORD PTR tv1784[esp+320]
	mulss	xmm5, DWORD PTR _T$128871[esp+344]
	addss	xmm6, xmm5
	movss	DWORD PTR _TW$128872[esp+340], xmm6
	movss	xmm6, DWORD PTR tv1798[esp+320]
	mulss	xmm6, DWORD PTR _T$128871[esp+340]
	movaps	xmm5, xmm1
	mulss	xmm5, DWORD PTR _T$128871[esp+336]
	addss	xmm5, xmm6
	mulss	xmm1, DWORD PTR _T$128871[esp+352]
	movaps	xmm6, xmm0
	mulss	xmm6, DWORD PTR _T$128871[esp+344]
	mulss	xmm0, DWORD PTR _T$128871[esp+360]
	addss	xmm5, xmm6
	movss	xmm6, DWORD PTR tv1775[esp+320]
	mulss	xmm6, DWORD PTR _T$128871[esp+360]
	movss	DWORD PTR _TW$128872[esp+344], xmm5
	xorps	xmm5, xmm5
	movss	DWORD PTR _TW$128872[esp+348], xmm5
	movaps	xmm5, xmm3
	mulss	xmm5, DWORD PTR _T$128871[esp+356]
	addss	xmm6, xmm5
	movss	xmm5, DWORD PTR [ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR tv1798[esp+320]
	movaps	xmm7, xmm5
	movss	xmm5, DWORD PTR _T$128871[esp+352]
	mulss	xmm7, xmm5
	addss	xmm6, xmm7

; 158  : 				bool b						= I->b_IM.invert_b	(TW);

	mov	edi, DWORD PTR _I$128864[esp+320]
	movaps	xmm7, xmm4
	mulss	xmm7, xmm5
	movss	xmm5, DWORD PTR _T$128871[esp+356]
	movss	DWORD PTR _TW$128872[esp+352], xmm6
	movss	xmm6, DWORD PTR tv1784[esp+320]
	mulss	xmm6, DWORD PTR _T$128871[esp+360]
	mulss	xmm1, xmm5
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _T$128871[esp+372]
	movss	DWORD PTR _TW$128872[esp+360], xmm0
	xorps	xmm0, xmm0
	mulss	xmm3, xmm1
	addss	xmm6, xmm7
	movss	xmm7, DWORD PTR tv1787[esp+320]
	movss	DWORD PTR _TW$128872[esp+364], xmm0
	movss	xmm0, DWORD PTR tv1775[esp+320]
	mulss	xmm0, xmm2
	addss	xmm3, xmm0
	movss	xmm0, DWORD PTR _T$128871[esp+368]
	mulss	xmm7, xmm5
	movss	xmm5, DWORD PTR [ebp]
	addss	xmm6, xmm7
	movss	DWORD PTR _TW$128872[esp+356], xmm6
	movaps	xmm6, xmm0
	mulss	xmm6, xmm5
	addss	xmm3, xmm6
	addss	xmm3, DWORD PTR [ebp+48]
	movss	DWORD PTR _TW$128872[esp+368], xmm3
	movss	xmm3, DWORD PTR tv1787[esp+320]
	mulss	xmm4, xmm0
	mulss	xmm0, DWORD PTR [ebp+8]
	mulss	xmm3, xmm1
	mulss	xmm1, DWORD PTR [ebp+24]
	addss	xmm4, xmm3
	movss	xmm3, DWORD PTR tv1784[esp+320]
	mulss	xmm3, xmm2
	mulss	xmm2, DWORD PTR [ebp+40]
	addss	xmm2, xmm1
	addss	xmm2, xmm0
	addss	xmm2, DWORD PTR [ebp+56]
	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm4, xmm3
	addss	xmm4, DWORD PTR [ebp+52]
	lea	esi, DWORD PTR _TW$128872[esp+320]
	movss	DWORD PTR _TW$128872[esp+372], xmm4
	movss	DWORD PTR _TW$128872[esp+376], xmm2
	movss	DWORD PTR _TW$128872[esp+380], xmm0
	call	?invert_b@?$_matrix@M@@QAE_NABU1@@Z	; _matrix<float>::invert_b

; 159  : 				// check matrix validity
; 160  : 				if (!b)	{

	test	al, al
	jne	$LN211@BuildState

; 161  : 					Msg						("! ERROR: invalid bone xform . Bone disabled.");

	mov	edi, DWORD PTR __imp_?Msg@@YAXPBDZZ
	push	OFFSET ??_C@_0CN@CEENEOHL@?$CB?5ERROR?3?5invalid?5bone?5xform?5?4?5Bo@
	call	edi

; 162  : 					Msg						("! ERROR: bone_id=[%d], world_pos[%f,%f,%f]",I->elem_id,VPUSH(TW.c));

	fld	DWORD PTR _TW$128872[esp+380]
	movzx	ecx, WORD PTR [ebx+58]
	sub	esp, 20					; 00000014H
	fstp	QWORD PTR [esp+16]
	fld	DWORD PTR _TW$128872[esp+396]
	fstp	QWORD PTR [esp+8]
	fld	DWORD PTR _TW$128872[esp+392]
	fstp	QWORD PTR [esp]
	push	ecx
	push	OFFSET ??_C@_0CL@LPIDHOGD@?$CB?5ERROR?3?5bone_id?$DN?$FL?$CFd?$FN?0?5world_pos@
	call	edi

; 163  : 					Msg						("visual name %s",owner->cNameVisual().c_str());

	mov	edx, DWORD PTR _this$[esp+352]
	mov	eax, DWORD PTR [edx+4]
	mov	esi, DWORD PTR [eax+176]
	add	esp, 32					; 00000020H
	test	esi, esi
	je	SHORT $LN151@BuildState
	add	DWORD PTR [esi], 1
	lea	eax, DWORD PTR [esi+16]
	jmp	SHORT $LN152@BuildState
$LN151@BuildState:
	xor	eax, eax
$LN152@BuildState:
	push	eax
	push	OFFSET ??_C@_0P@NKBIFLEF@visual?5name?5?$CFs?$AA@
	call	edi
	add	esp, 8
	test	esi, esi
	je	SHORT $LN155@BuildState
	add	DWORD PTR [esi], -1
$LN155@BuildState:

; 164  : 					Msg						("object name %s",owner->cName().c_str());

	mov	ecx, DWORD PTR _this$[esp+320]
	mov	edx, DWORD PTR [ecx+4]
	mov	esi, DWORD PTR [edx+168]
	test	esi, esi
	je	SHORT $LN172@BuildState
	add	DWORD PTR [esi], 1
	lea	eax, DWORD PTR [esi+16]
	jmp	SHORT $LN173@BuildState
$LN172@BuildState:
	xor	eax, eax
$LN173@BuildState:
	push	eax
	push	OFFSET ??_C@_0P@PEKPNBJL@object?5name?5?$CFs?$AA@
	call	edi
	add	esp, 8
	test	esi, esi
	je	SHORT $LN176@BuildState
	add	DWORD PTR [esi], -1
$LN176@BuildState:

; 165  : #ifdef DEBUG
; 166  : 					Msg						( dbg_object_full_dump_string( owner ).c_str() );
; 167  : #endif //#ifdef DEBUG
; 168  : 					I->elem_id				= u16(-1);				//. hack - disable invalid bone

	mov	WORD PTR [ebx+58], 65535		; 0000ffffH
$LN211@BuildState:
	mov	edi, DWORD PTR _this$[esp+320]
$LN213@BuildState:
	mov	esi, DWORD PTR _K$[esp+320]
$LN12@BuildState:

; 136  : 		}
; 137  : 	}
; 138  : 
; 139  : 	for (ElementVecIt I=elements.begin(); I!=elements.end(); I++){

	mov	eax, DWORD PTR _I$128864[esp+320]
	add	eax, 80					; 00000050H
	add	ebx, 80					; 00000050H
	cmp	eax, DWORD PTR [edi+68]
	mov	DWORD PTR _I$128864[esp+320], eax
	jne	$LL13@BuildState
$LN11@BuildState:

; 186  : 		}
; 187  : 	}
; 188  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?BuildState@CCF_Skeleton@@AAEXXZ ENDP			; CCF_Skeleton::BuildState
; Function compile flags: /Ogtpy
;	COMDAT ?_RayQuery@CCF_Skeleton@@UAEHABUray_defs@collide@@AAVrq_results@3@@Z
_TEXT	SEGMENT
_fB$493801 = -24					; size = 4
_I$128922 = -24						; size = 4
_fA$493800 = -20					; size = 4
_range$128928 = -20					; size = 4
tv460 = -16						; size = 4
_this$ = -12						; size = 4
_fRoot$493808 = -8					; size = 4
_fDiscr$493804 = -8					; size = 4
_bHIT$ = -8						; size = 4
tv678 = -4						; size = 4
_tgt_dist$ = -4						; size = 4
_Q$ = 8							; size = 4
_R$ = 12						; size = 4
?_RayQuery@CCF_Skeleton@@UAEHABUray_defs@collide@@AAVrq_results@3@@Z PROC ; CCF_Skeleton::_RayQuery, COMDAT
; _this$ = ecx

; 206  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 28					; 0000001cH
	push	ebx
	push	esi
	mov	esi, ecx

; 207  : 	if (dwFrameTL!=Device.dwFrame)			BuildTopLevel();

	mov	eax, DWORD PTR [esi+80]
	cmp	eax, DWORD PTR ?Device@@3VCRenderDevice@@A+24
	push	edi
	mov	DWORD PTR _this$[esp+40], esi
	je	SHORT $LN17@RayQuery@2
	call	?BuildTopLevel@CCF_Skeleton@@AAEXXZ	; CCF_Skeleton::BuildTopLevel
$LN17@RayQuery@2:

; 208  : 
; 209  : 
; 210  : 	Fsphere w_bv_sphere;
; 211  : 	owner->XFORM().transform_tiny		(w_bv_sphere.P,bv_sphere.P);

	mov	edi, DWORD PTR [esi+4]
	movss	xmm3, DWORD PTR [esi+44]
	movss	xmm4, DWORD PTR [esi+40]
	movss	xmm5, DWORD PTR [esi+36]
	movss	xmm0, DWORD PTR [edi+96]
	movss	xmm1, DWORD PTR [edi+112]
	movss	xmm2, DWORD PTR [edi+100]

; 212  : 	w_bv_sphere.R						= bv_sphere.R;
; 213  : 
; 214  : 	// 
; 215  : 	float tgt_dist						= Q.range;

	mov	ebx, DWORD PTR _Q$[ebp]
	mulss	xmm1, xmm3
	mulss	xmm2, xmm4
	mulss	xmm0, xmm4
	addss	xmm0, xmm1
	movaps	xmm1, xmm5
	mulss	xmm1, DWORD PTR [edi+80]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [edi+84]
	addss	xmm0, DWORD PTR [edi+128]
	mulss	xmm1, xmm5
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR [edi+116]
	mulss	xmm2, xmm3
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR [edi+88]
	addss	xmm1, DWORD PTR [edi+132]
	mulss	xmm2, xmm5
	movss	xmm5, DWORD PTR [edi+104]
	mulss	xmm5, xmm4
	movss	xmm4, DWORD PTR [edi+120]
	mulss	xmm4, xmm3

; 216  : 	float aft[2];
; 217  : 	int quant;
; 218  : 	Fsphere::ERP_Result res				= w_bv_sphere.intersect(Q.start,Q.dir,tgt_dist,quant,aft);

	movss	xmm3, DWORD PTR [ebx]
	addss	xmm2, xmm5
	movss	xmm5, DWORD PTR [ebx+24]
	subss	xmm3, xmm0
	movss	xmm0, DWORD PTR [ebx+16]
	addss	xmm2, xmm4
	addss	xmm2, DWORD PTR [edi+136]
	movss	xmm4, DWORD PTR [ebx+4]
	subss	xmm4, xmm1
	movss	xmm1, DWORD PTR [ebx+8]
	subss	xmm1, xmm2
	movss	xmm2, DWORD PTR [ebx+20]
	lea	eax, DWORD PTR [ebx+12]
	mulss	xmm2, xmm1
	movaps	xmm7, xmm3
	mulss	xmm7, xmm3
	mulss	xmm0, xmm4
	addss	xmm0, xmm2
	movaps	xmm2, xmm3
	mulss	xmm2, DWORD PTR [eax]
	movaps	xmm3, xmm4
	mulss	xmm3, xmm4
	addss	xmm7, xmm3
	movaps	xmm3, xmm1
	mulss	xmm3, xmm1
	movss	xmm1, DWORD PTR [esi+48]
	addss	xmm7, xmm3
	addss	xmm0, xmm2
	mulss	xmm0, xmm5
	movaps	xmm3, xmm1
	mulss	xmm3, xmm1
	movaps	xmm6, xmm5
	mulss	xmm6, xmm5
	subss	xmm7, xmm3
	xorps	xmm3, xmm3
	movaps	xmm2, xmm0
	mulss	xmm2, xmm0
	mulss	xmm7, xmm6
	subss	xmm2, xmm7
	comiss	xmm3, xmm2
	movss	DWORD PTR _tgt_dist$[esp+40], xmm5
	mov	DWORD PTR tv460[esp+40], eax
	movss	DWORD PTR _fA$493800[esp+40], xmm6
	movss	DWORD PTR _fB$493801[esp+40], xmm0
	movss	DWORD PTR _fDiscr$493804[esp+40], xmm2
	ja	SHORT $LN15@RayQuery@2
	comiss	xmm2, xmm3
	jbe	SHORT $LN31@RayQuery@2
	fld	DWORD PTR _fDiscr$493804[esp+40]
	push	ecx
	fstp	DWORD PTR [esp]
	call	_sqrtf
	movss	xmm3, DWORD PTR _fB$493801[esp+44]
	fstp	DWORD PTR _fRoot$493808[esp+44]
	movss	xmm1, DWORD PTR __real@80000000
	movss	xmm0, DWORD PTR _fRoot$493808[esp+44]
	movss	xmm2, DWORD PTR __real@3f800000
	divss	xmm2, DWORD PTR _fA$493800[esp+44]
	movss	xmm5, DWORD PTR _tgt_dist$[esp+44]
	subss	xmm1, xmm3
	subss	xmm1, xmm0
	subss	xmm0, xmm3
	mulss	xmm1, xmm2
	mulss	xmm0, xmm2
	xorps	xmm2, xmm2
	add	esp, 4
	mulss	xmm1, xmm5
	comiss	xmm1, xmm2
	mulss	xmm0, xmm5
	jae	SHORT $LN82@RayQuery@2
	comiss	xmm0, xmm2
	jae	SHORT $LN16@RayQuery@2
$LN15@RayQuery@2:

; 219  : 	if ((Fsphere::rpNone==res)||((Fsphere::rpOriginOutside==res)&&(aft[0]>tgt_dist)) ) return FALSE;

	xor	eax, eax

; 255  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8

; 216  : 	float aft[2];
; 217  : 	int quant;
; 218  : 	Fsphere::ERP_Result res				= w_bv_sphere.intersect(Q.start,Q.dir,tgt_dist,quant,aft);

$LN31@RayQuery@2:
	movss	xmm1, DWORD PTR __real@80000000
	divss	xmm0, xmm6
	subss	xmm1, xmm0
	mulss	xmm1, xmm5
	comiss	xmm1, xmm3
	jb	SHORT $LN15@RayQuery@2
$LN82@RayQuery@2:

; 219  : 	if ((Fsphere::rpNone==res)||((Fsphere::rpOriginOutside==res)&&(aft[0]>tgt_dist)) ) return FALSE;

	comiss	xmm1, xmm5
	ja	SHORT $LN15@RayQuery@2
$LN16@RayQuery@2:

; 220  : 
; 221  : 	if (dwFrame != Device.dwFrame)		BuildState	();

	mov	ecx, DWORD PTR ?Device@@3VCRenderDevice@@A+24
	cmp	DWORD PTR [esi+76], ecx

; 222  : 	else{

	jne	SHORT $LN90@RayQuery@2

; 223  : 		IKinematics* K	= PKinematics	(owner->Visual());

	mov	edi, DWORD PTR [edi+144]
	test	edi, edi
	je	SHORT $LN50@RayQuery@2
	mov	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx+12]
	push	edi
	call	eax
	jmp	SHORT $LN51@RayQuery@2
$LN50@RayQuery@2:
	xor	eax, eax
$LN51@RayQuery@2:

; 224  : 		if (K->LL_GetBonesVisible()!=vis_mask)	{

	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+100]
	push	eax
	call	edx
	cmp	eax, DWORD PTR [esi+56]
	jne	SHORT $LN83@RayQuery@2
	cmp	edx, DWORD PTR [esi+60]
	je	SHORT $LN12@RayQuery@2
$LN83@RayQuery@2:

; 225  : 			// Model changed between ray-picks
; 226  : 			dwFrame		= Device.dwFrame-1	;

	mov	eax, DWORD PTR ?Device@@3VCRenderDevice@@A+24
	add	eax, -1
	mov	DWORD PTR [esi+76], eax
$LN90@RayQuery@2:

; 227  : 			BuildState	();

	mov	ecx, esi
	call	?BuildState@CCF_Skeleton@@AAEXXZ	; CCF_Skeleton::BuildState
$LN12@RayQuery@2:

; 228  : 		}
; 229  : 	}
; 230  : 
; 231  : 	BOOL bHIT			= FALSE;
; 232  : 	for (ElementVecIt I=elements.begin(); I!=elements.end(); I++){

	mov	esi, DWORD PTR [esi+64]
	mov	ecx, DWORD PTR _this$[esp+40]
	cmp	esi, DWORD PTR [ecx+68]
	mov	DWORD PTR _bHIT$[esp+40], 0
	mov	DWORD PTR _I$128922[esp+40], esi
	je	$LN77@RayQuery@2
$LN11@RayQuery@2:

; 233  : 		if (!I->valid())continue;

	movzx	eax, WORD PTR [esi+78]
	cmp	ax, 65535				; 0000ffffH
	mov	DWORD PTR tv678[esp+40], eax
	je	$LN10@RayQuery@2
	movzx	eax, WORD PTR [esi+76]
	test	ax, ax
	je	$LN10@RayQuery@2

; 234  : 		bool res		= false;
; 235  : 		float range		= Q.range;

	movss	xmm0, DWORD PTR [ebx+24]

; 236  : 		switch (I->type){

	movzx	eax, ax
	sub	eax, 1
	movss	DWORD PTR _range$128928[esp+40], xmm0
	je	SHORT $LN5@RayQuery@2
	sub	eax, 1
	je	SHORT $LN4@RayQuery@2
	sub	eax, 1
	jne	$LN10@RayQuery@2

; 244  : 		case SBoneShape::stCylinder: 
; 245  : 			res			= RAYvsCYLINDER	(I->c_cylinder,Q.start,Q.dir,range,Q.flags&CDB::OPT_CULL);

	mov	edx, DWORD PTR tv460[esp+40]
	push	ebx
	push	esi
	lea	esi, DWORD PTR _range$128928[esp+48]
	call	?intersect@?$_cylinder@M@@QBE?AW4ERP_Result@1@ABU?$_vector3@M@@0AAM@Z ; _cylinder<float>::intersect
	cmp	eax, 2
	je	SHORT $LN80@RayQuery@2
	test	BYTE PTR [ebx+28], 1
	jne	$LN86@RayQuery@2
	cmp	eax, 1
	je	SHORT $LN80@RayQuery@2
	jmp	SHORT $LN86@RayQuery@2
$LN4@RayQuery@2:

; 239  : 		break;
; 240  : 		case SBoneShape::stSphere: 
; 241  : 			res			= RAYvsSPHERE	(I->s_sphere,Q.start,Q.dir,range,Q.flags&CDB::OPT_CULL);

	mov	edx, DWORD PTR [ebx+28]
	mov	ecx, DWORD PTR tv460[esp+40]
	mov	eax, DWORD PTR _I$128922[esp+40]
	and	edx, 1
	push	edx
	lea	esi, DWORD PTR _range$128928[esp+44]
	mov	edx, ebx
	call	?RAYvsSPHERE@@YA_NABU?$_sphere@M@@ABU?$_vector3@M@@1AAMH@Z ; RAYvsSPHERE

; 242  : 
; 243  : 		break;

	mov	esi, DWORD PTR _I$128922[esp+44]
	add	esp, 4
	jmp	SHORT $LN6@RayQuery@2
$LN5@RayQuery@2:

; 237  : 		case SBoneShape::stBox:
; 238  : 			res			= RAYvsOBB		(I->b_IM,I->b_hsize,Q.start,Q.dir,range,Q.flags&CDB::OPT_CULL);

	mov	eax, DWORD PTR [ebx+28]
	and	eax, 1
	push	eax
	lea	ecx, DWORD PTR [esi+64]
	push	ecx
	mov	ecx, DWORD PTR tv460[esp+48]
	lea	edi, DWORD PTR _range$128928[esp+48]
	mov	edx, ebx
	mov	eax, esi
	call	?RAYvsOBB@@YA_NABU?$_matrix@M@@ABU?$_vector3@M@@11AAMH@Z ; RAYvsOBB
	add	esp, 8
$LN6@RayQuery@2:

; 246  : 		break;
; 247  : 		}
; 248  : 		if (res){

	test	al, al
	je	SHORT $LN10@RayQuery@2
$LN80@RayQuery@2:

; 249  : 			bHIT		= TRUE;
; 250  : 			R.append_result				(owner,range,I->elem_id,Q.flags&CDB::OPT_ONLYNEAREST);

	mov	edx, DWORD PTR [ebx+28]
	fld	DWORD PTR _range$128928[esp+40]
	mov	eax, DWORD PTR _this$[esp+40]
	movzx	ebx, WORD PTR tv678[esp+40]
	and	edx, 4
	push	edx
	push	ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _R$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	mov	DWORD PTR _bHIT$[esp+52], 1
	call	?append_result@rq_results@collide@@QAEHPAVCObject@@MHH@Z ; collide::rq_results::append_result

; 251  : 			if (Q.flags&CDB::OPT_ONLYFIRST) break;

	mov	edx, DWORD PTR _Q$[ebp]
	test	BYTE PTR [edx+28], 2
	jne	SHORT $LN77@RayQuery@2
	mov	ebx, edx
$LN86@RayQuery@2:

; 244  : 		case SBoneShape::stCylinder: 
; 245  : 			res			= RAYvsCYLINDER	(I->c_cylinder,Q.start,Q.dir,range,Q.flags&CDB::OPT_CULL);

	mov	esi, DWORD PTR _I$128922[esp+40]
$LN10@RayQuery@2:

; 228  : 		}
; 229  : 	}
; 230  : 
; 231  : 	BOOL bHIT			= FALSE;
; 232  : 	for (ElementVecIt I=elements.begin(); I!=elements.end(); I++){

	mov	eax, DWORD PTR _this$[esp+40]
	add	esi, 80					; 00000050H
	cmp	esi, DWORD PTR [eax+68]
	mov	DWORD PTR _I$128922[esp+40], esi
	jne	$LN11@RayQuery@2
$LN77@RayQuery@2:

; 252  : 		}
; 253  : 	}
; 254  : 	return bHIT;

	mov	eax, DWORD PTR _bHIT$[esp+40]

; 255  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?_RayQuery@CCF_Skeleton@@UAEHABUray_defs@collide@@AAVrq_results@3@@Z ENDP ; CCF_Skeleton::_RayQuery
END
