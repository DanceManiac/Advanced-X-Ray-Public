; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	D:\CLEARSKY\sources\engine\xrEngine\CustomHUD.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?Add@?$CRegistrator@VpureScreenResolutionChanged@@@@QAEXPAVpureScreenResolutionChanged@@HI@Z ; CRegistrator<pureScreenResolutionChanged>::Add
PUBLIC	?_REG_Compare@?$CRegistrator@VpureScreenResolutionChanged@@@@CAHPBX0@Z ; CRegistrator<pureScreenResolutionChanged>::_REG_Compare
PUBLIC	?Resort@?$CRegistrator@VpureScreenResolutionChanged@@@@QAEXXZ ; CRegistrator<pureScreenResolutionChanged>::Resort
PUBLIC	?Remove@?$CRegistrator@VpureScreenResolutionChanged@@@@QAEXPAVpureScreenResolutionChanged@@@Z ; CRegistrator<pureScreenResolutionChanged>::Remove
PUBLIC	?psHUD_Flags@@3U?$_flags@I@@A			; psHUD_Flags
PUBLIC	?g_hud@@3PAVCCustomHUD@@A			; g_hud
?g_hud@@3PAVCCustomHUD@@A DD 01H DUP (?)		; g_hud
?psHUD_Flags@@3U?$_flags@I@@A DD 01ee0H			; psHUD_Flags
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\pure.h
;	COMDAT ?_REG_Compare@?$CRegistrator@VpureScreenResolutionChanged@@@@CAHPBX0@Z
_TEXT	SEGMENT
_e1$ = 8						; size = 4
_e2$ = 12						; size = 4
?_REG_Compare@?$CRegistrator@VpureScreenResolutionChanged@@@@CAHPBX0@Z PROC ; CRegistrator<pureScreenResolutionChanged>::_REG_Compare, COMDAT

; 42   : 	_REG_INFO *p1 = (_REG_INFO *)e1;
; 43   : 	_REG_INFO *p2 = (_REG_INFO *)e2;
; 44   : 	return (p2->Prio - p1->Prio);

	mov	eax, DWORD PTR _e2$[esp-4]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _e1$[esp-4]
	sub	eax, DWORD PTR [ecx+4]

; 45   : }

	ret	0
?_REG_Compare@?$CRegistrator@VpureScreenResolutionChanged@@@@CAHPBX0@Z ENDP ; CRegistrator<pureScreenResolutionChanged>::_REG_Compare
; Function compile flags: /Ogtpy
;	COMDAT ?Resort@?$CRegistrator@VpureScreenResolutionChanged@@@@QAEXXZ
_TEXT	SEGMENT
?Resort@?$CRegistrator@VpureScreenResolutionChanged@@@@QAEXXZ PROC ; CRegistrator<pureScreenResolutionChanged>::Resort, COMDAT
; _this$ = esi

; 96   : 		qsort	(&*R.begin(),R.size(),sizeof(_REG_INFO),_REG_Compare);

	push	OFFSET ?_REG_Compare@?$CRegistrator@VpureScreenResolutionChanged@@@@CAHPBX0@Z ; CRegistrator<pureScreenResolutionChanged>::_REG_Compare
	push	12					; 0000000cH
	mov	ecx, esi
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	push	eax
	mov	ecx, esi
	call	?begin@?$vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@stlp_std@@QAEPAU_REG_INFO@@XZ ; stlp_std::vector<_REG_INFO,xalloc<_REG_INFO> >::begin
	push	eax
	call	DWORD PTR __imp__qsort
	add	esp, 16					; 00000010H

; 97   : 		while	((R.size()) && (R[R.size()-1].Prio==REG_PRIORITY_INVALID)) R.pop_back();

	mov	ecx, esi
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	test	eax, eax
	je	SHORT $LN2@Resort@3
	npad	5
$LL3@Resort@3:
	mov	ecx, esi
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	sub	eax, 1
	push	eax
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	cmp	DWORD PTR [eax+4], -1
	jne	SHORT $LN2@Resort@3
	mov	ecx, esi
	call	?pop_back@?$vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@stlp_std@@QAEXXZ ; stlp_std::vector<_REG_INFO,xalloc<_REG_INFO> >::pop_back
	mov	ecx, esi
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	test	eax, eax
	jne	SHORT $LL3@Resort@3
$LN2@Resort@3:

; 98   : 		if (R.empty())		R.clear		();

	mov	ecx, esi
	call	?empty@?$vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@stlp_std@@QBE_NXZ ; stlp_std::vector<_REG_INFO,xalloc<_REG_INFO> >::empty
	test	al, al
	je	SHORT $LN78@Resort@3
	mov	ecx, esi
	call	?clear@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEXXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::clear
$LN78@Resort@3:

; 99   : 		changed				= false;

	and	DWORD PTR [esi+12], -3			; fffffffdH

; 100  : 	};

	ret	0
?Resort@?$CRegistrator@VpureScreenResolutionChanged@@@@QAEXXZ ENDP ; CRegistrator<pureScreenResolutionChanged>::Resort
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Remove@?$CRegistrator@VpureScreenResolutionChanged@@@@QAEXPAVpureScreenResolutionChanged@@@Z
_TEXT	SEGMENT
?Remove@?$CRegistrator@VpureScreenResolutionChanged@@@@QAEXPAVpureScreenResolutionChanged@@@Z PROC ; CRegistrator<pureScreenResolutionChanged>::Remove, COMDAT
; _this$ = eax
; _obj$ = ebx

; 73   : 	{

	push	esi
	mov	esi, eax
	push	edi

; 74   : 		for (u32 i=0; i<R.size(); i++) {

	mov	ecx, esi
	xor	edi, edi
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	test	eax, eax
	jbe	SHORT $LN4@Remove
$LL6@Remove:

; 75   : 			if (R[i].Object==obj) R[i].Prio = REG_PRIORITY_INVALID;

	push	edi
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	cmp	DWORD PTR [eax], ebx
	jne	SHORT $LN5@Remove
	push	edi
	mov	ecx, esi
	call	??A?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QAEAAU_REG_INFO@@I@Z ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::operator[]
	mov	DWORD PTR [eax+4], -1
$LN5@Remove:
	mov	ecx, esi
	add	edi, 1
	call	?size@?$xr_vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@@QBEIXZ ; xr_vector<_REG_INFO,xalloc<_REG_INFO> >::size
	cmp	edi, eax
	jb	SHORT $LL6@Remove
$LN4@Remove:

; 76   : 		}
; 77   : 		if(in_process)		changed=true;

	mov	eax, DWORD PTR [esi+12]
	test	al, 1
	je	SHORT $LN2@Remove
	or	eax, 2
	pop	edi
	mov	DWORD PTR [esi+12], eax
	pop	esi

; 79   : 	};

	ret	0
$LN2@Remove:

; 78   : 		else Resort			( );

	call	?Resort@?$CRegistrator@VpureScreenResolutionChanged@@@@QAEXXZ ; CRegistrator<pureScreenResolutionChanged>::Resort
	pop	edi
	pop	esi

; 79   : 	};

	ret	0
?Remove@?$CRegistrator@VpureScreenResolutionChanged@@@@QAEXPAVpureScreenResolutionChanged@@@Z ENDP ; CRegistrator<pureScreenResolutionChanged>::Remove
_TEXT	ENDS
PUBLIC	??1CCustomHUD@@UAE@XZ				; CCustomHUD::~CCustomHUD
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\customhud.cpp
;	COMDAT ??1CCustomHUD@@UAE@XZ
_TEXT	SEGMENT
??1CCustomHUD@@UAE@XZ PROC				; CCustomHUD::~CCustomHUD, COMDAT
; _this$ = ecx

; 15   : {

	push	ebx
	push	esi
	mov	esi, ecx
	lea	ebx, DWORD PTR [esi+20]
	mov	DWORD PTR [esi], OFFSET ??_7CCustomHUD@@6BDLL_Pure@@@
	mov	DWORD PTR [esi+16], OFFSET ??_7CCustomHUD@@6BIEventReceiver@@@
	mov	DWORD PTR [ebx], OFFSET ??_7CCustomHUD@@6BpureScreenResolutionChanged@@@

; 16   : 	g_hud = NULL;
; 17   : 	Device.seqResolutionChanged.Remove(this);

	mov	eax, OFFSET ?Device@@3VCRenderDevice@@A+744
	mov	DWORD PTR ?g_hud@@3PAVCCustomHUD@@A, 0	; g_hud
	call	?Remove@?$CRegistrator@VpureScreenResolutionChanged@@@@QAEXPAVpureScreenResolutionChanged@@@Z ; CRegistrator<pureScreenResolutionChanged>::Remove

; 18   : }

	mov	DWORD PTR [esi], OFFSET ??_7DLL_Pure@@6B@
	pop	esi
	pop	ebx
	ret	0
??1CCustomHUD@@UAE@XZ ENDP				; CCustomHUD::~CCustomHUD
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\pure.h
;	COMDAT ?Add@?$CRegistrator@VpureScreenResolutionChanged@@@@QAEXPAVpureScreenResolutionChanged@@HI@Z
_TEXT	SEGMENT
_I$ = -12						; size = 12
?Add@?$CRegistrator@VpureScreenResolutionChanged@@@@QAEXPAVpureScreenResolutionChanged@@HI@Z PROC ; CRegistrator<pureScreenResolutionChanged>::Add, COMDAT
; _this$ = ecx
; _obj$ = eax

; 57   : 	{

	sub	esp, 12					; 0000000cH
	push	esi
	mov	esi, ecx

; 58   : #ifdef DEBUG
; 59   : 		VERIFY	(priority!=REG_PRIORITY_INVALID);
; 60   : 		VERIFY	(obj);
; 61   : 		for		(u32 i=0; i<R.size(); i++) VERIFY( !((R[i].Prio!=REG_PRIORITY_INVALID)&&(R[i].Object==(void*)obj))   );
; 62   : #endif
; 63   : 		_REG_INFO			I;
; 64   : 		I.Object			=obj;
; 65   : 		I.Prio				=priority;
; 66   : 		I.Flags				=flags;
; 67   : 		R.push_back			(I);

	lea	ecx, DWORD PTR _I$[esp+16]
	push	ecx
	mov	ecx, esi
	mov	DWORD PTR _I$[esp+20], eax
	mov	DWORD PTR _I$[esp+24], 572662306	; 22222222H
	mov	DWORD PTR _I$[esp+28], 0
	call	?push_back@?$vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@stlp_std@@QAEXABU_REG_INFO@@@Z ; stlp_std::vector<_REG_INFO,xalloc<_REG_INFO> >::push_back

; 68   : 		
; 69   : 		if(in_process)		changed=true;

	mov	eax, DWORD PTR [esi+12]
	test	al, 1
	je	SHORT $LN2@Add@2
	or	eax, 2
	mov	DWORD PTR [esi+12], eax
	pop	esi

; 71   : 	};

	add	esp, 12					; 0000000cH
	ret	0
$LN2@Add@2:

; 70   : 		else Resort			( );

	call	?Resort@?$CRegistrator@VpureScreenResolutionChanged@@@@QAEXXZ ; CRegistrator<pureScreenResolutionChanged>::Resort
	pop	esi

; 71   : 	};

	add	esp, 12					; 0000000cH
	ret	0
?Add@?$CRegistrator@VpureScreenResolutionChanged@@@@QAEXPAVpureScreenResolutionChanged@@HI@Z ENDP ; CRegistrator<pureScreenResolutionChanged>::Add
_TEXT	ENDS
PUBLIC	??0CCustomHUD@@QAE@XZ				; CCustomHUD::CCustomHUD
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\customhud.cpp
;	COMDAT ??0CCustomHUD@@QAE@XZ
_TEXT	SEGMENT
_I$459606 = -12						; size = 12
??0CCustomHUD@@QAE@XZ PROC				; CCustomHUD::CCustomHUD, COMDAT
; _this$ = ecx

; 9    : {

	sub	esp, 12					; 0000000cH
	push	edi
	mov	edi, ecx
	xor	ecx, ecx
	mov	DWORD PTR [edi+8], ecx
	mov	DWORD PTR [edi+12], ecx
	mov	DWORD PTR [edi+16], OFFSET ??_7IEventReceiver@@6B@
	lea	eax, DWORD PTR [edi+20]
	mov	DWORD PTR [eax], OFFSET ??_7pureScreenResolutionChanged@@6B@
	mov	DWORD PTR [eax], OFFSET ??_7CCustomHUD@@6BpureScreenResolutionChanged@@@

; 10   : 	g_hud = this;
; 11   : 	Device.seqResolutionChanged.Add(this);

	mov	DWORD PTR _I$459606[esp+16], eax
	lea	eax, DWORD PTR _I$459606[esp+16]
	mov	DWORD PTR _I$459606[esp+24], ecx
	mov	DWORD PTR [edi], OFFSET ??_7CCustomHUD@@6BDLL_Pure@@@
	mov	DWORD PTR [edi+16], OFFSET ??_7CCustomHUD@@6BIEventReceiver@@@
	push	eax
	mov	ecx, OFFSET ?Device@@3VCRenderDevice@@A+744
	mov	DWORD PTR ?g_hud@@3PAVCCustomHUD@@A, edi ; g_hud
	mov	DWORD PTR _I$459606[esp+24], 572662306	; 22222222H
	call	?push_back@?$vector@U_REG_INFO@@V?$xalloc@U_REG_INFO@@@@@stlp_std@@QAEXABU_REG_INFO@@@Z ; stlp_std::vector<_REG_INFO,xalloc<_REG_INFO> >::push_back
	test	BYTE PTR ?Device@@3VCRenderDevice@@A+756, 1
	je	SHORT $LN12@CCustomHUD
	or	DWORD PTR ?Device@@3VCRenderDevice@@A+756, 2

; 12   : }

	mov	eax, edi
	pop	edi
	add	esp, 12					; 0000000cH
	ret	0

; 10   : 	g_hud = this;
; 11   : 	Device.seqResolutionChanged.Add(this);

$LN12@CCustomHUD:
	push	esi
	mov	esi, OFFSET ?Device@@3VCRenderDevice@@A+744
	call	?Resort@?$CRegistrator@VpureScreenResolutionChanged@@@@QAEXXZ ; CRegistrator<pureScreenResolutionChanged>::Resort
	pop	esi

; 12   : }

	mov	eax, edi
	pop	edi
	add	esp, 12					; 0000000cH
	ret	0
??0CCustomHUD@@QAE@XZ ENDP				; CCustomHUD::CCustomHUD
END
