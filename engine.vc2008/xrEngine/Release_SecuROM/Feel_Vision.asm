; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	D:\CLEARSKY\sources\engine\xrEngine\Feel_Vision.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_EVision@Feel@@UAEPAXI@Z			; Feel::Vision::`vector deleting destructor'
PUBLIC	??_R4Vision@Feel@@6B@				; Feel::Vision::`RTTI Complete Object Locator'
PUBLIC	??_R3Vision@Feel@@8				; Feel::Vision::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Vision@Feel@@8				; Feel::Vision::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Vision@Feel@@8			; Feel::Vision::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVVision@Feel@@@8				; Feel::Vision `RTTI Type Descriptor'
PUBLIC	??0?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@QAE@XZ ; xalloc<Feel::Vision::feel_visible_Item>::xalloc<Feel::Vision::feel_visible_Item>
PUBLIC	??0?$_Vector_base@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@Z ; stlp_std::priv::_Vector_base<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_Vector_base<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >
PUBLIC	??0?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@Z ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >
PUBLIC	??0?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAE@ABV?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@Z ; stlp_std::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >
PUBLIC	??0?$xr_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@@QAE@XZ ; xr_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::xr_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >
PUBLIC	??$implicit_cast@PAVVision@Feel@@PAV12@@detail@fastdelegate@@YAPAVVision@Feel@@PAV23@@Z ; fastdelegate::detail::implicit_cast<Feel::Vision *,Feel::Vision *>
PUBLIC	??$Convert@VVision@Feel@@P812@AGXPAVCObject@@@ZP8GenericClass@detail@fastdelegate@@AEXXZ@?$SimplifyMemFunc@$03@detail@fastdelegate@@SGPAVGenericClass@12@PAVVision@Feel@@P845@AGXPAVCObject@@@ZAAP8312@AEXXZ@Z ; fastdelegate::detail::SimplifyMemFunc<4>::Convert<Feel::Vision,void (__stdcall Feel::Vision::*)(CObject *),void (__thiscall fastdelegate::detail::GenericClass::*)(void)>
PUBLIC	??$bindmemfunc@VVision@Feel@@P812@AGXPAVCObject@@@Z@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AGXPAVCObject@@@ZP6GX0@ZP6GX0@Z@detail@fastdelegate@@QAEXPAVVision@Feel@@P834@AGXPAVCObject@@@Z@Z ; fastdelegate::detail::ClosurePtr<void (__stdcall fastdelegate::detail::GenericClass::*)(CObject *),void (__stdcall*)(CObject *),void (__stdcall*)(CObject *)>::bindmemfunc<Feel::Vision,void (__stdcall Feel::Vision::*)(CObject *)>
PUBLIC	??$?0VVision@Feel@@V01@@?$FastDelegate1@PAVCObject@@X@fastdelegate@@QAE@PAVVision@Feel@@P823@AGXPAVCObject@@@Z@Z ; fastdelegate::FastDelegate1<CObject *,void>::FastDelegate1<CObject *,void><Feel::Vision,Feel::Vision>
PUBLIC	??$?0VVision@Feel@@@pure_relcase@@QAE@P8Vision@Feel@@AGXPAVCObject@@@Z@Z ; pure_relcase::pure_relcase<Feel::Vision>
PUBLIC	??0feel_visible_Item@Vision@Feel@@QAE@XZ	; Feel::Vision::feel_visible_Item::feel_visible_Item
PUBLIC	?back@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEAAUfeel_visible_Item@Vision@Feel@@XZ ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::back
PUBLIC	?to_value_type_ref@?$_CastTraits@Ufeel_visible_Item@Vision@Feel@@U123@@priv@stlp_std@@SAAAUfeel_visible_Item@Vision@Feel@@AAU456@@Z ; stlp_std::priv::_CastTraits<Feel::Vision::feel_visible_Item,Feel::Vision::feel_visible_Item>::to_value_type_ref
PUBLIC	?back@?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAEAAUfeel_visible_Item@Vision@Feel@@XZ ; stlp_std::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::back
PUBLIC	?_M_set@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEXPAUfeel_visible_Item@Vision@Feel@@00@Z ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_M_set
PUBLIC	??$__fill_n@PAUfeel_visible_Item@Vision@Feel@@IU123@@priv@stlp_std@@YAPAUfeel_visible_Item@Vision@Feel@@PAU234@IABU234@@Z ; stlp_std::priv::__fill_n<Feel::Vision::feel_visible_Item *,unsigned int,Feel::Vision::feel_visible_Item>
PUBLIC	?_M_insert_overflow@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEXPAUfeel_visible_Item@Vision@Feel@@ABU456@ABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_M_insert_overflow
PUBLIC	??$_Copy_Construct@Ufeel_visible_Item@Vision@Feel@@@stlp_std@@YAXPAUfeel_visible_Item@Vision@Feel@@ABU123@@Z ; stlp_std::_Copy_Construct<Feel::Vision::feel_visible_Item>
PUBLIC	?push_back@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEXABUfeel_visible_Item@Vision@Feel@@@Z ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::push_back
PUBLIC	?to_storage_type_cref@?$_CastTraits@Ufeel_visible_Item@Vision@Feel@@U123@@priv@stlp_std@@SAABUfeel_visible_Item@Vision@Feel@@ABU456@@Z ; stlp_std::priv::_CastTraits<Feel::Vision::feel_visible_Item,Feel::Vision::feel_visible_Item>::to_storage_type_cref
PUBLIC	?push_back@?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAEXABUfeel_visible_Item@Vision@Feel@@@Z ; stlp_std::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::push_back
PUBLIC	?_M_erase@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEPAUfeel_visible_Item@Vision@Feel@@PAU456@0ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_M_erase
PUBLIC	?erase@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@PAU456@0@Z ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::erase
PUBLIC	?clear@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEXXZ ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::clear
PUBLIC	?clear@?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAEXXZ ; stlp_std::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::clear
PUBLIC	?clear_and_free@?$xr_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@@QAEXXZ ; xr_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::clear_and_free
PUBLIC	?clear@?$xr_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@@QAEXXZ ; xr_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::clear
PUBLIC	??$__copy_ptrs@PAUfeel_visible_Item@Vision@Feel@@PAU123@@priv@stlp_std@@YAPAUfeel_visible_Item@Vision@Feel@@PAU234@00ABU__true_type@1@@Z ; stlp_std::priv::__copy_ptrs<Feel::Vision::feel_visible_Item *,Feel::Vision::feel_visible_Item *>
PUBLIC	??$__destroy_aux@Ufeel_visible_Item@Vision@Feel@@@stlp_std@@YAXPAUfeel_visible_Item@Vision@Feel@@ABU__true_type@0@@Z ; stlp_std::__destroy_aux<Feel::Vision::feel_visible_Item>
PUBLIC	??$_Destroy@Ufeel_visible_Item@Vision@Feel@@@stlp_std@@YAXPAUfeel_visible_Item@Vision@Feel@@@Z ; stlp_std::_Destroy<Feel::Vision::feel_visible_Item>
PUBLIC	?_M_erase@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEPAUfeel_visible_Item@Vision@Feel@@PAU456@ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_M_erase
PUBLIC	?erase@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@PAU456@@Z ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::erase
PUBLIC	?to_storage_type_ptr@?$_CastTraits@Ufeel_visible_Item@Vision@Feel@@U123@@priv@stlp_std@@SAPAUfeel_visible_Item@Vision@Feel@@PAU456@@Z ; stlp_std::priv::_CastTraits<Feel::Vision::feel_visible_Item,Feel::Vision::feel_visible_Item>::to_storage_type_ptr
PUBLIC	?erase@?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@PAU345@@Z ; stlp_std::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::erase
PUBLIC	?capacity@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QBEIXZ ; stlp_std::vector<CObject *,xalloc<CObject *> >::capacity
PUBLIC	?clear_and_reserve@?$xr_vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@@QAEXXZ ; xr_vector<CObject *,xalloc<CObject *> >::clear_and_reserve
PUBLIC	?size@?$vector@PAVISpatial@@V?$xalloc@PAVISpatial@@@@@stlp_std@@QBEIXZ ; stlp_std::vector<ISpatial *,xalloc<ISpatial *> >::size
PUBLIC	?size@?$xr_vector@PAVISpatial@@V?$xalloc@PAVISpatial@@@@@@QBEIXZ ; xr_vector<ISpatial *,xalloc<ISpatial *> >::size
PUBLIC	??A?$xr_vector@PAVISpatial@@V?$xalloc@PAVISpatial@@@@@@QAEAAPAVISpatial@@I@Z ; xr_vector<ISpatial *,xalloc<ISpatial *> >::operator[]
PUBLIC	??$__make_heap@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@PAV1@H@stlp_std@@YAXPAPAVCObject@@0U?$less@PAVCObject@@@0@0PAH@Z ; stlp_std::__make_heap<CObject * *,stlp_std::less<CObject *>,CObject *,int>
PUBLIC	??$make_heap@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@0U?$less@PAVCObject@@@0@@Z ; stlp_std::make_heap<CObject * *,stlp_std::less<CObject *> >
PUBLIC	??$__push_heap@PAPAVCObject@@HPAV1@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@HHPAV1@U?$less@PAVCObject@@@0@@Z ; stlp_std::__push_heap<CObject * *,int,CObject *,stlp_std::less<CObject *> >
PUBLIC	??$__adjust_heap@PAPAVCObject@@HPAV1@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@HHPAV1@U?$less@PAVCObject@@@0@@Z ; stlp_std::__adjust_heap<CObject * *,int,CObject *,stlp_std::less<CObject *> >
PUBLIC	??$__pop_heap@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@H@stlp_std@@YAXPAPAVCObject@@00PAV1@U?$less@PAVCObject@@@0@PAH@Z ; stlp_std::__pop_heap<CObject * *,CObject *,stlp_std::less<CObject *>,int>
PUBLIC	??$__pop_heap_aux@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@00U?$less@PAVCObject@@@0@@Z ; stlp_std::__pop_heap_aux<CObject * *,CObject *,stlp_std::less<CObject *> >
PUBLIC	??$pop_heap@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@0U?$less@PAVCObject@@@0@@Z ; stlp_std::pop_heap<CObject * *,stlp_std::less<CObject *> >
PUBLIC	??$sort_heap@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@0U?$less@PAVCObject@@@0@@Z ; stlp_std::sort_heap<CObject * *,stlp_std::less<CObject *> >
PUBLIC	??$__partial_sort@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@000U?$less@PAVCObject@@@1@@Z ; stlp_std::priv::__partial_sort<CObject * *,CObject *,stlp_std::less<CObject *> >
PUBLIC	??$partial_sort@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@00U?$less@PAVCObject@@@0@@Z ; stlp_std::partial_sort<CObject * *,stlp_std::less<CObject *> >
PUBLIC	??$__median@PAVCObject@@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAABQAVCObject@@ABQAV2@00U?$less@PAVCObject@@@1@@Z ; stlp_std::priv::__median<CObject *,stlp_std::less<CObject *> >
PUBLIC	?_Ret@?$_IsRefType@AAPAVCObject@@@stlp_std@@SA?AU__true_type@2@XZ ; stlp_std::_IsRefType<CObject * &>::_Ret
PUBLIC	??$_IsOKToSwap@PAVCObject@@PAV1@U__true_type@stlp_std@@U23@@stlp_std@@YA?AU?$_OKToSwap@PAVCObject@@PAV1@U__true_type@stlp_std@@U23@@0@PAPAVCObject@@0ABU__true_type@0@1@Z ; stlp_std::_IsOKToSwap<CObject *,CObject *,stlp_std::__true_type,stlp_std::__true_type>
PUBLIC	?_Answer@?$_OKToSwap@PAVCObject@@PAV1@U__true_type@stlp_std@@U23@@stlp_std@@SA?AU__true_type@2@XZ ; stlp_std::_OKToSwap<CObject *,CObject *,stlp_std::__true_type,stlp_std::__true_type>::_Answer
PUBLIC	??$swap@PAVCObject@@@stlp_std@@YAXAAPAVCObject@@0@Z ; stlp_std::swap<CObject *>
PUBLIC	??$__iter_swap_aux@PAPAVCObject@@PAPAV1@@priv@stlp_std@@YAXAAPAPAVCObject@@0ABU__true_type@1@@Z ; stlp_std::priv::__iter_swap_aux<CObject * *,CObject * *>
PUBLIC	??$iter_swap@PAPAVCObject@@PAPAV1@@stlp_std@@YAXPAPAVCObject@@0@Z ; stlp_std::iter_swap<CObject * *,CObject * *>
PUBLIC	??$__unguarded_partition@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@0PAV2@U?$less@PAVCObject@@@1@@Z ; stlp_std::priv::__unguarded_partition<CObject * *,CObject *,stlp_std::less<CObject *> >
PUBLIC	??$__introsort_loop@PAPAVCObject@@PAV1@HU?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@00HU?$less@PAVCObject@@@1@@Z ; stlp_std::priv::__introsort_loop<CObject * *,CObject *,int,stlp_std::less<CObject *> >
PUBLIC	??$__copy_backward_ptrs@PAPAVCObject@@PAPAV1@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@00ABU__true_type@1@@Z ; stlp_std::priv::__copy_backward_ptrs<CObject * *,CObject * *>
PUBLIC	??$__copy_backward_aux@PAPAVCObject@@PAPAV1@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@00ABU__true_type@1@@Z ; stlp_std::priv::__copy_backward_aux<CObject * *,CObject * *>
PUBLIC	??$copy_backward@PAPAVCObject@@PAPAV1@@stlp_std@@YAPAPAVCObject@@PAPAV1@00@Z ; stlp_std::copy_backward<CObject * *,CObject * *>
PUBLIC	??$__linear_insert@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@0PAV2@U?$less@PAVCObject@@@1@@Z ; stlp_std::priv::__linear_insert<CObject * *,CObject *,stlp_std::less<CObject *> >
PUBLIC	??$__insertion_sort@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@00U?$less@PAVCObject@@@1@@Z ; stlp_std::priv::__insertion_sort<CObject * *,CObject *,stlp_std::less<CObject *> >
PUBLIC	??$__unguarded_linear_insert@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@PAV2@U?$less@PAVCObject@@@1@@Z ; stlp_std::priv::__unguarded_linear_insert<CObject * *,CObject *,stlp_std::less<CObject *> >
PUBLIC	??$__unguarded_insertion_sort_aux@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@00U?$less@PAVCObject@@@1@@Z ; stlp_std::priv::__unguarded_insertion_sort_aux<CObject * *,CObject *,stlp_std::less<CObject *> >
PUBLIC	??$__unguarded_insertion_sort@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@0U?$less@PAVCObject@@@1@@Z ; stlp_std::priv::__unguarded_insertion_sort<CObject * *,stlp_std::less<CObject *> >
PUBLIC	??$__final_insertion_sort@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@0U?$less@PAVCObject@@@1@@Z ; stlp_std::priv::__final_insertion_sort<CObject * *,stlp_std::less<CObject *> >
PUBLIC	??$sort@PAPAVCObject@@@stlp_std@@YAXPAPAVCObject@@0@Z ; stlp_std::sort<CObject * *>
PUBLIC	??$adjacent_find@PAPAVCObject@@U?$equal_to@PAVCObject@@@stlp_std@@@stlp_std@@YAPAPAVCObject@@PAPAV1@0U?$equal_to@PAVCObject@@@0@@Z ; stlp_std::adjacent_find<CObject * *,stlp_std::equal_to<CObject *> >
PUBLIC	??$adjacent_find@PAPAVCObject@@@stlp_std@@YAPAPAVCObject@@PAPAV1@0@Z ; stlp_std::adjacent_find<CObject * *>
PUBLIC	??$__equal_to@PAVCObject@@@priv@stlp_std@@YA?AU?$equal_to@PAVCObject@@@1@PAPAVCObject@@@Z ; stlp_std::priv::__equal_to<CObject *>
PUBLIC	??R?$equal_to@PAVCObject@@@stlp_std@@QBE_NABQAVCObject@@0@Z ; stlp_std::equal_to<CObject *>::operator()
PUBLIC	??$__unique_copy@PAPAVCObject@@PAPAV1@U?$equal_to@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@00U?$equal_to@PAVCObject@@@1@ABUforward_iterator_tag@1@@Z ; stlp_std::priv::__unique_copy<CObject * *,CObject * *,stlp_std::equal_to<CObject *> >
PUBLIC	??$unique_copy@PAPAVCObject@@PAPAV1@@stlp_std@@YAPAPAVCObject@@PAPAV1@00@Z ; stlp_std::unique_copy<CObject * *,CObject * *>
PUBLIC	??$unique@PAPAVCObject@@@stlp_std@@YAPAPAVCObject@@PAPAV1@0@Z ; stlp_std::unique<CObject * *>
PUBLIC	?resize@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEXIABQAVCObject@@@Z ; stlp_std::vector<CObject *,xalloc<CObject *> >::resize
PUBLIC	??$remove_copy@PAPAVCObject@@PAPAV1@PAV1@@stlp_std@@YAPAPAVCObject@@PAPAV1@00ABQAV1@@Z ; stlp_std::remove_copy<CObject * *,CObject * *,CObject *>
PUBLIC	??$remove@PAPAVCObject@@PAV1@@stlp_std@@YAPAPAVCObject@@PAPAV1@0ABQAV1@@Z ; stlp_std::remove<CObject * *,CObject *>
PUBLIC	??$__less@PAVCObject@@@priv@stlp_std@@YA?AU?$less@PAVCObject@@@1@PAPAVCObject@@@Z ; stlp_std::priv::__less<CObject *>
PUBLIC	??R?$less@PAVCObject@@@stlp_std@@QBE_NABQAVCObject@@0@Z ; stlp_std::less<CObject *>::operator()
PUBLIC	??$__set_difference@PAPAVCObject@@PAPAV1@PAPAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@0000U?$less@PAVCObject@@@1@@Z ; stlp_std::priv::__set_difference<CObject * *,CObject * *,CObject * *,stlp_std::less<CObject *> >
PUBLIC	??$set_difference@PAPAVCObject@@PAPAV1@PAPAV1@@stlp_std@@YAPAPAVCObject@@PAPAV1@0000@Z ; stlp_std::set_difference<CObject * *,CObject * *,CObject * *>
PUBLIC	?div@?$_vector3@M@@QAEAAU1@M@Z			; _vector3<float>::div
PUBLIC	??0SFeelParam@Feel@@QAE@PAVVision@1@PAUfeel_visible_Item@21@M@Z ; Feel::SFeelParam::SFeelParam
PUBLIC	?feel_vision_callback@Feel@@YAHAAUrq_result@collide@@PAX@Z ; Feel::feel_vision_callback
PUBLIC	?begin@?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@XZ ; stlp_std::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::begin
PUBLIC	?to_value_type_ptr@?$_CastTraits@Ufeel_visible_Item@Vision@Feel@@U123@@priv@stlp_std@@SAPAUfeel_visible_Item@Vision@Feel@@PAU456@@Z ; stlp_std::priv::_CastTraits<Feel::Vision::feel_visible_Item,Feel::Vision::feel_visible_Item>::to_value_type_ptr
PUBLIC	?end@?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@XZ ; stlp_std::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::end
PUBLIC	??0?$vector@PAVISpatial@@V?$xalloc@PAVISpatial@@@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::vector<ISpatial *,xalloc<ISpatial *> >::vector<ISpatial *,xalloc<ISpatial *> >
PUBLIC	??0?$xr_vector@PAVISpatial@@V?$xalloc@PAVISpatial@@@@@@QAE@ABV0@@Z ; xr_vector<ISpatial *,xalloc<ISpatial *> >::xr_vector<ISpatial *,xalloc<ISpatial *> >
PUBLIC	??1?$xr_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@@QAE@XZ ; xr_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::~xr_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >
PUBLIC	??0?$_STLP_alloc_proxy@PAUfeel_visible_Item@Vision@Feel@@U123@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@PAUfeel_visible_Item@Vision@Feel@@@Z ; stlp_std::priv::_STLP_alloc_proxy<Feel::Vision::feel_visible_Item *,Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_STLP_alloc_proxy<Feel::Vision::feel_visible_Item *,Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >
PUBLIC	??0?$_Vector_base@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@IABV?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@Z ; stlp_std::priv::_Vector_base<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_Vector_base<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >
PUBLIC	??0?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@QAE@ABV0@@Z ; xalloc<Feel::Vision::feel_visible_Item>::xalloc<Feel::Vision::feel_visible_Item>
PUBLIC	?get_allocator@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QBE?AV?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@XZ ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::get_allocator
PUBLIC	?begin@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QBEPBUfeel_visible_Item@Vision@Feel@@XZ ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::begin
PUBLIC	?end@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QBEPBUfeel_visible_Item@Vision@Feel@@XZ ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::end
PUBLIC	??0?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >
PUBLIC	??0?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >
PUBLIC	??1?$_Vector_base@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@XZ ; stlp_std::priv::_Vector_base<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::~_Vector_base<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >
PUBLIC	??1?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@XZ ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::~_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >
PUBLIC	??1?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAE@XZ ; stlp_std::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::~vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >
PUBLIC	??0?$xr_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@@QAE@ABV0@@Z ; xr_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::xr_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >
PUBLIC	?size@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::size
PUBLIC	?capacity@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::capacity
PUBLIC	??$xr_free@Ufeel_visible_Item@Vision@Feel@@@@YAXAAPAUfeel_visible_Item@Vision@Feel@@@Z ; xr_free<Feel::Vision::feel_visible_Item>
PUBLIC	?deallocate@?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@QBEXPAUfeel_visible_Item@Vision@Feel@@I@Z ; xalloc<Feel::Vision::feel_visible_Item>::deallocate
PUBLIC	?end@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@XZ ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::end
PUBLIC	?rbegin@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@3@XZ ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::rbegin
PUBLIC	?begin@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@XZ ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::begin
PUBLIC	??0?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@stlp_std@@QAE@PAUfeel_visible_Item@Vision@Feel@@@Z ; stlp_std::reverse_iterator<Feel::Vision::feel_visible_Item *>::reverse_iterator<Feel::Vision::feel_visible_Item *>
PUBLIC	?rend@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@3@XZ ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::rend
PUBLIC	??0?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::reverse_iterator<Feel::Vision::feel_visible_Item *>::reverse_iterator<Feel::Vision::feel_visible_Item *>
PUBLIC	??$__destroy_range_aux@V?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@stlp_std@@Ufeel_visible_Item@Vision@Feel@@@stlp_std@@YAXV?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@0@0PAUfeel_visible_Item@Vision@Feel@@ABU__true_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<Feel::Vision::feel_visible_Item *>,Feel::Vision::feel_visible_Item>
PUBLIC	??$__destroy_range@V?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@stlp_std@@Ufeel_visible_Item@Vision@Feel@@@stlp_std@@YAXV?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@0@0PAUfeel_visible_Item@Vision@Feel@@@Z ; stlp_std::__destroy_range<stlp_std::reverse_iterator<Feel::Vision::feel_visible_Item *>,Feel::Vision::feel_visible_Item>
PUBLIC	??$_Destroy_Range@V?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@0@0@Z ; stlp_std::_Destroy_Range<stlp_std::reverse_iterator<Feel::Vision::feel_visible_Item *> >
PUBLIC	?_M_clear@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEXXZ ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_M_clear
PUBLIC	??$__destroy_range_aux@PAUfeel_visible_Item@Vision@Feel@@U123@@stlp_std@@YAXPAUfeel_visible_Item@Vision@Feel@@00ABU__true_type@0@@Z ; stlp_std::__destroy_range_aux<Feel::Vision::feel_visible_Item *,Feel::Vision::feel_visible_Item>
PUBLIC	??$__destroy_range@PAUfeel_visible_Item@Vision@Feel@@U123@@stlp_std@@YAXPAUfeel_visible_Item@Vision@Feel@@00@Z ; stlp_std::__destroy_range<Feel::Vision::feel_visible_Item *,Feel::Vision::feel_visible_Item>
PUBLIC	??$_Destroy_Range@PAUfeel_visible_Item@Vision@Feel@@@stlp_std@@YAXPAUfeel_visible_Item@Vision@Feel@@0@Z ; stlp_std::_Destroy_Range<Feel::Vision::feel_visible_Item *>
PUBLIC	??$xr_alloc@Ufeel_visible_Item@Vision@Feel@@@@YAPAUfeel_visible_Item@Vision@Feel@@I@Z ; xr_alloc<Feel::Vision::feel_visible_Item>
PUBLIC	?allocate@?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@QBEPAUfeel_visible_Item@Vision@Feel@@IPBX@Z ; xalloc<Feel::Vision::feel_visible_Item>::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@PAUfeel_visible_Item@Vision@Feel@@U123@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@I@Z ; stlp_std::priv::_STLP_alloc_proxy<Feel::Vision::feel_visible_Item *,Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@PAUfeel_visible_Item@Vision@Feel@@U123@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEPAUfeel_visible_Item@Vision@Feel@@IAAIABU__false_type@3@@Z ; stlp_std::priv::_STLP_alloc_proxy<Feel::Vision::feel_visible_Item *,Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@PAUfeel_visible_Item@Vision@Feel@@U123@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@IAAI@Z ; stlp_std::priv::_STLP_alloc_proxy<Feel::Vision::feel_visible_Item *,Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::allocate
PUBLIC	?_Answer@?$_BothPtrType@PBUfeel_visible_Item@Vision@Feel@@PAU123@@stlp_std@@SA?AU__true_type@2@XZ ; stlp_std::_BothPtrType<Feel::Vision::feel_visible_Item const *,Feel::Vision::feel_visible_Item *>::_Answer
PUBLIC	??$__ucopy_ptrs@PBUfeel_visible_Item@Vision@Feel@@PAU123@@priv@stlp_std@@YAPAUfeel_visible_Item@Vision@Feel@@PBU234@0PAU234@ABU__true_type@1@@Z ; stlp_std::priv::__ucopy_ptrs<Feel::Vision::feel_visible_Item const *,Feel::Vision::feel_visible_Item *>
PUBLIC	??$_UseTrivialUCopy@Ufeel_visible_Item@Vision@Feel@@U123@@stlp_std@@YA?AU?$_TrivialUCopy@Ufeel_visible_Item@Vision@Feel@@U123@@0@PAUfeel_visible_Item@Vision@Feel@@0@Z ; stlp_std::_UseTrivialUCopy<Feel::Vision::feel_visible_Item,Feel::Vision::feel_visible_Item>
PUBLIC	?_Answer@?$_TrivialUCopy@Ufeel_visible_Item@Vision@Feel@@U123@@stlp_std@@SA?AU__true_type@2@XZ ; stlp_std::_TrivialUCopy<Feel::Vision::feel_visible_Item,Feel::Vision::feel_visible_Item>::_Answer
PUBLIC	??$__ucopy_aux@PBUfeel_visible_Item@Vision@Feel@@PAU123@@priv@stlp_std@@YAPAUfeel_visible_Item@Vision@Feel@@PBU234@0PAU234@ABU__true_type@1@@Z ; stlp_std::priv::__ucopy_aux<Feel::Vision::feel_visible_Item const *,Feel::Vision::feel_visible_Item *>
PUBLIC	??$uninitialized_copy@PBUfeel_visible_Item@Vision@Feel@@PAU123@@stlp_std@@YAPAUfeel_visible_Item@Vision@Feel@@PBU123@0PAU123@@Z ; stlp_std::uninitialized_copy<Feel::Vision::feel_visible_Item const *,Feel::Vision::feel_visible_Item *>
PUBLIC	??$_M_allocate_and_copy@PBUfeel_visible_Item@Vision@Feel@@@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEPAUfeel_visible_Item@Vision@Feel@@AAIPBU345@1@Z ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_M_allocate_and_copy<Feel::Vision::feel_visible_Item const *>
PUBLIC	??$__copy_ptrs@PBUfeel_visible_Item@Vision@Feel@@PAU123@@priv@stlp_std@@YAPAUfeel_visible_Item@Vision@Feel@@PBU234@0PAU234@ABU__true_type@1@@Z ; stlp_std::priv::__copy_ptrs<Feel::Vision::feel_visible_Item const *,Feel::Vision::feel_visible_Item *>
PUBLIC	??4?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::operator=
PUBLIC	??4?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAEAAV01@ABV01@@Z ; stlp_std::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::operator=
PUBLIC	??4?$xr_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@@QAEAAV0@ABV0@@Z ; xr_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::operator=
PUBLIC	?ignore_always@?3???$?0VVision@Feel@@@pure_relcase@@QAE@P8Vision@Feel@@AGXPAVCObject@@@Z@Z@4_NA ; `pure_relcase::pure_relcase<Feel::Vision>'::`4'::ignore_always
PUBLIC	??_7Vision@Feel@@6B@				; Feel::Vision::`vftable'
EXTRN	__imp_?CreateFromMatrix@CFrustum@@QAEXAAU?$_matrix@M@@I@Z:PROC
EXTRN	__imp_?q_frustum@ISpatial_DB@@QAEXAAV?$xr_vector@PAVISpatial@@V?$xalloc@PAVISpatial@@@@@@IIABVCFrustum@@@Z:PROC
EXTRN	__imp_?q_ray@ISpatial_DB@@QAEXAAV?$xr_vector@PAVISpatial@@V?$xalloc@PAVISpatial@@@@@@IIABU?$_vector3@M@@1M@Z:PROC
;	COMDAT ?ignore_always@?3???$?0VVision@Feel@@@pure_relcase@@QAE@P8Vision@Feel@@AGXPAVCObject@@@Z@Z@4_NA
_BSS	SEGMENT
?ignore_always@?3???$?0VVision@Feel@@@pure_relcase@@QAE@P8Vision@Feel@@AGXPAVCObject@@@Z@Z@4_NA DB 01H DUP (?) ; `pure_relcase::pure_relcase<Feel::Vision>'::`4'::ignore_always
;	COMDAT ??_7Vision@Feel@@6B@
CONST	SEGMENT
??_7Vision@Feel@@6B@ DD FLAT:??_R4Vision@Feel@@6B@	; Feel::Vision::`vftable'
	DD	FLAT:??_EVision@Feel@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_R4Vision@Feel@@6B@
rdata$r	SEGMENT
??_R4Vision@Feel@@6B@ DD 00H				; Feel::Vision::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVVision@Feel@@@8
	DD	FLAT:??_R3Vision@Feel@@8
rdata$r	ENDS
;	COMDAT ??_R3Vision@Feel@@8
rdata$r	SEGMENT
??_R3Vision@Feel@@8 DD 00H				; Feel::Vision::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Vision@Feel@@8
rdata$r	ENDS
;	COMDAT ??_R2Vision@Feel@@8
rdata$r	SEGMENT
??_R2Vision@Feel@@8 DD FLAT:??_R1A@?0A@EA@Vision@Feel@@8 ; Feel::Vision::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EN@pure_relcase@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Vision@Feel@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Vision@Feel@@8 DD FLAT:??_R0?AVVision@Feel@@@8 ; Feel::Vision::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Vision@Feel@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVision@Feel@@@8
_DATA	SEGMENT
??_R0?AVVision@Feel@@@8 DD FLAT:??_7type_info@@6B@	; Feel::Vision `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVision@Feel@@', 00H
_fuzzy_update_vis DD 0447a0000r			; 1000
_fuzzy_update_novis DD 0447a0000r		; 1000
_fuzzy_guaranteed DD 03a83126fr			; 0.001
_EPS_S	DD	033d6bf95r			; 1e-007
_EPS	DD	03727c5acr			; 1e-005
_EPS_L	DD	03a83126fr			; 0.001
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
;	COMDAT ??$swap@PAVCObject@@@stlp_std@@YAXAAPAVCObject@@0@Z
_TEXT	SEGMENT
??$swap@PAVCObject@@@stlp_std@@YAXAAPAVCObject@@0@Z PROC ; stlp_std::swap<CObject *>, COMDAT
; ___a$ = ecx
; ___b$ = eax

; 82   : #if defined (_STLP_USE_PARTIAL_SPEC_WORKAROUND) && !defined (_STLP_FUNCTION_TMPL_PARTIAL_ORDER)
; 83   : #  if !defined(__BORLANDC__)
; 84   :   typedef typename _SwapImplemented<_Tp>::_Ret _Implemented;
; 85   : #  else
; 86   :   enum { _Is = _SwapImplemented<_Tp>::_Is };
; 87   :   typedef typename __bool2type<_Is>::_Ret _Implemented;
; 88   : #  endif
; 89   :   _STLP_PRIV __swap_aux(__a, __b, _Implemented());
; 90   : #else
; 91   :   _Tp __tmp = __a;

	mov	edx, DWORD PTR [ecx]
	push	esi

; 92   :   __a = __b;

	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [ecx], esi

; 93   :   __b = __tmp;

	mov	DWORD PTR [eax], edx
	pop	esi

; 94   : #endif /* _STLP_USE_PARTIAL_SPEC_WORKAROUND */
; 95   : }

	ret	0
??$swap@PAVCObject@@@stlp_std@@YAXAAPAVCObject@@0@Z ENDP ; stlp_std::swap<CObject *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__iter_swap_aux@PAPAVCObject@@PAPAV1@@priv@stlp_std@@YAXAAPAPAVCObject@@0ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__iter_swap_aux@PAPAVCObject@@PAPAV1@@priv@stlp_std@@YAXAAPAPAVCObject@@0ABU__true_type@1@@Z PROC ; stlp_std::priv::__iter_swap_aux<CObject * *,CObject * *>, COMDAT
; ___i1$ = ecx
; ___i2$ = eax

; 108  :   swap(*__i1, *__i2);

	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	esi
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [eax], edx
	pop	esi

; 109  : }

	ret	0
??$__iter_swap_aux@PAPAVCObject@@PAPAV1@@priv@stlp_std@@YAXAAPAPAVCObject@@0ABU__true_type@1@@Z ENDP ; stlp_std::priv::__iter_swap_aux<CObject * *,CObject * *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\type_traits.h
_TEXT	ENDS
;	COMDAT ??$_IsOKToSwap@PAVCObject@@PAV1@U__true_type@stlp_std@@U23@@stlp_std@@YA?AU?$_OKToSwap@PAVCObject@@PAV1@U__true_type@stlp_std@@U23@@0@PAPAVCObject@@0ABU__true_type@0@1@Z
_TEXT	SEGMENT
??$_IsOKToSwap@PAVCObject@@PAV1@U__true_type@stlp_std@@U23@@stlp_std@@YA?AU?$_OKToSwap@PAVCObject@@PAV1@U__true_type@stlp_std@@U23@@0@PAPAVCObject@@0ABU__true_type@0@1@Z PROC ; stlp_std::_IsOKToSwap<CObject *,CObject *,stlp_std::__true_type,stlp_std::__true_type>, COMDAT

; 481  : { return _OKToSwap<_Tp1, _Tp2, _IsRef1, _IsRef2>(); }

	xor	al, al
	ret	0
??$_IsOKToSwap@PAVCObject@@PAV1@U__true_type@stlp_std@@U23@@stlp_std@@YA?AU?$_OKToSwap@PAVCObject@@PAV1@U__true_type@stlp_std@@U23@@0@PAPAVCObject@@0ABU__true_type@0@1@Z ENDP ; stlp_std::_IsOKToSwap<CObject *,CObject *,stlp_std::__true_type,stlp_std::__true_type>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_UseTrivialUCopy@Ufeel_visible_Item@Vision@Feel@@U123@@stlp_std@@YA?AU?$_TrivialUCopy@Ufeel_visible_Item@Vision@Feel@@U123@@0@PAUfeel_visible_Item@Vision@Feel@@0@Z
_TEXT	SEGMENT
??$_UseTrivialUCopy@Ufeel_visible_Item@Vision@Feel@@U123@@stlp_std@@YA?AU?$_TrivialUCopy@Ufeel_visible_Item@Vision@Feel@@U123@@0@PAUfeel_visible_Item@Vision@Feel@@0@Z PROC ; stlp_std::_UseTrivialUCopy<Feel::Vision::feel_visible_Item,Feel::Vision::feel_visible_Item>, COMDAT

; 489  : { return _TrivialUCopy<_Src, _Dst>(); }

	xor	al, al
	ret	0
??$_UseTrivialUCopy@Ufeel_visible_Item@Vision@Feel@@U123@@stlp_std@@YA?AU?$_TrivialUCopy@Ufeel_visible_Item@Vision@Feel@@U123@@0@PAUfeel_visible_Item@Vision@Feel@@0@Z ENDP ; stlp_std::_UseTrivialUCopy<Feel::Vision::feel_visible_Item,Feel::Vision::feel_visible_Item>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Answer@?$_OKToSwap@PAVCObject@@PAV1@U__true_type@stlp_std@@U23@@stlp_std@@SA?AU__true_type@2@XZ
_TEXT	SEGMENT
?_Answer@?$_OKToSwap@PAVCObject@@PAV1@U__true_type@stlp_std@@U23@@stlp_std@@SA?AU__true_type@2@XZ PROC ; stlp_std::_OKToSwap<CObject *,CObject *,stlp_std::__true_type,stlp_std::__true_type>::_Answer, COMDAT

; 475  :   static _Type _Answer() { return _Type(); }

	xor	al, al
	ret	0
?_Answer@?$_OKToSwap@PAVCObject@@PAV1@U__true_type@stlp_std@@U23@@stlp_std@@SA?AU__true_type@2@XZ ENDP ; stlp_std::_OKToSwap<CObject *,CObject *,stlp_std::__true_type,stlp_std::__true_type>::_Answer
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Ret@?$_IsRefType@AAPAVCObject@@@stlp_std@@SA?AU__true_type@2@XZ
_TEXT	SEGMENT
?_Ret@?$_IsRefType@AAPAVCObject@@@stlp_std@@SA?AU__true_type@2@XZ PROC ; stlp_std::_IsRefType<CObject * &>::_Ret, COMDAT

; 443  :   static _Type _Ret() { return _Type();}

	xor	al, al
	ret	0
?_Ret@?$_IsRefType@AAPAVCObject@@@stlp_std@@SA?AU__true_type@2@XZ ENDP ; stlp_std::_IsRefType<CObject * &>::_Ret
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Answer@?$_TrivialUCopy@Ufeel_visible_Item@Vision@Feel@@U123@@stlp_std@@SA?AU__true_type@2@XZ
_TEXT	SEGMENT
?_Answer@?$_TrivialUCopy@Ufeel_visible_Item@Vision@Feel@@U123@@stlp_std@@SA?AU__true_type@2@XZ PROC ; stlp_std::_TrivialUCopy<Feel::Vision::feel_visible_Item,Feel::Vision::feel_visible_Item>::_Answer, COMDAT

; 407  :   static _Ret _Answer() { return _Ret(); }

	xor	al, al
	ret	0
?_Answer@?$_TrivialUCopy@Ufeel_visible_Item@Vision@Feel@@U123@@stlp_std@@SA?AU__true_type@2@XZ ENDP ; stlp_std::_TrivialUCopy<Feel::Vision::feel_visible_Item,Feel::Vision::feel_visible_Item>::_Answer
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$iter_swap@PAPAVCObject@@PAPAV1@@stlp_std@@YAXPAPAVCObject@@0@Z
_TEXT	SEGMENT
??$iter_swap@PAPAVCObject@@PAPAV1@@stlp_std@@YAXPAPAVCObject@@0@Z PROC ; stlp_std::iter_swap<CObject * *,CObject * *>, COMDAT
; ___i1$ = ecx
; ___i2$ = eax

; 120  :   // swap(*__i1, *__i2);
; 121  :   _STLP_PRIV __iter_swap_aux( __i1, __i2, _IsOKToSwap(_STLP_VALUE_TYPE(__i1, _ForwardIter1), _STLP_VALUE_TYPE(__i2, _ForwardIter2),
; 122  :                                                       _STLP_IS_REF_TYPE_REAL_REF(__i1, _ForwardIter1),
; 123  :                                                       _STLP_IS_REF_TYPE_REAL_REF(__i2, _ForwardIter2))._Answer());

	mov	edx, DWORD PTR [ecx]
	push	esi
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [eax], edx
	pop	esi

; 124  : }

	ret	0
??$iter_swap@PAPAVCObject@@PAPAV1@@stlp_std@@YAXPAPAVCObject@@0@Z ENDP ; stlp_std::iter_swap<CObject * *,CObject * *>
_TEXT	ENDS
PUBLIC	?feel_vision_relcase@Vision@Feel@@QAGXPAVCObject@@@Z ; Feel::Vision::feel_vision_relcase
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\fastdelegate.h
;	COMDAT ??$Convert@VVision@Feel@@P812@AGXPAVCObject@@@ZP8GenericClass@detail@fastdelegate@@AEXXZ@?$SimplifyMemFunc@$03@detail@fastdelegate@@SGPAVGenericClass@12@PAVVision@Feel@@P845@AGXPAVCObject@@@ZAAP8312@AEXXZ@Z
_TEXT	SEGMENT
_pthis$ = 8						; size = 4
??$Convert@VVision@Feel@@P812@AGXPAVCObject@@@ZP8GenericClass@detail@fastdelegate@@AEXXZ@?$SimplifyMemFunc@$03@detail@fastdelegate@@SGPAVGenericClass@12@PAVVision@Feel@@P845@AGXPAVCObject@@@ZAAP8312@AEXXZ@Z PROC ; fastdelegate::detail::SimplifyMemFunc<4>::Convert<Feel::Vision,void (__stdcall Feel::Vision::*)(CObject *),void (__thiscall fastdelegate::detail::GenericClass::*)(void)>, COMDAT
; _bound_func$ = eax

; 310  : 			GenericMemFuncType &bound_func) {
; 311  : #if defined __DMC__  
; 312  : 		// Digital Mars doesn't allow you to cast between abitrary PMF's, 
; 313  : 		// even though the standard says you can. The 32-bit compiler lets you
; 314  : 		// static_cast through an int, but the DOS compiler doesn't.
; 315  : 		bound_func = horrible_cast<GenericMemFuncType>(function_to_bind);
; 316  : #else 
; 317  :         bound_func = reinterpret_cast<GenericMemFuncType>(function_to_bind);

	mov	DWORD PTR [eax], OFFSET ?feel_vision_relcase@Vision@Feel@@QAGXPAVCObject@@@Z ; Feel::Vision::feel_vision_relcase

; 318  : #endif
; 319  :         return reinterpret_cast<GenericClass *>(pthis);

	mov	eax, DWORD PTR _pthis$[esp-4]

; 320  : 	}

	ret	4
??$Convert@VVision@Feel@@P812@AGXPAVCObject@@@ZP8GenericClass@detail@fastdelegate@@AEXXZ@?$SimplifyMemFunc@$03@detail@fastdelegate@@SGPAVGenericClass@12@PAVVision@Feel@@P845@AGXPAVCObject@@@ZAAP8312@AEXXZ@Z ENDP ; fastdelegate::detail::SimplifyMemFunc<4>::Convert<Feel::Vision,void (__stdcall Feel::Vision::*)(CObject *),void (__thiscall fastdelegate::detail::GenericClass::*)(void)>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\type_traits.h
_TEXT	ENDS
;	COMDAT ?_Answer@?$_BothPtrType@PBUfeel_visible_Item@Vision@Feel@@PAU123@@stlp_std@@SA?AU__true_type@2@XZ
_TEXT	SEGMENT
?_Answer@?$_BothPtrType@PBUfeel_visible_Item@Vision@Feel@@PAU123@@stlp_std@@SA?AU__true_type@2@XZ PROC ; stlp_std::_BothPtrType<Feel::Vision::feel_visible_Item const *,Feel::Vision::feel_visible_Item *>::_Answer, COMDAT

; 468  :   static _Ret _Answer() { return _Ret(); }

	xor	al, al
	ret	0
?_Answer@?$_BothPtrType@PBUfeel_visible_Item@Vision@Feel@@PAU123@@stlp_std@@SA?AU__true_type@2@XZ ENDP ; stlp_std::_BothPtrType<Feel::Vision::feel_visible_Item const *,Feel::Vision::feel_visible_Item *>::_Answer
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_function_base.h
_TEXT	ENDS
;	COMDAT ??R?$equal_to@PAVCObject@@@stlp_std@@QBE_NABQAVCObject@@0@Z
_TEXT	SEGMENT
??R?$equal_to@PAVCObject@@@stlp_std@@QBE_NABQAVCObject@@0@Z PROC ; stlp_std::equal_to<CObject *>::operator(), COMDAT
; ___x$ = eax
; ___y$ = edx

; 54   :   bool operator()(const _Tp& __x, const _Tp& __y) const { return __x == __y; }

	mov	ecx, DWORD PTR [eax]
	xor	eax, eax
	cmp	ecx, DWORD PTR [edx]
	sete	al
	ret	0
??R?$equal_to@PAVCObject@@@stlp_std@@QBE_NABQAVCObject@@0@Z ENDP ; stlp_std::equal_to<CObject *>::operator()
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$__destroy_range_aux@PAUfeel_visible_Item@Vision@Feel@@U123@@stlp_std@@YAXPAUfeel_visible_Item@Vision@Feel@@00ABU__true_type@0@@Z
_TEXT	SEGMENT
??$__destroy_range_aux@PAUfeel_visible_Item@Vision@Feel@@U123@@stlp_std@@YAXPAUfeel_visible_Item@Vision@Feel@@00ABU__true_type@0@@Z PROC ; stlp_std::__destroy_range_aux<Feel::Vision::feel_visible_Item *,Feel::Vision::feel_visible_Item>, COMDAT

; 169  : __destroy_range_aux(_ForwardIterator, _ForwardIterator, _Tp*, const __true_type& /*_Trivial_destructor*/) {}

	ret	0
??$__destroy_range_aux@PAUfeel_visible_Item@Vision@Feel@@U123@@stlp_std@@YAXPAUfeel_visible_Item@Vision@Feel@@00ABU__true_type@0@@Z ENDP ; stlp_std::__destroy_range_aux<Feel::Vision::feel_visible_Item *,Feel::Vision::feel_visible_Item>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__destroy_range_aux@V?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@stlp_std@@Ufeel_visible_Item@Vision@Feel@@@stlp_std@@YAXV?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@0@0PAUfeel_visible_Item@Vision@Feel@@ABU__true_type@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$__destroy_range_aux@V?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@stlp_std@@Ufeel_visible_Item@Vision@Feel@@@stlp_std@@YAXV?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@0@0PAUfeel_visible_Item@Vision@Feel@@ABU__true_type@0@@Z PROC ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<Feel::Vision::feel_visible_Item *>,Feel::Vision::feel_visible_Item>, COMDAT

; 169  : __destroy_range_aux(_ForwardIterator, _ForwardIterator, _Tp*, const __true_type& /*_Trivial_destructor*/) {}

	ret	0
??$__destroy_range_aux@V?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@stlp_std@@Ufeel_visible_Item@Vision@Feel@@@stlp_std@@YAXV?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@0@0PAUfeel_visible_Item@Vision@Feel@@ABU__true_type@0@@Z ENDP ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<Feel::Vision::feel_visible_Item *>,Feel::Vision::feel_visible_Item>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.c
_TEXT	ENDS
;	COMDAT ??$__unique_copy@PAPAVCObject@@PAPAV1@U?$equal_to@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@00U?$equal_to@PAVCObject@@@1@ABUforward_iterator_tag@1@@Z
_TEXT	SEGMENT
___binary_pred$ = 8					; size = 1
??$__unique_copy@PAPAVCObject@@PAPAV1@U?$equal_to@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@00U?$equal_to@PAVCObject@@@1@ABUforward_iterator_tag@1@@Z PROC ; stlp_std::priv::__unique_copy<CObject * *,CObject * *,stlp_std::equal_to<CObject *> >, COMDAT
; ___first$ = eax
; ___last$ = esi
; ___result$ = ecx

; 319  :   *__result = *__first;

	mov	edx, DWORD PTR [eax]

; 320  :   while (++__first != __last)

	add	eax, 4
	cmp	eax, esi
	mov	DWORD PTR [ecx], edx
	je	SHORT $LN9@unique_cop@3
	npad	5
$LL3@unique_cop@3:

; 321  :     if (!__binary_pred(*__result, *__first)) *++__result = *__first;

	mov	edx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], edx
	je	SHORT $LN1@unique_cop@3
	add	ecx, 4
	mov	DWORD PTR [ecx], edx
$LN1@unique_cop@3:
	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL3@unique_cop@3
$LN9@unique_cop@3:

; 322  :   return ++__result;

	lea	eax, DWORD PTR [ecx+4]

; 323  : }

	ret	0
??$__unique_copy@PAPAVCObject@@PAPAV1@U?$equal_to@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@00U?$equal_to@PAVCObject@@@1@ABUforward_iterator_tag@1@@Z ENDP ; stlp_std::priv::__unique_copy<CObject * *,CObject * *,stlp_std::equal_to<CObject *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.h
_TEXT	ENDS
;	COMDAT ??$adjacent_find@PAPAVCObject@@U?$equal_to@PAVCObject@@@stlp_std@@@stlp_std@@YAPAPAVCObject@@PAPAV1@0U?$equal_to@PAVCObject@@@0@@Z
_TEXT	SEGMENT
___binary_pred$ = 8					; size = 1
??$adjacent_find@PAPAVCObject@@U?$equal_to@PAVCObject@@@stlp_std@@@stlp_std@@YAPAPAVCObject@@PAPAV1@0U?$equal_to@PAVCObject@@@0@@Z PROC ; stlp_std::adjacent_find<CObject * *,stlp_std::equal_to<CObject *> >, COMDAT
; ___first$ = edx
; ___last$ = eax

; 84   :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__first, __last))
; 85   :   if (__first == __last)

	cmp	edx, eax

; 86   :     return __last;

	je	SHORT $LN5@adjacent_f@3

; 87   :   _ForwardIter __next = __first;
; 88   :   while(++__next != __last) {

	lea	ecx, DWORD PTR [edx+4]
	cmp	ecx, eax
	push	esi
	je	SHORT $LN12@adjacent_f@3
	npad	4
$LL3@adjacent_f@3:

; 89   :     if (__binary_pred(*__first, *__next))

	mov	esi, DWORD PTR [edx]
	cmp	esi, DWORD PTR [ecx]
	je	SHORT $LN10@adjacent_f@3

; 91   :     __first = __next;

	mov	edx, ecx
	add	ecx, 4
	cmp	ecx, eax
	jne	SHORT $LL3@adjacent_f@3
	pop	esi

; 92   :   }
; 93   :   return __last;
; 94   : }

	ret	0
$LN10@adjacent_f@3:

; 90   :       return __first;

	mov	eax, edx
$LN12@adjacent_f@3:
	pop	esi
$LN5@adjacent_f@3:

; 92   :   }
; 93   :   return __last;
; 94   : }

	ret	0
??$adjacent_find@PAPAVCObject@@U?$equal_to@PAVCObject@@@stlp_std@@@stlp_std@@YAPAPAVCObject@@PAPAV1@0U?$equal_to@PAVCObject@@@0@@Z ENDP ; stlp_std::adjacent_find<CObject * *,stlp_std::equal_to<CObject *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_function_base.h
_TEXT	ENDS
;	COMDAT ??$__equal_to@PAVCObject@@@priv@stlp_std@@YA?AU?$equal_to@PAVCObject@@@1@PAPAVCObject@@@Z
_TEXT	SEGMENT
??$__equal_to@PAVCObject@@@priv@stlp_std@@YA?AU?$equal_to@PAVCObject@@@1@PAPAVCObject@@@Z PROC ; stlp_std::priv::__equal_to<CObject *>, COMDAT
; ___$ReturnUdt$ = eax

; 99   : equal_to<_Tp> __equal_to(_Tp* ) { return equal_to<_Tp>(); }

	ret	0
??$__equal_to@PAVCObject@@@priv@stlp_std@@YA?AU?$equal_to@PAVCObject@@@1@PAPAVCObject@@@Z ENDP ; stlp_std::priv::__equal_to<CObject *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\fastdelegate.h
_TEXT	ENDS
;	COMDAT ??$bindmemfunc@VVision@Feel@@P812@AGXPAVCObject@@@Z@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AGXPAVCObject@@@ZP6GX0@ZP6GX0@Z@detail@fastdelegate@@QAEXPAVVision@Feel@@P834@AGXPAVCObject@@@Z@Z
_TEXT	SEGMENT
??$bindmemfunc@VVision@Feel@@P812@AGXPAVCObject@@@Z@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AGXPAVCObject@@@ZP6GX0@ZP6GX0@Z@detail@fastdelegate@@QAEXPAVVision@Feel@@P834@AGXPAVCObject@@@Z@Z PROC ; fastdelegate::detail::ClosurePtr<void (__stdcall fastdelegate::detail::GenericClass::*)(CObject *),void (__stdcall*)(CObject *),void (__stdcall*)(CObject *)>::bindmemfunc<Feel::Vision,void (__stdcall Feel::Vision::*)(CObject *)>, COMDAT
; _this$ = eax
; _pthis$ = ecx

; 682  : 		m_pthis = SimplifyMemFunc< sizeof(function_to_bind) >
; 683  : 			::Convert(pthis, function_to_bind, m_pFunction);

	mov	DWORD PTR [eax+4], OFFSET ?feel_vision_relcase@Vision@Feel@@QAGXPAVCObject@@@Z ; Feel::Vision::feel_vision_relcase
	mov	DWORD PTR [eax], ecx

; 684  : #if !defined(FASTDELEGATE_USESTATICFUNCTIONHACK)
; 685  : 		m_pStaticFunction = 0;
; 686  : #endif
; 687  : 	}

	ret	0
??$bindmemfunc@VVision@Feel@@P812@AGXPAVCObject@@@Z@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AGXPAVCObject@@@ZP6GX0@ZP6GX0@Z@detail@fastdelegate@@QAEXPAVVision@Feel@@P834@AGXPAVCObject@@@Z@Z ENDP ; fastdelegate::detail::ClosurePtr<void (__stdcall fastdelegate::detail::GenericClass::*)(CObject *),void (__stdcall*)(CObject *),void (__stdcall*)(CObject *)>::bindmemfunc<Feel::Vision,void (__stdcall Feel::Vision::*)(CObject *)>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$implicit_cast@PAVVision@Feel@@PAV12@@detail@fastdelegate@@YAPAVVision@Feel@@PAV23@@Z
_TEXT	SEGMENT
??$implicit_cast@PAVVision@Feel@@PAV12@@detail@fastdelegate@@YAPAVVision@Feel@@PAV23@@Z PROC ; fastdelegate::detail::implicit_cast<Feel::Vision *,Feel::Vision *>, COMDAT
; _input$ = eax

; 157  : 	return input;
; 158  : }

	ret	0
??$implicit_cast@PAVVision@Feel@@PAV12@@detail@fastdelegate@@YAPAVVision@Feel@@PAV23@@Z ENDP ; fastdelegate::detail::implicit_cast<Feel::Vision *,Feel::Vision *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_function_base.h
_TEXT	ENDS
;	COMDAT ??R?$less@PAVCObject@@@stlp_std@@QBE_NABQAVCObject@@0@Z
_TEXT	SEGMENT
??R?$less@PAVCObject@@@stlp_std@@QBE_NABQAVCObject@@0@Z PROC ; stlp_std::less<CObject *>::operator(), COMDAT
; ___x$ = eax
; ___y$ = edx

; 67   :   bool operator()(const _Tp& __x, const _Tp& __y) const { return __x < __y; }

	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR [edx]
	sbb	eax, eax
	neg	eax
	ret	0
??R?$less@PAVCObject@@@stlp_std@@QBE_NABQAVCObject@@0@Z ENDP ; stlp_std::less<CObject *>::operator()
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$__destroy_range@PAUfeel_visible_Item@Vision@Feel@@U123@@stlp_std@@YAXPAUfeel_visible_Item@Vision@Feel@@00@Z
_TEXT	SEGMENT
??$__destroy_range@PAUfeel_visible_Item@Vision@Feel@@U123@@stlp_std@@YAXPAUfeel_visible_Item@Vision@Feel@@00@Z PROC ; stlp_std::__destroy_range<Feel::Vision::feel_visible_Item *,Feel::Vision::feel_visible_Item>, COMDAT

; 175  :   typedef typename __type_traits<_Tp>::has_trivial_destructor _Trivial_destructor;
; 176  :   __destroy_range_aux(__first, __last, __ptr, _Trivial_destructor());
; 177  : }

	ret	0
??$__destroy_range@PAUfeel_visible_Item@Vision@Feel@@U123@@stlp_std@@YAXPAUfeel_visible_Item@Vision@Feel@@00@Z ENDP ; stlp_std::__destroy_range<Feel::Vision::feel_visible_Item *,Feel::Vision::feel_visible_Item>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__destroy_aux@Ufeel_visible_Item@Vision@Feel@@@stlp_std@@YAXPAUfeel_visible_Item@Vision@Feel@@ABU__true_type@0@@Z
_TEXT	SEGMENT
??$__destroy_aux@Ufeel_visible_Item@Vision@Feel@@@stlp_std@@YAXPAUfeel_visible_Item@Vision@Feel@@ABU__true_type@0@@Z PROC ; stlp_std::__destroy_aux<Feel::Vision::feel_visible_Item>, COMDAT

; 56   : inline void __destroy_aux(_Tp*, const __true_type& /*_Trivial_destructor*/) {}

	ret	0
??$__destroy_aux@Ufeel_visible_Item@Vision@Feel@@@stlp_std@@YAXPAUfeel_visible_Item@Vision@Feel@@ABU__true_type@0@@Z ENDP ; stlp_std::__destroy_aux<Feel::Vision::feel_visible_Item>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.h
_TEXT	ENDS
;	COMDAT ??$remove_copy@PAPAVCObject@@PAPAV1@PAV1@@stlp_std@@YAPAPAVCObject@@PAPAV1@00ABQAV1@@Z
_TEXT	SEGMENT
??$remove_copy@PAPAVCObject@@PAPAV1@PAV1@@stlp_std@@YAPAPAVCObject@@PAPAV1@00ABQAV1@@Z PROC ; stlp_std::remove_copy<CObject * *,CObject * *,CObject *>, COMDAT
; ___first$ = ecx
; ___last$ = esi
; ___result$ = eax
; ___val$ = edi

; 241  :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__first, __last))
; 242  :   for ( ; __first != __last; ++__first) {

	cmp	ecx, esi
	je	SHORT $LN2@remove_cop
$LL4@remove_cop:

; 243  :     if (!(*__first == __val)) {

	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR [edi]
	je	SHORT $LN3@remove_cop

; 244  :       *__result = *__first;

	mov	DWORD PTR [eax], edx

; 245  :       ++__result;

	add	eax, 4
$LN3@remove_cop:
	add	ecx, 4
	cmp	ecx, esi
	jne	SHORT $LL4@remove_cop
$LN2@remove_cop:

; 246  :     }
; 247  :   }
; 248  :   return __result;
; 249  : }

	ret	0
??$remove_copy@PAPAVCObject@@PAPAV1@PAV1@@stlp_std@@YAPAPAVCObject@@PAPAV1@00ABQAV1@@Z ENDP ; stlp_std::remove_copy<CObject * *,CObject * *,CObject *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.c
_TEXT	ENDS
;	COMDAT ??$unique_copy@PAPAVCObject@@PAPAV1@@stlp_std@@YAPAPAVCObject@@PAPAV1@00@Z
_TEXT	SEGMENT
??$unique_copy@PAPAVCObject@@PAPAV1@@stlp_std@@YAPAPAVCObject@@PAPAV1@00@Z PROC ; stlp_std::unique_copy<CObject * *,CObject * *>, COMDAT
; ___first$ = edx
; ___last$ = esi
; ___result$ = eax

; 348  :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__first, __last))
; 349  :   if (__first == __last) return __result;

	cmp	edx, esi
	je	SHORT $LN2@unique_cop@4
	push	edi

; 350  :   return _STLP_PRIV __unique_copy(__first, __last, __result,
; 351  :                                   _STLP_PRIV __equal_to(_STLP_VALUE_TYPE(__first, _InputIter)),
; 352  :                                   _STLP_ITERATOR_CATEGORY(__result, _OutputIter));

	mov	edi, DWORD PTR [edx]
	mov	DWORD PTR [eax], edi
	mov	ecx, eax
	lea	eax, DWORD PTR [edx+4]
	cmp	eax, esi
	pop	edi
	je	SHORT $LN7@unique_cop@4
$LL8@unique_cop@4:
	mov	edx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], edx
	je	SHORT $LN6@unique_cop@4
	add	ecx, 4
	mov	DWORD PTR [ecx], edx
$LN6@unique_cop@4:
	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL8@unique_cop@4
$LN7@unique_cop@4:
	lea	eax, DWORD PTR [ecx+4]
$LN2@unique_cop@4:

; 353  : }

	ret	0
??$unique_copy@PAPAVCObject@@PAPAV1@@stlp_std@@YAPAPAVCObject@@PAPAV1@00@Z ENDP ; stlp_std::unique_copy<CObject * *,CObject * *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.h
_TEXT	ENDS
;	COMDAT ??$adjacent_find@PAPAVCObject@@@stlp_std@@YAPAPAVCObject@@PAPAV1@0@Z
_TEXT	SEGMENT
??$adjacent_find@PAPAVCObject@@@stlp_std@@YAPAPAVCObject@@PAPAV1@0@Z PROC ; stlp_std::adjacent_find<CObject * *>, COMDAT
; ___first$ = edx
; ___last$ = eax

; 99   :   return adjacent_find(__first, __last,
; 100  :                        _STLP_PRIV __equal_to(_STLP_VALUE_TYPE(__first, _ForwardIter)));

	cmp	edx, eax
	je	SHORT $LN9@adjacent_f@4
	lea	ecx, DWORD PTR [edx+4]
	cmp	ecx, eax
	push	esi
	je	SHORT $LN16@adjacent_f@4
	npad	4
$LL7@adjacent_f@4:
	mov	esi, DWORD PTR [edx]
	cmp	esi, DWORD PTR [ecx]
	je	SHORT $LN14@adjacent_f@4
	mov	edx, ecx
	add	ecx, 4
	cmp	ecx, eax
	jne	SHORT $LL7@adjacent_f@4
	pop	esi

; 101  : }

	ret	0
$LN14@adjacent_f@4:

; 99   :   return adjacent_find(__first, __last,
; 100  :                        _STLP_PRIV __equal_to(_STLP_VALUE_TYPE(__first, _ForwardIter)));

	mov	eax, edx
$LN16@adjacent_f@4:
	pop	esi
$LN9@adjacent_f@4:

; 101  : }

	ret	0
??$adjacent_find@PAPAVCObject@@@stlp_std@@YAPAPAVCObject@@PAPAV1@0@Z ENDP ; stlp_std::adjacent_find<CObject * *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_function_base.h
_TEXT	ENDS
;	COMDAT ??$__less@PAVCObject@@@priv@stlp_std@@YA?AU?$less@PAVCObject@@@1@PAPAVCObject@@@Z
_TEXT	SEGMENT
$T214729 = -1						; size = 1
??$__less@PAVCObject@@@priv@stlp_std@@YA?AU?$less@PAVCObject@@@1@PAPAVCObject@@@Z PROC ; stlp_std::priv::__less<CObject *>, COMDAT
; ___$ReturnUdt$ = eax

; 96   : less<_Tp> __less(_Tp* ) { return less<_Tp>(); }

	push	ecx
	mov	cl, BYTE PTR $T214729[esp+4]
	mov	BYTE PTR [eax], cl
	pop	ecx
	ret	0
??$__less@PAVCObject@@@priv@stlp_std@@YA?AU?$less@PAVCObject@@@1@PAPAVCObject@@@Z ENDP ; stlp_std::priv::__less<CObject *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__fill_n@PAUfeel_visible_Item@Vision@Feel@@IU123@@priv@stlp_std@@YAPAUfeel_visible_Item@Vision@Feel@@PAU234@IABU234@@Z
_TEXT	SEGMENT
??$__fill_n@PAUfeel_visible_Item@Vision@Feel@@IU123@@priv@stlp_std@@YAPAUfeel_visible_Item@Vision@Feel@@PAU234@IABU234@@Z PROC ; stlp_std::priv::__fill_n<Feel::Vision::feel_visible_Item *,unsigned int,Feel::Vision::feel_visible_Item>, COMDAT
; ___first$ = eax
; ___n$ = edx
; ___val$ = ebx

; 403  :   _STLP_FIX_LITERAL_BUG(__first)
; 404  :   for ( ; __n > 0; --__n, ++__first)

	test	edx, edx
	jbe	SHORT $LN1@fill_n@7
	push	esi
	push	edi
$LL3@fill_n@7:

; 405  :     *__first = __val;

	mov	edi, eax
	sub	edx, 1
	mov	ecx, 33					; 00000021H
	mov	esi, ebx
	add	eax, 132				; 00000084H
	test	edx, edx
	rep movsd
	ja	SHORT $LL3@fill_n@7
	pop	edi
	pop	esi
$LN1@fill_n@7:

; 406  :   return __first;
; 407  : }

	ret	0
??$__fill_n@PAUfeel_visible_Item@Vision@Feel@@IU123@@priv@stlp_std@@YAPAUfeel_visible_Item@Vision@Feel@@PAU234@IABU234@@Z ENDP ; stlp_std::priv::__fill_n<Feel::Vision::feel_visible_Item *,unsigned int,Feel::Vision::feel_visible_Item>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_iterator.h
_TEXT	ENDS
;	COMDAT ??0?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@stlp_std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@stlp_std@@QAE@ABV01@@Z PROC ; stlp_std::reverse_iterator<Feel::Vision::feel_visible_Item *>::reverse_iterator<Feel::Vision::feel_visible_Item *>, COMDAT
; _this$ = eax
; ___x$ = ecx

; 66   :   reverse_iterator(const _Self& __x) : current(__x.current) {}

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	ret	0
??0?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@stlp_std@@QAE@ABV01@@Z ENDP ; stlp_std::reverse_iterator<Feel::Vision::feel_visible_Item *>::reverse_iterator<Feel::Vision::feel_visible_Item *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?_M_set@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEXPAUfeel_visible_Item@Vision@Feel@@00@Z
_TEXT	SEGMENT
___e$ = 8						; size = 4
?_M_set@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEXPAUfeel_visible_Item@Vision@Feel@@00@Z PROC ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_M_set, COMDAT
; _this$ = eax
; ___s$ = ecx
; ___f$ = edx

; 626  :     this->_M_start = __s;

	mov	DWORD PTR [eax], ecx

; 627  :     this->_M_finish = __f;
; 628  :     this->_M_end_of_storage._M_data = __e;

	mov	ecx, DWORD PTR ___e$[esp-4]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx

; 629  :   }

	ret	4
?_M_set@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEXPAUfeel_visible_Item@Vision@Feel@@00@Z ENDP ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_M_set
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?capacity@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QBEIXZ PROC ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::capacity, COMDAT
; _this$ = eax

; 187  :   size_type capacity() const    { return size_type(this->_M_end_of_storage._M_data - this->_M_start); }

	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR [eax]
	mov	eax, 1041204193				; 3e0f83e1H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	ret	0
?capacity@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QBEIXZ ENDP ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::capacity
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrmemory.h
_TEXT	ENDS
;	COMDAT ??$xr_alloc@Ufeel_visible_Item@Vision@Feel@@@@YAPAUfeel_visible_Item@Vision@Feel@@I@Z
_TEXT	SEGMENT
??$xr_alloc@Ufeel_visible_Item@Vision@Feel@@@@YAPAUfeel_visible_Item@Vision@Feel@@I@Z PROC ; xr_alloc<Feel::Vision::feel_visible_Item>, COMDAT
; _count$ = eax

; 109  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	imul	eax, 132				; 00000084H
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
??$xr_alloc@Ufeel_visible_Item@Vision@Feel@@@@YAPAUfeel_visible_Item@Vision@Feel@@I@Z ENDP ; xr_alloc<Feel::Vision::feel_visible_Item>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$_Destroy_Range@PAUfeel_visible_Item@Vision@Feel@@@stlp_std@@YAXPAUfeel_visible_Item@Vision@Feel@@0@Z
_TEXT	SEGMENT
??$_Destroy_Range@PAUfeel_visible_Item@Vision@Feel@@@stlp_std@@YAXPAUfeel_visible_Item@Vision@Feel@@0@Z PROC ; stlp_std::_Destroy_Range<Feel::Vision::feel_visible_Item *>, COMDAT

; 181  :   __destroy_range(__first, __last, _STLP_VALUE_TYPE(__first, _ForwardIterator));
; 182  : }

	ret	0
??$_Destroy_Range@PAUfeel_visible_Item@Vision@Feel@@@stlp_std@@YAXPAUfeel_visible_Item@Vision@Feel@@0@Z ENDP ; stlp_std::_Destroy_Range<Feel::Vision::feel_visible_Item *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Destroy@Ufeel_visible_Item@Vision@Feel@@@stlp_std@@YAXPAUfeel_visible_Item@Vision@Feel@@@Z
_TEXT	SEGMENT
??$_Destroy@Ufeel_visible_Item@Vision@Feel@@@stlp_std@@YAXPAUfeel_visible_Item@Vision@Feel@@@Z PROC ; stlp_std::_Destroy<Feel::Vision::feel_visible_Item>, COMDAT

; 60   : #if defined (_STLP_MSVC) && (_STLP_MSVC <= 1010)
; 61   :   __pointer;
; 62   : #endif
; 63   :   typedef typename __type_traits<_Tp>::has_trivial_destructor _Trivial_destructor;
; 64   :   __destroy_aux(__pointer, _Trivial_destructor());
; 65   : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 66   :   memset(__REINTERPRET_CAST(char*, __pointer), _STLP_SHRED_BYTE, sizeof(_Tp));
; 67   : #endif
; 68   : }

	ret	0
??$_Destroy@Ufeel_visible_Item@Vision@Feel@@@stlp_std@@YAXPAUfeel_visible_Item@Vision@Feel@@@Z ENDP ; stlp_std::_Destroy<Feel::Vision::feel_visible_Item>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrmemory.h
_TEXT	ENDS
;	COMDAT ??$xr_free@Ufeel_visible_Item@Vision@Feel@@@@YAXAAPAUfeel_visible_Item@Vision@Feel@@@Z
_TEXT	SEGMENT
??$xr_free@Ufeel_visible_Item@Vision@Feel@@@@YAXAAPAUfeel_visible_Item@Vision@Feel@@@Z PROC ; xr_free<Feel::Vision::feel_visible_Item>, COMDAT
; _P$ = esi

; 111  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN1@xr_free@24
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi], 0
$LN1@xr_free@24:
	ret	0
??$xr_free@Ufeel_visible_Item@Vision@Feel@@@@YAXAAPAUfeel_visible_Item@Vision@Feel@@@Z ENDP ; xr_free<Feel::Vision::feel_visible_Item>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.h
_TEXT	ENDS
;	COMDAT ??$unique@PAPAVCObject@@@stlp_std@@YAPAPAVCObject@@PAPAV1@0@Z
_TEXT	SEGMENT
??$unique@PAPAVCObject@@@stlp_std@@YAPAPAVCObject@@PAPAV1@0@Z PROC ; stlp_std::unique<CObject * *>, COMDAT
; ___first$ = ecx
; ___last$ = edx

; 300  :   __first = adjacent_find(__first, __last);

	cmp	ecx, edx
	push	esi
	jne	SHORT $LN10@unique@2
$LN8@unique@2:
	mov	eax, edx
	pop	esi

; 302  : }

	ret	0

; 300  :   __first = adjacent_find(__first, __last);

$LN10@unique@2:
	lea	eax, DWORD PTR [ecx+4]
	cmp	eax, edx
	je	SHORT $LN8@unique@2
$LL9@unique@2:
	mov	esi, DWORD PTR [ecx]
	cmp	esi, DWORD PTR [eax]
	je	SHORT $LN29@unique@2
	mov	ecx, eax
	add	eax, 4
	cmp	eax, edx
	jne	SHORT $LL9@unique@2
	mov	eax, edx
	pop	esi

; 302  : }

	ret	0
$LN29@unique@2:

; 301  :   return unique_copy(__first, __last, __first);

	cmp	ecx, edx
	mov	eax, ecx
	je	SHORT $LN16@unique@2
	lea	eax, DWORD PTR [ecx+4]
	cmp	eax, edx
	je	SHORT $LN21@unique@2
$LL22@unique@2:
	mov	esi, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], esi
	je	SHORT $LN20@unique@2
	add	ecx, 4
	mov	DWORD PTR [ecx], esi
$LN20@unique@2:
	add	eax, 4
	cmp	eax, edx
	jne	SHORT $LL22@unique@2
$LN21@unique@2:
	lea	eax, DWORD PTR [ecx+4]
$LN16@unique@2:
	pop	esi

; 302  : }

	ret	0
??$unique@PAPAVCObject@@@stlp_std@@YAPAPAVCObject@@PAPAV1@0@Z ENDP ; stlp_std::unique<CObject * *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?allocate@?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@QBEPAUfeel_visible_Item@Vision@Feel@@IPBX@Z
_TEXT	SEGMENT
?allocate@?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@QBEPAUfeel_visible_Item@Vision@Feel@@IPBX@Z PROC ; xalloc<Feel::Vision::feel_visible_Item>::allocate, COMDAT
; _n$ = eax

; 81   : 							pointer					allocate		(size_type n, const void* p=0) const	{	return xr_alloc<T>((u32)n);	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	imul	eax, 132				; 00000084H
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@QBEPAUfeel_visible_Item@Vision@Feel@@IPBX@Z ENDP ; xalloc<Feel::Vision::feel_visible_Item>::allocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_alloc.h
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@PAUfeel_visible_Item@Vision@Feel@@U123@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@I@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@PAUfeel_visible_Item@Vision@Feel@@U123@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@I@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<Feel::Vision::feel_visible_Item *,Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::allocate, COMDAT
; ___n$ = eax

; 633  :   { return _Base::allocate(__n); }

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	imul	eax, 132				; 00000084H
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$_STLP_alloc_proxy@PAUfeel_visible_Item@Vision@Feel@@U123@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@I@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<Feel::Vision::feel_visible_Item *,Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::allocate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@PAUfeel_visible_Item@Vision@Feel@@U123@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEPAUfeel_visible_Item@Vision@Feel@@IAAIABU__false_type@3@@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@PAUfeel_visible_Item@Vision@Feel@@U123@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEPAUfeel_visible_Item@Vision@Feel@@IAAIABU__false_type@3@@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<Feel::Vision::feel_visible_Item *,Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::allocate, COMDAT
; ___n$ = eax
; ___allocated_n$ = ecx

; 640  :   { __allocated_n = __n; return allocate(__n); }

	mov	DWORD PTR [ecx], eax
	imul	eax, 132				; 00000084H
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$_STLP_alloc_proxy@PAUfeel_visible_Item@Vision@Feel@@U123@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEPAUfeel_visible_Item@Vision@Feel@@IAAIABU__false_type@3@@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<Feel::Vision::feel_visible_Item *,Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::allocate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@PAUfeel_visible_Item@Vision@Feel@@U123@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@IAAI@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@PAUfeel_visible_Item@Vision@Feel@@U123@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@IAAI@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<Feel::Vision::feel_visible_Item *,Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::allocate, COMDAT
; ___n$ = eax
; ___allocated_n$ = ecx

; 611  : #if !defined (__BORLANDC__)
; 612  :     typedef typename _IsSTLportClass<_MaybeReboundAlloc>::_Ret _STLportAlloc;
; 613  : #else
; 614  :     typedef typename __bool2type<_IsSTLportClass<_MaybeReboundAlloc>::_Is>::_Ret _STLportAlloc;
; 615  : #endif
; 616  :     return allocate(__n, __allocated_n, _STLportAlloc());

	mov	DWORD PTR [ecx], eax
	imul	eax, 132				; 00000084H
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 617  :   }

	ret	0
?allocate@?$_STLP_alloc_proxy@PAUfeel_visible_Item@Vision@Feel@@U123@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@IAAI@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<Feel::Vision::feel_visible_Item *,Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::allocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@QAE@ABV0@@Z PROC ; xalloc<Feel::Vision::feel_visible_Item>::xalloc<Feel::Vision::feel_visible_Item>, COMDAT
; _this$ = eax

; 78   : 													xalloc			(const xalloc<T>&)						{	}

	ret	0
??0?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@QAE@ABV0@@Z ENDP ; xalloc<Feel::Vision::feel_visible_Item>::xalloc<Feel::Vision::feel_visible_Item>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_iterator.h
_TEXT	ENDS
;	COMDAT ??0?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@stlp_std@@QAE@PAUfeel_visible_Item@Vision@Feel@@@Z
_TEXT	SEGMENT
??0?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@stlp_std@@QAE@PAUfeel_visible_Item@Vision@Feel@@@Z PROC ; stlp_std::reverse_iterator<Feel::Vision::feel_visible_Item *>::reverse_iterator<Feel::Vision::feel_visible_Item *>, COMDAT
; _this$ = eax
; ___x$ = ecx

; 65   :   explicit reverse_iterator(iterator_type __x) : current(__x) {}

	mov	DWORD PTR [eax], ecx
	ret	0
??0?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@stlp_std@@QAE@PAUfeel_visible_Item@Vision@Feel@@@Z ENDP ; stlp_std::reverse_iterator<Feel::Vision::feel_visible_Item *>::reverse_iterator<Feel::Vision::feel_visible_Item *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?size@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QBEIXZ PROC ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::size, COMDAT
; _this$ = eax

; 180  :   size_type size() const        { return size_type(this->_M_finish - this->_M_start); }

	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR [eax]
	mov	eax, 1041204193				; 3e0f83e1H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	ret	0
?size@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QBEIXZ ENDP ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?end@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QBEPBUfeel_visible_Item@Vision@Feel@@XZ
_TEXT	SEGMENT
?end@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QBEPBUfeel_visible_Item@Vision@Feel@@XZ PROC ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::end, COMDAT
; _this$ = eax

; 173  :   const_iterator end() const   { return this->_M_finish; }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?end@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QBEPBUfeel_visible_Item@Vision@Feel@@XZ ENDP ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QBEPBUfeel_visible_Item@Vision@Feel@@XZ
_TEXT	SEGMENT
?begin@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QBEPBUfeel_visible_Item@Vision@Feel@@XZ PROC ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::begin, COMDAT
; _this$ = eax

; 171  :   const_iterator begin() const { return this->_M_start; }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QBEPBUfeel_visible_Item@Vision@Feel@@XZ ENDP ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::begin
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?get_allocator@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QBE?AV?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@XZ
_TEXT	SEGMENT
?get_allocator@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QBE?AV?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@XZ PROC ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::get_allocator, COMDAT
; ___$ReturnUdt$ = eax

; 134  :   { return _STLP_CONVERT_ALLOCATOR((const allocator_type&)this->_M_end_of_storage, _Tp); }

	ret	0
?get_allocator@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QBE?AV?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@XZ ENDP ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::get_allocator
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?deallocate@?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@QBEXPAUfeel_visible_Item@Vision@Feel@@I@Z
_TEXT	SEGMENT
?deallocate@?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@QBEXPAUfeel_visible_Item@Vision@Feel@@I@Z PROC ; xalloc<Feel::Vision::feel_visible_Item>::deallocate, COMDAT
; _p$ = eax

; 83   : 							void					deallocate		(pointer p, size_type n) const			{	xr_free	(p);				}

	test	eax, eax
	je	SHORT $LN3@deallocate@16
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN3@deallocate@16:
	ret	0
?deallocate@?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@QBEXPAUfeel_visible_Item@Vision@Feel@@I@Z ENDP ; xalloc<Feel::Vision::feel_visible_Item>::deallocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_tools.h
_TEXT	ENDS
;	COMDAT ?to_storage_type_cref@?$_CastTraits@Ufeel_visible_Item@Vision@Feel@@U123@@priv@stlp_std@@SAABUfeel_visible_Item@Vision@Feel@@ABU456@@Z
_TEXT	SEGMENT
?to_storage_type_cref@?$_CastTraits@Ufeel_visible_Item@Vision@Feel@@U123@@priv@stlp_std@@SAABUfeel_visible_Item@Vision@Feel@@ABU456@@Z PROC ; stlp_std::priv::_CastTraits<Feel::Vision::feel_visible_Item,Feel::Vision::feel_visible_Item>::to_storage_type_cref, COMDAT
; ___ref$ = eax

; 254  :   { return __ref; }

	ret	0
?to_storage_type_cref@?$_CastTraits@Ufeel_visible_Item@Vision@Feel@@U123@@priv@stlp_std@@SAABUfeel_visible_Item@Vision@Feel@@ABU456@@Z ENDP ; stlp_std::priv::_CastTraits<Feel::Vision::feel_visible_Item,Feel::Vision::feel_visible_Item>::to_storage_type_cref
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_storage_type_ptr@?$_CastTraits@Ufeel_visible_Item@Vision@Feel@@U123@@priv@stlp_std@@SAPAUfeel_visible_Item@Vision@Feel@@PAU456@@Z
_TEXT	SEGMENT
?to_storage_type_ptr@?$_CastTraits@Ufeel_visible_Item@Vision@Feel@@U123@@priv@stlp_std@@SAPAUfeel_visible_Item@Vision@Feel@@PAU456@@Z PROC ; stlp_std::priv::_CastTraits<Feel::Vision::feel_visible_Item,Feel::Vision::feel_visible_Item>::to_storage_type_ptr, COMDAT
; ___ptr$ = eax

; 248  :   { return __ptr; }

	ret	0
?to_storage_type_ptr@?$_CastTraits@Ufeel_visible_Item@Vision@Feel@@U123@@priv@stlp_std@@SAPAUfeel_visible_Item@Vision@Feel@@PAU456@@Z ENDP ; stlp_std::priv::_CastTraits<Feel::Vision::feel_visible_Item,Feel::Vision::feel_visible_Item>::to_storage_type_ptr
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_value_type_ref@?$_CastTraits@Ufeel_visible_Item@Vision@Feel@@U123@@priv@stlp_std@@SAAAUfeel_visible_Item@Vision@Feel@@AAU456@@Z
_TEXT	SEGMENT
?to_value_type_ref@?$_CastTraits@Ufeel_visible_Item@Vision@Feel@@U123@@priv@stlp_std@@SAAAUfeel_visible_Item@Vision@Feel@@AAU456@@Z PROC ; stlp_std::priv::_CastTraits<Feel::Vision::feel_visible_Item,Feel::Vision::feel_visible_Item>::to_value_type_ref, COMDAT
; ___ref$ = eax

; 243  :   { return __ref; }

	ret	0
?to_value_type_ref@?$_CastTraits@Ufeel_visible_Item@Vision@Feel@@U123@@priv@stlp_std@@SAAAUfeel_visible_Item@Vision@Feel@@AAU456@@Z ENDP ; stlp_std::priv::_CastTraits<Feel::Vision::feel_visible_Item,Feel::Vision::feel_visible_Item>::to_value_type_ref
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_value_type_ptr@?$_CastTraits@Ufeel_visible_Item@Vision@Feel@@U123@@priv@stlp_std@@SAPAUfeel_visible_Item@Vision@Feel@@PAU456@@Z
_TEXT	SEGMENT
?to_value_type_ptr@?$_CastTraits@Ufeel_visible_Item@Vision@Feel@@U123@@priv@stlp_std@@SAPAUfeel_visible_Item@Vision@Feel@@PAU456@@Z PROC ; stlp_std::priv::_CastTraits<Feel::Vision::feel_visible_Item,Feel::Vision::feel_visible_Item>::to_value_type_ptr, COMDAT
; ___ptr$ = eax

; 237  :   { return __ptr; }

	ret	0
?to_value_type_ptr@?$_CastTraits@Ufeel_visible_Item@Vision@Feel@@U123@@priv@stlp_std@@SAPAUfeel_visible_Item@Vision@Feel@@PAU456@@Z ENDP ; stlp_std::priv::_CastTraits<Feel::Vision::feel_visible_Item,Feel::Vision::feel_visible_Item>::to_value_type_ptr
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ??1?$_Vector_base@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_base@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@XZ PROC ; stlp_std::priv::_Vector_base<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::~_Vector_base<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >, COMDAT
; _this$ = eax

; 85   :     if (_M_start != _STLP_DEFAULT_CONSTRUCTED(pointer))

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN6@Vector_bas@8

; 86   :       _M_end_of_storage.deallocate(_M_start, _M_end_of_storage._M_data - _M_start);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN6@Vector_bas@8:

; 87   :   }

	ret	0
??1?$_Vector_base@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@XZ ENDP ; stlp_std::priv::_Vector_base<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::~_Vector_base<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?end@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@XZ
_TEXT	SEGMENT
?end@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@XZ PROC ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::end, COMDAT
; _this$ = eax

; 172  :   iterator end()               { return this->_M_finish; }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?end@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@XZ ENDP ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@XZ
_TEXT	SEGMENT
?begin@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@XZ PROC ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::begin, COMDAT
; _this$ = eax

; 170  :   iterator begin()             { return this->_M_start; }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@XZ ENDP ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::begin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@QAE@XZ PROC ; xalloc<Feel::Vision::feel_visible_Item>::xalloc<Feel::Vision::feel_visible_Item>, COMDAT
; _this$ = eax

; 77   : 													xalloc			()										{	}

	ret	0
??0?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@QAE@XZ ENDP ; xalloc<Feel::Vision::feel_visible_Item>::xalloc<Feel::Vision::feel_visible_Item>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?end@?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@XZ
_TEXT	SEGMENT
?end@?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@XZ PROC ; stlp_std::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::end, COMDAT
; _this$ = eax

; 81   :   iterator end()               { return cast_traits::to_value_type_ptr(_M_impl.end()); }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?end@?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@XZ ENDP ; stlp_std::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@XZ
_TEXT	SEGMENT
?begin@?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@XZ PROC ; stlp_std::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::begin, COMDAT
; _this$ = eax

; 79   :   iterator begin()             { return cast_traits::to_value_type_ptr(_M_impl.begin()); }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@XZ ENDP ; stlp_std::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::begin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_vector3d.h
_TEXT	ENDS
;	COMDAT ?div@?$_vector3@M@@QAEAAU1@M@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
?div@?$_vector3@M@@QAEAAU1@M@Z PROC			; _vector3<float>::div, COMDAT
; _this$ = eax

; 45   : 	ICF SelfRef	div(T s)								{ x/=s;		y/=s;    z/=s;				return *this;	};

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _s$[esp-4]
	movss	xmm1, DWORD PTR [eax]
	mulss	xmm1, xmm0
	movss	DWORD PTR [eax], xmm1
	movaps	xmm1, xmm0
	mulss	xmm1, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [eax+4], xmm1
	movss	DWORD PTR [eax+8], xmm0
	ret	4
?div@?$_vector3@M@@QAEAAU1@M@Z ENDP			; _vector3<float>::div
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\feel_vision.cpp
_TEXT	ENDS
;	COMDAT ??0SFeelParam@Feel@@QAE@PAVVision@1@PAUfeel_visible_Item@21@M@Z
_TEXT	SEGMENT
__vis_threshold$ = 8					; size = 4
??0SFeelParam@Feel@@QAE@PAVVision@1@PAUfeel_visible_Item@21@M@Z PROC ; Feel::SFeelParam::SFeelParam, COMDAT
; _this$ = eax
; __parent$ = ecx
; __item$ = edx

; 26   : 		SFeelParam(Vision* _parent, Vision::feel_visible_Item* _item, float _vis_threshold):parent(_parent),item(_item),vis(1.f),vis_threshold(_vis_threshold){}

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+8], xmm0
	movss	xmm0, DWORD PTR __vis_threshold$[esp-4]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	movss	DWORD PTR [eax+12], xmm0
	ret	4
??0SFeelParam@Feel@@QAE@PAVVision@1@PAUfeel_visible_Item@21@M@Z ENDP ; Feel::SFeelParam::SFeelParam
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
;	COMDAT ??$__copy_backward_ptrs@PAPAVCObject@@PAPAV1@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@00ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__copy_backward_ptrs@PAPAVCObject@@PAPAV1@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@00ABU__true_type@1@@Z PROC ; stlp_std::priv::__copy_backward_ptrs<CObject * *,CObject * *>, COMDAT
; ___first$ = edx
; ___last$ = ecx
; ___result$ = eax

; 294  :   return (_OutputIter)__copy_trivial_backward(__first, __last, __result);

	sub	ecx, edx
	test	ecx, ecx
	jle	SHORT $LN6@copy_backw@19
	push	ecx
	push	edx
	sub	eax, ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN6@copy_backw@19:

; 295  : }

	ret	0
??$__copy_backward_ptrs@PAPAVCObject@@PAPAV1@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@00ABU__true_type@1@@Z ENDP ; stlp_std::priv::__copy_backward_ptrs<CObject * *,CObject * *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_heap.c
_TEXT	ENDS
;	COMDAT ??$__push_heap@PAPAVCObject@@HPAV1@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@HHPAV1@U?$less@PAVCObject@@@0@@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 1
??$__push_heap@PAPAVCObject@@HPAV1@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@HHPAV1@U?$less@PAVCObject@@@0@@Z PROC ; stlp_std::__push_heap<CObject * *,int,CObject *,stlp_std::less<CObject *> >, COMDAT
; ___first$ = esi
; ___holeIndex$ = ecx
; ___topIndex$ = ebx
; ___val$ = edi

; 79   :   _Distance __parent = (__holeIndex - 1) / 2;

	lea	eax, DWORD PTR [ecx-1]
	cdq
	sub	eax, edx
	sar	eax, 1

; 80   :   while (__holeIndex > __topIndex && __comp(*(__first + __parent), __val)) {

	cmp	ecx, ebx
	jle	SHORT $LN10@push_heap@5
	npad	4
$LL2@push_heap@5:
	mov	edx, DWORD PTR [esi+eax*4]
	cmp	edx, edi
	jae	SHORT $LN10@push_heap@5

; 81   :     _STLP_VERBOSE_ASSERT(!__comp(__val, *(__first + __parent)), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 82   :     *(__first + __holeIndex) = *(__first + __parent);

	mov	DWORD PTR [esi+ecx*4], edx

; 83   :     __holeIndex = __parent;

	mov	ecx, eax

; 84   :     __parent = (__holeIndex - 1) / 2;

	add	eax, -1
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	ecx, ebx
	jg	SHORT $LL2@push_heap@5
$LN10@push_heap@5:

; 85   :   }
; 86   :   *(__first + __holeIndex) = __val;

	mov	DWORD PTR [esi+ecx*4], edi

; 87   : }

	ret	0
??$__push_heap@PAPAVCObject@@HPAV1@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@HHPAV1@U?$less@PAVCObject@@@0@@Z ENDP ; stlp_std::__push_heap<CObject * *,int,CObject *,stlp_std::less<CObject *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__copy_backward_aux@PAPAVCObject@@PAPAV1@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@00ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__copy_backward_aux@PAPAVCObject@@PAPAV1@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@00ABU__true_type@1@@Z PROC ; stlp_std::priv::__copy_backward_aux<CObject * *,CObject * *>, COMDAT
; ___first$ = edx
; ___last$ = ecx
; ___result$ = eax

; 304  :   return __copy_backward_ptrs(__first, __last, __result,
; 305  :                               _UseTrivialCopy(_STLP_VALUE_TYPE(__first, _InputIter),
; 306  :                                               _STLP_VALUE_TYPE(__result, _OutputIter))._Answer());

	sub	ecx, edx
	test	ecx, ecx
	jle	SHORT $LN12@copy_backw@20
	push	ecx
	push	edx
	sub	eax, ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN12@copy_backw@20:

; 307  : }

	ret	0
??$__copy_backward_aux@PAPAVCObject@@PAPAV1@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@00ABU__true_type@1@@Z ENDP ; stlp_std::priv::__copy_backward_aux<CObject * *,CObject * *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_heap.c
_TEXT	ENDS
;	COMDAT ??$__adjust_heap@PAPAVCObject@@HPAV1@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@HHPAV1@U?$less@PAVCObject@@@0@@Z
_TEXT	SEGMENT
___holeIndex$ = 8					; size = 4
___comp$ = 12						; size = 1
??$__adjust_heap@PAPAVCObject@@HPAV1@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@HHPAV1@U?$less@PAVCObject@@@0@@Z PROC ; stlp_std::__adjust_heap<CObject * *,int,CObject *,stlp_std::less<CObject *> >, COMDAT
; ___first$ = ecx
; ___len$ = edx
; ___val$ = ebx

; 148  : {

	push	esi
	mov	esi, DWORD PTR ___holeIndex$[esp]

; 149  :   _Distance __topIndex = __holeIndex;
; 150  :   _Distance __secondChild = 2 * __holeIndex + 2;

	lea	eax, DWORD PTR [esi+esi+2]

; 151  :   while (__secondChild < __len) {

	cmp	eax, edx
	push	edi
	mov	edi, esi
	jge	SHORT $LN21@adjust_hea@5
	push	ebp
$LL4@adjust_hea@5:

; 152  :     if (__comp(*(__first + __secondChild), *(__first + (__secondChild - 1)))) {

	mov	ebp, DWORD PTR [ecx+eax*4]
	cmp	ebp, DWORD PTR [ecx+eax*4-4]
	jae	SHORT $LN2@adjust_hea@5

; 153  :       _STLP_VERBOSE_ASSERT(!__comp(*(__first + (__secondChild - 1)), *(__first + __secondChild)),
; 154  :                            _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 155  :       __secondChild--;

	sub	eax, 1
$LN2@adjust_hea@5:

; 156  :     }
; 157  :     *(__first + __holeIndex) = *(__first + __secondChild);

	mov	ebp, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [ecx+esi*4], ebp

; 158  :     __holeIndex = __secondChild;

	mov	esi, eax

; 159  :     __secondChild = 2 * (__secondChild + 1);

	lea	eax, DWORD PTR [eax+eax+2]
	cmp	eax, edx
	jl	SHORT $LL4@adjust_hea@5
	pop	ebp
$LN21@adjust_hea@5:

; 160  :   }
; 161  :   if (__secondChild == __len) {

	jne	SHORT $LN1@adjust_hea@5

; 162  :     *(__first + __holeIndex) = *(__first + (__secondChild - 1));

	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	DWORD PTR [ecx+esi*4], edx

; 163  :     __holeIndex = __secondChild - 1;

	lea	esi, DWORD PTR [eax-1]
$LN1@adjust_hea@5:

; 164  :   }
; 165  :   __push_heap(__first, __holeIndex, __topIndex, __val, __comp);

	lea	eax, DWORD PTR [esi-1]
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	esi, edi
	jle	SHORT $LN20@adjust_hea@5
$LL10@adjust_hea@5:
	mov	edx, DWORD PTR [ecx+eax*4]
	cmp	edx, ebx
	jae	SHORT $LN20@adjust_hea@5
	mov	DWORD PTR [ecx+esi*4], edx
	mov	esi, eax
	add	eax, -1
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	esi, edi
	jg	SHORT $LL10@adjust_hea@5
$LN20@adjust_hea@5:
	pop	edi
	mov	DWORD PTR [ecx+esi*4], ebx
	pop	esi

; 166  : }

	ret	0
??$__adjust_heap@PAPAVCObject@@HPAV1@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@HHPAV1@U?$less@PAVCObject@@@0@@Z ENDP ; stlp_std::__adjust_heap<CObject * *,int,CObject *,stlp_std::less<CObject *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__make_heap@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@PAV1@H@stlp_std@@YAXPAPAVCObject@@0U?$less@PAVCObject@@@0@0PAH@Z
_TEXT	SEGMENT
___last$ = 8						; size = 4
$T242384 = 12						; size = 4
??$__make_heap@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@PAV1@H@stlp_std@@YAXPAPAVCObject@@0U?$less@PAVCObject@@@0@0PAH@Z PROC ; stlp_std::__make_heap<CObject * *,stlp_std::less<CObject *>,CObject *,int>, COMDAT
; ___first$ = edi

; 218  : {

	push	ebx
	push	ebp
	mov	ebp, DWORD PTR ___last$[esp+4]

; 219  :   if (__last - __first < 2) return;
; 220  :   _Distance __len = __last - __first;

	sub	ebp, edi
	sar	ebp, 2

; 221  :   _Distance __parent = (__len - 2)/2;

	lea	eax, DWORD PTR [ebp-2]
	cdq
	sub	eax, edx
	push	esi
	mov	esi, eax

; 222  : 
; 223  :   for (;;) {
; 224  :     __adjust_heap(__first, __parent, __len, _Tp(*(__first + __parent)),
; 225  :                   __comp);

	mov	eax, DWORD PTR $T242384[esp+8]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	sar	esi, 1
	mov	ebx, DWORD PTR [edi+esi*4]
	push	esi
	mov	edx, ebp
	mov	ecx, edi
	call	??$__adjust_heap@PAPAVCObject@@HPAV1@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@HHPAV1@U?$less@PAVCObject@@@0@@Z ; stlp_std::__adjust_heap<CObject * *,int,CObject *,stlp_std::less<CObject *> >
	add	esp, 8

; 226  :     if (__parent == 0) return;

	test	esi, esi
	je	SHORT $LN13@make_heap@9
$LL3@make_heap@9:

; 222  : 
; 223  :   for (;;) {
; 224  :     __adjust_heap(__first, __parent, __len, _Tp(*(__first + __parent)),
; 225  :                   __comp);

	mov	edx, DWORD PTR $T242384[esp+8]
	movzx	eax, BYTE PTR [edx]
	mov	ebx, DWORD PTR [edi+esi*4-4]

; 227  :     __parent--;

	sub	esi, 1
	push	eax
	push	esi
	mov	edx, ebp
	mov	ecx, edi
	call	??$__adjust_heap@PAPAVCObject@@HPAV1@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@HHPAV1@U?$less@PAVCObject@@@0@@Z ; stlp_std::__adjust_heap<CObject * *,int,CObject *,stlp_std::less<CObject *> >
	add	esp, 8
	test	esi, esi
	jne	SHORT $LL3@make_heap@9
$LN13@make_heap@9:
	pop	esi
	pop	ebp
	pop	ebx

; 228  :   }
; 229  : }

	ret	0
??$__make_heap@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@PAV1@H@stlp_std@@YAXPAPAVCObject@@0U?$less@PAVCObject@@@0@0PAH@Z ENDP ; stlp_std::__make_heap<CObject * *,stlp_std::less<CObject *>,CObject *,int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.c
_TEXT	ENDS
;	COMDAT ??$__unguarded_linear_insert@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@PAV2@U?$less@PAVCObject@@@1@@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 1
??$__unguarded_linear_insert@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@PAV2@U?$less@PAVCObject@@@1@@Z PROC ; stlp_std::priv::__unguarded_linear_insert<CObject * *,CObject *,stlp_std::less<CObject *> >, COMDAT
; ___last$ = edx
; ___val$ = esi

; 897  :   _RandomAccessIter __next = __last;
; 898  :   --__next;
; 899  :   while (__comp(__val, *__next)) {

	mov	ecx, DWORD PTR [edx-4]
	cmp	esi, ecx
	lea	eax, DWORD PTR [edx-4]
	jae	SHORT $LN9@unguarded_@14
	npad	6
$LL2@unguarded_@14:

; 900  :     _STLP_VERBOSE_ASSERT(!__comp(*__next, __val), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 901  :     *__last = *__next;

	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax-4]

; 902  :     __last = __next;

	mov	edx, eax

; 903  :     --__next;

	sub	eax, 4
	cmp	esi, ecx
	jb	SHORT $LL2@unguarded_@14
$LN9@unguarded_@14:

; 904  :   }
; 905  :   *__last = __val;

	mov	DWORD PTR [edx], esi

; 906  : }

	ret	0
??$__unguarded_linear_insert@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@PAV2@U?$less@PAVCObject@@@1@@Z ENDP ; stlp_std::priv::__unguarded_linear_insert<CObject * *,CObject *,stlp_std::less<CObject *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$copy_backward@PAPAVCObject@@PAPAV1@@stlp_std@@YAPAPAVCObject@@PAPAV1@00@Z
_TEXT	SEGMENT
??$copy_backward@PAPAVCObject@@PAPAV1@@stlp_std@@YAPAPAVCObject@@PAPAV1@00@Z PROC ; stlp_std::copy_backward<CObject * *,CObject * *>, COMDAT
; ___first$ = edx
; ___last$ = ecx
; ___result$ = eax

; 313  :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__first, __last))
; 314  :   return _STLP_PRIV __copy_backward_aux(__first, __last, __result, _BothPtrType< _InputIter, _OutputIter>::_Answer() );

	sub	ecx, edx
	test	ecx, ecx
	jle	SHORT $LN16@copy_backw@21
	push	ecx
	push	edx
	sub	eax, ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN16@copy_backw@21:

; 315  : }

	ret	0
??$copy_backward@PAPAVCObject@@PAPAV1@@stlp_std@@YAPAPAVCObject@@PAPAV1@00@Z ENDP ; stlp_std::copy_backward<CObject * *,CObject * *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_heap.h
_TEXT	ENDS
;	COMDAT ??$__pop_heap@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@H@stlp_std@@YAXPAPAVCObject@@00PAV1@U?$less@PAVCObject@@@0@PAH@Z
_TEXT	SEGMENT
___last$ = 8						; size = 4
___comp$ = 12						; size = 1
??$__pop_heap@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@H@stlp_std@@YAXPAPAVCObject@@00PAV1@U?$less@PAVCObject@@@0@PAH@Z PROC ; stlp_std::__pop_heap<CObject * *,CObject *,stlp_std::less<CObject *>,int>, COMDAT
; ___first$ = ecx
; ___result$ = edx
; ___val$ = ebx

; 78   :   *__result = *__first;

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 79   :   __adjust_heap(__first, _Distance(0), _Distance(__last - __first),
; 80   :                 __val, __comp);

	mov	edx, DWORD PTR ___last$[esp-4]
	sub	edx, ecx
	sar	edx, 2
	mov	DWORD PTR ___last$[esp-4], 0
	jmp	??$__adjust_heap@PAPAVCObject@@HPAV1@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@HHPAV1@U?$less@PAVCObject@@@0@@Z ; stlp_std::__adjust_heap<CObject * *,int,CObject *,stlp_std::less<CObject *> >
??$__pop_heap@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@H@stlp_std@@YAXPAPAVCObject@@00PAV1@U?$less@PAVCObject@@@0@PAH@Z ENDP ; stlp_std::__pop_heap<CObject * *,CObject *,stlp_std::less<CObject *>,int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_heap.c
_TEXT	ENDS
;	COMDAT ??$make_heap@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@0U?$less@PAVCObject@@@0@@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 1
??$make_heap@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@0U?$less@PAVCObject@@@0@@Z PROC ; stlp_std::make_heap<CObject * *,stlp_std::less<CObject *> >, COMDAT
; ___first$ = ecx
; ___last$ = eax

; 235  : {

	push	edi
	mov	edi, ecx

; 236  :   __make_heap(__first, __last, __comp,
; 237  :               _STLP_VALUE_TYPE(__first, _RandomAccessIterator), _STLP_DISTANCE_TYPE(__first, _RandomAccessIterator));

	mov	ecx, eax
	sub	ecx, edi
	and	ecx, -4					; fffffffcH
	cmp	ecx, 8
	jl	SHORT $LN7@make_heap@10
	lea	edx, DWORD PTR ___comp$[esp]
	push	edx
	push	eax
	call	??$__make_heap@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@PAV1@H@stlp_std@@YAXPAPAVCObject@@0U?$less@PAVCObject@@@0@0PAH@Z ; stlp_std::__make_heap<CObject * *,stlp_std::less<CObject *>,CObject *,int>
	add	esp, 8
$LN7@make_heap@10:
	pop	edi

; 238  : }

	ret	0
??$make_heap@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@0U?$less@PAVCObject@@@0@@Z ENDP ; stlp_std::make_heap<CObject * *,stlp_std::less<CObject *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.c
_TEXT	ENDS
;	COMDAT ??$__unguarded_insertion_sort_aux@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@00U?$less@PAVCObject@@@1@@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 1
??$__unguarded_insertion_sort_aux@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@00U?$less@PAVCObject@@@1@@Z PROC ; stlp_std::priv::__unguarded_insertion_sort_aux<CObject * *,CObject *,stlp_std::less<CObject *> >, COMDAT
; ___first$ = eax
; ___last$ = ebx

; 934  :                                     _Tp*, _Compare __comp) {

	push	edi
	mov	edi, eax

; 935  :   for (_RandomAccessIter __i = __first; __i != __last; ++__i)

	cmp	edi, ebx
	je	SHORT $LN1@unguarded_@15
	push	esi
$LL3@unguarded_@15:

; 936  :     __unguarded_linear_insert<_RandomAccessIter, _Tp, _Compare>(__i, *__i, __comp);

	mov	esi, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edi-4]
	cmp	esi, ecx
	lea	eax, DWORD PTR [edi-4]
	mov	edx, edi
	jae	SHORT $LN6@unguarded_@15
$LL7@unguarded_@15:
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax-4]
	mov	edx, eax
	sub	eax, 4
	cmp	esi, ecx
	jb	SHORT $LL7@unguarded_@15
$LN6@unguarded_@15:
	add	edi, 4
	cmp	edi, ebx
	mov	DWORD PTR [edx], esi
	jne	SHORT $LL3@unguarded_@15
	pop	esi
$LN1@unguarded_@15:
	pop	edi

; 937  : }

	ret	0
??$__unguarded_insertion_sort_aux@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@00U?$less@PAVCObject@@@1@@Z ENDP ; stlp_std::priv::__unguarded_insertion_sort_aux<CObject * *,CObject *,stlp_std::less<CObject *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__linear_insert@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@0PAV2@U?$less@PAVCObject@@@1@@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 1
??$__linear_insert@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@0PAV2@U?$less@PAVCObject@@@1@@Z PROC ; stlp_std::priv::__linear_insert<CObject * *,CObject *,stlp_std::less<CObject *> >, COMDAT
; ___first$ = edi
; ___last$ = edx
; ___val$ = esi

; 911  :   //*TY 12/26/1998 - added __val as a paramter
; 912  :   //  _Tp __val = *__last;        //*TY 12/26/1998 - __val supplied by caller
; 913  :   if (__comp(__val, *__first)) {

	cmp	esi, DWORD PTR [edi]
	jae	SHORT $LN2@linear_ins@3

; 914  :     _STLP_VERBOSE_ASSERT(!__comp(*__first, __val), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 915  :     copy_backward(__first, __last, __last + 1);

	mov	eax, edx
	sub	eax, edi
	test	eax, eax
	jle	SHORT $LN21@linear_ins@3
	push	eax
	sub	edx, eax
	add	edx, 4
	push	edi
	push	edx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN21@linear_ins@3:

; 916  :     *__first = __val;

	mov	DWORD PTR [edi], esi

; 920  : }

	ret	0
$LN2@linear_ins@3:

; 917  :   }
; 918  :   else
; 919  :     __unguarded_linear_insert(__last, __val, __comp);

	mov	ecx, DWORD PTR [edx-4]
	cmp	esi, ecx
	lea	eax, DWORD PTR [edx-4]
	jae	SHORT $LN23@linear_ins@3
	npad	6
$LL24@linear_ins@3:
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax-4]
	mov	edx, eax
	sub	eax, 4
	cmp	esi, ecx
	jb	SHORT $LL24@linear_ins@3
$LN23@linear_ins@3:
	mov	DWORD PTR [edx], esi

; 920  : }

	ret	0
??$__linear_insert@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@0PAV2@U?$less@PAVCObject@@@1@@Z ENDP ; stlp_std::priv::__linear_insert<CObject * *,CObject *,stlp_std::less<CObject *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__unguarded_insertion_sort@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@0U?$less@PAVCObject@@@1@@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 1
??$__unguarded_insertion_sort@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@0U?$less@PAVCObject@@@1@@Z PROC ; stlp_std::priv::__unguarded_insertion_sort<CObject * *,stlp_std::less<CObject *> >, COMDAT
; ___first$ = eax
; ___last$ = ebx

; 942  :                                        _Compare __comp) {

	push	edi
	mov	edi, eax

; 943  :   __unguarded_insertion_sort_aux(__first, __last, _STLP_VALUE_TYPE(__first, _RandomAccessIter), __comp);

	cmp	edi, ebx
	je	SHORT $LN3@unguarded_@16
	push	esi
$LL5@unguarded_@16:
	mov	esi, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edi-4]
	cmp	esi, ecx
	lea	eax, DWORD PTR [edi-4]
	mov	edx, edi
	jae	SHORT $LN8@unguarded_@16
$LL9@unguarded_@16:
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax-4]
	mov	edx, eax
	sub	eax, 4
	cmp	esi, ecx
	jb	SHORT $LL9@unguarded_@16
$LN8@unguarded_@16:
	add	edi, 4
	cmp	edi, ebx
	mov	DWORD PTR [edx], esi
	jne	SHORT $LL5@unguarded_@16
	pop	esi
$LN3@unguarded_@16:
	pop	edi

; 944  : }

	ret	0
??$__unguarded_insertion_sort@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@0U?$less@PAVCObject@@@1@@Z ENDP ; stlp_std::priv::__unguarded_insertion_sort<CObject * *,stlp_std::less<CObject *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__insertion_sort@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@00U?$less@PAVCObject@@@1@@Z
_TEXT	SEGMENT
___last$ = 8						; size = 4
$T242637 = 12						; size = 4
??$__insertion_sort@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@00U?$less@PAVCObject@@@1@@Z PROC ; stlp_std::priv::__insertion_sort<CObject * *,CObject *,stlp_std::less<CObject *> >, COMDAT
; ___first$ = ebx

; 925  :                       _Tp *, _Compare __comp) {

	push	esi

; 926  :   if (__first == __last) return;
; 927  :   for (_RandomAccessIter __i = __first + 1; __i != __last; ++__i)

	lea	esi, DWORD PTR [ebx+4]
	cmp	esi, DWORD PTR ___last$[esp]
	je	SHORT $LN1@insertion_@3
	push	ebp
	mov	ebp, 4
	push	edi
	sub	ebp, ebx
$LL3@insertion_@3:

; 928  :     __linear_insert<_RandomAccessIter, _Tp, _Compare>(__first, __i, *__i, __comp);  //*TY 12/26/1998 - supply *__i as __val

	mov	edi, DWORD PTR [esi]
	cmp	edi, DWORD PTR [ebx]
	jae	SHORT $LN12@insertion_@3
	lea	eax, DWORD PTR [esi+ebp-4]
	test	eax, eax
	jle	SHORT $LN31@insertion_@3
	push	eax
	mov	ecx, esi
	sub	ecx, eax
	add	ecx, 4
	push	ebx
	push	ecx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN31@insertion_@3:
	mov	DWORD PTR [ebx], edi
	jmp	SHORT $LN2@insertion_@3
$LN12@insertion_@3:
	mov	ecx, DWORD PTR [esi-4]
	cmp	edi, ecx
	lea	eax, DWORD PTR [esi-4]
	mov	edx, esi
	jae	SHORT $LN33@insertion_@3
$LL34@insertion_@3:
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax-4]
	mov	edx, eax
	sub	eax, 4
	cmp	edi, ecx
	jb	SHORT $LL34@insertion_@3
$LN33@insertion_@3:
	mov	DWORD PTR [edx], edi
$LN2@insertion_@3:

; 926  :   if (__first == __last) return;
; 927  :   for (_RandomAccessIter __i = __first + 1; __i != __last; ++__i)

	add	esi, 4
	cmp	esi, DWORD PTR ___last$[esp+8]
	jne	SHORT $LL3@insertion_@3
	pop	edi
	pop	ebp
$LN1@insertion_@3:
	pop	esi

; 929  : }

	ret	0
??$__insertion_sort@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@00U?$less@PAVCObject@@@1@@Z ENDP ; stlp_std::priv::__insertion_sort<CObject * *,CObject *,stlp_std::less<CObject *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__unguarded_partition@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@0PAV2@U?$less@PAVCObject@@@1@@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 1
??$__unguarded_partition@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@0PAV2@U?$less@PAVCObject@@@1@@Z PROC ; stlp_std::priv::__unguarded_partition<CObject * *,CObject *,stlp_std::less<CObject *> >, COMDAT
; ___first$ = eax
; ___last$ = ecx
; ___pivot$ = edx

; 873  :                                         _Tp __pivot, _Compare __comp) {

	push	esi
	push	edi
$LL7@unguarded_@17:

; 874  :   for (;;) {
; 875  :     while (__comp(*__first, __pivot)) {

	cmp	DWORD PTR [eax], edx
	jae	SHORT $LN4@unguarded_@17
$LL5@unguarded_@17:

; 876  :       _STLP_VERBOSE_ASSERT(!__comp(__pivot, *__first), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 877  :       ++__first;

	add	eax, 4
	cmp	DWORD PTR [eax], edx
	jb	SHORT $LL5@unguarded_@17
$LN4@unguarded_@17:

; 878  :     }
; 879  :     --__last;

	sub	ecx, 4

; 880  :     while (__comp(__pivot, *__last)) {

	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN2@unguarded_@17
$LL3@unguarded_@17:

; 881  :       _STLP_VERBOSE_ASSERT(!__comp(*__last, __pivot), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 882  :       --__last;

	sub	ecx, 4
	cmp	edx, DWORD PTR [ecx]
	jb	SHORT $LL3@unguarded_@17
$LN2@unguarded_@17:

; 883  :     }
; 884  :     if (!(__first < __last))

	cmp	eax, ecx
	jae	SHORT $LN35@unguarded_@17

; 885  :       return __first;
; 886  :     iter_swap(__first, __last);

	mov	esi, DWORD PTR [eax]
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [ecx], esi

; 887  :     ++__first;

	add	eax, 4

; 888  :   }

	jmp	SHORT $LL7@unguarded_@17
$LN35@unguarded_@17:
	pop	edi
	pop	esi

; 889  : }

	ret	0
??$__unguarded_partition@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@0PAV2@U?$less@PAVCObject@@@1@@Z ENDP ; stlp_std::priv::__unguarded_partition<CObject * *,CObject *,stlp_std::less<CObject *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__median@PAVCObject@@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAABQAVCObject@@ABQAV2@00U?$less@PAVCObject@@@1@@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 1
??$__median@PAVCObject@@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAABQAVCObject@@ABQAV2@00U?$less@PAVCObject@@@1@@Z PROC ; stlp_std::priv::__median<CObject *,stlp_std::less<CObject *> >, COMDAT
; ___a$ = ebx
; ___b$ = eax
; ___c$ = edi

; 84   :   if (__comp(__a, __b)) {

	mov	ecx, DWORD PTR [ebx]
	mov	edx, DWORD PTR [eax]
	cmp	ecx, edx
	push	esi

; 85   :     _STLP_VERBOSE_ASSERT(!__comp(__b, __a), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 86   :     if (__comp(__b, __c)) {

	mov	esi, DWORD PTR [edi]
	jae	SHORT $LN10@median@5
	cmp	edx, esi

; 87   :       _STLP_VERBOSE_ASSERT(!__comp(__c, __b), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 88   :       return __b;

	jb	SHORT $LN1@median@5

; 89   :     }
; 90   :     else if (__comp(__a, __c)) {

	cmp	ecx, esi

; 91   :       _STLP_VERBOSE_ASSERT(!__comp(__c, __a), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 92   :       return __c;

	jb	SHORT $LN23@median@5
$LN7@median@5:

; 93   :     }
; 94   :     else
; 95   :       return __a;

	mov	eax, ebx
	pop	esi

; 104  :   }
; 105  :   else
; 106  :     return __b;
; 107  : }

	ret	0
$LN10@median@5:

; 96   :   }
; 97   :   else if (__comp(__a, __c)) {

	cmp	ecx, esi

; 98   :     _STLP_VERBOSE_ASSERT(!__comp(__c, __a), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 99   :     return __a;

	jb	SHORT $LN7@median@5

; 100  :   }
; 101  :   else if (__comp(__b, __c)) {

	cmp	edx, esi
	jae	SHORT $LN1@median@5
$LN23@median@5:

; 102  :     _STLP_VERBOSE_ASSERT(!__comp(__c, __b), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 103  :     return __c;

	mov	eax, edi
$LN1@median@5:
	pop	esi

; 104  :   }
; 105  :   else
; 106  :     return __b;
; 107  : }

	ret	0
??$__median@PAVCObject@@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAABQAVCObject@@ABQAV2@00U?$less@PAVCObject@@@1@@Z ENDP ; stlp_std::priv::__median<CObject *,stlp_std::less<CObject *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$__destroy_range@V?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@stlp_std@@Ufeel_visible_Item@Vision@Feel@@@stlp_std@@YAXV?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@0@0PAUfeel_visible_Item@Vision@Feel@@@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$__destroy_range@V?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@stlp_std@@Ufeel_visible_Item@Vision@Feel@@@stlp_std@@YAXV?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@0@0PAUfeel_visible_Item@Vision@Feel@@@Z PROC ; stlp_std::__destroy_range<stlp_std::reverse_iterator<Feel::Vision::feel_visible_Item *>,Feel::Vision::feel_visible_Item>, COMDAT

; 175  :   typedef typename __type_traits<_Tp>::has_trivial_destructor _Trivial_destructor;
; 176  :   __destroy_range_aux(__first, __last, __ptr, _Trivial_destructor());
; 177  : }

	ret	0
??$__destroy_range@V?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@stlp_std@@Ufeel_visible_Item@Vision@Feel@@@stlp_std@@YAXV?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@0@0PAUfeel_visible_Item@Vision@Feel@@@Z ENDP ; stlp_std::__destroy_range<stlp_std::reverse_iterator<Feel::Vision::feel_visible_Item *>,Feel::Vision::feel_visible_Item>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.c
_TEXT	ENDS
;	COMDAT ??$__final_insertion_sort@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@0U?$less@PAVCObject@@@1@@Z
_TEXT	SEGMENT
$T242968 = 8						; size = 1
___last$ = 8						; size = 4
___comp$ = 12						; size = 1
??$__final_insertion_sort@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@0U?$less@PAVCObject@@@1@@Z PROC ; stlp_std::priv::__final_insertion_sort<CObject * *,stlp_std::less<CObject *> >, COMDAT
; ___first$ = eax

; 948  :                             _RandomAccessIter __last, _Compare __comp) {

	push	ebx
	push	ebp
	mov	ebp, DWORD PTR ___last$[esp+4]
	mov	ebx, eax

; 949  :   if (__last - __first > __stl_threshold) {

	mov	eax, ebp
	sub	eax, ebx
	and	eax, -4					; fffffffcH
	cmp	eax, 64					; 00000040H
	jle	SHORT $LN2@final_inse@3
	push	edi

; 950  :     __insertion_sort(__first, __first + __stl_threshold, _STLP_VALUE_TYPE(__first,_RandomAccessIter), __comp);

	lea	edi, DWORD PTR [ebx+64]
	cmp	ebx, edi
	je	SHORT $LN9@final_inse@3
	lea	ecx, DWORD PTR ___comp$[esp+8]
	push	ecx
	push	edi
	call	??$__insertion_sort@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@00U?$less@PAVCObject@@@1@@Z ; stlp_std::priv::__insertion_sort<CObject * *,CObject *,stlp_std::less<CObject *> >
	add	esp, 8
$LN9@final_inse@3:

; 951  :     __unguarded_insertion_sort(__first + __stl_threshold, __last, __comp);

	cmp	edi, ebp
	je	SHORT $LN42@final_inse@3
	push	esi
	npad	1
$LL19@final_inse@3:
	mov	esi, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edi-4]
	cmp	esi, ecx
	lea	eax, DWORD PTR [edi-4]
	mov	edx, edi
	jae	SHORT $LN22@final_inse@3
	npad	2
$LL23@final_inse@3:
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax-4]
	mov	edx, eax
	sub	eax, 4
	cmp	esi, ecx
	jb	SHORT $LL23@final_inse@3
$LN22@final_inse@3:
	add	edi, 4
	cmp	edi, ebp
	mov	DWORD PTR [edx], esi
	jne	SHORT $LL19@final_inse@3
	pop	esi
$LN42@final_inse@3:
	pop	edi

; 952  :   }
; 953  :   else
; 954  :     __insertion_sort(__first, __last, _STLP_VALUE_TYPE(__first,_RandomAccessIter), __comp);

$LN32@final_inse@3:
	pop	ebp
	pop	ebx

; 955  : }

	ret	0
$LN2@final_inse@3:

; 952  :   }
; 953  :   else
; 954  :     __insertion_sort(__first, __last, _STLP_VALUE_TYPE(__first,_RandomAccessIter), __comp);

	cmp	ebx, ebp
	mov	dl, BYTE PTR ___comp$[esp+4]
	mov	BYTE PTR $T242968[esp+4], dl
	je	SHORT $LN32@final_inse@3
	lea	eax, DWORD PTR $T242968[esp+4]
	push	eax
	push	ebp
	call	??$__insertion_sort@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@00U?$less@PAVCObject@@@1@@Z ; stlp_std::priv::__insertion_sort<CObject * *,CObject *,stlp_std::less<CObject *> >
	add	esp, 8
	pop	ebp
	pop	ebx

; 955  : }

	ret	0
??$__final_insertion_sort@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@0U?$less@PAVCObject@@@1@@Z ENDP ; stlp_std::priv::__final_insertion_sort<CObject * *,stlp_std::less<CObject *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__copy_ptrs@PBUfeel_visible_Item@Vision@Feel@@PAU123@@priv@stlp_std@@YAPAUfeel_visible_Item@Vision@Feel@@PBU234@0PAU234@ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__copy_ptrs@PBUfeel_visible_Item@Vision@Feel@@PAU123@@priv@stlp_std@@YAPAUfeel_visible_Item@Vision@Feel@@PBU234@0PAU234@ABU__true_type@1@@Z PROC ; stlp_std::priv::__copy_ptrs<Feel::Vision::feel_visible_Item const *,Feel::Vision::feel_visible_Item *>, COMDAT
; ___first$ = edx
; ___last$ = ecx
; ___result$ = eax

; 255  :   // we know they all pointers, so this cast is OK
; 256  :   //  return (_OutputIter)__copy_trivial(&(*__first), &(*__last), &(*__result));
; 257  :   return (_OutputIter)__copy_trivial(__first, __last, __result);

	sub	ecx, edx
	push	esi
	mov	esi, ecx
	je	SHORT $LN6@copy_ptrs@11
	push	esi
	push	edx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN6@copy_ptrs@11:
	pop	esi

; 258  : }

	ret	0
??$__copy_ptrs@PBUfeel_visible_Item@Vision@Feel@@PAU123@@priv@stlp_std@@YAPAUfeel_visible_Item@Vision@Feel@@PBU234@0PAU234@ABU__true_type@1@@Z ENDP ; stlp_std::priv::__copy_ptrs<Feel::Vision::feel_visible_Item const *,Feel::Vision::feel_visible_Item *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__copy_ptrs@PAUfeel_visible_Item@Vision@Feel@@PAU123@@priv@stlp_std@@YAPAUfeel_visible_Item@Vision@Feel@@PAU234@00ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__copy_ptrs@PAUfeel_visible_Item@Vision@Feel@@PAU123@@priv@stlp_std@@YAPAUfeel_visible_Item@Vision@Feel@@PAU234@00ABU__true_type@1@@Z PROC ; stlp_std::priv::__copy_ptrs<Feel::Vision::feel_visible_Item *,Feel::Vision::feel_visible_Item *>, COMDAT
; ___first$ = edx
; ___last$ = ecx
; ___result$ = eax

; 255  :   // we know they all pointers, so this cast is OK
; 256  :   //  return (_OutputIter)__copy_trivial(&(*__first), &(*__last), &(*__result));
; 257  :   return (_OutputIter)__copy_trivial(__first, __last, __result);

	sub	ecx, edx
	push	esi
	mov	esi, ecx
	je	SHORT $LN6@copy_ptrs@12
	push	esi
	push	edx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN6@copy_ptrs@12:
	pop	esi

; 258  : }

	ret	0
??$__copy_ptrs@PAUfeel_visible_Item@Vision@Feel@@PAU123@@priv@stlp_std@@YAPAUfeel_visible_Item@Vision@Feel@@PAU234@00ABU__true_type@1@@Z ENDP ; stlp_std::priv::__copy_ptrs<Feel::Vision::feel_visible_Item *,Feel::Vision::feel_visible_Item *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$_Copy_Construct@Ufeel_visible_Item@Vision@Feel@@@stlp_std@@YAXPAUfeel_visible_Item@Vision@Feel@@ABU123@@Z
_TEXT	SEGMENT
??$_Copy_Construct@Ufeel_visible_Item@Vision@Feel@@@stlp_std@@YAXPAUfeel_visible_Item@Vision@Feel@@ABU123@@Z PROC ; stlp_std::_Copy_Construct<Feel::Vision::feel_visible_Item>, COMDAT
; ___p$ = eax
; ___val$ = edx

; 109  : inline void _Copy_Construct(_Tp* __p, const _Tp& __val) {

	push	edi
	mov	edi, eax

; 110  : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 111  :   memset((char*)__p, _STLP_SHRED_BYTE, sizeof(_Tp));
; 112  : #endif
; 113  :   _STLP_PLACEMENT_NEW (__p) _Tp(__val);

	test	edi, edi
	je	SHORT $LN3@Copy_Const@8
	push	esi
	mov	ecx, 33					; 00000021H
	mov	esi, edx
	rep movsd
	pop	esi
$LN3@Copy_Const@8:
	pop	edi

; 114  : }

	ret	0
??$_Copy_Construct@Ufeel_visible_Item@Vision@Feel@@@stlp_std@@YAXPAUfeel_visible_Item@Vision@Feel@@ABU123@@Z ENDP ; stlp_std::_Copy_Construct<Feel::Vision::feel_visible_Item>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_uninitialized.h
_TEXT	ENDS
;	COMDAT ??$__ucopy_ptrs@PBUfeel_visible_Item@Vision@Feel@@PAU123@@priv@stlp_std@@YAPAUfeel_visible_Item@Vision@Feel@@PBU234@0PAU234@ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__ucopy_ptrs@PBUfeel_visible_Item@Vision@Feel@@PAU123@@priv@stlp_std@@YAPAUfeel_visible_Item@Vision@Feel@@PBU234@0PAU234@ABU__true_type@1@@Z PROC ; stlp_std::priv::__ucopy_ptrs<Feel::Vision::feel_visible_Item const *,Feel::Vision::feel_visible_Item *>, COMDAT
; ___first$ = ecx
; ___last$ = edx
; ___result$ = eax

; 117  :                                 const __true_type& /*TrivialUCopy*/) {

	push	esi
	mov	esi, edx

; 118  :   // we know they all pointers, so this cast is OK
; 119  :   //  return (_OutputIter)__copy_trivial(&(*__first), &(*__last), &(*__result));
; 120  :   return (_OutputIter)__ucopy_trivial(__first, __last, __result);

	cmp	esi, ecx
	je	SHORT $LN6@ucopy_ptrs@8
	sub	esi, ecx
	push	esi
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN6@ucopy_ptrs@8:
	pop	esi

; 121  : }

	ret	0
??$__ucopy_ptrs@PBUfeel_visible_Item@Vision@Feel@@PAU123@@priv@stlp_std@@YAPAUfeel_visible_Item@Vision@Feel@@PBU234@0PAU234@ABU__true_type@1@@Z ENDP ; stlp_std::priv::__ucopy_ptrs<Feel::Vision::feel_visible_Item const *,Feel::Vision::feel_visible_Item *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$_Destroy_Range@V?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@0@0@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$_Destroy_Range@V?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@0@0@Z PROC ; stlp_std::_Destroy_Range<stlp_std::reverse_iterator<Feel::Vision::feel_visible_Item *> >, COMDAT

; 181  :   __destroy_range(__first, __last, _STLP_VALUE_TYPE(__first, _ForwardIterator));
; 182  : }

	ret	0
??$_Destroy_Range@V?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@0@0@Z ENDP ; stlp_std::_Destroy_Range<stlp_std::reverse_iterator<Feel::Vision::feel_visible_Item *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.h
_TEXT	ENDS
;	COMDAT ??$remove@PAPAVCObject@@PAV1@@stlp_std@@YAPAPAVCObject@@PAPAV1@0ABQAV1@@Z
_TEXT	SEGMENT
??$remove@PAPAVCObject@@PAV1@@stlp_std@@YAPAPAVCObject@@PAPAV1@0ABQAV1@@Z PROC ; stlp_std::remove<CObject * *,CObject *>, COMDAT
; ___first$ = eax
; ___last$ = edx
; ___val$ = ecx

; 266  : remove(_ForwardIter __first, _ForwardIter __last, const _Tp& __val) {

	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, edx

; 267  :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__first, __last))
; 268  :   __first = find(__first, __last, __val);

	call	??$__find@PAPAVCObject@@PAV1@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@0ABQAV2@ABUrandom_access_iterator_tag@1@@Z ; stlp_std::priv::__find<CObject * *,CObject *>

; 269  :   if (__first == __last)

	cmp	eax, esi

; 270  :     return __first;

	je	SHORT $LN1@remove

; 271  :   else {
; 272  :     _ForwardIter __next = __first;
; 273  :     return remove_copy(++__next, __last, __first, __val);

	lea	ecx, DWORD PTR [eax+4]
	cmp	ecx, esi
	je	SHORT $LN1@remove
$LL10@remove:
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR [edi]
	je	SHORT $LN9@remove
	mov	DWORD PTR [eax], edx
	add	eax, 4
$LN9@remove:
	add	ecx, 4
	cmp	ecx, esi
	jne	SHORT $LL10@remove
$LN1@remove:
	pop	edi
	pop	esi

; 274  :   }
; 275  : }

	ret	0
??$remove@PAPAVCObject@@PAV1@@stlp_std@@YAPAPAVCObject@@PAPAV1@0ABQAV1@@Z ENDP ; stlp_std::remove<CObject * *,CObject *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?_M_erase@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEPAUfeel_visible_Item@Vision@Feel@@PAU456@0ABU__false_type@3@@Z
_TEXT	SEGMENT
?_M_erase@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEPAUfeel_visible_Item@Vision@Feel@@PAU456@0ABU__false_type@3@@Z PROC ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_M_erase, COMDAT
; _this$ = ebx
; ___first$ = edi
; ___last$ = eax

; 578  :   iterator _M_erase(iterator __first, iterator __last, const __false_type& /*_Movable*/) {

	push	esi

; 579  :     pointer __i = _STLP_PRIV __copy_ptrs(__last, this->_M_finish, __first, _TrivialCopy());

	mov	esi, DWORD PTR [ebx+4]
	sub	esi, eax
	je	SHORT $LN7@M_erase@9
	push	esi
	push	eax
	push	edi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi

; 580  :     _STLP_STD::_Destroy_Range(__i, this->_M_finish);
; 581  :     this->_M_finish = __i;

	mov	DWORD PTR [ebx+4], eax

; 582  :     return __first;

	mov	eax, edi
	pop	esi

; 583  :   }

	ret	0

; 579  :     pointer __i = _STLP_PRIV __copy_ptrs(__last, this->_M_finish, __first, _TrivialCopy());

$LN7@M_erase@9:

; 580  :     _STLP_STD::_Destroy_Range(__i, this->_M_finish);
; 581  :     this->_M_finish = __i;

	mov	DWORD PTR [ebx+4], edi

; 582  :     return __first;

	mov	eax, edi
	pop	esi

; 583  :   }

	ret	0
?_M_erase@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEPAUfeel_visible_Item@Vision@Feel@@PAU456@0ABU__false_type@3@@Z ENDP ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_M_erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?erase@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@PAU456@0@Z
_TEXT	SEGMENT
?erase@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@PAU456@0@Z PROC ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::erase, COMDAT
; _this$ = ebx
; ___first$ = edi
; ___last$ = eax

; 590  :     if (__first == __last)

	cmp	edi, eax

; 591  :       return __first;

	je	SHORT $LN12@erase@8
	push	esi

; 592  :     return _M_erase(__first, __last, _Movable());

	mov	esi, DWORD PTR [ebx+4]
	sub	esi, eax
	je	SHORT $LN10@erase@8
	push	esi
	push	eax
	push	edi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
	mov	DWORD PTR [ebx+4], eax
	pop	esi
	mov	eax, edi

; 593  :   }

	ret	0

; 592  :     return _M_erase(__first, __last, _Movable());

$LN10@erase@8:
	mov	eax, edi
	mov	DWORD PTR [ebx+4], eax
	pop	esi
$LN12@erase@8:
	mov	eax, edi

; 593  :   }

	ret	0
?erase@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@PAU456@0@Z ENDP ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::erase
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_alloc.h
_TEXT	ENDS
;	COMDAT ??0?$_STLP_alloc_proxy@PAUfeel_visible_Item@Vision@Feel@@U123@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@PAUfeel_visible_Item@Vision@Feel@@@Z
_TEXT	SEGMENT
??0?$_STLP_alloc_proxy@PAUfeel_visible_Item@Vision@Feel@@U123@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@PAUfeel_visible_Item@Vision@Feel@@@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<Feel::Vision::feel_visible_Item *,Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_STLP_alloc_proxy<Feel::Vision::feel_visible_Item *,Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >, COMDAT
; _this$ = eax

; 571  :     _MaybeReboundAlloc(__a), _M_data(__p) {}

	mov	DWORD PTR [eax], 0
	ret	0
??0?$_STLP_alloc_proxy@PAUfeel_visible_Item@Vision@Feel@@U123@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@PAUfeel_visible_Item@Vision@Feel@@@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<Feel::Vision::feel_visible_Item *,Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_STLP_alloc_proxy<Feel::Vision::feel_visible_Item *,Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ??0?$_Vector_base@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@Z
_TEXT	SEGMENT
??0?$_Vector_base@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@Z PROC ; stlp_std::priv::_Vector_base<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_Vector_base<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >, COMDAT
; _this$ = eax

; 67   :     : _M_start(0), _M_finish(0), _M_end_of_storage(__a, 0) {}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$_Vector_base@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@Z ENDP ; stlp_std::priv::_Vector_base<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_Vector_base<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?clear@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEXXZ PROC ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::clear, COMDAT
; _this$ = edi

; 611  :     erase(begin(), end());

	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ecx
	je	SHORT $LN10@clear@12
	push	esi
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN16@clear@12
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN16@clear@12:
	mov	DWORD PTR [edi+4], eax
	pop	esi
$LN10@clear@12:

; 612  :   }

	ret	0
?clear@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEXXZ ENDP ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::clear
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Vector_base@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@IABV?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@Z
_TEXT	SEGMENT
??0?$_Vector_base@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@IABV?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@Z PROC ; stlp_std::priv::_Vector_base<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_Vector_base<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >, COMDAT
; _this$ = esi
; ___n$ = ecx

; 70   :     : _M_start(0), _M_finish(0), _M_end_of_storage(__a, 0) {

	push	edi

; 71   :     _M_start = _M_end_of_storage.allocate(__n, __n);

	mov	edi, ecx
	imul	edi, 132				; 00000084H
	xor	eax, eax
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 72   :     _M_finish = _M_start;
; 73   :     _M_end_of_storage._M_data = _M_start + __n;

	add	edi, eax
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], edi

; 74   :     _STLP_MPWFIX_TRY _STLP_MPWFIX_CATCH
; 75   :   }

	mov	eax, esi
	pop	edi
	ret	0
??0?$_Vector_base@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@IABV?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@Z ENDP ; stlp_std::priv::_Vector_base<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_Vector_base<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_erase@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEPAUfeel_visible_Item@Vision@Feel@@PAU456@ABU__false_type@3@@Z
_TEXT	SEGMENT
?_M_erase@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEPAUfeel_visible_Item@Vision@Feel@@PAU456@ABU__false_type@3@@Z PROC ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_M_erase, COMDAT
; _this$ = esi
; ___pos$ = edi

; 549  :     if (__pos + 1 != end())

	mov	eax, DWORD PTR [esi+4]
	lea	ecx, DWORD PTR [edi+132]
	cmp	ecx, eax
	je	SHORT $LN13@M_erase@10

; 550  :       _STLP_PRIV __copy_ptrs(__pos + 1, this->_M_finish, __pos, _TrivialCopy());

	sub	eax, ecx
	je	SHORT $LN13@M_erase@10
	push	eax
	push	ecx
	push	edi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN13@M_erase@10:

; 551  :     --this->_M_finish;

	add	DWORD PTR [esi+4], -132			; ffffff7cH

; 552  :     _STLP_STD::_Destroy(this->_M_finish);
; 553  :     return __pos;

	mov	eax, edi

; 554  :   }

	ret	0
?_M_erase@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEPAUfeel_visible_Item@Vision@Feel@@PAU456@ABU__false_type@3@@Z ENDP ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_M_erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@Z
_TEXT	SEGMENT
??0?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@Z PROC ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >, COMDAT
; _this$ = eax

; 208  :     : _STLP_PRIV _Vector_base<_Tp, _Alloc>(__a) {}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@Z ENDP ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?clear@?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAEXXZ PROC ; stlp_std::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::clear, COMDAT
; _this$ = edi

; 223  :   void clear() { _M_impl.clear(); }

	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ecx
	je	SHORT $LN12@clear@13
	push	esi
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN18@clear@13
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN18@clear@13:
	mov	DWORD PTR [edi+4], eax
	pop	esi
$LN12@clear@13:
	ret	0
?clear@?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAEXXZ ENDP ; stlp_std::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::clear
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?erase@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@PAU456@@Z
_TEXT	SEGMENT
?erase@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@PAU456@@Z PROC ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::erase, COMDAT
; _this$ = esi
; ___pos$ = edi

; 587  :     return _M_erase(__pos, _Movable());

	mov	eax, DWORD PTR [esi+4]
	lea	ecx, DWORD PTR [edi+132]
	cmp	ecx, eax
	je	SHORT $LN15@erase@9
	sub	eax, ecx
	je	SHORT $LN15@erase@9
	push	eax
	push	ecx
	push	edi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN15@erase@9:
	add	DWORD PTR [esi+4], -132			; ffffff7cH
	mov	eax, edi

; 588  :   }

	ret	0
?erase@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@PAU456@@Z ENDP ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@ABV012@@Z
_TEXT	SEGMENT
??0?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@ABV012@@Z PROC ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >, COMDAT
; _this$ = esi
; ___x$ = eax

; 236  :   { this->_M_finish = _STLP_PRIV __ucopy_ptrs(__x.begin(), __x.end(), this->_M_start, _TrivialUCopy()); }

	push	ebx
	mov	ebx, eax
	mov	ecx, DWORD PTR [ebx+4]
	sub	ecx, DWORD PTR [ebx]
	mov	eax, 1041204193				; 3e0f83e1H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	push	edi
	add	eax, edx
	mov	edi, eax
	imul	edi, 132				; 00000084H
	xor	ecx, ecx
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], ecx
	mov	DWORD PTR [esi+8], ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	add	edi, eax
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], edi
	mov	ecx, DWORD PTR [ebx+4]
	mov	ebx, DWORD PTR [ebx]
	cmp	ecx, ebx
	je	SHORT $LN35@Impl_vecto@6
	mov	edi, ecx
	sub	edi, ebx
	push	edi
	push	ebx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, edi
$LN35@Impl_vecto@6:
	pop	edi
	mov	DWORD PTR [esi+4], eax
	mov	eax, esi
	pop	ebx
	ret	0
??0?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@ABV012@@Z ENDP ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?back@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEAAUfeel_visible_Item@Vision@Feel@@XZ
_TEXT	SEGMENT
?back@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEAAUfeel_visible_Item@Vision@Feel@@XZ PROC ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::back, COMDAT
; _this$ = eax

; 195  :   reference back()              { return *(end() - 1); }

	mov	eax, DWORD PTR [eax+4]
	sub	eax, 132				; 00000084H
	ret	0
?back@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEAAUfeel_visible_Item@Vision@Feel@@XZ ENDP ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::back
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?rend@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@3@XZ
_TEXT	SEGMENT
?rend@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@3@XZ PROC ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::rend, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 177  :   reverse_iterator rend()                { return reverse_iterator(begin()); }

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	ret	0
?rend@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@3@XZ ENDP ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::rend
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?rbegin@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@3@XZ
_TEXT	SEGMENT
?rbegin@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@3@XZ PROC ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::rbegin, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 175  :   reverse_iterator rbegin()              { return reverse_iterator(end()); }

	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
	ret	0
?rbegin@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUfeel_visible_Item@Vision@Feel@@@3@XZ ENDP ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::rbegin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?clear_and_free@?$xr_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear_and_free@?$xr_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@@QAEXXZ PROC ; xr_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::clear_and_free, COMDAT
; _this$ = edi

; 128  : 	void	clear_and_free		()									{ inherited::clear();			}

	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ecx
	je	SHORT $LN14@clear_and_@3
	push	esi
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN20@clear_and_@3
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN20@clear_and_@3:
	mov	DWORD PTR [edi+4], eax
	pop	esi
$LN14@clear_and_@3:
	ret	0
?clear_and_free@?$xr_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@@QAEXXZ ENDP ; xr_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::clear_and_free
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAVISpatial@@V?$xalloc@PAVISpatial@@@@@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAVISpatial@@V?$xalloc@PAVISpatial@@@@@stlp_std@@QBEIXZ PROC ; stlp_std::vector<ISpatial *,xalloc<ISpatial *> >::size, COMDAT
; _this$ = ecx

; 89   :   size_type size() const        { return _M_impl.size(); }

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
	ret	0
?size@?$vector@PAVISpatial@@V?$xalloc@PAVISpatial@@@@@stlp_std@@QBEIXZ ENDP ; stlp_std::vector<ISpatial *,xalloc<ISpatial *> >::size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QBEIXZ PROC ; stlp_std::vector<CObject *,xalloc<CObject *> >::capacity, COMDAT
; _this$ = ecx

; 92   :   size_type capacity() const    { return _M_impl.capacity(); }

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
	ret	0
?capacity@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QBEIXZ ENDP ; stlp_std::vector<CObject *,xalloc<CObject *> >::capacity
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ??1?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@XZ PROC ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::~_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >, COMDAT
; _this$ = eax

; 286  :   ~vector() { _STLP_STD::_Destroy_Range(rbegin(), rend()); }

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN34@Impl_vecto@7
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN34@Impl_vecto@7:
	ret	0
??1?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@XZ ENDP ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::~_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?erase@?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@PAU345@@Z
_TEXT	SEGMENT
?erase@?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@PAU345@@Z PROC ; stlp_std::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::erase, COMDAT
; _this$ = esi
; ___pos$ = edi

; 206  :   {return cast_traits::to_value_type_ptr(_M_impl.erase(cast_traits::to_storage_type_ptr(__pos)));}

	mov	eax, DWORD PTR [esi+4]
	lea	ecx, DWORD PTR [edi+132]
	cmp	ecx, eax
	je	SHORT $LN21@erase@10
	sub	eax, ecx
	je	SHORT $LN21@erase@10
	push	eax
	push	ecx
	push	edi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN21@erase@10:
	add	DWORD PTR [esi+4], -132			; ffffff7cH
	mov	eax, edi
	ret	0
?erase@?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAEPAUfeel_visible_Item@Vision@Feel@@PAU345@@Z ENDP ; stlp_std::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAE@ABV01@@Z PROC ; stlp_std::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >, COMDAT
; _this$ = ecx
; ___x$ = eax

; 123  :   vector(const _Self& __x)

	push	esi
	mov	esi, ecx
	call	??0?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >
	mov	eax, esi
	pop	esi
	ret	0
??0?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAE@ABV01@@Z ENDP ; stlp_std::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?back@?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAEAAUfeel_visible_Item@Vision@Feel@@XZ
_TEXT	SEGMENT
?back@?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAEAAUfeel_visible_Item@Vision@Feel@@XZ PROC ; stlp_std::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::back, COMDAT
; _this$ = eax

; 100  :   reference back()              { return cast_traits::to_value_type_ref(_M_impl.back()); }

	mov	eax, DWORD PTR [eax+4]
	sub	eax, 132				; 00000084H
	ret	0
?back@?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAEAAUfeel_visible_Item@Vision@Feel@@XZ ENDP ; stlp_std::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::back
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?clear@?$xr_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$xr_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@@QAEXXZ PROC ; xr_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::clear, COMDAT
; _this$ = edi

; 133  : 	void	clear				()									{ clear_and_free	();			}

	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ecx
	je	SHORT $LN16@clear@14
	push	esi
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN22@clear@14
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN22@clear@14:
	mov	DWORD PTR [edi+4], eax
	pop	esi
$LN16@clear@14:
	ret	0
?clear@?$xr_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@@QAEXXZ ENDP ; xr_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::clear
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?size@?$xr_vector@PAVISpatial@@V?$xalloc@PAVISpatial@@@@@@QBEIXZ
_TEXT	SEGMENT
?size@?$xr_vector@PAVISpatial@@V?$xalloc@PAVISpatial@@@@@@QBEIXZ PROC ; xr_vector<ISpatial *,xalloc<ISpatial *> >::size, COMDAT
; _this$ = ecx

; 126  : 	u32		size				() const							{ return (u32)inherited::size();} 

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
	ret	0
?size@?$xr_vector@PAVISpatial@@V?$xalloc@PAVISpatial@@@@@@QBEIXZ ENDP ; xr_vector<ISpatial *,xalloc<ISpatial *> >::size
_TEXT	ENDS
PUBLIC	?o_delete@Vision@Feel@@AAEXPAVCObject@@@Z	; Feel::Vision::o_delete
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\feel_vision.cpp
;	COMDAT ?o_delete@Vision@Feel@@AAEXPAVCObject@@@Z
_TEXT	SEGMENT
_O$ = 8							; size = 4
?o_delete@Vision@Feel@@AAEXPAVCObject@@@Z PROC		; Feel::Vision::o_delete, COMDAT
; _this$ = ecx

; 56   : 	{

	push	esi
	mov	esi, ecx

; 57   : 		xr_vector<feel_visible_Item>::iterator I=feel_visible.begin(),TE=feel_visible.end();

	mov	eax, DWORD PTR [esi+72]
	mov	ecx, DWORD PTR [esi+76]

; 58   : 		for (; I!=TE; I++)

	cmp	eax, ecx
	je	SHORT $LN2@o_delete
	mov	edx, DWORD PTR _O$[esp]
$LL4@o_delete:

; 59   : 			if (I->O==O) {

	cmp	DWORD PTR [eax+116], edx
	je	SHORT $LN39@o_delete
	add	eax, 132				; 00000084H
	cmp	eax, ecx
	jne	SHORT $LL4@o_delete
	pop	esi

; 61   : 				return;
; 62   : 			}
; 63   : 	}

	ret	4
$LN39@o_delete:

; 60   : 				feel_visible.erase(I);

	lea	edx, DWORD PTR [eax+132]
	cmp	edx, ecx
	je	SHORT $LN34@o_delete
	sub	ecx, edx
	je	SHORT $LN34@o_delete
	push	ecx
	push	edx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN34@o_delete:
	add	DWORD PTR [esi+76], -132		; ffffff7cH
$LN2@o_delete:
	pop	esi

; 61   : 				return;
; 62   : 			}
; 63   : 	}

	ret	4
?o_delete@Vision@Feel@@AAEXPAVCObject@@@Z ENDP		; Feel::Vision::o_delete
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAE@XZ PROC ; stlp_std::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::~vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >, COMDAT
; _this$ = eax
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN36@vector@8
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN36@vector@8:
	ret	0
??1?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAE@XZ ENDP ; stlp_std::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::~vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$xr_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@@QAE@XZ
_TEXT	SEGMENT
??1?$xr_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@@QAE@XZ PROC ; xr_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::~xr_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >, COMDAT
; _this$ = eax
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN38@xr_vector@5
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN38@xr_vector@5:
	ret	0
??1?$xr_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@@QAE@XZ ENDP ; xr_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::~xr_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$xr_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xr_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@@QAE@ABV0@@Z PROC ; xr_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::xr_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >, COMDAT
; _this$ = ecx
; ___that$ = eax
	push	esi
	mov	esi, ecx
	call	??0?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >
	mov	eax, esi
	pop	esi
	ret	0
??0?$xr_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@@QAE@ABV0@@Z ENDP ; xr_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::xr_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >
_TEXT	ENDS
PUBLIC	?feel_vision_get_vispoint@Vision@Feel@@QAE?AU?$_vector3@M@@PAVCObject@@@Z ; Feel::Vision::feel_vision_get_vispoint
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\feel_vision.h
;	COMDAT ?feel_vision_get_vispoint@Vision@Feel@@QAE?AU?$_vector3@M@@PAVCObject@@@Z
_TEXT	SEGMENT
$T244520 = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__O$ = 12						; size = 4
?feel_vision_get_vispoint@Vision@Feel@@QAE?AU?$_vector3@M@@PAVCObject@@@Z PROC ; Feel::Vision::feel_vision_get_vispoint, COMDAT
; _this$ = ecx

; 58   : 			xr_vector<feel_visible_Item>::iterator I=feel_visible.begin(),E=feel_visible.end();

	mov	edx, DWORD PTR [ecx+72]
	mov	ecx, DWORD PTR [ecx+76]
	sub	esp, 12					; 0000000cH

; 59   : 			for (; I!=E; I++)		if (_O == I->O) {

	cmp	edx, ecx
	je	SHORT $LN3@feel_visio
	mov	eax, DWORD PTR __O$[esp+8]
$LL10@feel_visio:
	cmp	eax, DWORD PTR [edx+116]
	je	SHORT $LN34@feel_visio
	add	edx, 132				; 00000084H
	cmp	edx, ecx
	jne	SHORT $LL10@feel_visio
$LN3@feel_visio:

; 62   : 			}
; 63   : 			VERIFY2		(0, "There is no such object in the potentially visible list" );
; 64   : 			return		Fvector().set(flt_max,flt_max,flt_max);

	movss	xmm0, DWORD PTR __real@7f7fffff
	xor	eax, eax
	mov	DWORD PTR $T244520[esp+12], eax
	mov	DWORD PTR $T244520[esp+16], eax
	mov	DWORD PTR $T244520[esp+20], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+8]
	movss	DWORD PTR $T244520[esp+12], xmm0
	mov	ecx, DWORD PTR $T244520[esp+12]
	mov	DWORD PTR [eax], ecx
	movss	DWORD PTR $T244520[esp+16], xmm0
	mov	edx, DWORD PTR $T244520[esp+16]
	movss	DWORD PTR $T244520[esp+20], xmm0
	mov	ecx, DWORD PTR $T244520[esp+20]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx

; 65   : 		}

	add	esp, 12					; 0000000cH
	ret	8
$LN34@feel_visio:

; 60   : 				VERIFY	(positive(I->fuzzy));
; 61   : 				return	I->cp_LAST;

	mov	ecx, DWORD PTR [edx+104]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+8]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+108]
	mov	edx, DWORD PTR [edx+112]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edx

; 65   : 		}

	add	esp, 12					; 0000000cH
	ret	8
?feel_vision_get_vispoint@Vision@Feel@@QAE?AU?$_vector3@M@@PAVCObject@@@Z ENDP ; Feel::Vision::feel_vision_get_vispoint
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_heap.c
;	COMDAT ??$__pop_heap_aux@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@00U?$less@PAVCObject@@@0@@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 1
??$__pop_heap_aux@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@00U?$less@PAVCObject@@@0@@Z PROC ; stlp_std::__pop_heap_aux<CObject * *,CObject *,stlp_std::less<CObject *> >, COMDAT
; ___first$ = ecx
; ___last$ = edx

; 174  :   __pop_heap(__first, __last - 1, __last - 1, _Tp(*(__last - 1)), __comp,
; 175  :              _STLP_DISTANCE_TYPE(__first, _RandomAccessIterator));

	mov	eax, DWORD PTR [ecx]
	push	ebx
	mov	ebx, DWORD PTR [edx-4]
	mov	DWORD PTR [edx-4], eax
	mov	eax, DWORD PTR ___comp$[esp]
	sub	edx, ecx
	push	eax
	sub	edx, 4
	sar	edx, 2
	push	0
	call	??$__adjust_heap@PAPAVCObject@@HPAV1@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@HHPAV1@U?$less@PAVCObject@@@0@@Z ; stlp_std::__adjust_heap<CObject * *,int,CObject *,stlp_std::less<CObject *> >
	add	esp, 8
	pop	ebx

; 176  : }

	ret	0
??$__pop_heap_aux@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@00U?$less@PAVCObject@@@0@@Z ENDP ; stlp_std::__pop_heap_aux<CObject * *,CObject *,stlp_std::less<CObject *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$pop_heap@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@0U?$less@PAVCObject@@@0@@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 1
??$pop_heap@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@0U?$less@PAVCObject@@@0@@Z PROC ; stlp_std::pop_heap<CObject * *,stlp_std::less<CObject *> >, COMDAT
; ___first$ = ecx
; ___last$ = edx

; 184  :     __pop_heap_aux(__first, __last, _STLP_VALUE_TYPE(__first, _RandomAccessIterator), __comp);

	mov	eax, DWORD PTR [ecx]
	push	ebx
	mov	ebx, DWORD PTR [edx-4]
	mov	DWORD PTR [edx-4], eax
	mov	eax, DWORD PTR ___comp$[esp]
	sub	edx, ecx
	push	eax
	sub	edx, 4
	sar	edx, 2
	push	0
	call	??$__adjust_heap@PAPAVCObject@@HPAV1@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@HHPAV1@U?$less@PAVCObject@@@0@@Z ; stlp_std::__adjust_heap<CObject * *,int,CObject *,stlp_std::less<CObject *> >
	add	esp, 8
	pop	ebx

; 185  : }

	ret	0
??$pop_heap@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@0U?$less@PAVCObject@@@0@@Z ENDP ; stlp_std::pop_heap<CObject * *,stlp_std::less<CObject *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_heap.h
_TEXT	ENDS
;	COMDAT ??$sort_heap@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@0U?$less@PAVCObject@@@0@@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 1
??$sort_heap@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@0U?$less@PAVCObject@@@0@@Z PROC ; stlp_std::sort_heap<CObject * *,stlp_std::less<CObject *> >, COMDAT
; ___first$ = esi
; ___last$ = eax

; 111  :   while (__last - __first > 1)

	sub	eax, esi
	mov	ecx, eax
	and	ecx, -4					; fffffffcH
	cmp	ecx, 4
	jle	SHORT $LN1@sort_heap@5
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR ___comp$[esp+4]
	push	edi
$LL2@sort_heap@5:

; 112  :     pop_heap(__first, __last--, __comp);

	mov	edx, DWORD PTR [esi]
	mov	ebx, DWORD PTR [esi+eax-4]
	mov	DWORD PTR [esi+eax-4], edx
	lea	edi, DWORD PTR [eax-4]
	push	ebp
	mov	edx, edi
	sar	edx, 2
	push	0
	mov	ecx, esi
	call	??$__adjust_heap@PAPAVCObject@@HPAV1@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@HHPAV1@U?$less@PAVCObject@@@0@@Z ; stlp_std::__adjust_heap<CObject * *,int,CObject *,stlp_std::less<CObject *> >
	mov	eax, edi
	mov	ecx, edi
	and	ecx, -4					; fffffffcH
	add	esp, 8
	cmp	ecx, 4
	jg	SHORT $LL2@sort_heap@5
	pop	edi
	pop	ebp
	pop	ebx
$LN1@sort_heap@5:

; 113  : }

	ret	0
??$sort_heap@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@0U?$less@PAVCObject@@@0@@Z ENDP ; stlp_std::sort_heap<CObject * *,stlp_std::less<CObject *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.c
_TEXT	ENDS
;	COMDAT ??$__partial_sort@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@000U?$less@PAVCObject@@@1@@Z
_TEXT	SEGMENT
$T295730 = -8						; size = 1
tv288 = -4						; size = 4
___last$ = 8						; size = 4
___comp$ = 12						; size = 1
??$__partial_sort@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@000U?$less@PAVCObject@@@1@@Z PROC ; stlp_std::priv::__partial_sort<CObject * *,CObject *,stlp_std::less<CObject *> >, COMDAT
; ___first$ = ecx
; ___middle$ = eax

; 1209 :                     _RandomAccessIter __last, _Tp*, _Compare __comp) {

	sub	esp, 8
	push	ebx
	push	ebp
	push	esi
	mov	esi, eax

; 1210 :   make_heap(__first, __middle, __comp);

	mov	al, BYTE PTR ___comp$[esp+16]
	push	edi
	mov	edi, ecx
	mov	ebx, esi
	sub	ebx, edi
	mov	ebp, ebx
	sar	ebp, 2
	cmp	ebp, 2
	mov	BYTE PTR $T295730[esp+24], al
	mov	DWORD PTR tv288[esp+24], ebx
	jl	SHORT $LN13@partial_so@5
	lea	ecx, DWORD PTR $T295730[esp+24]
	push	ecx
	push	esi
	call	??$__make_heap@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@PAV1@H@stlp_std@@YAXPAPAVCObject@@0U?$less@PAVCObject@@@0@0PAH@Z ; stlp_std::__make_heap<CObject * *,stlp_std::less<CObject *>,CObject *,int>
	add	esp, 8
$LN13@partial_so@5:

; 1211 :   for (_RandomAccessIter __i = __middle; __i < __last; ++__i) {

	cmp	esi, DWORD PTR ___last$[esp+20]
	jae	SHORT $LN2@partial_so@5
	npad	7
$LL4@partial_so@5:

; 1212 :     if (__comp(*__i, *__first)) {

	mov	ebx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edi]
	cmp	ebx, eax
	jae	SHORT $LN3@partial_so@5

; 1213 :       _STLP_VERBOSE_ASSERT(!__comp(*__first, *__i), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 1214 :       __pop_heap(__first, __middle, __i, _Tp(*__i), __comp,
; 1215 :                  _STLP_DISTANCE_TYPE(__first, _RandomAccessIter));

	mov	edx, DWORD PTR ___comp$[esp+20]
	push	edx
	push	0
	mov	edx, ebp
	mov	ecx, edi
	mov	DWORD PTR [esi], eax
	call	??$__adjust_heap@PAPAVCObject@@HPAV1@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@HHPAV1@U?$less@PAVCObject@@@0@@Z ; stlp_std::__adjust_heap<CObject * *,int,CObject *,stlp_std::less<CObject *> >
	add	esp, 8
$LN3@partial_so@5:
	add	esi, 4
	cmp	esi, DWORD PTR ___last$[esp+20]
	jb	SHORT $LL4@partial_so@5

; 1211 :   for (_RandomAccessIter __i = __middle; __i < __last; ++__i) {

	mov	ebx, DWORD PTR tv288[esp+24]
$LN2@partial_so@5:

; 1216 :     }
; 1217 :   }
; 1218 :   sort_heap(__first, __middle, __comp);

	cmp	ebp, 1
	jle	SHORT $LN23@partial_so@5
	mov	eax, ebx
$LL24@partial_so@5:
	mov	ecx, DWORD PTR [edi]
	mov	ebx, DWORD PTR [edi+eax-4]
	mov	DWORD PTR [edi+eax-4], ecx
	lea	ebp, DWORD PTR [eax-4]
	mov	ecx, ebp
	sar	ecx, 2
	mov	eax, 2
	xor	esi, esi
	cmp	eax, ecx
	jge	SHORT $LN56@partial_so@5
	npad	2
$LL36@partial_so@5:
	mov	edx, DWORD PTR [edi+eax*4]
	cmp	edx, DWORD PTR [edi+eax*4-4]
	jae	SHORT $LN34@partial_so@5
	sub	eax, 1
$LN34@partial_so@5:
	mov	edx, DWORD PTR [edi+eax*4]
	mov	DWORD PTR [edi+esi*4], edx
	mov	esi, eax
	lea	eax, DWORD PTR [eax+eax+2]
	cmp	eax, ecx
	jl	SHORT $LL36@partial_so@5
$LN56@partial_so@5:
	jne	SHORT $LN33@partial_so@5
	mov	ecx, DWORD PTR [edi+eax*4-4]
	mov	DWORD PTR [edi+esi*4], ecx
	lea	esi, DWORD PTR [eax-1]
$LN33@partial_so@5:
	lea	eax, DWORD PTR [esi-1]
	cdq
	sub	eax, edx
	sar	eax, 1
	test	esi, esi
	mov	ecx, esi
	jle	SHORT $LN41@partial_so@5
$LL42@partial_so@5:
	mov	edx, DWORD PTR [edi+eax*4]
	cmp	edx, ebx
	jae	SHORT $LN41@partial_so@5
	mov	DWORD PTR [edi+ecx*4], edx
	mov	ecx, eax
	add	eax, -1
	cdq
	sub	eax, edx
	sar	eax, 1
	test	ecx, ecx
	jg	SHORT $LL42@partial_so@5
$LN41@partial_so@5:
	mov	eax, ebp
	mov	edx, ebp
	and	edx, -4					; fffffffcH
	cmp	edx, 4
	mov	DWORD PTR [edi+ecx*4], ebx
	jg	SHORT $LL24@partial_so@5
$LN23@partial_so@5:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 1219 : }

	add	esp, 8
	ret	0
??$__partial_sort@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@000U?$less@PAVCObject@@@1@@Z ENDP ; stlp_std::priv::__partial_sort<CObject * *,CObject *,stlp_std::less<CObject *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_uninitialized.h
_TEXT	ENDS
;	COMDAT ??$__ucopy_aux@PBUfeel_visible_Item@Vision@Feel@@PAU123@@priv@stlp_std@@YAPAUfeel_visible_Item@Vision@Feel@@PBU234@0PAU234@ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__ucopy_aux@PBUfeel_visible_Item@Vision@Feel@@PAU123@@priv@stlp_std@@YAPAUfeel_visible_Item@Vision@Feel@@PBU234@0PAU234@ABU__true_type@1@@Z PROC ; stlp_std::priv::__ucopy_aux<Feel::Vision::feel_visible_Item const *,Feel::Vision::feel_visible_Item *>, COMDAT
; ___first$ = ecx
; ___last$ = edx
; ___result$ = eax

; 125  :                                const __true_type& /*BothPtrType*/) {

	push	esi
	mov	esi, edx

; 126  :   return __ucopy_ptrs(__first, __last, __result,
; 127  :                       _UseTrivialUCopy(_STLP_VALUE_TYPE(__first, _InputIter),
; 128  :                                        _STLP_VALUE_TYPE(__result, _OutputIter))._Answer());

	cmp	esi, ecx
	je	SHORT $LN12@ucopy_aux@7
	sub	esi, ecx
	push	esi
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN12@ucopy_aux@7:
	pop	esi

; 129  : }

	ret	0
??$__ucopy_aux@PBUfeel_visible_Item@Vision@Feel@@PAU123@@priv@stlp_std@@YAPAUfeel_visible_Item@Vision@Feel@@PBU234@0PAU234@ABU__true_type@1@@Z ENDP ; stlp_std::priv::__ucopy_aux<Feel::Vision::feel_visible_Item const *,Feel::Vision::feel_visible_Item *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.c
_TEXT	ENDS
;	COMDAT ??$partial_sort@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@00U?$less@PAVCObject@@@0@@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___middle$ = 12						; size = 4
___comp$ = 16						; size = 1
??$partial_sort@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@00U?$less@PAVCObject@@@0@@Z PROC ; stlp_std::partial_sort<CObject * *,stlp_std::less<CObject *> >, COMDAT
; ___last$ = ecx

; 1235 :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__first, __middle))
; 1236 :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__middle, __last))
; 1237 :   _STLP_PRIV __partial_sort(__first, __middle, __last, _STLP_VALUE_TYPE(__first, _RandomAccessIter), __comp);

	mov	eax, DWORD PTR ___comp$[esp-4]
	push	eax
	mov	eax, DWORD PTR ___middle$[esp]
	push	ecx
	mov	ecx, DWORD PTR ___first$[esp+4]
	call	??$__partial_sort@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@000U?$less@PAVCObject@@@1@@Z ; stlp_std::priv::__partial_sort<CObject * *,CObject *,stlp_std::less<CObject *> >
	add	esp, 8

; 1238 : }

	ret	0
??$partial_sort@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@@stlp_std@@YAXPAPAVCObject@@00U?$less@PAVCObject@@@0@@Z ENDP ; stlp_std::partial_sort<CObject * *,stlp_std::less<CObject *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_uninitialized.h
_TEXT	ENDS
;	COMDAT ??$uninitialized_copy@PBUfeel_visible_Item@Vision@Feel@@PAU123@@stlp_std@@YAPAUfeel_visible_Item@Vision@Feel@@PBU123@0PAU123@@Z
_TEXT	SEGMENT
??$uninitialized_copy@PBUfeel_visible_Item@Vision@Feel@@PAU123@@stlp_std@@YAPAUfeel_visible_Item@Vision@Feel@@PBU123@0PAU123@@Z PROC ; stlp_std::uninitialized_copy<Feel::Vision::feel_visible_Item const *,Feel::Vision::feel_visible_Item *>, COMDAT
; ___first$ = ecx
; ___last$ = edx
; ___result$ = eax

; 144  : { return _STLP_PRIV __ucopy_aux(__first, __last, __result, _BothPtrType< _InputIter, _ForwardIter>::_Answer()); }

	push	esi
	mov	esi, edx
	cmp	esi, ecx
	je	SHORT $LN16@uninitiali@14
	sub	esi, ecx
	push	esi
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN16@uninitiali@14:
	pop	esi
	ret	0
??$uninitialized_copy@PBUfeel_visible_Item@Vision@Feel@@PAU123@@stlp_std@@YAPAUfeel_visible_Item@Vision@Feel@@PBU123@0PAU123@@Z ENDP ; stlp_std::uninitialized_copy<Feel::Vision::feel_visible_Item const *,Feel::Vision::feel_visible_Item *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.c
_TEXT	ENDS
;	COMDAT ??$__set_difference@PAPAVCObject@@PAPAV1@PAPAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@0000U?$less@PAVCObject@@@1@@Z
_TEXT	SEGMENT
___last1$ = 8						; size = 4
___last2$ = 12						; size = 4
___comp$ = 16						; size = 1
??$__set_difference@PAPAVCObject@@PAPAV1@PAPAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@0000U?$less@PAVCObject@@@1@@Z PROC ; stlp_std::priv::__set_difference<CObject * *,CObject * *,CObject * *,stlp_std::less<CObject *> >, COMDAT
; ___first1$ = ecx
; ___first2$ = edx
; ___result$ = eax

; 1698 :                              _OutputIter __result, _Compare __comp) {

	push	ebx
	mov	ebx, DWORD PTR ___last1$[esp]

; 1699 :   _STLP_DEBUG_CHECK(__check_range(__first1, __last1))
; 1700 :   _STLP_DEBUG_CHECK(__check_range(__first2, __last2))
; 1701 :   while (__first1 != __last1 && __first2 != __last2)

	cmp	ecx, ebx
	push	ebp
	mov	ebp, DWORD PTR ___last2$[esp+4]
	push	esi
	push	edi
	mov	edi, edx
	je	SHORT $LN5@set_differ
$LL6@set_differ:
	cmp	edi, ebp
	je	SHORT $LN5@set_differ

; 1702 :     if (__comp(*__first1, *__first2)) {

	mov	edx, DWORD PTR [ecx]
	mov	esi, DWORD PTR [edi]
	cmp	esi, edx
	jbe	SHORT $LN30@set_differ

; 1703 :       _STLP_VERBOSE_ASSERT(!__comp(*__first2, *__first1), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 1704 :       *__result = *__first1;

	mov	DWORD PTR [eax], edx

; 1705 :       ++__first1;

	add	ecx, 4

; 1706 :       ++__result;

	add	eax, 4
	jmp	SHORT $LN1@set_differ
$LN30@set_differ:

; 1707 :     }
; 1708 :     else if (__comp(*__first2, *__first1))
; 1709 :       ++__first2;
; 1710 :     else {

	jb	SHORT $LN31@set_differ

; 1711 :       ++__first1;

	add	ecx, 4
$LN31@set_differ:

; 1712 :       ++__first2;

	add	edi, 4
$LN1@set_differ:

; 1699 :   _STLP_DEBUG_CHECK(__check_range(__first1, __last1))
; 1700 :   _STLP_DEBUG_CHECK(__check_range(__first2, __last2))
; 1701 :   while (__first1 != __last1 && __first2 != __last2)

	cmp	ecx, ebx
	jne	SHORT $LL6@set_differ
$LN5@set_differ:

; 1713 :     }
; 1714 :   return copy(__first1, __last1, __result);

	sub	ebx, ecx
	mov	esi, ebx
	je	SHORT $LN28@set_differ
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN28@set_differ:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 1715 : }

	ret	0
??$__set_difference@PAPAVCObject@@PAPAV1@PAPAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@0000U?$less@PAVCObject@@@1@@Z ENDP ; stlp_std::priv::__set_difference<CObject * *,CObject * *,CObject * *,stlp_std::less<CObject *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__introsort_loop@PAPAVCObject@@PAV1@HU?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@00HU?$less@PAVCObject@@@1@@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
___formal$ = 16						; size = 4
___depth_limit$ = 20					; size = 4
___comp$ = 24						; size = 1
??$__introsort_loop@PAPAVCObject@@PAV1@HU?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@00HU?$less@PAVCObject@@@1@@Z PROC ; stlp_std::priv::__introsort_loop<CObject * *,CObject *,int,stlp_std::less<CObject *> >, COMDAT

; 960  :                       _Size __depth_limit, _Compare __comp) {

	push	ebp

; 961  :   while (__last - __first > __stl_threshold) {

	mov	ebp, DWORD PTR ___last$[esp]
	push	edi
	mov	edi, DWORD PTR ___first$[esp+4]
	mov	eax, ebp
	sub	eax, edi
	and	eax, -4					; fffffffcH
	cmp	eax, 64					; 00000040H
	jle	$LN2@introsort_@5
	push	ebx
	push	esi
	npad	4
$LL3@introsort_@5:

; 962  :     if (__depth_limit == 0) {

	cmp	DWORD PTR ___depth_limit$[esp+12], 0
	je	$LN63@introsort_@5

; 964  :       return;
; 965  :     }
; 966  :     --__depth_limit;

	sub	DWORD PTR ___depth_limit$[esp+12], 1

; 967  :     _RandomAccessIter __cut =
; 968  :       __unguarded_partition(__first, __last,
; 969  :                             _Tp(__median(*__first,
; 970  :                                          *(__first + (__last - __first)/2),
; 971  :                                          *(__last - 1), __comp)),
; 972  :        __comp);

	mov	ebx, DWORD PTR [ebp-4]
	mov	eax, ebp
	sub	eax, edi
	sar	eax, 2
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR [edi+eax*4]
	lea	edx, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ecx
	lea	esi, DWORD PTR [ebp-4]
	jae	SHORT $LN17@introsort_@5
	cmp	ecx, ebx
	jb	SHORT $LN9@introsort_@5
	cmp	eax, ebx
	jae	SHORT $LN14@introsort_@5
	mov	eax, esi
	jmp	SHORT $LN8@introsort_@5
$LN17@introsort_@5:
	cmp	eax, ebx
	jae	SHORT $LN11@introsort_@5
$LN14@introsort_@5:
	mov	eax, edi
	jmp	SHORT $LN8@introsort_@5
$LN11@introsort_@5:
	cmp	ecx, ebx
	mov	eax, esi
	jb	SHORT $LN8@introsort_@5
$LN9@introsort_@5:
	mov	eax, edx
$LN8@introsort_@5:
	mov	ecx, DWORD PTR [eax]
	mov	eax, ebp
	mov	esi, edi
$LL36@introsort_@5:
	cmp	DWORD PTR [esi], ecx
	jae	SHORT $LN33@introsort_@5
$LL34@introsort_@5:
	add	esi, 4
	cmp	DWORD PTR [esi], ecx
	jb	SHORT $LL34@introsort_@5
$LN33@introsort_@5:
	sub	eax, 4
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN31@introsort_@5
$LL32@introsort_@5:
	sub	eax, 4
	cmp	ecx, DWORD PTR [eax]
	jb	SHORT $LL32@introsort_@5
$LN31@introsort_@5:
	cmp	esi, eax
	jae	SHORT $LN62@introsort_@5
	mov	edx, DWORD PTR [esi]
	mov	ebx, DWORD PTR [eax]
	mov	DWORD PTR [esi], ebx
	mov	DWORD PTR [eax], edx
	add	esi, 4
	jmp	SHORT $LL36@introsort_@5
$LN62@introsort_@5:

; 973  :     __introsort_loop(__cut, __last, (_Tp*) 0, __depth_limit, __comp);

	mov	ecx, DWORD PTR ___comp$[esp+12]
	mov	edx, DWORD PTR ___depth_limit$[esp+12]
	push	ecx
	push	edx
	push	0
	push	ebp
	push	esi
	call	??$__introsort_loop@PAPAVCObject@@PAV1@HU?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@00HU?$less@PAVCObject@@@1@@Z ; stlp_std::priv::__introsort_loop<CObject * *,CObject *,int,stlp_std::less<CObject *> >

; 974  :     __last = __cut;

	mov	ebp, esi
	sub	esi, edi
	and	esi, -4					; fffffffcH
	add	esp, 20					; 00000014H
	cmp	esi, 64					; 00000040H
	jg	$LL3@introsort_@5
	pop	esi
	pop	ebx
	pop	edi
	pop	ebp

; 975  :   }
; 976  : }

	ret	0
$LN63@introsort_@5:

; 963  :       partial_sort(__first, __last, __last, __comp);

	mov	eax, DWORD PTR ___comp$[esp+12]
	push	eax
	push	ebp
	mov	eax, ebp
	mov	ecx, edi
	call	??$__partial_sort@PAPAVCObject@@PAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@000U?$less@PAVCObject@@@1@@Z ; stlp_std::priv::__partial_sort<CObject * *,CObject *,stlp_std::less<CObject *> >
	add	esp, 8
	pop	esi
	pop	ebx
$LN2@introsort_@5:
	pop	edi
	pop	ebp

; 975  :   }
; 976  : }

	ret	0
??$__introsort_loop@PAPAVCObject@@PAV1@HU?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@00HU?$less@PAVCObject@@@1@@Z ENDP ; stlp_std::priv::__introsort_loop<CObject * *,CObject *,int,stlp_std::less<CObject *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\fastdelegate.h
_TEXT	ENDS
;	COMDAT ??$?0VVision@Feel@@V01@@?$FastDelegate1@PAVCObject@@X@fastdelegate@@QAE@PAVVision@Feel@@P823@AGXPAVCObject@@@Z@Z
_TEXT	SEGMENT
_pthis$ = 8						; size = 4
??$?0VVision@Feel@@V01@@?$FastDelegate1@PAVCObject@@X@fastdelegate@@QAE@PAVVision@Feel@@P823@AGXPAVCObject@@@Z@Z PROC ; fastdelegate::FastDelegate1<CObject *,void>::FastDelegate1<CObject *,void><Feel::Vision,Feel::Vision>, COMDAT
; _this$ = esi

; 976  : 		FastDelegate1(Y *pthis, DesiredRetType (xr_stdcall X::* function_to_bind)(Param1 p1) ) {

	mov	ecx, esi
	call	??0?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AGXPAVCObject@@@ZP6GX0@ZP6GX0@Z@detail@fastdelegate@@QAE@XZ

; 977  : 			m_Closure.bindmemfunc(detail::implicit_cast<X*>(pthis), function_to_bind); }

	mov	eax, DWORD PTR _pthis$[esp-4]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], OFFSET ?feel_vision_relcase@Vision@Feel@@QAGXPAVCObject@@@Z ; Feel::Vision::feel_vision_relcase
	mov	eax, esi
	ret	4
??$?0VVision@Feel@@V01@@?$FastDelegate1@PAVCObject@@X@fastdelegate@@QAE@PAVVision@Feel@@P823@AGXPAVCObject@@@Z@Z ENDP ; fastdelegate::FastDelegate1<CObject *,void>::FastDelegate1<CObject *,void><Feel::Vision,Feel::Vision>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ??$_M_allocate_and_copy@PBUfeel_visible_Item@Vision@Feel@@@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEPAUfeel_visible_Item@Vision@Feel@@AAIPBU345@1@Z
_TEXT	SEGMENT
??$_M_allocate_and_copy@PBUfeel_visible_Item@Vision@Feel@@@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEPAUfeel_visible_Item@Vision@Feel@@AAIPBU345@1@Z PROC ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_M_allocate_and_copy<Feel::Vision::feel_visible_Item const *>, COMDAT
; ___n$ = eax
; ___first$ = ebx
; ___last$ = ecx

; 634  :                                _ForwardIterator __first, _ForwardIterator __last)
; 635  : #else /* _STLP_MEMBER_TEMPLATES */
; 636  :   pointer _M_allocate_and_copy(size_type& __n,
; 637  :                                const_pointer __first, const_pointer __last)
; 638  : #endif /* _STLP_MEMBER_TEMPLATES */
; 639  :   {
; 640  :     pointer __result = this->_M_end_of_storage.allocate(__n, __n);

	mov	eax, DWORD PTR [eax]
	imul	eax, 132				; 00000084H
	push	esi
	push	edi
	mov	esi, ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 641  :     _STLP_TRY {
; 642  :       uninitialized_copy(__first, __last, __result);

	cmp	esi, ebx
	mov	edi, eax
	je	SHORT $LN28@M_allocate@7
	sub	esi, ebx
	push	esi
	push	ebx
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH

; 643  :       return __result;

	mov	eax, edi
$LN28@M_allocate@7:
	pop	edi
	pop	esi

; 644  :     }
; 645  :     _STLP_UNWIND(this->_M_end_of_storage.deallocate(__result, __n))
; 646  :     _STLP_RET_AFTER_THROW(__result)
; 647  :   }

	ret	0
??$_M_allocate_and_copy@PBUfeel_visible_Item@Vision@Feel@@@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEPAUfeel_visible_Item@Vision@Feel@@AAIPBU345@1@Z ENDP ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_M_allocate_and_copy<Feel::Vision::feel_visible_Item const *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_clear@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEXXZ
_TEXT	SEGMENT
?_M_clear@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEXXZ PROC ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_M_clear, COMDAT
; _this$ = eax

; 616  :     _STLP_STD::_Destroy_Range(rbegin(), rend());
; 617  :     this->_M_end_of_storage.deallocate(this->_M_start, this->_M_end_of_storage._M_data - this->_M_start);

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN31@M_clear@6
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN31@M_clear@6:

; 618  :   }

	ret	0
?_M_clear@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEXXZ ENDP ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_M_clear
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.c
_TEXT	ENDS
;	COMDAT ??$set_difference@PAPAVCObject@@PAPAV1@PAPAV1@@stlp_std@@YAPAPAVCObject@@PAPAV1@0000@Z
_TEXT	SEGMENT
$T296473 = -4						; size = 1
___first1$ = 8						; size = 4
___first2$ = 12						; size = 4
___result$ = 16						; size = 4
??$set_difference@PAPAVCObject@@PAPAV1@PAPAV1@@stlp_std@@YAPAPAVCObject@@PAPAV1@0000@Z PROC ; stlp_std::set_difference<CObject * *,CObject * *,CObject * *>, COMDAT
; ___last1$ = edx
; ___last2$ = ecx

; 1722 :                            _OutputIter __result) {

	push	ecx

; 1723 :   return _STLP_PRIV __set_difference(__first1, __last1, __first2, __last2, __result,
; 1724 :                                      _STLP_PRIV __less(_STLP_VALUE_TYPE(__first1, _InputIter1)));

	mov	eax, DWORD PTR $T296473[esp+4]
	push	eax
	mov	eax, DWORD PTR ___result$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR ___first1$[esp+8]
	push	edx
	mov	edx, DWORD PTR ___first2$[esp+12]
	call	??$__set_difference@PAPAVCObject@@PAPAV1@PAPAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@0000U?$less@PAVCObject@@@1@@Z ; stlp_std::priv::__set_difference<CObject * *,CObject * *,CObject * *,stlp_std::less<CObject *> >

; 1725 : }

	add	esp, 16					; 00000010H
	ret	0
??$set_difference@PAPAVCObject@@PAPAV1@PAPAV1@@stlp_std@@YAPAPAVCObject@@PAPAV1@0000@Z ENDP ; stlp_std::set_difference<CObject * *,CObject * *,CObject * *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$sort@PAPAVCObject@@@stlp_std@@YAXPAPAVCObject@@0@Z
_TEXT	SEGMENT
$T296496 = -4						; size = 1
$T296483 = -4						; size = 1
??$sort@PAPAVCObject@@@stlp_std@@YAXPAPAVCObject@@0@Z PROC ; stlp_std::sort<CObject * *>, COMDAT
; ___first$ = edi
; ___last$ = esi

; 981  : void sort(_RandomAccessIter __first, _RandomAccessIter __last) {

	push	ecx

; 982  :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__first, __last))
; 983  :   if (__first != __last) {

	cmp	edi, esi
	je	SHORT $LN1@sort@5

; 984  :     _STLP_PRIV __introsort_loop(__first, __last,
; 985  :                                 _STLP_VALUE_TYPE(__first, _RandomAccessIter),
; 986  :                                 _STLP_PRIV __lg(__last - __first) * 2,
; 987  :                                 _STLP_PRIV __less(_STLP_VALUE_TYPE(__first, _RandomAccessIter)));

	mov	eax, esi
	sub	eax, edi
	sar	eax, 2
	xor	ecx, ecx
	cmp	eax, 1
	je	SHORT $LN6@sort@5
$LL8@sort@5:
	sar	eax, 1
	add	ecx, 1
	cmp	eax, 1
	jne	SHORT $LL8@sort@5
$LN6@sort@5:
	mov	eax, DWORD PTR $T296483[esp+4]
	push	eax
	add	ecx, ecx
	push	ecx
	push	0
	push	esi
	push	edi
	call	??$__introsort_loop@PAPAVCObject@@PAV1@HU?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@00HU?$less@PAVCObject@@@1@@Z ; stlp_std::priv::__introsort_loop<CObject * *,CObject *,int,stlp_std::less<CObject *> >

; 988  :     _STLP_PRIV __final_insertion_sort(__first, __last,
; 989  :                                       _STLP_PRIV __less(_STLP_VALUE_TYPE(__first, _RandomAccessIter)));

	mov	edx, DWORD PTR $T296496[esp+24]
	push	edx
	push	esi
	mov	eax, edi
	call	??$__final_insertion_sort@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@0U?$less@PAVCObject@@@1@@Z ; stlp_std::priv::__final_insertion_sort<CObject * *,stlp_std::less<CObject *> >
	add	esp, 28					; 0000001cH
$LN1@sort@5:

; 990  :   }
; 991  : }

	pop	ecx
	ret	0
??$sort@PAPAVCObject@@@stlp_std@@YAXPAPAVCObject@@0@Z ENDP ; stlp_std::sort<CObject * *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.c
_TEXT	ENDS
;	COMDAT ??4?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z
_TEXT	SEGMENT
tv420 = -4						; size = 4
___result$296658 = 8					; size = 4
___x$ = 8						; size = 4
??4?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z PROC ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::operator=, COMDAT
; _this$ = edi

; 177  : vector<_Tp, _Alloc>& vector<_Tp, _Alloc>::operator = (const vector<_Tp, _Alloc>& __x) {

	push	ecx

; 178  :   if (&__x != this) {

	mov	eax, DWORD PTR ___x$[esp]
	cmp	eax, edi
	push	ebx
	push	ebp
	push	esi
	je	$LN97@operator@46

; 179  :     const size_type __xlen = __x.size();

	mov	ebp, DWORD PTR [eax+4]
	mov	ebx, DWORD PTR [eax]
	mov	ecx, ebp
	sub	ecx, ebx
	mov	eax, 1041204193				; 3e0f83e1H
	imul	ecx

; 180  :     if (__xlen > capacity()) {

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edi+8]
	sar	edx, 5
	sub	ecx, eax
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
	mov	eax, 1041204193				; 3e0f83e1H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	cmp	esi, eax
	jbe	SHORT $LN4@operator@46

; 181  :       size_type __len = __xlen;
; 182  :       pointer __tmp = _M_allocate_and_copy(__len, __CONST_CAST(const_pointer, __x._M_start) + 0,
; 183  :                                                   __CONST_CAST(const_pointer, __x._M_finish) + 0);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	mov	eax, esi
	imul	eax, 132				; 00000084H
	push	eax
	mov	DWORD PTR tv420[esp+20], eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	cmp	ebp, ebx
	mov	DWORD PTR ___result$296658[esp+12], eax
	je	SHORT $LN39@operator@46
	sub	ebp, ebx
	push	ebp
	push	ebx
	push	eax
	call	_memcpy
	mov	eax, DWORD PTR ___result$296658[esp+24]
	add	esp, 12					; 0000000cH
$LN39@operator@46:

; 184  :       _M_clear();

	mov	ecx, DWORD PTR [edi]
	test	ecx, ecx
	je	SHORT $LN70@operator@46
	push	ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	eax, DWORD PTR ___result$296658[esp+12]
$LN70@operator@46:

; 185  :       this->_M_start = __tmp;
; 186  :       this->_M_end_of_storage._M_data = this->_M_start + __len;

	mov	ecx, DWORD PTR tv420[esp+16]

; 196  :     }
; 197  :     this->_M_finish = this->_M_start + __xlen;

	imul	esi, 132				; 00000084H
	add	ecx, eax
	add	esi, eax
	mov	DWORD PTR [edi], eax
	mov	DWORD PTR [edi+8], ecx
	mov	DWORD PTR [edi+4], esi

; 198  :   }
; 199  :   return *this;

	mov	eax, edi

; 200  : }

	pop	esi
	pop	ebp
	pop	ebx
	pop	ecx
	ret	4
$LN4@operator@46:

; 187  :     } else if (size() >= __xlen) {

	mov	edx, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [edi]
	sub	edx, ecx
	mov	eax, 1041204193				; 3e0f83e1H
	imul	edx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	cmp	eax, esi
	jb	SHORT $LN2@operator@46

; 188  :       pointer __i = _STLP_PRIV __copy_ptrs(__CONST_CAST(const_pointer, __x._M_start) + 0,
; 189  :                                            __CONST_CAST(const_pointer, __x._M_finish) + 0, this->_M_start, _TrivialCopy());

	sub	ebp, ebx
	je	SHORT $LN96@operator@46
	push	ebp
	push	ebx
	push	ecx
	call	DWORD PTR __imp__memmove

; 190  :       _STLP_STD::_Destroy_Range(__i, this->_M_finish);
; 191  :     } else {

	jmp	SHORT $LN98@operator@46
$LN2@operator@46:

; 192  :       _STLP_PRIV __copy_ptrs(__CONST_CAST(const_pointer, __x._M_start),
; 193  :                              __CONST_CAST(const_pointer, __x._M_start) + size(), this->_M_start, _TrivialCopy());

	imul	eax, 132				; 00000084H
	sub	eax, ebx
	add	eax, ebx
	je	SHORT $LN87@operator@46
	push	eax
	push	ebx
	push	ecx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN87@operator@46:

; 194  :       _STLP_PRIV __ucopy_ptrs(__CONST_CAST(const_pointer, __x._M_start) + size(),
; 195  :                               __CONST_CAST(const_pointer, __x._M_finish) + 0, this->_M_finish, _TrivialUCopy());

	mov	ebp, DWORD PTR [edi+4]
	mov	edx, DWORD PTR ___x$[esp+12]
	mov	ebx, DWORD PTR [edx+4]
	mov	ecx, ebp
	sub	ecx, DWORD PTR [edi]
	mov	eax, 1041204193				; 3e0f83e1H
	imul	ecx
	mov	ecx, DWORD PTR ___x$[esp+12]
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	imul	eax, 132				; 00000084H
	add	eax, DWORD PTR [ecx]
	cmp	ebx, eax
	je	SHORT $LN96@operator@46
	sub	ebx, eax
	push	ebx
	push	eax
	push	ebp
	call	_memcpy
$LN98@operator@46:
	add	esp, 12					; 0000000cH
$LN96@operator@46:

; 196  :     }
; 197  :     this->_M_finish = this->_M_start + __xlen;

	imul	esi, 132				; 00000084H
	add	esi, DWORD PTR [edi]
	mov	DWORD PTR [edi+4], esi
$LN97@operator@46:

; 200  : }

	pop	esi
	pop	ebp
	mov	eax, edi
	pop	ebx
	pop	ecx
	ret	4
??4?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ENDP ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_insert_overflow@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEXPAUfeel_visible_Item@Vision@Feel@@ABU456@ABU__true_type@3@I_N@Z
_TEXT	SEGMENT
___fill_len$ = -8					; size = 4
___new_start$ = -4					; size = 4
_this$ = 8						; size = 4
___old_size$ = 12					; size = 4
___pos$ = 12						; size = 4
___x$ = 16						; size = 4
?_M_insert_overflow@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEXPAUfeel_visible_Item@Vision@Feel@@ABU456@ABU__true_type@3@I_N@Z PROC ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_M_insert_overflow, COMDAT

; 109  :                                              size_type __fill_len, bool __atend ) {

	sub	esp, 8
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR ___pos$[esp+12]
	push	esi

; 110  :   const size_type __old_size = size();

	mov	esi, DWORD PTR _this$[esp+16]
	mov	ecx, DWORD PTR [esi+4]
	sub	ecx, DWORD PTR [esi]
	mov	eax, 1041204193				; 3e0f83e1H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	push	edi
	add	eax, edx

; 111  :   size_type __len = __old_size + (max)(__old_size, __fill_len);

	lea	ecx, DWORD PTR ___fill_len$[esp+24]
	push	ecx
	lea	edx, DWORD PTR ___old_size$[esp+24]
	push	edx
	mov	DWORD PTR ___fill_len$[esp+32], 1
	mov	DWORD PTR ___old_size$[esp+28], eax
	call	??$max@I@stlp_std@@YAABIABI0@Z		; stlp_std::max<unsigned int>
	mov	ebx, DWORD PTR [eax]
	add	ebx, DWORD PTR ___old_size$[esp+28]

; 112  : 
; 113  :   pointer __new_start = this->_M_end_of_storage.allocate(__len, __len);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	imul	ebx, 132				; 00000084H
	add	esp, 8
	push	ebx
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	mov	edi, eax

; 114  :   pointer __new_finish = __STATIC_CAST(pointer, _STLP_PRIV __copy_trivial(this->_M_start, __pos, __new_start));

	mov	eax, DWORD PTR [esi]
	sub	ebp, eax
	mov	DWORD PTR ___new_start$[esp+24], edi
	je	SHORT $LN22@M_insert_o@3
	push	ebp
	push	eax
	push	edi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, ebp
	jmp	SHORT $LN23@M_insert_o@3
$LN22@M_insert_o@3:
	mov	eax, edi
$LN23@M_insert_o@3:

; 115  :   // handle insertion
; 116  :   __new_finish = _STLP_PRIV __fill_n(__new_finish, __fill_len, __x);

	mov	edx, DWORD PTR ___fill_len$[esp+24]
	test	edx, edx
	mov	ebp, eax
	jbe	SHORT $LN24@M_insert_o@3
$LL26@M_insert_o@3:
	mov	esi, DWORD PTR ___x$[esp+20]
	mov	edi, ebp
	sub	edx, 1
	mov	ecx, 33					; 00000021H
	add	ebp, 132				; 00000084H
	test	edx, edx
	rep movsd
	ja	SHORT $LL26@M_insert_o@3
	mov	edi, DWORD PTR ___new_start$[esp+24]
	mov	esi, DWORD PTR _this$[esp+20]
$LN24@M_insert_o@3:

; 117  :   if (!__atend)
; 118  :     __new_finish = __STATIC_CAST(pointer, _STLP_PRIV __copy_trivial(__pos, this->_M_finish, __new_finish)); // copy remainder
; 119  :   _M_clear();

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN63@M_insert_o@3
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN63@M_insert_o@3:

; 120  :   _M_set(__new_start, __new_finish, __new_start + __len);

	add	ebx, edi
	mov	DWORD PTR [esi], edi

; 121  : }

	pop	edi
	mov	DWORD PTR [esi+4], ebp
	mov	DWORD PTR [esi+8], ebx
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	12					; 0000000cH
?_M_insert_overflow@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEXPAUfeel_visible_Item@Vision@Feel@@ABU456@ABU__true_type@3@I_N@Z ENDP ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_M_insert_overflow
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?push_back@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEXABUfeel_visible_Item@Vision@Feel@@@Z
_TEXT	SEGMENT
?push_back@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEXABUfeel_visible_Item@Vision@Feel@@@Z PROC ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::push_back, COMDAT
; _this$ = eax
; ___x$ = ecx

; 360  :   void push_back(const _Tp& __x) {

	push	esi
	push	edi

; 361  : #endif /*!_STLP_DONT_SUP_DFLT_PARAM && !_STLP_NO_ANACHRONISMS*/
; 362  :     if (this->_M_finish != this->_M_end_of_storage._M_data) {

	mov	edi, DWORD PTR [eax+4]
	cmp	edi, DWORD PTR [eax+8]
	mov	esi, ecx
	je	SHORT $LN2@push_back@9

; 363  :       _Copy_Construct(this->_M_finish, __x);

	test	edi, edi
	je	SHORT $LN7@push_back@9
	mov	ecx, 33					; 00000021H
	rep movsd
$LN7@push_back@9:

; 364  :       ++this->_M_finish;

	add	DWORD PTR [eax+4], 132			; 00000084H
	pop	edi
	pop	esi

; 368  :   }

	ret	0
$LN2@push_back@9:

; 365  :     }
; 366  :     else
; 367  :       _M_insert_overflow(this->_M_finish, __x, _TrivialCopy(), 1UL, true);

	push	esi
	push	edi
	push	eax
	call	?_M_insert_overflow@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEXPAUfeel_visible_Item@Vision@Feel@@ABU456@ABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_M_insert_overflow
	pop	edi
	pop	esi

; 368  :   }

	ret	0
?push_back@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEXABUfeel_visible_Item@Vision@Feel@@@Z ENDP ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::push_back
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ??0?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAE@ABV?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@Z
_TEXT	SEGMENT
??0?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAE@ABV?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@Z PROC ; stlp_std::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >, COMDAT
; _this$ = eax

; 106  :   explicit vector(const allocator_type& __a = allocator_type())

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAE@ABV?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@Z ENDP ; stlp_std::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?push_back@?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAEXABUfeel_visible_Item@Vision@Feel@@@Z
_TEXT	SEGMENT
?push_back@?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAEXABUfeel_visible_Item@Vision@Feel@@@Z PROC ; stlp_std::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::push_back, COMDAT
; _this$ = eax
; ___x$ = ecx

; 171  :   { _M_impl.push_back(cast_traits::to_storage_type_cref(__x)); }

	push	esi
	push	edi
	mov	edi, DWORD PTR [eax+4]
	cmp	edi, DWORD PTR [eax+8]
	mov	esi, ecx
	je	SHORT $LN6@push_back@10
	test	edi, edi
	je	SHORT $LN11@push_back@10
	mov	ecx, 33					; 00000021H
	rep movsd
$LN11@push_back@10:
	add	DWORD PTR [eax+4], 132			; 00000084H
	pop	edi
	pop	esi
	ret	0
$LN6@push_back@10:
	push	esi
	push	edi
	push	eax
	call	?_M_insert_overflow@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEXPAUfeel_visible_Item@Vision@Feel@@ABU456@ABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_M_insert_overflow
	pop	edi
	pop	esi
	ret	0
?push_back@?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAEXABUfeel_visible_Item@Vision@Feel@@@Z ENDP ; stlp_std::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::push_back
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
??4?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAEAAV01@ABV01@@Z PROC ; stlp_std::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::operator=, COMDAT
; _this$ = ecx
; ___x$ = eax

; 149  :   _Self& operator=(const _Self& __x) { _M_impl = __x._M_impl; return *this; }

	push	edi
	mov	edi, ecx
	push	eax
	call	??4?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::operator=
	mov	eax, edi
	pop	edi
	ret	0
??4?$vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@stlp_std@@QAEAAV01@ABV01@@Z ENDP ; stlp_std::vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::operator=
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xr_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xr_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@@QAE@XZ PROC ; xr_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::xr_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >, COMDAT
; _this$ = eax

; 123  : 			xr_vector			()									: inherited	()					{}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$xr_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@@QAE@XZ ENDP ; xr_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::xr_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??A?$xr_vector@PAVISpatial@@V?$xalloc@PAVISpatial@@@@@@QAEAAPAVISpatial@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$xr_vector@PAVISpatial@@V?$xalloc@PAVISpatial@@@@@@QAEAAPAVISpatial@@I@Z PROC ; xr_vector<ISpatial *,xalloc<ISpatial *> >::operator[], COMDAT
; _this$ = eax

; 139  : 	reference operator[]		(size_type _Pos)					{ {VERIFY2(_Pos<size(),make_string("index is out of range: index requested[%d], size of container[%d]", _Pos, size()).c_str());} return (*(begin() + _Pos)); }

	mov	eax, DWORD PTR [eax]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	ecx, DWORD PTR __Pos$[esp]
	add	esp, 4
	lea	eax, DWORD PTR [eax+ecx*4]
	ret	4
??A?$xr_vector@PAVISpatial@@V?$xalloc@PAVISpatial@@@@@@QAEAAPAVISpatial@@I@Z ENDP ; xr_vector<ISpatial *,xalloc<ISpatial *> >::operator[]
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0feel_visible_Item@Vision@Feel@@QAE@XZ
_TEXT	SEGMENT
??0feel_visible_Item@Vision@Feel@@QAE@XZ PROC		; Feel::Vision::feel_visible_Item::feel_visible_Item, COMDAT
; _this$ = eax
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax], xmm0
	movss	DWORD PTR [eax+4], xmm0
	movss	DWORD PTR [eax+8], xmm0
	movss	DWORD PTR [eax+12], xmm0
	movss	DWORD PTR [eax+16], xmm0
	movss	DWORD PTR [eax+20], xmm0
	movss	DWORD PTR [eax+24], xmm0
	mov	DWORD PTR [eax+28], 0
	movss	DWORD PTR [eax+32], xmm0
	movss	DWORD PTR [eax+36], xmm0
	movss	DWORD PTR [eax+40], xmm0
	movss	DWORD PTR [eax+44], xmm0
	movss	DWORD PTR [eax+48], xmm0
	movss	DWORD PTR [eax+52], xmm0
	movss	DWORD PTR [eax+56], xmm0
	movss	DWORD PTR [eax+60], xmm0
	movss	DWORD PTR [eax+64], xmm0
	ret	0
??0feel_visible_Item@Vision@Feel@@QAE@XZ ENDP		; Feel::Vision::feel_visible_Item::feel_visible_Item
_TEXT	ENDS
PUBLIC	__real@b3d6bf95
PUBLIC	?o_new@Vision@Feel@@AAEXPAVCObject@@@Z		; Feel::Vision::o_new
;	COMDAT __real@b3d6bf95
; File d:\clearsky\sources\engine\xrcore\_vector3d.h
CONST	SEGMENT
__real@b3d6bf95 DD 0b3d6bf95r			; -1e-007
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\feel_vision.cpp
CONST	ENDS
;	COMDAT ?o_new@Vision@Feel@@AAEXPAVCObject@@@Z
_TEXT	SEGMENT
$T297287 = -144						; size = 12
$T297286 = -144						; size = 12
$T297285 = -132						; size = 132
_O$ = 8							; size = 4
?o_new@Vision@Feel@@AAEXPAVCObject@@@Z PROC		; Feel::Vision::o_new, COMDAT
; _this$ = ecx

; 43   : 	{

	sub	esp, 144				; 00000090H

; 44   : 		feel_visible.push_back	(feel_visible_Item());

	xorps	xmm0, xmm0
	push	ebx
	mov	ebx, ecx
	push	esi
	lea	eax, DWORD PTR [ebx+72]
	push	edi
	mov	edi, DWORD PTR [eax+4]
	cmp	edi, DWORD PTR [eax+8]
	movss	DWORD PTR $T297285[esp+156], xmm0
	movss	DWORD PTR $T297285[esp+160], xmm0
	movss	DWORD PTR $T297285[esp+164], xmm0
	movss	DWORD PTR $T297285[esp+168], xmm0
	movss	DWORD PTR $T297285[esp+172], xmm0
	movss	DWORD PTR $T297285[esp+176], xmm0
	movss	DWORD PTR $T297285[esp+180], xmm0
	mov	DWORD PTR $T297285[esp+184], 0
	movss	DWORD PTR $T297285[esp+188], xmm0
	movss	DWORD PTR $T297285[esp+192], xmm0
	movss	DWORD PTR $T297285[esp+196], xmm0
	movss	DWORD PTR $T297285[esp+200], xmm0
	movss	DWORD PTR $T297285[esp+204], xmm0
	movss	DWORD PTR $T297285[esp+208], xmm0
	movss	DWORD PTR $T297285[esp+212], xmm0
	movss	DWORD PTR $T297285[esp+216], xmm0
	movss	DWORD PTR $T297285[esp+220], xmm0
	je	SHORT $LN22@o_new
	test	edi, edi
	je	SHORT $LN27@o_new
	mov	ecx, 33					; 00000021H
	lea	esi, DWORD PTR $T297285[esp+156]
	rep movsd
$LN27@o_new:
	add	DWORD PTR [eax+4], 132			; 00000084H
	jmp	SHORT $LN21@o_new
$LN22@o_new:
	lea	ecx, DWORD PTR $T297285[esp+156]
	push	ecx
	push	edi
	push	eax
	call	?_M_insert_overflow@?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@AAEXPAUfeel_visible_Item@Vision@Feel@@ABU456@ABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_M_insert_overflow
	xorps	xmm0, xmm0
$LN21@o_new:

; 45   : 		feel_visible_Item&	I	= feel_visible.back();

	mov	esi, DWORD PTR [ebx+76]

; 46   : 		I.O						= O;

	mov	edi, DWORD PTR _O$[esp+152]

; 47   : 		I.Cache_vis				= 1.f;

	movss	xmm1, DWORD PTR __real@3f800000
	sub	esi, 132				; 00000084H
	mov	DWORD PTR [esi+116], edi
	movss	DWORD PTR [esi+124], xmm1

; 48   : 		I.Cache.verts[0].set	(0,0,0);

	movss	DWORD PTR [esi+32], xmm0
	movss	DWORD PTR [esi+36], xmm0
	movss	DWORD PTR [esi+40], xmm0

; 49   : 		I.Cache.verts[1].set	(0,0,0);

	movss	DWORD PTR [esi+44], xmm0
	movss	DWORD PTR [esi+48], xmm0
	movss	DWORD PTR [esi+52], xmm0

; 50   : 		I.Cache.verts[2].set	(0,0,0);

	movss	DWORD PTR [esi+56], xmm0
	movss	DWORD PTR [esi+60], xmm0
	movss	DWORD PTR [esi+64], xmm0

; 51   : 		I.fuzzy					= -EPS_S;

	movss	xmm0, DWORD PTR __real@b3d6bf95
	movss	DWORD PTR [esi+120], xmm0

; 52   : 		I.cp_LP					= O->get_new_local_point_on_mesh( I.bone_id );

	mov	edx, DWORD PTR [edi]
	mov	edx, DWORD PTR [edx+124]
	lea	ebx, DWORD PTR [esi+128]
	push	ebx
	lea	eax, DWORD PTR $T297286[esp+160]
	push	eax
	mov	ecx, edi
	call	edx
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [esi+68], edx
	mov	edx, DWORD PTR [eax+4]
	lea	ecx, DWORD PTR [esi+68]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 53   : 		I.cp_LAST				= O->get_last_local_point_on_mesh( I.cp_LP, I.bone_id );

	movzx	eax, WORD PTR [ebx]
	mov	edx, DWORD PTR [edi]
	mov	edx, DWORD PTR [edx+128]
	push	eax
	push	ecx
	lea	ecx, DWORD PTR $T297287[esp+164]
	push	ecx
	mov	ecx, edi
	call	edx
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [esi+104], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi+108], edx
	mov	eax, DWORD PTR [eax+8]
	pop	edi
	mov	DWORD PTR [esi+112], eax
	pop	esi
	pop	ebx

; 54   : 	}

	add	esp, 144				; 00000090H
	ret	4
?o_new@Vision@Feel@@AAEXPAVCObject@@@Z ENDP		; Feel::Vision::o_new
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?feel_vision_callback@Feel@@YAHAAUrq_result@collide@@PAX@Z
_TEXT	SEGMENT
_result$ = 8						; size = 4
_params$ = 12						; size = 4
?feel_vision_callback@Feel@@YAHAAUrq_result@collide@@PAX@Z PROC ; Feel::feel_vision_callback, COMDAT

; 29   : 	{

	push	esi

; 30   : 		SFeelParam* fp	= (SFeelParam*)params;
; 31   : 		float vis		= fp->parent->feel_vision_mtl_transp(result.O, result.element);

	mov	esi, DWORD PTR _result$[esp]
	mov	edx, DWORD PTR [esi+8]
	push	edi
	mov	edi, DWORD PTR _params$[esp+4]
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+8]
	push	edx
	mov	edx, DWORD PTR [esi]
	push	edx
	call	eax

; 32   : 		fp->vis			*= vis;

	fld	ST(0)
	fmul	DWORD PTR [edi+8]
	fstp	DWORD PTR [edi+8]

; 33   : 		if (NULL==result.O && fis_zero(vis)){

	cmp	DWORD PTR [esi], 0
	jne	$LN30@feel_visio@2
	push	ecx
	fstp	DWORD PTR [esp]
	call	_fabsf
	fld	DWORD PTR _EPS_S
	add	esp, 4
	fcomip	ST(1)
	fstp	ST(0)
	jbe	SHORT $LN26@feel_visio@2

; 34   : 			CDB::TRI* T	= g_pGameLevel->ObjectSpace.GetStaticTris()+result.element;

	mov	eax, DWORD PTR [esi+8]
	mov	ecx, DWORD PTR ?g_pGameLevel@@3PAVIGame_Level@@A ; g_pGameLevel

; 35   : 			Fvector* V	= g_pGameLevel->ObjectSpace.GetStaticVerts();

	mov	edx, DWORD PTR [ecx+262316]
	shl	eax, 4
	add	eax, DWORD PTR [ecx+262308]

; 36   : 			fp->item->Cache.verts[0].set	(V[T->verts[0]]);

	mov	ecx, DWORD PTR [eax]
	lea	ecx, DWORD PTR [ecx+ecx*2]
	fld	DWORD PTR [edx+ecx*4]
	lea	esi, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [edi+4]
	fstp	DWORD PTR [ecx+32]
	fld	DWORD PTR [esi+4]
	add	ecx, 32					; 00000020H
	fstp	DWORD PTR [ecx+4]
	fld	DWORD PTR [esi+8]
	fstp	DWORD PTR [ecx+8]

; 37   : 			fp->item->Cache.verts[1].set	(V[T->verts[1]]);

	mov	ecx, DWORD PTR [eax+4]
	lea	ecx, DWORD PTR [ecx+ecx*2]
	fld	DWORD PTR [edx+ecx*4]
	lea	esi, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [edi+4]
	fstp	DWORD PTR [ecx+44]
	fld	DWORD PTR [esi+4]
	add	ecx, 44					; 0000002cH
	fstp	DWORD PTR [ecx+4]
	fld	DWORD PTR [esi+8]
	fstp	DWORD PTR [ecx+8]

; 38   : 			fp->item->Cache.verts[2].set	(V[T->verts[2]]);

	mov	eax, DWORD PTR [eax+8]
	lea	eax, DWORD PTR [eax+eax*2]
	fld	DWORD PTR [edx+eax*4]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR [edi+4]
	fstp	DWORD PTR [eax+56]
	fld	DWORD PTR [ecx+4]
	add	eax, 56					; 00000038H
	fstp	DWORD PTR [eax+4]
	fld	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+8]
	jmp	SHORT $LN26@feel_visio@2
$LN30@feel_visio@2:
	fstp	ST(0)
$LN26@feel_visio@2:

; 39   : 		}
; 40   : 		return (fp->vis>fp->vis_threshold); 

	movss	xmm0, DWORD PTR [edi+8]
	comiss	xmm0, DWORD PTR [edi+12]
	pop	edi
	pop	esi
	jbe	SHORT $LN4@feel_visio@2
	mov	eax, 1

; 41   : 	}

	ret	0
$LN4@feel_visio@2:

; 39   : 		}
; 40   : 		return (fp->vis>fp->vis_threshold); 

	xor	eax, eax

; 41   : 	}

	ret	0
?feel_vision_callback@Feel@@YAHAAUrq_result@collide@@PAX@Z ENDP ; Feel::feel_vision_callback
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$xr_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
??4?$xr_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@@QAEAAV0@ABV0@@Z PROC ; xr_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::operator=, COMDAT
; _this$ = ecx
; ___that$ = eax
	push	edi
	mov	edi, ecx
	push	eax
	call	??4?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::operator=
	mov	eax, edi
	pop	edi
	ret	0
??4?$xr_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@@QAEAAV0@ABV0@@Z ENDP ; xr_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::operator=
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
;	COMDAT ??0?$vector@PAVISpatial@@V?$xalloc@PAVISpatial@@@@@stlp_std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$vector@PAVISpatial@@V?$xalloc@PAVISpatial@@@@@stlp_std@@QAE@ABV01@@Z PROC ; stlp_std::vector<ISpatial *,xalloc<ISpatial *> >::vector<ISpatial *,xalloc<ISpatial *> >, COMDAT
; _this$ = esi
; ___x$ = eax

; 123  :   vector(const _Self& __x)

	push	eax
	mov	ecx, esi
	call	??0?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::_Impl_vector<void *,xalloc<void *> >
	mov	eax, esi
	ret	0
??0?$vector@PAVISpatial@@V?$xalloc@PAVISpatial@@@@@stlp_std@@QAE@ABV01@@Z ENDP ; stlp_std::vector<ISpatial *,xalloc<ISpatial *> >::vector<ISpatial *,xalloc<ISpatial *> >
_TEXT	ENDS
PUBLIC	?o_trace@Vision@Feel@@AAEXAAU?$_vector3@M@@MM@Z	; Feel::Vision::o_trace
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\feel_vision.cpp
;	COMDAT ?o_trace@Vision@Feel@@AAEXAAU?$_vector3@M@@MM@Z
_TEXT	SEGMENT
_D$127103 = -156					; size = 12
_this$ = -144						; size = 4
_I$ = -140						; size = 4
_f$127106 = -136					; size = 4
tv640 = -132						; size = 4
_i$127127 = -132					; size = 4
_object$127138 = -128					; size = 4
_feel_params$127109 = -124				; size = 16
___n$371611 = -108					; size = 4
_E$ = -104						; size = 4
__range$127114 = -100					; size = 4
tv625 = -96						; size = 4
tv629 = -92						; size = 4
_e$127132 = -88						; size = 4
tv633 = -84						; size = 4
_OP$127104 = -80					; size = 12
_RD$127108 = -68					; size = 36
__u$127112 = -32					; size = 4
__v$127113 = -28					; size = 4
$T371029 = -24						; size = 12
$T371022 = -12						; size = 12
_P$ = 8							; size = 4
_dt$ = 12						; size = 4
_vis_threshold$ = 16					; size = 4
?o_trace@Vision@Feel@@AAEXAAU?$_vector3@M@@MM@Z PROC	; Feel::Vision::o_trace, COMDAT
; _this$ = ecx

; 154  : 	void Vision::o_trace	(Fvector& P, float dt, float vis_threshold)	{

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 156				; 0000009cH
	push	ebx
	mov	ebx, ecx

; 155  : 		RQR.r_clear			();

	mov	ecx, DWORD PTR [ebx+48]
	mov	eax, DWORD PTR [ebx+44]
	cmp	eax, ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[esp+168], ebx
	je	SHORT $LN55@o_trace
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN63@o_trace
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN63@o_trace:
	mov	DWORD PTR [ebx+48], eax
$LN55@o_trace:

; 156  : 		xr_vector<feel_visible_Item>::iterator I=feel_visible.begin(),E=feel_visible.end();

	mov	edi, DWORD PTR [ebx+72]
	mov	ebx, DWORD PTR [ebx+76]

; 157  : 		for (; I!=E; I++){

	cmp	edi, ebx
	mov	DWORD PTR _I$[esp+168], edi
	mov	DWORD PTR _E$[esp+168], ebx
	je	$LN23@o_trace
	mov	ebx, DWORD PTR _P$[ebp]
	lea	esi, DWORD PTR [edi+16]
$LL25@o_trace:

; 158  : 			if (0==I->O->CFORM())	{ I->fuzzy = -1; continue; }

	mov	ecx, DWORD PTR [esi+100]
	cmp	DWORD PTR [ecx+160], 0
	jne	SHORT $LN22@o_trace
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esi+104], xmm0
	jmp	$LN24@o_trace
$LN22@o_trace:

; 159  : 
; 160  : 			// verify relation
; 161  : //			if (positive(I->fuzzy) && I->O->Position().similar(I->cp_LR_dst,lr_granularity) && P.similar(I->cp_LR_src,lr_granularity))
; 162  : //				continue;
; 163  : 
; 164  : 			I->cp_LR_dst		= I->O->Position();

	mov	eax, DWORD PTR [ecx+128]
	mov	DWORD PTR [esi+76], eax
	mov	edx, DWORD PTR [ecx+132]
	mov	DWORD PTR [esi+80], edx
	mov	eax, DWORD PTR [ecx+136]
	mov	DWORD PTR [esi+84], eax

; 165  : 			I->cp_LR_src		= P;

	mov	edx, DWORD PTR [ebx]
	mov	DWORD PTR [esi+64], edx
	mov	eax, DWORD PTR [ebx+4]
	mov	DWORD PTR [esi+68], eax

; 166  : 			I->cp_LAST			= I->O->get_last_local_point_on_mesh( I->cp_LP, I->bone_id );

	movzx	eax, WORD PTR [esi+112]
	mov	edx, DWORD PTR [ebx+8]
	push	eax
	lea	eax, DWORD PTR [esi+52]
	mov	DWORD PTR [esi+72], edx
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+128]
	push	eax
	lea	eax, DWORD PTR $T371022[esp+176]
	push	eax
	call	edx
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [esi+88], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi+92], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [esi+96], ecx

; 167  : 
; 168  : 			// 
; 169  : 			Fvector				D, OP = I->cp_LAST;

	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax+4]

; 170  : 			D.sub				(OP,P);

	movss	xmm1, DWORD PTR [ebx]
	movss	xmm2, DWORD PTR [ebx+4]
	movss	xmm3, DWORD PTR [ebx+8]
	mov	DWORD PTR _OP$127104[esp+168], edx
	mov	edx, DWORD PTR [eax+8]
	movss	xmm0, DWORD PTR _OP$127104[esp+168]
	subss	xmm0, xmm1
	movss	DWORD PTR tv625[esp+168], xmm1
	movss	DWORD PTR tv629[esp+168], xmm2
	mov	DWORD PTR _OP$127104[esp+172], ecx
	movss	xmm1, DWORD PTR _OP$127104[esp+172]
	subss	xmm1, xmm2
	movss	DWORD PTR tv633[esp+168], xmm3
	mov	DWORD PTR _OP$127104[esp+176], edx
	movss	xmm2, DWORD PTR _OP$127104[esp+176]
	subss	xmm2, xmm3

; 171  : 			if ( fis_zero(D.magnitude()) ) {

	movaps	xmm3, xmm2
	mulss	xmm3, xmm2
	movss	DWORD PTR _D$127103[esp+176], xmm2
	movaps	xmm2, xmm1
	mulss	xmm2, xmm1
	movss	DWORD PTR _D$127103[esp+172], xmm1
	movaps	xmm1, xmm0
	addss	xmm3, xmm2
	mulss	xmm1, xmm0
	push	ecx
	addss	xmm3, xmm1
	movss	DWORD PTR _D$127103[esp+172], xmm0
	movss	DWORD PTR [esp], xmm3
	call	_sqrtf
	fst	DWORD PTR tv640[esp+172]
	fstp	DWORD PTR [esp]
	call	_fabsf
	fld	DWORD PTR _EPS_S
	add	esp, 4
	fcomip	ST(1)
	fstp	ST(0)
	jbe	SHORT $LN21@o_trace

; 172  : 				I->fuzzy		= 1.f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esi+104], xmm0

; 173  : 				continue;

	jmp	$LN24@o_trace
$LN21@o_trace:

; 174  : 			}
; 175  : 
; 176  : 			float				f = D.magnitude() + .2f;

	movss	xmm2, DWORD PTR tv640[esp+168]
	addss	xmm2, DWORD PTR __real@3e4ccccd

; 177  : 			if (f>fuzzy_guaranteed){

	comiss	xmm2, DWORD PTR _EPS_L
	movss	DWORD PTR _f$127106[esp+168], xmm2
	jbe	$LN20@o_trace

; 178  : 				D.div						(f);
; 179  : 				// setup ray defs & feel params
; 180  : 				collide::ray_defs RD		(P,D,f,CDB::OPT_CULL,collide::rq_target(collide::rqtStatic|/**/collide::rqtObject|/**/collide::rqtObstacle));
; 181  : 				SFeelParam	feel_params		(this,&*I,vis_threshold);
; 182  : 				// check cache
; 183  : 				if (I->Cache.result&&I->Cache.similar(P,D,f)){

	cmp	DWORD PTR [esi+12], 0
	movss	xmm3, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [ebx+4]
	mov	edx, DWORD PTR [ebx+8]
	movaps	xmm0, xmm3
	divss	xmm0, xmm2
	movaps	xmm1, xmm0
	mulss	xmm1, DWORD PTR _D$127103[esp+168]
	movss	DWORD PTR _D$127103[esp+168], xmm1
	movaps	xmm1, xmm0
	mulss	xmm0, DWORD PTR _D$127103[esp+176]
	mulss	xmm1, DWORD PTR _D$127103[esp+172]
	mov	DWORD PTR _RD$127108[esp+168], eax
	mov	eax, DWORD PTR _D$127103[esp+168]
	movss	DWORD PTR _D$127103[esp+176], xmm0
	movss	xmm0, DWORD PTR _vis_threshold$[ebp]
	movss	DWORD PTR _D$127103[esp+172], xmm1
	mov	DWORD PTR _RD$127108[esp+172], ecx
	mov	ecx, DWORD PTR _D$127103[esp+172]
	mov	DWORD PTR _RD$127108[esp+176], edx
	mov	edx, DWORD PTR _D$127103[esp+176]
	mov	DWORD PTR _RD$127108[esp+180], eax
	mov	eax, DWORD PTR _this$[esp+168]
	mov	DWORD PTR _RD$127108[esp+184], ecx
	mov	DWORD PTR _RD$127108[esp+188], edx
	movss	DWORD PTR _RD$127108[esp+192], xmm2
	mov	DWORD PTR _RD$127108[esp+196], 1
	mov	DWORD PTR _RD$127108[esp+200], 11	; 0000000bH
	mov	DWORD PTR _feel_params$127109[esp+168], eax
	mov	DWORD PTR _feel_params$127109[esp+172], edi
	movss	DWORD PTR _feel_params$127109[esp+176], xmm3
	movss	DWORD PTR _feel_params$127109[esp+180], xmm0
	je	$LN19@o_trace
	movss	xmm0, DWORD PTR tv625[esp+168]
	subss	xmm0, DWORD PTR [edi]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	fld	DWORD PTR _EPS_L
	add	esp, 4
	fcomip	ST(1)
	fstp	ST(0)
	jbe	$LN19@o_trace
	movss	xmm0, DWORD PTR tv629[esp+168]
	subss	xmm0, DWORD PTR [esi-12]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	fld	DWORD PTR _EPS_L
	add	esp, 4
	fcomip	ST(1)
	fstp	ST(0)
	jbe	$LN19@o_trace
	movss	xmm0, DWORD PTR tv633[esp+168]
	subss	xmm0, DWORD PTR [esi-8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	fld	DWORD PTR _EPS_L
	add	esp, 4
	fcomip	ST(1)
	fstp	ST(0)
	jbe	$LN19@o_trace
	movss	xmm0, DWORD PTR [esi+4]
	mulss	xmm0, DWORD PTR _D$127103[esp+176]
	movss	xmm1, DWORD PTR [esi-4]
	mulss	xmm1, DWORD PTR _D$127103[esp+168]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [esi]
	mulss	xmm1, DWORD PTR _D$127103[esp+172]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	push	ecx
	subss	xmm1, xmm0
	movss	DWORD PTR [esp], xmm1
	call	_fabsf
	fld	DWORD PTR _EPS
	add	esp, 4
	fcomip	ST(1)
	fstp	ST(0)
	jbe	SHORT $LN19@o_trace
	movss	xmm0, DWORD PTR _f$127106[esp+168]
	subss	xmm0, DWORD PTR [esi+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	fld	DWORD PTR _EPS
	add	esp, 4
	fcomip	ST(1)
	fstp	ST(0)
	jbe	SHORT $LN19@o_trace

; 184  : 					// similar with previous query
; 185  : 					feel_params.vis			= I->Cache_vis;

	movss	xmm0, DWORD PTR [esi+108]
	movss	DWORD PTR _feel_params$127109[esp+176], xmm0

; 186  : //					Log("cache 0");
; 187  : 				}else{

	jmp	$LN156@o_trace
$LN19@o_trace:

; 188  : 					float _u,_v,_range;
; 189  : 					if (CDB::TestRayTri(P,D,I->Cache.verts,_u,_v,_range,false)&&(_range>0 && _range<f))	{

	lea	ecx, DWORD PTR __range$127114[esp+168]
	push	ecx
	lea	edx, DWORD PTR __v$127113[esp+172]
	push	edx
	lea	eax, DWORD PTR __u$127112[esp+176]
	push	eax
	lea	eax, DWORD PTR [esi+16]
	lea	ecx, DWORD PTR _D$127103[esp+180]
	mov	edx, ebx
	call	?TestRayTri@CDB@@YA_NABU?$_vector3@M@@0PAU2@AAM22_N@Z ; CDB::TestRayTri
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LN15@o_trace
	movss	xmm0, DWORD PTR __range$127114[esp+168]
	xorps	xmm1, xmm1
	comiss	xmm0, xmm1
	jbe	SHORT $LN15@o_trace
	movss	xmm2, DWORD PTR _f$127106[esp+168]
	comiss	xmm2, xmm0
	jbe	SHORT $LN15@o_trace

; 190  : 						feel_params.vis		= 0.f;

	movss	DWORD PTR _feel_params$127109[esp+176], xmm1

; 191  : //						Log("cache 1");
; 192  : 					}else{

	jmp	$LN156@o_trace
$LN15@o_trace:

; 193  : 						// cache outdated. real query.
; 194  : 						VERIFY(!fis_zero(RD.dir.magnitude()));
; 195  : 
; 196  : 						if (g_pGameLevel->ObjectSpace.RayQuery	(RQR, RD, feel_vision_callback, &feel_params, NULL, NULL))	{

	mov	eax, DWORD PTR _this$[esp+168]
	push	0
	push	0
	lea	ecx, DWORD PTR _feel_params$127109[esp+176]
	push	ecx
	mov	ecx, DWORD PTR ?g_pGameLevel@@3PAVIGame_Level@@A ; g_pGameLevel
	push	OFFSET ?feel_vision_callback@Feel@@YAHAAUrq_result@collide@@PAX@Z ; Feel::feel_vision_callback
	lea	edx, DWORD PTR _RD$127108[esp+184]
	push	edx
	add	eax, 44					; 0000002cH
	push	eax
	add	ecx, 262292				; 00040094H
	call	DWORD PTR __imp_?RayQuery@CObjectSpace@@QAEHAAVrq_results@collide@@ABUray_defs@3@P6AHAAUrq_result@3@PAX@Z3P6AH1PAVCObject@@3@Z5@Z
	test	eax, eax
	je	SHORT $LN12@o_trace

; 197  : 							I->Cache_vis	= feel_params.vis	;

	movss	xmm0, DWORD PTR _feel_params$127109[esp+176]
	movss	DWORD PTR [esi+108], xmm0

; 198  : 							I->Cache.set	(P,D,f,TRUE	)		;

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [edi], eax
	mov	ecx, DWORD PTR [ebx+4]
	mov	DWORD PTR [edi+4], ecx
	mov	edx, DWORD PTR [ebx+8]
	mov	DWORD PTR [esi+12], 1

; 199  : 						}
; 200  : 						else{

	jmp	SHORT $LN237@o_trace
$LN12@o_trace:

; 201  : //							feel_params.vis	= 0.f;
; 202  : //							I->Cache_vis	= feel_params.vis	;
; 203  : 							I->Cache.set	(P,D,f,FALSE)		;

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [edi], eax
	mov	ecx, DWORD PTR [ebx+4]
	mov	DWORD PTR [edi+4], ecx
	mov	edx, DWORD PTR [ebx+8]
	mov	DWORD PTR [esi+12], 0
$LN237@o_trace:
	mov	eax, DWORD PTR _D$127103[esp+168]
	mov	ecx, DWORD PTR _D$127103[esp+172]
	movss	xmm0, DWORD PTR _f$127106[esp+168]
	mov	DWORD PTR [esi-4], eax
	mov	DWORD PTR [edi+8], edx
	mov	edx, DWORD PTR _D$127103[esp+176]
	mov	DWORD PTR [esi], ecx
	movss	DWORD PTR [esi+8], xmm0
	mov	DWORD PTR [esi+4], edx
$LN156@o_trace:

; 204  : 						}
; 205  : //						Log("query");
; 206  : 					}
; 207  : 				}
; 208  : //				Log("Vis",feel_params.vis);
; 209  : 				r_spatial.clear_not_free();

	mov	edi, DWORD PTR _this$[esp+168]
	add	edi, 56					; 00000038H
	push	edi
	call	?clear_not_free@?$xr_vector@PAVISpatial@@V?$xalloc@PAVISpatial@@@@@@QAEXXZ ; xr_vector<ISpatial *,xalloc<ISpatial *> >::clear_not_free

; 210  : 				g_SpatialSpace->q_ray( r_spatial, 0, STYPE_VISIBLEFORAI, P, D, f );

	fld	DWORD PTR _f$127106[esp+168]
	push	ecx
	mov	ecx, DWORD PTR __imp_?g_SpatialSpace@@3PAVISpatial_DB@@A
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR [ecx]
	lea	eax, DWORD PTR _D$127103[esp+172]
	push	eax
	push	ebx
	push	8
	push	0
	push	edi
	call	DWORD PTR __imp_?q_ray@ISpatial_DB@@QAEXAAV?$xr_vector@PAVISpatial@@V?$xalloc@PAVISpatial@@@@@@IIABU?$_vector3@M@@1M@Z

; 211  : 
; 212  : 				RD.flags				= CDB::OPT_ONLYFIRST;
; 213  : 
; 214  : 				bool collision_found	= false;
; 215  : 				xr_vector<ISpatial*>::const_iterator	i = r_spatial.begin();

	mov	edi, DWORD PTR [edi]
	push	edi
	mov	DWORD PTR _RD$127108[esp+200], 2
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr

; 216  : 				xr_vector<ISpatial*>::const_iterator	e = r_spatial.end();

	mov	edx, DWORD PTR _this$[esp+172]
	mov	edi, eax
	mov	eax, DWORD PTR [edx+60]
	add	esp, 4
	push	eax
	mov	DWORD PTR _i$127127[esp+172], edi
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4

; 217  : 				for ( ; i != e; ++i ) {

	cmp	edi, eax
	mov	DWORD PTR _e$127132[esp+168], eax
	je	$LN4@o_trace
$LL10@o_trace:

; 218  : 					if ( *i == m_owner )

	mov	ecx, DWORD PTR _this$[esp+168]
	mov	ecx, DWORD PTR [ecx+68]
	test	ecx, ecx
	je	SHORT $LN28@o_trace
	lea	edx, DWORD PTR [ecx+16]
	jmp	SHORT $LN29@o_trace
$LN28@o_trace:
	xor	edx, edx
$LN29@o_trace:
	mov	ecx, DWORD PTR [edi]
	cmp	ecx, edx
	je	$LN9@o_trace

; 219  : 						continue;
; 220  : 
; 221  : 					if ( *i == I->O )

	mov	edx, DWORD PTR [esi+100]
	test	edx, edx
	je	SHORT $LN30@o_trace
	add	edx, 16					; 00000010H
	jmp	SHORT $LN31@o_trace
$LN30@o_trace:
	xor	edx, edx
$LN31@o_trace:
	cmp	ecx, edx
	je	SHORT $LN9@o_trace

; 222  : 						continue;
; 223  : 
; 224  : 					CObject const* object	= (*i)->dcast_CObject();

	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax

; 225  : 					RQR.r_clear				( );

	mov	edi, DWORD PTR _this$[esp+168]
	mov	ecx, DWORD PTR [edi+48]
	add	edi, 44					; 0000002cH
	mov	edx, eax
	mov	eax, DWORD PTR [edi]
	cmp	eax, ecx
	mov	DWORD PTR _object$127138[esp+168], edx
	je	SHORT $LN197@o_trace
	mov	edx, ecx
	sub	edx, ecx
	mov	DWORD PTR ___n$371611[esp+168], edx
	je	SHORT $LN205@o_trace
	push	edx
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR ___n$371611[esp+168]
$LN205@o_trace:
	mov	edx, DWORD PTR _object$127138[esp+168]
	mov	DWORD PTR [edi+4], eax
$LN197@o_trace:

; 226  : 					if ( object && object->collidable.model && !object->collidable.model->_RayQuery(RD,RQR) )

	test	edx, edx
	je	SHORT $LN5@o_trace
	cmp	DWORD PTR [edx+160], 0
	je	SHORT $LN5@o_trace
	mov	ecx, DWORD PTR [edx+160]
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+4]
	push	edi
	lea	eax, DWORD PTR _RD$127108[esp+172]
	push	eax
	call	edx
	test	eax, eax
	jne	SHORT $LN5@o_trace
	mov	eax, DWORD PTR _e$127132[esp+168]
	mov	edi, DWORD PTR _i$127127[esp+168]
$LN9@o_trace:
	add	edi, 4
	cmp	edi, eax
	mov	DWORD PTR _i$127127[esp+168], edi
	jne	$LL10@o_trace

; 217  : 				for ( ; i != e; ++i ) {

	jmp	SHORT $LN4@o_trace
$LN5@o_trace:

; 227  : 						continue;
; 228  : 
; 229  : 					collision_found		= true;
; 230  : 					break;
; 231  : 				}
; 232  : 
; 233  : 				if (collision_found)
; 234  : 					feel_params.vis		= 0.f;

	xorps	xmm0, xmm0
	movss	DWORD PTR _feel_params$127109[esp+176], xmm0
$LN4@o_trace:

; 235  : 
; 236  : 				if (feel_params.vis<feel_params.vis_threshold){

	movss	xmm0, DWORD PTR _feel_params$127109[esp+180]
	comiss	xmm0, DWORD PTR _feel_params$127109[esp+176]

; 237  : 					// INVISIBLE, choose next point
; 238  : 					I->fuzzy				-=	fuzzy_update_novis*dt;

	movss	xmm0, DWORD PTR _dt$[ebp]
	mulss	xmm0, DWORD PTR _fuzzy_update_novis
	jbe	SHORT $LN3@o_trace
	movss	xmm1, DWORD PTR [esi+104]
	subss	xmm1, xmm0

; 239  : 					clamp					(I->fuzzy,-.5f,1.f);

	movaps	xmm0, xmm1
	movss	DWORD PTR [esi+104], xmm1
	movss	xmm1, DWORD PTR __real@bf000000
	comiss	xmm1, xmm0
	ja	SHORT $LN238@o_trace
	movss	xmm1, DWORD PTR __real@3f800000
	comiss	xmm0, xmm1
	jbe	SHORT $LN209@o_trace
$LN238@o_trace:
	movss	DWORD PTR [esi+104], xmm1
$LN209@o_trace:

; 240  : 					I->cp_LP				= I->O->get_new_local_point_on_mesh( I->bone_id );

	mov	ecx, DWORD PTR [esi+100]
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+124]
	lea	eax, DWORD PTR [esi+112]
	push	eax
	lea	eax, DWORD PTR $T371029[esp+172]
	push	eax
	call	edx
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [esi+52], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi+56], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [esi+60], eax

; 241  : 				}else{

	jmp	SHORT $LN236@o_trace
$LN3@o_trace:

; 242  : 					// VISIBLE
; 243  : 					I->fuzzy				+=	fuzzy_update_vis*dt;

	addss	xmm0, DWORD PTR [esi+104]

; 244  : 					clamp					(I->fuzzy,-.5f,1.f);

	movss	xmm1, DWORD PTR __real@bf000000
	comiss	xmm1, xmm0
	movss	DWORD PTR [esi+104], xmm0
	ja	SHORT $LN239@o_trace
	movss	xmm1, DWORD PTR __real@3f800000
	comiss	xmm0, xmm1
	jbe	SHORT $LN236@o_trace
$LN239@o_trace:
	movss	DWORD PTR [esi+104], xmm1
$LN236@o_trace:

; 250  : 				clamp					(I->fuzzy,-.5f,1.f);

	mov	edi, DWORD PTR _I$[esp+168]
$LN24@o_trace:

; 157  : 		for (; I!=E; I++){

	add	edi, 132				; 00000084H
	add	esi, 132				; 00000084H
	cmp	edi, DWORD PTR _E$[esp+168]
	mov	DWORD PTR _I$[esp+168], edi
	jne	$LL25@o_trace
$LN23@o_trace:

; 251  : 			}
; 252  : 		}
; 253  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN20@o_trace:

; 245  : 				}
; 246  : 			}
; 247  : 			else {
; 248  : 				// VISIBLE, 'cause near
; 249  : 				I->fuzzy				+=	fuzzy_update_vis*dt;

	movss	xmm0, DWORD PTR _dt$[ebp]
	mulss	xmm0, DWORD PTR _fuzzy_update_novis
	addss	xmm0, DWORD PTR [esi+104]

; 250  : 				clamp					(I->fuzzy,-.5f,1.f);

	movss	xmm1, DWORD PTR __real@bf000000
	comiss	xmm1, xmm0
	movss	DWORD PTR [esi+104], xmm0
	jbe	SHORT $LN221@o_trace
	movss	DWORD PTR [esi+104], xmm1
	jmp	SHORT $LN24@o_trace
$LN221@o_trace:
	movss	xmm1, DWORD PTR __real@3f800000
	comiss	xmm0, xmm1
	jbe	SHORT $LN24@o_trace
	movss	DWORD PTR [esi+104], xmm1
	jmp	SHORT $LN24@o_trace
?o_trace@Vision@Feel@@AAEXAAU?$_vector3@M@@MM@Z ENDP	; Feel::Vision::o_trace
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?feel_vision_relcase@Vision@Feel@@QAGXPAVCObject@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_object$ = 12						; size = 4
?feel_vision_relcase@Vision@Feel@@QAGXPAVCObject@@@Z PROC ; Feel::Vision::feel_vision_relcase, COMDAT

; 74   : 	{

	push	ebx

; 75   : 		xr_vector<CObject*>::iterator Io;
; 76   : 		Io = std::find		(seen.begin(),seen.end(),object);

	mov	ebx, DWORD PTR _this$[esp]
	mov	eax, DWORD PTR [ebx+12]
	push	ebp
	push	esi
	push	edi
	push	eax
	call	?to_value_type_ptr@?$_CastTraits@PAXPAVCObject@@@priv@stlp_std@@SAPAPAVCObject@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,CObject *>::to_value_type_ptr
	lea	ebp, DWORD PTR [ebx+8]
	add	esp, 4
	mov	ecx, ebp
	mov	esi, eax
	call	?begin@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEPAPAVCObject@@XZ ; stlp_std::vector<CObject *,xalloc<CObject *> >::begin
	lea	edi, DWORD PTR _object$[esp+12]
	call	??$__find@PAPAVCObject@@PAV1@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@0ABQAV2@ABUrandom_access_iterator_tag@1@@Z ; stlp_std::priv::__find<CObject * *,CObject *>
	mov	esi, eax

; 77   : 		if (Io!=seen.end())	seen.erase	(Io);

	mov	eax, DWORD PTR [ebx+12]
	push	eax
	call	?to_value_type_ptr@?$_CastTraits@PAXPAVCObject@@@priv@stlp_std@@SAPAPAVCObject@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,CObject *>::to_value_type_ptr
	add	esp, 4
	cmp	esi, eax
	je	SHORT $LN36@feel_visio@3
	mov	eax, DWORD PTR [ebp+4]
	lea	ecx, DWORD PTR [esi+4]
	cmp	ecx, eax
	je	SHORT $LN53@feel_visio@3
	sub	eax, ecx
	je	SHORT $LN53@feel_visio@3
	push	eax
	push	ecx
	push	esi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN53@feel_visio@3:
	add	DWORD PTR [ebp+4], -4			; fffffffcH
	mov	ebp, DWORD PTR [ebp+4]
	push	ebp
	call	??$_Destroy@PAX@stlp_std@@YAXPAPAX@Z	; stlp_std::_Destroy<void *>
	push	esi
	call	?to_value_type_ptr@?$_CastTraits@PAXPAVCObject@@@priv@stlp_std@@SAPAPAVCObject@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,CObject *>::to_value_type_ptr
	add	esp, 8
$LN36@feel_visio@3:

; 78   : 		Io = std::find		(query.begin(),query.end(),object);

	mov	eax, DWORD PTR [ebx+24]
	push	eax
	call	?to_value_type_ptr@?$_CastTraits@PAXPAVCObject@@@priv@stlp_std@@SAPAPAVCObject@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,CObject *>::to_value_type_ptr
	lea	ebp, DWORD PTR [ebx+20]
	add	esp, 4
	mov	ecx, ebp
	mov	esi, eax
	call	?begin@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEPAPAVCObject@@XZ ; stlp_std::vector<CObject *,xalloc<CObject *> >::begin
	lea	edi, DWORD PTR _object$[esp+12]
	call	??$__find@PAPAVCObject@@PAV1@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@0ABQAV2@ABUrandom_access_iterator_tag@1@@Z ; stlp_std::priv::__find<CObject * *,CObject *>
	mov	esi, eax

; 79   : 		if (Io!=query.end())query.erase	(Io);

	mov	eax, DWORD PTR [ebx+24]
	push	eax
	call	?to_value_type_ptr@?$_CastTraits@PAXPAVCObject@@@priv@stlp_std@@SAPAPAVCObject@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,CObject *>::to_value_type_ptr
	add	esp, 4
	cmp	esi, eax
	je	SHORT $LN204@feel_visio@3
	mov	eax, DWORD PTR [ebp+4]
	lea	ecx, DWORD PTR [esi+4]
	cmp	ecx, eax
	je	SHORT $LN203@feel_visio@3
	sub	eax, ecx
	je	SHORT $LN203@feel_visio@3
	push	eax
	push	ecx
	push	esi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN203@feel_visio@3:
	add	DWORD PTR [ebp+4], -4			; fffffffcH
	mov	ebp, DWORD PTR [ebp+4]
	push	ebp
	call	??$_Destroy@PAX@stlp_std@@YAXPAPAX@Z	; stlp_std::_Destroy<void *>
	push	esi
	call	?to_value_type_ptr@?$_CastTraits@PAXPAVCObject@@@priv@stlp_std@@SAPAPAVCObject@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,CObject *>::to_value_type_ptr
	add	esp, 8
$LN204@feel_visio@3:

; 80   : 		Io = std::find		(diff.begin(),diff.end(),object);

	mov	eax, DWORD PTR [ebx+36]
	push	eax
	call	?to_value_type_ptr@?$_CastTraits@PAXPAVCObject@@@priv@stlp_std@@SAPAPAVCObject@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,CObject *>::to_value_type_ptr
	lea	ebp, DWORD PTR [ebx+32]
	add	esp, 4
	mov	ecx, ebp
	mov	esi, eax
	call	?begin@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEPAPAVCObject@@XZ ; stlp_std::vector<CObject *,xalloc<CObject *> >::begin
	lea	edi, DWORD PTR _object$[esp+12]
	call	??$__find@PAPAVCObject@@PAV1@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@0ABQAV2@ABUrandom_access_iterator_tag@1@@Z ; stlp_std::priv::__find<CObject * *,CObject *>
	mov	esi, eax

; 81   : 		if (Io!=diff.end())	diff.erase	(Io);

	mov	eax, DWORD PTR [ebx+36]
	push	eax
	call	?to_value_type_ptr@?$_CastTraits@PAXPAVCObject@@@priv@stlp_std@@SAPAPAVCObject@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,CObject *>::to_value_type_ptr
	add	esp, 4
	cmp	esi, eax
	je	SHORT $LN206@feel_visio@3
	mov	eax, DWORD PTR [ebp+4]
	lea	ecx, DWORD PTR [esi+4]
	cmp	ecx, eax
	je	SHORT $LN205@feel_visio@3
	sub	eax, ecx
	je	SHORT $LN205@feel_visio@3
	push	eax
	push	ecx
	push	esi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN205@feel_visio@3:
	add	DWORD PTR [ebp+4], -4			; fffffffcH
	mov	ebp, DWORD PTR [ebp+4]
	push	ebp
	call	??$_Destroy@PAX@stlp_std@@YAXPAPAX@Z	; stlp_std::_Destroy<void *>
	push	esi
	call	?to_value_type_ptr@?$_CastTraits@PAXPAVCObject@@@priv@stlp_std@@SAPAPAVCObject@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,CObject *>::to_value_type_ptr
	add	esp, 8
$LN206@feel_visio@3:

; 82   : 		xr_vector<feel_visible_Item>::iterator Ii=feel_visible.begin(),IiE=feel_visible.end();

	mov	eax, DWORD PTR [ebx+72]
	mov	ecx, DWORD PTR [ebx+76]

; 83   : 		for (; Ii!=IiE; ++Ii)if (Ii->O==object){ feel_visible.erase(Ii); break; }

	cmp	eax, ecx
	je	SHORT $LN2@feel_visio@3
	mov	edx, DWORD PTR _object$[esp+12]
	npad	1
$LL4@feel_visio@3:
	cmp	DWORD PTR [eax+116], edx
	je	SHORT $LN201@feel_visio@3
	add	eax, 132				; 00000084H
	cmp	eax, ecx
	jne	SHORT $LL4@feel_visio@3
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 84   : 	}

	ret	8
$LN201@feel_visio@3:

; 83   : 		for (; Ii!=IiE; ++Ii)if (Ii->O==object){ feel_visible.erase(Ii); break; }

	lea	edx, DWORD PTR [eax+132]
	cmp	edx, ecx
	je	SHORT $LN196@feel_visio@3
	sub	ecx, edx
	je	SHORT $LN196@feel_visio@3
	push	ecx
	push	edx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN196@feel_visio@3:
	add	DWORD PTR [ebx+76], -132		; ffffff7cH
$LN2@feel_visio@3:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 84   : 	}

	ret	8
?feel_vision_relcase@Vision@Feel@@QAGXPAVCObject@@@Z ENDP ; Feel::Vision::feel_vision_relcase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$xr_vector@PAVISpatial@@V?$xalloc@PAVISpatial@@@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xr_vector@PAVISpatial@@V?$xalloc@PAVISpatial@@@@@@QAE@ABV0@@Z PROC ; xr_vector<ISpatial *,xalloc<ISpatial *> >::xr_vector<ISpatial *,xalloc<ISpatial *> >, COMDAT
; _this$ = esi
; ___that$ = eax
	push	eax
	mov	ecx, esi
	call	??0?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::_Impl_vector<void *,xalloc<void *> >
	mov	eax, esi
	ret	0
??0?$xr_vector@PAVISpatial@@V?$xalloc@PAVISpatial@@@@@@QAE@ABV0@@Z ENDP ; xr_vector<ISpatial *,xalloc<ISpatial *> >::xr_vector<ISpatial *,xalloc<ISpatial *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\pure_relcase.h
;	COMDAT ??$?0VVision@Feel@@@pure_relcase@@QAE@P8Vision@Feel@@AGXPAVCObject@@@Z@Z
_TEXT	SEGMENT
??$?0VVision@Feel@@@pure_relcase@@QAE@P8Vision@Feel@@AGXPAVCObject@@@Z@Z PROC ; pure_relcase::pure_relcase<Feel::Vision>, COMDAT
; _this$ = edi

; 10   : 	{

	mov	DWORD PTR [edi], OFFSET ??_7pure_relcase@@6B@

; 11   : 		R_ASSERT				(g_pGameLevel);

	cmp	BYTE PTR ?ignore_always@?3???$?0VVision@Feel@@@pure_relcase@@QAE@P8Vision@Feel@@AGXPAVCObject@@@Z@Z@4_NA, 0 ; `pure_relcase::pure_relcase<Feel::Vision>'::`4'::ignore_always
	push	esi
	jne	SHORT $LN3@pure_relca@2
	cmp	DWORD PTR ?g_pGameLevel@@3PAVIGame_Level@@A, 0 ; g_pGameLevel
	jne	SHORT $LN3@pure_relca@2
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?3???$?0VVision@Feel@@@pure_relcase@@QAE@P8Vision@Feel@@AGXPAVCObject@@@Z@Z@4_NA ; `pure_relcase::pure_relcase<Feel::Vision>'::`4'::ignore_always
	push	OFFSET ??_C@_0BL@NIHABDJK@pure_relcase?3?3pure_relcase?$AA@
	push	11					; 0000000bH
	push	OFFSET ??_C@_0DD@CIHOJODM@d?3?2clearsky?2sources?2engine?2xreng@
	push	OFFSET ??_C@_0N@HGJAENOJ@g_pGameLevel?$AA@
	call	DWORD PTR __imp_?fail@xrDebug@@QAEXPBD0H0AA_N@Z
$LN3@pure_relca@2:

; 12   : 		class_type				*self = static_cast<class_type*>(this);
; 13   : 		g_pGameLevel->Objects.relcase_register	(
; 14   : 			CObjectList::RELCASE_CALLBACK (
; 15   : 				self,
; 16   : 				function_to_bind
; 17   : 			),
; 18   : 			&m_ID
; 19   : 		);

	lea	eax, DWORD PTR [edi+4]
	push	eax
	sub	esp, 8
	mov	esi, esp
	mov	ecx, esi
	call	??0?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AGXPAVCObject@@@ZP6GX0@ZP6GX0@Z@detail@fastdelegate@@QAE@XZ
	mov	DWORD PTR [esi+4], OFFSET ?feel_vision_relcase@Vision@Feel@@QAGXPAVCObject@@@Z ; Feel::Vision::feel_vision_relcase
	mov	DWORD PTR [esi], edi
	mov	ecx, DWORD PTR ?g_pGameLevel@@3PAVIGame_Level@@A ; g_pGameLevel
	add	ecx, 76					; 0000004cH
	call	?relcase_register@CObjectList@@QAEXV?$FastDelegate1@PAVCObject@@X@fastdelegate@@PAH@Z ; CObjectList::relcase_register

; 20   : 	}

	mov	eax, edi
	pop	esi
	ret	0
??$?0VVision@Feel@@@pure_relcase@@QAE@P8Vision@Feel@@AGXPAVCObject@@@Z@Z ENDP ; pure_relcase::pure_relcase<Feel::Vision>
_TEXT	ENDS
PUBLIC	??1Vision@Feel@@UAE@XZ				; Feel::Vision::~Vision
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\feel_vision.cpp
;	COMDAT ??1Vision@Feel@@UAE@XZ
_TEXT	SEGMENT
??1Vision@Feel@@UAE@XZ PROC				; Feel::Vision::~Vision, COMDAT
; _this$ = ecx

; 18   : 	{	

	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7Vision@Feel@@6B@

; 19   : 	}

	mov	eax, DWORD PTR [esi+72]
	test	eax, eax
	push	edi
	mov	edi, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	je	SHORT $LN40@Vision
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
$LN40@Vision:
	mov	eax, DWORD PTR [esi+56]
	test	eax, eax
	je	SHORT $LN80@Vision
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
$LN80@Vision:
	mov	eax, DWORD PTR [esi+44]
	test	eax, eax
	je	SHORT $LN122@Vision
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
$LN122@Vision:
	mov	eax, DWORD PTR [esi+32]
	test	eax, eax
	je	SHORT $LN162@Vision
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
$LN162@Vision:
	mov	eax, DWORD PTR [esi+20]
	test	eax, eax
	je	SHORT $LN202@Vision
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
$LN202@Vision:
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	SHORT $LN242@Vision
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
$LN242@Vision:
	mov	DWORD PTR [esi], OFFSET ??_7pure_relcase@@6B@
	mov	eax, DWORD PTR ?g_pGameLevel@@3PAVIGame_Level@@A ; g_pGameLevel
	test	eax, eax
	je	SHORT $LN245@Vision
	add	esi, 4
	push	esi
	lea	ecx, DWORD PTR [eax+76]
	call	?relcase_unregister@CObjectList@@QAEXPAH@Z ; CObjectList::relcase_unregister
$LN245@Vision:
	pop	edi
	pop	esi
	ret	0
??1Vision@Feel@@UAE@XZ ENDP				; Feel::Vision::~Vision
_TEXT	ENDS
PUBLIC	??0Vision@Feel@@QAE@PBVCObject@@@Z		; Feel::Vision::Vision
; Function compile flags: /Ogtpy
;	COMDAT ??0Vision@Feel@@QAE@PBVCObject@@@Z
_TEXT	SEGMENT
_owner$ = 8						; size = 4
??0Vision@Feel@@QAE@PBVCObject@@@Z PROC			; Feel::Vision::Vision, COMDAT
; _this$ = ecx

; 14   : 	{	

	push	edi
	mov	edi, ecx
	call	??$?0VVision@Feel@@@pure_relcase@@QAE@P8Vision@Feel@@AGXPAVCObject@@@Z@Z ; pure_relcase::pure_relcase<Feel::Vision>
	mov	ecx, DWORD PTR _owner$[esp]
	xor	eax, eax
	mov	DWORD PTR [edi], OFFSET ??_7Vision@Feel@@6B@
	mov	DWORD PTR [edi+8], eax
	mov	DWORD PTR [edi+12], eax
	mov	DWORD PTR [edi+16], eax
	mov	DWORD PTR [edi+20], eax
	mov	DWORD PTR [edi+24], eax
	mov	DWORD PTR [edi+28], eax
	mov	DWORD PTR [edi+32], eax
	mov	DWORD PTR [edi+36], eax
	mov	DWORD PTR [edi+40], eax
	mov	DWORD PTR [edi+44], eax
	mov	DWORD PTR [edi+48], eax
	mov	DWORD PTR [edi+52], eax
	mov	DWORD PTR [edi+56], eax
	mov	DWORD PTR [edi+60], eax
	mov	DWORD PTR [edi+64], eax
	mov	DWORD PTR [edi+68], ecx
	mov	DWORD PTR [edi+72], eax
	mov	DWORD PTR [edi+76], eax
	mov	DWORD PTR [edi+80], eax

; 15   : 	}

	mov	eax, edi
	pop	edi
	ret	4
??0Vision@Feel@@QAE@PBVCObject@@@Z ENDP			; Feel::Vision::Vision
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_EVision@Feel@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_EVision@Feel@@UAEPAXI@Z PROC				; Feel::Vision::`vector deleting destructor', COMDAT
; _this$ = ecx
	test	BYTE PTR ___flags$[esp-4], 2
	push	ebp
	mov	ebp, ecx
	je	SHORT $LN3@vector@82
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR [ebp-4]
	lea	ebx, DWORD PTR [ebp-4]
	mov	esi, edi
	imul	esi, 84					; 00000054H
	add	esi, ebp
	sub	edi, 1
	js	SHORT $LN6@vector@82
	npad	1
$LL7@vector@82:
	sub	esi, 84					; 00000054H
	mov	ecx, esi
	call	??1Vision@Feel@@UAE@XZ			; Feel::Vision::~Vision
	sub	edi, 1
	jns	SHORT $LL7@vector@82
$LN6@vector@82:
	test	BYTE PTR ___flags$[esp+12], 1
	je	SHORT $LN12@vector@82
	test	ebx, ebx
	je	SHORT $LN12@vector@82
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	ebx
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN12@vector@82:
	pop	edi
	pop	esi
	mov	eax, ebx
	pop	ebx
	pop	ebp
	ret	4
$LN3@vector@82:
	call	??1Vision@Feel@@UAE@XZ			; Feel::Vision::~Vision
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN17@vector@82
	test	ebp, ebp
	je	SHORT $LN17@vector@82
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	ebp
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN17@vector@82:
	mov	eax, ebp
	pop	ebp
	ret	4
??_EVision@Feel@@UAEPAXI@Z ENDP				; Feel::Vision::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_GVision@Feel@@UAEPAXI@Z			; Feel::Vision::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_GVision@Feel@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GVision@Feel@@UAEPAXI@Z PROC				; Feel::Vision::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	??1Vision@Feel@@UAE@XZ			; Feel::Vision::~Vision
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN10@scalar@66
	test	esi, esi
	je	SHORT $LN10@scalar@66
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN10@scalar@66:
	mov	eax, esi
	pop	esi
	ret	4
??_GVision@Feel@@UAEPAXI@Z ENDP				; Feel::Vision::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??4Vision@Feel@@QAEAAV01@ABV01@@Z		; Feel::Vision::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4Vision@Feel@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4Vision@Feel@@QAEAAV01@ABV01@@Z PROC			; Feel::Vision::operator=, COMDAT
; _this$ = ecx
	push	ebx
	mov	ebx, DWORD PTR ___that$[esp]
	mov	eax, DWORD PTR [ebx+4]
	push	esi
	mov	esi, ecx
	push	edi
	lea	ecx, DWORD PTR [ebx+8]
	push	ecx
	lea	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [esi+4], eax
	call	??4?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEAAV01@ABV01@@Z ; stlp_std::vector<CObject *,xalloc<CObject *> >::operator=
	lea	edx, DWORD PTR [ebx+20]
	push	edx
	lea	ecx, DWORD PTR [esi+20]
	call	??4?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEAAV01@ABV01@@Z ; stlp_std::vector<CObject *,xalloc<CObject *> >::operator=
	lea	eax, DWORD PTR [ebx+32]
	push	eax
	lea	ecx, DWORD PTR [esi+32]
	call	??4?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEAAV01@ABV01@@Z ; stlp_std::vector<CObject *,xalloc<CObject *> >::operator=
	lea	ecx, DWORD PTR [ebx+44]
	push	ecx
	lea	edi, DWORD PTR [esi+44]
	call	??4?$_Impl_vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<collide::rq_result,xalloc<collide::rq_result> >::operator=
	lea	edx, DWORD PTR [ebx+56]
	push	edx
	lea	ecx, DWORD PTR [esi+56]
	call	??4?$vector@PAVISpatial@@V?$xalloc@PAVISpatial@@@@@stlp_std@@QAEAAV01@ABV01@@Z ; stlp_std::vector<ISpatial *,xalloc<ISpatial *> >::operator=
	mov	eax, DWORD PTR [ebx+68]
	add	ebx, 72					; 00000048H
	push	ebx
	lea	edi, DWORD PTR [esi+72]
	mov	DWORD PTR [esi+68], eax
	call	??4?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::operator=
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??4Vision@Feel@@QAEAAV01@ABV01@@Z ENDP			; Feel::Vision::operator=
_TEXT	ENDS
PUBLIC	??0Vision@Feel@@QAE@ABV01@@Z			; Feel::Vision::Vision
; Function compile flags: /Ogtpy
;	COMDAT ??0Vision@Feel@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0Vision@Feel@@QAE@ABV01@@Z PROC			; Feel::Vision::Vision, COMDAT
; _this$ = ecx
	push	ebx
	mov	ebx, DWORD PTR ___that$[esp]
	push	esi
	push	edi
	mov	edi, ecx
	mov	DWORD PTR [edi], OFFSET ??_7pure_relcase@@6B@
	mov	eax, DWORD PTR [ebx+4]
	lea	ecx, DWORD PTR [ebx+8]
	push	ecx
	lea	ecx, DWORD PTR [edi+8]
	mov	DWORD PTR [edi+4], eax
	mov	DWORD PTR [edi], OFFSET ??_7Vision@Feel@@6B@
	call	??0?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::vector<CObject *,xalloc<CObject *> >::vector<CObject *,xalloc<CObject *> >
	lea	edx, DWORD PTR [ebx+20]
	push	edx
	lea	ecx, DWORD PTR [edi+20]
	call	??0?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::vector<CObject *,xalloc<CObject *> >::vector<CObject *,xalloc<CObject *> >
	lea	eax, DWORD PTR [ebx+32]
	push	eax
	lea	ecx, DWORD PTR [edi+32]
	call	??0?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::vector<CObject *,xalloc<CObject *> >::vector<CObject *,xalloc<CObject *> >
	lea	eax, DWORD PTR [ebx+44]
	lea	esi, DWORD PTR [edi+44]
	call	??0?$_Impl_vector@Urq_result@collide@@V?$xalloc@Urq_result@collide@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<collide::rq_result,xalloc<collide::rq_result> >::_Impl_vector<collide::rq_result,xalloc<collide::rq_result> >
	lea	ecx, DWORD PTR [ebx+56]
	push	ecx
	lea	ecx, DWORD PTR [edi+56]
	call	??0?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::_Impl_vector<void *,xalloc<void *> >
	mov	edx, DWORD PTR [ebx+68]
	lea	eax, DWORD PTR [ebx+72]
	lea	esi, DWORD PTR [edi+72]
	mov	DWORD PTR [edi+68], edx
	call	??0?$_Impl_vector@Ufeel_visible_Item@Vision@Feel@@V?$xalloc@Ufeel_visible_Item@Vision@Feel@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >::_Impl_vector<Feel::Vision::feel_visible_Item,xalloc<Feel::Vision::feel_visible_Item> >
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	ret	4
??0Vision@Feel@@QAE@ABV01@@Z ENDP			; Feel::Vision::Vision
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
;	COMDAT ?resize@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEXIABQAVCObject@@@Z
_TEXT	SEGMENT
?resize@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEXIABQAVCObject@@@Z PROC ; stlp_std::vector<CObject *,xalloc<CObject *> >::resize, COMDAT
; _this$ = edx
; ___new_size$ = ecx
; ___x$ = eax

; 217  :   { _M_impl.resize(__new_size, cast_traits::to_storage_type_cref(__x)); }

	jmp	?resize@?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAEXIABQAX@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::resize
?resize@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEXIABQAVCObject@@@Z ENDP ; stlp_std::vector<CObject *,xalloc<CObject *> >::resize
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?clear_and_reserve@?$xr_vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear_and_reserve@?$xr_vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@@QAEXXZ PROC ; xr_vector<CObject *,xalloc<CObject *> >::clear_and_reserve, COMDAT
; _this$ = eax

; 130  : 	void	clear_and_reserve	()									{ if ( capacity() <= (size()+size()/4) ) clear_not_free(); else { u32 old=size(); clear_and_free(); reserve(old); } }

	push	ebx
	push	esi
	mov	ebx, eax
	mov	esi, DWORD PTR [ebx+8]
	sub	esi, DWORD PTR [ebx]
	push	edi
	mov	ecx, ebx
	sar	esi, 2
	call	?size@?$xr_vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@@QBEIXZ ; xr_vector<CObject *,xalloc<CObject *> >::size
	mov	edi, eax
	mov	ecx, ebx
	shr	edi, 2
	call	?size@?$xr_vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@@QBEIXZ ; xr_vector<CObject *,xalloc<CObject *> >::size
	add	eax, edi
	cmp	esi, eax
	ja	SHORT $LN2@clear_and_@25
	push	ebx
	call	?clear_not_free@?$xr_vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@@QAEXXZ ; xr_vector<CObject *,xalloc<CObject *> >::clear_not_free
	pop	edi
	pop	esi
	pop	ebx
	ret	0
$LN2@clear_and_@25:
	mov	ecx, ebx
	call	?size@?$xr_vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@@QBEIXZ ; xr_vector<CObject *,xalloc<CObject *> >::size
	mov	ecx, DWORD PTR [ebx+4]
	mov	edi, eax
	mov	eax, DWORD PTR [ebx]
	cmp	eax, ecx
	je	SHORT $LN40@clear_and_@25
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN46@clear_and_@25
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN46@clear_and_@25:
	mov	DWORD PTR [ebx+4], eax
$LN40@clear_and_@25:
	mov	ecx, edi
	call	?reserve@?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAEXI@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::reserve
	pop	edi
	pop	esi
	pop	ebx
	ret	0
?clear_and_reserve@?$xr_vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@@QAEXXZ ENDP ; xr_vector<CObject *,xalloc<CObject *> >::clear_and_reserve
_TEXT	ENDS
PUBLIC	?feel_vision_update@Vision@Feel@@QAEXPAVCObject@@AAU?$_vector3@M@@MM@Z ; Feel::Vision::feel_vision_update
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\feel_vision.cpp
;	COMDAT ?feel_vision_update@Vision@Feel@@QAEXPAVCObject@@AAU?$_vector3@M@@MM@Z
_TEXT	SEGMENT
$T489621 = -8						; size = 4
$T489756 = -4						; size = 4
$T489620 = -4						; size = 4
$T489753 = 8						; size = 1
$T489616 = 8						; size = 1
$T489757 = 8						; size = 4
$T489598 = 8						; size = 4
$T489449 = 8						; size = 4
$T489448 = 8						; size = 4
$T489447 = 8						; size = 4
$T489446 = 8						; size = 4
$T489445 = 8						; size = 4
_parent$ = 8						; size = 4
_P$ = 12						; size = 4
_dt$ = 16						; size = 4
_vis_threshold$ = 20					; size = 4
?feel_vision_update@Vision@Feel@@QAEXPAVCObject@@AAU?$_vector3@M@@MM@Z PROC ; Feel::Vision::feel_vision_update, COMDAT
; _this$ = ecx

; 118  : 	{

	sub	esp, 8
	push	ebx
	push	ebp
	push	esi
	mov	ebx, ecx
	push	edi

; 119  : 		// B-A = objects, that become visible
; 120  : 		if (!seen.empty()) 

	lea	edi, DWORD PTR [ebx+8]
	mov	ecx, edi
	call	?empty@?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QBE_NXZ ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::empty
	test	al, al
	jne	$LN309@feel_visio@4

; 121  : 		{
; 122  : 			xr_vector<CObject*>::iterator E		= std::remove(seen.begin(),seen.end(),parent);

	mov	eax, DWORD PTR [ebx+12]
	push	eax
	call	?to_value_type_ptr@?$_CastTraits@PAXPAVCObject@@@priv@stlp_std@@SAPAPAVCObject@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,CObject *>::to_value_type_ptr
	add	esp, 4
	mov	ecx, edi
	mov	esi, eax
	call	?begin@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEPAPAVCObject@@XZ ; stlp_std::vector<CObject *,xalloc<CObject *> >::begin
	lea	edi, DWORD PTR _parent$[esp+20]
	call	??$__find@PAPAVCObject@@PAV1@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@0ABQAV2@ABUrandom_access_iterator_tag@1@@Z ; stlp_std::priv::__find<CObject * *,CObject *>
	cmp	eax, esi
	jne	SHORT $LN32@feel_visio@4
	mov	esi, eax
	jmp	SHORT $LN31@feel_visio@4
$LN32@feel_visio@4:
	mov	edx, eax
	add	eax, 4
	cmp	eax, esi
	je	SHORT $LN38@feel_visio@4
	mov	edi, DWORD PTR _parent$[esp+20]
	npad	2
$LL40@feel_visio@4:
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, edi
	je	SHORT $LN39@feel_visio@4
	mov	DWORD PTR [edx], ecx
	add	edx, 4
$LN39@feel_visio@4:
	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL40@feel_visio@4
$LN38@feel_visio@4:
	mov	esi, edx
$LN31@feel_visio@4:

; 123  : 			seen.resize			(E-seen.begin());

	lea	edi, DWORD PTR [ebx+8]
	xor	ebp, ebp
	mov	ecx, edi
	mov	DWORD PTR $T489445[esp+20], ebp
	call	?begin@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEPAPAVCObject@@XZ ; stlp_std::vector<CObject *,xalloc<CObject *> >::begin
	sub	esi, eax
	sar	esi, 2
	lea	eax, DWORD PTR $T489445[esp+20]
	mov	ecx, esi
	mov	edx, edi
	call	?resize@?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAEXIABQAX@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::resize

; 124  : 
; 125  : 			{
; 126  : 				diff.resize	(_max(seen.size(),query.size()));

	lea	ecx, DWORD PTR [ebx+20]
	mov	DWORD PTR $T489446[esp+20], ebp
	call	?size@?$xr_vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@@QBEIXZ ; xr_vector<CObject *,xalloc<CObject *> >::size
	mov	ecx, edi
	mov	esi, eax
	call	?size@?$xr_vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@@QBEIXZ ; xr_vector<CObject *,xalloc<CObject *> >::size
	cmp	eax, esi
	mov	ecx, eax
	ja	SHORT $LN72@feel_visio@4
	mov	ecx, esi
$LN72@feel_visio@4:
	lea	esi, DWORD PTR [ebx+32]
	lea	eax, DWORD PTR $T489446[esp+20]
	mov	edx, esi
	call	?resize@?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAEXIABQAX@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::resize

; 127  : 				xr_vector<CObject*>::iterator	E = std::set_difference(
; 128  : 					seen.begin(), seen.end(),
; 129  : 					query.begin(),query.end(),
; 130  : 					diff.begin() );

	mov	eax, DWORD PTR [ebx+24]
	push	eax
	call	?to_value_type_ptr@?$_CastTraits@PAXPAVCObject@@@priv@stlp_std@@SAPAPAVCObject@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,CObject *>::to_value_type_ptr
	mov	ebp, eax
	mov	eax, DWORD PTR [ebx+12]
	push	eax
	call	?to_value_type_ptr@?$_CastTraits@PAXPAVCObject@@@priv@stlp_std@@SAPAPAVCObject@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,CObject *>::to_value_type_ptr
	add	esp, 8
	mov	ecx, esi
	mov	DWORD PTR $T489598[esp+20], eax
	call	?begin@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEPAPAVCObject@@XZ ; stlp_std::vector<CObject *,xalloc<CObject *> >::begin
	lea	ecx, DWORD PTR [ebx+20]
	mov	DWORD PTR $T489621[esp+24], eax
	call	?begin@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEPAPAVCObject@@XZ ; stlp_std::vector<CObject *,xalloc<CObject *> >::begin
	mov	ecx, edi
	mov	DWORD PTR $T489620[esp+24], eax
	call	?begin@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEPAPAVCObject@@XZ ; stlp_std::vector<CObject *,xalloc<CObject *> >::begin
	mov	edx, DWORD PTR $T489598[esp+20]
	mov	ecx, eax
	mov	eax, DWORD PTR $T489616[esp+20]
	push	eax
	mov	eax, DWORD PTR $T489621[esp+28]
	push	ebp
	push	edx
	mov	edx, DWORD PTR $T489620[esp+36]
	call	??$__set_difference@PAPAVCObject@@PAPAV1@PAPAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@0000U?$less@PAVCObject@@@1@@Z ; stlp_std::priv::__set_difference<CObject * *,CObject * *,CObject * *,stlp_std::less<CObject *> >
	add	esp, 12					; 0000000cH

; 131  : 				diff.resize(E-diff.begin());

	mov	ecx, esi
	mov	edi, eax
	mov	DWORD PTR $T489447[esp+20], 0
	call	?begin@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEPAPAVCObject@@XZ ; stlp_std::vector<CObject *,xalloc<CObject *> >::begin
	sub	edi, eax
	sar	edi, 2
	lea	eax, DWORD PTR $T489447[esp+20]
	mov	ecx, edi
	mov	edx, esi
	call	?resize@?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAEXIABQAX@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::resize

; 132  : 				for (u32 i=0; i<diff.size(); i++)

	mov	ecx, esi
	xor	edi, edi
	call	?size@?$xr_vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@@QBEIXZ ; xr_vector<CObject *,xalloc<CObject *> >::size
	test	eax, eax
	jbe	SHORT $LN309@feel_visio@4
$LL7@feel_visio@4:

; 133  : 					o_new(diff[i]);

	push	edi
	mov	ecx, esi
	call	??A?$xr_vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@@QAEAAPAVCObject@@I@Z ; xr_vector<CObject *,xalloc<CObject *> >::operator[]
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, ebx
	call	?o_new@Vision@Feel@@AAEXPAVCObject@@@Z	; Feel::Vision::o_new
	mov	ecx, esi
	add	edi, 1
	call	?size@?$xr_vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@@QBEIXZ ; xr_vector<CObject *,xalloc<CObject *> >::size
	cmp	edi, eax
	jb	SHORT $LL7@feel_visio@4
$LN309@feel_visio@4:

; 134  : 			}
; 135  : 		}
; 136  : 
; 137  : 		// A-B = objects, that are invisible
; 138  : 		if (!query.empty()) 

	lea	esi, DWORD PTR [ebx+20]
	mov	ecx, esi
	call	?empty@?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QBE_NXZ ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::empty
	test	al, al
	jne	$LN1@feel_visio@4

; 139  : 		{
; 140  : 			diff.resize	(_max(seen.size(),query.size()));

	mov	ecx, esi
	mov	DWORD PTR $T489448[esp+20], 0
	call	?size@?$xr_vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@@QBEIXZ ; xr_vector<CObject *,xalloc<CObject *> >::size
	lea	ecx, DWORD PTR [ebx+8]
	mov	esi, eax
	call	?size@?$xr_vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@@QBEIXZ ; xr_vector<CObject *,xalloc<CObject *> >::size
	cmp	eax, esi
	mov	ecx, eax
	ja	SHORT $LN175@feel_visio@4
	mov	ecx, esi
$LN175@feel_visio@4:
	lea	esi, DWORD PTR [ebx+32]
	lea	eax, DWORD PTR $T489448[esp+20]
	mov	edx, esi
	call	?resize@?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAEXIABQAX@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::resize

; 141  : 			xr_vector<CObject*>::iterator	E = std::set_difference(
; 142  : 				query.begin(),query.end(),
; 143  : 				seen.begin(), seen.end(),
; 144  : 				diff.begin() );

	mov	eax, DWORD PTR [ebx+12]
	push	eax
	call	?to_value_type_ptr@?$_CastTraits@PAXPAVCObject@@@priv@stlp_std@@SAPAPAVCObject@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,CObject *>::to_value_type_ptr
	mov	edi, eax
	mov	eax, DWORD PTR [ebx+24]
	push	eax
	call	?to_value_type_ptr@?$_CastTraits@PAXPAVCObject@@@priv@stlp_std@@SAPAPAVCObject@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,CObject *>::to_value_type_ptr
	add	esp, 8
	mov	ecx, esi
	mov	ebp, eax
	call	?begin@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEPAPAVCObject@@XZ ; stlp_std::vector<CObject *,xalloc<CObject *> >::begin
	lea	ecx, DWORD PTR [ebx+8]
	mov	DWORD PTR $T489757[esp+20], eax
	call	?begin@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEPAPAVCObject@@XZ ; stlp_std::vector<CObject *,xalloc<CObject *> >::begin
	lea	ecx, DWORD PTR [ebx+20]
	mov	DWORD PTR $T489756[esp+24], eax
	call	?begin@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEPAPAVCObject@@XZ ; stlp_std::vector<CObject *,xalloc<CObject *> >::begin
	mov	edx, DWORD PTR $T489753[esp+20]
	push	edx
	mov	edx, DWORD PTR $T489756[esp+28]
	mov	ecx, eax
	mov	eax, DWORD PTR $T489757[esp+24]
	push	edi
	push	ebp
	call	??$__set_difference@PAPAVCObject@@PAPAV1@PAPAV1@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAPAPAVCObject@@PAPAV2@0000U?$less@PAVCObject@@@1@@Z ; stlp_std::priv::__set_difference<CObject * *,CObject * *,CObject * *,stlp_std::less<CObject *> >
	add	esp, 12					; 0000000cH

; 145  : 			diff.resize(E-diff.begin());

	mov	ecx, esi
	mov	edi, eax
	mov	DWORD PTR $T489449[esp+20], 0
	call	?begin@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEPAPAVCObject@@XZ ; stlp_std::vector<CObject *,xalloc<CObject *> >::begin
	sub	edi, eax
	sar	edi, 2
	lea	eax, DWORD PTR $T489449[esp+20]
	mov	ecx, edi
	mov	edx, esi
	call	?resize@?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAEXIABQAX@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::resize

; 146  : 			for (u32 i=0; i<diff.size(); i++)

	mov	ecx, esi
	xor	edi, edi
	call	?size@?$xr_vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@@QBEIXZ ; xr_vector<CObject *,xalloc<CObject *> >::size
	test	eax, eax
	jbe	SHORT $LN1@feel_visio@4
	mov	ebp, DWORD PTR __imp__memmove
	npad	1
$LL3@feel_visio@4:

; 147  : 				o_delete(diff[i]);

	push	edi
	mov	ecx, esi
	call	??A?$xr_vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@@QAEAAPAVCObject@@I@Z ; xr_vector<CObject *,xalloc<CObject *> >::operator[]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ebx+72]
	mov	ecx, DWORD PTR [ebx+76]
	cmp	eax, ecx
	je	SHORT $LN2@feel_visio@4
$LL262@feel_visio@4:
	cmp	DWORD PTR [eax+116], edx
	je	SHORT $LN304@feel_visio@4
	add	eax, 132				; 00000084H
	cmp	eax, ecx
	jne	SHORT $LL262@feel_visio@4
	jmp	SHORT $LN2@feel_visio@4
$LN304@feel_visio@4:
	lea	edx, DWORD PTR [eax+132]
	cmp	edx, ecx
	je	SHORT $LN292@feel_visio@4
	sub	ecx, edx
	je	SHORT $LN292@feel_visio@4
	push	ecx
	push	edx
	push	eax
	call	ebp
	add	esp, 12					; 0000000cH
$LN292@feel_visio@4:
	add	DWORD PTR [ebx+76], -132		; ffffff7cH
$LN2@feel_visio@4:

; 146  : 			for (u32 i=0; i<diff.size(); i++)

	mov	ecx, esi
	add	edi, 1
	call	?size@?$xr_vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@@QBEIXZ ; xr_vector<CObject *,xalloc<CObject *> >::size
	cmp	edi, eax
	jb	SHORT $LL3@feel_visio@4
$LN1@feel_visio@4:

; 148  : 		}
; 149  : 
; 150  : 		// Copy results and perform traces
; 151  : 		query				= seen;

	lea	eax, DWORD PTR [ebx+8]
	push	eax
	lea	ecx, DWORD PTR [ebx+20]
	call	??4?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEAAV01@ABV01@@Z ; stlp_std::vector<CObject *,xalloc<CObject *> >::operator=

; 152  : 		o_trace				(P,dt,vis_threshold);

	fld	DWORD PTR _vis_threshold$[esp+20]
	mov	eax, DWORD PTR _P$[esp+20]
	sub	esp, 8
	fstp	DWORD PTR [esp+4]
	mov	ecx, ebx
	fld	DWORD PTR _dt$[esp+28]
	fstp	DWORD PTR [esp]
	push	eax
	call	?o_trace@Vision@Feel@@AAEXAAU?$_vector3@M@@MM@Z ; Feel::Vision::o_trace
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 153  : 	}

	add	esp, 8
	ret	16					; 00000010H
?feel_vision_update@Vision@Feel@@QAEXPAVCObject@@AAU?$_vector3@M@@MM@Z ENDP ; Feel::Vision::feel_vision_update
_TEXT	ENDS
PUBLIC	?feel_vision_query@Vision@Feel@@QAEXAAU?$_matrix@M@@AAU?$_vector3@M@@@Z ; Feel::Vision::feel_vision_query
; Function compile flags: /Ogtpy
;	COMDAT ?feel_vision_query@Vision@Feel@@QAEXAAU?$_matrix@M@@AAU?$_vector3@M@@@Z
_TEXT	SEGMENT
$T490278 = -248						; size = 1
$T490269 = -248						; size = 1
_object$127007 = -248					; size = 4
_this$ = -248						; size = 4
_Frustum$ = -244					; size = 244
_mFull$ = 8						; size = 4
_P$ = 12						; size = 4
?feel_vision_query@Vision@Feel@@QAEXAAU?$_matrix@M@@AAU?$_vector3@M@@@Z PROC ; Feel::Vision::feel_vision_query, COMDAT
; _this$ = ecx

; 87   : 	{

	sub	esp, 248				; 000000f8H

; 88   : 		CFrustum								Frustum		;
; 89   : 		Frustum.CreateFromMatrix				(mFull,FRUSTUM_P_LRTB|FRUSTUM_P_FAR);

	mov	eax, DWORD PTR _mFull$[esp+244]
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	ebp, ecx
	push	47					; 0000002fH
	push	eax
	lea	ecx, DWORD PTR _Frustum$[esp+272]
	mov	DWORD PTR _this$[esp+272], ebp
	call	DWORD PTR __imp_?CreateFromMatrix@CFrustum@@QAEXAAU?$_matrix@M@@I@Z

; 90   : 
; 91   : 		// Traverse object database
; 92   : 		r_spatial.clear_not_free				();

	mov	eax, DWORD PTR [ebp+60]
	lea	esi, DWORD PTR [ebp+56]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	ebx, eax
	mov	eax, DWORD PTR [esi]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	edi, eax
	add	esp, 8
	cmp	edi, ebx
	je	SHORT $LN38@feel_visio@5
	mov	ebp, DWORD PTR [esi+4]
	sub	ebp, ebx
	je	SHORT $LN47@feel_visio@5
	push	ebp
	push	ebx
	push	edi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, ebp
$LN47@feel_visio@5:
	mov	ebp, DWORD PTR _this$[esp+264]
	mov	DWORD PTR [esi+4], eax
$LN38@feel_visio@5:
	push	edi
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr

; 93   : 		g_SpatialSpace->q_frustum
; 94   : 			(
; 95   : 			r_spatial,
; 96   : 			0,
; 97   : 			STYPE_VISIBLEFORAI,
; 98   : 			Frustum
; 99   : 			);

	mov	edx, DWORD PTR __imp_?g_SpatialSpace@@3PAVISpatial_DB@@A
	add	esp, 4
	lea	ecx, DWORD PTR _Frustum$[esp+264]
	push	ecx
	mov	ecx, DWORD PTR [edx]
	push	8
	push	0
	push	esi
	call	DWORD PTR __imp_?q_frustum@ISpatial_DB@@QAEXAAV?$xr_vector@PAVISpatial@@V?$xalloc@PAVISpatial@@@@@@IIABVCFrustum@@@Z

; 100  : 
; 101  : 		// Determine visibility for dynamic part of scene
; 102  : 		seen.clear_and_reserve					()	;

	lea	edi, DWORD PTR [ebp+8]
	mov	eax, edi
	call	?clear_and_reserve@?$xr_vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@@QAEXXZ ; xr_vector<CObject *,xalloc<CObject *> >::clear_and_reserve

; 103  : 		for (u32 o_it=0; o_it<r_spatial.size(); o_it++)

	mov	eax, DWORD PTR [esi+4]
	sub	eax, DWORD PTR [esi]
	xor	ebx, ebx
	sar	eax, 2
	je	SHORT $LN4@feel_visio@5
$LL6@feel_visio@5:

; 104  : 		{
; 105  : 			ISpatial*	spatial								= r_spatial					[o_it];

	mov	eax, DWORD PTR [esi]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	eax, DWORD PTR [eax+ebx*4]

; 106  : 			CObject*	object								= spatial->dcast_CObject	();

	mov	edx, DWORD PTR [eax]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+16]
	add	esp, 4
	call	eax

; 107  : 			if (object && feel_vision_isRelevant(object))	seen.push_back				(object);

	test	eax, eax
	mov	DWORD PTR _object$127007[esp+264], eax
	je	SHORT $LN5@feel_visio@5
	mov	edx, DWORD PTR [ebp]
	push	eax
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, ebp
	call	eax
	test	eax, eax
	je	SHORT $LN5@feel_visio@5
	mov	eax, DWORD PTR [edi+4]
	cmp	eax, DWORD PTR [edi+8]
	je	SHORT $LN78@feel_visio@5
	lea	ecx, DWORD PTR _object$127007[esp+264]
	push	ecx
	push	eax
	call	??$_Copy_Construct@PAX@stlp_std@@YAXPAPAXABQAX@Z ; stlp_std::_Copy_Construct<void *>
	add	esp, 8
	add	DWORD PTR [edi+4], 4
	jmp	SHORT $LN5@feel_visio@5
$LN78@feel_visio@5:
	push	1
	push	1
	push	eax
	lea	eax, DWORD PTR _object$127007[esp+276]
	call	?_M_insert_overflow@?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@AAEXPAPAXABQAXABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::_M_insert_overflow
$LN5@feel_visio@5:
	mov	edx, DWORD PTR [esi+4]
	sub	edx, DWORD PTR [esi]
	add	ebx, 1
	sar	edx, 2
	cmp	ebx, edx
	jb	SHORT $LL6@feel_visio@5
$LN4@feel_visio@5:

; 108  : 		}
; 109  : 		if (seen.size()>1) 

	mov	ecx, edi
	call	?size@?$xr_vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@@QBEIXZ ; xr_vector<CObject *,xalloc<CObject *> >::size
	cmp	eax, 1
	jbe	$LN179@feel_visio@5

; 110  : 		{
; 111  : 			std::sort							(seen.begin(),seen.end());

	mov	eax, DWORD PTR [ebp+12]
	push	eax
	call	?to_value_type_ptr@?$_CastTraits@PAXPAVCObject@@@priv@stlp_std@@SAPAPAVCObject@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,CObject *>::to_value_type_ptr
	add	esp, 4
	mov	ecx, edi
	mov	esi, eax
	call	?begin@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEPAPAVCObject@@XZ ; stlp_std::vector<CObject *,xalloc<CObject *> >::begin
	mov	ebx, eax
	cmp	ebx, esi
	je	SHORT $LN109@feel_visio@5
	mov	eax, esi
	sub	eax, ebx
	sar	eax, 2
	xor	ecx, ecx
	cmp	eax, 1
	je	SHORT $LN114@feel_visio@5
$LL116@feel_visio@5:
	sar	eax, 1
	add	ecx, 1
	cmp	eax, 1
	jne	SHORT $LL116@feel_visio@5
$LN114@feel_visio@5:
	mov	eax, DWORD PTR $T490269[esp+264]
	push	eax
	add	ecx, ecx
	push	ecx
	push	0
	push	esi
	push	ebx
	call	??$__introsort_loop@PAPAVCObject@@PAV1@HU?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@00HU?$less@PAVCObject@@@1@@Z ; stlp_std::priv::__introsort_loop<CObject * *,CObject *,int,stlp_std::less<CObject *> >
	mov	edx, DWORD PTR $T490278[esp+284]
	push	edx
	push	esi
	mov	eax, ebx
	call	??$__final_insertion_sort@PAPAVCObject@@U?$less@PAVCObject@@@stlp_std@@@priv@stlp_std@@YAXPAPAVCObject@@0U?$less@PAVCObject@@@1@@Z ; stlp_std::priv::__final_insertion_sort<CObject * *,stlp_std::less<CObject *> >
	add	esp, 28					; 0000001cH
$LN109@feel_visio@5:

; 112  : 			xr_vector<CObject*>::iterator end	= std::unique	(seen.begin(),seen.end());

	mov	eax, DWORD PTR [ebp+12]
	push	eax
	call	?to_value_type_ptr@?$_CastTraits@PAXPAVCObject@@@priv@stlp_std@@SAPAPAVCObject@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,CObject *>::to_value_type_ptr
	add	esp, 4
	mov	ecx, edi
	mov	esi, eax
	call	?begin@?$vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@stlp_std@@QAEPAPAVCObject@@XZ ; stlp_std::vector<CObject *,xalloc<CObject *> >::begin
	cmp	eax, esi
	jne	SHORT $LN146@feel_visio@5
	mov	eax, esi
	mov	ebx, eax
	jmp	SHORT $LN152@feel_visio@5
$LN146@feel_visio@5:
	lea	ecx, DWORD PTR [eax+4]
	cmp	ecx, esi
	je	SHORT $LN144@feel_visio@5
$LL145@feel_visio@5:
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN147@feel_visio@5
	mov	eax, ecx
	add	ecx, 4
	cmp	ecx, esi
	jne	SHORT $LL145@feel_visio@5
$LN144@feel_visio@5:
	mov	eax, esi
	mov	ebx, eax
	jmp	SHORT $LN152@feel_visio@5
$LN147@feel_visio@5:
	cmp	eax, esi
	jne	SHORT $LN151@feel_visio@5
	mov	ebx, eax
	jmp	SHORT $LN152@feel_visio@5
$LN151@feel_visio@5:
	mov	ecx, eax
	add	eax, 4
	cmp	eax, esi
	je	SHORT $LN157@feel_visio@5
	npad	3
$LL158@feel_visio@5:
	mov	edx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], edx
	je	SHORT $LN213@feel_visio@5
	add	ecx, 4
	mov	DWORD PTR [ecx], edx
$LN213@feel_visio@5:
	add	eax, 4
	cmp	eax, esi
	jne	SHORT $LL158@feel_visio@5
$LN157@feel_visio@5:
	lea	ebx, DWORD PTR [ecx+4]
$LN152@feel_visio@5:

; 113  : 			if (end!=seen.end()) seen.erase		(end,seen.end());

	mov	eax, DWORD PTR [ebp+12]
	push	eax
	call	?to_value_type_ptr@?$_CastTraits@PAXPAVCObject@@@priv@stlp_std@@SAPAPAVCObject@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,CObject *>::to_value_type_ptr
	add	esp, 4
	cmp	ebx, eax
	je	SHORT $LN179@feel_visio@5
	mov	eax, DWORD PTR [ebp+12]
	push	eax
	call	?to_value_type_ptr@?$_CastTraits@PAXPAVCObject@@@priv@stlp_std@@SAPAPAVCObject@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,CObject *>::to_value_type_ptr
	add	esp, 4
	cmp	ebx, eax
	je	SHORT $LN190@feel_visio@5
	mov	esi, DWORD PTR [edi+4]
	sub	esi, eax
	je	SHORT $LN198@feel_visio@5
	push	esi
	push	eax
	push	ebx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
	jmp	SHORT $LN199@feel_visio@5
$LN198@feel_visio@5:
	mov	eax, ebx
$LN199@feel_visio@5:
	mov	DWORD PTR [edi+4], eax
$LN190@feel_visio@5:
	push	ebx
	call	?to_value_type_ptr@?$_CastTraits@PAXPAVCObject@@@priv@stlp_std@@SAPAPAVCObject@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,CObject *>::to_value_type_ptr
	add	esp, 4
$LN179@feel_visio@5:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 114  : 		}
; 115  : 	}

	add	esp, 248				; 000000f8H
	ret	8
?feel_vision_query@Vision@Feel@@QAEXAAU?$_matrix@M@@AAU?$_vector3@M@@@Z ENDP ; Feel::Vision::feel_vision_query
_TEXT	ENDS
PUBLIC	?feel_vision_clear@Vision@Feel@@QAEXXZ		; Feel::Vision::feel_vision_clear
; Function compile flags: /Ogtpy
;	COMDAT ?feel_vision_clear@Vision@Feel@@QAEXXZ
_TEXT	SEGMENT
?feel_vision_clear@Vision@Feel@@QAEXXZ PROC		; Feel::Vision::feel_vision_clear, COMDAT
; _this$ = ecx

; 66   : 	{

	push	ebx

; 67   : 		seen.clear			();

	mov	ebx, DWORD PTR __imp__memmove
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [esi+12]
	mov	eax, DWORD PTR [esi+8]
	cmp	eax, ecx
	push	edi
	je	SHORT $LN18@feel_visio@6
	mov	edi, ecx
	sub	edi, ecx
	je	SHORT $LN24@feel_visio@6
	push	edi
	push	ecx
	push	eax
	call	ebx
	add	esp, 12					; 0000000cH
	add	eax, edi
$LN24@feel_visio@6:
	mov	DWORD PTR [esi+12], eax
$LN18@feel_visio@6:

; 68   : 		query.clear			();

	mov	ecx, DWORD PTR [esi+24]
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, ecx
	je	SHORT $LN41@feel_visio@6
	mov	edi, ecx
	sub	edi, ecx
	je	SHORT $LN47@feel_visio@6
	push	edi
	push	ecx
	push	eax
	call	ebx
	add	esp, 12					; 0000000cH
	add	eax, edi
$LN47@feel_visio@6:
	mov	DWORD PTR [esi+24], eax
$LN41@feel_visio@6:

; 69   : 		diff.clear			();

	mov	ecx, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [esi+32]
	cmp	eax, ecx
	je	SHORT $LN64@feel_visio@6
	mov	edi, ecx
	sub	edi, ecx
	je	SHORT $LN70@feel_visio@6
	push	edi
	push	ecx
	push	eax
	call	ebx
	add	esp, 12					; 0000000cH
	add	eax, edi
$LN70@feel_visio@6:
	mov	DWORD PTR [esi+36], eax
$LN64@feel_visio@6:

; 70   : 		feel_visible.clear	();

	mov	ecx, DWORD PTR [esi+76]
	mov	eax, DWORD PTR [esi+72]
	cmp	eax, ecx
	je	SHORT $LN87@feel_visio@6
	mov	edi, ecx
	sub	edi, ecx
	je	SHORT $LN93@feel_visio@6
	push	edi
	push	ecx
	push	eax
	call	ebx
	add	esp, 12					; 0000000cH
	add	eax, edi
$LN93@feel_visio@6:
	mov	DWORD PTR [esi+76], eax
$LN87@feel_visio@6:
	pop	edi
	pop	esi
	pop	ebx

; 71   : 	}

	ret	0
?feel_vision_clear@Vision@Feel@@QAEXXZ ENDP		; Feel::Vision::feel_vision_clear
_TEXT	ENDS
PUBLIC	?feel_vision_get@Vision@Feel@@QAEXAAV?$xr_vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@@@Z ; Feel::Vision::feel_vision_get
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\feel_vision.h
;	COMDAT ?feel_vision_get@Vision@Feel@@QAEXAAV?$xr_vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@@@Z
_TEXT	SEGMENT
_R$ = 8							; size = 4
?feel_vision_get@Vision@Feel@@QAEXAAV?$xr_vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@@@Z PROC ; Feel::Vision::feel_vision_get, COMDAT
; _this$ = ecx

; 52   : 		void						feel_vision_get			(xr_vector<CObject*>& R)		{

	push	ebx
	push	ebp
	push	esi
	push	edi

; 53   : 			R.clear					();

	mov	edi, DWORD PTR _R$[esp+12]
	mov	eax, DWORD PTR [edi]
	mov	ebp, ecx
	mov	ecx, DWORD PTR [edi+4]
	cmp	eax, ecx
	je	SHORT $LN22@feel_visio@7
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN28@feel_visio@7
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN28@feel_visio@7:
	mov	DWORD PTR [edi+4], eax
$LN22@feel_visio@7:

; 54   : 			xr_vector<feel_visible_Item>::iterator I=feel_visible.begin(),E=feel_visible.end();

	mov	ebx, DWORD PTR [ebp+72]
	mov	ebp, DWORD PTR [ebp+76]

; 55   : 			for (; I!=E; I++)	if (positive(I->fuzzy)) R.push_back(I->O);

	cmp	ebx, ebp
	je	SHORT $LN2@feel_visio@7

; 54   : 			xr_vector<feel_visible_Item>::iterator I=feel_visible.begin(),E=feel_visible.end();

	lea	esi, DWORD PTR [ebx+116]
$LL4@feel_visio@7:

; 55   : 			for (; I!=E; I++)	if (positive(I->fuzzy)) R.push_back(I->O);

	mov	eax, DWORD PTR [esi+4]
	shr	eax, 31					; 0000001fH
	not	eax
	test	al, 1
	je	SHORT $LN3@feel_visio@7
	mov	eax, DWORD PTR [edi+4]
	cmp	eax, DWORD PTR [edi+8]
	je	SHORT $LN51@feel_visio@7
	push	esi
	push	eax
	call	??$_Copy_Construct@PAX@stlp_std@@YAXPAPAXABQAX@Z ; stlp_std::_Copy_Construct<void *>
	add	esp, 8
	add	DWORD PTR [edi+4], 4
	jmp	SHORT $LN3@feel_visio@7
$LN51@feel_visio@7:
	push	1
	push	1
	push	eax
	mov	eax, esi
	call	?_M_insert_overflow@?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@AAEXPAPAXABQAXABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::_M_insert_overflow
$LN3@feel_visio@7:
	add	ebx, 132				; 00000084H
	add	esi, 132				; 00000084H
	cmp	ebx, ebp
	jne	SHORT $LL4@feel_visio@7
$LN2@feel_visio@7:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 56   : 		}

	ret	4
?feel_vision_get@Vision@Feel@@QAEXAAV?$xr_vector@PAVCObject@@V?$xalloc@PAVCObject@@@@@@@Z ENDP ; Feel::Vision::feel_vision_get
END
