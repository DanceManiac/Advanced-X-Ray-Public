; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	D:\CLEARSKY\sources\engine\xrEngine\bone.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?GetNumChildren@CBoneData@@EBGGXZ		; CBoneData::GetNumChildren
PUBLIC	?GetChild@CBoneData@@EAGAAVIBoneData@@G@Z	; CBoneData::GetChild
PUBLIC	?GetChild@CBoneData@@EBGABVIBoneData@@G@Z	; CBoneData::GetChild
PUBLIC	?one@?$_flags@I@@QAEAAU1@XZ			; _flags<unsigned int>::one
PUBLIC	??0?$FactoryPtr@VIWallMarkArray@@@@QAE@XZ	; FactoryPtr<IWallMarkArray>::FactoryPtr<IWallMarkArray>
PUBLIC	?DestroyObject@?$FactoryPtr@VIWallMarkArray@@@@AAEXXZ ; FactoryPtr<IWallMarkArray>::DestroyObject
PUBLIC	??1?$FactoryPtr@VIWallMarkArray@@@@QAE@XZ	; FactoryPtr<IWallMarkArray>::~FactoryPtr<IWallMarkArray>
PUBLIC	?CreateObject@?$FactoryPtr@VIWallMarkArray@@@@AAEXXZ ; FactoryPtr<IWallMarkArray>::CreateObject
PUBLIC	??0?$FactoryPtr@VIWallMarkArray@@@@QAE@ABV0@@Z	; FactoryPtr<IWallMarkArray>::FactoryPtr<IWallMarkArray>
PUBLIC	??0?$_Vector_base@Uref_sound@@V?$xalloc@Uref_sound@@@@@priv@stlp_std@@QAE@IABV?$xalloc@Uref_sound@@@@@Z ; stlp_std::priv::_Vector_base<ref_sound,xalloc<ref_sound> >::_Vector_base<ref_sound,xalloc<ref_sound> >
PUBLIC	?get_allocator@?$_Impl_vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@priv@stlp_std@@QBE?AV?$xalloc@Uref_sound@@@@XZ ; stlp_std::priv::_Impl_vector<ref_sound,xalloc<ref_sound> >::get_allocator
PUBLIC	?begin@?$_Impl_vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@priv@stlp_std@@QBEPBUref_sound@@XZ ; stlp_std::priv::_Impl_vector<ref_sound,xalloc<ref_sound> >::begin
PUBLIC	?end@?$_Impl_vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@priv@stlp_std@@QBEPBUref_sound@@XZ ; stlp_std::priv::_Impl_vector<ref_sound,xalloc<ref_sound> >::end
PUBLIC	??0?$_Impl_vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<ref_sound,xalloc<ref_sound> >::_Impl_vector<ref_sound,xalloc<ref_sound> >
PUBLIC	??0?$vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::vector<ref_sound,xalloc<ref_sound> >::vector<ref_sound,xalloc<ref_sound> >
PUBLIC	??0?$xr_vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@@QAE@ABV0@@Z ; xr_vector<ref_sound,xalloc<ref_sound> >::xr_vector<ref_sound,xalloc<ref_sound> >
PUBLIC	??A?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@QAEAAPAVCBoneData@@I@Z ; xr_vector<CBoneData *,xalloc<CBoneData *> >::operator[]
PUBLIC	??4?$FactoryPtr@VIWallMarkArray@@@@QAEAAV0@ABV0@@Z ; FactoryPtr<IWallMarkArray>::operator=
PUBLIC	?cv_cptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPBQAXPBQAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_cptr
PUBLIC	?to_value_type_cptr@?$_CastTraits@PAXPAVCBoneData@@@priv@stlp_std@@SAPBQAVCBoneData@@PBQAX@Z ; stlp_std::priv::_CastTraits<void *,CBoneData *>::to_value_type_cptr
PUBLIC	?begin@?$vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@stlp_std@@QBEPBQAVCBoneData@@XZ ; stlp_std::vector<CBoneData *,xalloc<CBoneData *> >::begin
PUBLIC	??A?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@QBEABQAVCBoneData@@I@Z ; xr_vector<CBoneData *,xalloc<CBoneData *> >::operator[]
PUBLIC	?invert@?$_matrix@M@@QAEAAU1@XZ			; _matrix<float>::invert
PUBLIC	?begin@?$vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@stlp_std@@QAEPAPAVCBoneData@@XZ ; stlp_std::vector<CBoneData *,xalloc<CBoneData *> >::begin
PUBLIC	?to_value_type_ptr@?$_CastTraits@PAXPAVCBoneData@@@priv@stlp_std@@SAPAPAVCBoneData@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,CBoneData *>::to_value_type_ptr
PUBLIC	?end@?$vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@stlp_std@@QAEPAPAVCBoneData@@XZ ; stlp_std::vector<CBoneData *,xalloc<CBoneData *> >::end
PUBLIC	?clear@?$vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@stlp_std@@QAEXXZ ; stlp_std::vector<SGameMtl *,xalloc<SGameMtl *> >::clear
PUBLIC	?clear_and_free@?$xr_vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@@QAEXXZ ; xr_vector<SGameMtl *,xalloc<SGameMtl *> >::clear_and_free
PUBLIC	?clear@?$xr_vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@@QAEXXZ ; xr_vector<SGameMtl *,xalloc<SGameMtl *> >::clear
PUBLIC	?clear@?$vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@stlp_std@@QAEXXZ ; stlp_std::vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::clear
PUBLIC	?clear_and_free@?$xr_vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@@QAEXXZ ; xr_vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::clear_and_free
PUBLIC	?clear@?$xr_vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@@QAEXXZ ; xr_vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::clear
PUBLIC	??_GSGameMtl@@QAEPAXI@Z				; SGameMtl::`scalar deleting destructor'
PUBLIC	??R?$xr_special_free@$0A@USGameMtl@@@@QAEXAAPAUSGameMtl@@@Z ; xr_special_free<0,SGameMtl>::operator()
PUBLIC	??$xr_delete@USGameMtl@@@@YAXAAPAUSGameMtl@@@Z	; xr_delete<SGameMtl>
PUBLIC	??_GSGameMtlPair@@QAEPAXI@Z			; SGameMtlPair::`scalar deleting destructor'
PUBLIC	??R?$xr_special_free@$0A@USGameMtlPair@@@@QAEXAAPAUSGameMtlPair@@@Z ; xr_special_free<0,SGameMtlPair>::operator()
PUBLIC	??$xr_delete@USGameMtlPair@@@@YAXAAPAUSGameMtlPair@@@Z ; xr_delete<SGameMtlPair>
PUBLIC	??A?$xr_vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@@QAEAAPAUSGameMtl@@I@Z ; xr_vector<SGameMtl *,xalloc<SGameMtl *> >::operator[]
PUBLIC	?begin@?$vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@stlp_std@@QAEPAPAUSGameMtl@@XZ ; stlp_std::vector<SGameMtl *,xalloc<SGameMtl *> >::begin
PUBLIC	?to_value_type_ptr@?$_CastTraits@PAXPAUSGameMtl@@@priv@stlp_std@@SAPAPAUSGameMtl@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,SGameMtl *>::to_value_type_ptr
PUBLIC	?end@?$vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@stlp_std@@QAEPAPAUSGameMtl@@XZ ; stlp_std::vector<SGameMtl *,xalloc<SGameMtl *> >::end
PUBLIC	?size@?$vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@stlp_std@@QBEIXZ ; stlp_std::vector<SGameMtl *,xalloc<SGameMtl *> >::size
PUBLIC	?size@?$xr_vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@@QBEIXZ ; xr_vector<SGameMtl *,xalloc<SGameMtl *> >::size
PUBLIC	??A?$xr_vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@@QAEAAPAUSGameMtlPair@@I@Z ; xr_vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::operator[]
PUBLIC	?begin@?$vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@stlp_std@@QAEPAPAUSGameMtlPair@@XZ ; stlp_std::vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::begin
PUBLIC	?to_value_type_ptr@?$_CastTraits@PAXPAUSGameMtlPair@@@priv@stlp_std@@SAPAPAUSGameMtlPair@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,SGameMtlPair *>::to_value_type_ptr
PUBLIC	?end@?$vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@stlp_std@@QAEPAPAUSGameMtlPair@@XZ ; stlp_std::vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::end
PUBLIC	??1?$xr_vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@@QAE@XZ ; xr_vector<SGameMtl *,xalloc<SGameMtl *> >::~xr_vector<SGameMtl *,xalloc<SGameMtl *> >
PUBLIC	??0?$vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::vector<SGameMtl *,xalloc<SGameMtl *> >::vector<SGameMtl *,xalloc<SGameMtl *> >
PUBLIC	??1?$vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@stlp_std@@QAE@XZ ; stlp_std::vector<SGameMtl *,xalloc<SGameMtl *> >::~vector<SGameMtl *,xalloc<SGameMtl *> >
PUBLIC	??0?$xr_vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@@QAE@ABV0@@Z ; xr_vector<SGameMtl *,xalloc<SGameMtl *> >::xr_vector<SGameMtl *,xalloc<SGameMtl *> >
PUBLIC	??1?$xr_vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@@QAE@XZ ; xr_vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::~xr_vector<SGameMtlPair *,xalloc<SGameMtlPair *> >
PUBLIC	??0?$vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::vector<SGameMtlPair *,xalloc<SGameMtlPair *> >
PUBLIC	??1?$vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@stlp_std@@QAE@XZ ; stlp_std::vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::~vector<SGameMtlPair *,xalloc<SGameMtlPair *> >
PUBLIC	??0?$xr_vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@@QAE@ABV0@@Z ; xr_vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::xr_vector<SGameMtlPair *,xalloc<SGameMtlPair *> >
PUBLIC	??4?$vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@stlp_std@@QAEAAV01@ABV01@@Z ; stlp_std::vector<SGameMtl *,xalloc<SGameMtl *> >::operator=
PUBLIC	??4?$xr_vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@@QAEAAV0@ABV0@@Z ; xr_vector<SGameMtl *,xalloc<SGameMtl *> >::operator=
PUBLIC	??4?$vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@stlp_std@@QAEAAV01@ABV01@@Z ; stlp_std::vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::operator=
PUBLIC	??4?$xr_vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@@QAEAAV0@ABV0@@Z ; xr_vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::operator=
PUBLIC	?identity@?$_obb@M@@QAEAAU1@XZ			; _obb<float>::identity
PUBLIC	?ignore_always@?3??GetMaterialPair@CGameMtlLibrary@@QAEPAUSGameMtlPair@@GG@Z@4_NA ; `CGameMtlLibrary::GetMaterialPair'::`4'::ignore_always
PUBLIC	??_C@_0CB@BALGFMIA@CGameMtlLibrary?3?3GetMaterialPair@ ; `string'
PUBLIC	??_C@_0DB@HAABEIE@d?3?2clearsky?2sources?2engine?2xreng@ ; `string'
PUBLIC	??_C@_0CN@NLLJLIMO@?$CIidx0?$DMmaterial_count?$CJ?$CG?$CG?$CIidx1?$DMmat@ ; `string'
EXTRN	__imp__strcmpi:PROC
;	COMDAT ?ignore_always@?3??GetMaterialPair@CGameMtlLibrary@@QAEPAUSGameMtlPair@@GG@Z@4_NA
_BSS	SEGMENT
?ignore_always@?3??GetMaterialPair@CGameMtlLibrary@@QAEPAUSGameMtlPair@@GG@Z@4_NA DB 01H DUP (?) ; `CGameMtlLibrary::GetMaterialPair'::`4'::ignore_always
;	COMDAT ??_C@_0CN@NLLJLIMO@?$CIidx0?$DMmaterial_count?$CJ?$CG?$CG?$CIidx1?$DMmat@
CONST	SEGMENT
??_C@_0CN@NLLJLIMO@?$CIidx0?$DMmaterial_count?$CJ?$CG?$CG?$CIidx1?$DMmat@ DB '('
	DB	'idx0<material_count)&&(idx1<material_count)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@HAABEIE@d?3?2clearsky?2sources?2engine?2xreng@
CONST	SEGMENT
??_C@_0DB@HAABEIE@d?3?2clearsky?2sources?2engine?2xreng@ DB 'd:\clearsky\'
	DB	'sources\engine\xrengine\gamemtllib.h', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@BALGFMIA@CGameMtlLibrary?3?3GetMaterialPair@
CONST	SEGMENT
??_C@_0CB@BALGFMIA@CGameMtlLibrary?3?3GetMaterialPair@ DB 'CGameMtlLibrar'
	DB	'y::GetMaterialPair', 00H			; `string'
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\include\xrrender\factoryptr.h
;	COMDAT ?CreateObject@?$FactoryPtr@VIWallMarkArray@@@@AAEXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?CreateObject@?$FactoryPtr@VIWallMarkArray@@@@AAEXXZ PROC ; FactoryPtr<IWallMarkArray>::CreateObject, COMDAT

; 66   : 	FACTORY_PTR_INSTANCIATE(WallMarkArray)

	mov	eax, DWORD PTR __imp_?RenderFactory@@3PAVIRenderFactory@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	mov	ecx, DWORD PTR _this$[esp-4]
	mov	DWORD PTR [ecx], eax
	ret	4
?CreateObject@?$FactoryPtr@VIWallMarkArray@@@@AAEXXZ ENDP ; FactoryPtr<IWallMarkArray>::CreateObject
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?DestroyObject@?$FactoryPtr@VIWallMarkArray@@@@AAEXXZ
_TEXT	SEGMENT
?DestroyObject@?$FactoryPtr@VIWallMarkArray@@@@AAEXXZ PROC ; FactoryPtr<IWallMarkArray>::DestroyObject, COMDAT
; _this$ = esi

; 66   : 	FACTORY_PTR_INSTANCIATE(WallMarkArray)

	mov	eax, DWORD PTR __imp_?RenderFactory@@3PAVIRenderFactory@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [edx+52]
	push	eax
	call	edx
	mov	DWORD PTR [esi], 0
	ret	0
?DestroyObject@?$FactoryPtr@VIWallMarkArray@@@@AAEXXZ ENDP ; FactoryPtr<IWallMarkArray>::DestroyObject
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_tools.h
_TEXT	ENDS
;	COMDAT ?cv_cptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPBQAXPBQAX@Z
_TEXT	SEGMENT
?cv_cptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPBQAXPBQAX@Z PROC ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_cptr, COMDAT
; ___ptr$ = eax

; 151  :   { return __ptr; }

	ret	0
?cv_cptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPBQAXPBQAX@Z ENDP ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_cptr
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_value_type_cptr@?$_CastTraits@PAXPAVCBoneData@@@priv@stlp_std@@SAPBQAVCBoneData@@PBQAX@Z
_TEXT	SEGMENT
?to_value_type_cptr@?$_CastTraits@PAXPAVCBoneData@@@priv@stlp_std@@SAPBQAVCBoneData@@PBQAX@Z PROC ; stlp_std::priv::_CastTraits<void *,CBoneData *>::to_value_type_cptr, COMDAT
; ___ptr$ = eax

; 209  :   { return __REINTERPRET_CAST(value_type const*, cv_traits::cv_cptr(__ptr)); }

	ret	0
?to_value_type_cptr@?$_CastTraits@PAXPAVCBoneData@@@priv@stlp_std@@SAPBQAVCBoneData@@PBQAX@Z ENDP ; stlp_std::priv::_CastTraits<void *,CBoneData *>::to_value_type_cptr
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?end@?$_Impl_vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@priv@stlp_std@@QBEPBUref_sound@@XZ
_TEXT	SEGMENT
?end@?$_Impl_vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@priv@stlp_std@@QBEPBUref_sound@@XZ PROC ; stlp_std::priv::_Impl_vector<ref_sound,xalloc<ref_sound> >::end, COMDAT
; _this$ = eax

; 173  :   const_iterator end() const   { return this->_M_finish; }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?end@?$_Impl_vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@priv@stlp_std@@QBEPBUref_sound@@XZ ENDP ; stlp_std::priv::_Impl_vector<ref_sound,xalloc<ref_sound> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$_Impl_vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@priv@stlp_std@@QBEPBUref_sound@@XZ
_TEXT	SEGMENT
?begin@?$_Impl_vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@priv@stlp_std@@QBEPBUref_sound@@XZ PROC ; stlp_std::priv::_Impl_vector<ref_sound,xalloc<ref_sound> >::begin, COMDAT
; _this$ = eax

; 171  :   const_iterator begin() const { return this->_M_start; }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$_Impl_vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@priv@stlp_std@@QBEPBUref_sound@@XZ ENDP ; stlp_std::priv::_Impl_vector<ref_sound,xalloc<ref_sound> >::begin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\include\xrrender\factoryptr.h
_TEXT	ENDS
;	COMDAT ??4?$FactoryPtr@VIWallMarkArray@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
??4?$FactoryPtr@VIWallMarkArray@@@@QAEAAV0@ABV0@@Z PROC	; FactoryPtr<IWallMarkArray>::operator=, COMDAT
; _this$ = esi
; __in$ = edx

; 35   : 		m_pObject->Copy(*_in.m_pObject);

	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [eax+4]
	push	edx
	call	eax

; 36   : 		return *this;

	mov	eax, esi

; 37   : 	}

	ret	0
??4?$FactoryPtr@VIWallMarkArray@@@@QAEAAV0@ABV0@@Z ENDP	; FactoryPtr<IWallMarkArray>::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$FactoryPtr@VIWallMarkArray@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
__in$ = 8						; size = 4
??0?$FactoryPtr@VIWallMarkArray@@@@QAE@ABV0@@Z PROC	; FactoryPtr<IWallMarkArray>::FactoryPtr<IWallMarkArray>, COMDAT
; _this$ = esi

; 28   : 	{
; 29   : 		CreateObject();

	mov	eax, DWORD PTR __imp_?RenderFactory@@3PAVIRenderFactory@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 30   : 		m_pObject->Copy(*_in.m_pObject);

	mov	ecx, DWORD PTR __in$[esp-4]
	mov	DWORD PTR [esi], eax
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+4]
	push	ecx
	mov	ecx, eax
	call	edx

; 31   : 	}

	mov	eax, esi
	ret	4
??0?$FactoryPtr@VIWallMarkArray@@@@QAE@ABV0@@Z ENDP	; FactoryPtr<IWallMarkArray>::FactoryPtr<IWallMarkArray>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$FactoryPtr@VIWallMarkArray@@@@QAE@XZ
_TEXT	SEGMENT
??1?$FactoryPtr@VIWallMarkArray@@@@QAE@XZ PROC		; FactoryPtr<IWallMarkArray>::~FactoryPtr<IWallMarkArray>, COMDAT
; _this$ = esi

; 25   : 	~FactoryPtr() { DestroyObject();}

	mov	eax, DWORD PTR __imp_?RenderFactory@@3PAVIRenderFactory@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [edx+52]
	push	eax
	call	edx
	mov	DWORD PTR [esi], 0
	ret	0
??1?$FactoryPtr@VIWallMarkArray@@@@QAE@XZ ENDP		; FactoryPtr<IWallMarkArray>::~FactoryPtr<IWallMarkArray>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$FactoryPtr@VIWallMarkArray@@@@QAE@XZ
_TEXT	SEGMENT
??0?$FactoryPtr@VIWallMarkArray@@@@QAE@XZ PROC		; FactoryPtr<IWallMarkArray>::FactoryPtr<IWallMarkArray>, COMDAT
; _this$ = esi

; 24   : 	FactoryPtr() { CreateObject();}

	mov	eax, DWORD PTR __imp_?RenderFactory@@3PAVIRenderFactory@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	mov	DWORD PTR [esi], eax
	mov	eax, esi
	ret	0
??0?$FactoryPtr@VIWallMarkArray@@@@QAE@XZ ENDP		; FactoryPtr<IWallMarkArray>::FactoryPtr<IWallMarkArray>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_flags.h
_TEXT	ENDS
;	COMDAT ?one@?$_flags@I@@QAEAAU1@XZ
_TEXT	SEGMENT
?one@?$_flags@I@@QAEAAU1@XZ PROC			; _flags<unsigned int>::one, COMDAT
; _this$ = eax

; 16   :     IC	SelfRef	one		()											{ flags=T(-1);	return *this;	}

	mov	DWORD PTR [eax], -1
	ret	0
?one@?$_flags@I@@QAEAAU1@XZ ENDP			; _flags<unsigned int>::one
_TEXT	ENDS
PUBLIC	?get_param@CBoneInstance@@QAEMI@Z		; CBoneInstance::get_param
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\bone.cpp
;	COMDAT ?get_param@CBoneInstance@@QAEMI@Z
_TEXT	SEGMENT
_idx$ = 8						; size = 4
?get_param@CBoneInstance@@QAEMI@Z PROC			; CBoneInstance::get_param, COMDAT
; _this$ = ecx

; 30   : 	VERIFY		(idx<MAX_BONE_PARAMS);
; 31   : 	return		param[idx];

	mov	eax, DWORD PTR _idx$[esp-4]
	fld	DWORD PTR [ecx+eax*4+144]

; 32   : }

	ret	4
?get_param@CBoneInstance@@QAEMI@Z ENDP			; CBoneInstance::get_param
_TEXT	ENDS
PUBLIC	?set_param@CBoneInstance@@QAEXIM@Z		; CBoneInstance::set_param
; Function compile flags: /Ogtpy
;	COMDAT ?set_param@CBoneInstance@@QAEXIM@Z
_TEXT	SEGMENT
_idx$ = 8						; size = 4
_data$ = 12						; size = 4
?set_param@CBoneInstance@@QAEXIM@Z PROC			; CBoneInstance::set_param, COMDAT
; _this$ = ecx

; 25   : 	VERIFY		(idx<MAX_BONE_PARAMS);
; 26   : 	param[idx]	= data;

	mov	eax, DWORD PTR _idx$[esp-4]
	movss	xmm0, DWORD PTR _data$[esp-4]
	movss	DWORD PTR [ecx+eax*4+144], xmm0

; 27   : }

	ret	8
?set_param@CBoneInstance@@QAEXIM@Z ENDP			; CBoneInstance::set_param
_TEXT	ENDS
PUBLIC	?GetParent@SGameMtlPair@@QAEHXZ			; SGameMtlPair::GetParent
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\gamemtllib.h
;	COMDAT ?GetParent@SGameMtlPair@@QAEHXZ
_TEXT	SEGMENT
?GetParent@SGameMtlPair@@QAEHXZ PROC			; SGameMtlPair::GetParent, COMDAT
; _this$ = ecx

; 220  :     IC int 				GetParent		(){return ID_parent;}

	mov	eax, DWORD PTR [ecx+16]
	ret	0
?GetParent@SGameMtlPair@@QAEHXZ ENDP			; SGameMtlPair::GetParent
_TEXT	ENDS
PUBLIC	?IsPair@SGameMtlPair@@QAE_NHH@Z			; SGameMtlPair::IsPair
; Function compile flags: /Ogtpy
;	COMDAT ?IsPair@SGameMtlPair@@QAE_NHH@Z
_TEXT	SEGMENT
_m0$ = 8						; size = 4
_m1$ = 12						; size = 4
?IsPair@SGameMtlPair@@QAE_NHH@Z PROC			; SGameMtlPair::IsPair, COMDAT
; _this$ = ecx

; 217  : 	IC bool				IsPair			(int m0, int m1){return !!(((mtl0==m0)&&(mtl1==m1))||((mtl0==m1)&&(mtl1==m0)));}

	mov	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _m0$[esp-4]
	cmp	eax, edx
	push	esi
	mov	esi, DWORD PTR _m1$[esp]
	jne	SHORT $LN3@IsPair
	cmp	DWORD PTR [ecx+8], esi
	je	SHORT $LN5@IsPair
$LN3@IsPair:
	cmp	eax, esi
	jne	SHORT $LN4@IsPair
	cmp	DWORD PTR [ecx+8], edx
	jne	SHORT $LN4@IsPair
$LN5@IsPair:
	mov	eax, 1
	pop	esi
	ret	8
$LN4@IsPair:
	xor	eax, eax
	pop	esi
	ret	8
?IsPair@SGameMtlPair@@QAE_NHH@Z ENDP			; SGameMtlPair::IsPair
_TEXT	ENDS
PUBLIC	?SetPair@SGameMtlPair@@QAEXHH@Z			; SGameMtlPair::SetPair
; Function compile flags: /Ogtpy
;	COMDAT ?SetPair@SGameMtlPair@@QAEXHH@Z
_TEXT	SEGMENT
_m0$ = 8						; size = 4
_m1$ = 12						; size = 4
?SetPair@SGameMtlPair@@QAEXHH@Z PROC			; SGameMtlPair::SetPair, COMDAT
; _this$ = ecx

; 216  :     IC void				SetPair			(int m0, int m1){mtl0=m0; mtl1=m1;}

	mov	eax, DWORD PTR _m0$[esp-4]
	mov	edx, DWORD PTR _m1$[esp-4]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], edx
	ret	8
?SetPair@SGameMtlPair@@QAEXHH@Z ENDP			; SGameMtlPair::SetPair
_TEXT	ENDS
PUBLIC	?GetID@SGameMtlPair@@QAEHXZ			; SGameMtlPair::GetID
; Function compile flags: /Ogtpy
;	COMDAT ?GetID@SGameMtlPair@@QAEHXZ
_TEXT	SEGMENT
?GetID@SGameMtlPair@@QAEHXZ PROC			; SGameMtlPair::GetID, COMDAT
; _this$ = ecx

; 215  :     IC int				GetID			(){return ID;}

	mov	eax, DWORD PTR [ecx+12]
	ret	0
?GetID@SGameMtlPair@@QAEHXZ ENDP			; SGameMtlPair::GetID
_TEXT	ENDS
PUBLIC	?GetMtl1@SGameMtlPair@@QAEHXZ			; SGameMtlPair::GetMtl1
; Function compile flags: /Ogtpy
;	COMDAT ?GetMtl1@SGameMtlPair@@QAEHXZ
_TEXT	SEGMENT
?GetMtl1@SGameMtlPair@@QAEHXZ PROC			; SGameMtlPair::GetMtl1, COMDAT
; _this$ = ecx

; 214  :     IC int				GetMtl1			(){return mtl1;}

	mov	eax, DWORD PTR [ecx+8]
	ret	0
?GetMtl1@SGameMtlPair@@QAEHXZ ENDP			; SGameMtlPair::GetMtl1
_TEXT	ENDS
PUBLIC	?GetMtl0@SGameMtlPair@@QAEHXZ			; SGameMtlPair::GetMtl0
; Function compile flags: /Ogtpy
;	COMDAT ?GetMtl0@SGameMtlPair@@QAEHXZ
_TEXT	SEGMENT
?GetMtl0@SGameMtlPair@@QAEHXZ PROC			; SGameMtlPair::GetMtl0, COMDAT
; _this$ = ecx

; 213  :     IC int				GetMtl0			(){return mtl0;}

	mov	eax, DWORD PTR [ecx+4]
	ret	0
?GetMtl0@SGameMtlPair@@QAEHXZ ENDP			; SGameMtlPair::GetMtl0
_TEXT	ENDS
PUBLIC	?GetID@SGameMtl@@QAEHXZ				; SGameMtl::GetID
; Function compile flags: /Ogtpy
;	COMDAT ?GetID@SGameMtl@@QAEHXZ
_TEXT	SEGMENT
?GetID@SGameMtl@@QAEHXZ PROC				; SGameMtl::GetID, COMDAT
; _this$ = ecx

; 147  :     IC int				GetID			(){return ID;}

	mov	eax, DWORD PTR [ecx]
	ret	0
?GetID@SGameMtl@@QAEHXZ ENDP				; SGameMtl::GetID
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
;	COMDAT ??0?$_Vector_base@Uref_sound@@V?$xalloc@Uref_sound@@@@@priv@stlp_std@@QAE@IABV?$xalloc@Uref_sound@@@@@Z
_TEXT	SEGMENT
___n$ = 8						; size = 4
??0?$_Vector_base@Uref_sound@@V?$xalloc@Uref_sound@@@@@priv@stlp_std@@QAE@IABV?$xalloc@Uref_sound@@@@@Z PROC ; stlp_std::priv::_Vector_base<ref_sound,xalloc<ref_sound> >::_Vector_base<ref_sound,xalloc<ref_sound> >, COMDAT
; _this$ = esi

; 71   :     _M_start = _M_end_of_storage.allocate(__n, __n);

	mov	ecx, DWORD PTR ___n$[esp-4]
	push	edi
	lea	eax, DWORD PTR ___n$[esp]
	push	eax
	lea	edi, DWORD PTR [esi+8]
	push	ecx
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
	mov	ecx, edi
	mov	DWORD PTR [edi], 0
	call	?allocate@?$_STLP_alloc_proxy@PAUref_sound@@U1@V?$xalloc@Uref_sound@@@@@priv@stlp_std@@QAEPAUref_sound@@IAAI@Z ; stlp_std::priv::_STLP_alloc_proxy<ref_sound *,ref_sound,xalloc<ref_sound> >::allocate

; 72   :     _M_finish = _M_start;
; 73   :     _M_end_of_storage._M_data = _M_start + __n;

	mov	edx, DWORD PTR ___n$[esp]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	lea	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [edi], eax

; 74   :     _STLP_MPWFIX_TRY _STLP_MPWFIX_CATCH
; 75   :   }

	mov	eax, esi
	pop	edi
	ret	4
??0?$_Vector_base@Uref_sound@@V?$xalloc@Uref_sound@@@@@priv@stlp_std@@QAE@IABV?$xalloc@Uref_sound@@@@@Z ENDP ; stlp_std::priv::_Vector_base<ref_sound,xalloc<ref_sound> >::_Vector_base<ref_sound,xalloc<ref_sound> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?get_allocator@?$_Impl_vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@priv@stlp_std@@QBE?AV?$xalloc@Uref_sound@@@@XZ
_TEXT	SEGMENT
?get_allocator@?$_Impl_vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@priv@stlp_std@@QBE?AV?$xalloc@Uref_sound@@@@XZ PROC ; stlp_std::priv::_Impl_vector<ref_sound,xalloc<ref_sound> >::get_allocator, COMDAT
; ___$ReturnUdt$ = eax

; 134  :   { return _STLP_CONVERT_ALLOCATOR((const allocator_type&)this->_M_end_of_storage, _Tp); }

	ret	0
?get_allocator@?$_Impl_vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@priv@stlp_std@@QBE?AV?$xalloc@Uref_sound@@@@XZ ENDP ; stlp_std::priv::_Impl_vector<ref_sound,xalloc<ref_sound> >::get_allocator
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_tools.h
_TEXT	ENDS
;	COMDAT ?to_value_type_ptr@?$_CastTraits@PAXPAUSGameMtlPair@@@priv@stlp_std@@SAPAPAUSGameMtlPair@@PAPAX@Z
_TEXT	SEGMENT
?to_value_type_ptr@?$_CastTraits@PAXPAUSGameMtlPair@@@priv@stlp_std@@SAPAPAUSGameMtlPair@@PAPAX@Z PROC ; stlp_std::priv::_CastTraits<void *,SGameMtlPair *>::to_value_type_ptr, COMDAT
; ___ptr$ = eax

; 207  :   { return __REINTERPRET_CAST(value_type *, cv_traits::cv_ptr(__ptr)); }

	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	ret	0
?to_value_type_ptr@?$_CastTraits@PAXPAUSGameMtlPair@@@priv@stlp_std@@SAPAPAUSGameMtlPair@@PAPAX@Z ENDP ; stlp_std::priv::_CastTraits<void *,SGameMtlPair *>::to_value_type_ptr
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_value_type_ptr@?$_CastTraits@PAXPAUSGameMtl@@@priv@stlp_std@@SAPAPAUSGameMtl@@PAPAX@Z
_TEXT	SEGMENT
?to_value_type_ptr@?$_CastTraits@PAXPAUSGameMtl@@@priv@stlp_std@@SAPAPAUSGameMtl@@PAPAX@Z PROC ; stlp_std::priv::_CastTraits<void *,SGameMtl *>::to_value_type_ptr, COMDAT
; ___ptr$ = eax

; 207  :   { return __REINTERPRET_CAST(value_type *, cv_traits::cv_ptr(__ptr)); }

	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	ret	0
?to_value_type_ptr@?$_CastTraits@PAXPAUSGameMtl@@@priv@stlp_std@@SAPAPAUSGameMtl@@PAPAX@Z ENDP ; stlp_std::priv::_CastTraits<void *,SGameMtl *>::to_value_type_ptr
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_value_type_ptr@?$_CastTraits@PAXPAVCBoneData@@@priv@stlp_std@@SAPAPAVCBoneData@@PAPAX@Z
_TEXT	SEGMENT
?to_value_type_ptr@?$_CastTraits@PAXPAVCBoneData@@@priv@stlp_std@@SAPAPAVCBoneData@@PAPAX@Z PROC ; stlp_std::priv::_CastTraits<void *,CBoneData *>::to_value_type_ptr, COMDAT
; ___ptr$ = eax

; 207  :   { return __REINTERPRET_CAST(value_type *, cv_traits::cv_ptr(__ptr)); }

	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	ret	0
?to_value_type_ptr@?$_CastTraits@PAXPAVCBoneData@@@priv@stlp_std@@SAPAPAVCBoneData@@PAPAX@Z ENDP ; stlp_std::priv::_CastTraits<void *,CBoneData *>::to_value_type_ptr
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@stlp_std@@QBEIXZ PROC ; stlp_std::vector<SGameMtl *,xalloc<SGameMtl *> >::size, COMDAT
; _this$ = ecx

; 89   :   size_type size() const        { return _M_impl.size(); }

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
	ret	0
?size@?$vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@stlp_std@@QBEIXZ ENDP ; stlp_std::vector<SGameMtl *,xalloc<SGameMtl *> >::size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@stlp_std@@QBEPBQAVCBoneData@@XZ
_TEXT	SEGMENT
?begin@?$vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@stlp_std@@QBEPBQAVCBoneData@@XZ PROC ; stlp_std::vector<CBoneData *,xalloc<CBoneData *> >::begin, COMDAT
; _this$ = ecx

; 80   :   const_iterator begin() const { return cast_traits::to_value_type_cptr(_M_impl.begin()); }

	jmp	?begin@?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QBEPBQAXXZ ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::begin
?begin@?$vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@stlp_std@@QBEPBQAVCBoneData@@XZ ENDP ; stlp_std::vector<CBoneData *,xalloc<CBoneData *> >::begin
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@stlp_std@@QAEPAPAUSGameMtlPair@@XZ
_TEXT	SEGMENT
?end@?$vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@stlp_std@@QAEPAPAUSGameMtlPair@@XZ PROC ; stlp_std::vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::end, COMDAT
; _this$ = eax

; 81   :   iterator end()               { return cast_traits::to_value_type_ptr(_M_impl.end()); }

	mov	eax, DWORD PTR [eax+4]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	ret	0
?end@?$vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@stlp_std@@QAEPAPAUSGameMtlPair@@XZ ENDP ; stlp_std::vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@stlp_std@@QAEPAPAUSGameMtlPair@@XZ
_TEXT	SEGMENT
?begin@?$vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@stlp_std@@QAEPAPAUSGameMtlPair@@XZ PROC ; stlp_std::vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::begin, COMDAT
; _this$ = eax

; 79   :   iterator begin()             { return cast_traits::to_value_type_ptr(_M_impl.begin()); }

	mov	eax, DWORD PTR [eax]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	ret	0
?begin@?$vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@stlp_std@@QAEPAPAUSGameMtlPair@@XZ ENDP ; stlp_std::vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::begin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??A?$xr_vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@@QAEAAPAUSGameMtlPair@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$xr_vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@@QAEAAPAUSGameMtlPair@@I@Z PROC ; xr_vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::operator[], COMDAT
; _this$ = eax

; 139  : 	reference operator[]		(size_type _Pos)					{ {VERIFY2(_Pos<size(),make_string("index is out of range: index requested[%d], size of container[%d]", _Pos, size()).c_str());} return (*(begin() + _Pos)); }

	mov	eax, DWORD PTR [eax]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	ecx, DWORD PTR __Pos$[esp]
	add	esp, 4
	lea	eax, DWORD PTR [eax+ecx*4]
	ret	4
??A?$xr_vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@@QAEAAPAUSGameMtlPair@@I@Z ENDP ; xr_vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::operator[]
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@stlp_std@@QAEPAPAUSGameMtl@@XZ
_TEXT	SEGMENT
?end@?$vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@stlp_std@@QAEPAPAUSGameMtl@@XZ PROC ; stlp_std::vector<SGameMtl *,xalloc<SGameMtl *> >::end, COMDAT
; _this$ = eax

; 81   :   iterator end()               { return cast_traits::to_value_type_ptr(_M_impl.end()); }

	mov	eax, DWORD PTR [eax+4]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	ret	0
?end@?$vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@stlp_std@@QAEPAPAUSGameMtl@@XZ ENDP ; stlp_std::vector<SGameMtl *,xalloc<SGameMtl *> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@stlp_std@@QAEPAPAUSGameMtl@@XZ
_TEXT	SEGMENT
?begin@?$vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@stlp_std@@QAEPAPAUSGameMtl@@XZ PROC ; stlp_std::vector<SGameMtl *,xalloc<SGameMtl *> >::begin, COMDAT
; _this$ = eax

; 79   :   iterator begin()             { return cast_traits::to_value_type_ptr(_M_impl.begin()); }

	mov	eax, DWORD PTR [eax]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	ret	0
?begin@?$vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@stlp_std@@QAEPAPAUSGameMtl@@XZ ENDP ; stlp_std::vector<SGameMtl *,xalloc<SGameMtl *> >::begin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??A?$xr_vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@@QAEAAPAUSGameMtl@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$xr_vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@@QAEAAPAUSGameMtl@@I@Z PROC ; xr_vector<SGameMtl *,xalloc<SGameMtl *> >::operator[], COMDAT
; _this$ = eax

; 139  : 	reference operator[]		(size_type _Pos)					{ {VERIFY2(_Pos<size(),make_string("index is out of range: index requested[%d], size of container[%d]", _Pos, size()).c_str());} return (*(begin() + _Pos)); }

	mov	eax, DWORD PTR [eax]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	ecx, DWORD PTR __Pos$[esp]
	add	esp, 4
	lea	eax, DWORD PTR [eax+ecx*4]
	ret	4
??A?$xr_vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@@QAEAAPAUSGameMtl@@I@Z ENDP ; xr_vector<SGameMtl *,xalloc<SGameMtl *> >::operator[]
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?size@?$xr_vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@@QBEIXZ
_TEXT	SEGMENT
?size@?$xr_vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@@QBEIXZ PROC ; xr_vector<SGameMtl *,xalloc<SGameMtl *> >::size, COMDAT
; _this$ = ecx

; 126  : 	u32		size				() const							{ return (u32)inherited::size();} 

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
	ret	0
?size@?$xr_vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@@QBEIXZ ENDP ; xr_vector<SGameMtl *,xalloc<SGameMtl *> >::size
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@stlp_std@@QAEPAPAVCBoneData@@XZ
_TEXT	SEGMENT
?end@?$vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@stlp_std@@QAEPAPAVCBoneData@@XZ PROC ; stlp_std::vector<CBoneData *,xalloc<CBoneData *> >::end, COMDAT
; _this$ = eax

; 81   :   iterator end()               { return cast_traits::to_value_type_ptr(_M_impl.end()); }

	mov	eax, DWORD PTR [eax+4]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	ret	0
?end@?$vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@stlp_std@@QAEPAPAVCBoneData@@XZ ENDP ; stlp_std::vector<CBoneData *,xalloc<CBoneData *> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@stlp_std@@QAEPAPAVCBoneData@@XZ
_TEXT	SEGMENT
?begin@?$vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@stlp_std@@QAEPAPAVCBoneData@@XZ PROC ; stlp_std::vector<CBoneData *,xalloc<CBoneData *> >::begin, COMDAT
; _this$ = eax

; 79   :   iterator begin()             { return cast_traits::to_value_type_ptr(_M_impl.begin()); }

	mov	eax, DWORD PTR [eax]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	ret	0
?begin@?$vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@stlp_std@@QAEPAPAVCBoneData@@XZ ENDP ; stlp_std::vector<CBoneData *,xalloc<CBoneData *> >::begin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??A?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@QAEAAPAVCBoneData@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@QAEAAPAVCBoneData@@I@Z PROC ; xr_vector<CBoneData *,xalloc<CBoneData *> >::operator[], COMDAT
; _this$ = eax

; 139  : 	reference operator[]		(size_type _Pos)					{ {VERIFY2(_Pos<size(),make_string("index is out of range: index requested[%d], size of container[%d]", _Pos, size()).c_str());} return (*(begin() + _Pos)); }

	mov	eax, DWORD PTR [eax]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	ecx, DWORD PTR __Pos$[esp]
	add	esp, 4
	lea	eax, DWORD PTR [eax+ecx*4]
	ret	4
??A?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@QAEAAPAVCBoneData@@I@Z ENDP ; xr_vector<CBoneData *,xalloc<CBoneData *> >::operator[]
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??A?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@QBEABQAVCBoneData@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@QBEABQAVCBoneData@@I@Z PROC ; xr_vector<CBoneData *,xalloc<CBoneData *> >::operator[], COMDAT
; _this$ = ecx

; 138  : 	const_reference operator[]	(size_type _Pos) const				{ {VERIFY2(_Pos<size(),make_string("index is out of range: index requested[%d], size of container[%d]", _Pos, size()).c_str());} return (*(begin() + _Pos)); }

	call	?begin@?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QBEPBQAXXZ ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::begin
	mov	ecx, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*4]
	ret	4
??A?$xr_vector@PAVCBoneData@@V?$xalloc@PAVCBoneData@@@@@@QBEABQAVCBoneData@@I@Z ENDP ; xr_vector<CBoneData *,xalloc<CBoneData *> >::operator[]
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\bone.cpp
_TEXT	ENDS
;	COMDAT ?GetChild@CBoneData@@EBGABVIBoneData@@G@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_id$ = 12						; size = 2
?GetChild@CBoneData@@EBGABVIBoneData@@G@Z PROC		; CBoneData::GetChild, COMDAT

; 68   : 	return *children[id];

	mov	ecx, DWORD PTR _this$[esp-4]
	add	ecx, 412				; 0000019cH
	call	?begin@?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QBEPBQAXXZ ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::begin
	movzx	ecx, WORD PTR _id$[esp-4]
	mov	eax, DWORD PTR [eax+ecx*4]

; 69   : }

	ret	8
?GetChild@CBoneData@@EBGABVIBoneData@@G@Z ENDP		; CBoneData::GetChild
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?GetChild@CBoneData@@EAGAAVIBoneData@@G@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_id$ = 12						; size = 2
?GetChild@CBoneData@@EAGAAVIBoneData@@G@Z PROC		; CBoneData::GetChild, COMDAT

; 64   : 	return *children[id];

	mov	eax, DWORD PTR _this$[esp-4]
	mov	eax, DWORD PTR [eax+412]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	movzx	ecx, WORD PTR _id$[esp]
	mov	eax, DWORD PTR [eax+ecx*4]
	add	esp, 4

; 65   : }

	ret	8
?GetChild@CBoneData@@EAGAAVIBoneData@@G@Z ENDP		; CBoneData::GetChild
_TEXT	ENDS
PUBLIC	?LastMaterialPair@CGameMtlLibrary@@QAEPAPAUSGameMtlPair@@XZ ; CGameMtlLibrary::LastMaterialPair
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\gamemtllib.h
;	COMDAT ?LastMaterialPair@CGameMtlLibrary@@QAEPAPAUSGameMtlPair@@XZ
_TEXT	SEGMENT
?LastMaterialPair@CGameMtlLibrary@@QAEPAPAUSGameMtlPair@@XZ PROC ; CGameMtlLibrary::LastMaterialPair, COMDAT
; _this$ = ecx

; 344  : 	IC GameMtlPairIt	LastMaterialPair	(){return material_pairs.end();}

	mov	ecx, DWORD PTR [ecx+24]
	push	ecx
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	ret	0
?LastMaterialPair@CGameMtlLibrary@@QAEPAPAUSGameMtlPair@@XZ ENDP ; CGameMtlLibrary::LastMaterialPair
_TEXT	ENDS
PUBLIC	?FirstMaterialPair@CGameMtlLibrary@@QAEPAPAUSGameMtlPair@@XZ ; CGameMtlLibrary::FirstMaterialPair
; Function compile flags: /Ogtpy
;	COMDAT ?FirstMaterialPair@CGameMtlLibrary@@QAEPAPAUSGameMtlPair@@XZ
_TEXT	SEGMENT
?FirstMaterialPair@CGameMtlLibrary@@QAEPAPAUSGameMtlPair@@XZ PROC ; CGameMtlLibrary::FirstMaterialPair, COMDAT
; _this$ = ecx

; 343  : 	IC GameMtlPairIt	FirstMaterialPair	(){return material_pairs.begin();}

	mov	ecx, DWORD PTR [ecx+20]
	push	ecx
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	ret	0
?FirstMaterialPair@CGameMtlLibrary@@QAEPAPAUSGameMtlPair@@XZ ENDP ; CGameMtlLibrary::FirstMaterialPair
_TEXT	ENDS
PUBLIC	?GetMaterialPair@CGameMtlLibrary@@QAEPAUSGameMtlPair@@GG@Z ; CGameMtlLibrary::GetMaterialPair
; Function compile flags: /Ogtpy
;	COMDAT ?GetMaterialPair@CGameMtlLibrary@@QAEPAUSGameMtlPair@@GG@Z
_TEXT	SEGMENT
_idx0$ = 8						; size = 2
_idx1$ = 12						; size = 2
?GetMaterialPair@CGameMtlLibrary@@QAEPAUSGameMtlPair@@GG@Z PROC ; CGameMtlLibrary::GetMaterialPair, COMDAT
; _this$ = ecx

; 341  : 	IC SGameMtlPair*	GetMaterialPair		(u16 idx0, u16 idx1){R_ASSERT((idx0<material_count)&&(idx1<material_count)); return material_pairs_rt[idx1*material_count+idx0];}

	cmp	BYTE PTR ?ignore_always@?3??GetMaterialPair@CGameMtlLibrary@@QAEPAUSGameMtlPair@@GG@Z@4_NA, 0 ; `CGameMtlLibrary::GetMaterialPair'::`4'::ignore_always
	push	ebx
	mov	bx, WORD PTR _idx0$[esp]
	push	esi
	mov	si, WORD PTR _idx1$[esp+4]
	push	edi
	mov	edi, ecx
	jne	SHORT $LN4@GetMateria
	mov	eax, DWORD PTR [edi+32]
	movzx	ecx, bx
	cmp	ecx, eax
	jae	SHORT $LN1@GetMateria
	movzx	edx, si
	cmp	edx, eax
	jb	SHORT $LN4@GetMateria
$LN1@GetMateria:
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?3??GetMaterialPair@CGameMtlLibrary@@QAEPAUSGameMtlPair@@GG@Z@4_NA ; `CGameMtlLibrary::GetMaterialPair'::`4'::ignore_always
	push	OFFSET ??_C@_0CB@BALGFMIA@CGameMtlLibrary?3?3GetMaterialPair@
	push	341					; 00000155H
	push	OFFSET ??_C@_0DB@HAABEIE@d?3?2clearsky?2sources?2engine?2xreng@
	push	OFFSET ??_C@_0CN@NLLJLIMO@?$CIidx0?$DMmaterial_count?$CJ?$CG?$CG?$CIidx1?$DMmat@
	call	DWORD PTR __imp_?fail@xrDebug@@QAEXPBD0H0AA_N@Z
$LN4@GetMateria:
	movzx	esi, si
	imul	esi, DWORD PTR [edi+32]
	mov	edi, DWORD PTR [edi+36]
	movzx	eax, bx
	push	edi
	add	esi, eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	eax, DWORD PTR [eax+esi*4]
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	ret	8
?GetMaterialPair@CGameMtlLibrary@@QAEPAUSGameMtlPair@@GG@Z ENDP ; CGameMtlLibrary::GetMaterialPair
_TEXT	ENDS
PUBLIC	?CountMaterial@CGameMtlLibrary@@QAEIXZ		; CGameMtlLibrary::CountMaterial
; Function compile flags: /Ogtpy
;	COMDAT ?CountMaterial@CGameMtlLibrary@@QAEIXZ
_TEXT	SEGMENT
?CountMaterial@CGameMtlLibrary@@QAEIXZ PROC		; CGameMtlLibrary::CountMaterial, COMDAT
; _this$ = ecx

; 318  : 	IC u32				CountMaterial	(){return materials.size();}

	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [ecx+8]
	sar	eax, 2
	ret	0
?CountMaterial@CGameMtlLibrary@@QAEIXZ ENDP		; CGameMtlLibrary::CountMaterial
_TEXT	ENDS
PUBLIC	?LastMaterial@CGameMtlLibrary@@QAEPAPAUSGameMtl@@XZ ; CGameMtlLibrary::LastMaterial
; Function compile flags: /Ogtpy
;	COMDAT ?LastMaterial@CGameMtlLibrary@@QAEPAPAUSGameMtl@@XZ
_TEXT	SEGMENT
?LastMaterial@CGameMtlLibrary@@QAEPAPAUSGameMtl@@XZ PROC ; CGameMtlLibrary::LastMaterial, COMDAT
; _this$ = ecx

; 317  : 	IC GameMtlIt		LastMaterial	(){return materials.end();}

	mov	ecx, DWORD PTR [ecx+12]
	push	ecx
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	ret	0
?LastMaterial@CGameMtlLibrary@@QAEPAPAUSGameMtl@@XZ ENDP ; CGameMtlLibrary::LastMaterial
_TEXT	ENDS
PUBLIC	?FirstMaterial@CGameMtlLibrary@@QAEPAPAUSGameMtl@@XZ ; CGameMtlLibrary::FirstMaterial
; Function compile flags: /Ogtpy
;	COMDAT ?FirstMaterial@CGameMtlLibrary@@QAEPAPAUSGameMtl@@XZ
_TEXT	SEGMENT
?FirstMaterial@CGameMtlLibrary@@QAEPAPAUSGameMtl@@XZ PROC ; CGameMtlLibrary::FirstMaterial, COMDAT
; _this$ = ecx

; 316  : 	IC GameMtlIt		FirstMaterial	(){return materials.begin();}

	mov	ecx, DWORD PTR [ecx+8]
	push	ecx
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	ret	0
?FirstMaterial@CGameMtlLibrary@@QAEPAPAUSGameMtl@@XZ ENDP ; CGameMtlLibrary::FirstMaterial
_TEXT	ENDS
PUBLIC	?GetMaterialByIdx@CGameMtlLibrary@@QAEPAUSGameMtl@@G@Z ; CGameMtlLibrary::GetMaterialByIdx
; Function compile flags: /Ogtpy
;	COMDAT ?GetMaterialByIdx@CGameMtlLibrary@@QAEPAUSGameMtl@@G@Z
_TEXT	SEGMENT
_idx$ = 8						; size = 2
?GetMaterialByIdx@CGameMtlLibrary@@QAEPAUSGameMtl@@G@Z PROC ; CGameMtlLibrary::GetMaterialByIdx, COMDAT
; _this$ = ecx

; 313  : 	IC SGameMtl*		GetMaterialByIdx(u16 idx)		{VERIFY(idx<(u16)materials.size()); return materials[idx];}

	mov	ecx, DWORD PTR [ecx+8]
	push	ecx
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	movzx	ecx, WORD PTR _idx$[esp]
	mov	eax, DWORD PTR [eax+ecx*4]
	add	esp, 4
	ret	4
?GetMaterialByIdx@CGameMtlLibrary@@QAEPAUSGameMtl@@G@Z ENDP ; CGameMtlLibrary::GetMaterialByIdx
_TEXT	ENDS
PUBLIC	?GetMaterialItByID@CGameMtlLibrary@@QAEPAPAUSGameMtl@@H@Z ; CGameMtlLibrary::GetMaterialItByID
; Function compile flags: /Ogtpy
;	COMDAT ?GetMaterialItByID@CGameMtlLibrary@@QAEPAPAUSGameMtl@@H@Z
_TEXT	SEGMENT
_id$ = 8						; size = 4
?GetMaterialItByID@CGameMtlLibrary@@QAEPAPAUSGameMtl@@H@Z PROC ; CGameMtlLibrary::GetMaterialItByID, COMDAT
; _this$ = ecx

; 283  :     {

	push	ebx
	push	esi
	push	edi
	mov	edi, ecx

; 284  :         for (GameMtlIt it=materials.begin(); materials.end() != it; ++it)

	mov	eax, DWORD PTR [edi+8]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	esi, eax
	mov	eax, DWORD PTR [edi+12]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 8
	cmp	eax, esi
	je	SHORT $LN2@GetMateria@2
	mov	ebx, DWORD PTR _id$[esp+8]
$LL4@GetMateria@2:

; 285  :             if ((*it)->ID==id) return it;

	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax], ebx
	je	SHORT $LN32@GetMateria@2
	mov	eax, DWORD PTR [edi+12]
	push	eax
	add	esi, 4
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	cmp	eax, esi
	jne	SHORT $LL4@GetMateria@2
$LN2@GetMateria@2:

; 286  :         return materials.end();

	mov	edi, DWORD PTR [edi+12]
	push	edi
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 287  :     }

	ret	4
$LN32@GetMateria@2:
	pop	edi

; 285  :             if ((*it)->ID==id) return it;

	mov	eax, esi
	pop	esi
	pop	ebx

; 287  :     }

	ret	4
?GetMaterialItByID@CGameMtlLibrary@@QAEPAPAUSGameMtl@@H@Z ENDP ; CGameMtlLibrary::GetMaterialItByID
_TEXT	ENDS
PUBLIC	?GetMaterialIt@CGameMtlLibrary@@QAEPAPAUSGameMtl@@AAVshared_str@@@Z ; CGameMtlLibrary::GetMaterialIt
; Function compile flags: /Ogtpy
;	COMDAT ?GetMaterialIt@CGameMtlLibrary@@QAEPAPAUSGameMtl@@AAVshared_str@@@Z
_TEXT	SEGMENT
_name$ = 8						; size = 4
?GetMaterialIt@CGameMtlLibrary@@QAEPAPAUSGameMtl@@AAVshared_str@@@Z PROC ; CGameMtlLibrary::GetMaterialIt, COMDAT
; _this$ = ecx

; 277  :     {

	push	ebx
	push	esi
	push	edi
	mov	edi, ecx

; 278  :         for (GameMtlIt it=materials.begin(); materials.end() != it; ++it)

	mov	eax, DWORD PTR [edi+8]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	esi, eax
	mov	eax, DWORD PTR [edi+12]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 8
	cmp	eax, esi
	je	SHORT $LN2@GetMateria@3
	mov	ebx, DWORD PTR _name$[esp+8]
$LL4@GetMateria@3:

; 279  :             if (name.equal((*it)->m_Name)) return it;

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [ebx]
	cmp	ecx, DWORD PTR [eax+4]
	je	SHORT $LN34@GetMateria@3
	mov	eax, DWORD PTR [edi+12]
	push	eax
	add	esi, 4
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	cmp	eax, esi
	jne	SHORT $LL4@GetMateria@3
$LN2@GetMateria@3:

; 280  :         return materials.end();

	mov	edi, DWORD PTR [edi+12]
	push	edi
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx

; 281  :     }

	ret	4
$LN34@GetMateria@3:
	pop	edi

; 279  :             if (name.equal((*it)->m_Name)) return it;

	mov	eax, esi
	pop	esi
	pop	ebx

; 281  :     }

	ret	4
?GetMaterialIt@CGameMtlLibrary@@QAEPAPAUSGameMtl@@AAVshared_str@@@Z ENDP ; CGameMtlLibrary::GetMaterialIt
_TEXT	ENDS
PUBLIC	?GetMaterialIt@CGameMtlLibrary@@QAEPAPAUSGameMtl@@PBD@Z ; CGameMtlLibrary::GetMaterialIt
; Function compile flags: /Ogtpy
;	COMDAT ?GetMaterialIt@CGameMtlLibrary@@QAEPAPAUSGameMtl@@PBD@Z
_TEXT	SEGMENT
_name$ = 8						; size = 4
?GetMaterialIt@CGameMtlLibrary@@QAEPAPAUSGameMtl@@PBD@Z PROC ; CGameMtlLibrary::GetMaterialIt, COMDAT
; _this$ = ecx

; 271  :     {

	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, ecx

; 272  :         for (GameMtlIt it=materials.begin(); materials.end() != it; ++it)

	mov	eax, DWORD PTR [edi+8]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	esi, eax
	mov	eax, DWORD PTR [edi+12]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 8
	cmp	eax, esi
	je	SHORT $LN2@GetMateria@4
	mov	ebx, DWORD PTR _name$[esp+12]
	mov	ebp, DWORD PTR __imp__strcmpi
	npad	5
$LL4@GetMateria@4:

; 273  :             if (0==strcmpi(*(*it)->m_Name,name)) return it;

	mov	eax, DWORD PTR [esi]
	add	eax, 4
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN25@GetMateria@4
	add	eax, 16					; 00000010H
	jmp	SHORT $LN26@GetMateria@4
$LN25@GetMateria@4:
	xor	eax, eax
$LN26@GetMateria@4:
	push	ebx
	push	eax
	call	ebp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN36@GetMateria@4
	mov	eax, DWORD PTR [edi+12]
	push	eax
	add	esi, 4
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	cmp	eax, esi
	jne	SHORT $LL4@GetMateria@4
$LN2@GetMateria@4:

; 274  :         return materials.end();

	mov	edi, DWORD PTR [edi+12]
	push	edi
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 275  :     }

	ret	4
$LN36@GetMateria@4:
	pop	edi

; 273  :             if (0==strcmpi(*(*it)->m_Name,name)) return it;

	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx

; 275  :     }

	ret	4
?GetMaterialIt@CGameMtlLibrary@@QAEPAPAUSGameMtl@@PBD@Z ENDP ; CGameMtlLibrary::GetMaterialIt
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
;	COMDAT ??0?$_Impl_vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@priv@stlp_std@@QAE@ABV012@@Z
_TEXT	SEGMENT
$T300450 = 8						; size = 4
$T300418 = 8						; size = 1
___x$ = 8						; size = 4
??0?$_Impl_vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@priv@stlp_std@@QAE@ABV012@@Z PROC ; stlp_std::priv::_Impl_vector<ref_sound,xalloc<ref_sound> >::_Impl_vector<ref_sound,xalloc<ref_sound> >, COMDAT
; _this$ = esi

; 236  :   { this->_M_finish = _STLP_PRIV __ucopy_ptrs(__x.begin(), __x.end(), this->_M_start, _TrivialUCopy()); }

	push	ebp
	mov	ebp, DWORD PTR ___x$[esp]
	push	edi
	mov	ecx, ebp
	call	?size@?$_Impl_vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<ref_sound,xalloc<ref_sound> >::size
	lea	ecx, DWORD PTR $T300450[esp+4]
	push	ecx
	lea	edi, DWORD PTR [esi+8]
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
	push	eax
	mov	ecx, edi
	mov	DWORD PTR $T300450[esp+12], eax
	mov	DWORD PTR [edi], 0
	call	?allocate@?$_STLP_alloc_proxy@PAUref_sound@@U1@V?$xalloc@Uref_sound@@@@@priv@stlp_std@@QAEPAUref_sound@@IAAI@Z ; stlp_std::priv::_STLP_alloc_proxy<ref_sound *,ref_sound,xalloc<ref_sound> >::allocate
	mov	edx, DWORD PTR $T300450[esp+4]
	lea	ecx, DWORD PTR [eax+edx*4]
	lea	edx, DWORD PTR $T300418[esp+4]
	push	edx
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [edi], ecx
	mov	ecx, DWORD PTR [ebp+4]
	mov	ebp, DWORD PTR [ebp]
	push	eax
	push	ecx
	push	ebp
	mov	BYTE PTR $T300418[esp+20], 0
	call	??$__ucopy_ptrs@PBUref_sound@@PAU1@@priv@stlp_std@@YAPAUref_sound@@PBU2@0PAU2@ABU__false_type@1@@Z ; stlp_std::priv::__ucopy_ptrs<ref_sound const *,ref_sound *>
	add	esp, 16					; 00000010H
	pop	edi
	mov	DWORD PTR [esi+4], eax
	mov	eax, esi
	pop	ebp
	ret	4
??0?$_Impl_vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@priv@stlp_std@@QAE@ABV012@@Z ENDP ; stlp_std::priv::_Impl_vector<ref_sound,xalloc<ref_sound> >::_Impl_vector<ref_sound,xalloc<ref_sound> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_obb.h
_TEXT	ENDS
;	COMDAT ?identity@?$_obb@M@@QAEAAU1@XZ
_TEXT	SEGMENT
?identity@?$_obb@M@@QAEAAU1@XZ PROC			; _obb<float>::identity, COMDAT
; _this$ = eax

; 57   : 		invalidate();

	xorps	xmm0, xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+4], xmm0
	movss	DWORD PTR [eax+8], xmm0
	movss	DWORD PTR [eax+12], xmm0
	movss	DWORD PTR [eax+20], xmm0
	movss	DWORD PTR [eax+24], xmm0
	movss	DWORD PTR [eax+28], xmm0
	movss	DWORD PTR [eax], xmm1
	movss	DWORD PTR [eax+16], xmm1
	movss	DWORD PTR [eax+32], xmm1
	movss	DWORD PTR [eax+36], xmm0
	movss	DWORD PTR [eax+40], xmm0
	movss	DWORD PTR [eax+44], xmm0

; 58   : 		m_halfsize.set( T(0.5), T(0.5), T(0.5) );

	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [eax+48], xmm0
	movss	DWORD PTR [eax+52], xmm0
	movss	DWORD PTR [eax+56], xmm0

; 59   : 		return *this;
; 60   : 	}

	ret	0
?identity@?$_obb@M@@QAEAAU1@XZ ENDP			; _obb<float>::identity
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_matrix.h
_TEXT	ENDS
;	COMDAT ?invert@?$_matrix@M@@QAEAAU1@XZ
_TEXT	SEGMENT
_a$ = -68						; size = 64
?invert@?$_matrix@M@@QAEAAU1@XZ PROC			; _matrix<float>::invert, COMDAT
; _this$ = esi

; 215  : 	{

	sub	esp, 68					; 00000044H

; 216  : 		Self a;	a.set(*this);	invert(a);

	movss	xmm0, DWORD PTR [esi]
	movss	DWORD PTR _a$[esp+68], xmm0
	movss	xmm0, DWORD PTR [esi+4]
	movss	DWORD PTR _a$[esp+72], xmm0
	movss	xmm0, DWORD PTR [esi+8]
	movss	DWORD PTR _a$[esp+76], xmm0
	movss	xmm0, DWORD PTR [esi+12]
	movss	DWORD PTR _a$[esp+80], xmm0
	movss	xmm0, DWORD PTR [esi+16]
	movss	DWORD PTR _a$[esp+84], xmm0
	movss	xmm0, DWORD PTR [esi+20]
	movss	DWORD PTR _a$[esp+88], xmm0
	movss	xmm0, DWORD PTR [esi+24]
	movss	DWORD PTR _a$[esp+92], xmm0
	movss	xmm0, DWORD PTR [esi+28]
	movss	DWORD PTR _a$[esp+96], xmm0
	movss	xmm0, DWORD PTR [esi+32]
	movss	DWORD PTR _a$[esp+100], xmm0
	movss	xmm0, DWORD PTR [esi+36]
	movss	DWORD PTR _a$[esp+104], xmm0
	movss	xmm0, DWORD PTR [esi+40]
	movss	DWORD PTR _a$[esp+108], xmm0
	movss	xmm0, DWORD PTR [esi+44]
	movss	DWORD PTR _a$[esp+112], xmm0
	movss	xmm0, DWORD PTR [esi+48]
	movss	DWORD PTR _a$[esp+116], xmm0
	movss	xmm0, DWORD PTR [esi+52]
	movss	DWORD PTR _a$[esp+120], xmm0
	movss	xmm0, DWORD PTR [esi+56]
	movss	DWORD PTR _a$[esp+124], xmm0
	movss	xmm0, DWORD PTR [esi+60]
	lea	ecx, DWORD PTR _a$[esp+68]
	mov	eax, esi
	movss	DWORD PTR _a$[esp+128], xmm0
	call	?invert@?$_matrix@M@@QAEAAU1@ABU1@@Z	; _matrix<float>::invert

; 217  : 		return *this;

	mov	eax, esi

; 218  : 	}

	add	esp, 68					; 00000044H
	ret	0
?invert@?$_matrix@M@@QAEAAU1@XZ ENDP			; _matrix<float>::invert
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\bone.cpp
_TEXT	ENDS
;	COMDAT ?GetNumChildren@CBoneData@@EBGGXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumChildren@CBoneData@@EBGGXZ PROC			; CBoneData::GetNumChildren, COMDAT

; 60   : 	return (u16)children.size();

	mov	ecx, DWORD PTR _this$[esp-4]
	mov	eax, DWORD PTR [ecx+416]
	sub	eax, DWORD PTR [ecx+412]
	sar	eax, 2

; 61   : }

	ret	4
?GetNumChildren@CBoneData@@EBGGXZ ENDP			; CBoneData::GetNumChildren
_TEXT	ENDS
PUBLIC	?CalculateM2B@CBoneData@@QAEXABU?$_matrix@M@@@Z	; CBoneData::CalculateM2B
; Function compile flags: /Ogtpy
;	COMDAT ?CalculateM2B@CBoneData@@QAEXABU?$_matrix@M@@@Z
_TEXT	SEGMENT
tv960 = -80						; size = 4
tv802 = -80						; size = 4
tv806 = -76						; size = 4
tv778 = -76						; size = 4
tv791 = -72						; size = 4
tv797 = -68						; size = 4
_a$300618 = -64						; size = 64
tv825 = 8						; size = 4
tv784 = 8						; size = 4
_parent$ = 8						; size = 4
?CalculateM2B@CBoneData@@QAEXABU?$_matrix@M@@@Z PROC	; CBoneData::CalculateM2B, COMDAT
; _this$ = ecx

; 48   : 	// Build matrix
; 49   : 	m2b_transform.mul_43	(parent,bind_transform);

	mov	eax, DWORD PTR _parent$[esp-4]
	movss	xmm0, DWORD PTR [eax+32]
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	mov	esi, ecx
	mulss	xmm0, DWORD PTR [esi+80]
	movss	xmm1, DWORD PTR [esi+72]
	mulss	xmm1, DWORD PTR [eax]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [eax+16]
	mulss	xmm1, DWORD PTR [esi+76]
	addss	xmm0, xmm1
	movss	DWORD PTR [esi+136], xmm0
	movss	xmm0, DWORD PTR [esi+80]
	mulss	xmm0, DWORD PTR [eax+36]
	movss	xmm1, DWORD PTR [esi+76]
	mulss	xmm1, DWORD PTR [eax+20]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [esi+72]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	movss	DWORD PTR [esi+140], xmm0
	movss	xmm0, DWORD PTR [esi+80]
	mulss	xmm0, DWORD PTR [eax+40]
	movss	xmm1, DWORD PTR [esi+76]
	mulss	xmm1, DWORD PTR [eax+24]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [esi+72]
	mulss	xmm1, DWORD PTR [eax+8]
	addss	xmm0, xmm1
	movss	DWORD PTR [esi+144], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [esi+148], xmm0
	movss	xmm1, DWORD PTR [eax+32]
	mulss	xmm1, DWORD PTR [esi+96]
	movss	xmm2, DWORD PTR [esi+92]
	mulss	xmm2, DWORD PTR [eax+16]
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR [esi+88]
	mulss	xmm2, DWORD PTR [eax]
	addss	xmm1, xmm2
	movss	DWORD PTR [esi+152], xmm1
	movss	xmm1, DWORD PTR [esi+96]
	mulss	xmm1, DWORD PTR [eax+36]
	movss	xmm2, DWORD PTR [esi+92]
	mulss	xmm2, DWORD PTR [eax+20]
	push	edi
	lea	edi, DWORD PTR [esi+136]
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR [esi+88]
	mulss	xmm2, DWORD PTR [eax+4]
	addss	xmm1, xmm2
	movss	DWORD PTR [edi+20], xmm1
	movss	xmm1, DWORD PTR [esi+96]
	mulss	xmm1, DWORD PTR [eax+40]
	movss	xmm2, DWORD PTR [esi+92]
	mulss	xmm2, DWORD PTR [eax+24]
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR [esi+88]
	mulss	xmm2, DWORD PTR [eax+8]
	addss	xmm1, xmm2
	movss	DWORD PTR [edi+24], xmm1
	movss	DWORD PTR [edi+28], xmm0
	movss	xmm1, DWORD PTR [eax+32]
	mulss	xmm1, DWORD PTR [esi+112]
	movss	xmm2, DWORD PTR [esi+108]
	mulss	xmm2, DWORD PTR [eax+16]
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR [esi+104]
	mulss	xmm2, DWORD PTR [eax]
	addss	xmm1, xmm2
	movss	DWORD PTR [edi+32], xmm1
	movss	xmm1, DWORD PTR [esi+112]
	mulss	xmm1, DWORD PTR [eax+36]
	movss	xmm2, DWORD PTR [esi+108]
	mulss	xmm2, DWORD PTR [eax+20]
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR [esi+104]
	mulss	xmm2, DWORD PTR [eax+4]
	addss	xmm1, xmm2
	movss	DWORD PTR [edi+36], xmm1
	movss	xmm1, DWORD PTR [esi+112]
	mulss	xmm1, DWORD PTR [eax+40]
	movss	xmm2, DWORD PTR [esi+108]
	mulss	xmm2, DWORD PTR [eax+24]
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR [esi+104]
	mulss	xmm2, DWORD PTR [eax+8]
	movss	DWORD PTR [edi+44], xmm0
	addss	xmm1, xmm2
	movss	DWORD PTR [edi+40], xmm1
	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR [esi+128]
	movss	xmm1, DWORD PTR [esi+124]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [esi+120]
	mulss	xmm1, DWORD PTR [eax]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR [eax+48]
	movss	DWORD PTR [edi+48], xmm0
	movss	xmm0, DWORD PTR [esi+128]
	mulss	xmm0, DWORD PTR [eax+36]
	movss	xmm1, DWORD PTR [esi+124]
	mulss	xmm1, DWORD PTR [eax+20]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [esi+120]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR [eax+52]
	movss	DWORD PTR [edi+52], xmm0
	movss	xmm0, DWORD PTR [esi+128]
	mulss	xmm0, DWORD PTR [eax+40]
	movss	xmm1, DWORD PTR [esi+124]
	mulss	xmm1, DWORD PTR [eax+24]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR [esi+120]
	mulss	xmm1, DWORD PTR [eax+8]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR [eax+56]

; 50   : 
; 51   : 	// Calculate children
; 52   : 	for (xr_vector<CBoneData*>::iterator C=children.begin(); C!=children.end(); C++)

	mov	eax, DWORD PTR [esi+412]
	movss	DWORD PTR [edi+56], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	push	eax
	movss	DWORD PTR [edi+60], xmm0
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	ebx, eax
	mov	eax, DWORD PTR [esi+416]
	add	esp, 4
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	cmp	ebx, eax
	je	SHORT $LN1@CalculateM
	npad	4
$LL3@CalculateM:

; 53   : 		(*C)->CalculateM2B	(m2b_transform);

	mov	ecx, DWORD PTR [ebx]
	push	edi
	call	?CalculateM2B@CBoneData@@QAEXABU?$_matrix@M@@@Z ; CBoneData::CalculateM2B
	mov	eax, DWORD PTR [esi+416]
	push	eax
	add	ebx, 4
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	cmp	ebx, eax
	jne	SHORT $LL3@CalculateM
$LN1@CalculateM:

; 54   : 
; 55   : 	m2b_transform.invert	();            

	movss	xmm0, DWORD PTR [edi]
	movss	xmm4, DWORD PTR [edi+40]
	movss	xmm3, DWORD PTR [edi+36]
	movss	xmm1, DWORD PTR [edi+20]
	movss	xmm2, DWORD PTR [edi+24]
	movss	xmm6, DWORD PTR [edi+16]
	movss	xmm7, DWORD PTR [edi+32]
	movss	DWORD PTR _a$300618[esp+96], xmm0
	movss	xmm0, DWORD PTR [edi+4]
	movss	DWORD PTR _a$300618[esp+100], xmm0
	movss	xmm0, DWORD PTR [edi+8]
	movss	DWORD PTR _a$300618[esp+104], xmm0
	movss	xmm0, DWORD PTR [edi+48]
	movss	DWORD PTR _a$300618[esp+144], xmm0
	movss	xmm0, DWORD PTR [edi+52]
	movss	DWORD PTR _a$300618[esp+128], xmm7
	movss	DWORD PTR _a$300618[esp+148], xmm0
	movss	xmm0, DWORD PTR [edi+56]
	mulss	xmm7, xmm2
	movss	DWORD PTR _a$300618[esp+152], xmm0
	movss	DWORD PTR _a$300618[esp+112], xmm6
	movaps	xmm5, xmm4
	mulss	xmm5, xmm1
	movaps	xmm0, xmm3
	mulss	xmm0, xmm2
	subss	xmm5, xmm0
	movaps	xmm0, xmm6
	mulss	xmm6, xmm3
	mulss	xmm0, xmm4
	subss	xmm0, xmm7
	movss	xmm7, DWORD PTR _a$300618[esp+128]
	mulss	xmm7, xmm1
	subss	xmm6, xmm7
	movss	DWORD PTR tv784[esp+92], xmm6
	movss	DWORD PTR tv778[esp+96], xmm0
	mulss	xmm0, DWORD PTR _a$300618[esp+100]
	movaps	xmm7, xmm5
	mulss	xmm7, DWORD PTR _a$300618[esp+96]
	subss	xmm7, xmm0
	movaps	xmm0, xmm6
	movss	xmm6, DWORD PTR _a$300618[esp+104]
	mulss	xmm0, xmm6
	addss	xmm7, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, xmm7
	mulss	xmm5, xmm0
	movss	DWORD PTR tv791[esp+96], xmm5
	movss	DWORD PTR [edi], xmm5
	movaps	xmm7, xmm4
	mulss	xmm7, DWORD PTR _a$300618[esp+100]
	mulss	xmm4, DWORD PTR _a$300618[esp+96]
	movaps	xmm5, xmm3
	mulss	xmm5, xmm6
	subss	xmm7, xmm5
	movss	xmm5, DWORD PTR __real@80000000
	mulss	xmm7, xmm0
	movaps	xmm6, xmm5
	subss	xmm6, xmm7
	movss	DWORD PTR tv797[esp+96], xmm6
	movss	DWORD PTR [edi+4], xmm6
	movaps	xmm6, xmm2
	mulss	xmm6, DWORD PTR _a$300618[esp+100]
	movss	DWORD PTR tv960[esp+96], xmm6
	movaps	xmm7, xmm1
	mulss	xmm7, DWORD PTR _a$300618[esp+104]
	subss	xmm6, xmm7
	movss	xmm7, DWORD PTR tv778[esp+96]
	mulss	xmm6, xmm0
	movss	DWORD PTR tv802[esp+96], xmm6
	movss	DWORD PTR [edi+8], xmm6
	xorps	xmm6, xmm6
	movss	DWORD PTR [edi+12], xmm6
	mulss	xmm7, xmm0
	movaps	xmm6, xmm5
	subss	xmm6, xmm7
	movss	xmm7, DWORD PTR _a$300618[esp+128]
	movss	DWORD PTR tv806[esp+96], xmm6
	movss	DWORD PTR [edi+16], xmm6
	movss	xmm6, DWORD PTR _a$300618[esp+104]
	mulss	xmm7, xmm6
	subss	xmm4, xmm7
	mulss	xmm2, DWORD PTR _a$300618[esp+96]
	movss	xmm7, DWORD PTR _a$300618[esp+112]
	mulss	xmm3, DWORD PTR _a$300618[esp+96]
	mulss	xmm1, DWORD PTR _a$300618[esp+96]
	mulss	xmm7, xmm6
	subss	xmm2, xmm7
	movss	xmm7, DWORD PTR _a$300618[esp+100]
	mulss	xmm2, xmm0
	movaps	xmm6, xmm5
	subss	xmm6, xmm2
	xorps	xmm2, xmm2
	movss	DWORD PTR [edi+28], xmm2
	movss	xmm2, DWORD PTR tv784[esp+92]
	mulss	xmm2, xmm0
	mulss	xmm4, xmm0
	movss	DWORD PTR tv825[esp+92], xmm2
	movss	DWORD PTR [edi+32], xmm2
	movss	xmm2, DWORD PTR _a$300618[esp+128]
	mulss	xmm2, xmm7
	subss	xmm3, xmm2
	mulss	xmm3, xmm0
	movaps	xmm2, xmm5
	subss	xmm2, xmm3
	movss	xmm3, DWORD PTR _a$300618[esp+112]
	mulss	xmm3, xmm7
	movss	xmm7, DWORD PTR _a$300618[esp+152]
	subss	xmm1, xmm3
	movss	xmm3, DWORD PTR tv791[esp+96]
	mulss	xmm3, DWORD PTR _a$300618[esp+144]
	mulss	xmm1, xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [edi+44], xmm0
	movss	xmm0, DWORD PTR tv806[esp+96]
	mulss	xmm0, DWORD PTR _a$300618[esp+148]
	addss	xmm0, xmm3
	movss	xmm3, DWORD PTR tv825[esp+92]
	mulss	xmm3, xmm7
	addss	xmm0, xmm3
	movaps	xmm3, xmm5
	subss	xmm3, xmm0
	movss	xmm0, DWORD PTR tv797[esp+96]
	movss	DWORD PTR [edi+20], xmm4
	mulss	xmm4, DWORD PTR _a$300618[esp+148]
	movss	DWORD PTR [edi+48], xmm3
	movss	xmm3, DWORD PTR _a$300618[esp+144]
	mulss	xmm0, xmm3
	addss	xmm4, xmm0
	movss	DWORD PTR [edi+36], xmm2
	mulss	xmm2, xmm7
	movaps	xmm0, xmm5
	movss	DWORD PTR [edi+24], xmm6
	mulss	xmm6, DWORD PTR _a$300618[esp+148]
	addss	xmm4, xmm2
	subss	xmm0, xmm4
	movss	DWORD PTR [edi+52], xmm0
	movss	xmm0, DWORD PTR tv802[esp+96]
	movss	DWORD PTR [edi+40], xmm1
	mulss	xmm0, xmm3
	addss	xmm6, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm1, xmm7
	addss	xmm6, xmm1
	subss	xmm5, xmm6
	movss	DWORD PTR [edi+56], xmm5
	movss	DWORD PTR [edi+60], xmm0

; 56   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 84					; 00000054H
	ret	4
?CalculateM2B@CBoneData@@QAEXABU?$_matrix@M@@@Z ENDP	; CBoneData::CalculateM2B
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@stlp_std@@QAE@XZ PROC ; stlp_std::vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::~vector<SGameMtlPair *,xalloc<SGameMtlPair *> >, COMDAT
; _this$ = eax
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN36@vector@28
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN36@vector@28:
	ret	0
??1?$vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@stlp_std@@QAE@XZ ENDP ; stlp_std::vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::~vector<SGameMtlPair *,xalloc<SGameMtlPair *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@stlp_std@@QAE@XZ PROC ; stlp_std::vector<SGameMtl *,xalloc<SGameMtl *> >::~vector<SGameMtl *,xalloc<SGameMtl *> >, COMDAT
; _this$ = eax
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN36@vector@29
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN36@vector@29:
	ret	0
??1?$vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@stlp_std@@QAE@XZ ENDP ; stlp_std::vector<SGameMtl *,xalloc<SGameMtl *> >::~vector<SGameMtl *,xalloc<SGameMtl *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$xr_vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@@QAE@XZ
_TEXT	SEGMENT
??1?$xr_vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@@QAE@XZ PROC ; xr_vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::~xr_vector<SGameMtlPair *,xalloc<SGameMtlPair *> >, COMDAT
; _this$ = eax
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN38@xr_vector@22
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN38@xr_vector@22:
	ret	0
??1?$xr_vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@@QAE@XZ ENDP ; xr_vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::~xr_vector<SGameMtlPair *,xalloc<SGameMtlPair *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$xr_vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@@QAE@XZ
_TEXT	SEGMENT
??1?$xr_vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@@QAE@XZ PROC ; xr_vector<SGameMtl *,xalloc<SGameMtl *> >::~xr_vector<SGameMtl *,xalloc<SGameMtl *> >, COMDAT
; _this$ = eax
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN38@xr_vector@23
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN38@xr_vector@23:
	ret	0
??1?$xr_vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@@QAE@XZ ENDP ; xr_vector<SGameMtl *,xalloc<SGameMtl *> >::~xr_vector<SGameMtl *,xalloc<SGameMtl *> >
_TEXT	ENDS
PUBLIC	?GetMaterialIdx@CGameMtlLibrary@@QAEGPBD@Z	; CGameMtlLibrary::GetMaterialIdx
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\gamemtllib.h
;	COMDAT ?GetMaterialIdx@CGameMtlLibrary@@QAEGPBD@Z
_TEXT	SEGMENT
_name$ = 8						; size = 4
?GetMaterialIdx@CGameMtlLibrary@@QAEGPBD@Z PROC		; CGameMtlLibrary::GetMaterialIdx, COMDAT
; _this$ = ecx

; 312  : 	IC u16				GetMaterialIdx	(LPCSTR name)	{GameMtlIt it=GetMaterialIt(name);VERIFY(materials.end() != it); return (u16)(it-materials.begin());}

	mov	eax, DWORD PTR _name$[esp-4]
	push	esi
	push	edi
	push	eax
	mov	esi, ecx
	call	?GetMaterialIt@CGameMtlLibrary@@QAEPAPAUSGameMtl@@PBD@Z ; CGameMtlLibrary::GetMaterialIt
	mov	esi, DWORD PTR [esi+8]
	push	esi
	mov	edi, eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	ecx, eax
	add	esp, 4
	mov	eax, edi
	sub	eax, ecx
	pop	edi
	sar	eax, 2
	pop	esi
	ret	4
?GetMaterialIdx@CGameMtlLibrary@@QAEGPBD@Z ENDP		; CGameMtlLibrary::GetMaterialIdx
_TEXT	ENDS
PUBLIC	?GetMaterialIdx@CGameMtlLibrary@@QAEGH@Z	; CGameMtlLibrary::GetMaterialIdx
; Function compile flags: /Ogtpy
;	COMDAT ?GetMaterialIdx@CGameMtlLibrary@@QAEGH@Z
_TEXT	SEGMENT
_ID$ = 8						; size = 4
?GetMaterialIdx@CGameMtlLibrary@@QAEGH@Z PROC		; CGameMtlLibrary::GetMaterialIdx, COMDAT
; _this$ = ecx

; 311  : 	IC u16				GetMaterialIdx	(int ID)		{GameMtlIt it=GetMaterialItByID(ID);VERIFY(materials.end() != it); return (u16)(it-materials.begin());}

	mov	eax, DWORD PTR _ID$[esp-4]
	push	esi
	push	edi
	push	eax
	mov	esi, ecx
	call	?GetMaterialItByID@CGameMtlLibrary@@QAEPAPAUSGameMtl@@H@Z ; CGameMtlLibrary::GetMaterialItByID
	mov	esi, DWORD PTR [esi+8]
	push	esi
	mov	edi, eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	ecx, eax
	add	esp, 4
	mov	eax, edi
	sub	eax, ecx
	pop	edi
	sar	eax, 2
	pop	esi
	ret	4
?GetMaterialIdx@CGameMtlLibrary@@QAEGH@Z ENDP		; CGameMtlLibrary::GetMaterialIdx
_TEXT	ENDS
PUBLIC	?GetMaterialByID@CGameMtlLibrary@@QAEPAUSGameMtl@@H@Z ; CGameMtlLibrary::GetMaterialByID
; Function compile flags: /Ogtpy
;	COMDAT ?GetMaterialByID@CGameMtlLibrary@@QAEPAUSGameMtl@@H@Z
_TEXT	SEGMENT
_id$ = 8						; size = 4
?GetMaterialByID@CGameMtlLibrary@@QAEPAUSGameMtl@@H@Z PROC ; CGameMtlLibrary::GetMaterialByID, COMDAT
; _this$ = ecx

; 309  : 	IC SGameMtl*		GetMaterialByID (s32 id)		{return GetMaterialByIdx(GetMaterialIdx(id));}

	mov	eax, DWORD PTR _id$[esp-4]
	push	esi
	push	edi
	push	eax
	mov	edi, ecx
	call	?GetMaterialItByID@CGameMtlLibrary@@QAEPAPAUSGameMtl@@H@Z ; CGameMtlLibrary::GetMaterialItByID
	mov	esi, eax
	mov	eax, DWORD PTR [edi+8]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	edi, DWORD PTR [edi+8]
	sub	esi, eax
	sar	esi, 2
	push	edi
	movzx	esi, si
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 8
	movzx	ecx, si
	mov	eax, DWORD PTR [eax+ecx*4]
	pop	edi
	pop	esi
	ret	4
?GetMaterialByID@CGameMtlLibrary@@QAEPAUSGameMtl@@H@Z ENDP ; CGameMtlLibrary::GetMaterialByID
_TEXT	ENDS
PUBLIC	?GetMaterialID@CGameMtlLibrary@@QAEIPBD@Z	; CGameMtlLibrary::GetMaterialID
; Function compile flags: /Ogtpy
;	COMDAT ?GetMaterialID@CGameMtlLibrary@@QAEIPBD@Z
_TEXT	SEGMENT
_name$ = 8						; size = 4
?GetMaterialID@CGameMtlLibrary@@QAEIPBD@Z PROC		; CGameMtlLibrary::GetMaterialID, COMDAT
; _this$ = ecx

; 290  :     	GameMtlIt it	= GetMaterialIt	(name);

	mov	eax, DWORD PTR _name$[esp-4]
	push	esi
	push	edi
	push	eax
	mov	esi, ecx
	call	?GetMaterialIt@CGameMtlLibrary@@QAEPAPAUSGameMtl@@PBD@Z ; CGameMtlLibrary::GetMaterialIt

; 291  :         return (it==materials.end())?GAMEMTL_NONE_ID:(*it)->ID;

	mov	esi, DWORD PTR [esi+12]
	push	esi
	mov	edi, eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	cmp	edi, eax
	jne	SHORT $LN3@GetMateria@5
	pop	edi
	or	eax, -1
	pop	esi

; 292  :     }

	ret	4
$LN3@GetMateria@5:

; 291  :         return (it==materials.end())?GAMEMTL_NONE_ID:(*it)->ID;

	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [ecx]
	pop	edi
	pop	esi

; 292  :     }

	ret	4
?GetMaterialID@CGameMtlLibrary@@QAEIPBD@Z ENDP		; CGameMtlLibrary::GetMaterialID
_TEXT	ENDS
PUBLIC	??1CGameMtlLibrary@@QAE@XZ			; CGameMtlLibrary::~CGameMtlLibrary
; Function compile flags: /Ogtpy
;	COMDAT ??1CGameMtlLibrary@@QAE@XZ
_TEXT	SEGMENT
??1CGameMtlLibrary@@QAE@XZ PROC				; CGameMtlLibrary::~CGameMtlLibrary, COMDAT
; _this$ = ecx

; 249  : 	{

	push	esi
	mov	esi, ecx

; 250  : 		/*
; 251  :     	R_ASSERT		(0==material_pairs_rt.size());
; 252  :     	R_ASSERT		(0==material_pairs.size());
; 253  :     	R_ASSERT		(0==materials.size());
; 254  : 		*/
; 255  :     }

	mov	eax, DWORD PTR [esi+36]
	test	eax, eax
	push	edi
	mov	edi, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	je	SHORT $LN40@CGameMtlLi
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
$LN40@CGameMtlLi:
	mov	eax, DWORD PTR [esi+20]
	test	eax, eax
	je	SHORT $LN80@CGameMtlLi
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
$LN80@CGameMtlLi:
	mov	esi, DWORD PTR [esi+8]
	test	esi, esi
	je	SHORT $LN120@CGameMtlLi
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	edi
$LN120@CGameMtlLi:
	pop	edi
	pop	esi
	ret	0
??1CGameMtlLibrary@@QAE@XZ ENDP				; CGameMtlLibrary::~CGameMtlLibrary
_TEXT	ENDS
PUBLIC	??1SGameMtl@@QAE@XZ				; SGameMtl::~SGameMtl
; Function compile flags: /Ogtpy
;	COMDAT ??1SGameMtl@@QAE@XZ
_TEXT	SEGMENT
??1SGameMtl@@QAE@XZ PROC				; SGameMtl::~SGameMtl, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR [ecx+8]
	xor	edx, edx
	cmp	eax, edx
	je	SHORT $LN5@SGameMtl
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [ecx+8]
	cmp	DWORD PTR [eax], edx
	jne	SHORT $LN5@SGameMtl
	mov	DWORD PTR [ecx+8], edx
$LN5@SGameMtl:
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, edx
	je	SHORT $LN11@SGameMtl
	add	DWORD PTR [eax], -1
	mov	eax, DWORD PTR [ecx+4]
	cmp	DWORD PTR [eax], edx
	jne	SHORT $LN11@SGameMtl
	mov	DWORD PTR [ecx+4], edx
$LN11@SGameMtl:
	ret	0
??1SGameMtl@@QAE@XZ ENDP				; SGameMtl::~SGameMtl
; Function compile flags: /Ogtpy
;	COMDAT ??_GSGameMtl@@QAEPAXI@Z
_TEXT	SEGMENT
??_GSGameMtl@@QAEPAXI@Z PROC				; SGameMtl::`scalar deleting destructor', COMDAT
; _this$ = eax
	mov	ecx, DWORD PTR [eax+8]
	xor	edx, edx
	cmp	ecx, edx
	je	SHORT $LN8@scalar@44
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx], edx
	jne	SHORT $LN8@scalar@44
	mov	DWORD PTR [eax+8], edx
$LN8@scalar@44:
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, edx
	je	SHORT $LN14@scalar@44
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx], edx
	jne	SHORT $LN14@scalar@44
	mov	DWORD PTR [eax+4], edx
$LN14@scalar@44:
	ret	0
??_GSGameMtl@@QAEPAXI@Z ENDP				; SGameMtl::`scalar deleting destructor'
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrmemory_subst_msvc.h
_TEXT	ENDS
;	COMDAT ??R?$xr_special_free@$0A@USGameMtl@@@@QAEXAAPAUSGameMtl@@@Z
_TEXT	SEGMENT
??R?$xr_special_free@$0A@USGameMtl@@@@QAEXAAPAUSGameMtl@@@Z PROC ; xr_special_free<0,SGameMtl>::operator(), COMDAT
; _ptr$ = esi

; 143  : 		ptr->~T			();

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax+8]
	xor	edx, edx
	cmp	ecx, edx
	je	SHORT $LN10@operator@85
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx], edx
	jne	SHORT $LN10@operator@85
	mov	DWORD PTR [eax+8], edx
$LN10@operator@85:
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, edx
	je	SHORT $LN16@operator@85
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx], edx
	jne	SHORT $LN16@operator@85
	mov	DWORD PTR [eax+4], edx
$LN16@operator@85:

; 144  : 		Memory.mem_free	(ptr);

	mov	edx, DWORD PTR [esi]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edx
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z

; 145  : 	}

	ret	0
??R?$xr_special_free@$0A@USGameMtl@@@@QAEXAAPAUSGameMtl@@@Z ENDP ; xr_special_free<0,SGameMtl>::operator()
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$xr_delete@USGameMtl@@@@YAXAAPAUSGameMtl@@@Z
_TEXT	SEGMENT
??$xr_delete@USGameMtl@@@@YAXAAPAUSGameMtl@@@Z PROC	; xr_delete<SGameMtl>, COMDAT
; _ptr$ = edi

; 151  : 	if (ptr) 

	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN1@xr_delete@32

; 152  : 	{
; 153  : 		xr_special_free<is_polymorphic<T>::result,T>()(ptr);

	mov	ecx, DWORD PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN13@xr_delete@32
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN13@xr_delete@32
	mov	DWORD PTR [eax+8], 0
$LN13@xr_delete@32:
	mov	ecx, DWORD PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN19@xr_delete@32
	add	DWORD PTR [ecx], -1
	mov	edx, DWORD PTR [eax+4]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN19@xr_delete@32
	mov	DWORD PTR [eax+4], 0
$LN19@xr_delete@32:
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z

; 154  : 		ptr = NULL;

	mov	DWORD PTR [edi], 0
$LN1@xr_delete@32:

; 155  : 	}
; 156  : }

	ret	0
??$xr_delete@USGameMtl@@@@YAXAAPAUSGameMtl@@@Z ENDP	; xr_delete<SGameMtl>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ??4?$vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@stlp_std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
??4?$vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@stlp_std@@QAEAAV01@ABV01@@Z PROC ; stlp_std::vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::operator=, COMDAT
; _this$ = ecx
; ___x$ = eax

; 149  :   _Self& operator=(const _Self& __x) { _M_impl = __x._M_impl; return *this; }

	push	ebx
	mov	ebx, ecx
	push	eax
	call	??4?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::operator=
	mov	eax, ebx
	pop	ebx
	ret	0
??4?$vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@stlp_std@@QAEAAV01@ABV01@@Z ENDP ; stlp_std::vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@stlp_std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@stlp_std@@QAE@ABV01@@Z PROC ; stlp_std::vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::vector<SGameMtlPair *,xalloc<SGameMtlPair *> >, COMDAT
; _this$ = esi
; ___x$ = eax

; 123  :   vector(const _Self& __x)

	push	eax
	mov	ecx, esi
	call	??0?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::_Impl_vector<void *,xalloc<void *> >
	mov	eax, esi
	ret	0
??0?$vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@stlp_std@@QAE@ABV01@@Z ENDP ; stlp_std::vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::vector<SGameMtlPair *,xalloc<SGameMtlPair *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@stlp_std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
??4?$vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@stlp_std@@QAEAAV01@ABV01@@Z PROC ; stlp_std::vector<SGameMtl *,xalloc<SGameMtl *> >::operator=, COMDAT
; _this$ = ecx
; ___x$ = eax

; 149  :   _Self& operator=(const _Self& __x) { _M_impl = __x._M_impl; return *this; }

	push	ebx
	mov	ebx, ecx
	push	eax
	call	??4?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::operator=
	mov	eax, ebx
	pop	ebx
	ret	0
??4?$vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@stlp_std@@QAEAAV01@ABV01@@Z ENDP ; stlp_std::vector<SGameMtl *,xalloc<SGameMtl *> >::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@stlp_std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@stlp_std@@QAE@ABV01@@Z PROC ; stlp_std::vector<SGameMtl *,xalloc<SGameMtl *> >::vector<SGameMtl *,xalloc<SGameMtl *> >, COMDAT
; _this$ = esi
; ___x$ = eax

; 123  :   vector(const _Self& __x)

	push	eax
	mov	ecx, esi
	call	??0?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::_Impl_vector<void *,xalloc<void *> >
	mov	eax, esi
	ret	0
??0?$vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@stlp_std@@QAE@ABV01@@Z ENDP ; stlp_std::vector<SGameMtl *,xalloc<SGameMtl *> >::vector<SGameMtl *,xalloc<SGameMtl *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$xr_vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
??4?$xr_vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@@QAEAAV0@ABV0@@Z PROC ; xr_vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::operator=, COMDAT
; _this$ = ecx
; ___that$ = eax
	push	ebx
	mov	ebx, ecx
	push	eax
	call	??4?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::operator=
	mov	eax, ebx
	pop	ebx
	ret	0
??4?$xr_vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@@QAEAAV0@ABV0@@Z ENDP ; xr_vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$xr_vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
??4?$xr_vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@@QAEAAV0@ABV0@@Z PROC ; xr_vector<SGameMtl *,xalloc<SGameMtl *> >::operator=, COMDAT
; _this$ = ecx
; ___that$ = eax
	push	ebx
	mov	ebx, ecx
	push	eax
	call	??4?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::operator=
	mov	eax, ebx
	pop	ebx
	ret	0
??4?$xr_vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@@QAEAAV0@ABV0@@Z ENDP ; xr_vector<SGameMtl *,xalloc<SGameMtl *> >::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$xr_vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xr_vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@@QAE@ABV0@@Z PROC ; xr_vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::xr_vector<SGameMtlPair *,xalloc<SGameMtlPair *> >, COMDAT
; _this$ = esi
; ___that$ = eax
	push	eax
	mov	ecx, esi
	call	??0?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::_Impl_vector<void *,xalloc<void *> >
	mov	eax, esi
	ret	0
??0?$xr_vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@@QAE@ABV0@@Z ENDP ; xr_vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::xr_vector<SGameMtlPair *,xalloc<SGameMtlPair *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$xr_vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xr_vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@@QAE@ABV0@@Z PROC ; xr_vector<SGameMtl *,xalloc<SGameMtl *> >::xr_vector<SGameMtl *,xalloc<SGameMtl *> >, COMDAT
; _this$ = esi
; ___that$ = eax
	push	eax
	mov	ecx, esi
	call	??0?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::_Impl_vector<void *,xalloc<void *> >
	mov	eax, esi
	ret	0
??0?$xr_vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@@QAE@ABV0@@Z ENDP ; xr_vector<SGameMtl *,xalloc<SGameMtl *> >::xr_vector<SGameMtl *,xalloc<SGameMtl *> >
_TEXT	ENDS
PUBLIC	??4CGameMtlLibrary@@QAEAAV0@ABV0@@Z		; CGameMtlLibrary::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4CGameMtlLibrary@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4CGameMtlLibrary@@QAEAAV0@ABV0@@Z PROC		; CGameMtlLibrary::operator=, COMDAT
; _this$ = ecx
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR ___that$[esp+8]
	mov	eax, DWORD PTR [edi]
	mov	esi, ecx
	mov	DWORD PTR [esi], eax
	mov	ecx, DWORD PTR [edi+4]
	lea	edx, DWORD PTR [edi+8]
	push	edx
	lea	ebx, DWORD PTR [esi+8]
	mov	DWORD PTR [esi+4], ecx
	call	??4?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::operator=
	lea	eax, DWORD PTR [edi+20]
	push	eax
	lea	ebx, DWORD PTR [esi+20]
	call	??4?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::operator=
	mov	ecx, DWORD PTR [edi+32]
	add	edi, 36					; 00000024H
	push	edi
	lea	ebx, DWORD PTR [esi+36]
	mov	DWORD PTR [esi+32], ecx
	call	??4?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::operator=
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??4CGameMtlLibrary@@QAEAAV0@ABV0@@Z ENDP		; CGameMtlLibrary::operator=
_TEXT	ENDS
PUBLIC	??0CGameMtlLibrary@@QAE@ABV0@@Z			; CGameMtlLibrary::CGameMtlLibrary
; Function compile flags: /Ogtpy
;	COMDAT ??0CGameMtlLibrary@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0CGameMtlLibrary@@QAE@ABV0@@Z PROC			; CGameMtlLibrary::CGameMtlLibrary, COMDAT
; _this$ = ecx
	push	esi
	push	edi
	mov	edi, DWORD PTR ___that$[esp+4]
	mov	eax, DWORD PTR [edi]
	mov	esi, ecx
	mov	DWORD PTR [esi], eax
	mov	ecx, DWORD PTR [edi+4]
	lea	edx, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+4], ecx
	push	edx
	lea	ecx, DWORD PTR [esi+8]
	call	??0?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::_Impl_vector<void *,xalloc<void *> >
	lea	eax, DWORD PTR [edi+20]
	push	eax
	lea	ecx, DWORD PTR [esi+20]
	call	??0?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::_Impl_vector<void *,xalloc<void *> >
	mov	ecx, DWORD PTR [edi+32]
	mov	DWORD PTR [esi+32], ecx
	add	edi, 36					; 00000024H
	push	edi
	lea	ecx, DWORD PTR [esi+36]
	call	??0?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::_Impl_vector<void *,xalloc<void *> >
	pop	edi
	mov	eax, esi
	pop	esi
	ret	4
??0CGameMtlLibrary@@QAE@ABV0@@Z ENDP			; CGameMtlLibrary::CGameMtlLibrary
_TEXT	ENDS
PUBLIC	??4SGameMtl@@QAEAAU0@ABU0@@Z			; SGameMtl::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4SGameMtl@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4SGameMtl@@QAEAAU0@ABU0@@Z PROC			; SGameMtl::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx]
	push	esi
	mov	DWORD PTR [eax], edx
	mov	esi, DWORD PTR [ecx+4]
	test	esi, esi
	je	SHORT $LN5@operator@86
	add	DWORD PTR [esi], 1
$LN5@operator@86:
	mov	edx, DWORD PTR [eax+4]
	test	edx, edx
	je	SHORT $LN8@operator@86
	add	DWORD PTR [edx], -1
	mov	edx, DWORD PTR [eax+4]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN8@operator@86
	mov	DWORD PTR [eax+4], 0
$LN8@operator@86:
	mov	DWORD PTR [eax+4], esi
	mov	esi, DWORD PTR [ecx+8]
	test	esi, esi
	je	SHORT $LN14@operator@86
	add	DWORD PTR [esi], 1
$LN14@operator@86:
	mov	edx, DWORD PTR [eax+8]
	test	edx, edx
	je	SHORT $LN17@operator@86
	add	DWORD PTR [edx], -1
	mov	edx, DWORD PTR [eax+8]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN17@operator@86
	mov	DWORD PTR [eax+8], 0
$LN17@operator@86:
	mov	DWORD PTR [eax+8], esi
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	fld	DWORD PTR [ecx+16]
	fstp	DWORD PTR [eax+16]
	pop	esi
	fld	DWORD PTR [ecx+20]
	fstp	DWORD PTR [eax+20]
	fld	DWORD PTR [ecx+24]
	fstp	DWORD PTR [eax+24]
	fld	DWORD PTR [ecx+28]
	fstp	DWORD PTR [eax+28]
	fld	DWORD PTR [ecx+32]
	fstp	DWORD PTR [eax+32]
	fld	DWORD PTR [ecx+36]
	fstp	DWORD PTR [eax+36]
	fld	DWORD PTR [ecx+40]
	fstp	DWORD PTR [eax+40]
	fld	DWORD PTR [ecx+44]
	fstp	DWORD PTR [eax+44]
	fld	DWORD PTR [ecx+48]
	fstp	DWORD PTR [eax+48]
	fld	DWORD PTR [ecx+52]
	fstp	DWORD PTR [eax+52]
	fld	DWORD PTR [ecx+56]
	fstp	DWORD PTR [eax+56]
	fld	DWORD PTR [ecx+60]
	fstp	DWORD PTR [eax+60]
	fld	DWORD PTR [ecx+64]
	fstp	DWORD PTR [eax+64]
	ret	4
??4SGameMtl@@QAEAAU0@ABU0@@Z ENDP			; SGameMtl::operator=
_TEXT	ENDS
PUBLIC	??0SGameMtl@@QAE@ABU0@@Z			; SGameMtl::SGameMtl
; Function compile flags: /Ogtpy
;	COMDAT ??0SGameMtl@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0SGameMtl@@QAE@ABU0@@Z PROC				; SGameMtl::SGameMtl, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx]
	push	esi
	push	edi
	xor	edi, edi
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], edi
	mov	esi, DWORD PTR [ecx+4]
	cmp	esi, edi
	je	SHORT $LN5@SGameMtl@2
	add	DWORD PTR [esi], 1
$LN5@SGameMtl@2:
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, edi
	je	SHORT $LN8@SGameMtl@2
	add	DWORD PTR [edx], -1
	mov	edx, DWORD PTR [eax+4]
	cmp	DWORD PTR [edx], edi
	jne	SHORT $LN8@SGameMtl@2
	mov	DWORD PTR [eax+4], edi
$LN8@SGameMtl@2:
	mov	DWORD PTR [eax+4], esi
	mov	DWORD PTR [eax+8], edi
	mov	esi, DWORD PTR [ecx+8]
	cmp	esi, edi
	je	SHORT $LN14@SGameMtl@2
	add	DWORD PTR [esi], 1
$LN14@SGameMtl@2:
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, edi
	je	SHORT $LN17@SGameMtl@2
	add	DWORD PTR [edx], -1
	mov	edx, DWORD PTR [eax+8]
	cmp	DWORD PTR [edx], edi
	jne	SHORT $LN17@SGameMtl@2
	mov	DWORD PTR [eax+8], edi
$LN17@SGameMtl@2:
	mov	DWORD PTR [eax+8], esi
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	fld	DWORD PTR [ecx+16]
	fstp	DWORD PTR [eax+16]
	pop	edi
	fld	DWORD PTR [ecx+20]
	pop	esi
	fstp	DWORD PTR [eax+20]
	fld	DWORD PTR [ecx+24]
	fstp	DWORD PTR [eax+24]
	fld	DWORD PTR [ecx+28]
	fstp	DWORD PTR [eax+28]
	fld	DWORD PTR [ecx+32]
	fstp	DWORD PTR [eax+32]
	fld	DWORD PTR [ecx+36]
	fstp	DWORD PTR [eax+36]
	fld	DWORD PTR [ecx+40]
	fstp	DWORD PTR [eax+40]
	fld	DWORD PTR [ecx+44]
	fstp	DWORD PTR [eax+44]
	fld	DWORD PTR [ecx+48]
	fstp	DWORD PTR [eax+48]
	fld	DWORD PTR [ecx+52]
	fstp	DWORD PTR [eax+52]
	fld	DWORD PTR [ecx+56]
	fstp	DWORD PTR [eax+56]
	fld	DWORD PTR [ecx+60]
	fstp	DWORD PTR [eax+60]
	fld	DWORD PTR [ecx+64]
	fstp	DWORD PTR [eax+64]
	ret	4
??0SGameMtl@@QAE@ABU0@@Z ENDP				; SGameMtl::SGameMtl
_TEXT	ENDS
PUBLIC	??0SGameMtl@@QAE@XZ				; SGameMtl::SGameMtl
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\gamemtllib.h
;	COMDAT ??0SGameMtl@@QAE@XZ
_TEXT	SEGMENT
??0SGameMtl@@QAE@XZ PROC				; SGameMtl::SGameMtl, COMDAT
; _this$ = ecx

; 125  :     {
; 126  :         ID						= -1;
; 127  : 		m_Name					= "unknown";

	mov	eax, DWORD PTR __imp_?g_pStringContainer@@3PAVstr_container@@A
	push	esi
	mov	esi, ecx
	push	edi
	xor	edi, edi
	mov	DWORD PTR [esi+4], edi
	mov	DWORD PTR [esi+8], edi
	mov	DWORD PTR [esi], -1
	mov	ecx, DWORD PTR [eax]
	push	OFFSET ??_C@_07CIFAGBMG@unknown?$AA@
	call	DWORD PTR __imp_?dock@str_container@@QAEPAUstr_value@@PBD@Z
	cmp	eax, edi
	je	SHORT $LN9@SGameMtl@3
	add	DWORD PTR [eax], 1
$LN9@SGameMtl@3:
	mov	ecx, DWORD PTR [esi+4]
	cmp	ecx, edi
	je	SHORT $LN12@SGameMtl@3
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [esi+4]
	cmp	DWORD PTR [ecx], edi
	jne	SHORT $LN12@SGameMtl@3
	mov	DWORD PTR [esi+4], edi
$LN12@SGameMtl@3:

; 128  :         Flags.zero				();
; 129  :         // factors
; 130  :         fFlotationFactor		= 1.f;

	movss	xmm1, DWORD PTR __real@3f800000

; 131  :         fShootFactor			= 0.f;

	xorps	xmm0, xmm0
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+12], edi
	movss	DWORD PTR [esi+36], xmm1

; 132  :         fShootFactorMP			= 0.f;
; 133  :         fBounceDamageFactor		= 1.f;

	movss	DWORD PTR [esi+48], xmm1

; 134  :         fInjuriousSpeed 		= 0.f;
; 135  :         fVisTransparencyFactor	= 0.f;
; 136  :         fSndOcclusionFactor		= 0.f;
; 137  :         // physics
; 138  :         fPHFriction				= 1.f;

	movss	DWORD PTR [esi+16], xmm1

; 139  :         fPHDamping				= 1.f;

	movss	DWORD PTR [esi+20], xmm1

; 140  :         fPHSpring				= 1.f;

	movss	DWORD PTR [esi+24], xmm1

; 141  :         fPHBounceStartVelocity  = 0.f;
; 142  :         fPHBouncing				= 0.1f;

	movss	xmm1, DWORD PTR _psShedulerReaction
	pop	edi
	movss	DWORD PTR [esi+40], xmm0
	movss	DWORD PTR [esi+44], xmm0
	movss	DWORD PTR [esi+52], xmm0
	movss	DWORD PTR [esi+56], xmm0
	movss	DWORD PTR [esi+60], xmm0
	movss	DWORD PTR [esi+28], xmm0
	movss	DWORD PTR [esi+32], xmm1

; 143  : 		fDensityFactor			= 0.0f;

	movss	DWORD PTR [esi+64], xmm0

; 144  : 	}

	mov	eax, esi
	pop	esi
	ret	0
??0SGameMtl@@QAE@XZ ENDP				; SGameMtl::SGameMtl
; Function compile flags: /Ogtpy
;	COMDAT ??_GSGameMtlPair@@QAEPAXI@Z
_TEXT	SEGMENT
??_GSGameMtlPair@@QAEPAXI@Z PROC			; SGameMtlPair::`scalar deleting destructor', COMDAT
; _this$ = esi
	mov	ecx, esi
	call	??1SGameMtlPair@@QAE@XZ			; SGameMtlPair::~SGameMtlPair
	mov	eax, esi
	ret	0
??_GSGameMtlPair@@QAEPAXI@Z ENDP			; SGameMtlPair::`scalar deleting destructor'
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrmemory_subst_msvc.h
_TEXT	ENDS
;	COMDAT ??R?$xr_special_free@$0A@USGameMtlPair@@@@QAEXAAPAUSGameMtlPair@@@Z
_TEXT	SEGMENT
??R?$xr_special_free@$0A@USGameMtlPair@@@@QAEXAAPAUSGameMtlPair@@@Z PROC ; xr_special_free<0,SGameMtlPair>::operator(), COMDAT
; _ptr$ = esi

; 143  : 		ptr->~T			();

	mov	ecx, DWORD PTR [esi]
	call	??1SGameMtlPair@@QAE@XZ			; SGameMtlPair::~SGameMtlPair

; 144  : 		Memory.mem_free	(ptr);

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z

; 145  : 	}

	ret	0
??R?$xr_special_free@$0A@USGameMtlPair@@@@QAEXAAPAUSGameMtlPair@@@Z ENDP ; xr_special_free<0,SGameMtlPair>::operator()
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$xr_delete@USGameMtlPair@@@@YAXAAPAUSGameMtlPair@@@Z
_TEXT	SEGMENT
??$xr_delete@USGameMtlPair@@@@YAXAAPAUSGameMtlPair@@@Z PROC ; xr_delete<SGameMtlPair>, COMDAT
; _ptr$ = esi

; 151  : 	if (ptr) 

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN1@xr_delete@37

; 152  : 	{
; 153  : 		xr_special_free<is_polymorphic<T>::result,T>()(ptr);

	call	??1SGameMtlPair@@QAE@XZ			; SGameMtlPair::~SGameMtlPair
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z

; 154  : 		ptr = NULL;

	mov	DWORD PTR [esi], 0
$LN1@xr_delete@37:

; 155  : 	}
; 156  : }

	ret	0
??$xr_delete@USGameMtlPair@@@@YAXAAPAUSGameMtlPair@@@Z ENDP ; xr_delete<SGameMtlPair>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?clear@?$vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@stlp_std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@stlp_std@@QAEXXZ PROC ; stlp_std::vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::clear, COMDAT
; _this$ = edi

; 223  :   void clear() { _M_impl.clear(); }

	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ecx
	je	SHORT $LN12@clear@47
	push	esi
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN18@clear@47
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN18@clear@47:
	mov	DWORD PTR [edi+4], eax
	pop	esi
$LN12@clear@47:
	ret	0
?clear@?$vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@stlp_std@@QAEXXZ ENDP ; stlp_std::vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::clear
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?clear@?$vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@stlp_std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@stlp_std@@QAEXXZ PROC ; stlp_std::vector<SGameMtl *,xalloc<SGameMtl *> >::clear, COMDAT
; _this$ = edi

; 223  :   void clear() { _M_impl.clear(); }

	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ecx
	je	SHORT $LN12@clear@48
	push	esi
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN18@clear@48
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN18@clear@48:
	mov	DWORD PTR [edi+4], eax
	pop	esi
$LN12@clear@48:
	ret	0
?clear@?$vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@stlp_std@@QAEXXZ ENDP ; stlp_std::vector<SGameMtl *,xalloc<SGameMtl *> >::clear
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?clear_and_free@?$xr_vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear_and_free@?$xr_vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@@QAEXXZ PROC ; xr_vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::clear_and_free, COMDAT
; _this$ = edi

; 128  : 	void	clear_and_free		()									{ inherited::clear();			}

	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ecx
	je	SHORT $LN14@clear_and_@15
	push	esi
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN20@clear_and_@15
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN20@clear_and_@15:
	mov	DWORD PTR [edi+4], eax
	pop	esi
$LN14@clear_and_@15:
	ret	0
?clear_and_free@?$xr_vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@@QAEXXZ ENDP ; xr_vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::clear_and_free
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?clear_and_free@?$xr_vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear_and_free@?$xr_vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@@QAEXXZ PROC ; xr_vector<SGameMtl *,xalloc<SGameMtl *> >::clear_and_free, COMDAT
; _this$ = edi

; 128  : 	void	clear_and_free		()									{ inherited::clear();			}

	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ecx
	je	SHORT $LN14@clear_and_@16
	push	esi
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN20@clear_and_@16
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN20@clear_and_@16:
	mov	DWORD PTR [edi+4], eax
	pop	esi
$LN14@clear_and_@16:
	ret	0
?clear_and_free@?$xr_vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@@QAEXXZ ENDP ; xr_vector<SGameMtl *,xalloc<SGameMtl *> >::clear_and_free
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?clear@?$xr_vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$xr_vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@@QAEXXZ PROC ; xr_vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::clear, COMDAT
; _this$ = edi

; 133  : 	void	clear				()									{ clear_and_free	();			}

	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ecx
	je	SHORT $LN16@clear@49
	push	esi
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN22@clear@49
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN22@clear@49:
	mov	DWORD PTR [edi+4], eax
	pop	esi
$LN16@clear@49:
	ret	0
?clear@?$xr_vector@PAUSGameMtlPair@@V?$xalloc@PAUSGameMtlPair@@@@@@QAEXXZ ENDP ; xr_vector<SGameMtlPair *,xalloc<SGameMtlPair *> >::clear
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?clear@?$xr_vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$xr_vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@@QAEXXZ PROC ; xr_vector<SGameMtl *,xalloc<SGameMtl *> >::clear, COMDAT
; _this$ = edi

; 133  : 	void	clear				()									{ clear_and_free	();			}

	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ecx
	je	SHORT $LN16@clear@50
	push	esi
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN22@clear@50
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN22@clear@50:
	mov	DWORD PTR [edi+4], eax
	pop	esi
$LN16@clear@50:
	ret	0
?clear@?$xr_vector@PAUSGameMtl@@V?$xalloc@PAUSGameMtl@@@@@@QAEXXZ ENDP ; xr_vector<SGameMtl *,xalloc<SGameMtl *> >::clear
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ??0?$vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@stlp_std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@stlp_std@@QAE@ABV01@@Z PROC ; stlp_std::vector<ref_sound,xalloc<ref_sound> >::vector<ref_sound,xalloc<ref_sound> >, COMDAT
; _this$ = ecx
; ___x$ = eax

; 123  :   vector(const _Self& __x)

	push	esi
	mov	esi, ecx
	push	eax
	call	??0?$_Impl_vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<ref_sound,xalloc<ref_sound> >::_Impl_vector<ref_sound,xalloc<ref_sound> >
	mov	eax, esi
	pop	esi
	ret	0
??0?$vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@stlp_std@@QAE@ABV01@@Z ENDP ; stlp_std::vector<ref_sound,xalloc<ref_sound> >::vector<ref_sound,xalloc<ref_sound> >
_TEXT	ENDS
PUBLIC	?Unload@CGameMtlLibrary@@QAEXXZ			; CGameMtlLibrary::Unload
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\gamemtllib.h
;	COMDAT ?Unload@CGameMtlLibrary@@QAEXXZ
_TEXT	SEGMENT
?Unload@CGameMtlLibrary@@QAEXXZ PROC			; CGameMtlLibrary::Unload, COMDAT
; _this$ = ecx

; 257  : 	{

	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, ecx

; 258  : #ifndef _EDITOR
; 259  : 		material_count	= 0;

	xor	ebx, ebx
	mov	DWORD PTR [edi+32], ebx

; 260  : 		material_pairs_rt.clear();

	mov	ecx, DWORD PTR [edi+40]
	mov	eax, DWORD PTR [edi+36]
	cmp	eax, ecx
	je	SHORT $LN24@Unload@3
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN30@Unload@3
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN30@Unload@3:
	mov	DWORD PTR [edi+40], eax
$LN24@Unload@3:

; 261  : #endif
; 262  : 		for (GameMtlIt m_it=materials.begin(); materials.end() != m_it; ++m_it)

	mov	eax, DWORD PTR [edi+8]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	esi, eax
	mov	eax, DWORD PTR [edi+12]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	ebp, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	add	esp, 8
	cmp	eax, esi
	je	SHORT $LN4@Unload@3
	npad	3
$LL6@Unload@3:

; 263  : 			xr_delete	(*m_it);

	mov	eax, DWORD PTR [esi]
	cmp	eax, ebx
	je	SHORT $LN5@Unload@3
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, ebx
	je	SHORT $LN154@Unload@3
	add	DWORD PTR [ecx], -1
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx], ebx
	jne	SHORT $LN154@Unload@3
	mov	DWORD PTR [eax+8], ebx
$LN154@Unload@3:
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, ebx
	je	SHORT $LN66@Unload@3
	add	DWORD PTR [ecx], -1
	mov	edx, DWORD PTR [eax+4]
	cmp	DWORD PTR [edx], ebx
	jne	SHORT $LN66@Unload@3
	mov	DWORD PTR [eax+4], ebx
$LN66@Unload@3:
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	ebp
	mov	DWORD PTR [esi], ebx
$LN5@Unload@3:
	mov	eax, DWORD PTR [edi+12]
	push	eax
	add	esi, 4
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	cmp	eax, esi
	jne	SHORT $LL6@Unload@3
$LN4@Unload@3:

; 264  : 		materials.clear();

	mov	ecx, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [edi+8]
	cmp	eax, ecx
	je	SHORT $LN90@Unload@3
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN96@Unload@3
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN96@Unload@3:
	mov	DWORD PTR [edi+12], eax
$LN90@Unload@3:

; 265  : 		for (GameMtlPairIt p_it=material_pairs.begin(); material_pairs.end() != p_it; ++p_it)

	mov	eax, DWORD PTR [edi+20]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	esi, eax
	mov	eax, DWORD PTR [edi+24]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 8
	cmp	eax, esi
	je	SHORT $LN1@Unload@3
	npad	6
$LL3@Unload@3:

; 266  : 			xr_delete	(*p_it);

	mov	ecx, DWORD PTR [esi]
	cmp	ecx, ebx
	je	SHORT $LN2@Unload@3
	call	??1SGameMtlPair@@QAE@XZ			; SGameMtlPair::~SGameMtlPair
	mov	ecx, DWORD PTR [esi]
	push	ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	ebp
	mov	DWORD PTR [esi], ebx
$LN2@Unload@3:
	mov	eax, DWORD PTR [edi+24]
	push	eax
	add	esi, 4
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	cmp	eax, esi
	jne	SHORT $LL3@Unload@3
$LN1@Unload@3:

; 267  : 		material_pairs.clear();

	mov	ecx, DWORD PTR [edi+24]
	mov	eax, DWORD PTR [edi+20]
	cmp	eax, ecx
	je	SHORT $LN142@Unload@3
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN148@Unload@3
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN148@Unload@3:
	mov	DWORD PTR [edi+24], eax
$LN142@Unload@3:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 268  : 	}

	ret	0
?Unload@CGameMtlLibrary@@QAEXXZ ENDP			; CGameMtlLibrary::Unload
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$xr_vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xr_vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@@QAE@ABV0@@Z PROC ; xr_vector<ref_sound,xalloc<ref_sound> >::xr_vector<ref_sound,xalloc<ref_sound> >, COMDAT
; _this$ = ecx
; ___that$ = eax
	push	esi
	mov	esi, ecx
	push	eax
	call	??0?$_Impl_vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<ref_sound,xalloc<ref_sound> >::_Impl_vector<ref_sound,xalloc<ref_sound> >
	mov	eax, esi
	pop	esi
	ret	0
??0?$xr_vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@@QAE@ABV0@@Z ENDP ; xr_vector<ref_sound,xalloc<ref_sound> >::xr_vector<ref_sound,xalloc<ref_sound> >
_TEXT	ENDS
PUBLIC	??0SGameMtlPair@@QAE@ABU0@@Z			; SGameMtlPair::SGameMtlPair
; Function compile flags: /Ogtpy
;	COMDAT ??0SGameMtlPair@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0SGameMtlPair@@QAE@ABU0@@Z PROC			; SGameMtlPair::SGameMtlPair, COMDAT
; _this$ = ecx
	push	ebx
	mov	ebx, DWORD PTR ___that$[esp]
	mov	eax, DWORD PTR [ebx]
	push	esi
	push	edi
	mov	edi, ecx
	mov	DWORD PTR [edi], eax
	mov	ecx, DWORD PTR [ebx+4]
	mov	DWORD PTR [edi+4], ecx
	mov	edx, DWORD PTR [ebx+8]
	mov	DWORD PTR [edi+8], edx
	mov	eax, DWORD PTR [ebx+12]
	mov	DWORD PTR [edi+12], eax
	mov	ecx, DWORD PTR [ebx+16]
	mov	DWORD PTR [edi+16], ecx
	mov	edx, DWORD PTR [ebx+20]
	lea	eax, DWORD PTR [ebx+24]
	push	eax
	lea	esi, DWORD PTR [edi+24]
	mov	DWORD PTR [edi+20], edx
	call	??0?$_Impl_vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<ref_sound,xalloc<ref_sound> >::_Impl_vector<ref_sound,xalloc<ref_sound> >
	lea	ecx, DWORD PTR [ebx+36]
	push	ecx
	lea	esi, DWORD PTR [edi+36]
	call	??0?$_Impl_vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<ref_sound,xalloc<ref_sound> >::_Impl_vector<ref_sound,xalloc<ref_sound> >
	lea	edx, DWORD PTR [ebx+48]
	push	edx
	lea	esi, DWORD PTR [edi+48]
	call	??0?$_Impl_vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<ref_sound,xalloc<ref_sound> >::_Impl_vector<ref_sound,xalloc<ref_sound> >
	mov	eax, DWORD PTR [ebx+64]
	sub	eax, DWORD PTR [ebx+60]
	xor	ecx, ecx
	sar	eax, 2
	mov	DWORD PTR [edi+60], ecx
	mov	DWORD PTR [edi+64], ecx
	lea	esi, DWORD PTR [eax*4]
	mov	DWORD PTR [edi+68], ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	add	esi, eax
	mov	DWORD PTR [edi+60], eax
	mov	DWORD PTR [edi+64], eax
	mov	DWORD PTR [edi+68], esi
	mov	ecx, DWORD PTR [ebx+64]
	mov	edx, DWORD PTR [ebx+60]
	call	??$__ucopy@PBVshared_str@@PAV1@H@priv@stlp_std@@YAPAVshared_str@@PBV2@0PAV2@ABUrandom_access_iterator_tag@1@PAH@Z ; stlp_std::priv::__ucopy<shared_str const *,shared_str *,int>
	mov	DWORD PTR [edi+64], eax
	mov	eax, DWORD PTR __imp_?RenderFactory@@3PAVIRenderFactory@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	mov	DWORD PTR [edi+72], eax
	mov	ecx, DWORD PTR [ebx+72]
	mov	edx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+4]
	push	ecx
	mov	ecx, eax
	call	edx
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	ret	4
??0SGameMtlPair@@QAE@ABU0@@Z ENDP			; SGameMtlPair::SGameMtlPair
PUBLIC	??4SGameMtlPair@@QAEAAU0@ABU0@@Z		; SGameMtlPair::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4SGameMtlPair@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4SGameMtlPair@@QAEAAU0@ABU0@@Z PROC			; SGameMtlPair::operator=, COMDAT
; _this$ = ecx
	push	ebx
	mov	ebx, DWORD PTR ___that$[esp]
	mov	eax, DWORD PTR [ebx]
	push	esi
	push	edi
	mov	edi, ecx
	mov	DWORD PTR [edi], eax
	mov	ecx, DWORD PTR [ebx+4]
	mov	DWORD PTR [edi+4], ecx
	mov	edx, DWORD PTR [ebx+8]
	mov	DWORD PTR [edi+8], edx
	mov	eax, DWORD PTR [ebx+12]
	mov	DWORD PTR [edi+12], eax
	mov	ecx, DWORD PTR [ebx+16]
	mov	DWORD PTR [edi+16], ecx
	mov	edx, DWORD PTR [ebx+20]
	lea	eax, DWORD PTR [ebx+24]
	push	eax
	lea	ecx, DWORD PTR [edi+24]
	mov	DWORD PTR [edi+20], edx
	call	??4?$vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@stlp_std@@QAEAAV01@ABV01@@Z ; stlp_std::vector<ref_sound,xalloc<ref_sound> >::operator=
	lea	ecx, DWORD PTR [ebx+36]
	push	ecx
	lea	ecx, DWORD PTR [edi+36]
	call	??4?$vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@stlp_std@@QAEAAV01@ABV01@@Z ; stlp_std::vector<ref_sound,xalloc<ref_sound> >::operator=
	lea	edx, DWORD PTR [ebx+48]
	push	edx
	lea	ecx, DWORD PTR [edi+48]
	call	??4?$vector@Uref_sound@@V?$xalloc@Uref_sound@@@@@stlp_std@@QAEAAV01@ABV01@@Z ; stlp_std::vector<ref_sound,xalloc<ref_sound> >::operator=
	lea	eax, DWORD PTR [ebx+60]
	push	eax
	lea	esi, DWORD PTR [edi+60]
	call	??4?$_Impl_vector@Vshared_str@@V?$xalloc@Vshared_str@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<shared_str,xalloc<shared_str> >::operator=
	mov	ecx, DWORD PTR [edi+72]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ebx+72]
	mov	edx, DWORD PTR [edx+4]
	push	eax
	call	edx
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	ret	4
??4SGameMtlPair@@QAEAAU0@ABU0@@Z ENDP			; SGameMtlPair::operator=
_TEXT	ENDS
PUBLIC	??0SGameMtlPair@@QAE@PAVCGameMtlLibrary@@@Z	; SGameMtlPair::SGameMtlPair
; Function compile flags: /Ogtpy
;	COMDAT ??0SGameMtlPair@@QAE@PAVCGameMtlLibrary@@@Z
_TEXT	SEGMENT
_owner$ = 8						; size = 4
??0SGameMtlPair@@QAE@PAVCGameMtlLibrary@@@Z PROC	; SGameMtlPair::SGameMtlPair, COMDAT
; _this$ = ecx

; 200  : 	SGameMtlPair		(CGameMtlLibrary* owner)

	xor	eax, eax
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi+24], eax
	mov	DWORD PTR [esi+28], eax
	mov	DWORD PTR [esi+32], eax
	mov	DWORD PTR [esi+36], eax
	mov	DWORD PTR [esi+40], eax
	mov	DWORD PTR [esi+44], eax
	mov	DWORD PTR [esi+48], eax
	mov	DWORD PTR [esi+52], eax
	lea	ecx, DWORD PTR [esi+60]
	mov	DWORD PTR [esi+56], eax
	call	??0?$xr_vector@Vshared_str@@V?$xalloc@Vshared_str@@@@@@QAE@XZ ; xr_vector<shared_str,xalloc<shared_str> >::xr_vector<shared_str,xalloc<shared_str> >
	mov	eax, DWORD PTR __imp_?RenderFactory@@3PAVIRenderFactory@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 201  :     {
; 202  : #ifndef	GM_NON_GAME
; 203  : 		//m_pCollideMarks = RenderFactory->CreateGameMtlPair();
; 204  : #endif	//	GM_NON_GAME
; 205  :     	mtl0			= -1;
; 206  :     	mtl1			= -1;
; 207  :         ID				= -1;
; 208  :         ID_parent		= -1;
; 209  :         m_Owner			= owner;

	mov	ecx, DWORD PTR _owner$[esp]
	mov	DWORD PTR [esi+72], eax
	or	eax, -1
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+16], eax
	mov	DWORD PTR [esi], ecx

; 210  :         OwnProps.one	();

	mov	DWORD PTR [esi+20], eax

; 211  : 	}

	mov	eax, esi
	pop	esi
	ret	4
??0SGameMtlPair@@QAE@PAVCGameMtlLibrary@@@Z ENDP	; SGameMtlPair::SGameMtlPair
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\bone.cpp
;	COMDAT ??__Edummy@@YAXXZ
text$yc	SEGMENT
$T556945 = -60						; size = 60
??__Edummy@@YAXXZ PROC					; `dynamic initializer for 'dummy'', COMDAT

; 13   : static const Fobb	dummy = Fobb().identity();

	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	push	60					; 0000003cH
	lea	eax, DWORD PTR $T556945[esp+72]
	push	0
	push	eax
	call	_memset
	xorps	xmm0, xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	movss	DWORD PTR $T556945[esp+84], xmm0
	movss	DWORD PTR $T556945[esp+88], xmm0
	movss	DWORD PTR $T556945[esp+92], xmm0
	movss	DWORD PTR $T556945[esp+100], xmm0
	movss	DWORD PTR $T556945[esp+104], xmm0
	movss	DWORD PTR $T556945[esp+108], xmm0
	movss	DWORD PTR $T556945[esp+116], xmm0
	movss	DWORD PTR $T556945[esp+120], xmm0
	movss	DWORD PTR $T556945[esp+124], xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	add	esp, 12					; 0000000cH
	mov	ecx, 15					; 0000000fH
	lea	esi, DWORD PTR $T556945[esp+68]
	mov	edi, OFFSET _dummy
	movss	DWORD PTR $T556945[esp+68], xmm1
	movss	DWORD PTR $T556945[esp+84], xmm1
	movss	DWORD PTR $T556945[esp+100], xmm1
	movss	DWORD PTR $T556945[esp+116], xmm0
	movss	DWORD PTR $T556945[esp+120], xmm0
	movss	DWORD PTR $T556945[esp+124], xmm0
	rep movsd
	pop	edi
	pop	esi
	add	esp, 60					; 0000003cH
	ret	0
??__Edummy@@YAXXZ ENDP					; `dynamic initializer for 'dummy''
_dummy	DB	03cH DUP (?)
_dummy$initializer$ DD FLAT:??__Edummy@@YAXXZ
END
