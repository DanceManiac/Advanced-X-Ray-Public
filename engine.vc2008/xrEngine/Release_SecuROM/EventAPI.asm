; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	D:\CLEARSKY\sources\engine\xrEngine\EventAPI.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?to_storage_type_cref@?$_CastTraits@PAXPAVIEventReceiver@@@priv@stlp_std@@SAABQAXABQAVIEventReceiver@@@Z ; stlp_std::priv::_CastTraits<void *,IEventReceiver *>::to_storage_type_cref
PUBLIC	?push_back@?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAEXABQAVIEventReceiver@@@Z ; stlp_std::vector<IEventReceiver *,xalloc<IEventReceiver *> >::push_back
PUBLIC	?end@?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAEPAPAVIEventReceiver@@XZ ; stlp_std::vector<IEventReceiver *,xalloc<IEventReceiver *> >::end
PUBLIC	?to_storage_type_ptr@?$_CastTraits@PAXPAVIEventReceiver@@@priv@stlp_std@@SAPAPAXPAPAVIEventReceiver@@@Z ; stlp_std::priv::_CastTraits<void *,IEventReceiver *>::to_storage_type_ptr
PUBLIC	?erase@?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAEPAPAVIEventReceiver@@PAPAV3@@Z ; stlp_std::vector<IEventReceiver *,xalloc<IEventReceiver *> >::erase
PUBLIC	??$__find@PAPAVIEventReceiver@@PAV1@@priv@stlp_std@@YAPAPAVIEventReceiver@@PAPAV2@0ABQAV2@ABUrandom_access_iterator_tag@1@@Z ; stlp_std::priv::__find<IEventReceiver * *,IEventReceiver *>
PUBLIC	??$find@PAPAVIEventReceiver@@PAV1@@stlp_std@@YAPAPAVIEventReceiver@@PAPAV1@0ABQAV1@@Z ; stlp_std::find<IEventReceiver * *,IEventReceiver *>
PUBLIC	?empty@?$vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@stlp_std@@QBE_NXZ ; stlp_std::vector<CEvent *,xalloc<CEvent *> >::empty
PUBLIC	?clear@?$vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@stlp_std@@QAEXXZ ; stlp_std::vector<CEvent *,xalloc<CEvent *> >::clear
PUBLIC	?clear_and_free@?$xr_vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@@QAEXXZ ; xr_vector<CEvent *,xalloc<CEvent *> >::clear_and_free
PUBLIC	?clear@?$xr_vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@@QAEXXZ ; xr_vector<CEvent *,xalloc<CEvent *> >::clear
PUBLIC	?size@?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QBEIXZ ; stlp_std::vector<IEventReceiver *,xalloc<IEventReceiver *> >::size
PUBLIC	?size@?$xr_vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@@QBEIXZ ; xr_vector<IEventReceiver *,xalloc<IEventReceiver *> >::size
PUBLIC	?to_value_type_ptr@?$_CastTraits@PAXPAVIEventReceiver@@@priv@stlp_std@@SAPAPAVIEventReceiver@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,IEventReceiver *>::to_value_type_ptr
PUBLIC	?begin@?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAEPAPAVIEventReceiver@@XZ ; stlp_std::vector<IEventReceiver *,xalloc<IEventReceiver *> >::begin
PUBLIC	??A?$xr_vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@@QAEAAPAVIEventReceiver@@I@Z ; xr_vector<IEventReceiver *,xalloc<IEventReceiver *> >::operator[]
PUBLIC	??0?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::vector<IEventReceiver *,xalloc<IEventReceiver *> >::vector<IEventReceiver *,xalloc<IEventReceiver *> >
PUBLIC	??0?$xr_vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@@QAE@ABV0@@Z ; xr_vector<IEventReceiver *,xalloc<IEventReceiver *> >::xr_vector<IEventReceiver *,xalloc<IEventReceiver *> >
PUBLIC	??4?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAEAAV01@ABV01@@Z ; stlp_std::vector<IEventReceiver *,xalloc<IEventReceiver *> >::operator=
PUBLIC	??4?$xr_vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@@QAEAAV0@ABV0@@Z ; xr_vector<IEventReceiver *,xalloc<IEventReceiver *> >::operator=
PUBLIC	??0?$xalloc@PAVIEventReceiver@@@@QAE@XZ		; xalloc<IEventReceiver *>::xalloc<IEventReceiver *>
PUBLIC	??$?0PAVIEventReceiver@@@?$xalloc@PAX@@QAE@ABV?$xalloc@PAVIEventReceiver@@@@@Z ; xalloc<void *>::xalloc<void *><IEventReceiver *>
PUBLIC	??0?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAE@ABV?$xalloc@PAVIEventReceiver@@@@@Z ; stlp_std::vector<IEventReceiver *,xalloc<IEventReceiver *> >::vector<IEventReceiver *,xalloc<IEventReceiver *> >
PUBLIC	??0?$xr_vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@@QAE@XZ ; xr_vector<IEventReceiver *,xalloc<IEventReceiver *> >::xr_vector<IEventReceiver *,xalloc<IEventReceiver *> >
PUBLIC	??1?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAE@XZ ; stlp_std::vector<IEventReceiver *,xalloc<IEventReceiver *> >::~vector<IEventReceiver *,xalloc<IEventReceiver *> >
PUBLIC	??1?$xr_vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@@QAE@XZ ; xr_vector<IEventReceiver *,xalloc<IEventReceiver *> >::~xr_vector<IEventReceiver *,xalloc<IEventReceiver *> >
PUBLIC	?size@?$vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@stlp_std@@QBEIXZ ; stlp_std::vector<CEvent *,xalloc<CEvent *> >::size
PUBLIC	?size@?$xr_vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@@QBEIXZ ; xr_vector<CEvent *,xalloc<CEvent *> >::size
PUBLIC	??A?$xr_vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@@QAEAAPAVCEvent@@I@Z ; xr_vector<CEvent *,xalloc<CEvent *> >::operator[]
PUBLIC	?ev_sort@@YA_NPAVCEvent@@0@Z			; ev_sort
PUBLIC	??$__make_heap@PAPAVCEvent@@P6A_NPAV1@0@ZPAV1@H@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV1@1@Z0PAH@Z ; stlp_std::__make_heap<CEvent * *,bool (__cdecl*)(CEvent *,CEvent *),CEvent *,int>
PUBLIC	??$make_heap@PAPAVCEvent@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV1@1@Z@Z ; stlp_std::make_heap<CEvent * *,bool (__cdecl*)(CEvent *,CEvent *)>
PUBLIC	??$__push_heap@PAPAVCEvent@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@HHPAV1@P6A_N11@Z@Z ; stlp_std::__push_heap<CEvent * *,int,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
PUBLIC	??$__adjust_heap@PAPAVCEvent@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@HHPAV1@P6A_N11@Z@Z ; stlp_std::__adjust_heap<CEvent * *,int,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
PUBLIC	??$__pop_heap@PAPAVCEvent@@PAV1@P6A_NPAV1@0@ZH@stlp_std@@YAXPAPAVCEvent@@00PAV1@P6A_N11@ZPAH@Z ; stlp_std::__pop_heap<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *),int>
PUBLIC	??$__pop_heap_aux@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@00P6A_NPAV1@1@Z@Z ; stlp_std::__pop_heap_aux<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
PUBLIC	??$pop_heap@PAPAVCEvent@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV1@1@Z@Z ; stlp_std::pop_heap<CEvent * *,bool (__cdecl*)(CEvent *,CEvent *)>
PUBLIC	??$sort_heap@PAPAVCEvent@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV1@1@Z@Z ; stlp_std::sort_heap<CEvent * *,bool (__cdecl*)(CEvent *,CEvent *)>
PUBLIC	??$__partial_sort@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@000P6A_NPAV2@1@Z@Z ; stlp_std::priv::__partial_sort<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
PUBLIC	??$partial_sort@PAPAVCEvent@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@00P6A_NPAV1@1@Z@Z ; stlp_std::partial_sort<CEvent * *,bool (__cdecl*)(CEvent *,CEvent *)>
PUBLIC	??$__median@PAVCEvent@@P6A_NPAV1@0@Z@priv@stlp_std@@YAABQAVCEvent@@ABQAV2@00P6A_NPAV2@1@Z@Z ; stlp_std::priv::__median<CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
PUBLIC	?_Ret@?$_IsRefType@AAPAVCEvent@@@stlp_std@@SA?AU__true_type@2@XZ ; stlp_std::_IsRefType<CEvent * &>::_Ret
PUBLIC	??$_IsOKToSwap@PAVCEvent@@PAV1@U__true_type@stlp_std@@U23@@stlp_std@@YA?AU?$_OKToSwap@PAVCEvent@@PAV1@U__true_type@stlp_std@@U23@@0@PAPAVCEvent@@0ABU__true_type@0@1@Z ; stlp_std::_IsOKToSwap<CEvent *,CEvent *,stlp_std::__true_type,stlp_std::__true_type>
PUBLIC	?_Answer@?$_OKToSwap@PAVCEvent@@PAV1@U__true_type@stlp_std@@U23@@stlp_std@@SA?AU__true_type@2@XZ ; stlp_std::_OKToSwap<CEvent *,CEvent *,stlp_std::__true_type,stlp_std::__true_type>::_Answer
PUBLIC	??$swap@PAVCEvent@@@stlp_std@@YAXAAPAVCEvent@@0@Z ; stlp_std::swap<CEvent *>
PUBLIC	??$__iter_swap_aux@PAPAVCEvent@@PAPAV1@@priv@stlp_std@@YAXAAPAPAVCEvent@@0ABU__true_type@1@@Z ; stlp_std::priv::__iter_swap_aux<CEvent * *,CEvent * *>
PUBLIC	??$iter_swap@PAPAVCEvent@@PAPAV1@@stlp_std@@YAXPAPAVCEvent@@0@Z ; stlp_std::iter_swap<CEvent * *,CEvent * *>
PUBLIC	??$__unguarded_partition@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAPAPAVCEvent@@PAPAV2@0PAV2@P6A_N11@Z@Z ; stlp_std::priv::__unguarded_partition<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
PUBLIC	??$__introsort_loop@PAPAVCEvent@@PAV1@HP6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@00HP6A_NPAV2@1@Z@Z ; stlp_std::priv::__introsort_loop<CEvent * *,CEvent *,int,bool (__cdecl*)(CEvent *,CEvent *)>
PUBLIC	?_Answer@?$_BothPtrType@PAPAVCEvent@@PAPAV1@@stlp_std@@SA?AU__true_type@2@XZ ; stlp_std::_BothPtrType<CEvent * *,CEvent * *>::_Answer
PUBLIC	??$_UseTrivialCopy@PAVCEvent@@PAV1@@stlp_std@@YA?AU?$_TrivialCopy@PAVCEvent@@PAV1@@0@PAPAVCEvent@@0@Z ; stlp_std::_UseTrivialCopy<CEvent *,CEvent *>
PUBLIC	?_Answer@?$_TrivialCopy@PAVCEvent@@PAV1@@stlp_std@@SA?AU__true_type@2@XZ ; stlp_std::_TrivialCopy<CEvent *,CEvent *>::_Answer
PUBLIC	??$__copy_backward_ptrs@PAPAVCEvent@@PAPAV1@@priv@stlp_std@@YAPAPAVCEvent@@PAPAV2@00ABU__true_type@1@@Z ; stlp_std::priv::__copy_backward_ptrs<CEvent * *,CEvent * *>
PUBLIC	??$__copy_backward_aux@PAPAVCEvent@@PAPAV1@@priv@stlp_std@@YAPAPAVCEvent@@PAPAV2@00ABU__true_type@1@@Z ; stlp_std::priv::__copy_backward_aux<CEvent * *,CEvent * *>
PUBLIC	??$copy_backward@PAPAVCEvent@@PAPAV1@@stlp_std@@YAPAPAVCEvent@@PAPAV1@00@Z ; stlp_std::copy_backward<CEvent * *,CEvent * *>
PUBLIC	??$__linear_insert@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@0PAV2@P6A_N11@Z@Z ; stlp_std::priv::__linear_insert<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
PUBLIC	??$__insertion_sort@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@00P6A_NPAV2@1@Z@Z ; stlp_std::priv::__insertion_sort<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
PUBLIC	??$__unguarded_linear_insert@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@PAV2@P6A_N11@Z@Z ; stlp_std::priv::__unguarded_linear_insert<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
PUBLIC	??$__unguarded_insertion_sort_aux@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@00P6A_NPAV2@1@Z@Z ; stlp_std::priv::__unguarded_insertion_sort_aux<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
PUBLIC	??$__unguarded_insertion_sort@PAPAVCEvent@@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV2@1@Z@Z ; stlp_std::priv::__unguarded_insertion_sort<CEvent * *,bool (__cdecl*)(CEvent *,CEvent *)>
PUBLIC	??$__final_insertion_sort@PAPAVCEvent@@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV2@1@Z@Z ; stlp_std::priv::__final_insertion_sort<CEvent * *,bool (__cdecl*)(CEvent *,CEvent *)>
PUBLIC	??$sort@PAPAVCEvent@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV1@1@Z@Z ; stlp_std::sort<CEvent * *,bool (__cdecl*)(CEvent *,CEvent *)>
PUBLIC	?to_storage_type_cref@?$_CastTraits@PAXPAVCEvent@@@priv@stlp_std@@SAABQAXABQAVCEvent@@@Z ; stlp_std::priv::_CastTraits<void *,CEvent *>::to_storage_type_cref
PUBLIC	?push_back@?$vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@stlp_std@@QAEXABQAVCEvent@@@Z ; stlp_std::vector<CEvent *,xalloc<CEvent *> >::push_back
PUBLIC	??$xr_new@VCEvent@@PBD@@YAPAVCEvent@@ABQBD@Z	; xr_new<CEvent,char const *>
PUBLIC	?begin@?$vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@stlp_std@@QAEPAPAVCEvent@@XZ ; stlp_std::vector<CEvent *,xalloc<CEvent *> >::begin
PUBLIC	?end@?$vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@stlp_std@@QAEPAPAVCEvent@@XZ ; stlp_std::vector<CEvent *,xalloc<CEvent *> >::end
PUBLIC	?to_value_type_ptr@?$_CastTraits@PAXPAVCEvent@@@priv@stlp_std@@SAPAPAVCEvent@@PAPAX@Z ; stlp_std::priv::_CastTraits<void *,CEvent *>::to_value_type_ptr
PUBLIC	?to_storage_type_ptr@?$_CastTraits@PAXPAVCEvent@@@priv@stlp_std@@SAPAPAXPAPAVCEvent@@@Z ; stlp_std::priv::_CastTraits<void *,CEvent *>::to_storage_type_ptr
PUBLIC	?erase@?$vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@stlp_std@@QAEPAPAVCEvent@@PAPAV3@@Z ; stlp_std::vector<CEvent *,xalloc<CEvent *> >::erase
PUBLIC	??$__find@PAPAVCEvent@@PAV1@@priv@stlp_std@@YAPAPAVCEvent@@PAPAV2@0ABQAV2@ABUrandom_access_iterator_tag@1@@Z ; stlp_std::priv::__find<CEvent * *,CEvent *>
PUBLIC	??$find@PAPAVCEvent@@PAV1@@stlp_std@@YAPAPAVCEvent@@PAPAV1@0ABQAV1@@Z ; stlp_std::find<CEvent * *,CEvent *>
PUBLIC	??_GCEvent@@QAEPAXI@Z				; CEvent::`scalar deleting destructor'
PUBLIC	??R?$xr_special_free@$0A@VCEvent@@@@QAEXAAPAVCEvent@@@Z ; xr_special_free<0,CEvent>::operator()
PUBLIC	??$xr_delete@VCEvent@@@@YAXAAPAVCEvent@@@Z	; xr_delete<CEvent>
PUBLIC	?back@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@QAEAAUDeferred@CEventAPI@@XZ ; stlp_std::priv::_Impl_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::back
PUBLIC	?to_value_type_ref@?$_CastTraits@UDeferred@CEventAPI@@U12@@priv@stlp_std@@SAAAUDeferred@CEventAPI@@AAU45@@Z ; stlp_std::priv::_CastTraits<CEventAPI::Deferred,CEventAPI::Deferred>::to_value_type_ref
PUBLIC	?back@?$vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@stlp_std@@QAEAAUDeferred@CEventAPI@@XZ ; stlp_std::vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::back
PUBLIC	?_M_set@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@AAEXPAUDeferred@CEventAPI@@00@Z ; stlp_std::priv::_Impl_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::_M_set
PUBLIC	??$__fill_n@PAUDeferred@CEventAPI@@IU12@@priv@stlp_std@@YAPAUDeferred@CEventAPI@@PAU23@IABU23@@Z ; stlp_std::priv::__fill_n<CEventAPI::Deferred *,unsigned int,CEventAPI::Deferred>
PUBLIC	?_M_insert_overflow@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@AAEXPAUDeferred@CEventAPI@@ABU45@ABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::_M_insert_overflow
PUBLIC	??$_Copy_Construct@UDeferred@CEventAPI@@@stlp_std@@YAXPAUDeferred@CEventAPI@@ABU12@@Z ; stlp_std::_Copy_Construct<CEventAPI::Deferred>
PUBLIC	?push_back@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@QAEXABUDeferred@CEventAPI@@@Z ; stlp_std::priv::_Impl_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::push_back
PUBLIC	?to_storage_type_cref@?$_CastTraits@UDeferred@CEventAPI@@U12@@priv@stlp_std@@SAABUDeferred@CEventAPI@@ABU45@@Z ; stlp_std::priv::_CastTraits<CEventAPI::Deferred,CEventAPI::Deferred>::to_storage_type_cref
PUBLIC	?push_back@?$vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@stlp_std@@QAEXABUDeferred@CEventAPI@@@Z ; stlp_std::vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::push_back
PUBLIC	?empty@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@QBE_NXZ ; stlp_std::priv::_Impl_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::empty
PUBLIC	?empty@?$vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@stlp_std@@QBE_NXZ ; stlp_std::vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::empty
PUBLIC	?size@?$vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@stlp_std@@QBEIXZ ; stlp_std::vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::size
PUBLIC	?size@?$xr_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@@QBEIXZ ; xr_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::size
PUBLIC	??$__copy_ptrs@PAUDeferred@CEventAPI@@PAU12@@priv@stlp_std@@YAPAUDeferred@CEventAPI@@PAU23@00ABU__true_type@1@@Z ; stlp_std::priv::__copy_ptrs<CEventAPI::Deferred *,CEventAPI::Deferred *>
PUBLIC	?_M_erase@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@AAEPAUDeferred@CEventAPI@@PAU45@0ABU__false_type@3@@Z ; stlp_std::priv::_Impl_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::_M_erase
PUBLIC	?erase@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@QAEPAUDeferred@CEventAPI@@PAU45@0@Z ; stlp_std::priv::_Impl_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::erase
PUBLIC	?clear@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@QAEXXZ ; stlp_std::priv::_Impl_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::clear
PUBLIC	?clear@?$vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@stlp_std@@QAEXXZ ; stlp_std::vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::clear
PUBLIC	?clear_and_free@?$xr_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@@QAEXXZ ; xr_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::clear_and_free
PUBLIC	?clear@?$xr_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@@QAEXXZ ; xr_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::clear
PUBLIC	?to_value_type_ptr@?$_CastTraits@UDeferred@CEventAPI@@U12@@priv@stlp_std@@SAPAUDeferred@CEventAPI@@PAU45@@Z ; stlp_std::priv::_CastTraits<CEventAPI::Deferred,CEventAPI::Deferred>::to_value_type_ptr
PUBLIC	?begin@?$vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@stlp_std@@QAEPAUDeferred@CEventAPI@@XZ ; stlp_std::vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::begin
PUBLIC	??A?$xr_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@@QAEAAUDeferred@CEventAPI@@I@Z ; xr_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::operator[]
PUBLIC	??_C@_09JKHCDIKO@?$CK?5?$FL?$CFd?$FN?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BD@PFJONIMB@CEventAPI?3?3Destroy?$AA@	; `string'
PUBLIC	??_C@_0DB@NLNFIAGG@D?3?2CLEARSKY?2sources?2engine?2xrEng@ ; `string'
PUBLIC	??_C@_0BA@OAFOGMEL@I?$CB?$DNEvents?4end?$CI?$CJ?$AA@ ; `string'
EXTRN	__imp___strupr:PROC
EXTRN	__imp_?Enter@xrCriticalSection@@QAEXXZ:PROC
EXTRN	__imp_?Leave@xrCriticalSection@@QAEXXZ:PROC
;	COMDAT ?ignore_always@?6??Destroy@CEventAPI@@QAEXAAPAVCEvent@@@Z@4_NA
_BSS	SEGMENT
?ignore_always@?6??Destroy@CEventAPI@@QAEXAAPAVCEvent@@@Z@4_NA DB 01H DUP (?) ; `CEventAPI::Destroy'::`7'::ignore_always
;	COMDAT ??_C@_0BA@OAFOGMEL@I?$CB?$DNEvents?4end?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_0BA@OAFOGMEL@I?$CB?$DNEvents?4end?$CI?$CJ?$AA@ DB 'I!=Events.end()', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@NLNFIAGG@D?3?2CLEARSKY?2sources?2engine?2xrEng@
CONST	SEGMENT
??_C@_0DB@NLNFIAGG@D?3?2CLEARSKY?2sources?2engine?2xrEng@ DB 'D:\CLEARSKY'
	DB	'\sources\engine\xrEngine\EventAPI.cpp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PFJONIMB@CEventAPI?3?3Destroy?$AA@
CONST	SEGMENT
??_C@_0BD@PFJONIMB@CEventAPI?3?3Destroy?$AA@ DB 'CEventAPI::Destroy', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JKHCDIKO@?$CK?5?$FL?$CFd?$FN?5?$CFs?$AA@
CONST	SEGMENT
??_C@_09JKHCDIKO@?$CK?5?$FL?$CFd?$FN?5?$CFs?$AA@ DB '* [%d] %s', 00H ; `string'
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\type_traits.h
;	COMDAT ??$_UseTrivialCopy@PAVCEvent@@PAV1@@stlp_std@@YA?AU?$_TrivialCopy@PAVCEvent@@PAV1@@0@PAPAVCEvent@@0@Z
_TEXT	SEGMENT
??$_UseTrivialCopy@PAVCEvent@@PAV1@@stlp_std@@YA?AU?$_TrivialCopy@PAVCEvent@@PAV1@@0@PAPAVCEvent@@0@Z PROC ; stlp_std::_UseTrivialCopy<CEvent *,CEvent *>, COMDAT

; 485  : { return _TrivialCopy<_Src, _Dst>(); }

	xor	al, al
	ret	0
??$_UseTrivialCopy@PAVCEvent@@PAV1@@stlp_std@@YA?AU?$_TrivialCopy@PAVCEvent@@PAV1@@0@PAPAVCEvent@@0@Z ENDP ; stlp_std::_UseTrivialCopy<CEvent *,CEvent *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_heap.c
_TEXT	ENDS
;	COMDAT ??$__push_heap@PAPAVCEvent@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@HHPAV1@P6A_N11@Z@Z
_TEXT	SEGMENT
___topIndex$ = 8					; size = 4
___val$ = 12						; size = 4
___comp$ = 16						; size = 4
??$__push_heap@PAPAVCEvent@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@HHPAV1@P6A_N11@Z@Z PROC ; stlp_std::__push_heap<CEvent * *,int,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>, COMDAT
; ___first$ = ebx
; ___holeIndex$ = eax

; 78   : {

	push	ebp
	mov	ebp, DWORD PTR ___val$[esp]
	push	esi
	push	edi
	mov	edi, eax

; 79   :   _Distance __parent = (__holeIndex - 1) / 2;

	lea	eax, DWORD PTR [edi-1]
	cdq
	sub	eax, edx
	mov	esi, eax
	sar	esi, 1

; 80   :   while (__holeIndex > __topIndex && __comp(*(__first + __parent), __val)) {

	cmp	edi, DWORD PTR ___topIndex$[esp+8]
	jle	SHORT $LN8@push_heap
	npad	7
$LL2@push_heap:
	mov	eax, DWORD PTR [ebx+esi*4]
	push	ebp
	push	eax
	call	DWORD PTR ___comp$[esp+16]
	add	esp, 8
	test	al, al
	je	SHORT $LN8@push_heap

; 81   :     _STLP_VERBOSE_ASSERT(!__comp(__val, *(__first + __parent)), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 82   :     *(__first + __holeIndex) = *(__first + __parent);

	mov	ecx, DWORD PTR [ebx+esi*4]

; 83   :     __holeIndex = __parent;
; 84   :     __parent = (__holeIndex - 1) / 2;

	lea	eax, DWORD PTR [esi-1]
	cdq
	sub	eax, edx
	mov	DWORD PTR [ebx+edi*4], ecx
	mov	edi, esi
	sar	eax, 1
	cmp	edi, DWORD PTR ___topIndex$[esp+8]
	mov	esi, eax
	jg	SHORT $LL2@push_heap
$LN8@push_heap:

; 85   :   }
; 86   :   *(__first + __holeIndex) = __val;

	mov	DWORD PTR [ebx+edi*4], ebp
	pop	edi
	pop	esi
	pop	ebp

; 87   : }

	ret	0
??$__push_heap@PAPAVCEvent@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@HHPAV1@P6A_N11@Z@Z ENDP ; stlp_std::__push_heap<CEvent * *,int,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\type_traits.h
_TEXT	ENDS
;	COMDAT ?_Answer@?$_TrivialCopy@PAVCEvent@@PAV1@@stlp_std@@SA?AU__true_type@2@XZ
_TEXT	SEGMENT
?_Answer@?$_TrivialCopy@PAVCEvent@@PAV1@@stlp_std@@SA?AU__true_type@2@XZ PROC ; stlp_std::_TrivialCopy<CEvent *,CEvent *>::_Answer, COMDAT

; 390  :   static _Ret _Answer() { return _Ret(); }

	xor	al, al
	ret	0
?_Answer@?$_TrivialCopy@PAVCEvent@@PAV1@@stlp_std@@SA?AU__true_type@2@XZ ENDP ; stlp_std::_TrivialCopy<CEvent *,CEvent *>::_Answer
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$swap@PAVCEvent@@@stlp_std@@YAXAAPAVCEvent@@0@Z
_TEXT	SEGMENT
??$swap@PAVCEvent@@@stlp_std@@YAXAAPAVCEvent@@0@Z PROC	; stlp_std::swap<CEvent *>, COMDAT
; ___a$ = ecx
; ___b$ = eax

; 82   : #if defined (_STLP_USE_PARTIAL_SPEC_WORKAROUND) && !defined (_STLP_FUNCTION_TMPL_PARTIAL_ORDER)
; 83   : #  if !defined(__BORLANDC__)
; 84   :   typedef typename _SwapImplemented<_Tp>::_Ret _Implemented;
; 85   : #  else
; 86   :   enum { _Is = _SwapImplemented<_Tp>::_Is };
; 87   :   typedef typename __bool2type<_Is>::_Ret _Implemented;
; 88   : #  endif
; 89   :   _STLP_PRIV __swap_aux(__a, __b, _Implemented());
; 90   : #else
; 91   :   _Tp __tmp = __a;

	mov	edx, DWORD PTR [ecx]
	push	esi

; 92   :   __a = __b;

	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [ecx], esi

; 93   :   __b = __tmp;

	mov	DWORD PTR [eax], edx
	pop	esi

; 94   : #endif /* _STLP_USE_PARTIAL_SPEC_WORKAROUND */
; 95   : }

	ret	0
??$swap@PAVCEvent@@@stlp_std@@YAXAAPAVCEvent@@0@Z ENDP	; stlp_std::swap<CEvent *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_heap.c
_TEXT	ENDS
;	COMDAT ??$__adjust_heap@PAPAVCEvent@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@HHPAV1@P6A_N11@Z@Z
_TEXT	SEGMENT
___topIndex$ = 8					; size = 4
___len$ = 8						; size = 4
___val$ = 12						; size = 4
___comp$ = 16						; size = 4
??$__adjust_heap@PAPAVCEvent@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@HHPAV1@P6A_N11@Z@Z PROC ; stlp_std::__adjust_heap<CEvent * *,int,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>, COMDAT
; ___first$ = ecx
; ___holeIndex$ = eax

; 148  : {

	push	ebx
	push	ebp
	mov	ebp, DWORD PTR ___len$[esp+4]
	push	esi
	push	edi
	mov	edi, eax

; 149  :   _Distance __topIndex = __holeIndex;
; 150  :   _Distance __secondChild = 2 * __holeIndex + 2;

	lea	esi, DWORD PTR [edi+edi+2]

; 151  :   while (__secondChild < __len) {

	cmp	esi, ebp
	mov	ebx, ecx
	mov	DWORD PTR ___topIndex$[esp+12], edi
	jge	SHORT $LN9@adjust_hea
$LL4@adjust_hea:

; 152  :     if (__comp(*(__first + __secondChild), *(__first + (__secondChild - 1)))) {

	mov	eax, DWORD PTR [ebx+esi*4-4]
	mov	ecx, DWORD PTR [ebx+esi*4]
	push	eax
	push	ecx
	call	DWORD PTR ___comp$[esp+20]
	add	esp, 8
	test	al, al
	je	SHORT $LN2@adjust_hea

; 153  :       _STLP_VERBOSE_ASSERT(!__comp(*(__first + (__secondChild - 1)), *(__first + __secondChild)),
; 154  :                            _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 155  :       __secondChild--;

	sub	esi, 1
$LN2@adjust_hea:

; 156  :     }
; 157  :     *(__first + __holeIndex) = *(__first + __secondChild);

	mov	edx, DWORD PTR [ebx+esi*4]
	mov	DWORD PTR [ebx+edi*4], edx

; 158  :     __holeIndex = __secondChild;

	mov	edi, esi

; 159  :     __secondChild = 2 * (__secondChild + 1);

	lea	esi, DWORD PTR [esi+esi+2]
	cmp	esi, ebp
	jl	SHORT $LL4@adjust_hea
$LN9@adjust_hea:

; 160  :   }
; 161  :   if (__secondChild == __len) {

	jne	SHORT $LN1@adjust_hea

; 162  :     *(__first + __holeIndex) = *(__first + (__secondChild - 1));

	mov	eax, DWORD PTR [ebx+esi*4-4]
	mov	DWORD PTR [ebx+edi*4], eax

; 163  :     __holeIndex = __secondChild - 1;

	lea	edi, DWORD PTR [esi-1]
$LN1@adjust_hea:

; 164  :   }
; 165  :   __push_heap(__first, __holeIndex, __topIndex, __val, __comp);

	mov	ecx, DWORD PTR ___comp$[esp+12]
	mov	edx, DWORD PTR ___val$[esp+12]
	mov	eax, DWORD PTR ___topIndex$[esp+12]
	push	ecx
	push	edx
	push	eax
	mov	eax, edi
	call	??$__push_heap@PAPAVCEvent@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@HHPAV1@P6A_N11@Z@Z ; stlp_std::__push_heap<CEvent * *,int,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 166  : }

	ret	0
??$__adjust_heap@PAPAVCEvent@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@HHPAV1@P6A_N11@Z@Z ENDP ; stlp_std::__adjust_heap<CEvent * *,int,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__make_heap@PAPAVCEvent@@P6A_NPAV1@0@ZPAV1@H@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV1@1@Z0PAH@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 4
??$__make_heap@PAPAVCEvent@@P6A_NPAV1@0@ZPAV1@H@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV1@1@Z0PAH@Z PROC ; stlp_std::__make_heap<CEvent * *,bool (__cdecl*)(CEvent *,CEvent *),CEvent *,int>, COMDAT
; ___first$ = edi
; ___last$ = eax

; 218  : {

	push	ebx
	mov	ebx, eax

; 219  :   if (__last - __first < 2) return;
; 220  :   _Distance __len = __last - __first;

	sub	ebx, edi
	sar	ebx, 2
	push	ebp
	mov	ebp, DWORD PTR ___comp$[esp+4]

; 221  :   _Distance __parent = (__len - 2)/2;

	lea	eax, DWORD PTR [ebx-2]
	cdq
	push	esi
	sub	eax, edx
	mov	esi, eax
	sar	esi, 1

; 222  : 
; 223  :   for (;;) {
; 224  :     __adjust_heap(__first, __parent, __len, _Tp(*(__first + __parent)),
; 225  :                   __comp);

	mov	eax, DWORD PTR [edi+esi*4]
	push	ebp
	push	eax
	push	ebx
	mov	eax, esi
	mov	ecx, edi
	call	??$__adjust_heap@PAPAVCEvent@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@HHPAV1@P6A_N11@Z@Z ; stlp_std::__adjust_heap<CEvent * *,int,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
	add	esp, 12					; 0000000cH

; 226  :     if (__parent == 0) return;

	test	esi, esi
	je	SHORT $LN13@make_heap
	npad	2
$LL3@make_heap:

; 222  : 
; 223  :   for (;;) {
; 224  :     __adjust_heap(__first, __parent, __len, _Tp(*(__first + __parent)),
; 225  :                   __comp);

	mov	ecx, DWORD PTR [edi+esi*4-4]

; 227  :     __parent--;

	sub	esi, 1
	push	ebp
	push	ecx
	push	ebx
	mov	eax, esi
	mov	ecx, edi
	call	??$__adjust_heap@PAPAVCEvent@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@HHPAV1@P6A_N11@Z@Z ; stlp_std::__adjust_heap<CEvent * *,int,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
	add	esp, 12					; 0000000cH
	test	esi, esi
	jne	SHORT $LL3@make_heap
$LN13@make_heap:
	pop	esi
	pop	ebp
	pop	ebx

; 228  :   }
; 229  : }

	ret	0
??$__make_heap@PAPAVCEvent@@P6A_NPAV1@0@ZPAV1@H@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV1@1@Z0PAH@Z ENDP ; stlp_std::__make_heap<CEvent * *,bool (__cdecl*)(CEvent *,CEvent *),CEvent *,int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\type_traits.h
_TEXT	ENDS
;	COMDAT ?_Answer@?$_BothPtrType@PAPAVCEvent@@PAPAV1@@stlp_std@@SA?AU__true_type@2@XZ
_TEXT	SEGMENT
?_Answer@?$_BothPtrType@PAPAVCEvent@@PAPAV1@@stlp_std@@SA?AU__true_type@2@XZ PROC ; stlp_std::_BothPtrType<CEvent * *,CEvent * *>::_Answer, COMDAT

; 468  :   static _Ret _Answer() { return _Ret(); }

	xor	al, al
	ret	0
?_Answer@?$_BothPtrType@PAPAVCEvent@@PAPAV1@@stlp_std@@SA?AU__true_type@2@XZ ENDP ; stlp_std::_BothPtrType<CEvent * *,CEvent * *>::_Answer
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.c
_TEXT	ENDS
;	COMDAT ??$__unguarded_linear_insert@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@PAV2@P6A_N11@Z@Z
_TEXT	SEGMENT
??$__unguarded_linear_insert@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@PAV2@P6A_N11@Z@Z PROC ; stlp_std::priv::__unguarded_linear_insert<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>, COMDAT
; ___last$ = edx
; ___val$ = esi

; 897  :   _RandomAccessIter __next = __last;
; 898  :   --__next;
; 899  :   while (__comp(__val, *__next)) {

	mov	ecx, DWORD PTR [edx-4]
	lea	eax, DWORD PTR [edx-4]
	push	edi
	mov	edi, DWORD PTR [esi]
	cmp	edi, DWORD PTR [ecx]
	jae	SHORT $LN13@unguarded_@2
	npad	3
$LL2@unguarded_@2:

; 900  :     _STLP_VERBOSE_ASSERT(!__comp(*__next, __val), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 901  :     *__last = *__next;

	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax-4]
	mov	edi, DWORD PTR [esi]

; 902  :     __last = __next;

	mov	edx, eax

; 903  :     --__next;

	sub	eax, 4
	cmp	edi, DWORD PTR [ecx]
	jb	SHORT $LL2@unguarded_@2
$LN13@unguarded_@2:

; 904  :   }
; 905  :   *__last = __val;

	mov	DWORD PTR [edx], esi
	pop	edi

; 906  : }

	ret	0
??$__unguarded_linear_insert@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@PAV2@P6A_N11@Z@Z ENDP ; stlp_std::priv::__unguarded_linear_insert<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__iter_swap_aux@PAPAVCEvent@@PAPAV1@@priv@stlp_std@@YAXAAPAPAVCEvent@@0ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__iter_swap_aux@PAPAVCEvent@@PAPAV1@@priv@stlp_std@@YAXAAPAPAVCEvent@@0ABU__true_type@1@@Z PROC ; stlp_std::priv::__iter_swap_aux<CEvent * *,CEvent * *>, COMDAT
; ___i1$ = ecx
; ___i2$ = eax

; 108  :   swap(*__i1, *__i2);

	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	esi
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [eax], edx
	pop	esi

; 109  : }

	ret	0
??$__iter_swap_aux@PAPAVCEvent@@PAPAV1@@priv@stlp_std@@YAXAAPAPAVCEvent@@0ABU__true_type@1@@Z ENDP ; stlp_std::priv::__iter_swap_aux<CEvent * *,CEvent * *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\type_traits.h
_TEXT	ENDS
;	COMDAT ??$_IsOKToSwap@PAVCEvent@@PAV1@U__true_type@stlp_std@@U23@@stlp_std@@YA?AU?$_OKToSwap@PAVCEvent@@PAV1@U__true_type@stlp_std@@U23@@0@PAPAVCEvent@@0ABU__true_type@0@1@Z
_TEXT	SEGMENT
??$_IsOKToSwap@PAVCEvent@@PAV1@U__true_type@stlp_std@@U23@@stlp_std@@YA?AU?$_OKToSwap@PAVCEvent@@PAV1@U__true_type@stlp_std@@U23@@0@PAPAVCEvent@@0ABU__true_type@0@1@Z PROC ; stlp_std::_IsOKToSwap<CEvent *,CEvent *,stlp_std::__true_type,stlp_std::__true_type>, COMDAT

; 481  : { return _OKToSwap<_Tp1, _Tp2, _IsRef1, _IsRef2>(); }

	xor	al, al
	ret	0
??$_IsOKToSwap@PAVCEvent@@PAV1@U__true_type@stlp_std@@U23@@stlp_std@@YA?AU?$_OKToSwap@PAVCEvent@@PAV1@U__true_type@stlp_std@@U23@@0@PAPAVCEvent@@0ABU__true_type@0@1@Z ENDP ; stlp_std::_IsOKToSwap<CEvent *,CEvent *,stlp_std::__true_type,stlp_std::__true_type>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_heap.h
_TEXT	ENDS
;	COMDAT ??$__pop_heap@PAPAVCEvent@@PAV1@P6A_NPAV1@0@ZH@stlp_std@@YAXPAPAVCEvent@@00PAV1@P6A_N11@ZPAH@Z
_TEXT	SEGMENT
___val$ = 8						; size = 4
___comp$ = 12						; size = 4
??$__pop_heap@PAPAVCEvent@@PAV1@P6A_NPAV1@0@ZH@stlp_std@@YAXPAPAVCEvent@@00PAV1@P6A_N11@ZPAH@Z PROC ; stlp_std::__pop_heap<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *),int>, COMDAT
; ___first$ = ecx
; ___last$ = eax
; ___result$ = esi

; 78   :   *__result = *__first;

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [esi], edx

; 79   :   __adjust_heap(__first, _Distance(0), _Distance(__last - __first),
; 80   :                 __val, __comp);

	mov	edx, DWORD PTR ___comp$[esp-4]
	push	edx
	mov	edx, DWORD PTR ___val$[esp]
	sub	eax, ecx
	sar	eax, 2
	push	edx
	push	eax
	xor	eax, eax
	call	??$__adjust_heap@PAPAVCEvent@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@HHPAV1@P6A_N11@Z@Z ; stlp_std::__adjust_heap<CEvent * *,int,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
	add	esp, 12					; 0000000cH

; 81   : }

	ret	0
??$__pop_heap@PAPAVCEvent@@PAV1@P6A_NPAV1@0@ZH@stlp_std@@YAXPAPAVCEvent@@00PAV1@P6A_N11@ZPAH@Z ENDP ; stlp_std::__pop_heap<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *),int>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_heap.c
_TEXT	ENDS
;	COMDAT ??$make_heap@PAPAVCEvent@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV1@1@Z@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 4
??$make_heap@PAPAVCEvent@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV1@1@Z@Z PROC ; stlp_std::make_heap<CEvent * *,bool (__cdecl*)(CEvent *,CEvent *)>, COMDAT
; ___first$ = edi
; ___last$ = eax

; 235  : {

	push	ebx
	mov	ebx, eax

; 236  :   __make_heap(__first, __last, __comp,
; 237  :               _STLP_VALUE_TYPE(__first, _RandomAccessIterator), _STLP_DISTANCE_TYPE(__first, _RandomAccessIterator));

	sub	ebx, edi
	sar	ebx, 2
	cmp	ebx, 2
	push	ebp
	mov	ebp, DWORD PTR ___comp$[esp+4]
	jl	SHORT $LN11@make_heap@2
	lea	eax, DWORD PTR [ebx-2]
	cdq
	push	esi
	sub	eax, edx
	mov	esi, eax
	sar	esi, 1
	mov	eax, DWORD PTR [edi+esi*4]
	push	ebp
	push	eax
	push	ebx
	mov	eax, esi
	mov	ecx, edi
	call	??$__adjust_heap@PAPAVCEvent@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@HHPAV1@P6A_N11@Z@Z ; stlp_std::__adjust_heap<CEvent * *,int,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
	add	esp, 12					; 0000000cH
	test	esi, esi
	je	SHORT $LN13@make_heap@2
$LL5@make_heap@2:
	mov	ecx, DWORD PTR [edi+esi*4-4]
	sub	esi, 1
	push	ebp
	push	ecx
	push	ebx
	mov	eax, esi
	mov	ecx, edi
	call	??$__adjust_heap@PAPAVCEvent@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@HHPAV1@P6A_N11@Z@Z ; stlp_std::__adjust_heap<CEvent * *,int,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
	add	esp, 12					; 0000000cH
	test	esi, esi
	jne	SHORT $LL5@make_heap@2
$LN13@make_heap@2:
	pop	esi
$LN11@make_heap@2:
	pop	ebp
	pop	ebx

; 238  : }

	ret	0
??$make_heap@PAPAVCEvent@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV1@1@Z@Z ENDP ; stlp_std::make_heap<CEvent * *,bool (__cdecl*)(CEvent *,CEvent *)>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\type_traits.h
_TEXT	ENDS
;	COMDAT ?_Answer@?$_OKToSwap@PAVCEvent@@PAV1@U__true_type@stlp_std@@U23@@stlp_std@@SA?AU__true_type@2@XZ
_TEXT	SEGMENT
?_Answer@?$_OKToSwap@PAVCEvent@@PAV1@U__true_type@stlp_std@@U23@@stlp_std@@SA?AU__true_type@2@XZ PROC ; stlp_std::_OKToSwap<CEvent *,CEvent *,stlp_std::__true_type,stlp_std::__true_type>::_Answer, COMDAT

; 475  :   static _Type _Answer() { return _Type(); }

	xor	al, al
	ret	0
?_Answer@?$_OKToSwap@PAVCEvent@@PAV1@U__true_type@stlp_std@@U23@@stlp_std@@SA?AU__true_type@2@XZ ENDP ; stlp_std::_OKToSwap<CEvent *,CEvent *,stlp_std::__true_type,stlp_std::__true_type>::_Answer
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Ret@?$_IsRefType@AAPAVCEvent@@@stlp_std@@SA?AU__true_type@2@XZ
_TEXT	SEGMENT
?_Ret@?$_IsRefType@AAPAVCEvent@@@stlp_std@@SA?AU__true_type@2@XZ PROC ; stlp_std::_IsRefType<CEvent * &>::_Ret, COMDAT

; 443  :   static _Type _Ret() { return _Type();}

	xor	al, al
	ret	0
?_Ret@?$_IsRefType@AAPAVCEvent@@@stlp_std@@SA?AU__true_type@2@XZ ENDP ; stlp_std::_IsRefType<CEvent * &>::_Ret
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.c
_TEXT	ENDS
;	COMDAT ??$__unguarded_insertion_sort_aux@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@00P6A_NPAV2@1@Z@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$__unguarded_insertion_sort_aux@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@00P6A_NPAV2@1@Z@Z PROC ; stlp_std::priv::__unguarded_insertion_sort_aux<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>, COMDAT

; 934  :                                     _Tp*, _Compare __comp) {

	push	ebp
	mov	ebp, DWORD PTR ___first$[esp]

; 935  :   for (_RandomAccessIter __i = __first; __i != __last; ++__i)

	cmp	ebp, DWORD PTR ___last$[esp]
	je	SHORT $LN1@unguarded_@3
	push	ebx
	push	esi
	push	edi
	npad	2
$LL3@unguarded_@3:

; 936  :     __unguarded_linear_insert<_RandomAccessIter, _Tp, _Compare>(__i, *__i, __comp);

	mov	eax, DWORD PTR [ebp-4]
	mov	ebx, DWORD PTR [ebp]
	lea	esi, DWORD PTR [ebp-4]
	push	eax
	push	ebx
	mov	edi, ebp
	call	?ev_sort@@YA_NPAVCEvent@@0@Z		; ev_sort
	add	esp, 8
	test	al, al
	je	SHORT $LN6@unguarded_@3
	npad	7
$LL7@unguarded_@3:
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
	mov	edx, DWORD PTR [esi-4]
	mov	edi, esi
	sub	esi, 4
	push	edx
	push	ebx
	call	?ev_sort@@YA_NPAVCEvent@@0@Z		; ev_sort
	add	esp, 8
	test	al, al
	jne	SHORT $LL7@unguarded_@3
$LN6@unguarded_@3:
	add	ebp, 4
	cmp	ebp, DWORD PTR ___last$[esp+12]
	mov	DWORD PTR [edi], ebx
	jne	SHORT $LL3@unguarded_@3
	pop	edi
	pop	esi
	pop	ebx
$LN1@unguarded_@3:
	pop	ebp

; 937  : }

	ret	0
??$__unguarded_insertion_sort_aux@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@00P6A_NPAV2@1@Z@Z ENDP ; stlp_std::priv::__unguarded_insertion_sort_aux<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$iter_swap@PAPAVCEvent@@PAPAV1@@stlp_std@@YAXPAPAVCEvent@@0@Z
_TEXT	SEGMENT
??$iter_swap@PAPAVCEvent@@PAPAV1@@stlp_std@@YAXPAPAVCEvent@@0@Z PROC ; stlp_std::iter_swap<CEvent * *,CEvent * *>, COMDAT
; ___i1$ = ecx
; ___i2$ = eax

; 120  :   // swap(*__i1, *__i2);
; 121  :   _STLP_PRIV __iter_swap_aux( __i1, __i2, _IsOKToSwap(_STLP_VALUE_TYPE(__i1, _ForwardIter1), _STLP_VALUE_TYPE(__i2, _ForwardIter2),
; 122  :                                                       _STLP_IS_REF_TYPE_REAL_REF(__i1, _ForwardIter1),
; 123  :                                                       _STLP_IS_REF_TYPE_REAL_REF(__i2, _ForwardIter2))._Answer());

	mov	edx, DWORD PTR [ecx]
	push	esi
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [eax], edx
	pop	esi

; 124  : }

	ret	0
??$iter_swap@PAPAVCEvent@@PAPAV1@@stlp_std@@YAXPAPAVCEvent@@0@Z ENDP ; stlp_std::iter_swap<CEvent * *,CEvent * *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.c
_TEXT	ENDS
;	COMDAT ??$__unguarded_insertion_sort@PAPAVCEvent@@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV2@1@Z@Z
_TEXT	SEGMENT
??$__unguarded_insertion_sort@PAPAVCEvent@@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV2@1@Z@Z PROC ; stlp_std::priv::__unguarded_insertion_sort<CEvent * *,bool (__cdecl*)(CEvent *,CEvent *)>, COMDAT
; ___first$ = ecx
; ___last$ = eax

; 943  :   __unguarded_insertion_sort_aux(__first, __last, _STLP_VALUE_TYPE(__first, _RandomAccessIter), __comp);

	push	eax
	push	ecx
	call	??$__unguarded_insertion_sort_aux@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@00P6A_NPAV2@1@Z@Z ; stlp_std::priv::__unguarded_insertion_sort_aux<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
	add	esp, 8

; 944  : }

	ret	0
??$__unguarded_insertion_sort@PAPAVCEvent@@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV2@1@Z@Z ENDP ; stlp_std::priv::__unguarded_insertion_sort<CEvent * *,bool (__cdecl*)(CEvent *,CEvent *)>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__unguarded_partition@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAPAPAVCEvent@@PAPAV2@0PAV2@P6A_N11@Z@Z
_TEXT	SEGMENT
___pivot$ = 8						; size = 4
??$__unguarded_partition@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAPAPAVCEvent@@PAPAV2@0PAV2@P6A_N11@Z@Z PROC ; stlp_std::priv::__unguarded_partition<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>, COMDAT
; ___first$ = ecx
; ___last$ = eax
; ___comp$ = ebx

; 873  :                                         _Tp __pivot, _Compare __comp) {

	push	ebp
	mov	ebp, DWORD PTR ___pivot$[esp]
	push	esi
	push	edi
	mov	esi, eax
	mov	edi, ecx
	npad	5
$LL7@unguarded_@4:

; 874  :   for (;;) {
; 875  :     while (__comp(*__first, __pivot)) {

	mov	eax, DWORD PTR [edi]
	push	ebp
	push	eax
	call	ebx
	add	esp, 8
	test	al, al
	je	SHORT $LN4@unguarded_@4
	npad	3
$LL5@unguarded_@4:
	mov	ecx, DWORD PTR [edi+4]

; 876  :       _STLP_VERBOSE_ASSERT(!__comp(__pivot, *__first), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 877  :       ++__first;

	add	edi, 4
	push	ebp
	push	ecx
	call	ebx
	add	esp, 8
	test	al, al
	jne	SHORT $LL5@unguarded_@4
$LN4@unguarded_@4:

; 878  :     }
; 879  :     --__last;
; 880  :     while (__comp(__pivot, *__last)) {

	mov	edx, DWORD PTR [esi-4]
	sub	esi, 4
	push	edx
	push	ebp
	call	ebx
	add	esp, 8
	test	al, al
	je	SHORT $LN2@unguarded_@4
$LL3@unguarded_@4:
	mov	eax, DWORD PTR [esi-4]

; 881  :       _STLP_VERBOSE_ASSERT(!__comp(*__last, __pivot), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 882  :       --__last;

	sub	esi, 4
	push	eax
	push	ebp
	call	ebx
	add	esp, 8
	test	al, al
	jne	SHORT $LL3@unguarded_@4
$LN2@unguarded_@4:

; 883  :     }
; 884  :     if (!(__first < __last))

	cmp	edi, esi
	jae	SHORT $LN31@unguarded_@4

; 886  :     iter_swap(__first, __last);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
	mov	DWORD PTR [esi], eax

; 887  :     ++__first;

	add	edi, 4

; 888  :   }

	jmp	SHORT $LL7@unguarded_@4
$LN31@unguarded_@4:

; 885  :       return __first;

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp

; 889  : }

	ret	0
??$__unguarded_partition@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAPAPAVCEvent@@PAPAV2@0PAV2@P6A_N11@Z@Z ENDP ; stlp_std::priv::__unguarded_partition<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__median@PAVCEvent@@P6A_NPAV1@0@Z@priv@stlp_std@@YAABQAVCEvent@@ABQAV2@00P6A_NPAV2@1@Z@Z
_TEXT	SEGMENT
___a$ = 8						; size = 4
??$__median@PAVCEvent@@P6A_NPAV1@0@Z@priv@stlp_std@@YAABQAVCEvent@@ABQAV2@00P6A_NPAV2@1@Z@Z PROC ; stlp_std::priv::__median<CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>, COMDAT
; ___b$ = ebx
; ___c$ = edi
; ___comp$ = esi

; 84   :   if (__comp(__a, __b)) {

	mov	eax, DWORD PTR [ebx]
	push	ebp
	mov	ebp, DWORD PTR ___a$[esp]
	mov	ecx, DWORD PTR [ebp]
	push	eax
	push	ecx
	call	esi
	add	esp, 8
	test	al, al
	je	SHORT $LN10@median@2

; 85   :     _STLP_VERBOSE_ASSERT(!__comp(__b, __a), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 86   :     if (__comp(__b, __c)) {

	mov	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR [ebx]
	push	edx
	push	eax
	call	esi
	add	esp, 8
	test	al, al

; 87   :       _STLP_VERBOSE_ASSERT(!__comp(__c, __b), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 88   :       return __b;

	jne	SHORT $LN2@median@2

; 89   :     }
; 90   :     else if (__comp(__a, __c)) {

	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR [ebp]
	push	ecx
	push	edx
	call	esi
	add	esp, 8
	test	al, al
	je	SHORT $LN7@median@2

; 91   :       _STLP_VERBOSE_ASSERT(!__comp(__c, __a), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 92   :       return __c;

	mov	eax, edi
	pop	ebp

; 107  : }

	ret	0
$LN7@median@2:

; 93   :     }
; 94   :     else
; 95   :       return __a;

	mov	eax, ebp
	pop	ebp

; 107  : }

	ret	0
$LN10@median@2:

; 96   :   }
; 97   :   else if (__comp(__a, __c)) {

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [ebp]
	push	eax
	push	ecx
	call	esi
	add	esp, 8
	test	al, al

; 98   :     _STLP_VERBOSE_ASSERT(!__comp(__c, __a), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 99   :     return __a;

	jne	SHORT $LN7@median@2

; 100  :   }
; 101  :   else if (__comp(__b, __c)) {

	mov	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR [ebx]
	push	edx
	push	eax
	call	esi
	add	esp, 8
	test	al, al

; 102  :     _STLP_VERBOSE_ASSERT(!__comp(__c, __b), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 103  :     return __c;

	mov	eax, edi
	jne	SHORT $LN1@median@2
$LN2@median@2:

; 104  :   }
; 105  :   else
; 106  :     return __b;

	mov	eax, ebx
$LN1@median@2:
	pop	ebp

; 107  : }

	ret	0
??$__median@PAVCEvent@@P6A_NPAV1@0@Z@priv@stlp_std@@YAABQAVCEvent@@ABQAV2@00P6A_NPAV2@1@Z@Z ENDP ; stlp_std::priv::__median<CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.c
_TEXT	ENDS
;	COMDAT ??$__find@PAPAVCEvent@@PAV1@@priv@stlp_std@@YAPAPAVCEvent@@PAPAV2@0ABQAV2@ABUrandom_access_iterator_tag@1@@Z
_TEXT	SEGMENT
??$__find@PAPAVCEvent@@PAV1@@priv@stlp_std@@YAPAPAVCEvent@@PAPAV2@0ABQAV2@ABUrandom_access_iterator_tag@1@@Z PROC ; stlp_std::priv::__find<CEvent * *,CEvent *>, COMDAT
; ___first$ = eax
; ___last$ = esi
; ___val$ = edi

; 108  :   _STLP_DIFFERENCE_TYPE(_RandomAccessIter) __trip_count = (__last - __first) >> 2;

	mov	ecx, esi
	sub	ecx, eax
	sar	ecx, 4

; 109  : 
; 110  :   for ( ; __trip_count > 0 ; --__trip_count) {

	test	ecx, ecx
	jle	SHORT $LN14@find
	mov	edx, DWORD PTR [edi]
	npad	3
$LL16@find:

; 111  :     if (*__first == __val) return __first;

	cmp	DWORD PTR [eax], edx
	je	SHORT $LN8@find

; 112  :     ++__first;

	add	eax, 4

; 113  : 
; 114  :     if (*__first == __val) return __first;

	cmp	DWORD PTR [eax], edx
	je	SHORT $LN8@find

; 115  :     ++__first;

	add	eax, 4

; 116  : 
; 117  :     if (*__first == __val) return __first;

	cmp	DWORD PTR [eax], edx
	je	SHORT $LN8@find

; 118  :     ++__first;

	add	eax, 4

; 119  : 
; 120  :     if (*__first == __val) return __first;

	cmp	DWORD PTR [eax], edx
	je	SHORT $LN8@find
	sub	ecx, 1

; 121  :     ++__first;

	add	eax, 4
	test	ecx, ecx
	jg	SHORT $LL16@find
$LN14@find:

; 122  :   }
; 123  : 
; 124  :   switch (__last - __first) {

	mov	ecx, esi
	sub	ecx, eax
	sar	ecx, 2
	sub	ecx, 1
	je	SHORT $LN3@find
	sub	ecx, 1
	je	SHORT $LN5@find
	sub	ecx, 1
	jne	SHORT $LN2@find

; 125  :   case 3:
; 126  :     if (*__first == __val) return __first;

	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR [edi]
	je	SHORT $LN8@find

; 127  :     ++__first;

	add	eax, 4
$LN5@find:

; 128  :   case 2:
; 129  :     if (*__first == __val) return __first;

	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [edi]
	je	SHORT $LN8@find

; 130  :     ++__first;

	add	eax, 4
$LN3@find:

; 131  :   case 1:
; 132  :     if (*__first == __val) return __first;

	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR [edi]
	je	SHORT $LN8@find
$LN2@find:

; 133  :     //++__first;
; 134  :   case 0:
; 135  :   default:
; 136  :     return __last;

	mov	eax, esi
$LN8@find:

; 137  :   }
; 138  : }

	ret	0
??$__find@PAPAVCEvent@@PAV1@@priv@stlp_std@@YAPAPAVCEvent@@PAPAV2@0ABQAV2@ABUrandom_access_iterator_tag@1@@Z ENDP ; stlp_std::priv::__find<CEvent * *,CEvent *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__find@PAPAVIEventReceiver@@PAV1@@priv@stlp_std@@YAPAPAVIEventReceiver@@PAPAV2@0ABQAV2@ABUrandom_access_iterator_tag@1@@Z
_TEXT	SEGMENT
??$__find@PAPAVIEventReceiver@@PAV1@@priv@stlp_std@@YAPAPAVIEventReceiver@@PAPAV2@0ABQAV2@ABUrandom_access_iterator_tag@1@@Z PROC ; stlp_std::priv::__find<IEventReceiver * *,IEventReceiver *>, COMDAT
; ___first$ = eax
; ___last$ = esi
; ___val$ = edi

; 108  :   _STLP_DIFFERENCE_TYPE(_RandomAccessIter) __trip_count = (__last - __first) >> 2;

	mov	ecx, esi
	sub	ecx, eax
	sar	ecx, 4

; 109  : 
; 110  :   for ( ; __trip_count > 0 ; --__trip_count) {

	test	ecx, ecx
	jle	SHORT $LN14@find@2
	mov	edx, DWORD PTR [edi]
	npad	3
$LL16@find@2:

; 111  :     if (*__first == __val) return __first;

	cmp	DWORD PTR [eax], edx
	je	SHORT $LN8@find@2

; 112  :     ++__first;

	add	eax, 4

; 113  : 
; 114  :     if (*__first == __val) return __first;

	cmp	DWORD PTR [eax], edx
	je	SHORT $LN8@find@2

; 115  :     ++__first;

	add	eax, 4

; 116  : 
; 117  :     if (*__first == __val) return __first;

	cmp	DWORD PTR [eax], edx
	je	SHORT $LN8@find@2

; 118  :     ++__first;

	add	eax, 4

; 119  : 
; 120  :     if (*__first == __val) return __first;

	cmp	DWORD PTR [eax], edx
	je	SHORT $LN8@find@2
	sub	ecx, 1

; 121  :     ++__first;

	add	eax, 4
	test	ecx, ecx
	jg	SHORT $LL16@find@2
$LN14@find@2:

; 122  :   }
; 123  : 
; 124  :   switch (__last - __first) {

	mov	ecx, esi
	sub	ecx, eax
	sar	ecx, 2
	sub	ecx, 1
	je	SHORT $LN3@find@2
	sub	ecx, 1
	je	SHORT $LN5@find@2
	sub	ecx, 1
	jne	SHORT $LN2@find@2

; 125  :   case 3:
; 126  :     if (*__first == __val) return __first;

	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR [edi]
	je	SHORT $LN8@find@2

; 127  :     ++__first;

	add	eax, 4
$LN5@find@2:

; 128  :   case 2:
; 129  :     if (*__first == __val) return __first;

	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [edi]
	je	SHORT $LN8@find@2

; 130  :     ++__first;

	add	eax, 4
$LN3@find@2:

; 131  :   case 1:
; 132  :     if (*__first == __val) return __first;

	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR [edi]
	je	SHORT $LN8@find@2
$LN2@find@2:

; 133  :     //++__first;
; 134  :   case 0:
; 135  :   default:
; 136  :     return __last;

	mov	eax, esi
$LN8@find@2:

; 137  :   }
; 138  : }

	ret	0
??$__find@PAPAVIEventReceiver@@PAV1@@priv@stlp_std@@YAPAPAVIEventReceiver@@PAPAV2@0ABQAV2@ABUrandom_access_iterator_tag@1@@Z ENDP ; stlp_std::priv::__find<IEventReceiver * *,IEventReceiver *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__fill_n@PAUDeferred@CEventAPI@@IU12@@priv@stlp_std@@YAPAUDeferred@CEventAPI@@PAU23@IABU23@@Z
_TEXT	SEGMENT
??$__fill_n@PAUDeferred@CEventAPI@@IU12@@priv@stlp_std@@YAPAUDeferred@CEventAPI@@PAU23@IABU23@@Z PROC ; stlp_std::priv::__fill_n<CEventAPI::Deferred *,unsigned int,CEventAPI::Deferred>, COMDAT
; ___first$ = eax
; ___n$ = edx
; ___val$ = ecx

; 403  :   _STLP_FIX_LITERAL_BUG(__first)
; 404  :   for ( ; __n > 0; --__n, ++__first)

	test	edx, edx
	jbe	SHORT $LN1@fill_n@3
	push	esi
$LL3@fill_n@3:

; 405  :     *__first = __val;

	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	mov	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], esi
	mov	esi, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], esi
	mov	esi, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], esi
	mov	esi, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], esi
	sub	edx, 1
	add	eax, 24					; 00000018H
	test	edx, edx
	ja	SHORT $LL3@fill_n@3
	pop	esi
$LN1@fill_n@3:

; 406  :   return __first;
; 407  : }

	ret	0
??$__fill_n@PAUDeferred@CEventAPI@@IU12@@priv@stlp_std@@YAPAUDeferred@CEventAPI@@PAU23@IABU23@@Z ENDP ; stlp_std::priv::__fill_n<CEventAPI::Deferred *,unsigned int,CEventAPI::Deferred>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?_M_set@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@AAEXPAUDeferred@CEventAPI@@00@Z
_TEXT	SEGMENT
___e$ = 8						; size = 4
?_M_set@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@AAEXPAUDeferred@CEventAPI@@00@Z PROC ; stlp_std::priv::_Impl_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::_M_set, COMDAT
; _this$ = eax
; ___s$ = ecx
; ___f$ = edx

; 626  :     this->_M_start = __s;

	mov	DWORD PTR [eax], ecx

; 627  :     this->_M_finish = __f;
; 628  :     this->_M_end_of_storage._M_data = __e;

	mov	ecx, DWORD PTR ___e$[esp-4]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx

; 629  :   }

	ret	4
?_M_set@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@AAEXPAUDeferred@CEventAPI@@00@Z ENDP ; stlp_std::priv::_Impl_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::_M_set
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??$?0PAVIEventReceiver@@@?$xalloc@PAX@@QAE@ABV?$xalloc@PAVIEventReceiver@@@@@Z
_TEXT	SEGMENT
??$?0PAVIEventReceiver@@@?$xalloc@PAX@@QAE@ABV?$xalloc@PAVIEventReceiver@@@@@Z PROC ; xalloc<void *>::xalloc<void *><IEventReceiver *>, COMDAT
; _this$ = eax

; 79   : 	template<class _Other>							xalloc			(const xalloc<_Other>&)					{	}

	ret	0
??$?0PAVIEventReceiver@@@?$xalloc@PAX@@QAE@ABV?$xalloc@PAVIEventReceiver@@@@@Z ENDP ; xalloc<void *>::xalloc<void *><IEventReceiver *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.c
_TEXT	ENDS
;	COMDAT ??$find@PAPAVCEvent@@PAV1@@stlp_std@@YAPAPAVCEvent@@PAPAV1@0ABQAV1@@Z
_TEXT	SEGMENT
??$find@PAPAVCEvent@@PAV1@@stlp_std@@YAPAPAVCEvent@@PAPAV1@0ABQAV1@@Z PROC ; stlp_std::find<CEvent * *,CEvent *>, COMDAT
; ___first$ = eax
; ___last$ = esi
; ___val$ = edi

; 215  :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__first, __last))
; 216  :   return _STLP_PRIV __find(__first, __last, __val, _STLP_ITERATOR_CATEGORY(__first, _InputIter));

	jmp	??$__find@PAPAVCEvent@@PAV1@@priv@stlp_std@@YAPAPAVCEvent@@PAPAV2@0ABQAV2@ABUrandom_access_iterator_tag@1@@Z ; stlp_std::priv::__find<CEvent * *,CEvent *>
??$find@PAPAVCEvent@@PAV1@@stlp_std@@YAPAPAVCEvent@@PAPAV1@0ABQAV1@@Z ENDP ; stlp_std::find<CEvent * *,CEvent *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$find@PAPAVIEventReceiver@@PAV1@@stlp_std@@YAPAPAVIEventReceiver@@PAPAV1@0ABQAV1@@Z
_TEXT	SEGMENT
??$find@PAPAVIEventReceiver@@PAV1@@stlp_std@@YAPAPAVIEventReceiver@@PAPAV1@0ABQAV1@@Z PROC ; stlp_std::find<IEventReceiver * *,IEventReceiver *>, COMDAT
; ___first$ = eax
; ___last$ = esi
; ___val$ = edi

; 215  :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__first, __last))
; 216  :   return _STLP_PRIV __find(__first, __last, __val, _STLP_ITERATOR_CATEGORY(__first, _InputIter));

	jmp	??$__find@PAPAVIEventReceiver@@PAV1@@priv@stlp_std@@YAPAPAVIEventReceiver@@PAPAV2@0ABQAV2@ABUrandom_access_iterator_tag@1@@Z ; stlp_std::priv::__find<IEventReceiver * *,IEventReceiver *>
??$find@PAPAVIEventReceiver@@PAV1@@stlp_std@@YAPAPAVIEventReceiver@@PAPAV1@0ABQAV1@@Z ENDP ; stlp_std::find<IEventReceiver * *,IEventReceiver *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_tools.h
_TEXT	ENDS
;	COMDAT ?to_value_type_ptr@?$_CastTraits@UDeferred@CEventAPI@@U12@@priv@stlp_std@@SAPAUDeferred@CEventAPI@@PAU45@@Z
_TEXT	SEGMENT
?to_value_type_ptr@?$_CastTraits@UDeferred@CEventAPI@@U12@@priv@stlp_std@@SAPAUDeferred@CEventAPI@@PAU45@@Z PROC ; stlp_std::priv::_CastTraits<CEventAPI::Deferred,CEventAPI::Deferred>::to_value_type_ptr, COMDAT
; ___ptr$ = eax

; 237  :   { return __ptr; }

	ret	0
?to_value_type_ptr@?$_CastTraits@UDeferred@CEventAPI@@U12@@priv@stlp_std@@SAPAUDeferred@CEventAPI@@PAU45@@Z ENDP ; stlp_std::priv::_CastTraits<CEventAPI::Deferred,CEventAPI::Deferred>::to_value_type_ptr
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_storage_type_cref@?$_CastTraits@UDeferred@CEventAPI@@U12@@priv@stlp_std@@SAABUDeferred@CEventAPI@@ABU45@@Z
_TEXT	SEGMENT
?to_storage_type_cref@?$_CastTraits@UDeferred@CEventAPI@@U12@@priv@stlp_std@@SAABUDeferred@CEventAPI@@ABU45@@Z PROC ; stlp_std::priv::_CastTraits<CEventAPI::Deferred,CEventAPI::Deferred>::to_storage_type_cref, COMDAT
; ___ref$ = eax

; 254  :   { return __ref; }

	ret	0
?to_storage_type_cref@?$_CastTraits@UDeferred@CEventAPI@@U12@@priv@stlp_std@@SAABUDeferred@CEventAPI@@ABU45@@Z ENDP ; stlp_std::priv::_CastTraits<CEventAPI::Deferred,CEventAPI::Deferred>::to_storage_type_cref
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_value_type_ref@?$_CastTraits@UDeferred@CEventAPI@@U12@@priv@stlp_std@@SAAAUDeferred@CEventAPI@@AAU45@@Z
_TEXT	SEGMENT
?to_value_type_ref@?$_CastTraits@UDeferred@CEventAPI@@U12@@priv@stlp_std@@SAAAUDeferred@CEventAPI@@AAU45@@Z PROC ; stlp_std::priv::_CastTraits<CEventAPI::Deferred,CEventAPI::Deferred>::to_value_type_ref, COMDAT
; ___ref$ = eax

; 243  :   { return __ref; }

	ret	0
?to_value_type_ref@?$_CastTraits@UDeferred@CEventAPI@@U12@@priv@stlp_std@@SAAAUDeferred@CEventAPI@@AAU45@@Z ENDP ; stlp_std::priv::_CastTraits<CEventAPI::Deferred,CEventAPI::Deferred>::to_value_type_ref
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xalloc@PAVIEventReceiver@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xalloc@PAVIEventReceiver@@@@QAE@XZ PROC		; xalloc<IEventReceiver *>::xalloc<IEventReceiver *>, COMDAT
; _this$ = eax

; 77   : 													xalloc			()										{	}

	ret	0
??0?$xalloc@PAVIEventReceiver@@@@QAE@XZ ENDP		; xalloc<IEventReceiver *>::xalloc<IEventReceiver *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?empty@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@QBE_NXZ PROC ; stlp_std::priv::_Impl_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::empty, COMDAT
; _this$ = eax

; 188  :   bool empty() const            { return this->_M_start == this->_M_finish; }

	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	sete	dl
	mov	al, dl
	ret	0
?empty@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@QBE_NXZ ENDP ; stlp_std::priv::_Impl_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::empty
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?empty@?$vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@stlp_std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@stlp_std@@QBE_NXZ PROC ; stlp_std::vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::empty, COMDAT
; _this$ = eax

; 93   :   bool empty() const            { return _M_impl.empty(); }

	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	sete	dl
	mov	al, dl
	ret	0
?empty@?$vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@stlp_std@@QBE_NXZ ENDP ; stlp_std::vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::empty
_TEXT	ENDS
PUBLIC	?Equal@CEvent@@QAEHAAV1@@Z			; CEvent::Equal
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\eventapi.cpp
;	COMDAT ?Equal@CEvent@@QAEHAAV1@@Z
_TEXT	SEGMENT
_E$ = 8							; size = 4
?Equal@CEvent@@QAEHAAV1@@Z PROC				; CEvent::Equal, COMDAT
; _this$ = ecx

; 26   : 	{ return stricmp(Name,E.Name)==0; }

	mov	eax, DWORD PTR _E$[esp-4]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	push	edx
	push	eax
	call	DWORD PTR __imp__stricmp
	add	esp, 8
	neg	eax
	sbb	eax, eax
	add	eax, 1
	ret	4
?Equal@CEvent@@QAEHAAV1@@Z ENDP				; CEvent::Equal
_TEXT	ENDS
PUBLIC	?RefCount@CEvent@@QAEIXZ			; CEvent::RefCount
; Function compile flags: /Ogtpy
;	COMDAT ?RefCount@CEvent@@QAEIXZ
_TEXT	SEGMENT
?RefCount@CEvent@@QAEIXZ PROC				; CEvent::RefCount, COMDAT
; _this$ = ecx

; 23   : 	{	return dwRefCount; }

	mov	eax, DWORD PTR [ecx+16]
	ret	0
?RefCount@CEvent@@QAEIXZ ENDP				; CEvent::RefCount
_TEXT	ENDS
PUBLIC	?GetFull@CEvent@@QAEPBDXZ			; CEvent::GetFull
; Function compile flags: /Ogtpy
;	COMDAT ?GetFull@CEvent@@QAEPBDXZ
_TEXT	SEGMENT
?GetFull@CEvent@@QAEPBDXZ PROC				; CEvent::GetFull, COMDAT
; _this$ = ecx

; 21   : 	{	return Name; }

	mov	eax, DWORD PTR [ecx]
	ret	0
?GetFull@CEvent@@QAEPBDXZ ENDP				; CEvent::GetFull
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
;	COMDAT ??$__copy_backward_ptrs@PAPAVCEvent@@PAPAV1@@priv@stlp_std@@YAPAPAVCEvent@@PAPAV2@00ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__copy_backward_ptrs@PAPAVCEvent@@PAPAV1@@priv@stlp_std@@YAPAPAVCEvent@@PAPAV2@00ABU__true_type@1@@Z PROC ; stlp_std::priv::__copy_backward_ptrs<CEvent * *,CEvent * *>, COMDAT
; ___first$ = edx
; ___last$ = ecx
; ___result$ = eax

; 294  :   return (_OutputIter)__copy_trivial_backward(__first, __last, __result);

	sub	ecx, edx
	test	ecx, ecx
	jle	SHORT $LN6@copy_backw@15
	push	ecx
	push	edx
	sub	eax, ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN6@copy_backw@15:

; 295  : }

	ret	0
??$__copy_backward_ptrs@PAPAVCEvent@@PAPAV1@@priv@stlp_std@@YAPAPAVCEvent@@PAPAV2@00ABU__true_type@1@@Z ENDP ; stlp_std::priv::__copy_backward_ptrs<CEvent * *,CEvent * *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_heap.c
_TEXT	ENDS
;	COMDAT ??$__pop_heap_aux@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@00P6A_NPAV1@1@Z@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 4
??$__pop_heap_aux@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@00P6A_NPAV1@1@Z@Z PROC ; stlp_std::__pop_heap_aux<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>, COMDAT
; ___first$ = ecx
; ___last$ = eax

; 174  :   __pop_heap(__first, __last - 1, __last - 1, _Tp(*(__last - 1)), __comp,
; 175  :              _STLP_DISTANCE_TYPE(__first, _RandomAccessIterator));

	mov	edx, DWORD PTR [eax-4]
	push	esi
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax-4], esi
	mov	esi, DWORD PTR ___comp$[esp]
	sub	eax, ecx
	sub	eax, 4
	push	esi
	sar	eax, 2
	push	edx
	push	eax
	xor	eax, eax
	call	??$__adjust_heap@PAPAVCEvent@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@HHPAV1@P6A_N11@Z@Z ; stlp_std::__adjust_heap<CEvent * *,int,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
	add	esp, 12					; 0000000cH
	pop	esi

; 176  : }

	ret	0
??$__pop_heap_aux@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@00P6A_NPAV1@1@Z@Z ENDP ; stlp_std::__pop_heap_aux<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__copy_backward_aux@PAPAVCEvent@@PAPAV1@@priv@stlp_std@@YAPAPAVCEvent@@PAPAV2@00ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__copy_backward_aux@PAPAVCEvent@@PAPAV1@@priv@stlp_std@@YAPAPAVCEvent@@PAPAV2@00ABU__true_type@1@@Z PROC ; stlp_std::priv::__copy_backward_aux<CEvent * *,CEvent * *>, COMDAT
; ___first$ = edx
; ___last$ = ecx
; ___result$ = eax

; 304  :   return __copy_backward_ptrs(__first, __last, __result,
; 305  :                               _UseTrivialCopy(_STLP_VALUE_TYPE(__first, _InputIter),
; 306  :                                               _STLP_VALUE_TYPE(__result, _OutputIter))._Answer());

	sub	ecx, edx
	test	ecx, ecx
	jle	SHORT $LN12@copy_backw@16
	push	ecx
	push	edx
	sub	eax, ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN12@copy_backw@16:

; 307  : }

	ret	0
??$__copy_backward_aux@PAPAVCEvent@@PAPAV1@@priv@stlp_std@@YAPAPAVCEvent@@PAPAV2@00ABU__true_type@1@@Z ENDP ; stlp_std::priv::__copy_backward_aux<CEvent * *,CEvent * *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_heap.c
_TEXT	ENDS
;	COMDAT ??$pop_heap@PAPAVCEvent@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV1@1@Z@Z
_TEXT	SEGMENT
___comp$ = 8						; size = 4
??$pop_heap@PAPAVCEvent@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV1@1@Z@Z PROC ; stlp_std::pop_heap<CEvent * *,bool (__cdecl*)(CEvent *,CEvent *)>, COMDAT
; ___first$ = ecx
; ___last$ = eax

; 184  :     __pop_heap_aux(__first, __last, _STLP_VALUE_TYPE(__first, _RandomAccessIterator), __comp);

	mov	edx, DWORD PTR [eax-4]
	push	esi
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax-4], esi
	mov	esi, DWORD PTR ___comp$[esp]
	sub	eax, ecx
	sub	eax, 4
	push	esi
	sar	eax, 2
	push	edx
	push	eax
	xor	eax, eax
	call	??$__adjust_heap@PAPAVCEvent@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@HHPAV1@P6A_N11@Z@Z ; stlp_std::__adjust_heap<CEvent * *,int,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
	add	esp, 12					; 0000000cH
	pop	esi

; 185  : }

	ret	0
??$pop_heap@PAPAVCEvent@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV1@1@Z@Z ENDP ; stlp_std::pop_heap<CEvent * *,bool (__cdecl*)(CEvent *,CEvent *)>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$copy_backward@PAPAVCEvent@@PAPAV1@@stlp_std@@YAPAPAVCEvent@@PAPAV1@00@Z
_TEXT	SEGMENT
??$copy_backward@PAPAVCEvent@@PAPAV1@@stlp_std@@YAPAPAVCEvent@@PAPAV1@00@Z PROC ; stlp_std::copy_backward<CEvent * *,CEvent * *>, COMDAT
; ___first$ = edx
; ___last$ = ecx
; ___result$ = eax

; 313  :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__first, __last))
; 314  :   return _STLP_PRIV __copy_backward_aux(__first, __last, __result, _BothPtrType< _InputIter, _OutputIter>::_Answer() );

	sub	ecx, edx
	test	ecx, ecx
	jle	SHORT $LN16@copy_backw@17
	push	ecx
	push	edx
	sub	eax, ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN16@copy_backw@17:

; 315  : }

	ret	0
??$copy_backward@PAPAVCEvent@@PAPAV1@@stlp_std@@YAPAPAVCEvent@@PAPAV1@00@Z ENDP ; stlp_std::copy_backward<CEvent * *,CEvent * *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_heap.h
_TEXT	ENDS
;	COMDAT ??$sort_heap@PAPAVCEvent@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV1@1@Z@Z
_TEXT	SEGMENT
??$sort_heap@PAPAVCEvent@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV1@1@Z@Z PROC ; stlp_std::sort_heap<CEvent * *,bool (__cdecl*)(CEvent *,CEvent *)>, COMDAT
; ___first$ = esi
; ___last$ = eax
; ___comp$ = ebx

; 111  :   while (__last - __first > 1)

	sub	eax, esi
	mov	ecx, eax
	and	ecx, -4					; fffffffcH
	cmp	ecx, 4
	jle	SHORT $LN1@sort_heap
	push	edi
	npad	3
$LL2@sort_heap:

; 112  :     pop_heap(__first, __last--, __comp);

	mov	ecx, DWORD PTR [esi+eax-4]
	mov	edx, DWORD PTR [esi]
	lea	edi, DWORD PTR [eax-4]
	mov	DWORD PTR [esi+eax-4], edx
	push	ebx
	push	ecx
	mov	eax, edi
	sar	eax, 2
	push	eax
	xor	eax, eax
	mov	ecx, esi
	call	??$__adjust_heap@PAPAVCEvent@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@HHPAV1@P6A_N11@Z@Z ; stlp_std::__adjust_heap<CEvent * *,int,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
	mov	eax, edi
	mov	ecx, edi
	and	ecx, -4					; fffffffcH
	add	esp, 12					; 0000000cH
	cmp	ecx, 4
	jg	SHORT $LL2@sort_heap
	pop	edi
$LN1@sort_heap:

; 113  : }

	ret	0
??$sort_heap@PAPAVCEvent@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV1@1@Z@Z ENDP ; stlp_std::sort_heap<CEvent * *,bool (__cdecl*)(CEvent *,CEvent *)>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.c
_TEXT	ENDS
;	COMDAT ??$__linear_insert@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@0PAV2@P6A_N11@Z@Z
_TEXT	SEGMENT
??$__linear_insert@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@0PAV2@P6A_N11@Z@Z PROC ; stlp_std::priv::__linear_insert<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>, COMDAT
; ___first$ = ecx
; ___last$ = eax
; ___val$ = ebx

; 911  :   //*TY 12/26/1998 - added __val as a paramter
; 912  :   //  _Tp __val = *__last;        //*TY 12/26/1998 - __val supplied by caller
; 913  :   if (__comp(__val, *__first)) {

	mov	edx, DWORD PTR [ebx]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [esi]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN2@linear_ins@2

; 914  :     _STLP_VERBOSE_ASSERT(!__comp(*__first, __val), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 915  :     copy_backward(__first, __last, __last + 1);

	mov	ecx, eax
	sub	ecx, esi
	test	ecx, ecx
	jle	SHORT $LN25@linear_ins@2
	push	ecx
	sub	eax, ecx
	add	eax, 4
	push	esi
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN25@linear_ins@2:

; 916  :     *__first = __val;

	mov	DWORD PTR [esi], ebx
	pop	esi

; 920  : }

	ret	0
$LN2@linear_ins@2:
	push	edi

; 917  :   }
; 918  :   else
; 919  :     __unguarded_linear_insert(__last, __val, __comp);

	lea	esi, DWORD PTR [eax-4]
	mov	edi, eax
	mov	eax, DWORD PTR [esi]
	push	eax
	push	ebx
	call	?ev_sort@@YA_NPAVCEvent@@0@Z		; ev_sort
	add	esp, 8
	test	al, al
	je	SHORT $LN27@linear_ins@2
	npad	2
$LL28@linear_ins@2:
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
	mov	edx, DWORD PTR [esi-4]
	mov	edi, esi
	sub	esi, 4
	push	edx
	push	ebx
	call	?ev_sort@@YA_NPAVCEvent@@0@Z		; ev_sort
	add	esp, 8
	test	al, al
	jne	SHORT $LL28@linear_ins@2
$LN27@linear_ins@2:
	mov	DWORD PTR [edi], ebx
	pop	edi
	pop	esi

; 920  : }

	ret	0
??$__linear_insert@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@0PAV2@P6A_N11@Z@Z ENDP ; stlp_std::priv::__linear_insert<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__partial_sort@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@000P6A_NPAV2@1@Z@Z
_TEXT	SEGMENT
___middle$ = 8						; size = 4
___last$ = 12						; size = 4
??$__partial_sort@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@000P6A_NPAV2@1@Z@Z PROC ; stlp_std::priv::__partial_sort<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>, COMDAT
; ___first$ = eax
; ___comp$ = ebx

; 1209 :                     _RandomAccessIter __last, _Tp*, _Compare __comp) {

	push	ebp
	mov	ebp, DWORD PTR ___middle$[esp]
	push	esi
	push	edi
	mov	edi, eax

; 1210 :   make_heap(__first, __middle, __comp);

	push	ebx
	mov	eax, ebp
	call	??$make_heap@PAPAVCEvent@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV1@1@Z@Z ; stlp_std::make_heap<CEvent * *,bool (__cdecl*)(CEvent *,CEvent *)>
	add	esp, 4

; 1211 :   for (_RandomAccessIter __i = __middle; __i < __last; ++__i) {

	cmp	ebp, DWORD PTR ___last$[esp+8]
	mov	esi, ebp
	jae	SHORT $LN2@partial_so
	npad	4
$LL4@partial_so:

; 1212 :     if (__comp(*__i, *__first)) {

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [esi]
	push	eax
	push	ecx
	call	ebx
	add	esp, 8
	test	al, al
	je	SHORT $LN3@partial_so

; 1213 :       _STLP_VERBOSE_ASSERT(!__comp(*__first, *__i), _StlMsg_INVALID_STRICT_WEAK_PREDICATE)
; 1214 :       __pop_heap(__first, __middle, __i, _Tp(*__i), __comp,
; 1215 :                  _STLP_DISTANCE_TYPE(__first, _RandomAccessIter));

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [edi]
	push	ebx
	push	eax
	mov	eax, ebp
	sub	eax, edi
	sar	eax, 2
	push	eax
	xor	eax, eax
	mov	ecx, edi
	mov	DWORD PTR [esi], edx
	call	??$__adjust_heap@PAPAVCEvent@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@HHPAV1@P6A_N11@Z@Z ; stlp_std::__adjust_heap<CEvent * *,int,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
	add	esp, 12					; 0000000cH
$LN3@partial_so:
	add	esi, 4
	cmp	esi, DWORD PTR ___last$[esp+8]
	jb	SHORT $LL4@partial_so
$LN2@partial_so:

; 1216 :     }
; 1217 :   }
; 1218 :   sort_heap(__first, __middle, __comp);

	sub	ebp, edi
	mov	ecx, ebp
	and	ecx, -4					; fffffffcH
	cmp	ecx, 4
	jle	SHORT $LN9@partial_so
	mov	eax, ebp
$LL10@partial_so:
	mov	ecx, DWORD PTR [edi+eax-4]
	mov	edx, DWORD PTR [edi]
	lea	esi, DWORD PTR [eax-4]
	mov	DWORD PTR [edi+eax-4], edx
	push	ebx
	push	ecx
	mov	eax, esi
	sar	eax, 2
	push	eax
	xor	eax, eax
	mov	ecx, edi
	call	??$__adjust_heap@PAPAVCEvent@@HPAV1@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@HHPAV1@P6A_N11@Z@Z ; stlp_std::__adjust_heap<CEvent * *,int,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
	mov	eax, esi
	mov	ecx, esi
	and	ecx, -4					; fffffffcH
	add	esp, 12					; 0000000cH
	cmp	ecx, 4
	jg	SHORT $LL10@partial_so
$LN9@partial_so:
	pop	edi
	pop	esi
	pop	ebp

; 1219 : }

	ret	0
??$__partial_sort@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@000P6A_NPAV2@1@Z@Z ENDP ; stlp_std::priv::__partial_sort<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__insertion_sort@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@00P6A_NPAV2@1@Z@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
??$__insertion_sort@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@00P6A_NPAV2@1@Z@Z PROC ; stlp_std::priv::__insertion_sort<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>, COMDAT
; ___last$ = edi

; 925  :                       _Tp *, _Compare __comp) {

	push	ebp
	mov	ebp, DWORD PTR ___first$[esp]
	push	esi

; 926  :   if (__first == __last) return;
; 927  :   for (_RandomAccessIter __i = __first + 1; __i != __last; ++__i)

	lea	esi, DWORD PTR [ebp+4]
	cmp	esi, edi
	je	SHORT $LN1@insertion_@2
	push	ebx
	npad	2
$LL3@insertion_@2:

; 928  :     __linear_insert<_RandomAccessIter, _Tp, _Compare>(__first, __i, *__i, __comp);  //*TY 12/26/1998 - supply *__i as __val

	mov	ebx, DWORD PTR [esi]
	mov	eax, esi
	mov	ecx, ebp
	call	??$__linear_insert@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@0PAV2@P6A_N11@Z@Z ; stlp_std::priv::__linear_insert<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
	add	esi, 4
	cmp	esi, edi
	jne	SHORT $LL3@insertion_@2
	pop	ebx
$LN1@insertion_@2:
	pop	esi
	pop	ebp

; 929  : }

	ret	0
??$__insertion_sort@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@00P6A_NPAV2@1@Z@Z ENDP ; stlp_std::priv::__insertion_sort<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$partial_sort@PAPAVCEvent@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@00P6A_NPAV1@1@Z@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
??$partial_sort@PAPAVCEvent@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@00P6A_NPAV1@1@Z@Z PROC ; stlp_std::partial_sort<CEvent * *,bool (__cdecl*)(CEvent *,CEvent *)>, COMDAT
; ___middle$ = ecx
; ___last$ = eax
; ___comp$ = ebx

; 1235 :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__first, __middle))
; 1236 :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__middle, __last))
; 1237 :   _STLP_PRIV __partial_sort(__first, __middle, __last, _STLP_VALUE_TYPE(__first, _RandomAccessIter), __comp);

	push	eax
	mov	eax, DWORD PTR ___first$[esp]
	push	ecx
	call	??$__partial_sort@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@000P6A_NPAV2@1@Z@Z ; stlp_std::priv::__partial_sort<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
	add	esp, 8

; 1238 : }

	ret	0
??$partial_sort@PAPAVCEvent@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@00P6A_NPAV1@1@Z@Z ENDP ; stlp_std::partial_sort<CEvent * *,bool (__cdecl*)(CEvent *,CEvent *)>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__final_insertion_sort@PAPAVCEvent@@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV2@1@Z@Z
_TEXT	SEGMENT
___last$ = 8						; size = 4
??$__final_insertion_sort@PAPAVCEvent@@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV2@1@Z@Z PROC ; stlp_std::priv::__final_insertion_sort<CEvent * *,bool (__cdecl*)(CEvent *,CEvent *)>, COMDAT
; ___first$ = edi

; 949  :   if (__last - __first > __stl_threshold) {

	mov	eax, DWORD PTR ___last$[esp-4]
	mov	ecx, eax
	sub	ecx, edi
	and	ecx, -4					; fffffffcH
	cmp	ecx, 64					; 00000040H
	push	ebx
	push	esi
	jle	SHORT $LN2@final_inse@2
	push	ebp

; 950  :     __insertion_sort(__first, __first + __stl_threshold, _STLP_VALUE_TYPE(__first,_RandomAccessIter), __comp);

	lea	ebp, DWORD PTR [edi+64]
	cmp	edi, ebp
	je	SHORT $LN5@final_inse@2
	lea	esi, DWORD PTR [edi+4]
	cmp	esi, ebp
	je	SHORT $LN5@final_inse@2
$LL7@final_inse@2:
	mov	ebx, DWORD PTR [esi]
	mov	eax, esi
	mov	ecx, edi
	call	??$__linear_insert@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@0PAV2@P6A_N11@Z@Z ; stlp_std::priv::__linear_insert<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
	add	esi, 4
	cmp	esi, ebp
	jne	SHORT $LL7@final_inse@2
	mov	eax, DWORD PTR ___last$[esp+8]
$LN5@final_inse@2:

; 951  :     __unguarded_insertion_sort(__first + __stl_threshold, __last, __comp);

	push	eax
	push	ebp
	call	??$__unguarded_insertion_sort_aux@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@00P6A_NPAV2@1@Z@Z ; stlp_std::priv::__unguarded_insertion_sort_aux<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
	add	esp, 8
	pop	ebp
	pop	esi
	pop	ebx

; 955  : }

	ret	0
$LN2@final_inse@2:

; 952  :   }
; 953  :   else
; 954  :     __insertion_sort(__first, __last, _STLP_VALUE_TYPE(__first,_RandomAccessIter), __comp);

	cmp	edi, eax
	je	SHORT $LN13@final_inse@2
	lea	esi, DWORD PTR [edi+4]
	cmp	esi, eax
	je	SHORT $LN13@final_inse@2
$LL15@final_inse@2:
	mov	ebx, DWORD PTR [esi]
	mov	eax, esi
	mov	ecx, edi
	call	??$__linear_insert@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@0PAV2@P6A_N11@Z@Z ; stlp_std::priv::__linear_insert<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
	add	esi, 4
	cmp	esi, DWORD PTR ___last$[esp+4]
	jne	SHORT $LL15@final_inse@2
$LN13@final_inse@2:
	pop	esi
	pop	ebx

; 955  : }

	ret	0
??$__final_insertion_sort@PAPAVCEvent@@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV2@1@Z@Z ENDP ; stlp_std::priv::__final_insertion_sort<CEvent * *,bool (__cdecl*)(CEvent *,CEvent *)>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__introsort_loop@PAPAVCEvent@@PAV1@HP6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@00HP6A_NPAV2@1@Z@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
$T236690 = 12						; size = 4
___last$ = 12						; size = 4
___formal$ = 16						; size = 4
___depth_limit$ = 20					; size = 4
___comp$ = 24						; size = 4
??$__introsort_loop@PAPAVCEvent@@PAV1@HP6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@00HP6A_NPAV2@1@Z@Z PROC ; stlp_std::priv::__introsort_loop<CEvent * *,CEvent *,int,bool (__cdecl*)(CEvent *,CEvent *)>, COMDAT

; 960  :                       _Size __depth_limit, _Compare __comp) {

	push	ebp

; 961  :   while (__last - __first > __stl_threshold) {

	mov	ebp, DWORD PTR ___last$[esp]
	push	edi
	mov	edi, DWORD PTR ___first$[esp+4]
	mov	eax, ebp
	sub	eax, edi
	and	eax, -4					; fffffffcH
	cmp	eax, 64					; 00000040H
	jle	$LN2@introsort_
	push	ebx
	mov	ebx, DWORD PTR ___comp$[esp+8]
	push	esi
$LL3@introsort_:

; 962  :     if (__depth_limit == 0) {

	cmp	DWORD PTR ___depth_limit$[esp+12], 0
	je	$LN21@introsort_

; 964  :       return;
; 965  :     }
; 966  :     --__depth_limit;

	sub	DWORD PTR ___depth_limit$[esp+12], 1

; 967  :     _RandomAccessIter __cut =
; 968  :       __unguarded_partition(__first, __last,
; 969  :                             _Tp(__median(*__first,
; 970  :                                          *(__first + (__last - __first)/2),
; 971  :                                          *(__last - 1), __comp)),
; 972  :        __comp);

	mov	eax, ebp
	sub	eax, edi
	sar	eax, 2
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR [edi]
	sar	eax, 1
	mov	ecx, DWORD PTR [edi+eax*4]
	lea	eax, DWORD PTR [edi+eax*4]
	push	ecx
	push	edx
	lea	esi, DWORD PTR [ebp-4]
	mov	DWORD PTR $T236690[esp+20], eax
	call	ebx
	add	esp, 8
	test	al, al
	je	SHORT $LN17@introsort_
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR $T236690[esp+12]
	mov	edx, DWORD PTR [ecx]
	push	eax
	push	edx
	call	ebx
	add	esp, 8
	test	al, al
	jne	SHORT $LN9@introsort_
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [edi]
	push	eax
	push	ecx
	call	ebx
	add	esp, 8
	test	al, al
	jne	SHORT $LN8@introsort_
	mov	esi, edi
	jmp	SHORT $LN8@introsort_
$LN17@introsort_:
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edi]
	push	edx
	push	eax
	call	ebx
	add	esp, 8
	test	al, al
	je	SHORT $LN11@introsort_
	mov	esi, edi
	jmp	SHORT $LN8@introsort_
$LN11@introsort_:
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR $T236690[esp+12]
	mov	eax, DWORD PTR [edx]
	push	ecx
	push	eax
	call	ebx
	add	esp, 8
	test	al, al
	jne	SHORT $LN8@introsort_
$LN9@introsort_:
	mov	esi, DWORD PTR $T236690[esp+12]
$LN8@introsort_:
	mov	ecx, DWORD PTR [esi]
	push	ecx
	mov	eax, ebp
	mov	ecx, edi
	call	??$__unguarded_partition@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAPAPAVCEvent@@PAPAV2@0PAV2@P6A_N11@Z@Z ; stlp_std::priv::__unguarded_partition<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>

; 973  :     __introsort_loop(__cut, __last, (_Tp*) 0, __depth_limit, __comp);

	mov	edx, DWORD PTR ___depth_limit$[esp+16]
	push	ebx
	push	edx
	push	0
	mov	esi, eax
	push	ebp
	push	esi
	call	??$__introsort_loop@PAPAVCEvent@@PAV1@HP6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@00HP6A_NPAV2@1@Z@Z ; stlp_std::priv::__introsort_loop<CEvent * *,CEvent *,int,bool (__cdecl*)(CEvent *,CEvent *)>

; 974  :     __last = __cut;

	mov	ebp, esi
	sub	esi, edi
	and	esi, -4					; fffffffcH
	add	esp, 24					; 00000018H
	cmp	esi, 64					; 00000040H
	jg	$LL3@introsort_
	pop	esi
	pop	ebx
	pop	edi
	pop	ebp

; 975  :   }
; 976  : }

	ret	0
$LN21@introsort_:

; 963  :       partial_sort(__first, __last, __last, __comp);

	push	ebp
	push	ebp
	mov	eax, edi
	call	??$__partial_sort@PAPAVCEvent@@PAV1@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@000P6A_NPAV2@1@Z@Z ; stlp_std::priv::__partial_sort<CEvent * *,CEvent *,bool (__cdecl*)(CEvent *,CEvent *)>
	add	esp, 8
	pop	esi
	pop	ebx
$LN2@introsort_:
	pop	edi
	pop	ebp

; 975  :   }
; 976  : }

	ret	0
??$__introsort_loop@PAPAVCEvent@@PAV1@HP6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@00HP6A_NPAV2@1@Z@Z ENDP ; stlp_std::priv::__introsort_loop<CEvent * *,CEvent *,int,bool (__cdecl*)(CEvent *,CEvent *)>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__copy_ptrs@PAUDeferred@CEventAPI@@PAU12@@priv@stlp_std@@YAPAUDeferred@CEventAPI@@PAU23@00ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__copy_ptrs@PAUDeferred@CEventAPI@@PAU12@@priv@stlp_std@@YAPAUDeferred@CEventAPI@@PAU23@00ABU__true_type@1@@Z PROC ; stlp_std::priv::__copy_ptrs<CEventAPI::Deferred *,CEventAPI::Deferred *>, COMDAT
; ___first$ = edx
; ___last$ = ecx
; ___result$ = eax

; 255  :   // we know they all pointers, so this cast is OK
; 256  :   //  return (_OutputIter)__copy_trivial(&(*__first), &(*__last), &(*__result));
; 257  :   return (_OutputIter)__copy_trivial(__first, __last, __result);

	sub	ecx, edx
	push	esi
	mov	esi, ecx
	je	SHORT $LN6@copy_ptrs@7
	push	esi
	push	edx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN6@copy_ptrs@7:
	pop	esi

; 258  : }

	ret	0
??$__copy_ptrs@PAUDeferred@CEventAPI@@PAU12@@priv@stlp_std@@YAPAUDeferred@CEventAPI@@PAU23@00ABU__true_type@1@@Z ENDP ; stlp_std::priv::__copy_ptrs<CEventAPI::Deferred *,CEventAPI::Deferred *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$_Copy_Construct@UDeferred@CEventAPI@@@stlp_std@@YAXPAUDeferred@CEventAPI@@ABU12@@Z
_TEXT	SEGMENT
??$_Copy_Construct@UDeferred@CEventAPI@@@stlp_std@@YAXPAUDeferred@CEventAPI@@ABU12@@Z PROC ; stlp_std::_Copy_Construct<CEventAPI::Deferred>, COMDAT
; ___p$ = eax
; ___val$ = ecx

; 110  : #if defined (_STLP_DEBUG_UNINITIALIZED)
; 111  :   memset((char*)__p, _STLP_SHRED_BYTE, sizeof(_Tp));
; 112  : #endif
; 113  :   _STLP_PLACEMENT_NEW (__p) _Tp(__val);

	test	eax, eax
	je	SHORT $LN3@Copy_Const@4
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], ecx
$LN3@Copy_Const@4:

; 114  : }

	ret	0
??$_Copy_Construct@UDeferred@CEventAPI@@@stlp_std@@YAXPAUDeferred@CEventAPI@@ABU12@@Z ENDP ; stlp_std::_Copy_Construct<CEventAPI::Deferred>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algo.c
_TEXT	ENDS
;	COMDAT ??$sort@PAPAVCEvent@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV1@1@Z@Z
_TEXT	SEGMENT
??$sort@PAPAVCEvent@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV1@1@Z@Z PROC ; stlp_std::sort<CEvent * *,bool (__cdecl*)(CEvent *,CEvent *)>, COMDAT
; ___first$ = eax
; ___last$ = esi

; 994  : void sort(_RandomAccessIter __first, _RandomAccessIter __last, _Compare __comp) {

	push	edi
	mov	edi, eax

; 995  :   _STLP_DEBUG_CHECK(_STLP_PRIV __check_range(__first, __last))
; 996  :   if (__first != __last) {

	cmp	edi, esi
	je	SHORT $LN1@sort

; 997  :     _STLP_PRIV __introsort_loop(__first, __last,
; 998  :                                 _STLP_VALUE_TYPE(__first, _RandomAccessIter),
; 999  :                                 _STLP_PRIV __lg(__last - __first) * 2, __comp);

	mov	eax, esi
	sub	eax, edi
	sar	eax, 2
	xor	ecx, ecx
	cmp	eax, 1
	je	SHORT $LN4@sort
$LL6@sort:
	sar	eax, 1
	add	ecx, 1
	cmp	eax, 1
	jne	SHORT $LL6@sort
$LN4@sort:
	push	OFFSET ?ev_sort@@YA_NPAVCEvent@@0@Z	; ev_sort
	lea	eax, DWORD PTR [ecx+ecx]
	push	eax
	push	0
	push	esi
	push	edi
	call	??$__introsort_loop@PAPAVCEvent@@PAV1@HP6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@00HP6A_NPAV2@1@Z@Z ; stlp_std::priv::__introsort_loop<CEvent * *,CEvent *,int,bool (__cdecl*)(CEvent *,CEvent *)>

; 1000 :     _STLP_PRIV __final_insertion_sort(__first, __last, __comp);

	push	esi
	call	??$__final_insertion_sort@PAPAVCEvent@@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV2@1@Z@Z ; stlp_std::priv::__final_insertion_sort<CEvent * *,bool (__cdecl*)(CEvent *,CEvent *)>
	add	esp, 24					; 00000018H
$LN1@sort:
	pop	edi

; 1001 :   }
; 1002 : }

	ret	0
??$sort@PAPAVCEvent@@P6A_NPAV1@0@Z@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV1@1@Z@Z ENDP ; stlp_std::sort<CEvent * *,bool (__cdecl*)(CEvent *,CEvent *)>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?_M_erase@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@AAEPAUDeferred@CEventAPI@@PAU45@0ABU__false_type@3@@Z
_TEXT	SEGMENT
?_M_erase@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@AAEPAUDeferred@CEventAPI@@PAU45@0ABU__false_type@3@@Z PROC ; stlp_std::priv::_Impl_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::_M_erase, COMDAT
; _this$ = ebx
; ___first$ = edi
; ___last$ = eax

; 578  :   iterator _M_erase(iterator __first, iterator __last, const __false_type& /*_Movable*/) {

	push	esi

; 579  :     pointer __i = _STLP_PRIV __copy_ptrs(__last, this->_M_finish, __first, _TrivialCopy());

	mov	esi, DWORD PTR [ebx+4]
	sub	esi, eax
	je	SHORT $LN7@M_erase@6
	push	esi
	push	eax
	push	edi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi

; 580  :     _STLP_STD::_Destroy_Range(__i, this->_M_finish);
; 581  :     this->_M_finish = __i;

	mov	DWORD PTR [ebx+4], eax

; 582  :     return __first;

	mov	eax, edi
	pop	esi

; 583  :   }

	ret	0

; 579  :     pointer __i = _STLP_PRIV __copy_ptrs(__last, this->_M_finish, __first, _TrivialCopy());

$LN7@M_erase@6:

; 580  :     _STLP_STD::_Destroy_Range(__i, this->_M_finish);
; 581  :     this->_M_finish = __i;

	mov	DWORD PTR [ebx+4], edi

; 582  :     return __first;

	mov	eax, edi
	pop	esi

; 583  :   }

	ret	0
?_M_erase@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@AAEPAUDeferred@CEventAPI@@PAU45@0ABU__false_type@3@@Z ENDP ; stlp_std::priv::_Impl_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::_M_erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?erase@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@QAEPAUDeferred@CEventAPI@@PAU45@0@Z
_TEXT	SEGMENT
?erase@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@QAEPAUDeferred@CEventAPI@@PAU45@0@Z PROC ; stlp_std::priv::_Impl_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::erase, COMDAT
; _this$ = ebx
; ___first$ = edi
; ___last$ = eax

; 590  :     if (__first == __last)

	cmp	edi, eax

; 591  :       return __first;

	je	SHORT $LN12@erase@5
	push	esi

; 592  :     return _M_erase(__first, __last, _Movable());

	mov	esi, DWORD PTR [ebx+4]
	sub	esi, eax
	je	SHORT $LN10@erase@5
	push	esi
	push	eax
	push	edi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
	mov	DWORD PTR [ebx+4], eax
	pop	esi
	mov	eax, edi

; 593  :   }

	ret	0

; 592  :     return _M_erase(__first, __last, _Movable());

$LN10@erase@5:
	mov	eax, edi
	mov	DWORD PTR [ebx+4], eax
	pop	esi
$LN12@erase@5:
	mov	eax, edi

; 593  :   }

	ret	0
?erase@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@QAEPAUDeferred@CEventAPI@@PAU45@0@Z ENDP ; stlp_std::priv::_Impl_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?clear@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@QAEXXZ PROC ; stlp_std::priv::_Impl_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::clear, COMDAT
; _this$ = edi

; 611  :     erase(begin(), end());

	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ecx
	je	SHORT $LN10@clear@7
	push	esi
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN16@clear@7
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN16@clear@7:
	mov	DWORD PTR [edi+4], eax
	pop	esi
$LN10@clear@7:

; 612  :   }

	ret	0
?clear@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@QAEXXZ ENDP ; stlp_std::priv::_Impl_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::clear
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?clear@?$vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@stlp_std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@stlp_std@@QAEXXZ PROC ; stlp_std::vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::clear, COMDAT
; _this$ = edi

; 223  :   void clear() { _M_impl.clear(); }

	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ecx
	je	SHORT $LN12@clear@8
	push	esi
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN18@clear@8
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN18@clear@8:
	mov	DWORD PTR [edi+4], eax
	pop	esi
$LN12@clear@8:
	ret	0
?clear@?$vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@stlp_std@@QAEXXZ ENDP ; stlp_std::vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::clear
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_tools.h
_TEXT	ENDS
;	COMDAT ?to_storage_type_cref@?$_CastTraits@PAXPAVIEventReceiver@@@priv@stlp_std@@SAABQAXABQAVIEventReceiver@@@Z
_TEXT	SEGMENT
?to_storage_type_cref@?$_CastTraits@PAXPAVIEventReceiver@@@priv@stlp_std@@SAABQAXABQAVIEventReceiver@@@Z PROC ; stlp_std::priv::_CastTraits<void *,IEventReceiver *>::to_storage_type_cref, COMDAT
; ___ref$ = eax

; 224  :   { return cv_traits::uncv_cref(__REINTERPRET_CAST(void_cv_type const&, __ref)); }

	ret	0
?to_storage_type_cref@?$_CastTraits@PAXPAVIEventReceiver@@@priv@stlp_std@@SAABQAXABQAVIEventReceiver@@@Z ENDP ; stlp_std::priv::_CastTraits<void *,IEventReceiver *>::to_storage_type_cref
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_storage_type_ptr@?$_CastTraits@PAXPAVIEventReceiver@@@priv@stlp_std@@SAPAPAXPAPAVIEventReceiver@@@Z
_TEXT	SEGMENT
?to_storage_type_ptr@?$_CastTraits@PAXPAVIEventReceiver@@@priv@stlp_std@@SAPAPAXPAPAVIEventReceiver@@@Z PROC ; stlp_std::priv::_CastTraits<void *,IEventReceiver *>::to_storage_type_ptr, COMDAT
; ___ptr$ = eax

; 218  :   { return cv_traits::uncv_ptr(__REINTERPRET_CAST(void_cv_type *, __ptr)); }

	ret	0
?to_storage_type_ptr@?$_CastTraits@PAXPAVIEventReceiver@@@priv@stlp_std@@SAPAPAXPAPAVIEventReceiver@@@Z ENDP ; stlp_std::priv::_CastTraits<void *,IEventReceiver *>::to_storage_type_ptr
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_value_type_ptr@?$_CastTraits@PAXPAVIEventReceiver@@@priv@stlp_std@@SAPAPAVIEventReceiver@@PAPAX@Z
_TEXT	SEGMENT
?to_value_type_ptr@?$_CastTraits@PAXPAVIEventReceiver@@@priv@stlp_std@@SAPAPAVIEventReceiver@@PAPAX@Z PROC ; stlp_std::priv::_CastTraits<void *,IEventReceiver *>::to_value_type_ptr, COMDAT
; ___ptr$ = eax

; 207  :   { return __REINTERPRET_CAST(value_type *, cv_traits::cv_ptr(__ptr)); }

	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	ret	0
?to_value_type_ptr@?$_CastTraits@PAXPAVIEventReceiver@@@priv@stlp_std@@SAPAPAVIEventReceiver@@PAPAX@Z ENDP ; stlp_std::priv::_CastTraits<void *,IEventReceiver *>::to_value_type_ptr
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_storage_type_cref@?$_CastTraits@PAXPAVCEvent@@@priv@stlp_std@@SAABQAXABQAVCEvent@@@Z
_TEXT	SEGMENT
?to_storage_type_cref@?$_CastTraits@PAXPAVCEvent@@@priv@stlp_std@@SAABQAXABQAVCEvent@@@Z PROC ; stlp_std::priv::_CastTraits<void *,CEvent *>::to_storage_type_cref, COMDAT
; ___ref$ = eax

; 224  :   { return cv_traits::uncv_cref(__REINTERPRET_CAST(void_cv_type const&, __ref)); }

	ret	0
?to_storage_type_cref@?$_CastTraits@PAXPAVCEvent@@@priv@stlp_std@@SAABQAXABQAVCEvent@@@Z ENDP ; stlp_std::priv::_CastTraits<void *,CEvent *>::to_storage_type_cref
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_storage_type_ptr@?$_CastTraits@PAXPAVCEvent@@@priv@stlp_std@@SAPAPAXPAPAVCEvent@@@Z
_TEXT	SEGMENT
?to_storage_type_ptr@?$_CastTraits@PAXPAVCEvent@@@priv@stlp_std@@SAPAPAXPAPAVCEvent@@@Z PROC ; stlp_std::priv::_CastTraits<void *,CEvent *>::to_storage_type_ptr, COMDAT
; ___ptr$ = eax

; 218  :   { return cv_traits::uncv_ptr(__REINTERPRET_CAST(void_cv_type *, __ptr)); }

	ret	0
?to_storage_type_ptr@?$_CastTraits@PAXPAVCEvent@@@priv@stlp_std@@SAPAPAXPAPAVCEvent@@@Z ENDP ; stlp_std::priv::_CastTraits<void *,CEvent *>::to_storage_type_ptr
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_value_type_ptr@?$_CastTraits@PAXPAVCEvent@@@priv@stlp_std@@SAPAPAVCEvent@@PAPAX@Z
_TEXT	SEGMENT
?to_value_type_ptr@?$_CastTraits@PAXPAVCEvent@@@priv@stlp_std@@SAPAPAVCEvent@@PAPAX@Z PROC ; stlp_std::priv::_CastTraits<void *,CEvent *>::to_value_type_ptr, COMDAT
; ___ptr$ = eax

; 207  :   { return __REINTERPRET_CAST(value_type *, cv_traits::cv_ptr(__ptr)); }

	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	ret	0
?to_value_type_ptr@?$_CastTraits@PAXPAVCEvent@@@priv@stlp_std@@SAPAPAVCEvent@@PAPAX@Z ENDP ; stlp_std::priv::_CastTraits<void *,CEvent *>::to_value_type_ptr
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QBEIXZ PROC ; stlp_std::vector<IEventReceiver *,xalloc<IEventReceiver *> >::size, COMDAT
; _this$ = ecx

; 89   :   size_type size() const        { return _M_impl.size(); }

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
	ret	0
?size@?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QBEIXZ ENDP ; stlp_std::vector<IEventReceiver *,xalloc<IEventReceiver *> >::size
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?back@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@QAEAAUDeferred@CEventAPI@@XZ
_TEXT	SEGMENT
?back@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@QAEAAUDeferred@CEventAPI@@XZ PROC ; stlp_std::priv::_Impl_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::back, COMDAT
; _this$ = eax

; 195  :   reference back()              { return *(end() - 1); }

	mov	eax, DWORD PTR [eax+4]
	sub	eax, 24					; 00000018H
	ret	0
?back@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@QAEAAUDeferred@CEventAPI@@XZ ENDP ; stlp_std::priv::_Impl_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::back
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?size@?$vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@stlp_std@@QBEIXZ PROC ; stlp_std::vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::size, COMDAT
; _this$ = eax

; 89   :   size_type size() const        { return _M_impl.size(); }

	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR [eax]
	mov	eax, 715827883				; 2aaaaaabH
	imul	ecx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	ret	0
?size@?$vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@stlp_std@@QBEIXZ ENDP ; stlp_std::vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@stlp_std@@QAEPAUDeferred@CEventAPI@@XZ
_TEXT	SEGMENT
?begin@?$vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@stlp_std@@QAEPAUDeferred@CEventAPI@@XZ PROC ; stlp_std::vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::begin, COMDAT
; _this$ = eax

; 79   :   iterator begin()             { return cast_traits::to_value_type_ptr(_M_impl.begin()); }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@stlp_std@@QAEPAUDeferred@CEventAPI@@XZ ENDP ; stlp_std::vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::begin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?clear_and_free@?$xr_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear_and_free@?$xr_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@@QAEXXZ PROC ; xr_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::clear_and_free, COMDAT
; _this$ = edi

; 128  : 	void	clear_and_free		()									{ inherited::clear();			}

	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ecx
	je	SHORT $LN14@clear_and_
	push	esi
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN20@clear_and_
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN20@clear_and_:
	mov	DWORD PTR [edi+4], eax
	pop	esi
$LN14@clear_and_:
	ret	0
?clear_and_free@?$xr_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@@QAEXXZ ENDP ; xr_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::clear_and_free
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@stlp_std@@QBEIXZ PROC ; stlp_std::vector<CEvent *,xalloc<CEvent *> >::size, COMDAT
; _this$ = ecx

; 89   :   size_type size() const        { return _M_impl.size(); }

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
	ret	0
?size@?$vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@stlp_std@@QBEIXZ ENDP ; stlp_std::vector<CEvent *,xalloc<CEvent *> >::size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAEPAPAVIEventReceiver@@XZ
_TEXT	SEGMENT
?end@?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAEPAPAVIEventReceiver@@XZ PROC ; stlp_std::vector<IEventReceiver *,xalloc<IEventReceiver *> >::end, COMDAT
; _this$ = eax

; 81   :   iterator end()               { return cast_traits::to_value_type_ptr(_M_impl.end()); }

	mov	eax, DWORD PTR [eax+4]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	ret	0
?end@?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAEPAPAVIEventReceiver@@XZ ENDP ; stlp_std::vector<IEventReceiver *,xalloc<IEventReceiver *> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAEPAPAVIEventReceiver@@XZ
_TEXT	SEGMENT
?begin@?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAEPAPAVIEventReceiver@@XZ PROC ; stlp_std::vector<IEventReceiver *,xalloc<IEventReceiver *> >::begin, COMDAT
; _this$ = eax

; 79   :   iterator begin()             { return cast_traits::to_value_type_ptr(_M_impl.begin()); }

	mov	eax, DWORD PTR [eax]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	ret	0
?begin@?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAEPAPAVIEventReceiver@@XZ ENDP ; stlp_std::vector<IEventReceiver *,xalloc<IEventReceiver *> >::begin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??A?$xr_vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@@QAEAAPAVIEventReceiver@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$xr_vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@@QAEAAPAVIEventReceiver@@I@Z PROC ; xr_vector<IEventReceiver *,xalloc<IEventReceiver *> >::operator[], COMDAT
; _this$ = eax

; 139  : 	reference operator[]		(size_type _Pos)					{ {VERIFY2(_Pos<size(),make_string("index is out of range: index requested[%d], size of container[%d]", _Pos, size()).c_str());} return (*(begin() + _Pos)); }

	mov	eax, DWORD PTR [eax]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	ecx, DWORD PTR __Pos$[esp]
	add	esp, 4
	lea	eax, DWORD PTR [eax+ecx*4]
	ret	4
??A?$xr_vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@@QAEAAPAVIEventReceiver@@I@Z ENDP ; xr_vector<IEventReceiver *,xalloc<IEventReceiver *> >::operator[]
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?size@?$xr_vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@@QBEIXZ
_TEXT	SEGMENT
?size@?$xr_vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@@QBEIXZ PROC ; xr_vector<IEventReceiver *,xalloc<IEventReceiver *> >::size, COMDAT
; _this$ = ecx

; 126  : 	u32		size				() const							{ return (u32)inherited::size();} 

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
	ret	0
?size@?$xr_vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@@QBEIXZ ENDP ; xr_vector<IEventReceiver *,xalloc<IEventReceiver *> >::size
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?back@?$vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@stlp_std@@QAEAAUDeferred@CEventAPI@@XZ
_TEXT	SEGMENT
?back@?$vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@stlp_std@@QAEAAUDeferred@CEventAPI@@XZ PROC ; stlp_std::vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::back, COMDAT
; _this$ = eax

; 100  :   reference back()              { return cast_traits::to_value_type_ref(_M_impl.back()); }

	mov	eax, DWORD PTR [eax+4]
	sub	eax, 24					; 00000018H
	ret	0
?back@?$vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@stlp_std@@QAEAAUDeferred@CEventAPI@@XZ ENDP ; stlp_std::vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::back
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??A?$xr_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@@QAEAAUDeferred@CEventAPI@@I@Z
_TEXT	SEGMENT
??A?$xr_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@@QAEAAUDeferred@CEventAPI@@I@Z PROC ; xr_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::operator[], COMDAT
; _this$ = ecx
; __Pos$ = eax

; 139  : 	reference operator[]		(size_type _Pos)					{ {VERIFY2(_Pos<size(),make_string("index is out of range: index requested[%d], size of container[%d]", _Pos, size()).c_str());} return (*(begin() + _Pos)); }

	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [edx+eax*8]
	ret	0
??A?$xr_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@@QAEAAUDeferred@CEventAPI@@I@Z ENDP ; xr_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::operator[]
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?clear@?$xr_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$xr_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@@QAEXXZ PROC ; xr_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::clear, COMDAT
; _this$ = edi

; 133  : 	void	clear				()									{ clear_and_free	();			}

	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ecx
	je	SHORT $LN16@clear@9
	push	esi
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN22@clear@9
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN22@clear@9:
	mov	DWORD PTR [edi+4], eax
	pop	esi
$LN16@clear@9:
	ret	0
?clear@?$xr_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@@QAEXXZ ENDP ; xr_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::clear
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?size@?$xr_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@@QBEIXZ
_TEXT	SEGMENT
?size@?$xr_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@@QBEIXZ PROC ; xr_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::size, COMDAT
; _this$ = eax

; 126  : 	u32		size				() const							{ return (u32)inherited::size();} 

	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR [eax]
	mov	eax, 715827883				; 2aaaaaabH
	imul	ecx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	ret	0
?size@?$xr_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@@QBEIXZ ENDP ; xr_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::size
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?empty@?$vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@stlp_std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@stlp_std@@QBE_NXZ PROC ; stlp_std::vector<CEvent *,xalloc<CEvent *> >::empty, COMDAT
; _this$ = ecx

; 93   :   bool empty() const            { return _M_impl.empty(); }

	jmp	?empty@?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QBE_NXZ ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::empty
?empty@?$vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@stlp_std@@QBE_NXZ ENDP ; stlp_std::vector<CEvent *,xalloc<CEvent *> >::empty
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@stlp_std@@QAEPAPAVCEvent@@XZ
_TEXT	SEGMENT
?end@?$vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@stlp_std@@QAEPAPAVCEvent@@XZ PROC ; stlp_std::vector<CEvent *,xalloc<CEvent *> >::end, COMDAT
; _this$ = eax

; 81   :   iterator end()               { return cast_traits::to_value_type_ptr(_M_impl.end()); }

	mov	eax, DWORD PTR [eax+4]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	ret	0
?end@?$vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@stlp_std@@QAEPAPAVCEvent@@XZ ENDP ; stlp_std::vector<CEvent *,xalloc<CEvent *> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@stlp_std@@QAEPAPAVCEvent@@XZ
_TEXT	SEGMENT
?begin@?$vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@stlp_std@@QAEPAPAVCEvent@@XZ PROC ; stlp_std::vector<CEvent *,xalloc<CEvent *> >::begin, COMDAT
; _this$ = eax

; 79   :   iterator begin()             { return cast_traits::to_value_type_ptr(_M_impl.begin()); }

	mov	eax, DWORD PTR [eax]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	ret	0
?begin@?$vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@stlp_std@@QAEPAPAVCEvent@@XZ ENDP ; stlp_std::vector<CEvent *,xalloc<CEvent *> >::begin
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??A?$xr_vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@@QAEAAPAVCEvent@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$xr_vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@@QAEAAPAVCEvent@@I@Z PROC ; xr_vector<CEvent *,xalloc<CEvent *> >::operator[], COMDAT
; _this$ = eax

; 139  : 	reference operator[]		(size_type _Pos)					{ {VERIFY2(_Pos<size(),make_string("index is out of range: index requested[%d], size of container[%d]", _Pos, size()).c_str());} return (*(begin() + _Pos)); }

	mov	eax, DWORD PTR [eax]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	ecx, DWORD PTR __Pos$[esp]
	add	esp, 4
	lea	eax, DWORD PTR [eax+ecx*4]
	ret	4
??A?$xr_vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@@QAEAAPAVCEvent@@I@Z ENDP ; xr_vector<CEvent *,xalloc<CEvent *> >::operator[]
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?size@?$xr_vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@@QBEIXZ
_TEXT	SEGMENT
?size@?$xr_vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@@QBEIXZ PROC ; xr_vector<CEvent *,xalloc<CEvent *> >::size, COMDAT
; _this$ = ecx

; 126  : 	u32		size				() const							{ return (u32)inherited::size();} 

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
	ret	0
?size@?$xr_vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@@QBEIXZ ENDP ; xr_vector<CEvent *,xalloc<CEvent *> >::size
_TEXT	ENDS
PUBLIC	?Peek@CEventAPI@@QAEHPBD@Z			; CEventAPI::Peek
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\eventapi.cpp
;	COMDAT ?Peek@CEventAPI@@QAEHPBD@Z
_TEXT	SEGMENT
tv160 = -4						; size = 4
_EName$ = 8						; size = 4
?Peek@CEventAPI@@QAEHPBD@Z PROC				; CEventAPI::Peek, COMDAT
; _this$ = ecx

; 182  : {

	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx

; 183  : 	CS.Enter	();

	lea	ebx, DWORD PTR [esi+24]
	mov	ecx, ebx
	mov	DWORD PTR tv160[esp+12], ebx
	call	DWORD PTR __imp_?Enter@xrCriticalSection@@QAEXXZ

; 184  : 	if (Events_Deferred.empty())	{ CS.Leave(); return FALSE; }

	mov	eax, DWORD PTR [esi+12]
	cmp	eax, DWORD PTR [esi+16]
	jne	SHORT $LN5@Peek
	mov	ecx, ebx
	call	DWORD PTR __imp_?Leave@xrCriticalSection@@QAEXXZ
	pop	esi
	xor	eax, eax
	pop	ebx

; 196  : }

	pop	ecx
	ret	4
$LN5@Peek:

; 185  : 	for (u32 I=0; I<Events_Deferred.size(); I++)

	mov	ecx, DWORD PTR [esi+16]
	sub	ecx, eax
	mov	eax, 715827883				; 2aaaaaabH
	imul	ecx
	sar	edx, 2
	push	ebp
	mov	ecx, edx
	push	edi
	shr	ecx, 31					; 0000001fH
	xor	edi, edi
	add	ecx, edx
	je	SHORT $LN2@Peek
	mov	ebp, DWORD PTR _EName$[esp+16]
	xor	ebx, ebx
	npad	2
$LL4@Peek:

; 186  : 	{
; 187  : 		Deferred&	DEF = Events_Deferred[I];
; 188  : 		if(stricmp(DEF.E->GetFull(),EName)==0){

	mov	edx, DWORD PTR [esi+12]
	mov	eax, DWORD PTR [ebx+edx]
	mov	eax, DWORD PTR [eax]
	push	ebp
	push	eax
	call	DWORD PTR __imp__stricmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN32@Peek
	mov	ecx, DWORD PTR [esi+16]
	sub	ecx, DWORD PTR [esi+12]
	mov	eax, 715827883				; 2aaaaaabH
	imul	ecx
	sar	edx, 2
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	add	edi, 1
	add	ecx, edx
	add	ebx, 24					; 00000018H
	cmp	edi, ecx
	jb	SHORT $LL4@Peek
	mov	ebx, DWORD PTR tv160[esp+20]
$LN2@Peek:

; 191  : 		}
; 192  : 
; 193  : 	}
; 194  : 	CS.Leave	();

	mov	ecx, ebx
	call	DWORD PTR __imp_?Leave@xrCriticalSection@@QAEXXZ
	pop	edi
	pop	ebp
	pop	esi

; 195  : 	return FALSE;

	xor	eax, eax
	pop	ebx

; 196  : }

	pop	ecx
	ret	4
$LN32@Peek:

; 189  : 			CS.Leave(); 

	mov	ecx, DWORD PTR tv160[esp+20]
	call	DWORD PTR __imp_?Leave@xrCriticalSection@@QAEXXZ
	pop	edi
	pop	ebp
	pop	esi

; 190  : 			return TRUE;

	mov	eax, 1
	pop	ebx

; 196  : }

	pop	ecx
	ret	4
?Peek@CEventAPI@@QAEHPBD@Z ENDP				; CEventAPI::Peek
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?ev_sort@@YA_NPAVCEvent@@0@Z
_TEXT	SEGMENT
_E1$ = 8						; size = 4
_E2$ = 12						; size = 4
?ev_sort@@YA_NPAVCEvent@@0@Z PROC			; ev_sort, COMDAT

; 57   : {	return E1->GetFull() < E2->GetFull(); }

	mov	eax, DWORD PTR _E1$[esp-4]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _E2$[esp-4]
	cmp	ecx, DWORD PTR [edx]
	sbb	eax, eax
	neg	eax
	ret	0
?ev_sort@@YA_NPAVCEvent@@0@Z ENDP			; ev_sort
_TEXT	ENDS
PUBLIC	?Signal@CEvent@@QAEX_K0@Z			; CEvent::Signal
; Function compile flags: /Ogtpy
;	COMDAT ?Signal@CEvent@@QAEX_K0@Z
_TEXT	SEGMENT
_P1$ = 8						; size = 8
_P2$ = 16						; size = 8
?Signal@CEvent@@QAEX_K0@Z PROC				; CEvent::Signal, COMDAT
; _this$ = ecx

; 40   : 	{

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx

; 41   : 		for (u32 I=0; I<Handlers.size(); I++)

	mov	eax, DWORD PTR [esi+8]
	sub	eax, DWORD PTR [esi+4]
	push	edi
	xor	edi, edi
	sar	eax, 2
	je	SHORT $LN1@Signal
	mov	ebx, DWORD PTR _P2$[ebp+4]
	npad	4
$LL3@Signal:

; 42   : 			Handlers[I]->OnEvent(this,P1,P2);

	mov	eax, DWORD PTR [esi+4]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	ecx, DWORD PTR [eax+edi*4]
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx]
	add	esp, 4
	lea	eax, DWORD PTR [eax+edi*4]
	mov	eax, DWORD PTR _P2$[ebp]
	push	ebx
	push	eax
	mov	eax, DWORD PTR _P1$[ebp+4]
	push	eax
	mov	eax, DWORD PTR _P1$[ebp]
	push	eax
	push	esi
	call	edx
	mov	eax, DWORD PTR [esi+8]
	sub	eax, DWORD PTR [esi+4]
	add	edi, 1
	sar	eax, 2
	cmp	edi, eax
	jb	SHORT $LL3@Signal
$LN1@Signal:

; 43   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Signal@CEvent@@QAEX_K0@Z ENDP				; CEvent::Signal
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
;	COMDAT ??0?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAE@ABV?$xalloc@PAVIEventReceiver@@@@@Z
_TEXT	SEGMENT
??0?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAE@ABV?$xalloc@PAVIEventReceiver@@@@@Z PROC ; stlp_std::vector<IEventReceiver *,xalloc<IEventReceiver *> >::vector<IEventReceiver *,xalloc<IEventReceiver *> >, COMDAT
; _this$ = eax

; 106  :   explicit vector(const allocator_type& __a = allocator_type())

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAE@ABV?$xalloc@PAVIEventReceiver@@@@@Z ENDP ; stlp_std::vector<IEventReceiver *,xalloc<IEventReceiver *> >::vector<IEventReceiver *,xalloc<IEventReceiver *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?erase@?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAEPAPAVIEventReceiver@@PAPAV3@@Z
_TEXT	SEGMENT
?erase@?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAEPAPAVIEventReceiver@@PAPAV3@@Z PROC ; stlp_std::vector<IEventReceiver *,xalloc<IEventReceiver *> >::erase, COMDAT
; _this$ = eax
; ___pos$ = edi

; 206  :   {return cast_traits::to_value_type_ptr(_M_impl.erase(cast_traits::to_storage_type_ptr(__pos)));}

	push	esi
	mov	esi, eax
	mov	eax, DWORD PTR [esi+4]
	lea	ecx, DWORD PTR [edi+4]
	cmp	ecx, eax
	je	SHORT $LN18@erase@36
	sub	eax, ecx
	je	SHORT $LN18@erase@36
	push	eax
	push	ecx
	push	edi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN18@erase@36:
	add	DWORD PTR [esi+4], -4			; fffffffcH
	mov	esi, DWORD PTR [esi+4]
	push	esi
	call	??$_Destroy@PAX@stlp_std@@YAXPAPAX@Z	; stlp_std::_Destroy<void *>
	push	edi
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 8
	pop	esi
	ret	0
?erase@?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAEPAPAVIEventReceiver@@PAPAV3@@Z ENDP ; stlp_std::vector<IEventReceiver *,xalloc<IEventReceiver *> >::erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?erase@?$vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@stlp_std@@QAEPAPAVCEvent@@PAPAV3@@Z
_TEXT	SEGMENT
?erase@?$vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@stlp_std@@QAEPAPAVCEvent@@PAPAV3@@Z PROC ; stlp_std::vector<CEvent *,xalloc<CEvent *> >::erase, COMDAT
; _this$ = eax
; ___pos$ = edi

; 206  :   {return cast_traits::to_value_type_ptr(_M_impl.erase(cast_traits::to_storage_type_ptr(__pos)));}

	push	esi
	mov	esi, eax
	mov	eax, DWORD PTR [esi+4]
	lea	ecx, DWORD PTR [edi+4]
	cmp	ecx, eax
	je	SHORT $LN18@erase@37
	sub	eax, ecx
	je	SHORT $LN18@erase@37
	push	eax
	push	ecx
	push	edi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN18@erase@37:
	add	DWORD PTR [esi+4], -4			; fffffffcH
	mov	esi, DWORD PTR [esi+4]
	push	esi
	call	??$_Destroy@PAX@stlp_std@@YAXPAPAX@Z	; stlp_std::_Destroy<void *>
	push	edi
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 8
	pop	esi
	ret	0
?erase@?$vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@stlp_std@@QAEPAPAVCEvent@@PAPAV3@@Z ENDP ; stlp_std::vector<CEvent *,xalloc<CEvent *> >::erase
_TEXT	ENDS
PUBLIC	?Signal@CEventAPI@@QAEXPAVCEvent@@_K1@Z		; CEventAPI::Signal
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\eventapi.cpp
;	COMDAT ?Signal@CEventAPI@@QAEXPAVCEvent@@_K1@Z
_TEXT	SEGMENT
_E$ = 8							; size = 4
_P1$ = 12						; size = 8
_P2$ = 20						; size = 8
?Signal@CEventAPI@@QAEXPAVCEvent@@_K1@Z PROC		; CEventAPI::Signal, COMDAT
; _this$ = ecx

; 117  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	push	ecx
	push	esi

; 118  : 	CS.Enter	();

	lea	esi, DWORD PTR [ecx+24]
	mov	ecx, esi
	call	DWORD PTR __imp_?Enter@xrCriticalSection@@QAEXXZ

; 119  : 	E->Signal	(P1,P2);	

	mov	eax, DWORD PTR _P2$[ebp+4]
	mov	ecx, DWORD PTR _P2$[ebp]
	mov	edx, DWORD PTR _P1$[ebp+4]
	push	eax
	mov	eax, DWORD PTR _P1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _E$[ebp]
	push	edx
	push	eax
	call	?Signal@CEvent@@QAEX_K0@Z		; CEvent::Signal

; 120  : 	CS.Leave	();

	mov	ecx, esi
	call	DWORD PTR __imp_?Leave@xrCriticalSection@@QAEXXZ

; 121  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Signal@CEventAPI@@QAEXPAVCEvent@@_K1@Z ENDP		; CEventAPI::Signal
_TEXT	ENDS
PUBLIC	?Dump@CEventAPI@@QAEXXZ				; CEventAPI::Dump
; Function compile flags: /Ogtpy
;	COMDAT ?Dump@CEventAPI@@QAEXXZ
_TEXT	SEGMENT
?Dump@CEventAPI@@QAEXXZ PROC				; CEventAPI::Dump, COMDAT
; _this$ = ecx

; 60   : {

	push	ebx
	push	esi
	mov	esi, ecx

; 61   : 	std::sort(Events.begin(),Events.end(),ev_sort);

	mov	eax, DWORD PTR [esi+4]
	push	edi
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	ebx, eax
	mov	eax, DWORD PTR [esi]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	edi, eax
	add	esp, 8
	cmp	edi, ebx
	je	SHORT $LN22@Dump
	mov	eax, ebx
	sub	eax, edi
	sar	eax, 2
	xor	ecx, ecx
	cmp	eax, 1
	je	SHORT $LN25@Dump
	npad	1
$LL27@Dump:
	sar	eax, 1
	add	ecx, 1
	cmp	eax, 1
	jne	SHORT $LL27@Dump
$LN25@Dump:
	push	OFFSET ?ev_sort@@YA_NPAVCEvent@@0@Z	; ev_sort
	lea	eax, DWORD PTR [ecx+ecx]
	push	eax
	push	0
	push	ebx
	push	edi
	call	??$__introsort_loop@PAPAVCEvent@@PAV1@HP6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@00HP6A_NPAV2@1@Z@Z ; stlp_std::priv::__introsort_loop<CEvent * *,CEvent *,int,bool (__cdecl*)(CEvent *,CEvent *)>
	push	ebx
	call	??$__final_insertion_sort@PAPAVCEvent@@P6A_NPAV1@0@Z@priv@stlp_std@@YAXPAPAVCEvent@@0P6A_NPAV2@1@Z@Z ; stlp_std::priv::__final_insertion_sort<CEvent * *,bool (__cdecl*)(CEvent *,CEvent *)>
	add	esp, 24					; 00000018H
$LN22@Dump:

; 62   : 	for (u32 i=0; i<Events.size(); i++)

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [esi+4]
	sub	ecx, eax
	xor	edi, edi
	sar	ecx, 2
	je	SHORT $LN1@Dump
	push	ebp
	npad	12
$LL3@Dump:

; 63   : 		Msg("* [%d] %s",Events[i]->RefCount(),Events[i]->GetFull());

	push	eax
	lea	ebx, DWORD PTR [edi*4]
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	edx, DWORD PTR [eax+ebx]
	mov	ebp, DWORD PTR [edx]
	add	eax, ebx
	mov	eax, DWORD PTR [esi]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	eax, ebx
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax+16]
	push	ebp
	push	ecx
	push	OFFSET ??_C@_09JKHCDIKO@?$CK?5?$FL?$CFd?$FN?5?$CFs?$AA@
	call	DWORD PTR __imp_?Msg@@YAXPBDZZ
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [esi+4]
	sub	edx, eax
	add	edi, 1
	sar	edx, 2
	add	esp, 20					; 00000014H
	cmp	edi, edx
	jb	SHORT $LL3@Dump
	pop	ebp
$LN1@Dump:
	pop	edi
	pop	esi
	pop	ebx

; 64   : }

	ret	0
?Dump@CEventAPI@@QAEXXZ ENDP				; CEventAPI::Dump
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAE@XZ PROC ; stlp_std::vector<IEventReceiver *,xalloc<IEventReceiver *> >::~vector<IEventReceiver *,xalloc<IEventReceiver *> >, COMDAT
; _this$ = eax
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN36@vector@22
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN36@vector@22:
	ret	0
??1?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAE@XZ ENDP ; stlp_std::vector<IEventReceiver *,xalloc<IEventReceiver *> >::~vector<IEventReceiver *,xalloc<IEventReceiver *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$xr_vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@@QAE@XZ
_TEXT	SEGMENT
??1?$xr_vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@@QAE@XZ PROC ; xr_vector<IEventReceiver *,xalloc<IEventReceiver *> >::~xr_vector<IEventReceiver *,xalloc<IEventReceiver *> >, COMDAT
; _this$ = eax
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN38@xr_vector@19
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN38@xr_vector@19:
	ret	0
??1?$xr_vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@@QAE@XZ ENDP ; xr_vector<IEventReceiver *,xalloc<IEventReceiver *> >::~xr_vector<IEventReceiver *,xalloc<IEventReceiver *> >
_TEXT	ENDS
PUBLIC	?Detach@CEvent@@QAEXPAVIEventReceiver@@@Z	; CEvent::Detach
; Function compile flags: /Ogtpy
;	COMDAT ?Detach@CEvent@@QAEXPAVIEventReceiver@@@Z
_TEXT	SEGMENT
_H$ = 8							; size = 4
?Detach@CEvent@@QAEXPAVIEventReceiver@@@Z PROC		; CEvent::Detach, COMDAT
; _this$ = ecx

; 34   : 	{

	push	ebx
	push	esi
	mov	ebx, ecx

; 35   : 		xr_vector<IEventReceiver*>::iterator I = std::find(Handlers.begin(),Handlers.end(),H);

	mov	eax, DWORD PTR [ebx+8]
	push	edi
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	esi, eax
	mov	eax, DWORD PTR [ebx+4]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	lea	edi, DWORD PTR _H$[esp+16]
	call	??$__find@PAPAVIEventReceiver@@PAV1@@priv@stlp_std@@YAPAPAVIEventReceiver@@PAPAV2@0ABQAV2@ABUrandom_access_iterator_tag@1@@Z ; stlp_std::priv::__find<IEventReceiver * *,IEventReceiver *>
	mov	esi, eax

; 36   : 		if (I!=Handlers.end())

	mov	eax, DWORD PTR [ebx+8]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 12					; 0000000cH
	cmp	esi, eax
	je	SHORT $LN30@Detach

; 37   : 			Handlers.erase(I);

	mov	eax, DWORD PTR [ebx+8]
	lea	ecx, DWORD PTR [esi+4]
	cmp	ecx, eax
	je	SHORT $LN47@Detach
	sub	eax, ecx
	je	SHORT $LN47@Detach
	push	eax
	push	ecx
	push	esi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN47@Detach:
	add	DWORD PTR [ebx+8], -4			; fffffffcH
	mov	ebx, DWORD PTR [ebx+8]
	push	ebx
	call	??$_Destroy@PAX@stlp_std@@YAXPAPAX@Z	; stlp_std::_Destroy<void *>
	push	esi
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 8
$LN30@Detach:
	pop	edi
	pop	esi
	pop	ebx

; 38   : 	}

	ret	4
?Detach@CEvent@@QAEXPAVIEventReceiver@@@Z ENDP		; CEvent::Detach
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.c
;	COMDAT ?_M_insert_overflow@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@AAEXPAUDeferred@CEventAPI@@ABU45@ABU__true_type@3@I_N@Z
_TEXT	SEGMENT
___old_size$ = -12					; size = 4
___fill_len$ = -8					; size = 4
___new_start$ = -4					; size = 4
?_M_insert_overflow@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@AAEXPAUDeferred@CEventAPI@@ABU45@ABU__true_type@3@I_N@Z PROC ; stlp_std::priv::_Impl_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::_M_insert_overflow, COMDAT
; _this$ = ebx
; ___pos$ = eax
; ___x$ = edi

; 109  :                                              size_type __fill_len, bool __atend ) {

	sub	esp, 12					; 0000000cH

; 110  :   const size_type __old_size = size();

	mov	ecx, DWORD PTR [ebx+4]
	sub	ecx, DWORD PTR [ebx]
	push	ebp
	push	esi
	mov	esi, eax
	mov	eax, 715827883				; 2aaaaaabH
	imul	ecx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx

; 111  :   size_type __len = __old_size + (max)(__old_size, __fill_len);

	lea	ecx, DWORD PTR ___fill_len$[esp+20]
	push	ecx
	lea	edx, DWORD PTR ___old_size$[esp+24]
	push	edx
	mov	DWORD PTR ___fill_len$[esp+28], 1
	mov	DWORD PTR ___old_size$[esp+28], eax
	call	??$max@I@stlp_std@@YAABIABI0@Z		; stlp_std::max<unsigned int>
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR ___old_size$[esp+28]

; 112  : 
; 113  :   pointer __new_start = this->_M_end_of_storage.allocate(__len, __len);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	lea	ebp, DWORD PTR [eax+eax*2]
	add	ebp, ebp
	add	ebp, ebp
	add	esp, 8
	add	ebp, ebp
	push	ebp
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 114  :   pointer __new_finish = __STATIC_CAST(pointer, _STLP_PRIV __copy_trivial(this->_M_start, __pos, __new_start));

	mov	ecx, DWORD PTR [ebx]
	sub	esi, ecx
	mov	DWORD PTR ___new_start$[esp+20], eax
	je	SHORT $LN22@M_insert_o@9
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN22@M_insert_o@9:

; 115  :   // handle insertion
; 116  :   __new_finish = _STLP_PRIV __fill_n(__new_finish, __fill_len, __x);

	mov	ecx, DWORD PTR ___fill_len$[esp+20]
	test	ecx, ecx
	mov	esi, eax
	jbe	SHORT $LN24@M_insert_o@9
	npad	7
$LL26@M_insert_o@9:
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
	mov	edx, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], edx
	mov	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], eax
	mov	edx, DWORD PTR [edi+12]
	mov	DWORD PTR [esi+12], edx
	mov	eax, DWORD PTR [edi+16]
	mov	DWORD PTR [esi+16], eax
	mov	edx, DWORD PTR [edi+20]
	mov	DWORD PTR [esi+20], edx
	sub	ecx, 1
	add	esi, 24					; 00000018H
	test	ecx, ecx
	ja	SHORT $LL26@M_insert_o@9
$LN24@M_insert_o@9:

; 117  :   if (!__atend)
; 118  :     __new_finish = __STATIC_CAST(pointer, _STLP_PRIV __copy_trivial(__pos, this->_M_finish, __new_finish)); // copy remainder
; 119  :   _M_clear();

	mov	eax, DWORD PTR [ebx]
	test	eax, eax
	je	SHORT $LN63@M_insert_o@9
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN63@M_insert_o@9:

; 120  :   _M_set(__new_start, __new_finish, __new_start + __len);

	mov	eax, DWORD PTR ___new_start$[esp+20]
	add	ebp, eax
	mov	DWORD PTR [ebx+4], esi

; 121  : }

	pop	esi
	mov	DWORD PTR [ebx+8], ebp
	mov	DWORD PTR [ebx], eax
	pop	ebp
	add	esp, 12					; 0000000cH
	ret	0
?_M_insert_overflow@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@AAEXPAUDeferred@CEventAPI@@ABU45@ABU__true_type@3@I_N@Z ENDP ; stlp_std::priv::_Impl_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::_M_insert_overflow
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?push_back@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@QAEXABUDeferred@CEventAPI@@@Z
_TEXT	SEGMENT
?push_back@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@QAEXABUDeferred@CEventAPI@@@Z PROC ; stlp_std::priv::_Impl_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::push_back, COMDAT
; _this$ = ecx
; ___x$ = eax

; 360  :   void push_back(const _Tp& __x) {

	push	ebx
	mov	ebx, ecx
	push	edi
	mov	edi, eax

; 361  : #endif /*!_STLP_DONT_SUP_DFLT_PARAM && !_STLP_NO_ANACHRONISMS*/
; 362  :     if (this->_M_finish != this->_M_end_of_storage._M_data) {

	mov	eax, DWORD PTR [ebx+4]
	cmp	eax, DWORD PTR [ebx+8]
	je	SHORT $LN2@push_back@16

; 363  :       _Copy_Construct(this->_M_finish, __x);

	test	eax, eax
	je	SHORT $LN7@push_back@16
	mov	ecx, DWORD PTR [edi]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [edi+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [edi+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edi+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR [edi+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR [edi+20]
	mov	DWORD PTR [eax+20], edx
$LN7@push_back@16:

; 364  :       ++this->_M_finish;

	add	DWORD PTR [ebx+4], 24			; 00000018H
	pop	edi
	pop	ebx

; 368  :   }

	ret	0
$LN2@push_back@16:

; 365  :     }
; 366  :     else
; 367  :       _M_insert_overflow(this->_M_finish, __x, _TrivialCopy(), 1UL, true);

	call	?_M_insert_overflow@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@AAEXPAUDeferred@CEventAPI@@ABU45@ABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::_M_insert_overflow
	pop	edi
	pop	ebx

; 368  :   }

	ret	0
?push_back@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@QAEXABUDeferred@CEventAPI@@@Z ENDP ; stlp_std::priv::_Impl_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::push_back
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ??4?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
??4?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAEAAV01@ABV01@@Z PROC ; stlp_std::vector<IEventReceiver *,xalloc<IEventReceiver *> >::operator=, COMDAT
; _this$ = ecx
; ___x$ = eax

; 149  :   _Self& operator=(const _Self& __x) { _M_impl = __x._M_impl; return *this; }

	push	ebx
	mov	ebx, ecx
	push	eax
	call	??4?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::operator=
	mov	eax, ebx
	pop	ebx
	ret	0
??4?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAEAAV01@ABV01@@Z ENDP ; stlp_std::vector<IEventReceiver *,xalloc<IEventReceiver *> >::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAE@ABV01@@Z PROC ; stlp_std::vector<IEventReceiver *,xalloc<IEventReceiver *> >::vector<IEventReceiver *,xalloc<IEventReceiver *> >, COMDAT
; _this$ = esi
; ___x$ = eax

; 123  :   vector(const _Self& __x)

	push	eax
	mov	ecx, esi
	call	??0?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::_Impl_vector<void *,xalloc<void *> >
	mov	eax, esi
	ret	0
??0?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAE@ABV01@@Z ENDP ; stlp_std::vector<IEventReceiver *,xalloc<IEventReceiver *> >::vector<IEventReceiver *,xalloc<IEventReceiver *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xr_vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@@QAE@XZ
_TEXT	SEGMENT
??0?$xr_vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@@QAE@XZ PROC ; xr_vector<IEventReceiver *,xalloc<IEventReceiver *> >::xr_vector<IEventReceiver *,xalloc<IEventReceiver *> >, COMDAT
; _this$ = eax

; 123  : 			xr_vector			()									: inherited	()					{}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$xr_vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@@QAE@XZ ENDP ; xr_vector<IEventReceiver *,xalloc<IEventReceiver *> >::xr_vector<IEventReceiver *,xalloc<IEventReceiver *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?push_back@?$vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@stlp_std@@QAEXABUDeferred@CEventAPI@@@Z
_TEXT	SEGMENT
?push_back@?$vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@stlp_std@@QAEXABUDeferred@CEventAPI@@@Z PROC ; stlp_std::vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::push_back, COMDAT
; _this$ = ecx
; ___x$ = eax

; 171  :   { _M_impl.push_back(cast_traits::to_storage_type_cref(__x)); }

	push	ebx
	mov	ebx, ecx
	push	edi
	mov	edi, eax
	mov	eax, DWORD PTR [ebx+4]
	cmp	eax, DWORD PTR [ebx+8]
	je	SHORT $LN6@push_back@17
	test	eax, eax
	je	SHORT $LN11@push_back@17
	mov	ecx, DWORD PTR [edi]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [edi+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [edi+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edi+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR [edi+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR [edi+20]
	mov	DWORD PTR [eax+20], edx
$LN11@push_back@17:
	add	DWORD PTR [ebx+4], 24			; 00000018H
	pop	edi
	pop	ebx
	ret	0
$LN6@push_back@17:
	call	?_M_insert_overflow@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@AAEXPAUDeferred@CEventAPI@@ABU45@ABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::_M_insert_overflow
	pop	edi
	pop	ebx
	ret	0
?push_back@?$vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@stlp_std@@QAEXABUDeferred@CEventAPI@@@Z ENDP ; stlp_std::vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::push_back
_TEXT	ENDS
PUBLIC	?Defer@CEventAPI@@QAEXPAVCEvent@@_K1@Z		; CEventAPI::Defer
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\eventapi.cpp
;	COMDAT ?Defer@CEventAPI@@QAEXPAVCEvent@@_K1@Z
_TEXT	SEGMENT
$T363991 = -24						; size = 24
_E$ = 8							; size = 4
_P1$ = 12						; size = 8
_P2$ = 20						; size = 8
?Defer@CEventAPI@@QAEXPAVCEvent@@_K1@Z PROC		; CEventAPI::Defer, COMDAT
; _this$ = ecx

; 131  : {

	sub	esp, 24					; 00000018H
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx

; 132  : 	CS.Enter	();

	lea	ebp, DWORD PTR [esi+24]
	push	edi
	mov	ecx, ebp
	call	DWORD PTR __imp_?Enter@xrCriticalSection@@QAEXXZ

; 133  : 	E->dwRefCount++;

	mov	ecx, DWORD PTR _E$[esp+36]
	add	DWORD PTR [ecx+16], 1

; 134  : 	Events_Deferred.push_back	(Deferred());

	xor	eax, eax
	lea	ebx, DWORD PTR [esi+12]
	mov	edx, eax
	mov	edi, eax
	mov	DWORD PTR $T363991[esp+48], eax
	mov	DWORD PTR $T363991[esp+52], eax
	mov	DWORD PTR $T363991[esp+56], eax
	mov	DWORD PTR $T363991[esp+60], eax
	mov	eax, DWORD PTR [ebx+4]
	cmp	eax, DWORD PTR [ebx+8]
	mov	DWORD PTR $T363991[esp+40], edx
	mov	DWORD PTR $T363991[esp+44], edi
	je	SHORT $LN8@Defer
	test	eax, eax
	je	SHORT $LN13@Defer
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], edx
	mov	DWORD PTR [eax+16], edx
	mov	DWORD PTR [eax+20], edx
$LN13@Defer:
	add	DWORD PTR [ebx+4], 24			; 00000018H
	jmp	SHORT $LN7@Defer
$LN8@Defer:
	lea	edi, DWORD PTR $T363991[esp+40]
	call	?_M_insert_overflow@?$_Impl_vector@UDeferred@CEventAPI@@V?$xalloc@UDeferred@CEventAPI@@@@@priv@stlp_std@@AAEXPAUDeferred@CEventAPI@@ABU45@ABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<CEventAPI::Deferred,xalloc<CEventAPI::Deferred> >::_M_insert_overflow
	mov	ecx, DWORD PTR _E$[esp+36]
$LN7@Defer:

; 135  : 	Events_Deferred.back().E	= E;

	mov	eax, DWORD PTR [esi+16]

; 136  : 	Events_Deferred.back().P1	= P1;

	mov	edx, DWORD PTR _P1$[esp+40]
	mov	DWORD PTR [eax-24], ecx
	mov	eax, DWORD PTR [esi+16]
	mov	ecx, DWORD PTR _P1$[esp+36]
	mov	DWORD PTR [eax-16], ecx

; 137  : 	Events_Deferred.back().P2	= P2;

	mov	ecx, DWORD PTR _P2$[esp+40]
	mov	DWORD PTR [eax-12], edx
	mov	esi, DWORD PTR [esi+16]
	mov	eax, DWORD PTR _P2$[esp+36]
	mov	DWORD PTR [esi-4], ecx

; 138  : 	CS.Leave	();

	mov	ecx, ebp
	mov	DWORD PTR [esi-8], eax
	call	DWORD PTR __imp_?Leave@xrCriticalSection@@QAEXXZ

; 139  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 24					; 00000018H
	ret	20					; 00000014H
?Defer@CEventAPI@@QAEXPAVCEvent@@_K1@Z ENDP		; CEventAPI::Defer
_TEXT	ENDS
PUBLIC	??1CEvent@@QAE@XZ				; CEvent::~CEvent
; Function compile flags: /Ogtpy
;	COMDAT ??1CEvent@@QAE@XZ
_TEXT	SEGMENT
??1CEvent@@QAE@XZ PROC					; CEvent::~CEvent, COMDAT
; _this$ = ecx

; 53   : {	xr_free(Name); }

	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	push	edi
	mov	edi, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	je	SHORT $LN3@CEvent
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
	mov	DWORD PTR [esi], 0
$LN3@CEvent:
	mov	esi, DWORD PTR [esi+4]
	test	esi, esi
	je	SHORT $LN43@CEvent
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	edi
$LN43@CEvent:
	pop	edi
	pop	esi
	ret	0
??1CEvent@@QAE@XZ ENDP					; CEvent::~CEvent
_TEXT	ENDS
PUBLIC	??0CEvent@@QAE@PBD@Z				; CEvent::CEvent
; Function compile flags: /Ogtpy
;	COMDAT ??0CEvent@@QAE@PBD@Z
_TEXT	SEGMENT
_S$ = 8							; size = 4
??0CEvent@@QAE@PBD@Z PROC				; CEvent::CEvent, COMDAT
; _this$ = ecx

; 47   : {	

	xor	eax, eax
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], eax

; 48   : 	Name=xr_strdup(S); 

	mov	eax, DWORD PTR _S$[esp]
	push	eax
	call	DWORD PTR __imp_?xr_strdup@@YAPADPBD@Z

; 49   : 	_strupr(Name);

	push	eax
	mov	DWORD PTR [esi], eax
	call	DWORD PTR __imp___strupr
	add	esp, 8

; 50   : 	dwRefCount=1; 

	mov	DWORD PTR [esi+16], 1

; 51   : }

	mov	eax, esi
	pop	esi
	ret	4
??0CEvent@@QAE@PBD@Z ENDP				; CEvent::CEvent
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$xr_vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
??4?$xr_vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@@QAEAAV0@ABV0@@Z PROC ; xr_vector<IEventReceiver *,xalloc<IEventReceiver *> >::operator=, COMDAT
; _this$ = ecx
; ___that$ = eax
	push	ebx
	mov	ebx, ecx
	push	eax
	call	??4?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::operator=
	mov	eax, ebx
	pop	ebx
	ret	0
??4?$xr_vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@@QAEAAV0@ABV0@@Z ENDP ; xr_vector<IEventReceiver *,xalloc<IEventReceiver *> >::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$xr_vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xr_vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@@QAE@ABV0@@Z PROC ; xr_vector<IEventReceiver *,xalloc<IEventReceiver *> >::xr_vector<IEventReceiver *,xalloc<IEventReceiver *> >, COMDAT
; _this$ = esi
; ___that$ = eax
	push	eax
	mov	ecx, esi
	call	??0?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::_Impl_vector<void *,xalloc<void *> >
	mov	eax, esi
	ret	0
??0?$xr_vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@@QAE@ABV0@@Z ENDP ; xr_vector<IEventReceiver *,xalloc<IEventReceiver *> >::xr_vector<IEventReceiver *,xalloc<IEventReceiver *> >
_TEXT	ENDS
PUBLIC	??4CEvent@@QAEAAV0@ABV0@@Z			; CEvent::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4CEvent@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4CEvent@@QAEAAV0@ABV0@@Z PROC				; CEvent::operator=, COMDAT
; _this$ = ecx
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR ___that$[esp+8]
	mov	eax, DWORD PTR [edi]
	mov	esi, ecx
	lea	ecx, DWORD PTR [edi+4]
	push	ecx
	lea	ebx, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], eax
	call	??4?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::operator=
	mov	edx, DWORD PTR [edi+16]
	pop	edi
	mov	DWORD PTR [esi+16], edx
	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??4CEvent@@QAEAAV0@ABV0@@Z ENDP				; CEvent::operator=
_TEXT	ENDS
PUBLIC	??0CEvent@@QAE@ABV0@@Z				; CEvent::CEvent
; Function compile flags: /Ogtpy
;	COMDAT ??0CEvent@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0CEvent@@QAE@ABV0@@Z PROC				; CEvent::CEvent, COMDAT
; _this$ = ecx
	push	esi
	push	edi
	mov	edi, DWORD PTR ___that$[esp+4]
	mov	eax, DWORD PTR [edi]
	mov	esi, ecx
	lea	ecx, DWORD PTR [edi+4]
	push	ecx
	lea	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], eax
	call	??0?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::_Impl_vector<void *,xalloc<void *> >
	mov	edx, DWORD PTR [edi+16]
	pop	edi
	mov	DWORD PTR [esi+16], edx
	mov	eax, esi
	pop	esi
	ret	4
??0CEvent@@QAE@ABV0@@Z ENDP				; CEvent::CEvent
; Function compile flags: /Ogtpy
;	COMDAT ??_GCEvent@@QAEPAXI@Z
_TEXT	SEGMENT
??_GCEvent@@QAEPAXI@Z PROC				; CEvent::`scalar deleting destructor', COMDAT
; _this$ = esi
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	push	edi
	mov	edi, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	je	SHORT $LN6@scalar@57
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
	mov	DWORD PTR [esi], 0
$LN6@scalar@57:
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN54@scalar@57
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
$LN54@scalar@57:
	mov	eax, esi
	pop	edi
	ret	0
??_GCEvent@@QAEPAXI@Z ENDP				; CEvent::`scalar deleting destructor'
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrmemory_subst_msvc.h
_TEXT	ENDS
;	COMDAT ??R?$xr_special_free@$0A@VCEvent@@@@QAEXAAPAVCEvent@@@Z
_TEXT	SEGMENT
??R?$xr_special_free@$0A@VCEvent@@@@QAEXAAPAVCEvent@@@Z PROC ; xr_special_free<0,CEvent>::operator(), COMDAT
; _ptr$ = ebx

; 142  : 	{

	push	esi

; 143  : 		ptr->~T			();

	mov	esi, DWORD PTR [ebx]
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	push	edi
	mov	edi, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	je	SHORT $LN8@operator@109
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
	mov	DWORD PTR [esi], 0
$LN8@operator@109:
	mov	esi, DWORD PTR [esi+4]
	test	esi, esi
	je	SHORT $LN48@operator@109
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	edi
$LN48@operator@109:

; 144  : 		Memory.mem_free	(ptr);

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi

; 145  : 	}

	pop	edi
	pop	esi
	ret	0
??R?$xr_special_free@$0A@VCEvent@@@@QAEXAAPAVCEvent@@@Z ENDP ; xr_special_free<0,CEvent>::operator()
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$xr_delete@VCEvent@@@@YAXAAPAVCEvent@@@Z
_TEXT	SEGMENT
??$xr_delete@VCEvent@@@@YAXAAPAVCEvent@@@Z PROC		; xr_delete<CEvent>, COMDAT
; _ptr$ = ebx

; 150  : {

	push	esi

; 151  : 	if (ptr) 

	mov	esi, DWORD PTR [ebx]
	test	esi, esi
	push	edi
	je	SHORT $LN1@xr_delete@36

; 152  : 	{
; 153  : 		xr_special_free<is_polymorphic<T>::result,T>()(ptr);

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	mov	edi, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	je	SHORT $LN11@xr_delete@36
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
	mov	DWORD PTR [esi], 0
$LN11@xr_delete@36:
	mov	esi, DWORD PTR [esi+4]
	test	esi, esi
	je	SHORT $LN51@xr_delete@36
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	edi
$LN51@xr_delete@36:
	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi

; 154  : 		ptr = NULL;

	mov	DWORD PTR [ebx], 0
$LN1@xr_delete@36:

; 155  : 	}
; 156  : }

	pop	edi
	pop	esi
	ret	0
??$xr_delete@VCEvent@@@@YAXAAPAVCEvent@@@Z ENDP		; xr_delete<CEvent>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$xr_new@VCEvent@@PBD@@YAPAVCEvent@@ABQBD@Z
_TEXT	SEGMENT
_p1$ = 8						; size = 4
??$xr_new@VCEvent@@PBD@@YAPAVCEvent@@ABQBD@Z PROC	; xr_new<CEvent,char const *>, COMDAT

; 74   : 	T* ptr	= (T*)Memory.mem_alloc(sizeof(T));

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	push	20					; 00000014H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 75   : 	return new (ptr) T(p1);

	mov	esi, eax
	xor	ecx, ecx
	cmp	esi, ecx
	je	SHORT $LN3@xr_new@26
	mov	eax, DWORD PTR _p1$[esp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [esi+4], ecx
	mov	DWORD PTR [esi+8], ecx
	push	eax
	mov	DWORD PTR [esi+12], ecx
	call	DWORD PTR __imp_?xr_strdup@@YAPADPBD@Z
	push	eax
	mov	DWORD PTR [esi], eax
	call	DWORD PTR __imp___strupr
	add	esp, 8
	mov	DWORD PTR [esi+16], 1
	mov	eax, esi
	pop	esi

; 76   : }

	ret	0
$LN3@xr_new@26:

; 75   : 	return new (ptr) T(p1);

	xor	eax, eax
	pop	esi

; 76   : }

	ret	0
??$xr_new@VCEvent@@PBD@@YAPAVCEvent@@ABQBD@Z ENDP	; xr_new<CEvent,char const *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?clear@?$vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@stlp_std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@stlp_std@@QAEXXZ PROC ; stlp_std::vector<CEvent *,xalloc<CEvent *> >::clear, COMDAT
; _this$ = edi

; 223  :   void clear() { _M_impl.clear(); }

	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ecx
	je	SHORT $LN12@clear@40
	push	esi
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN18@clear@40
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN18@clear@40:
	mov	DWORD PTR [edi+4], eax
	pop	esi
$LN12@clear@40:
	ret	0
?clear@?$vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@stlp_std@@QAEXXZ ENDP ; stlp_std::vector<CEvent *,xalloc<CEvent *> >::clear
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?clear_and_free@?$xr_vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear_and_free@?$xr_vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@@QAEXXZ PROC ; xr_vector<CEvent *,xalloc<CEvent *> >::clear_and_free, COMDAT
; _this$ = edi

; 128  : 	void	clear_and_free		()									{ inherited::clear();			}

	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ecx
	je	SHORT $LN14@clear_and_@11
	push	esi
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN20@clear_and_@11
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN20@clear_and_@11:
	mov	DWORD PTR [edi+4], eax
	pop	esi
$LN14@clear_and_@11:
	ret	0
?clear_and_free@?$xr_vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@@QAEXXZ ENDP ; xr_vector<CEvent *,xalloc<CEvent *> >::clear_and_free
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ?push_back@?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAEXABQAVIEventReceiver@@@Z
_TEXT	SEGMENT
?push_back@?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAEXABQAVIEventReceiver@@@Z PROC ; stlp_std::vector<IEventReceiver *,xalloc<IEventReceiver *> >::push_back, COMDAT
; _this$ = ecx
; ___x$ = eax

; 171  :   { _M_impl.push_back(cast_traits::to_storage_type_cref(__x)); }

	push	edi
	mov	edi, ecx
	mov	ecx, DWORD PTR [edi+4]
	cmp	ecx, DWORD PTR [edi+8]
	je	SHORT $LN8@push_back@37
	push	eax
	push	ecx
	call	??$_Copy_Construct@PAX@stlp_std@@YAXPAPAXABQAX@Z ; stlp_std::_Copy_Construct<void *>
	add	esp, 8
	add	DWORD PTR [edi+4], 4
	pop	edi
	ret	0
$LN8@push_back@37:
	push	1
	push	1
	push	ecx
	call	?_M_insert_overflow@?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@AAEXPAPAXABQAXABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::_M_insert_overflow
	pop	edi
	ret	0
?push_back@?$vector@PAVIEventReceiver@@V?$xalloc@PAVIEventReceiver@@@@@stlp_std@@QAEXABQAVIEventReceiver@@@Z ENDP ; stlp_std::vector<IEventReceiver *,xalloc<IEventReceiver *> >::push_back
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?push_back@?$vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@stlp_std@@QAEXABQAVCEvent@@@Z
_TEXT	SEGMENT
?push_back@?$vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@stlp_std@@QAEXABQAVCEvent@@@Z PROC ; stlp_std::vector<CEvent *,xalloc<CEvent *> >::push_back, COMDAT
; _this$ = ecx
; ___x$ = eax

; 171  :   { _M_impl.push_back(cast_traits::to_storage_type_cref(__x)); }

	push	edi
	mov	edi, ecx
	mov	ecx, DWORD PTR [edi+4]
	cmp	ecx, DWORD PTR [edi+8]
	je	SHORT $LN8@push_back@38
	push	eax
	push	ecx
	call	??$_Copy_Construct@PAX@stlp_std@@YAXPAPAXABQAX@Z ; stlp_std::_Copy_Construct<void *>
	add	esp, 8
	add	DWORD PTR [edi+4], 4
	pop	edi
	ret	0
$LN8@push_back@38:
	push	1
	push	1
	push	ecx
	call	?_M_insert_overflow@?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@AAEXPAPAXABQAXABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::_M_insert_overflow
	pop	edi
	ret	0
?push_back@?$vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@stlp_std@@QAEXABQAVCEvent@@@Z ENDP ; stlp_std::vector<CEvent *,xalloc<CEvent *> >::push_back
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?clear@?$xr_vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$xr_vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@@QAEXXZ PROC ; xr_vector<CEvent *,xalloc<CEvent *> >::clear, COMDAT
; _this$ = edi

; 133  : 	void	clear				()									{ clear_and_free	();			}

	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ecx
	je	SHORT $LN16@clear@41
	push	esi
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN22@clear@41
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN22@clear@41:
	mov	DWORD PTR [edi+4], eax
	pop	esi
$LN16@clear@41:
	ret	0
?clear@?$xr_vector@PAVCEvent@@V?$xalloc@PAVCEvent@@@@@@QAEXXZ ENDP ; xr_vector<CEvent *,xalloc<CEvent *> >::clear
_TEXT	ENDS
PUBLIC	?_destroy@CEventAPI@@QAEXXZ			; CEventAPI::_destroy
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\eventapi.cpp
;	COMDAT ?_destroy@CEventAPI@@QAEXXZ
_TEXT	SEGMENT
?_destroy@CEventAPI@@QAEXXZ PROC			; CEventAPI::_destroy, COMDAT
; _this$ = ecx

; 199  : {

	push	ebx
	push	esi
	push	edi
	mov	edi, ecx

; 200  : 	Dump	();

	call	?Dump@CEventAPI@@QAEXXZ			; CEventAPI::Dump

; 201  : 	if (Events.empty())				Events.clear();

	mov	ecx, edi
	call	?empty@?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@QBE_NXZ ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::empty
	test	al, al
	mov	ebx, DWORD PTR __imp__memmove
	je	SHORT $LN24@destroy@5
	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ecx
	je	SHORT $LN24@destroy@5
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN30@destroy@5
	push	esi
	push	ecx
	push	eax
	call	ebx
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN30@destroy@5:
	mov	DWORD PTR [edi+4], eax
$LN24@destroy@5:

; 202  : 	if (Events_Deferred.empty())	Events_Deferred.clear();

	mov	eax, DWORD PTR [edi+12]
	cmp	eax, DWORD PTR [edi+16]
	jne	SHORT $LN51@destroy@5
	mov	ecx, DWORD PTR [edi+16]
	cmp	eax, ecx
	je	SHORT $LN51@destroy@5
	mov	esi, ecx
	sub	esi, ecx
	je	SHORT $LN57@destroy@5
	push	esi
	push	ecx
	push	eax
	call	ebx
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN57@destroy@5:
	mov	DWORD PTR [edi+16], eax
$LN51@destroy@5:
	pop	edi
	pop	esi
	pop	ebx

; 203  : }

	ret	0
?_destroy@CEventAPI@@QAEXXZ ENDP			; CEventAPI::_destroy
_TEXT	ENDS
PUBLIC	?Destroy@CEventAPI@@QAEXAAPAVCEvent@@@Z		; CEventAPI::Destroy
; Function compile flags: /Ogtpy
;	COMDAT ?Destroy@CEventAPI@@QAEXAAPAVCEvent@@@Z
_TEXT	SEGMENT
_E$ = 8							; size = 4
?Destroy@CEventAPI@@QAEXAAPAVCEvent@@@Z PROC		; CEventAPI::Destroy, COMDAT
; _this$ = ecx

; 86   : {

	push	ebx
	push	ebp
	mov	ebx, ecx
	push	esi

; 87   : 	CS.Enter	();

	lea	ebp, DWORD PTR [ebx+24]
	push	edi
	mov	ecx, ebp
	call	DWORD PTR __imp_?Enter@xrCriticalSection@@QAEXXZ

; 88   : 	E->dwRefCount--;

	mov	edi, DWORD PTR _E$[esp+12]
	mov	eax, DWORD PTR [edi]
	add	DWORD PTR [eax+16], -1

; 89   : 	if (E->dwRefCount == 0) 

	mov	eax, DWORD PTR [edi]
	cmp	DWORD PTR [eax+16], 0
	jne	$LN61@Destroy@9

; 90   : 	{
; 91   : 		xr_vector<CEvent*>::iterator I = std::find(Events.begin(),Events.end(),E);

	mov	eax, DWORD PTR [ebx+4]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	esi, eax
	mov	eax, DWORD PTR [ebx]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 8
	call	??$__find@PAPAVCEvent@@PAV1@@priv@stlp_std@@YAPAPAVCEvent@@PAPAV2@0ABQAV2@ABUrandom_access_iterator_tag@1@@Z ; stlp_std::priv::__find<CEvent * *,CEvent *>

; 92   : 		R_ASSERT(I!=Events.end());

	cmp	BYTE PTR ?ignore_always@?6??Destroy@CEventAPI@@QAEXAAPAVCEvent@@@Z@4_NA, 0
	mov	esi, eax
	jne	SHORT $LN3@Destroy@9
	mov	eax, DWORD PTR [ebx+4]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	cmp	esi, eax
	jne	SHORT $LN3@Destroy@9
	mov	ecx, DWORD PTR __imp_?Debug@@3VxrDebug@@A
	push	OFFSET ?ignore_always@?6??Destroy@CEventAPI@@QAEXAAPAVCEvent@@@Z@4_NA
	push	OFFSET ??_C@_0BD@PFJONIMB@CEventAPI?3?3Destroy?$AA@
	push	92					; 0000005cH
	push	OFFSET ??_C@_0DB@NLNFIAGG@D?3?2CLEARSKY?2sources?2engine?2xrEng@
	push	OFFSET ??_C@_0BA@OAFOGMEL@I?$CB?$DNEvents?4end?$CI?$CJ?$AA@
	call	DWORD PTR __imp_?fail@xrDebug@@QAEXPBD0H0AA_N@Z
$LN3@Destroy@9:

; 93   : 		Events.erase(I);

	mov	eax, DWORD PTR [ebx+4]
	lea	ecx, DWORD PTR [esi+4]
	cmp	ecx, eax
	je	SHORT $LN51@Destroy@9
	sub	eax, ecx
	je	SHORT $LN51@Destroy@9
	push	eax
	push	ecx
	push	esi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN51@Destroy@9:
	add	DWORD PTR [ebx+4], -4			; fffffffcH
	mov	ebx, DWORD PTR [ebx+4]
	push	ebx
	call	??$_Destroy@PAX@stlp_std@@YAXPAPAX@Z	; stlp_std::_Destroy<void *>
	push	esi
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr

; 94   : 		xr_delete	(E);

	mov	esi, DWORD PTR [edi]
	add	esp, 8
	test	esi, esi
	je	SHORT $LN61@Destroy@9
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	mov	ebx, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	je	SHORT $LN71@Destroy@9
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	ebx
	mov	DWORD PTR [esi], 0
$LN71@Destroy@9:
	mov	esi, DWORD PTR [esi+4]
	test	esi, esi
	je	SHORT $LN111@Destroy@9
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	ebx
$LN111@Destroy@9:
	mov	ecx, DWORD PTR [edi]
	push	ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	ebx
	mov	DWORD PTR [edi], 0
$LN61@Destroy@9:

; 95   : 	}
; 96   : 	CS.Leave	();

	mov	ecx, ebp
	call	DWORD PTR __imp_?Leave@xrCriticalSection@@QAEXXZ

; 97   : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	4
?Destroy@CEventAPI@@QAEXAAPAVCEvent@@@Z ENDP		; CEventAPI::Destroy
_TEXT	ENDS
PUBLIC	?Create@CEventAPI@@QAEPAVCEvent@@PBD@Z		; CEventAPI::Create
; Function compile flags: /Ogtpy
;	COMDAT ?Create@CEventAPI@@QAEPAVCEvent@@PBD@Z
_TEXT	SEGMENT
_X$ = -32						; size = 4
$T427799 = -28						; size = 4
tv544 = -24						; size = 4
_E$ = -20						; size = 20
___old_size$427894 = 8					; size = 4
_N$ = 8							; size = 4
?Create@CEventAPI@@QAEPAVCEvent@@PBD@Z PROC		; CEventAPI::Create, COMDAT
; _this$ = ecx

; 67   : {

	sub	esp, 32					; 00000020H
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx

; 68   : 	CS.Enter	();

	lea	ebx, DWORD PTR [esi+24]
	push	edi
	mov	ecx, ebx
	mov	DWORD PTR tv544[esp+48], ebx
	call	DWORD PTR __imp_?Enter@xrCriticalSection@@QAEXXZ

; 69   : 	CEvent	E	(N);

	mov	eax, DWORD PTR _N$[esp+44]
	push	eax
	call	DWORD PTR __imp_?xr_strdup@@YAPADPBD@Z
	mov	ebp, eax
	push	ebp
	mov	DWORD PTR _E$[esp+56], ebp
	call	DWORD PTR __imp___strupr

; 70   : 	for (xr_vector<CEvent*>::iterator I=Events.begin(); I!=Events.end(); I++)

	mov	eax, DWORD PTR [esi]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	edi, eax
	mov	eax, DWORD PTR [esi+4]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 16					; 00000010H
	cmp	edi, eax
	je	SHORT $LN2@Create
	npad	6
$LL4@Create:

; 71   : 	{
; 72   : 		if ((*I)->Equal(E)) {

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax]
	push	ebp
	push	ecx
	call	DWORD PTR __imp__stricmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN242@Create
	mov	eax, DWORD PTR [esi+4]
	push	eax
	add	edi, 4
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 4
	cmp	edi, eax
	jne	SHORT $LL4@Create
$LN2@Create:

; 77   : 		}
; 78   : 	}
; 79   : 
; 80   : 	EVENT X = xr_new<CEvent>	(N);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	20					; 00000014H
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	mov	edi, eax
	xor	eax, eax
	cmp	edi, eax
	je	SHORT $LN90@Create
	mov	edx, DWORD PTR _N$[esp+44]
	mov	DWORD PTR [edi+4], eax
	mov	DWORD PTR [edi+8], eax
	push	edx
	mov	DWORD PTR [edi+12], eax
	call	DWORD PTR __imp_?xr_strdup@@YAPADPBD@Z
	push	eax
	mov	DWORD PTR [edi], eax
	call	DWORD PTR __imp___strupr
	mov	DWORD PTR [edi+16], 1
	add	esp, 8
	mov	DWORD PTR _X$[esp+48], edi
	jmp	SHORT $LN91@Create
$LN242@Create:

; 73   : 			EVENT F		= *I;

	mov	edi, DWORD PTR [edi]

; 74   : 			F->dwRefCount++;

	add	DWORD PTR [edi+16], 1

; 75   : 			CS.Leave	();

	mov	ecx, ebx
	call	DWORD PTR __imp_?Leave@xrCriticalSection@@QAEXXZ

; 76   : 			return		F;

	test	ebp, ebp
	je	SHORT $LN85@Create
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	ebp
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN85@Create:
	mov	eax, edi

; 84   : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 32					; 00000020H
	ret	4

; 77   : 		}
; 78   : 	}
; 79   : 
; 80   : 	EVENT X = xr_new<CEvent>	(N);

$LN90@Create:
	mov	DWORD PTR _X$[esp+48], eax
$LN91@Create:

; 81   : 	Events.push_back			(X);

	mov	edi, DWORD PTR [esi+4]
	cmp	edi, DWORD PTR [esi+8]
	je	SHORT $LN119@Create
	lea	eax, DWORD PTR _X$[esp+48]
	push	eax
	push	edi
	call	??$_Copy_Construct@PAX@stlp_std@@YAXPAPAXABQAX@Z ; stlp_std::_Copy_Construct<void *>
	add	esp, 8
	add	DWORD PTR [esi+4], 4
	jmp	$LN193@Create
$LN119@Create:
	mov	ecx, edi
	sub	ecx, DWORD PTR [esi]
	lea	edx, DWORD PTR $T427799[esp+48]
	push	edx
	lea	eax, DWORD PTR ___old_size$427894[esp+48]
	sar	ecx, 2
	push	eax
	mov	DWORD PTR $T427799[esp+56], 1
	mov	DWORD PTR ___old_size$427894[esp+52], ecx
	call	??$max@I@stlp_std@@YAABIABI0@Z		; stlp_std::max<unsigned int>
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR ___old_size$427894[esp+52]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	esp, 8
	lea	ebp, DWORD PTR [eax*4]
	push	ebp
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	mov	ebx, eax
	mov	eax, DWORD PTR [esi]
	sub	edi, eax
	je	SHORT $LN149@Create
	push	edi
	push	eax
	push	ebx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, edi
	jmp	SHORT $LN150@Create
$LN149@Create:
	mov	eax, ebx
$LN150@Create:
	mov	ecx, DWORD PTR $T427799[esp+48]
	test	ecx, ecx
	mov	edi, eax
	jbe	SHORT $LN151@Create
	npad	6
$LL153@Create:
	mov	edx, DWORD PTR _X$[esp+48]
	mov	DWORD PTR [edi], edx
	sub	ecx, 1
	add	edi, 4
	test	ecx, ecx
	ja	SHORT $LL153@Create
$LN151@Create:
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN190@Create
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN190@Create:
	add	ebp, ebx
	mov	DWORD PTR [esi], ebx
	mov	ebx, DWORD PTR tv544[esp+48]
	mov	DWORD PTR [esi+8], ebp
	mov	ebp, DWORD PTR _E$[esp+48]
	mov	DWORD PTR [esi+4], edi
$LN193@Create:

; 82   : 	CS.Leave					( );

	mov	ecx, ebx
	call	DWORD PTR __imp_?Leave@xrCriticalSection@@QAEXXZ

; 83   : 	return X;

	test	ebp, ebp
	mov	esi, DWORD PTR _X$[esp+48]
	je	SHORT $LN237@Create
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	ebp
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN237@Create:

; 84   : }

	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 32					; 00000020H
	ret	4
?Create@CEventAPI@@QAEPAVCEvent@@PBD@Z ENDP		; CEventAPI::Create
_TEXT	ENDS
PUBLIC	?Attach@CEvent@@QAEXPAVIEventReceiver@@@Z	; CEvent::Attach
; Function compile flags: /Ogtpy
;	COMDAT ?Attach@CEvent@@QAEXPAVIEventReceiver@@@Z
_TEXT	SEGMENT
_H$ = 8							; size = 4
?Attach@CEvent@@QAEXPAVIEventReceiver@@@Z PROC		; CEvent::Attach, COMDAT
; _this$ = ecx

; 29   : 	{

	push	ebx
	push	ebp
	push	esi
	mov	ebx, ecx

; 30   : 		if (std::find(Handlers.begin(),Handlers.end(),H)==Handlers.end())

	mov	eax, DWORD PTR [ebx+8]
	push	edi
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	mov	esi, eax
	mov	eax, DWORD PTR [ebx+4]
	lea	ebp, DWORD PTR [ebx+4]
	push	eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	lea	edi, DWORD PTR _H$[esp+20]
	call	??$__find@PAPAVIEventReceiver@@PAV1@@priv@stlp_std@@YAPAPAVIEventReceiver@@PAPAV2@0ABQAV2@ABUrandom_access_iterator_tag@1@@Z ; stlp_std::priv::__find<IEventReceiver * *,IEventReceiver *>
	mov	ebx, DWORD PTR [ebx+8]
	push	ebx
	mov	esi, eax
	call	?cv_ptr@?$_VoidCastTraitsAux@PAXPAX@priv@stlp_std@@SAPAPAXPAPAX@Z ; stlp_std::priv::_VoidCastTraitsAux<void *,void *>::cv_ptr
	add	esp, 12					; 0000000cH
	cmp	esi, eax
	jne	SHORT $LN36@Attach

; 31   : 			Handlers.push_back(H);

	mov	eax, DWORD PTR [ebp+4]
	cmp	eax, DWORD PTR [ebp+8]
	je	SHORT $LN37@Attach
	mov	ecx, edi
	push	ecx
	push	eax
	call	??$_Copy_Construct@PAX@stlp_std@@YAXPAPAXABQAX@Z ; stlp_std::_Copy_Construct<void *>
	add	esp, 8
	add	DWORD PTR [ebp+4], 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 32   : 	}

	ret	4

; 31   : 			Handlers.push_back(H);

$LN37@Attach:
	push	1
	push	1
	push	eax
	lea	eax, DWORD PTR _H$[esp+24]
	mov	edi, ebp
	call	?_M_insert_overflow@?$_Impl_vector@PAXV?$xalloc@PAX@@@priv@stlp_std@@AAEXPAPAXABQAXABU__true_type@3@I_N@Z ; stlp_std::priv::_Impl_vector<void *,xalloc<void *> >::_M_insert_overflow
$LN36@Attach:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 32   : 	}

	ret	4
?Attach@CEvent@@QAEXPAVIEventReceiver@@@Z ENDP		; CEvent::Attach
PUBLIC	?OnFrame@CEventAPI@@QAEXXZ			; CEventAPI::OnFrame
; Function compile flags: /Ogtpy
;	COMDAT ?OnFrame@CEventAPI@@QAEXXZ
_TEXT	SEGMENT
tv256 = -24						; size = 4
$T483773 = -20						; size = 4
$T483774 = -16						; size = 8
$T483775 = -8						; size = 8
?OnFrame@CEventAPI@@QAEXXZ PROC				; CEventAPI::OnFrame, COMDAT
; _this$ = ecx

; 165  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 24					; 00000018H
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx

; 166  : #ifdef DEBUG
; 167  : 	msRead		();
; 168  : #endif
; 169  : 	CS.Enter	();

	lea	ebp, DWORD PTR [esi+24]
	push	edi
	mov	ecx, ebp
	mov	DWORD PTR tv256[esp+40], ebp
	call	DWORD PTR __imp_?Enter@xrCriticalSection@@QAEXXZ

; 170  : 	if (Events_Deferred.empty())	{ CS.Leave(); return; }

	mov	eax, DWORD PTR [esi+12]
	cmp	eax, DWORD PTR [esi+16]
	je	$LN56@OnFrame@4

; 171  : 	for (u32 I=0; I<Events_Deferred.size(); I++)

	mov	ecx, DWORD PTR [esi+16]
	sub	ecx, eax
	mov	eax, 715827883				; 2aaaaaabH
	imul	ecx
	sar	edx, 2
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	xor	ebx, ebx
	add	ecx, edx
	je	$LN1@OnFrame@4
	xor	edi, edi
	npad	6
$LL3@OnFrame@4:

; 172  : 	{
; 173  : 		Deferred&	DEF = Events_Deferred[I];

	mov	eax, DWORD PTR [esi+12]

; 174  : 		Signal		(DEF.E,DEF.P1,DEF.P2);

	mov	edx, DWORD PTR [eax+edi+20]
	mov	ecx, DWORD PTR [eax+edi+8]
	mov	ebp, DWORD PTR [eax+edi+16]
	add	eax, edi
	mov	DWORD PTR $T483775[esp+44], edx
	mov	edx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR $T483774[esp+40], ecx
	mov	ecx, DWORD PTR tv256[esp+40]
	mov	DWORD PTR $T483774[esp+44], edx
	mov	DWORD PTR $T483773[esp+40], eax
	call	DWORD PTR __imp_?Enter@xrCriticalSection@@QAEXXZ
	mov	ecx, DWORD PTR $T483775[esp+44]
	mov	edx, DWORD PTR $T483774[esp+44]
	mov	eax, DWORD PTR $T483774[esp+40]
	push	ecx
	mov	ecx, DWORD PTR $T483773[esp+44]
	push	ebp
	push	edx
	push	eax
	call	?Signal@CEvent@@QAEX_K0@Z		; CEvent::Signal
	mov	ecx, DWORD PTR tv256[esp+40]
	call	DWORD PTR __imp_?Leave@xrCriticalSection@@QAEXXZ

; 175  : 		Destroy		(Events_Deferred[I].E);

	mov	ecx, DWORD PTR [esi+12]
	add	ecx, edi
	push	ecx
	mov	ecx, esi
	call	?Destroy@CEventAPI@@QAEXAAPAVCEvent@@@Z	; CEventAPI::Destroy
	mov	ecx, DWORD PTR [esi+16]
	sub	ecx, DWORD PTR [esi+12]
	mov	eax, 715827883				; 2aaaaaabH
	imul	ecx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	ebx, 1
	add	eax, edx
	add	edi, 24					; 00000018H
	cmp	ebx, eax
	jb	$LL3@OnFrame@4

; 171  : 	for (u32 I=0; I<Events_Deferred.size(); I++)

	mov	ebp, DWORD PTR tv256[esp+40]
$LN1@OnFrame@4:

; 176  : 	}
; 177  : 	Events_Deferred.clear();

	mov	ecx, DWORD PTR [esi+16]
	mov	eax, DWORD PTR [esi+12]
	cmp	eax, ecx
	je	SHORT $LN56@OnFrame@4
	mov	edi, ecx
	sub	edi, ecx
	je	SHORT $LN62@OnFrame@4
	push	edi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, edi
$LN62@OnFrame@4:
	mov	DWORD PTR [esi+16], eax
$LN56@OnFrame@4:

; 178  : 	CS.Leave	();

	mov	ecx, ebp
	call	DWORD PTR __imp_?Leave@xrCriticalSection@@QAEXXZ

; 179  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?OnFrame@CEventAPI@@QAEXXZ ENDP				; CEventAPI::OnFrame
_TEXT	ENDS
PUBLIC	?Defer@CEventAPI@@QAEXPBD_K1@Z			; CEventAPI::Defer
; Function compile flags: /Ogtpy
;	COMDAT ?Defer@CEventAPI@@QAEXPBD_K1@Z
_TEXT	SEGMENT
_E$ = -4						; size = 4
_N$ = 8							; size = 4
_P1$ = 12						; size = 8
_P2$ = 20						; size = 8
?Defer@CEventAPI@@QAEXPBD_K1@Z PROC			; CEventAPI::Defer, COMDAT
; _this$ = ecx

; 141  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 8
	push	esi
	mov	esi, ecx
	push	edi

; 142  : 	CS.Enter	();

	lea	edi, DWORD PTR [esi+24]
	mov	ecx, edi
	call	DWORD PTR __imp_?Enter@xrCriticalSection@@QAEXXZ

; 143  : 	EVENT	E	= Create(N);

	mov	eax, DWORD PTR _N$[ebp]
	push	eax
	mov	ecx, esi
	call	?Create@CEventAPI@@QAEPAVCEvent@@PBD@Z	; CEventAPI::Create

; 144  : 	Defer		(E,P1,P2);

	mov	ecx, DWORD PTR _P2$[ebp+4]
	mov	edx, DWORD PTR _P2$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _P1$[ebp+4]
	push	edx
	mov	edx, DWORD PTR _P1$[ebp]
	push	ecx
	push	edx
	push	eax
	mov	ecx, esi
	mov	DWORD PTR _E$[esp+36], eax
	call	?Defer@CEventAPI@@QAEXPAVCEvent@@_K1@Z	; CEventAPI::Defer

; 145  : 	Destroy		(E);

	lea	eax, DWORD PTR _E$[esp+16]
	push	eax
	mov	ecx, esi
	call	?Destroy@CEventAPI@@QAEXAAPAVCEvent@@@Z	; CEventAPI::Destroy

; 146  : 	CS.Leave	();

	mov	ecx, edi
	call	DWORD PTR __imp_?Leave@xrCriticalSection@@QAEXXZ

; 147  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Defer@CEventAPI@@QAEXPBD_K1@Z ENDP			; CEventAPI::Defer
_TEXT	ENDS
PUBLIC	?Signal@CEventAPI@@QAEXPBD_K1@Z			; CEventAPI::Signal
; Function compile flags: /Ogtpy
;	COMDAT ?Signal@CEventAPI@@QAEXPBD_K1@Z
_TEXT	SEGMENT
_E$ = -4						; size = 4
_N$ = 8							; size = 4
_P1$ = 12						; size = 8
_P2$ = 20						; size = 8
?Signal@CEventAPI@@QAEXPBD_K1@Z PROC			; CEventAPI::Signal, COMDAT
; _this$ = ecx

; 123  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	push	ecx
	push	ebx

; 124  : 	CS.Enter	();

	mov	ebx, DWORD PTR __imp_?Enter@xrCriticalSection@@QAEXXZ
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR [edi+24]
	mov	ecx, esi
	call	ebx

; 125  : 	EVENT		E = Create(N);

	mov	eax, DWORD PTR _N$[ebp]
	push	eax
	mov	ecx, edi
	call	?Create@CEventAPI@@QAEPAVCEvent@@PBD@Z	; CEventAPI::Create

; 126  : 	Signal		(E,P1,P2);

	mov	ecx, esi
	mov	DWORD PTR _E$[esp+16], eax
	call	ebx
	mov	ecx, DWORD PTR _P2$[ebp+4]
	mov	edx, DWORD PTR _P2$[ebp]
	mov	eax, DWORD PTR _P1$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR _P1$[ebp]
	push	edx
	push	eax
	push	ecx
	mov	ecx, DWORD PTR _E$[esp+32]
	call	?Signal@CEvent@@QAEX_K0@Z		; CEvent::Signal
	mov	ebx, DWORD PTR __imp_?Leave@xrCriticalSection@@QAEXXZ
	mov	ecx, esi
	call	ebx

; 127  : 	Destroy		(E);

	lea	edx, DWORD PTR _E$[esp+16]
	push	edx
	mov	ecx, edi
	call	?Destroy@CEventAPI@@QAEXAAPAVCEvent@@@Z	; CEventAPI::Destroy

; 128  : 	CS.Leave	();

	mov	ecx, esi
	call	ebx

; 129  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Signal@CEventAPI@@QAEXPBD_K1@Z ENDP			; CEventAPI::Signal
_TEXT	ENDS
PUBLIC	?Handler_Detach@CEventAPI@@QAEXAAPAVCEvent@@PAVIEventReceiver@@@Z ; CEventAPI::Handler_Detach
; Function compile flags: /Ogtpy
;	COMDAT ?Handler_Detach@CEventAPI@@QAEXAAPAVCEvent@@PAVIEventReceiver@@@Z
_TEXT	SEGMENT
_E$ = 8							; size = 4
_H$ = 12						; size = 4
?Handler_Detach@CEventAPI@@QAEXAAPAVCEvent@@PAVIEventReceiver@@@Z PROC ; CEventAPI::Handler_Detach, COMDAT
; _this$ = ecx

; 109  : {

	push	ebx

; 110  : 	if (0==E)	return;

	mov	ebx, DWORD PTR _E$[esp]
	cmp	DWORD PTR [ebx], 0
	push	edi
	mov	edi, ecx
	je	SHORT $LN2@Handler_De
	push	esi

; 111  : 	CS.Enter	();

	lea	esi, DWORD PTR [edi+24]
	mov	ecx, esi
	call	DWORD PTR __imp_?Enter@xrCriticalSection@@QAEXXZ

; 112  : 	E->Detach	(H);

	mov	eax, DWORD PTR _H$[esp+8]
	mov	ecx, DWORD PTR [ebx]
	push	eax
	call	?Detach@CEvent@@QAEXPAVIEventReceiver@@@Z ; CEvent::Detach

; 113  : 	Destroy		(E);

	push	ebx
	mov	ecx, edi
	call	?Destroy@CEventAPI@@QAEXAAPAVCEvent@@@Z	; CEventAPI::Destroy

; 114  : 	CS.Leave	();

	mov	ecx, esi
	call	DWORD PTR __imp_?Leave@xrCriticalSection@@QAEXXZ
	pop	esi
$LN2@Handler_De:
	pop	edi
	pop	ebx

; 115  : }

	ret	8
?Handler_Detach@CEventAPI@@QAEXAAPAVCEvent@@PAVIEventReceiver@@@Z ENDP ; CEventAPI::Handler_Detach
_TEXT	ENDS
PUBLIC	?Handler_Attach@CEventAPI@@QAEPAVCEvent@@PBDPAVIEventReceiver@@@Z ; CEventAPI::Handler_Attach
; Function compile flags: /Ogtpy
;	COMDAT ?Handler_Attach@CEventAPI@@QAEPAVCEvent@@PBDPAVIEventReceiver@@@Z
_TEXT	SEGMENT
_N$ = 8							; size = 4
_H$ = 12						; size = 4
?Handler_Attach@CEventAPI@@QAEPAVCEvent@@PBDPAVIEventReceiver@@@Z PROC ; CEventAPI::Handler_Attach, COMDAT
; _this$ = ecx

; 100  : {

	push	esi
	mov	esi, ecx
	push	edi

; 101  : 	CS.Enter	();

	lea	edi, DWORD PTR [esi+24]
	mov	ecx, edi
	call	DWORD PTR __imp_?Enter@xrCriticalSection@@QAEXXZ

; 102  : 	EVENT	E = Create(N);

	mov	eax, DWORD PTR _N$[esp+4]
	push	eax
	mov	ecx, esi
	call	?Create@CEventAPI@@QAEPAVCEvent@@PBD@Z	; CEventAPI::Create

; 103  : 	E->Attach(H);

	mov	ecx, DWORD PTR _H$[esp+4]
	mov	esi, eax
	push	ecx
	mov	ecx, esi
	call	?Attach@CEvent@@QAEXPAVIEventReceiver@@@Z ; CEvent::Attach

; 104  : 	CS.Leave	();

	mov	ecx, edi
	call	DWORD PTR __imp_?Leave@xrCriticalSection@@QAEXXZ
	pop	edi

; 105  : 	return E;

	mov	eax, esi
	pop	esi

; 106  : }

	ret	8
?Handler_Attach@CEventAPI@@QAEPAVCEvent@@PBDPAVIEventReceiver@@@Z ENDP ; CEventAPI::Handler_Attach
END
