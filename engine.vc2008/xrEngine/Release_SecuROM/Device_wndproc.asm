; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	D:\CLEARSKY\sources\engine\xrEngine\Device_wndproc.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?on_message@CRenderDevice@@QAG_NPAUHWND__@@IIJAAJ@Z ; CRenderDevice::on_message
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\device_wndproc.cpp
;	COMDAT ?on_message@CRenderDevice@@QAG_NPAUHWND__@@IIJAAJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_hWnd$ = 12						; size = 4
_uMsg$ = 16						; size = 4
_wParam$ = 20						; size = 4
_lParam$ = 24						; size = 4
_result$ = 28						; size = 4
?on_message@CRenderDevice@@QAG_NPAUHWND__@@IIJAAJ@Z PROC ; CRenderDevice::on_message, COMDAT

; 5    : 	switch (uMsg) {

	mov	eax, DWORD PTR _uMsg$[esp-4]
	cmp	eax, 32					; 00000020H
	ja	SHORT $LN14@on_message
	je	SHORT $LN6@on_message
	cmp	eax, 6
	je	SHORT $LN7@on_message
	cmp	eax, 16					; 00000010H
	jne	SHORT $LN16@on_message

; 44   : 		}
; 45   : 		case WM_CLOSE : {
; 46   : #ifdef INGAME_EDITOR
; 47   : 			if (editor())
; 48   : 				break;
; 49   : #endif // #ifdef INGAME_EDITOR
; 50   : 
; 51   : 			result			= 0;

	mov	eax, DWORD PTR _result$[esp-4]
	mov	DWORD PTR [eax], 0
	mov	al, 1

; 57   : }

	ret	24					; 00000018H
$LN7@on_message:

; 8    : 						   }
; 9    : 		case WM_ACTIVATE : {
; 10   : #ifdef INGAME_EDITOR
; 11   : 			if (editor()) {
; 12   : 				Device.b_is_Active	= TRUE;
; 13   : 				break;
; 14   : 			}
; 15   : #endif // #ifdef INGAME_EDITOR
; 16   : 			OnWM_Activate	(wParam, lParam);

	mov	ecx, DWORD PTR _lParam$[esp-4]
	mov	edx, DWORD PTR _wParam$[esp-4]
	push	ecx
	mov	ecx, DWORD PTR _this$[esp]
	push	edx
	call	?OnWM_Activate@CRenderDevice@@QAEXIJ@Z	; CRenderDevice::OnWM_Activate
$LN16@on_message:

; 17   : 			return			(false);

	xor	al, al

; 57   : }

	ret	24					; 00000018H
$LN6@on_message:

; 18   : 		}
; 19   : 		case WM_SETCURSOR : {
; 20   : #ifdef INGAME_EDITOR
; 21   : 			if (editor())
; 22   : 				break;
; 23   : #endif // #ifdef INGAME_EDITOR
; 24   : 
; 25   : 			result			= 1;

	mov	eax, DWORD PTR _result$[esp-4]
	mov	DWORD PTR [eax], 1
	mov	al, 1

; 57   : }

	ret	24					; 00000018H
$LN14@on_message:

; 5    : 	switch (uMsg) {

	sub	eax, 260				; 00000104H
	je	SHORT $LN8@on_message
	sub	eax, 14					; 0000000eH

; 52   : 			return			(true);
; 53   : 		}
; 54   : 	}
; 55   : 
; 56   : 	return					(false);

	jne	SHORT $LN16@on_message
	mov	eax, DWORD PTR _wParam$[esp-4]
	cmp	eax, 61488				; 0000f030H
	ja	SHORT $LN13@on_message

; 26   : 			return			(true);
; 27   : 		}
; 28   : 		case WM_SYSCOMMAND : {
; 29   : #ifdef INGAME_EDITOR
; 30   : 			if (editor())
; 31   : 				break;
; 32   : #endif // #ifdef INGAME_EDITOR
; 33   : 
; 34   : 			// Prevent moving/sizing and power loss in fullscreen mode
; 35   : 			switch (wParam) {

	je	SHORT $LN2@on_message
	sub	eax, 61440				; 0000f000H
	je	SHORT $LN2@on_message
	sub	eax, 16					; 00000010H
	jmp	SHORT $LN15@on_message
$LN13@on_message:
	cmp	eax, 61808				; 0000f170H
$LN15@on_message:

; 41   : 					return	(true);
; 42   : 			}
; 43   : 			return			(false);

	jne	SHORT $LN16@on_message
$LN2@on_message:

; 36   : 				case SC_MOVE:
; 37   : 				case SC_SIZE:
; 38   : 				case SC_MAXIMIZE:
; 39   : 				case SC_MONITORPOWER:
; 40   : 					result	= 1;

	mov	ecx, DWORD PTR _result$[esp-4]
	mov	DWORD PTR [ecx], 1
$LN8@on_message:

; 6    : 		case WM_SYSKEYDOWN : {
; 7    : 			return true;

	mov	al, 1

; 57   : }

	ret	24					; 00000018H
?on_message@CRenderDevice@@QAG_NPAUHWND__@@IIJAAJ@Z ENDP ; CRenderDevice::on_message
PUBLIC	?WndProc@@YGJPAUHWND__@@IIJ@Z			; WndProc
; Function compile flags: /Ogtpy
;	COMDAT ?WndProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_result$ = 20						; size = 4
_lParam$ = 20						; size = 4
?WndProc@@YGJPAUHWND__@@IIJ@Z PROC			; WndProc, COMDAT

; 63   : {

	push	ebx

; 64   : 	LRESULT		result;
; 65   : 	if (Device.on_message(hWnd, uMsg, wParam, lParam, result))

	mov	ebx, DWORD PTR _uMsg$[esp]
	push	ebp
	mov	ebp, DWORD PTR _hWnd$[esp+4]
	push	esi
	mov	esi, DWORD PTR _lParam$[esp+8]
	push	edi
	mov	edi, DWORD PTR _wParam$[esp+12]
	lea	eax, DWORD PTR _result$[esp+12]
	push	eax
	push	esi
	push	edi
	push	ebx
	push	ebp
	push	OFFSET ?Device@@3VCRenderDevice@@A	; Device
	call	?on_message@CRenderDevice@@QAG_NPAUHWND__@@IIJAAJ@Z ; CRenderDevice::on_message
	test	al, al
	je	SHORT $LN1@WndProc

; 66   : 		return	(result);

	mov	eax, DWORD PTR _result$[esp+12]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 69   : }

	ret	16					; 00000010H
$LN1@WndProc:

; 67   : 
; 68   : 	return		(DefWindowProc(hWnd, uMsg, wParam, lParam));

	push	esi
	push	edi
	push	ebx
	push	ebp
	call	DWORD PTR __imp__DefWindowProcA@16
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 69   : }

	ret	16					; 00000010H
?WndProc@@YGJPAUHWND__@@IIJ@Z ENDP			; WndProc
END
