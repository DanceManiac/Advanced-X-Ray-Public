; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	D:\CLEARSKY\sources\engine\xrEngine\MbHelpers.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?mbhMulti2WideDumb@@YAGPAG0GPBD@Z		; mbhMulti2WideDumb
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\mbhelpers.cpp
;	COMDAT ?mbhMulti2WideDumb@@YAGPAG0GPBD@Z
_TEXT	SEGMENT
_MultiStr$ = 8						; size = 4
?mbhMulti2WideDumb@@YAGPAG0GPBD@Z PROC			; mbhMulti2WideDumb, COMDAT
; _WideStr$ = esi
; _WidePos$ = edi

; 22   : {

	push	ebp
	mov	ebp, DWORD PTR _MultiStr$[esp]

; 23   : 	unsigned short int spos = 0;
; 24   : 	unsigned short int dpos = 0;
; 25   : 	unsigned char b1;
; 26   : 	wide_char wc = 0 ;
; 27   : 
; 28   : 	VERIFY( MultiStr );
; 29   : 
; 30   : 	if ( ! MultiStr[ 0 ] )

	mov	dl, BYTE PTR [ebp]
	xor	ecx, ecx
	xor	eax, eax
	test	dl, dl
	jne	SHORT $LN16@mbhMulti2W

; 31   : 		return 0;

	xor	ax, ax
	pop	ebp

; 61   : 
; 62   : 	return dpos;
; 63   : }

	ret	0
$LN16@mbhMulti2W:
	push	ebx
$LL13@mbhMulti2W:

; 32   : 
; 33   : 	if ( WideStr || WidePos )
; 34   : 		VERIFY2( ( ( WideStrSize > 0 ) && ( WideStrSize < 0xFFFF ) ) , make_string( "'WideStrSize'=%hu" , WideStrSize ) );
; 35   : 
; 36   : 	while ( ( b1	= MultiStr[ spos++ ] ) != 0x00 ) {

	add	ecx, 1

; 37   : 
; 38   : 		if ( WidePos )

	test	edi, edi
	je	SHORT $LN11@mbhMulti2W

; 39   : 			WidePos[ dpos ] = spos;

	movzx	ebx, ax
	mov	WORD PTR [edi+ebx*2], cx
$LN11@mbhMulti2W:

; 40   : 		
; 41   : 		dpos++;

	add	eax, 1

; 42   : 
; 43   : 		wc = b1;
; 44   : 
; 45   : 		if ( WideStr ) {

	test	esi, esi
	je	SHORT $LN10@mbhMulti2W

; 46   : 			VERIFY2( ( dpos < WideStrSize ) , make_string( "S1: '%s',%hu<%hu" , MultiStr , dpos , WideStrSize ) );
; 47   : 			WideStr[ dpos ] = wc;

	movzx	dx, dl
	movzx	ebx, ax
	mov	WORD PTR [esi+ebx*2], dx
$LN10@mbhMulti2W:
	movzx	edx, cx
	mov	dl, BYTE PTR [edx+ebp]
	test	dl, dl
	jne	SHORT $LL13@mbhMulti2W

; 48   : 		}
; 49   : 	}
; 50   : 
; 51   : 	if ( WidePos )

	test	edi, edi
	pop	ebx
	je	SHORT $LN6@mbhMulti2W

; 52   : 		WidePos[ dpos ] = spos;

	movzx	edx, ax
	add	ecx, 1
	mov	WORD PTR [edi+edx*2], cx
$LN6@mbhMulti2W:

; 53   : 
; 54   : 	if ( WideStr ) {

	test	esi, esi
	je	SHORT $LN23@mbhMulti2W

; 55   : 		VERIFY2( ( dpos < WideStrSize ) , make_string( "S2: '%s',%hu<%hu" , MultiStr , dpos , WideStrSize ) );
; 56   : 		WideStr[ dpos + 1 ] = 0x0000;

	movzx	ecx, ax
	mov	WORD PTR [esi+ecx*2+2], 0

; 57   : 	}
; 58   : 
; 59   : 	if ( WideStr )
; 60   : 		WideStr[ 0 ] = dpos;

	mov	WORD PTR [esi], ax
$LN23@mbhMulti2W:
	pop	ebp

; 61   : 
; 62   : 	return dpos;
; 63   : }

	ret	0
?mbhMulti2WideDumb@@YAGPAG0GPBD@Z ENDP			; mbhMulti2WideDumb
PUBLIC	?mbhMulti2Wide@@YAGPAG0GPBD@Z			; mbhMulti2Wide
; Function compile flags: /Ogtpy
;	COMDAT ?mbhMulti2Wide@@YAGPAG0GPBD@Z
_TEXT	SEGMENT
_WideStr$ = 8						; size = 4
_WidePos$ = 12						; size = 4
_WideStrSize$ = 16					; size = 2
_b2$ = 20						; size = 1
_MultiStr$ = 20						; size = 4
?mbhMulti2Wide@@YAGPAG0GPBD@Z PROC			; mbhMulti2Wide, COMDAT

; 69   : {

	push	ebp

; 70   : 	unsigned short int spos = 0;
; 71   : 	unsigned short int dpos = 0;
; 72   : 	unsigned char b1, b2, b3;
; 73   : 	wide_char wc = 0 ;
; 74   : 
; 75   : 	VERIFY( MultiStr );
; 76   : 
; 77   : 	if ( ! MultiStr[ 0 ] )

	mov	ebp, DWORD PTR _MultiStr$[esp]
	mov	al, BYTE PTR [ebp]
	push	edi
	xor	ecx, ecx
	xor	edi, edi
	test	al, al
	jne	SHORT $LN28@mbhMulti2W@2
	pop	edi

; 78   : 		return 0;

	xor	ax, ax
	pop	ebp

; 150  : }

	ret	0
$LN28@mbhMulti2W@2:
	push	esi

; 79   : 
; 80   : 	if ( WideStr || WidePos )
; 81   : 		VERIFY2( ( ( WideStrSize > 0 ) && ( WideStrSize < 0xFFFF ) ) , make_string( "'WideStrSize'=%hu" , WideStrSize ) );
; 82   : 
; 83   : 	while ( ( b1 = MultiStr[ spos ] ) != 0x00 ) {

	mov	esi, DWORD PTR _WideStr$[esp+8]
	push	ebx
	npad	3
$LL25@mbhMulti2W@2:

; 84   : 
; 85   : 		if ( WidePos )

	mov	ebx, DWORD PTR _WidePos$[esp+12]
	test	ebx, ebx
	je	SHORT $LN23@mbhMulti2W@2

; 86   : 			WidePos[ dpos ] = spos;

	movzx	edx, di
	mov	WORD PTR [ebx+edx*2], cx
$LN23@mbhMulti2W@2:

; 87   : 
; 88   : 		spos++;

	add	ecx, 1

; 89   : 		
; 90   : 		if ( ( b1 & BITS1_MASK ) == BITS1_EXP ) {

	test	al, al
	js	SHORT $LN22@mbhMulti2W@2

; 91   : 			wc = b1;

	movzx	ax, al

; 92   : 		} else

	jmp	$LN46@mbhMulti2W@2
$LN22@mbhMulti2W@2:

; 93   : 		if ( ( b1 & BITS3_MASK ) == BITS3_EXP ) {

	mov	dl, al
	and	dl, 224					; 000000e0H
	cmp	dl, 192					; 000000c0H
	jne	SHORT $LN20@mbhMulti2W@2

; 94   : 			b2 = MultiStr[ spos++ ];

	movzx	edx, cx
	mov	dl, BYTE PTR [edx+ebp]
	add	ecx, 1

; 95   : 			#ifdef MB_DUMB_CONVERSION
; 96   : 				if ( ! ( b2 && ( ( b2 & BITS2_MASK ) == BITS2_EXP ) ) )

	test	dl, dl
	je	$LN16@mbhMulti2W@2
	mov	bl, dl
	and	bl, 192					; 000000c0H
	cmp	bl, 128					; 00000080H

; 97   : 					return mbhMulti2WideDumb( WideStr , WidePos , WideStrSize , MultiStr );
; 98   : 			#else // MB_DUMB_CONVERSION
; 99   : 				VERIFY2( ( b2 && ( ( b2 & BITS2_MASK ) == BITS2_EXP ) ) , 
; 100  : 					make_string( "B2: '%s',@%hu,[%hc][%hc]" , MultiStr , spos , b1 , b2 ) );
; 101  : 			#endif // MB_DUMB_CONVERSION
; 102  : 			wc = ( ( b1 & ~ BITS3_MASK ) << 6 ) | ( b2 & ~ BITS2_MASK );
; 103  : 		} else

	mov	ebx, DWORD PTR _WidePos$[esp+12]
	jne	$LN16@mbhMulti2W@2
	movzx	ax, al
	and	ax, 65311				; 0000ff1fH
	movzx	dx, dl
	shl	ax, 6
	and	dx, 65343				; 0000ff3fH
	jmp	SHORT $LN47@mbhMulti2W@2
$LN20@mbhMulti2W@2:

; 104  : 		if ( ( b1 & BITS4_MASK ) == BITS4_EXP ) {

	mov	dl, al
	and	dl, 240					; 000000f0H
	cmp	dl, 224					; 000000e0H
	jne	$LN16@mbhMulti2W@2

; 105  : 			b2 = MultiStr[ spos++ ];

	movzx	edx, cx
	mov	dl, BYTE PTR [edx+ebp]
	add	ecx, 1

; 106  : 			#ifdef MB_DUMB_CONVERSION
; 107  : 				if ( ! ( b2 && ( ( b2 & BITS2_MASK ) == BITS2_EXP ) ) )

	test	dl, dl
	mov	BYTE PTR _b2$[esp+12], dl
	je	$LN16@mbhMulti2W@2
	and	dl, 192					; 000000c0H
	cmp	dl, 128					; 00000080H
	jne	$LN16@mbhMulti2W@2

; 108  : 					return mbhMulti2WideDumb( WideStr , WidePos , WideStrSize , MultiStr );
; 109  : 			#else // MB_DUMB_CONVERSION
; 110  : 				VERIFY2( ( b2 && ( ( b2 & BITS2_MASK ) == BITS2_EXP ) ) ,
; 111  : 					make_string( "B31: '%s',@%hu,[%hc][%hc]" , MultiStr , spos , b1 , b2 ) );
; 112  : 			#endif // MB_DUMB_CONVERSION
; 113  : 			b3 = MultiStr[ spos++ ];

	movzx	edx, cx
	mov	dl, BYTE PTR [edx+ebp]
	add	ecx, 1

; 114  : 			#ifdef MB_DUMB_CONVERSION
; 115  : 				if ( ! ( b3 && ( ( b3 & BITS2_MASK ) == BITS2_EXP ) ) ) 

	test	dl, dl
	je	SHORT $LN40@mbhMulti2W@2
	mov	bl, dl
	and	bl, 192					; 000000c0H
	cmp	bl, 128					; 00000080H
	jne	SHORT $LN40@mbhMulti2W@2

; 117  : 			#else // MB_DUMB_CONVERSION
; 118  : 				VERIFY2( ( b3 && ( ( b3 & BITS2_MASK ) == BITS2_EXP ) ) ,
; 119  : 					make_string( "B32: '%s',@%hu,[%hc][%hc][%hc]" , MultiStr , spos , b1 , b2 , b3 ) );
; 120  : 			#endif // MB_DUMB_CONVERSION
; 121  : 			wc = ( ( b1 & ~ BITS4_MASK ) << 12 ) | ( ( b2 & ~ BITS2_MASK ) << 6 ) | ( b3 & ~ BITS2_MASK );

	mov	ebx, DWORD PTR _WidePos$[esp+12]
	movzx	ax, al
	movzx	dx, dl
	shl	ax, 12					; 0000000cH
	or	ax, dx
	movzx	dx, BYTE PTR _b2$[esp+12]
	and	dx, 65343				; 0000ff3fH
	and	ax, 65343				; 0000ff3fH
	shl	dx, 6
$LN47@mbhMulti2W@2:
	or	ax, dx
$LN46@mbhMulti2W@2:

; 125  : 			#else // MB_DUMB_CONVERSION
; 126  : 				VERIFY2( 0 , make_string( "B1: '%s',@%hu,[%hc]" , MultiStr , spos , b1 ) );
; 127  : 			#endif // MB_DUMB_CONVERSION
; 128  : 		}
; 129  : 
; 130  : 		dpos++;

	add	edi, 1

; 131  : 
; 132  : 		if ( WideStr ) {

	test	esi, esi
	movzx	eax, ax
	je	SHORT $LN10@mbhMulti2W@2

; 133  : 			VERIFY2( ( dpos < WideStrSize ) , make_string( "S1: '%s',%hu<%hu" , MultiStr , dpos , WideStrSize ) );
; 134  : 			WideStr[ dpos ] = wc;

	movzx	edx, di
	mov	WORD PTR [esi+edx*2], ax
$LN10@mbhMulti2W@2:
	movzx	eax, cx
	mov	al, BYTE PTR [eax+ebp]
	test	al, al
	jne	$LL25@mbhMulti2W@2

; 135  : 		}
; 136  : 	}
; 137  : 
; 138  : 	if ( WidePos )

	test	ebx, ebx
	je	SHORT $LN6@mbhMulti2W@2

; 139  : 		WidePos[ dpos ] = spos;

	movzx	edx, di
	mov	WORD PTR [ebx+edx*2], cx
$LN6@mbhMulti2W@2:

; 140  : 
; 141  : 	if ( WideStr ) {

	test	esi, esi
	je	SHORT $LN1@mbhMulti2W@2

; 142  : 		VERIFY2( ( dpos < WideStrSize ) , make_string( "S2: '%s',%hu<%hu" , MultiStr , dpos , WideStrSize ) );
; 143  : 		WideStr[ dpos + 1 ] = 0x0000;

	movzx	eax, di
	mov	WORD PTR [esi+eax*2+2], 0

; 144  : 	}
; 145  : 
; 146  : 	if ( WideStr )
; 147  : 		WideStr[ 0 ] = dpos;

	mov	WORD PTR [esi], di
$LN1@mbhMulti2W@2:
	pop	ebx
	pop	esi

; 148  : 
; 149  : 	return dpos;

	mov	ax, di
	pop	edi
	pop	ebp

; 150  : }

	ret	0
$LN40@mbhMulti2W@2:

; 116  : 					return mbhMulti2WideDumb( WideStr , WidePos , WideStrSize , MultiStr );

	mov	edi, DWORD PTR _WidePos$[esp+12]
	push	ebp
	call	?mbhMulti2WideDumb@@YAGPAG0GPBD@Z	; mbhMulti2WideDumb
	add	esp, 4
	pop	ebx
	pop	esi
	pop	edi
	pop	ebp

; 150  : }

	ret	0
$LN16@mbhMulti2W@2:

; 122  : 		} else {
; 123  : 			#ifdef MB_DUMB_CONVERSION
; 124  : 				return mbhMulti2WideDumb( WideStr , WidePos , WideStrSize , MultiStr );

	push	ebp
	mov	edi, ebx
	call	?mbhMulti2WideDumb@@YAGPAG0GPBD@Z	; mbhMulti2WideDumb
	add	esp, 4
	pop	ebx
	pop	esi
	pop	edi
	pop	ebp

; 150  : }

	ret	0
?mbhMulti2Wide@@YAGPAG0GPBD@Z ENDP			; mbhMulti2Wide
END
