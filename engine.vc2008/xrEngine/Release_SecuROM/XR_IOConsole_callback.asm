; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	D:\CLEARSKY\sources\engine\xrEngine\XR_IOConsole_callback.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??A?$xr_vector@UTipString@@V?$xalloc@UTipString@@@@@@QAEAAUTipString@@I@Z ; xr_vector<TipString,xalloc<TipString> >::operator[]
PUBLIC	?length@?$helper@$01@string_tupples@detail@core@xray@@SAIPBD@Z ; xray::core::detail::string_tupples::helper<2>::length
PUBLIC	?string@?$helper@$01@string_tupples@detail@core@xray@@SAPBDPBD@Z ; xray::core::detail::string_tupples::helper<2>::string
PUBLIC	??$add_string@PBD@?$helper@$01@string_tupples@detail@core@xray@@SAXAAV1234@PBD@Z ; xray::core::detail::string_tupples::helper<2>::add_string<char const *>
PUBLIC	??$?0PBDPBDPBD@string_tupples@detail@core@xray@@QAE@PBD00@Z ; xray::core::detail::string_tupples::string_tupples<char const *,char const *,char const *>
PUBLIC	??$implicit_cast@PAVCConsole@@PAV1@@detail@fastdelegate@@YAPAVCConsole@@PAV2@@Z ; fastdelegate::detail::implicit_cast<CConsole *,CConsole *>
PUBLIC	??$Convert@VCConsole@@P81@AGXXZP8GenericClass@detail@fastdelegate@@AEXXZ@?$SimplifyMemFunc@$07@detail@fastdelegate@@SGPAVGenericClass@12@PAVCConsole@@P84@AGXXZAAP8312@AEXXZ@Z ; fastdelegate::detail::SimplifyMemFunc<8>::Convert<CConsole,void (__stdcall CConsole::*)(void),void (__thiscall fastdelegate::detail::GenericClass::*)(void)>
PUBLIC	??$bindmemfunc@VCConsole@@P81@AGXXZ@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AGXXZP6GXXZP6GXXZ@detail@fastdelegate@@QAEXPAVCConsole@@P83@AGXXZ@Z ; fastdelegate::detail::ClosurePtr<void (__stdcall fastdelegate::detail::GenericClass::*)(void),void (__stdcall*)(void),void (__stdcall*)(void)>::bindmemfunc<CConsole,void (__stdcall CConsole::*)(void)>
PUBLIC	??$?0VCConsole@@V0@@?$FastDelegate0@X@fastdelegate@@QAE@PAVCConsole@@P82@AGXXZ@Z ; fastdelegate::FastDelegate0<void>::FastDelegate0<void><CConsole,CConsole>
_EPS	DD	03727c5acr			; 1e-005
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\fastdelegate.h
;	COMDAT ??$Convert@VCConsole@@P81@AGXXZP8GenericClass@detail@fastdelegate@@AEXXZ@?$SimplifyMemFunc@$07@detail@fastdelegate@@SGPAVGenericClass@12@PAVCConsole@@P84@AGXXZAAP8312@AEXXZ@Z
_TEXT	SEGMENT
_function_to_bind$ = 8					; size = 8
??$Convert@VCConsole@@P81@AGXXZP8GenericClass@detail@fastdelegate@@AEXXZ@?$SimplifyMemFunc@$07@detail@fastdelegate@@SGPAVGenericClass@12@PAVCConsole@@P84@AGXXZAAP8312@AEXXZ@Z PROC ; fastdelegate::detail::SimplifyMemFunc<8>::Convert<CConsole,void (__stdcall CConsole::*)(void),void (__thiscall fastdelegate::detail::GenericClass::*)(void)>, COMDAT
; _pthis$ = edx
; _bound_func$ = ecx

; 345  : 		GenericMemFuncType &bound_func) { 
; 346  : 		// We need to use a horrible_cast to do this conversion.
; 347  : 		// In MSVC, a multiple inheritance member pointer is internally defined as:
; 348  :         union {
; 349  : 			XFuncType func;
; 350  : 			struct {	 
; 351  : 				GenericMemFuncType funcaddress; // points to the actual member function
; 352  : 				int delta;	     // #BYTES to be added to the 'this' pointer
; 353  : 			}s;
; 354  :         } u;
; 355  : 		// Check that the horrible_cast will work
; 356  : 		typedef int ERROR_CantUsehorrible_cast[sizeof(function_to_bind)==sizeof(u.s)? 1 : -1];
; 357  :         u.func = function_to_bind;
; 358  : 		bound_func = u.s.funcaddress;

	mov	eax, DWORD PTR _function_to_bind$[esp-4]
	mov	DWORD PTR [ecx], eax

; 359  : 		return reinterpret_cast<GenericClass *>(reinterpret_cast<char *>(pthis) + u.s.delta); 

	mov	eax, DWORD PTR _function_to_bind$[esp]
	add	eax, edx

; 360  : 	}

	ret	8
??$Convert@VCConsole@@P81@AGXXZP8GenericClass@detail@fastdelegate@@AEXXZ@?$SimplifyMemFunc@$07@detail@fastdelegate@@SGPAVGenericClass@12@PAVCConsole@@P84@AGXXZAAP8312@AEXXZ@Z ENDP ; fastdelegate::detail::SimplifyMemFunc<8>::Convert<CConsole,void (__stdcall CConsole::*)(void),void (__thiscall fastdelegate::detail::GenericClass::*)(void)>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\string_concatenations_inline.h
_TEXT	ENDS
;	COMDAT ?string@?$helper@$01@string_tupples@detail@core@xray@@SAPBDPBD@Z
_TEXT	SEGMENT
?string@?$helper@$01@string_tupples@detail@core@xray@@SAPBDPBD@Z PROC ; xray::core::detail::string_tupples::helper<2>::string, COMDAT
; _string$ = eax

; 120  : 			return		(string);
; 121  : 		}

	ret	0
?string@?$helper@$01@string_tupples@detail@core@xray@@SAPBDPBD@Z ENDP ; xray::core::detail::string_tupples::helper<2>::string
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\fastdelegate.h
_TEXT	ENDS
;	COMDAT ??$bindmemfunc@VCConsole@@P81@AGXXZ@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AGXXZP6GXXZP6GXXZ@detail@fastdelegate@@QAEXPAVCConsole@@P83@AGXXZ@Z
_TEXT	SEGMENT
_function_to_bind$ = 8					; size = 8
??$bindmemfunc@VCConsole@@P81@AGXXZ@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AGXXZP6GXXZP6GXXZ@detail@fastdelegate@@QAEXPAVCConsole@@P83@AGXXZ@Z PROC ; fastdelegate::detail::ClosurePtr<void (__stdcall fastdelegate::detail::GenericClass::*)(void),void (__stdcall*)(void),void (__stdcall*)(void)>::bindmemfunc<CConsole,void (__stdcall CConsole::*)(void)>, COMDAT
; _this$ = eax
; _pthis$ = edx

; 682  : 		m_pthis = SimplifyMemFunc< sizeof(function_to_bind) >
; 683  : 			::Convert(pthis, function_to_bind, m_pFunction);

	mov	ecx, DWORD PTR _function_to_bind$[esp-4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR _function_to_bind$[esp]
	add	ecx, edx
	mov	DWORD PTR [eax], ecx

; 684  : #if !defined(FASTDELEGATE_USESTATICFUNCTIONHACK)
; 685  : 		m_pStaticFunction = 0;
; 686  : #endif
; 687  : 	}

	ret	8
??$bindmemfunc@VCConsole@@P81@AGXXZ@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AGXXZP6GXXZP6GXXZ@detail@fastdelegate@@QAEXPAVCConsole@@P83@AGXXZ@Z ENDP ; fastdelegate::detail::ClosurePtr<void (__stdcall fastdelegate::detail::GenericClass::*)(void),void (__stdcall*)(void),void (__stdcall*)(void)>::bindmemfunc<CConsole,void (__stdcall CConsole::*)(void)>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$implicit_cast@PAVCConsole@@PAV1@@detail@fastdelegate@@YAPAVCConsole@@PAV2@@Z
_TEXT	SEGMENT
??$implicit_cast@PAVCConsole@@PAV1@@detail@fastdelegate@@YAPAVCConsole@@PAV2@@Z PROC ; fastdelegate::detail::implicit_cast<CConsole *,CConsole *>, COMDAT
; _input$ = eax

; 157  : 	return input;
; 158  : }

	ret	0
??$implicit_cast@PAVCConsole@@PAV1@@detail@fastdelegate@@YAPAVCConsole@@PAV2@@Z ENDP ; fastdelegate::detail::implicit_cast<CConsole *,CConsole *>
_TEXT	ENDS
PUBLIC	?GamePause@CConsole@@IAGXXZ			; CConsole::GamePause
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\xr_ioconsole_callback.cpp
;	COMDAT ?GamePause@CConsole@@IAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GamePause@CConsole@@IAGXXZ PROC			; CConsole::GamePause, COMDAT

; 212  : 
; 213  : }

	ret	4
?GamePause@CConsole@@IAGXXZ ENDP			; CConsole::GamePause
_TEXT	ENDS
PUBLIC	?PageUp_tips@CConsole@@IAGXXZ			; CConsole::PageUp_tips
; Function compile flags: /Ogtpy
;	COMDAT ?PageUp_tips@CConsole@@IAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?PageUp_tips@CConsole@@IAGXXZ PROC			; CConsole::PageUp_tips, COMDAT

; 154  : 	m_select_tip -= VIEW_TIPS_COUNT;

	mov	eax, DWORD PTR _this$[esp-4]
	add	DWORD PTR [eax+96], -14			; fffffff2H

; 155  : 	check_prev_selected_tip();

	jns	SHORT $LN4@PageUp_tip
	mov	DWORD PTR [eax+96], 0
$LN4@PageUp_tip:
	mov	ecx, DWORD PTR [eax+96]
	cmp	DWORD PTR [eax+100], ecx
	jle	SHORT $LN3@PageUp_tip
	mov	DWORD PTR [eax+100], ecx
$LN3@PageUp_tip:

; 156  : }

	ret	4
?PageUp_tips@CConsole@@IAGXXZ ENDP			; CConsole::PageUp_tips
_TEXT	ENDS
PUBLIC	?Begin_tips@CConsole@@IAGXXZ			; CConsole::Begin_tips
; Function compile flags: /Ogtpy
;	COMDAT ?Begin_tips@CConsole@@IAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Begin_tips@CConsole@@IAGXXZ PROC			; CConsole::Begin_tips, COMDAT

; 141  : 	m_select_tip = 0;

	mov	eax, DWORD PTR _this$[esp-4]
	xor	ecx, ecx
	mov	DWORD PTR [eax+96], ecx

; 142  : 	m_start_tip = 0;

	mov	DWORD PTR [eax+100], ecx

; 143  : }

	ret	4
?Begin_tips@CConsole@@IAGXXZ ENDP			; CConsole::Begin_tips
_TEXT	ENDS
PUBLIC	?End_log@CConsole@@IAGXXZ			; CConsole::End_log
; Function compile flags: /Ogtpy
;	COMDAT ?End_log@CConsole@@IAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?End_log@CConsole@@IAGXXZ PROC				; CConsole::End_log, COMDAT

; 69   : 	scroll_delta = 0;

	mov	eax, DWORD PTR _this$[esp-4]
	mov	DWORD PTR [eax+12], 0

; 70   : }

	ret	4
?End_log@CConsole@@IAGXXZ ENDP				; CConsole::End_log
_TEXT	ENDS
PUBLIC	?Next_log@CConsole@@IAGXXZ			; CConsole::Next_log
; Function compile flags: /Ogtpy
;	COMDAT ?Next_log@CConsole@@IAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Next_log@CConsole@@IAGXXZ PROC				; CConsole::Next_log, COMDAT

; 55   : 	scroll_delta--;

	mov	eax, DWORD PTR _this$[esp-4]
	add	DWORD PTR [eax+12], -1

; 56   : 	if ( scroll_delta < 0 )

	jns	SHORT $LN1@Next_log

; 57   : 	{
; 58   : 		scroll_delta = 0;

	mov	DWORD PTR [eax+12], 0
$LN1@Next_log:

; 59   : 	}
; 60   : }

	ret	4
?Next_log@CConsole@@IAGXXZ ENDP				; CConsole::Next_log
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\string_concatenations_inline.h
;	COMDAT ?length@?$helper@$01@string_tupples@detail@core@xray@@SAIPBD@Z
_TEXT	SEGMENT
?length@?$helper@$01@string_tupples@detail@core@xray@@SAIPBD@Z PROC ; xray::core::detail::string_tupples::helper<2>::length, COMDAT
; _string$ = eax

; 115  : 			return		(string ? (unsigned int)xr_strlen(string) : 0);

	test	eax, eax
	je	SHORT $LN3@length@2
	lea	edx, DWORD PTR [eax+1]
$LL7@length@2:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL7@length@2
	sub	eax, edx

; 116  : 		}

	ret	0
$LN3@length@2:

; 115  : 			return		(string ? (unsigned int)xr_strlen(string) : 0);

	xor	eax, eax

; 116  : 		}

	ret	0
?length@?$helper@$01@string_tupples@detail@core@xray@@SAIPBD@Z ENDP ; xray::core::detail::string_tupples::helper<2>::length
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$add_string@PBD@?$helper@$01@string_tupples@detail@core@xray@@SAXAAV1234@PBD@Z
_TEXT	SEGMENT
??$add_string@PBD@?$helper@$01@string_tupples@detail@core@xray@@SAXAAV1234@PBD@Z PROC ; xray::core::detail::string_tupples::helper<2>::add_string<char const *>, COMDAT
; _self$ = edi
; _p$ = edx

; 145  : 		{
; 146  : 			STATIC_CHECK			(index < max_item_count, Error_invalid_string_index_specified);
; 147  : 
; 148  : 			LPCSTR cstr				= string(p);
; 149  : 			VERIFY					(cstr);
; 150  : 			self.m_strings[index]	= std::make_pair(cstr, length(p));

	test	edx, edx
	push	esi
	je	SHORT $LN10@add_string
	mov	eax, edx
	lea	esi, DWORD PTR [eax+1]
	npad	6
$LL18@add_string:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL18@add_string
	sub	eax, esi
	mov	DWORD PTR [edi+16], edx
	mov	DWORD PTR [edi+20], eax

; 151  : 		}

	pop	esi
	ret	0

; 145  : 		{
; 146  : 			STATIC_CHECK			(index < max_item_count, Error_invalid_string_index_specified);
; 147  : 
; 148  : 			LPCSTR cstr				= string(p);
; 149  : 			VERIFY					(cstr);
; 150  : 			self.m_strings[index]	= std::make_pair(cstr, length(p));

$LN10@add_string:
	xor	eax, eax
	mov	DWORD PTR [edi+16], edx
	mov	DWORD PTR [edi+20], eax

; 151  : 		}

	pop	esi
	ret	0
??$add_string@PBD@?$helper@$01@string_tupples@detail@core@xray@@SAXAAV1234@PBD@Z ENDP ; xray::core::detail::string_tupples::helper<2>::add_string<char const *>
; Function compile flags: /Ogtpy
;	COMDAT ??$?0PBDPBDPBD@string_tupples@detail@core@xray@@QAE@PBD00@Z
_TEXT	SEGMENT
_p2$ = 8						; size = 4
??$?0PBDPBDPBD@string_tupples@detail@core@xray@@QAE@PBD00@Z PROC ; xray::core::detail::string_tupples::string_tupples<char const *,char const *,char const *>, COMDAT
; _this$ = eax
; _p0$ = ecx

; 29   : 	{

	push	ebx
	xor	ebx, ebx
	push	ebp
	mov	ebp, DWORD PTR _p2$[esp+4]
	push	esi
	mov	esi, ecx

; 30   : 		helper<0>::add_string	(*this, p0);

	cmp	esi, ebx
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	DWORD PTR [eax+20], ebx
	mov	DWORD PTR [eax+24], ebx
	mov	DWORD PTR [eax+28], ebx
	mov	DWORD PTR [eax+32], ebx
	mov	DWORD PTR [eax+36], ebx
	mov	DWORD PTR [eax+40], ebx
	mov	DWORD PTR [eax+44], ebx
	push	edi
	mov	DWORD PTR [eax+48], 3
	je	SHORT $LN18@string_tup@2
	lea	edi, DWORD PTR [ecx+1]
	npad	3
$LL68@string_tup@2:
	mov	dl, BYTE PTR [ecx]
	add	ecx, 1
	cmp	dl, bl
	jne	SHORT $LL68@string_tup@2
	sub	ecx, edi
	jmp	SHORT $LN19@string_tup@2
$LN18@string_tup@2:
	xor	ecx, ecx
$LN19@string_tup@2:
	mov	DWORD PTR [eax+4], ecx

; 31   : 		helper<1>::add_string	(*this, p1);

	mov	ecx, OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	mov	DWORD PTR [eax], esi
	lea	esi, DWORD PTR [ecx+1]
	npad	4
$LL69@string_tup@2:
	mov	dl, BYTE PTR [ecx]
	add	ecx, 1
	cmp	dl, bl
	jne	SHORT $LL69@string_tup@2
	sub	ecx, esi

; 32   : 		helper<2>::add_string	(*this, p2);

	cmp	ebp, ebx
	mov	edx, OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ecx
	je	SHORT $LN52@string_tup@2
	mov	ecx, ebp
	lea	esi, DWORD PTR [ecx+1]
	npad	1
$LL70@string_tup@2:
	mov	dl, BYTE PTR [ecx]
	add	ecx, 1
	cmp	dl, bl
	jne	SHORT $LL70@string_tup@2
	sub	ecx, esi
	mov	DWORD PTR [eax+16], ebp
	mov	DWORD PTR [eax+20], ecx

; 33   : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	4

; 32   : 		helper<2>::add_string	(*this, p2);

$LN52@string_tup@2:

; 33   : 	}

	pop	edi
	pop	esi
	mov	DWORD PTR [eax+16], ebp
	xor	ecx, ecx
	pop	ebp
	mov	DWORD PTR [eax+20], ecx
	pop	ebx
	ret	4
??$?0PBDPBDPBD@string_tupples@detail@core@xray@@QAE@PBD00@Z ENDP ; xray::core::detail::string_tupples::string_tupples<char const *,char const *,char const *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\fastdelegate.h
_TEXT	ENDS
;	COMDAT ??$?0VCConsole@@V0@@?$FastDelegate0@X@fastdelegate@@QAE@PAVCConsole@@P82@AGXXZ@Z
_TEXT	SEGMENT
_function_to_bind$ = 8					; size = 8
??$?0VCConsole@@V0@@?$FastDelegate0@X@fastdelegate@@QAE@PAVCConsole@@P82@AGXXZ@Z PROC ; fastdelegate::FastDelegate0<void>::FastDelegate0<void><CConsole,CConsole>, COMDAT
; _this$ = eax
; _pthis$ = edx

; 892  : 			m_Closure.bindmemfunc(detail::implicit_cast<X*>(pthis), function_to_bind); }

	mov	ecx, DWORD PTR _function_to_bind$[esp-4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR _function_to_bind$[esp]
	add	ecx, edx
	mov	DWORD PTR [eax], ecx
	ret	8
??$?0VCConsole@@V0@@?$FastDelegate0@X@fastdelegate@@QAE@PAVCConsole@@P82@AGXXZ@Z ENDP ; fastdelegate::FastDelegate0<void>::FastDelegate0<void><CConsole,CConsole>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??A?$xr_vector@UTipString@@V?$xalloc@UTipString@@@@@@QAEAAUTipString@@I@Z
_TEXT	SEGMENT
??A?$xr_vector@UTipString@@V?$xalloc@UTipString@@@@@@QAEAAUTipString@@I@Z PROC ; xr_vector<TipString,xalloc<TipString> >::operator[], COMDAT
; _this$ = ecx
; __Pos$ = esi

; 139  : 	reference operator[]		(size_type _Pos)					{ {VERIFY2(_Pos<size(),make_string("index is out of range: index requested[%d], size of container[%d]", _Pos, size()).c_str());} return (*(begin() + _Pos)); }

	call	?begin@?$_Impl_vector@UTipString@@V?$xalloc@UTipString@@@@@priv@stlp_std@@QAEPAUTipString@@XZ ; stlp_std::priv::_Impl_vector<TipString,xalloc<TipString> >::begin
	lea	ecx, DWORD PTR [esi+esi*2]
	lea	eax, DWORD PTR [eax+ecx*4]
	ret	0
??A?$xr_vector@UTipString@@V?$xalloc@UTipString@@@@@@QAEAAUTipString@@I@Z ENDP ; xr_vector<TipString,xalloc<TipString> >::operator[]
_TEXT	ENDS
PUBLIC	?PageDown_tips@CConsole@@IAGXXZ			; CConsole::PageDown_tips
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\xr_ioconsole_callback.cpp
;	COMDAT ?PageDown_tips@CConsole@@IAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?PageDown_tips@CConsole@@IAGXXZ PROC			; CConsole::PageDown_tips, COMDAT

; 159  : {

	push	esi

; 160  : 	m_select_tip += VIEW_TIPS_COUNT;

	mov	esi, DWORD PTR _this$[esp]
	add	DWORD PTR [esi+96], 14			; 0000000eH
	push	edi

; 161  : 	check_next_selected_tip();

	lea	edi, DWORD PTR [esi+76]
	mov	ecx, edi
	call	?size@?$_Impl_vector@UTipString@@V?$xalloc@UTipString@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<TipString,xalloc<TipString> >::size
	cmp	DWORD PTR [esi+96], eax
	jl	SHORT $LN5@PageDown_t
	mov	ecx, edi
	call	?size@?$_Impl_vector@UTipString@@V?$xalloc@UTipString@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<TipString,xalloc<TipString> >::size
	sub	eax, 1
	mov	DWORD PTR [esi+96], eax
$LN5@PageDown_t:
	mov	eax, DWORD PTR [esi+96]
	sub	eax, 13					; 0000000dH
	jns	SHORT $LN4@PageDown_t
	xor	eax, eax
$LN4@PageDown_t:
	cmp	eax, DWORD PTR [esi+100]
	jle	SHORT $LN3@PageDown_t
	mov	DWORD PTR [esi+100], eax
$LN3@PageDown_t:
	pop	edi
	pop	esi

; 162  : }

	ret	4
?PageDown_tips@CConsole@@IAGXXZ ENDP			; CConsole::PageDown_tips
_TEXT	ENDS
PUBLIC	?End_tips@CConsole@@IAGXXZ			; CConsole::End_tips
; Function compile flags: /Ogtpy
;	COMDAT ?End_tips@CConsole@@IAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?End_tips@CConsole@@IAGXXZ PROC				; CConsole::End_tips, COMDAT

; 146  : {

	push	esi

; 147  : 	m_select_tip = m_tips.size() - 1;

	mov	esi, DWORD PTR _this$[esp]
	push	edi
	lea	edi, DWORD PTR [esi+76]
	mov	ecx, edi
	call	?size@?$_Impl_vector@UTipString@@V?$xalloc@UTipString@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<TipString,xalloc<TipString> >::size
	add	eax, -1
	mov	DWORD PTR [esi+96], eax

; 148  : 	m_start_tip = m_select_tip - VIEW_TIPS_COUNT + 1;

	add	eax, -13				; fffffff3H

; 149  : 	check_next_selected_tip();

	mov	ecx, edi
	mov	DWORD PTR [esi+100], eax
	call	?size@?$_Impl_vector@UTipString@@V?$xalloc@UTipString@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<TipString,xalloc<TipString> >::size
	cmp	DWORD PTR [esi+96], eax
	jl	SHORT $LN11@End_tips
	mov	ecx, edi
	call	?size@?$_Impl_vector@UTipString@@V?$xalloc@UTipString@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<TipString,xalloc<TipString> >::size
	sub	eax, 1
	mov	DWORD PTR [esi+96], eax
$LN11@End_tips:
	mov	eax, DWORD PTR [esi+96]
	sub	eax, 13					; 0000000dH
	jns	SHORT $LN10@End_tips
	xor	eax, eax
$LN10@End_tips:
	cmp	eax, DWORD PTR [esi+100]
	jle	SHORT $LN9@End_tips
	mov	DWORD PTR [esi+100], eax
$LN9@End_tips:
	pop	edi
	pop	esi

; 150  : }

	ret	4
?End_tips@CConsole@@IAGXXZ ENDP				; CConsole::End_tips
_TEXT	ENDS
PUBLIC	?Begin_log@CConsole@@IAGXXZ			; CConsole::Begin_log
; Function compile flags: /Ogtpy
;	COMDAT ?Begin_log@CConsole@@IAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Begin_log@CConsole@@IAGXXZ PROC			; CConsole::Begin_log, COMDAT

; 64   : 	scroll_delta = LogFile->size()-1;

	mov	eax, DWORD PTR __imp_?LogFile@@3PAV?$xr_vector@Vshared_str@@V?$xalloc@Vshared_str@@@@@@A
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[esp-4]
	sar	ecx, 2
	sub	ecx, 1
	mov	DWORD PTR [edx+12], ecx

; 65   : }

	ret	4
?Begin_log@CConsole@@IAGXXZ ENDP			; CConsole::Begin_log
_TEXT	ENDS
PUBLIC	?Prev_log@CConsole@@IAGXXZ			; CConsole::Prev_log
; Function compile flags: /Ogtpy
;	COMDAT ?Prev_log@CConsole@@IAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Prev_log@CConsole@@IAGXXZ PROC				; CConsole::Prev_log, COMDAT

; 46   : 	scroll_delta++;

	mov	ecx, DWORD PTR _this$[esp-4]
	add	DWORD PTR [ecx+12], 1

; 47   : 	if ( scroll_delta > int(LogFile->size())-1 )

	mov	eax, DWORD PTR __imp_?LogFile@@3PAV?$xr_vector@Vshared_str@@V?$xalloc@Vshared_str@@@@@@A
	mov	eax, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	sub	esi, DWORD PTR [eax]
	sar	esi, 2
	sub	esi, 1
	cmp	edx, esi
	pop	esi
	jle	SHORT $LN1@Prev_log

; 48   : 	{
; 49   : 		scroll_delta = LogFile->size()-1;

	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [eax]
	sar	edx, 2
	sub	edx, 1
	mov	DWORD PTR [ecx+12], edx
$LN1@Prev_log:

; 50   : 	}
; 51   : }

	ret	4
?Prev_log@CConsole@@IAGXXZ ENDP				; CConsole::Prev_log
PUBLIC	?Next_tip@CConsole@@IAGXXZ			; CConsole::Next_tip
; Function compile flags: /Ogtpy
;	COMDAT ?Next_tip@CConsole@@IAGXXZ
_TEXT	SEGMENT
tv75 = 8						; size = 4
_this$ = 8						; size = 4
?Next_tip@CConsole@@IAGXXZ PROC				; CConsole::Next_tip, COMDAT

; 129  : {

	push	esi

; 130  : 	if ( xr_strlen( ec().str_edit() ) == 0 )

	mov	esi, DWORD PTR _this$[esp]
	mov	eax, DWORD PTR [esi+200]
	mov	eax, DWORD PTR [eax+1028]
	lea	edx, DWORD PTR [eax+1]
$LL34@Next_tip:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL34@Next_tip
	sub	eax, edx
	jne	SHORT $LN1@Next_tip

; 131  : 	{
; 132  : 		next_cmd_history_idx();

	add	DWORD PTR [esi+56], -1
	jns	SHORT $LN12@Next_tip
	mov	DWORD PTR [esi+56], eax
$LN12@Next_tip:

; 133  : 		SelectCommand();

	mov	ecx, esi
	call	?SelectCommand@CConsole@@QAEXXZ		; CConsole::SelectCommand
	pop	esi

; 137  : }

	ret	4
$LN1@Next_tip:

; 134  : 		return;
; 135  : 	}
; 136  : 	next_selected_tip();

	add	DWORD PTR [esi+96], 1
	push	edi
	lea	edi, DWORD PTR [esi+76]
	mov	ecx, edi
	call	?size@?$_Impl_vector@UTipString@@V?$xalloc@UTipString@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<TipString,xalloc<TipString> >::size
	cmp	DWORD PTR [esi+96], eax
	jl	SHORT $LN19@Next_tip
	mov	ecx, edi
	call	?size@?$_Impl_vector@UTipString@@V?$xalloc@UTipString@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<TipString,xalloc<TipString> >::size
	sub	eax, 1
	mov	DWORD PTR [esi+96], eax
$LN19@Next_tip:
	mov	eax, DWORD PTR [esi+96]
	sub	eax, 13					; 0000000dH
	pop	edi
	jns	SHORT $LN18@Next_tip
	xor	eax, eax
$LN18@Next_tip:
	cmp	eax, DWORD PTR [esi+100]
	jle	SHORT $LN17@Next_tip
	mov	DWORD PTR [esi+100], eax
$LN17@Next_tip:
	pop	esi

; 137  : }

	ret	4
?Next_tip@CConsole@@IAGXXZ ENDP				; CConsole::Next_tip
_TEXT	ENDS
PUBLIC	?Prev_tip@CConsole@@IAGXXZ			; CConsole::Prev_tip
; Function compile flags: /Ogtpy
;	COMDAT ?Prev_tip@CConsole@@IAGXXZ
_TEXT	SEGMENT
tv75 = 8						; size = 4
_this$ = 8						; size = 4
?Prev_tip@CConsole@@IAGXXZ PROC				; CConsole::Prev_tip, COMDAT

; 119  : 	if ( xr_strlen( ec().str_edit() ) == 0 )

	mov	ecx, DWORD PTR _this$[esp-4]
	mov	eax, DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [eax+1028]
	push	esi
	lea	esi, DWORD PTR [eax+1]
$LL33@Prev_tip:
	mov	dl, BYTE PTR [eax]
	add	eax, 1
	test	dl, dl
	jne	SHORT $LL33@Prev_tip
	sub	eax, esi
	pop	esi
	jne	SHORT $LN1@Prev_tip

; 120  : 	{
; 121  : 		prev_cmd_history_idx();

	add	DWORD PTR [ecx+56], 1
	mov	edx, DWORD PTR [ecx+44]
	sub	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [ecx+56]
	sar	edx, 2
	cmp	eax, edx
	jl	SHORT $LN12@Prev_tip
	mov	eax, DWORD PTR [ecx+44]
	sub	eax, DWORD PTR [ecx+40]
	sar	eax, 2
	sub	eax, 1
	mov	DWORD PTR [ecx+56], eax
$LN12@Prev_tip:

; 122  : 		SelectCommand();

	call	?SelectCommand@CConsole@@QAEXXZ		; CConsole::SelectCommand

; 126  : }

	ret	4
$LN1@Prev_tip:

; 123  : 		return;
; 124  : 	}
; 125  : 	prev_selected_tip();

	add	DWORD PTR [ecx+96], -1
	jns	SHORT $LN30@Prev_tip
	mov	DWORD PTR [ecx+96], 0
$LN30@Prev_tip:
	mov	eax, DWORD PTR [ecx+96]
	cmp	DWORD PTR [ecx+100], eax
	jle	SHORT $LN29@Prev_tip
	mov	DWORD PTR [ecx+100], eax
$LN29@Prev_tip:

; 126  : }

	ret	4
?Prev_tip@CConsole@@IAGXXZ ENDP				; CConsole::Prev_tip
_TEXT	ENDS
PUBLIC	?Next_cmd@CConsole@@IAGXXZ			; CConsole::Next_cmd
; Function compile flags: /Ogtpy
;	COMDAT ?Next_cmd@CConsole@@IAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Next_cmd@CConsole@@IAGXXZ PROC				; CConsole::Next_cmd, COMDAT

; 112  : {

	push	esi

; 113  : 	next_cmd_history_idx();

	mov	esi, DWORD PTR _this$[esp]
	add	DWORD PTR [esi+56], -1
	jns	SHORT $LN3@Next_cmd
	mov	DWORD PTR [esi+56], 0
$LN3@Next_cmd:

; 114  : 	SelectCommand();

	mov	eax, DWORD PTR [esi+40]
	cmp	eax, DWORD PTR [esi+44]
	lea	ecx, DWORD PTR [esi+40]
	je	SHORT $LN40@Next_cmd
	call	?end@?$vector@Vshared_str@@V?$xalloc@Vshared_str@@@@@stlp_std@@QAEPAVshared_str@@XZ ; stlp_std::vector<shared_str,xalloc<shared_str> >::end
	mov	ecx, DWORD PTR [esi+56]
	lea	edx, DWORD PTR [ecx*4+4]
	sub	eax, edx
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN34@Next_cmd
	add	eax, 16					; 00000010H
	jmp	SHORT $LN35@Next_cmd
$LN34@Next_cmd:
	xor	eax, eax
$LN35@Next_cmd:
	mov	ecx, DWORD PTR [esi+200]
	push	eax
	add	ecx, 4
	call	?set_edit@line_edit_control@text_editor@@QAEXPBD@Z ; text_editor::line_edit_control::set_edit
	mov	DWORD PTR [esi+96], -1
	mov	DWORD PTR [esi+100], 0
	mov	BYTE PTR [esi+36], 0
$LN40@Next_cmd:
	pop	esi

; 115  : }

	ret	4
?Next_cmd@CConsole@@IAGXXZ ENDP				; CConsole::Next_cmd
_TEXT	ENDS
PUBLIC	?Prev_cmd@CConsole@@IAGXXZ			; CConsole::Prev_cmd
; Function compile flags: /Ogtpy
;	COMDAT ?Prev_cmd@CConsole@@IAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Prev_cmd@CConsole@@IAGXXZ PROC				; CConsole::Prev_cmd, COMDAT

; 106  : {

	push	esi

; 107  : 	prev_cmd_history_idx();

	mov	esi, DWORD PTR _this$[esp]
	add	DWORD PTR [esi+56], 1
	mov	edx, DWORD PTR [esi+44]
	sub	edx, DWORD PTR [esi+40]
	mov	eax, DWORD PTR [esi+56]
	lea	ecx, DWORD PTR [esi+40]
	sar	edx, 2
	cmp	eax, edx
	jl	SHORT $LN3@Prev_cmd
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
	sub	eax, 1
	mov	DWORD PTR [esi+56], eax
$LN3@Prev_cmd:

; 108  : 	SelectCommand();

	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR [ecx+4]
	je	SHORT $LN52@Prev_cmd
	call	?end@?$vector@Vshared_str@@V?$xalloc@Vshared_str@@@@@stlp_std@@QAEPAVshared_str@@XZ ; stlp_std::vector<shared_str,xalloc<shared_str> >::end
	mov	ecx, DWORD PTR [esi+56]
	lea	edx, DWORD PTR [ecx*4+4]
	sub	eax, edx
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN46@Prev_cmd
	add	eax, 16					; 00000010H
	jmp	SHORT $LN47@Prev_cmd
$LN46@Prev_cmd:
	xor	eax, eax
$LN47@Prev_cmd:
	mov	ecx, DWORD PTR [esi+200]
	push	eax
	add	ecx, 4
	call	?set_edit@line_edit_control@text_editor@@QAEXPBD@Z ; text_editor::line_edit_control::set_edit
	mov	DWORD PTR [esi+96], -1
	mov	DWORD PTR [esi+100], 0
	mov	BYTE PTR [esi+36], 0
$LN52@Prev_cmd:
	pop	esi

; 109  : }

	ret	4
?Prev_cmd@CConsole@@IAGXXZ ENDP				; CConsole::Prev_cmd
_TEXT	ENDS
PUBLIC	?Find_cmd_back@CConsole@@IAGXXZ			; CConsole::Find_cmd_back
; Function compile flags: /Ogtpy
;	COMDAT ?Find_cmd_back@CConsole@@IAGXXZ
_TEXT	SEGMENT
_name_cmd$120541 = -8					; size = 4
$T366308 = -8						; size = 4
_b_ra$ = -1						; size = 1
_this$ = 8						; size = 4
?Find_cmd_back@CConsole@@IAGXXZ PROC			; CConsole::Find_cmd_back, COMDAT

; 84   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx

; 85   : 	LPCSTR edt      = ec().str_edit();

	mov	ebx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ebx+200]
	push	esi
	mov	esi, DWORD PTR [eax+1028]
	push	edi

; 86   : 	LPCSTR radmin_cmd_name = "ra ";
; 87   : 	bool b_ra  = (edt == strstr( edt, radmin_cmd_name ) );

	push	OFFSET ??_C@_03MDBMMNEB@ra?5?$AA@
	push	esi
	call	DWORD PTR __imp__strstr
	add	esp, 8
	cmp	esi, eax
	sete	al

; 88   : 	u32 offset = (b_ra)? xr_strlen( radmin_cmd_name ) : 0;

	test	al, al
	mov	BYTE PTR _b_ra$[ebp], al
	je	SHORT $LN4@Find_cmd_b
	mov	eax, OFFSET ??_C@_03MDBMMNEB@ra?5?$AA@
	lea	edx, DWORD PTR [eax+1]
	npad	5
$LL56@Find_cmd_b:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL56@Find_cmd_b
	sub	eax, edx
	mov	edi, eax
	jmp	SHORT $LN5@Find_cmd_b
$LN4@Find_cmd_b:
	xor	edi, edi
$LN5@Find_cmd_b:

; 89   : 
; 90   : 	vecCMD_IT it = Commands.lower_bound( edt + offset );

	lea	ecx, DWORD PTR [edi+esi]
	lea	esi, DWORD PTR [ebx+176]
	mov	DWORD PTR $T366308[ebp], ecx
	lea	ebx, DWORD PTR $T366308[ebp]
	mov	ecx, esi
	call	??$_M_lower_bound@PBD@?$_Rb_tree@PBDUstr_pred@CConsole@@U?$pair@QBDPAVIConsole_Command@@@stlp_std@@U?$_Select1st@U?$pair@QBDPAVIConsole_Command@@@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@QBDPAVIConsole_Command@@@stlp_std@@@64@V?$xalloc@U?$pair@PBDPAVIConsole_Command@@@stlp_std@@@@@priv@stlp_std@@ABEPAU_Rb_tree_node_base@12@ABQBD@Z ; stlp_std::priv::_Rb_tree<char const *,CConsole::str_pred,stlp_std::pair<char const * const,IConsole_Command *>,stlp_std::priv::_Select1st<stlp_std::pair<char const * const,IConsole_Command *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<char const * const,IConsole_Command *> >,xalloc<stlp_std::pair<char const *,IConsole_Command *> > >::_M_lower_bound<char const *>

; 91   : 	if ( it != Commands.begin() )

	mov	ecx, esi
	mov	ebx, eax
	call	?_M_leftmost@?$_Rb_tree@PBDUstr_pred@CConsole@@U?$pair@QBDPAVIConsole_Command@@@stlp_std@@U?$_Select1st@U?$pair@QBDPAVIConsole_Command@@@stlp_std@@@priv@4@U?$_MapTraitsT@U?$pair@QBDPAVIConsole_Command@@@stlp_std@@@64@V?$xalloc@U?$pair@PBDPAVIConsole_Command@@@stlp_std@@@@@priv@stlp_std@@IAEAAPAU_Rb_tree_node_base@23@XZ ; stlp_std::priv::_Rb_tree<char const *,CConsole::str_pred,stlp_std::pair<char const * const,IConsole_Command *>,stlp_std::priv::_Select1st<stlp_std::pair<char const * const,IConsole_Command *> >,stlp_std::priv::_MapTraitsT<stlp_std::pair<char const * const,IConsole_Command *> >,xalloc<stlp_std::pair<char const *,IConsole_Command *> > >::_M_leftmost
	cmp	ebx, DWORD PTR [eax]
	je	SHORT $LN1@Find_cmd_b

; 92   : 	{
; 93   : 		--it;

	push	ebx
	call	?_M_decrement@?$_Rb_global@_N@priv@stlp_std@@SAPAU_Rb_tree_node_base@23@PAU423@@Z ; stlp_std::priv::_Rb_global<bool>::_M_decrement

; 94   : 		IConsole_Command& cc = *(it->second);
; 95   : 		LPCSTR name_cmd      = cc.Name();

	mov	edx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+4]
	add	esp, 4
	mov	DWORD PTR _name_cmd$120541[ebp], eax

; 96   : 		u32    name_cmd_size = xr_strlen( name_cmd );

	lea	edx, DWORD PTR [eax+1]
	npad	7
$LL57@Find_cmd_b:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL57@Find_cmd_b
	sub	eax, edx

; 97   : 		PSTR   new_str  = (PSTR)_alloca( (offset + name_cmd_size + 2) * sizeof(char) );

	lea	esi, DWORD PTR [eax+edi+2]
	mov	eax, esi
	call	__alloca_probe_16

; 98   : 
; 99   : 		xr_strcpy( new_str, offset + name_cmd_size + 2, (b_ra)? radmin_cmd_name : "" );

	cmp	BYTE PTR _b_ra$[ebp], 0
	mov	ebx, esp
	mov	eax, OFFSET ??_C@_03MDBMMNEB@ra?5?$AA@
	jne	SHORT $LN7@Find_cmd_b
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN7@Find_cmd_b:
	push	esi
	push	eax
	push	esi
	push	ebx
	call	DWORD PTR __imp__strncpy_s

; 100  : 		xr_strcat( new_str, offset + name_cmd_size + 2, name_cmd );

	mov	ecx, DWORD PTR _name_cmd$120541[ebp]
	push	esi
	mov	edx, ebx
	call	?xr_strcat@@YAHPADIPBD@Z		; xr_strcat

; 101  : 		ec().set_edit( new_str );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+200]
	add	esp, 20					; 00000014H
	push	ebx
	add	ecx, 4
	call	?set_edit@line_edit_control@text_editor@@QAEXPBD@Z ; text_editor::line_edit_control::set_edit
$LN1@Find_cmd_b:

; 102  : 	}
; 103  : }

	lea	esp, DWORD PTR [ebp-20]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Find_cmd_back@CConsole@@IAGXXZ ENDP			; CConsole::Find_cmd_back
_TEXT	ENDS
PUBLIC	?Find_cmd@CConsole@@IAGXXZ			; CConsole::Find_cmd
; Function compile flags: /Ogtpy
;	COMDAT ?Find_cmd@CConsole@@IAGXXZ
_TEXT	SEGMENT
_out_str$ = -4						; size = 4
_this$ = 8						; size = 4
?Find_cmd@CConsole@@IAGXXZ PROC				; CConsole::Find_cmd, COMDAT

; 73   : {

	push	ecx
	push	esi
	push	edi

; 74   : 	shared_str out_str;
; 75   : 		
; 76   : 	IConsole_Command* cc = find_next_cmd( ec().str_edit(), out_str );

	mov	edi, DWORD PTR _this$[esp+8]
	mov	eax, DWORD PTR [edi+200]
	mov	eax, DWORD PTR [eax+1028]
	lea	ecx, DWORD PTR _out_str$[esp+12]
	push	ecx
	push	eax
	mov	ecx, edi
	mov	DWORD PTR _out_str$[esp+20], 0
	call	?find_next_cmd@CConsole@@IAEPAVIConsole_Command@@PBDAAVshared_str@@@Z ; CConsole::find_next_cmd

; 77   : 	if ( cc && out_str.size() )

	test	eax, eax
	mov	esi, DWORD PTR _out_str$[esp+12]
	je	SHORT $LN1@Find_cmd
	test	esi, esi
	je	SHORT $LN26@Find_cmd
	cmp	DWORD PTR [esi+4], 0
	je	SHORT $LN1@Find_cmd

; 78   : 	{
; 79   : 		ec().set_edit( out_str.c_str() );

	mov	ecx, DWORD PTR [edi+200]
	lea	edx, DWORD PTR [esi+16]
	push	edx
	add	ecx, 4
	call	?set_edit@line_edit_control@text_editor@@QAEXPBD@Z ; text_editor::line_edit_control::set_edit
$LN1@Find_cmd:

; 80   : 	}
; 81   : }

	test	esi, esi
	je	SHORT $LN26@Find_cmd
	add	DWORD PTR [esi], -1
$LN26@Find_cmd:
	pop	edi
	pop	esi
	pop	ecx
	ret	4
?Find_cmd@CConsole@@IAGXXZ ENDP				; CConsole::Find_cmd
PUBLIC	?Hide_cmd_esc@CConsole@@IAGXXZ			; CConsole::Hide_cmd_esc
; Function compile flags: /Ogtpy
;	COMDAT ?Hide_cmd_esc@CConsole@@IAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Hide_cmd_esc@CConsole@@IAGXXZ PROC			; CConsole::Hide_cmd_esc, COMDAT

; 201  : {

	push	esi

; 202  : 	if ( 0 <= m_select_tip && m_select_tip < (int)m_tips.size() )

	mov	esi, DWORD PTR _this$[esp]
	cmp	DWORD PTR [esi+96], 0
	jl	SHORT $LN1@Hide_cmd_e
	lea	ecx, DWORD PTR [esi+76]
	call	?size@?$_Impl_vector@UTipString@@V?$xalloc@UTipString@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<TipString,xalloc<TipString> >::size
	cmp	DWORD PTR [esi+96], eax
	jge	SHORT $LN1@Hide_cmd_e

; 203  : 	{
; 204  : 		m_disable_tips = true;

	mov	BYTE PTR [esi+36], 1
	pop	esi

; 208  : }

	ret	4
$LN1@Hide_cmd_e:

; 205  : 		return;
; 206  : 	}
; 207  : 	Hide();

	mov	ecx, esi
	call	?Hide@CConsole@@QAEXXZ			; CConsole::Hide
	pop	esi

; 208  : }

	ret	4
?Hide_cmd_esc@CConsole@@IAGXXZ ENDP			; CConsole::Hide_cmd_esc
_TEXT	ENDS
PUBLIC	?Hide_cmd@CConsole@@IAGXXZ			; CConsole::Hide_cmd
; Function compile flags: /Ogtpy
;	COMDAT ?Hide_cmd@CConsole@@IAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Hide_cmd@CConsole@@IAGXXZ PROC				; CConsole::Hide_cmd, COMDAT

; 197  : 	Hide();

	mov	ecx, DWORD PTR _this$[esp-4]
	call	?Hide@CConsole@@QAEXXZ			; CConsole::Hide

; 198  : }

	ret	4
?Hide_cmd@CConsole@@IAGXXZ ENDP				; CConsole::Hide_cmd
_TEXT	ENDS
PUBLIC	?Execute_cmd@CConsole@@IAGXXZ			; CConsole::Execute_cmd
; Function compile flags: /Ogtpy
;	COMDAT ?Execute_cmd@CConsole@@IAGXXZ
_TEXT	SEGMENT
_STRCONCAT_tupples_unique_identifier$120598 = -52	; size = 52
_STRCONCAT_tupples_unique_identifier$120583 = -52	; size = 52
_this$ = 8						; size = 4
?Execute_cmd@CConsole@@IAGXXZ PROC			; CConsole::Execute_cmd, COMDAT

; 165  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	ebx
	push	esi

; 166  : 	if ( 0 <= m_select_tip && m_select_tip < (int)m_tips.size() )

	mov	esi, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [esi+96], 0
	push	edi
	jl	$LN11@Execute_cm
	lea	ebx, DWORD PTR [esi+76]
	mov	ecx, ebx
	call	?size@?$_Impl_vector@UTipString@@V?$xalloc@UTipString@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<TipString,xalloc<TipString> >::size
	mov	edi, DWORD PTR [esi+96]
	cmp	edi, eax
	jge	$LN11@Execute_cm

; 167  : 	{
; 168  : 		shared_str const& str = m_tips[m_select_tip].text;

	mov	ecx, ebx
	call	?begin@?$_Impl_vector@UTipString@@V?$xalloc@UTipString@@@@@priv@stlp_std@@QAEPAUTipString@@XZ ; stlp_std::priv::_Impl_vector<TipString,xalloc<TipString> >::begin
	lea	ecx, DWORD PTR [edi+edi*2]
	lea	eax, DWORD PTR [eax+ecx*4]

; 169  : 		if ( m_tips_mode == 1 )

	mov	ecx, DWORD PTR [esi+88]
	cmp	ecx, 1
	jne	SHORT $LN10@Execute_cm

; 170  : 		{
; 171  : 			LPSTR buf;
; 172  : 			STRCONCAT( buf, str.c_str(), " " );

	call	?c_str@shared_str@@QBEPBDXZ		; shared_str::c_str
	mov	ecx, eax
	lea	eax, DWORD PTR _STRCONCAT_tupples_unique_identifier$120583[ebp]
	call	??$?0PBDPBD@string_tupples@detail@core@xray@@QAE@PBD0@Z ; xray::core::detail::string_tupples::string_tupples<char const *,char const *>

; 173  : 			ec().set_edit( buf );

	jmp	SHORT $LN52@Execute_cm
$LN10@Execute_cm:

; 174  : 		}
; 175  : 		else if ( m_tips_mode == 2 )

	cmp	ecx, 2
	jne	SHORT $LN5@Execute_cm

; 176  : 		{
; 177  : 			LPSTR buf;
; 178  : 			STRCONCAT( buf, m_cur_cmd.c_str(), " ", str.c_str() );

	mov	ecx, DWORD PTR [esi+92]
	test	ecx, ecx
	je	SHORT $LN37@Execute_cm
	lea	edi, DWORD PTR [ecx+16]
	jmp	SHORT $LN38@Execute_cm
$LN37@Execute_cm:
	xor	edi, edi
$LN38@Execute_cm:
	call	?c_str@shared_str@@QBEPBDXZ		; shared_str::c_str
	push	eax
	mov	ecx, edi
	lea	eax, DWORD PTR _STRCONCAT_tupples_unique_identifier$120598[ebp]
	call	??$?0PBDPBDPBD@string_tupples@detail@core@xray@@QAE@PBD00@Z ; xray::core::detail::string_tupples::string_tupples<char const *,char const *,char const *>
$LN52@Execute_cm:
	lea	ecx, DWORD PTR _STRCONCAT_tupples_unique_identifier$120598[ebp]
	call	DWORD PTR __imp_?size@string_tupples@detail@core@xray@@QBEIXZ
	mov	edi, eax
	push	edi
	call	DWORD PTR __imp_?check_stack_overflow@detail@core@xray@@YAXI@Z
	add	esp, 4
	mov	eax, edi
	call	__alloca_probe_16
	mov	edi, esp
	push	edi
	lea	ecx, DWORD PTR _STRCONCAT_tupples_unique_identifier$120598[ebp]
	call	DWORD PTR __imp_?concat@string_tupples@detail@core@xray@@QBEXQBD@Z

; 179  : 			ec().set_edit( buf );

	mov	ecx, DWORD PTR [esi+200]
	push	edi
	add	ecx, 4
	call	?set_edit@line_edit_control@text_editor@@QAEXPBD@Z ; text_editor::line_edit_control::set_edit
$LN5@Execute_cm:

; 180  : 		}
; 181  : 		reset_selected_tip();

	mov	BYTE PTR [esi+36], 0
	mov	DWORD PTR [esi+96], -1
	mov	DWORD PTR [esi+100], 0

; 186  : 	}
; 187  : 	m_disable_tips = false;

	mov	BYTE PTR [esi+36], 0

; 188  : }

	lea	esp, DWORD PTR [ebp-68]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN11@Execute_cm:

; 182  : 	}
; 183  : 	else
; 184  : 	{
; 185  : 		ExecuteCommand( ec().str_edit() );

	mov	edx, DWORD PTR [esi+200]
	mov	eax, DWORD PTR [edx+1028]
	push	1
	push	eax
	mov	ecx, esi
	call	?ExecuteCommand@CConsole@@QAEXPBD_N@Z	; CConsole::ExecuteCommand

; 186  : 	}
; 187  : 	m_disable_tips = false;

	mov	BYTE PTR [esi+36], 0

; 188  : }

	lea	esp, DWORD PTR [ebp-68]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Execute_cmd@CConsole@@IAGXXZ ENDP			; CConsole::Execute_cmd
_TEXT	ENDS
PUBLIC	?Register_callbacks@CConsole@@IAEXXZ		; CConsole::Register_callbacks
; Function compile flags: /Ogtpy
;	COMDAT ?Register_callbacks@CConsole@@IAEXXZ
_TEXT	SEGMENT
_prev_action$527529 = -4				; size = 4
_prev_action$527309 = -4				; size = 4
_prev_action$527149 = -4				; size = 4
_prev_action$526959 = -4				; size = 4
_prev_action$526769 = -4				; size = 4
_prev_action$526579 = -4				; size = 4
_prev_action$526374 = -4				; size = 4
_prev_action$526199 = -4				; size = 4
_prev_action$526009 = -4				; size = 4
_prev_action$525819 = -4				; size = 4
_prev_action$525629 = -4				; size = 4
_prev_action$525438 = -4				; size = 4
_prev_action$525220 = -4				; size = 4
_prev_action$525059 = -4				; size = 4
_prev_action$524869 = -4				; size = 4
_prev_action$524679 = -4				; size = 4
_prev_action$524489 = -4				; size = 4
_prev_action$524269 = -4				; size = 4
_prev_action$524109 = -4				; size = 4
?Register_callbacks@CConsole@@IAEXXZ PROC		; CConsole::Register_callbacks, COMDAT
; _this$ = ecx

; 17   : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 8
	push	ebx

; 18   : 	ec().assign_callback( DIK_PRIOR, text_editor::ks_free,  Callback( this, &CConsole::Prev_log      ) );

	mov	ebx, DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	push	ebp
	push	esi
	mov	esi, ecx
	mov	ebp, DWORD PTR [esi+200]
	mov	eax, DWORD PTR [ebp+808]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	add	ebp, 4
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$524109[esp+28], eax
	call	ebx
	xor	edi, edi
	cmp	eax, edi
	je	SHORT $LN26@Register_c
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?Prev_log@CConsole@@IAGXXZ ; CConsole::Prev_log
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], edi
	jmp	SHORT $LN27@Register_c
$LN26@Register_c:
	xor	eax, eax
$LN27@Register_c:
	mov	ecx, DWORD PTR _prev_action$524109[esp+24]
	mov	DWORD PTR [ebp+804], eax
	mov	DWORD PTR [eax+4], ecx

; 19   : 	ec().assign_callback( DIK_NEXT,  text_editor::ks_free,  Callback( this, &CConsole::Next_log      ) );

	mov	ebp, DWORD PTR [esi+200]
	mov	edx, DWORD PTR [ebp+840]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	ebp, 4
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$524269[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN75@Register_c
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?Next_log@CConsole@@IAGXXZ ; CConsole::Next_log
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], edi
	jmp	SHORT $LN76@Register_c
$LN75@Register_c:
	xor	eax, eax
$LN76@Register_c:
	mov	ecx, DWORD PTR _prev_action$524269[esp+24]
	mov	DWORD PTR [ebp+836], eax
	mov	DWORD PTR [eax+4], ecx

; 20   : 	ec().assign_callback( DIK_PRIOR, text_editor::ks_Ctrl,  Callback( this, &CConsole::Begin_log     ) );

	mov	ebp, DWORD PTR [esi+200]
	mov	edx, DWORD PTR [ebp+808]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	ebp, 4
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$524489[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN124@Register_c
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?Begin_log@CConsole@@IAGXXZ ; CConsole::Begin_log
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], 12			; 0000000cH
	jmp	SHORT $LN125@Register_c
$LN124@Register_c:
	xor	eax, eax
$LN125@Register_c:
	mov	ecx, DWORD PTR _prev_action$524489[esp+24]
	mov	DWORD PTR [ebp+804], eax
	mov	DWORD PTR [eax+4], ecx

; 21   : 	ec().assign_callback( DIK_NEXT,  text_editor::ks_Ctrl,  Callback( this, &CConsole::End_log       ) );

	mov	ebp, DWORD PTR [esi+200]
	mov	edx, DWORD PTR [ebp+840]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	ebp, 4
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$524679[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN173@Register_c
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?End_log@CConsole@@IAGXXZ ; CConsole::End_log
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], 12			; 0000000cH
	jmp	SHORT $LN174@Register_c
$LN173@Register_c:
	xor	eax, eax
$LN174@Register_c:
	mov	ecx, DWORD PTR _prev_action$524679[esp+24]
	mov	DWORD PTR [ebp+836], eax
	mov	DWORD PTR [eax+4], ecx

; 22   : 
; 23   : 	ec().assign_callback( DIK_TAB,   text_editor::ks_free,  Callback( this, &CConsole::Find_cmd      ) );

	mov	ebp, DWORD PTR [esi+200]
	mov	edx, DWORD PTR [ebp+64]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	ebp, 4
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$524869[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN222@Register_c
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?Find_cmd@CConsole@@IAGXXZ ; CConsole::Find_cmd
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], edi
	jmp	SHORT $LN223@Register_c
$LN222@Register_c:
	xor	eax, eax
$LN223@Register_c:
	mov	ecx, DWORD PTR _prev_action$524869[esp+24]
	mov	DWORD PTR [ebp+60], eax
	mov	DWORD PTR [eax+4], ecx

; 24   : 	ec().assign_callback( DIK_TAB,   text_editor::ks_Shift, Callback( this, &CConsole::Find_cmd_back ) );

	mov	ebp, DWORD PTR [esi+200]
	mov	edx, DWORD PTR [ebp+64]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	ebp, 4
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$525059[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN271@Register_c
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?Find_cmd_back@CConsole@@IAGXXZ ; CConsole::Find_cmd_back
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], 3
	jmp	SHORT $LN272@Register_c
$LN271@Register_c:
	xor	eax, eax
$LN272@Register_c:
	mov	ecx, DWORD PTR _prev_action$525059[esp+24]
	mov	DWORD PTR [ebp+60], eax
	mov	DWORD PTR [eax+4], ecx

; 25   : 	ec().assign_callback( DIK_TAB,   text_editor::ks_Alt,   Callback( this, &CConsole::GamePause     ) );

	mov	ebp, DWORD PTR [esi+200]
	mov	edx, DWORD PTR [ebp+64]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	ebp, 4
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$525220[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN320@Register_c
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?GamePause@CConsole@@IAGXXZ ; CConsole::GamePause
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], 48			; 00000030H
	jmp	SHORT $LN321@Register_c
$LN320@Register_c:
	xor	eax, eax
$LN321@Register_c:
	mov	ecx, DWORD PTR _prev_action$525220[esp+24]
	mov	DWORD PTR [ebp+60], eax
	mov	DWORD PTR [eax+4], ecx

; 26   : 
; 27   : 	ec().assign_callback( DIK_UP,    text_editor::ks_free,  Callback( this, &CConsole::Prev_tip      ) );

	mov	ebp, DWORD PTR [esi+200]
	mov	edx, DWORD PTR [ebp+804]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	ebp, 4
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$525438[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN369@Register_c
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?Prev_tip@CConsole@@IAGXXZ ; CConsole::Prev_tip
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], edi
	jmp	SHORT $LN370@Register_c
$LN369@Register_c:
	xor	eax, eax
$LN370@Register_c:
	mov	ecx, DWORD PTR _prev_action$525438[esp+24]
	mov	DWORD PTR [ebp+800], eax
	mov	DWORD PTR [eax+4], ecx

; 28   : 	ec().assign_callback( DIK_DOWN,  text_editor::ks_free,  Callback( this, &CConsole::Next_tip      ) );

	mov	ebp, DWORD PTR [esi+200]
	mov	edx, DWORD PTR [ebp+836]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	ebp, 4
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$525629[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN418@Register_c
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?Next_tip@CConsole@@IAGXXZ ; CConsole::Next_tip
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], edi
	jmp	SHORT $LN419@Register_c
$LN418@Register_c:
	xor	eax, eax
$LN419@Register_c:
	mov	ecx, DWORD PTR _prev_action$525629[esp+24]
	mov	DWORD PTR [ebp+832], eax
	mov	DWORD PTR [eax+4], ecx

; 29   : 	ec().assign_callback( DIK_UP,    text_editor::ks_Ctrl,  Callback( this, &CConsole::Prev_cmd      ) );

	mov	ebp, DWORD PTR [esi+200]
	mov	edx, DWORD PTR [ebp+804]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	ebp, 4
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$525819[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN467@Register_c
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?Prev_cmd@CConsole@@IAGXXZ ; CConsole::Prev_cmd
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], 12			; 0000000cH
	jmp	SHORT $LN468@Register_c
$LN467@Register_c:
	xor	eax, eax
$LN468@Register_c:
	mov	ecx, DWORD PTR _prev_action$525819[esp+24]
	mov	DWORD PTR [ebp+800], eax
	mov	DWORD PTR [eax+4], ecx

; 30   : 	ec().assign_callback( DIK_DOWN,  text_editor::ks_Ctrl,  Callback( this, &CConsole::Next_cmd      ) );

	mov	ebp, DWORD PTR [esi+200]
	mov	edx, DWORD PTR [ebp+836]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	ebp, 4
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$526009[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN516@Register_c
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?Next_cmd@CConsole@@IAGXXZ ; CConsole::Next_cmd
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], 12			; 0000000cH
	jmp	SHORT $LN517@Register_c
$LN516@Register_c:
	xor	eax, eax
$LN517@Register_c:
	mov	ecx, DWORD PTR _prev_action$526009[esp+24]
	mov	DWORD PTR [ebp+832], eax
	mov	DWORD PTR [eax+4], ecx

; 31   : 
; 32   : 	ec().assign_callback( DIK_HOME,  text_editor::ks_Alt,   Callback( this, &CConsole::Begin_tips    ) );

	mov	ebp, DWORD PTR [esi+200]
	mov	edx, DWORD PTR [ebp+800]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	ebp, 4
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$526199[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN565@Register_c
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?Begin_tips@CConsole@@IAGXXZ ; CConsole::Begin_tips
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], 48			; 00000030H
	jmp	SHORT $LN566@Register_c
$LN565@Register_c:
	xor	eax, eax
$LN566@Register_c:
	mov	ecx, DWORD PTR _prev_action$526199[esp+24]
	mov	DWORD PTR [ebp+796], eax
	mov	DWORD PTR [eax+4], ecx

; 33   : 	ec().assign_callback( DIK_END,   text_editor::ks_Alt,   Callback( this, &CConsole::End_tips      ) );

	mov	ebp, DWORD PTR [esi+200]
	mov	edx, DWORD PTR [ebp+832]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	ebp, 4
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$526374[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN614@Register_c
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?End_tips@CConsole@@IAGXXZ ; CConsole::End_tips
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], 48			; 00000030H
	jmp	SHORT $LN615@Register_c
$LN614@Register_c:
	xor	eax, eax
$LN615@Register_c:
	mov	ecx, DWORD PTR _prev_action$526374[esp+24]
	mov	DWORD PTR [ebp+828], eax
	mov	DWORD PTR [eax+4], ecx

; 34   : 	ec().assign_callback( DIK_PRIOR, text_editor::ks_Alt,   Callback( this, &CConsole::PageUp_tips   ) );

	mov	ebp, DWORD PTR [esi+200]
	mov	edx, DWORD PTR [ebp+808]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	ebp, 4
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$526579[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN663@Register_c
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?PageUp_tips@CConsole@@IAGXXZ ; CConsole::PageUp_tips
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], 48			; 00000030H
	jmp	SHORT $LN664@Register_c
$LN663@Register_c:
	xor	eax, eax
$LN664@Register_c:
	mov	ecx, DWORD PTR _prev_action$526579[esp+24]
	mov	DWORD PTR [ebp+804], eax
	mov	DWORD PTR [eax+4], ecx

; 35   : 	ec().assign_callback( DIK_NEXT,  text_editor::ks_Alt,   Callback( this, &CConsole::PageDown_tips ) );

	mov	ebp, DWORD PTR [esi+200]
	mov	edx, DWORD PTR [ebp+840]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	ebp, 4
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$526769[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN712@Register_c
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?PageDown_tips@CConsole@@IAGXXZ ; CConsole::PageDown_tips
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], 48			; 00000030H
	jmp	SHORT $LN713@Register_c
$LN712@Register_c:
	xor	eax, eax
$LN713@Register_c:
	mov	ecx, DWORD PTR _prev_action$526769[esp+24]
	mov	DWORD PTR [ebp+836], eax
	mov	DWORD PTR [eax+4], ecx

; 36   : 	
; 37   : 	ec().assign_callback( DIK_RETURN,      text_editor::ks_free, Callback( this, &CConsole::Execute_cmd ) );

	mov	ebp, DWORD PTR [esi+200]
	mov	edx, DWORD PTR [ebp+116]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	ebp, 4
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$526959[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN761@Register_c
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?Execute_cmd@CConsole@@IAGXXZ ; CConsole::Execute_cmd
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], edi
	jmp	SHORT $LN762@Register_c
$LN761@Register_c:
	xor	eax, eax
$LN762@Register_c:
	mov	ecx, DWORD PTR _prev_action$526959[esp+24]
	mov	DWORD PTR [ebp+112], eax
	mov	DWORD PTR [eax+4], ecx

; 38   : 	ec().assign_callback( DIK_NUMPADENTER, text_editor::ks_free, Callback( this, &CConsole::Execute_cmd ) );

	mov	ebp, DWORD PTR [esi+200]
	mov	edx, DWORD PTR [ebp+628]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	ebp, 4
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$527149[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN810@Register_c
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?Execute_cmd@CConsole@@IAGXXZ ; CConsole::Execute_cmd
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], edi
	jmp	SHORT $LN811@Register_c
$LN810@Register_c:
	xor	eax, eax
$LN811@Register_c:
	mov	ecx, DWORD PTR _prev_action$527149[esp+24]
	mov	DWORD PTR [ebp+624], eax
	mov	DWORD PTR [eax+4], ecx

; 39   : 	
; 40   : 	ec().assign_callback( DIK_ESCAPE, text_editor::ks_free, Callback( this, &CConsole::Hide_cmd_esc ) );

	mov	ebp, DWORD PTR [esi+200]
	mov	edx, DWORD PTR [ebp+8]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	ebp, 4
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$527309[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN859@Register_c
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?Hide_cmd_esc@CConsole@@IAGXXZ ; CConsole::Hide_cmd_esc
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], edi
	jmp	SHORT $LN860@Register_c
$LN859@Register_c:
	xor	eax, eax
$LN860@Register_c:
	mov	ecx, DWORD PTR _prev_action$527309[esp+24]
	mov	DWORD PTR [ebp+4], eax
	mov	DWORD PTR [eax+4], ecx

; 41   : 	ec().assign_callback( DIK_GRAVE,  text_editor::ks_free, Callback( this, &CConsole::Hide_cmd     ) );

	mov	ebp, DWORD PTR [esi+200]
	mov	edx, DWORD PTR [ebp+168]
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	add	ebp, 4
	push	20					; 00000014H
	mov	DWORD PTR _prev_action$527529[esp+28], edx
	call	ebx
	cmp	eax, edi
	je	SHORT $LN908@Register_c
	mov	ecx, DWORD PTR _prev_action$527529[esp+24]
	mov	DWORD PTR [eax], OFFSET ??_7callback_base@text_editor@@6B@
	mov	DWORD PTR [eax+16], OFFSET ?Hide_cmd@CConsole@@IAGXXZ ; CConsole::Hide_cmd
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+8], edi
	mov	DWORD PTR [ebp+164], eax
	mov	DWORD PTR [eax+4], ecx

; 42   : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0

; 41   : 	ec().assign_callback( DIK_GRAVE,  text_editor::ks_free, Callback( this, &CConsole::Hide_cmd     ) );

$LN908@Register_c:
	mov	edx, DWORD PTR _prev_action$527529[esp+24]
	mov	DWORD PTR [ebp+164], edi
	mov	DWORD PTR [edi+4], edx

; 42   : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Register_callbacks@CConsole@@IAEXXZ ENDP		; CConsole::Register_callbacks
PUBLIC	?Show_cmd@CConsole@@IAGXXZ			; CConsole::Show_cmd
; Function compile flags: /Ogtpy
;	COMDAT ?Show_cmd@CConsole@@IAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Show_cmd@CConsole@@IAGXXZ PROC				; CConsole::Show_cmd, COMDAT

; 192  : 	Show();

	mov	ecx, DWORD PTR _this$[esp-4]
	call	?Show@CConsole@@QAEXXZ			; CConsole::Show

; 193  : }

	ret	4
?Show_cmd@CConsole@@IAGXXZ ENDP				; CConsole::Show_cmd
END
