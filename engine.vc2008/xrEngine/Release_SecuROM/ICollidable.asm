; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	D:\CLEARSKY\sources\engine\xrEngine\ICollidable.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_ECCF_Shape@@UAEPAXI@Z			; CCF_Shape::`vector deleting destructor'
PUBLIC	??_R4CCF_Shape@@6B@				; CCF_Shape::`RTTI Complete Object Locator'
PUBLIC	??_R3CCF_Shape@@8				; CCF_Shape::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCF_Shape@@8				; CCF_Shape::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCF_Shape@@8			; CCF_Shape::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCCF_Shape@@@8				; CCF_Shape `RTTI Type Descriptor'
PUBLIC	??_ECCF_EventBox@@UAEPAXI@Z			; CCF_EventBox::`vector deleting destructor'
PUBLIC	??_R4CCF_EventBox@@6B@				; CCF_EventBox::`RTTI Complete Object Locator'
PUBLIC	??_R3CCF_EventBox@@8				; CCF_EventBox::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCF_EventBox@@8				; CCF_EventBox::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCF_EventBox@@8			; CCF_EventBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCCF_EventBox@@@8			; CCF_EventBox `RTTI Type Descriptor'
PUBLIC	??_ECCF_Skeleton@@UAEPAXI@Z			; CCF_Skeleton::`vector deleting destructor'
PUBLIC	??_R4CCF_Skeleton@@6B@				; CCF_Skeleton::`RTTI Complete Object Locator'
PUBLIC	??_R3CCF_Skeleton@@8				; CCF_Skeleton::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCF_Skeleton@@8				; CCF_Skeleton::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCF_Skeleton@@8			; CCF_Skeleton::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCCF_Skeleton@@@8			; CCF_Skeleton `RTTI Type Descriptor'
PUBLIC	??_EICollisionForm@@UAEPAXI@Z			; ICollisionForm::`vector deleting destructor'
PUBLIC	??_R4ICollisionForm@@6B@			; ICollisionForm::`RTTI Complete Object Locator'
PUBLIC	??_R3ICollisionForm@@8				; ICollisionForm::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICollisionForm@@8				; ICollisionForm::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICollisionForm@@8			; ICollisionForm::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVICollisionForm@@@8			; ICollisionForm `RTTI Type Descriptor'
PUBLIC	??0?$_STLP_alloc_proxy@PAUshape_def@CCF_Shape@@U12@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Ushape_def@CCF_Shape@@@@PAUshape_def@CCF_Shape@@@Z ; stlp_std::priv::_STLP_alloc_proxy<CCF_Shape::shape_def *,CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_STLP_alloc_proxy<CCF_Shape::shape_def *,CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >
PUBLIC	??0?$_Vector_base@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@IABV?$xalloc@Ushape_def@CCF_Shape@@@@@Z ; stlp_std::priv::_Vector_base<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_Vector_base<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >
PUBLIC	??0?$xalloc@Ushape_def@CCF_Shape@@@@QAE@ABV0@@Z	; xalloc<CCF_Shape::shape_def>::xalloc<CCF_Shape::shape_def>
PUBLIC	?get_allocator@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QBE?AV?$xalloc@Ushape_def@CCF_Shape@@@@XZ ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::get_allocator
PUBLIC	?begin@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QBEPBUshape_def@CCF_Shape@@XZ ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::begin
PUBLIC	?end@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QBEPBUshape_def@CCF_Shape@@XZ ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::end
PUBLIC	??0?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >
PUBLIC	??0?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >
PUBLIC	??0?$xr_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@@QAE@ABV0@@Z ; xr_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::xr_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >
PUBLIC	?size@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::size
PUBLIC	?capacity@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::capacity
PUBLIC	?_M_clear@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@AAEXXZ ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_M_clear
PUBLIC	??$xr_alloc@Ushape_def@CCF_Shape@@@@YAPAUshape_def@CCF_Shape@@I@Z ; xr_alloc<CCF_Shape::shape_def>
PUBLIC	?allocate@?$xalloc@Ushape_def@CCF_Shape@@@@QBEPAUshape_def@CCF_Shape@@IPBX@Z ; xalloc<CCF_Shape::shape_def>::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@PAUshape_def@CCF_Shape@@U12@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEPAUshape_def@CCF_Shape@@I@Z ; stlp_std::priv::_STLP_alloc_proxy<CCF_Shape::shape_def *,CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@PAUshape_def@CCF_Shape@@U12@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@AAEPAUshape_def@CCF_Shape@@IAAIABU__false_type@3@@Z ; stlp_std::priv::_STLP_alloc_proxy<CCF_Shape::shape_def *,CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@PAUshape_def@CCF_Shape@@U12@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEPAUshape_def@CCF_Shape@@IAAI@Z ; stlp_std::priv::_STLP_alloc_proxy<CCF_Shape::shape_def *,CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::allocate
PUBLIC	?_Answer@?$_BothPtrType@PBUshape_def@CCF_Shape@@PAU12@@stlp_std@@SA?AU__true_type@2@XZ ; stlp_std::_BothPtrType<CCF_Shape::shape_def const *,CCF_Shape::shape_def *>::_Answer
PUBLIC	??$__ucopy_ptrs@PBUshape_def@CCF_Shape@@PAU12@@priv@stlp_std@@YAPAUshape_def@CCF_Shape@@PBU23@0PAU23@ABU__true_type@1@@Z ; stlp_std::priv::__ucopy_ptrs<CCF_Shape::shape_def const *,CCF_Shape::shape_def *>
PUBLIC	??$_UseTrivialUCopy@Ushape_def@CCF_Shape@@U12@@stlp_std@@YA?AU?$_TrivialUCopy@Ushape_def@CCF_Shape@@U12@@0@PAUshape_def@CCF_Shape@@0@Z ; stlp_std::_UseTrivialUCopy<CCF_Shape::shape_def,CCF_Shape::shape_def>
PUBLIC	?_Answer@?$_TrivialUCopy@Ushape_def@CCF_Shape@@U12@@stlp_std@@SA?AU__true_type@2@XZ ; stlp_std::_TrivialUCopy<CCF_Shape::shape_def,CCF_Shape::shape_def>::_Answer
PUBLIC	??$__ucopy_aux@PBUshape_def@CCF_Shape@@PAU12@@priv@stlp_std@@YAPAUshape_def@CCF_Shape@@PBU23@0PAU23@ABU__true_type@1@@Z ; stlp_std::priv::__ucopy_aux<CCF_Shape::shape_def const *,CCF_Shape::shape_def *>
PUBLIC	??$uninitialized_copy@PBUshape_def@CCF_Shape@@PAU12@@stlp_std@@YAPAUshape_def@CCF_Shape@@PBU12@0PAU12@@Z ; stlp_std::uninitialized_copy<CCF_Shape::shape_def const *,CCF_Shape::shape_def *>
PUBLIC	??$_M_allocate_and_copy@PBUshape_def@CCF_Shape@@@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@AAEPAUshape_def@CCF_Shape@@AAIPBU34@1@Z ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_M_allocate_and_copy<CCF_Shape::shape_def const *>
PUBLIC	??$__copy_ptrs@PBUshape_def@CCF_Shape@@PAU12@@priv@stlp_std@@YAPAUshape_def@CCF_Shape@@PBU23@0PAU23@ABU__true_type@1@@Z ; stlp_std::priv::__copy_ptrs<CCF_Shape::shape_def const *,CCF_Shape::shape_def *>
PUBLIC	??$__destroy_range_aux@PAUshape_def@CCF_Shape@@U12@@stlp_std@@YAXPAUshape_def@CCF_Shape@@00ABU__true_type@0@@Z ; stlp_std::__destroy_range_aux<CCF_Shape::shape_def *,CCF_Shape::shape_def>
PUBLIC	??$__destroy_range@PAUshape_def@CCF_Shape@@U12@@stlp_std@@YAXPAUshape_def@CCF_Shape@@00@Z ; stlp_std::__destroy_range<CCF_Shape::shape_def *,CCF_Shape::shape_def>
PUBLIC	??$_Destroy_Range@PAUshape_def@CCF_Shape@@@stlp_std@@YAXPAUshape_def@CCF_Shape@@0@Z ; stlp_std::_Destroy_Range<CCF_Shape::shape_def *>
PUBLIC	??4?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::operator=
PUBLIC	??4?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QAEAAV01@ABV01@@Z ; stlp_std::vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::operator=
PUBLIC	??4?$xr_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@@QAEAAV0@ABV0@@Z ; xr_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::operator=
PUBLIC	??1?$xr_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@@QAE@XZ ; xr_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::~xr_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >
PUBLIC	??0?$_STLP_alloc_proxy@PAUSElement@CCF_Skeleton@@U12@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@ABV?$xalloc@USElement@CCF_Skeleton@@@@PAUSElement@CCF_Skeleton@@@Z ; stlp_std::priv::_STLP_alloc_proxy<CCF_Skeleton::SElement *,CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_STLP_alloc_proxy<CCF_Skeleton::SElement *,CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >
PUBLIC	??0?$_Vector_base@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@IABV?$xalloc@USElement@CCF_Skeleton@@@@@Z ; stlp_std::priv::_Vector_base<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_Vector_base<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >
PUBLIC	??0?$xalloc@USElement@CCF_Skeleton@@@@QAE@ABV0@@Z ; xalloc<CCF_Skeleton::SElement>::xalloc<CCF_Skeleton::SElement>
PUBLIC	?get_allocator@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QBE?AV?$xalloc@USElement@CCF_Skeleton@@@@XZ ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::get_allocator
PUBLIC	?begin@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QBEPBUSElement@CCF_Skeleton@@XZ ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::begin
PUBLIC	?end@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QBEPBUSElement@CCF_Skeleton@@XZ ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::end
PUBLIC	??0?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >
PUBLIC	??0?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >
PUBLIC	??1?$_Vector_base@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@XZ ; stlp_std::priv::_Vector_base<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::~_Vector_base<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >
PUBLIC	??1?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@XZ ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::~_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >
PUBLIC	??1?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAE@XZ ; stlp_std::vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::~vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >
PUBLIC	??0?$xr_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@@QAE@ABV0@@Z ; xr_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::xr_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >
PUBLIC	?size@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::size
PUBLIC	?capacity@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QBEIXZ ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::capacity
PUBLIC	??$xr_free@USElement@CCF_Skeleton@@@@YAXAAPAUSElement@CCF_Skeleton@@@Z ; xr_free<CCF_Skeleton::SElement>
PUBLIC	?deallocate@?$xalloc@USElement@CCF_Skeleton@@@@QBEXPAUSElement@CCF_Skeleton@@I@Z ; xalloc<CCF_Skeleton::SElement>::deallocate
PUBLIC	?end@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEPAUSElement@CCF_Skeleton@@XZ ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::end
PUBLIC	?rbegin@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUSElement@CCF_Skeleton@@@3@XZ ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::rbegin
PUBLIC	?begin@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEPAUSElement@CCF_Skeleton@@XZ ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::begin
PUBLIC	??0?$reverse_iterator@PAUSElement@CCF_Skeleton@@@stlp_std@@QAE@PAUSElement@CCF_Skeleton@@@Z ; stlp_std::reverse_iterator<CCF_Skeleton::SElement *>::reverse_iterator<CCF_Skeleton::SElement *>
PUBLIC	?rend@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUSElement@CCF_Skeleton@@@3@XZ ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::rend
PUBLIC	??0?$reverse_iterator@PAUSElement@CCF_Skeleton@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::reverse_iterator<CCF_Skeleton::SElement *>::reverse_iterator<CCF_Skeleton::SElement *>
PUBLIC	??$__destroy_range_aux@V?$reverse_iterator@PAUSElement@CCF_Skeleton@@@stlp_std@@USElement@CCF_Skeleton@@@stlp_std@@YAXV?$reverse_iterator@PAUSElement@CCF_Skeleton@@@0@0PAUSElement@CCF_Skeleton@@ABU__true_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CCF_Skeleton::SElement *>,CCF_Skeleton::SElement>
PUBLIC	??$__destroy_range@V?$reverse_iterator@PAUSElement@CCF_Skeleton@@@stlp_std@@USElement@CCF_Skeleton@@@stlp_std@@YAXV?$reverse_iterator@PAUSElement@CCF_Skeleton@@@0@0PAUSElement@CCF_Skeleton@@@Z ; stlp_std::__destroy_range<stlp_std::reverse_iterator<CCF_Skeleton::SElement *>,CCF_Skeleton::SElement>
PUBLIC	??$_Destroy_Range@V?$reverse_iterator@PAUSElement@CCF_Skeleton@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAUSElement@CCF_Skeleton@@@0@0@Z ; stlp_std::_Destroy_Range<stlp_std::reverse_iterator<CCF_Skeleton::SElement *> >
PUBLIC	?_M_clear@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@AAEXXZ ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_M_clear
PUBLIC	??$xr_alloc@USElement@CCF_Skeleton@@@@YAPAUSElement@CCF_Skeleton@@I@Z ; xr_alloc<CCF_Skeleton::SElement>
PUBLIC	?allocate@?$xalloc@USElement@CCF_Skeleton@@@@QBEPAUSElement@CCF_Skeleton@@IPBX@Z ; xalloc<CCF_Skeleton::SElement>::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@PAUSElement@CCF_Skeleton@@U12@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEPAUSElement@CCF_Skeleton@@I@Z ; stlp_std::priv::_STLP_alloc_proxy<CCF_Skeleton::SElement *,CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@PAUSElement@CCF_Skeleton@@U12@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@AAEPAUSElement@CCF_Skeleton@@IAAIABU__false_type@3@@Z ; stlp_std::priv::_STLP_alloc_proxy<CCF_Skeleton::SElement *,CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::allocate
PUBLIC	?allocate@?$_STLP_alloc_proxy@PAUSElement@CCF_Skeleton@@U12@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEPAUSElement@CCF_Skeleton@@IAAI@Z ; stlp_std::priv::_STLP_alloc_proxy<CCF_Skeleton::SElement *,CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::allocate
PUBLIC	?_Answer@?$_BothPtrType@PBUSElement@CCF_Skeleton@@PAU12@@stlp_std@@SA?AU__true_type@2@XZ ; stlp_std::_BothPtrType<CCF_Skeleton::SElement const *,CCF_Skeleton::SElement *>::_Answer
PUBLIC	??$__ucopy_ptrs@PBUSElement@CCF_Skeleton@@PAU12@@priv@stlp_std@@YAPAUSElement@CCF_Skeleton@@PBU23@0PAU23@ABU__true_type@1@@Z ; stlp_std::priv::__ucopy_ptrs<CCF_Skeleton::SElement const *,CCF_Skeleton::SElement *>
PUBLIC	??$_UseTrivialUCopy@USElement@CCF_Skeleton@@U12@@stlp_std@@YA?AU?$_TrivialUCopy@USElement@CCF_Skeleton@@U12@@0@PAUSElement@CCF_Skeleton@@0@Z ; stlp_std::_UseTrivialUCopy<CCF_Skeleton::SElement,CCF_Skeleton::SElement>
PUBLIC	?_Answer@?$_TrivialUCopy@USElement@CCF_Skeleton@@U12@@stlp_std@@SA?AU__true_type@2@XZ ; stlp_std::_TrivialUCopy<CCF_Skeleton::SElement,CCF_Skeleton::SElement>::_Answer
PUBLIC	??$__ucopy_aux@PBUSElement@CCF_Skeleton@@PAU12@@priv@stlp_std@@YAPAUSElement@CCF_Skeleton@@PBU23@0PAU23@ABU__true_type@1@@Z ; stlp_std::priv::__ucopy_aux<CCF_Skeleton::SElement const *,CCF_Skeleton::SElement *>
PUBLIC	??$uninitialized_copy@PBUSElement@CCF_Skeleton@@PAU12@@stlp_std@@YAPAUSElement@CCF_Skeleton@@PBU12@0PAU12@@Z ; stlp_std::uninitialized_copy<CCF_Skeleton::SElement const *,CCF_Skeleton::SElement *>
PUBLIC	??$_M_allocate_and_copy@PBUSElement@CCF_Skeleton@@@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@AAEPAUSElement@CCF_Skeleton@@AAIPBU34@1@Z ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_M_allocate_and_copy<CCF_Skeleton::SElement const *>
PUBLIC	??$__copy_ptrs@PBUSElement@CCF_Skeleton@@PAU12@@priv@stlp_std@@YAPAUSElement@CCF_Skeleton@@PBU23@0PAU23@ABU__true_type@1@@Z ; stlp_std::priv::__copy_ptrs<CCF_Skeleton::SElement const *,CCF_Skeleton::SElement *>
PUBLIC	??$__destroy_range_aux@PAUSElement@CCF_Skeleton@@U12@@stlp_std@@YAXPAUSElement@CCF_Skeleton@@00ABU__true_type@0@@Z ; stlp_std::__destroy_range_aux<CCF_Skeleton::SElement *,CCF_Skeleton::SElement>
PUBLIC	??$__destroy_range@PAUSElement@CCF_Skeleton@@U12@@stlp_std@@YAXPAUSElement@CCF_Skeleton@@00@Z ; stlp_std::__destroy_range<CCF_Skeleton::SElement *,CCF_Skeleton::SElement>
PUBLIC	??$_Destroy_Range@PAUSElement@CCF_Skeleton@@@stlp_std@@YAXPAUSElement@CCF_Skeleton@@0@Z ; stlp_std::_Destroy_Range<CCF_Skeleton::SElement *>
PUBLIC	??4?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::operator=
PUBLIC	??4?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAEAAV01@ABV01@@Z ; stlp_std::vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::operator=
PUBLIC	??4?$xr_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@@QAEAAV0@ABV0@@Z ; xr_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::operator=
PUBLIC	??R?$xr_special_free@$00VICollisionForm@@@@QAEXAAPAVICollisionForm@@@Z ; xr_special_free<1,ICollisionForm>::operator()
PUBLIC	??$xr_delete@VICollisionForm@@@@YAXAAPAVICollisionForm@@@Z ; xr_delete<ICollisionForm>
PUBLIC	??$xr_free@Ushape_def@CCF_Shape@@@@YAXAAPAUshape_def@CCF_Shape@@@Z ; xr_free<CCF_Shape::shape_def>
PUBLIC	?deallocate@?$xalloc@Ushape_def@CCF_Shape@@@@QBEXPAUshape_def@CCF_Shape@@I@Z ; xalloc<CCF_Shape::shape_def>::deallocate
PUBLIC	??1?$_Vector_base@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@XZ ; stlp_std::priv::_Vector_base<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::~_Vector_base<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >
PUBLIC	?end@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEPAUshape_def@CCF_Shape@@XZ ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::end
PUBLIC	?rbegin@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUshape_def@CCF_Shape@@@3@XZ ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::rbegin
PUBLIC	?begin@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEPAUshape_def@CCF_Shape@@XZ ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::begin
PUBLIC	??0?$reverse_iterator@PAUshape_def@CCF_Shape@@@stlp_std@@QAE@PAUshape_def@CCF_Shape@@@Z ; stlp_std::reverse_iterator<CCF_Shape::shape_def *>::reverse_iterator<CCF_Shape::shape_def *>
PUBLIC	?rend@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUshape_def@CCF_Shape@@@3@XZ ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::rend
PUBLIC	??0?$reverse_iterator@PAUshape_def@CCF_Shape@@@stlp_std@@QAE@ABV01@@Z ; stlp_std::reverse_iterator<CCF_Shape::shape_def *>::reverse_iterator<CCF_Shape::shape_def *>
PUBLIC	??$__destroy_range_aux@V?$reverse_iterator@PAUshape_def@CCF_Shape@@@stlp_std@@Ushape_def@CCF_Shape@@@stlp_std@@YAXV?$reverse_iterator@PAUshape_def@CCF_Shape@@@0@0PAUshape_def@CCF_Shape@@ABU__true_type@0@@Z ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CCF_Shape::shape_def *>,CCF_Shape::shape_def>
PUBLIC	??$__destroy_range@V?$reverse_iterator@PAUshape_def@CCF_Shape@@@stlp_std@@Ushape_def@CCF_Shape@@@stlp_std@@YAXV?$reverse_iterator@PAUshape_def@CCF_Shape@@@0@0PAUshape_def@CCF_Shape@@@Z ; stlp_std::__destroy_range<stlp_std::reverse_iterator<CCF_Shape::shape_def *>,CCF_Shape::shape_def>
PUBLIC	??$_Destroy_Range@V?$reverse_iterator@PAUshape_def@CCF_Shape@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAUshape_def@CCF_Shape@@@0@0@Z ; stlp_std::_Destroy_Range<stlp_std::reverse_iterator<CCF_Shape::shape_def *> >
PUBLIC	??1?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@XZ ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::~_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >
PUBLIC	??1?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QAE@XZ ; stlp_std::vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::~vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >
PUBLIC	??1?$xr_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@@QAE@XZ ; xr_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::~xr_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >
PUBLIC	??_7ICollisionForm@@6B@				; ICollisionForm::`vftable'
PUBLIC	??_7CCF_Skeleton@@6B@				; CCF_Skeleton::`vftable'
PUBLIC	??_7CCF_EventBox@@6B@				; CCF_EventBox::`vftable'
PUBLIC	??_7CCF_Shape@@6B@				; CCF_Shape::`vftable'
;	COMDAT ??_7CCF_Shape@@6B@
CONST	SEGMENT
??_7CCF_Shape@@6B@ DD FLAT:??_R4CCF_Shape@@6B@		; CCF_Shape::`vftable'
	DD	FLAT:??_ECCF_Shape@@UAEPAXI@Z
	DD	FLAT:?_RayQuery@CCF_Shape@@UAEHABUray_defs@collide@@AAVrq_results@3@@Z
CONST	ENDS
;	COMDAT ??_R4CCF_Shape@@6B@
rdata$r	SEGMENT
??_R4CCF_Shape@@6B@ DD 00H				; CCF_Shape::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCF_Shape@@@8
	DD	FLAT:??_R3CCF_Shape@@8
rdata$r	ENDS
;	COMDAT ??_R3CCF_Shape@@8
rdata$r	SEGMENT
??_R3CCF_Shape@@8 DD 00H				; CCF_Shape::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CCF_Shape@@8
rdata$r	ENDS
;	COMDAT ??_R2CCF_Shape@@8
rdata$r	SEGMENT
??_R2CCF_Shape@@8 DD FLAT:??_R1A@?0A@EA@CCF_Shape@@8	; CCF_Shape::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICollisionForm@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCF_Shape@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCF_Shape@@8 DD FLAT:??_R0?AVCCF_Shape@@@8 ; CCF_Shape::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCF_Shape@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCF_Shape@@@8
_DATA	SEGMENT
??_R0?AVCCF_Shape@@@8 DD FLAT:??_7type_info@@6B@	; CCF_Shape `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCF_Shape@@', 00H
_DATA	ENDS
;	COMDAT ??_7CCF_EventBox@@6B@
CONST	SEGMENT
??_7CCF_EventBox@@6B@ DD FLAT:??_R4CCF_EventBox@@6B@	; CCF_EventBox::`vftable'
	DD	FLAT:??_ECCF_EventBox@@UAEPAXI@Z
	DD	FLAT:?_RayQuery@CCF_EventBox@@UAEHABUray_defs@collide@@AAVrq_results@3@@Z
CONST	ENDS
;	COMDAT ??_R4CCF_EventBox@@6B@
rdata$r	SEGMENT
??_R4CCF_EventBox@@6B@ DD 00H				; CCF_EventBox::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCF_EventBox@@@8
	DD	FLAT:??_R3CCF_EventBox@@8
rdata$r	ENDS
;	COMDAT ??_R3CCF_EventBox@@8
rdata$r	SEGMENT
??_R3CCF_EventBox@@8 DD 00H				; CCF_EventBox::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CCF_EventBox@@8
rdata$r	ENDS
;	COMDAT ??_R2CCF_EventBox@@8
rdata$r	SEGMENT
??_R2CCF_EventBox@@8 DD FLAT:??_R1A@?0A@EA@CCF_EventBox@@8 ; CCF_EventBox::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICollisionForm@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCF_EventBox@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCF_EventBox@@8 DD FLAT:??_R0?AVCCF_EventBox@@@8 ; CCF_EventBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCF_EventBox@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCF_EventBox@@@8
_DATA	SEGMENT
??_R0?AVCCF_EventBox@@@8 DD FLAT:??_7type_info@@6B@	; CCF_EventBox `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCF_EventBox@@', 00H
_DATA	ENDS
;	COMDAT ??_7CCF_Skeleton@@6B@
CONST	SEGMENT
??_7CCF_Skeleton@@6B@ DD FLAT:??_R4CCF_Skeleton@@6B@	; CCF_Skeleton::`vftable'
	DD	FLAT:??_ECCF_Skeleton@@UAEPAXI@Z
	DD	FLAT:?_RayQuery@CCF_Skeleton@@UAEHABUray_defs@collide@@AAVrq_results@3@@Z
CONST	ENDS
;	COMDAT ??_R4CCF_Skeleton@@6B@
rdata$r	SEGMENT
??_R4CCF_Skeleton@@6B@ DD 00H				; CCF_Skeleton::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCF_Skeleton@@@8
	DD	FLAT:??_R3CCF_Skeleton@@8
rdata$r	ENDS
;	COMDAT ??_R3CCF_Skeleton@@8
rdata$r	SEGMENT
??_R3CCF_Skeleton@@8 DD 00H				; CCF_Skeleton::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CCF_Skeleton@@8
rdata$r	ENDS
;	COMDAT ??_R2CCF_Skeleton@@8
rdata$r	SEGMENT
??_R2CCF_Skeleton@@8 DD FLAT:??_R1A@?0A@EA@CCF_Skeleton@@8 ; CCF_Skeleton::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICollisionForm@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCF_Skeleton@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCF_Skeleton@@8 DD FLAT:??_R0?AVCCF_Skeleton@@@8 ; CCF_Skeleton::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCF_Skeleton@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCF_Skeleton@@@8
_DATA	SEGMENT
??_R0?AVCCF_Skeleton@@@8 DD FLAT:??_7type_info@@6B@	; CCF_Skeleton `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCF_Skeleton@@', 00H
_DATA	ENDS
;	COMDAT ??_7ICollisionForm@@6B@
CONST	SEGMENT
??_7ICollisionForm@@6B@ DD FLAT:??_R4ICollisionForm@@6B@ ; ICollisionForm::`vftable'
	DD	FLAT:??_EICollisionForm@@UAEPAXI@Z
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_R4ICollisionForm@@6B@
rdata$r	SEGMENT
??_R4ICollisionForm@@6B@ DD 00H				; ICollisionForm::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVICollisionForm@@@8
	DD	FLAT:??_R3ICollisionForm@@8
rdata$r	ENDS
;	COMDAT ??_R3ICollisionForm@@8
rdata$r	SEGMENT
??_R3ICollisionForm@@8 DD 00H				; ICollisionForm::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ICollisionForm@@8
rdata$r	ENDS
;	COMDAT ??_R2ICollisionForm@@8
rdata$r	SEGMENT
??_R2ICollisionForm@@8 DD FLAT:??_R1A@?0A@EA@ICollisionForm@@8 ; ICollisionForm::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ICollisionForm@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICollisionForm@@8 DD FLAT:??_R0?AVICollisionForm@@@8 ; ICollisionForm::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICollisionForm@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVICollisionForm@@@8
_DATA	SEGMENT
??_R0?AVICollisionForm@@@8 DD FLAT:??_7type_info@@6B@	; ICollisionForm `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVICollisionForm@@', 00H
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\type_traits.h
;	COMDAT ??$_UseTrivialUCopy@Ushape_def@CCF_Shape@@U12@@stlp_std@@YA?AU?$_TrivialUCopy@Ushape_def@CCF_Shape@@U12@@0@PAUshape_def@CCF_Shape@@0@Z
_TEXT	SEGMENT
??$_UseTrivialUCopy@Ushape_def@CCF_Shape@@U12@@stlp_std@@YA?AU?$_TrivialUCopy@Ushape_def@CCF_Shape@@U12@@0@PAUshape_def@CCF_Shape@@0@Z PROC ; stlp_std::_UseTrivialUCopy<CCF_Shape::shape_def,CCF_Shape::shape_def>, COMDAT

; 489  : { return _TrivialUCopy<_Src, _Dst>(); }

	xor	al, al
	ret	0
??$_UseTrivialUCopy@Ushape_def@CCF_Shape@@U12@@stlp_std@@YA?AU?$_TrivialUCopy@Ushape_def@CCF_Shape@@U12@@0@PAUshape_def@CCF_Shape@@0@Z ENDP ; stlp_std::_UseTrivialUCopy<CCF_Shape::shape_def,CCF_Shape::shape_def>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_UseTrivialUCopy@USElement@CCF_Skeleton@@U12@@stlp_std@@YA?AU?$_TrivialUCopy@USElement@CCF_Skeleton@@U12@@0@PAUSElement@CCF_Skeleton@@0@Z
_TEXT	SEGMENT
??$_UseTrivialUCopy@USElement@CCF_Skeleton@@U12@@stlp_std@@YA?AU?$_TrivialUCopy@USElement@CCF_Skeleton@@U12@@0@PAUSElement@CCF_Skeleton@@0@Z PROC ; stlp_std::_UseTrivialUCopy<CCF_Skeleton::SElement,CCF_Skeleton::SElement>, COMDAT

; 489  : { return _TrivialUCopy<_Src, _Dst>(); }

	xor	al, al
	ret	0
??$_UseTrivialUCopy@USElement@CCF_Skeleton@@U12@@stlp_std@@YA?AU?$_TrivialUCopy@USElement@CCF_Skeleton@@U12@@0@PAUSElement@CCF_Skeleton@@0@Z ENDP ; stlp_std::_UseTrivialUCopy<CCF_Skeleton::SElement,CCF_Skeleton::SElement>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Answer@?$_TrivialUCopy@Ushape_def@CCF_Shape@@U12@@stlp_std@@SA?AU__true_type@2@XZ
_TEXT	SEGMENT
?_Answer@?$_TrivialUCopy@Ushape_def@CCF_Shape@@U12@@stlp_std@@SA?AU__true_type@2@XZ PROC ; stlp_std::_TrivialUCopy<CCF_Shape::shape_def,CCF_Shape::shape_def>::_Answer, COMDAT

; 407  :   static _Ret _Answer() { return _Ret(); }

	xor	al, al
	ret	0
?_Answer@?$_TrivialUCopy@Ushape_def@CCF_Shape@@U12@@stlp_std@@SA?AU__true_type@2@XZ ENDP ; stlp_std::_TrivialUCopy<CCF_Shape::shape_def,CCF_Shape::shape_def>::_Answer
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Answer@?$_TrivialUCopy@USElement@CCF_Skeleton@@U12@@stlp_std@@SA?AU__true_type@2@XZ
_TEXT	SEGMENT
?_Answer@?$_TrivialUCopy@USElement@CCF_Skeleton@@U12@@stlp_std@@SA?AU__true_type@2@XZ PROC ; stlp_std::_TrivialUCopy<CCF_Skeleton::SElement,CCF_Skeleton::SElement>::_Answer, COMDAT

; 407  :   static _Ret _Answer() { return _Ret(); }

	xor	al, al
	ret	0
?_Answer@?$_TrivialUCopy@USElement@CCF_Skeleton@@U12@@stlp_std@@SA?AU__true_type@2@XZ ENDP ; stlp_std::_TrivialUCopy<CCF_Skeleton::SElement,CCF_Skeleton::SElement>::_Answer
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$__destroy_range_aux@PAUshape_def@CCF_Shape@@U12@@stlp_std@@YAXPAUshape_def@CCF_Shape@@00ABU__true_type@0@@Z
_TEXT	SEGMENT
??$__destroy_range_aux@PAUshape_def@CCF_Shape@@U12@@stlp_std@@YAXPAUshape_def@CCF_Shape@@00ABU__true_type@0@@Z PROC ; stlp_std::__destroy_range_aux<CCF_Shape::shape_def *,CCF_Shape::shape_def>, COMDAT

; 169  : __destroy_range_aux(_ForwardIterator, _ForwardIterator, _Tp*, const __true_type& /*_Trivial_destructor*/) {}

	ret	0
??$__destroy_range_aux@PAUshape_def@CCF_Shape@@U12@@stlp_std@@YAXPAUshape_def@CCF_Shape@@00ABU__true_type@0@@Z ENDP ; stlp_std::__destroy_range_aux<CCF_Shape::shape_def *,CCF_Shape::shape_def>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__destroy_range_aux@PAUSElement@CCF_Skeleton@@U12@@stlp_std@@YAXPAUSElement@CCF_Skeleton@@00ABU__true_type@0@@Z
_TEXT	SEGMENT
??$__destroy_range_aux@PAUSElement@CCF_Skeleton@@U12@@stlp_std@@YAXPAUSElement@CCF_Skeleton@@00ABU__true_type@0@@Z PROC ; stlp_std::__destroy_range_aux<CCF_Skeleton::SElement *,CCF_Skeleton::SElement>, COMDAT

; 169  : __destroy_range_aux(_ForwardIterator, _ForwardIterator, _Tp*, const __true_type& /*_Trivial_destructor*/) {}

	ret	0
??$__destroy_range_aux@PAUSElement@CCF_Skeleton@@U12@@stlp_std@@YAXPAUSElement@CCF_Skeleton@@00ABU__true_type@0@@Z ENDP ; stlp_std::__destroy_range_aux<CCF_Skeleton::SElement *,CCF_Skeleton::SElement>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\type_traits.h
_TEXT	ENDS
;	COMDAT ?_Answer@?$_BothPtrType@PBUshape_def@CCF_Shape@@PAU12@@stlp_std@@SA?AU__true_type@2@XZ
_TEXT	SEGMENT
?_Answer@?$_BothPtrType@PBUshape_def@CCF_Shape@@PAU12@@stlp_std@@SA?AU__true_type@2@XZ PROC ; stlp_std::_BothPtrType<CCF_Shape::shape_def const *,CCF_Shape::shape_def *>::_Answer, COMDAT

; 468  :   static _Ret _Answer() { return _Ret(); }

	xor	al, al
	ret	0
?_Answer@?$_BothPtrType@PBUshape_def@CCF_Shape@@PAU12@@stlp_std@@SA?AU__true_type@2@XZ ENDP ; stlp_std::_BothPtrType<CCF_Shape::shape_def const *,CCF_Shape::shape_def *>::_Answer
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Answer@?$_BothPtrType@PBUSElement@CCF_Skeleton@@PAU12@@stlp_std@@SA?AU__true_type@2@XZ
_TEXT	SEGMENT
?_Answer@?$_BothPtrType@PBUSElement@CCF_Skeleton@@PAU12@@stlp_std@@SA?AU__true_type@2@XZ PROC ; stlp_std::_BothPtrType<CCF_Skeleton::SElement const *,CCF_Skeleton::SElement *>::_Answer, COMDAT

; 468  :   static _Ret _Answer() { return _Ret(); }

	xor	al, al
	ret	0
?_Answer@?$_BothPtrType@PBUSElement@CCF_Skeleton@@PAU12@@stlp_std@@SA?AU__true_type@2@XZ ENDP ; stlp_std::_BothPtrType<CCF_Skeleton::SElement const *,CCF_Skeleton::SElement *>::_Answer
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$__destroy_range_aux@V?$reverse_iterator@PAUshape_def@CCF_Shape@@@stlp_std@@Ushape_def@CCF_Shape@@@stlp_std@@YAXV?$reverse_iterator@PAUshape_def@CCF_Shape@@@0@0PAUshape_def@CCF_Shape@@ABU__true_type@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$__destroy_range_aux@V?$reverse_iterator@PAUshape_def@CCF_Shape@@@stlp_std@@Ushape_def@CCF_Shape@@@stlp_std@@YAXV?$reverse_iterator@PAUshape_def@CCF_Shape@@@0@0PAUshape_def@CCF_Shape@@ABU__true_type@0@@Z PROC ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CCF_Shape::shape_def *>,CCF_Shape::shape_def>, COMDAT

; 169  : __destroy_range_aux(_ForwardIterator, _ForwardIterator, _Tp*, const __true_type& /*_Trivial_destructor*/) {}

	ret	0
??$__destroy_range_aux@V?$reverse_iterator@PAUshape_def@CCF_Shape@@@stlp_std@@Ushape_def@CCF_Shape@@@stlp_std@@YAXV?$reverse_iterator@PAUshape_def@CCF_Shape@@@0@0PAUshape_def@CCF_Shape@@ABU__true_type@0@@Z ENDP ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CCF_Shape::shape_def *>,CCF_Shape::shape_def>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__destroy_range_aux@V?$reverse_iterator@PAUSElement@CCF_Skeleton@@@stlp_std@@USElement@CCF_Skeleton@@@stlp_std@@YAXV?$reverse_iterator@PAUSElement@CCF_Skeleton@@@0@0PAUSElement@CCF_Skeleton@@ABU__true_type@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$__destroy_range_aux@V?$reverse_iterator@PAUSElement@CCF_Skeleton@@@stlp_std@@USElement@CCF_Skeleton@@@stlp_std@@YAXV?$reverse_iterator@PAUSElement@CCF_Skeleton@@@0@0PAUSElement@CCF_Skeleton@@ABU__true_type@0@@Z PROC ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CCF_Skeleton::SElement *>,CCF_Skeleton::SElement>, COMDAT

; 169  : __destroy_range_aux(_ForwardIterator, _ForwardIterator, _Tp*, const __true_type& /*_Trivial_destructor*/) {}

	ret	0
??$__destroy_range_aux@V?$reverse_iterator@PAUSElement@CCF_Skeleton@@@stlp_std@@USElement@CCF_Skeleton@@@stlp_std@@YAXV?$reverse_iterator@PAUSElement@CCF_Skeleton@@@0@0PAUSElement@CCF_Skeleton@@ABU__true_type@0@@Z ENDP ; stlp_std::__destroy_range_aux<stlp_std::reverse_iterator<CCF_Skeleton::SElement *>,CCF_Skeleton::SElement>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__destroy_range@PAUshape_def@CCF_Shape@@U12@@stlp_std@@YAXPAUshape_def@CCF_Shape@@00@Z
_TEXT	SEGMENT
??$__destroy_range@PAUshape_def@CCF_Shape@@U12@@stlp_std@@YAXPAUshape_def@CCF_Shape@@00@Z PROC ; stlp_std::__destroy_range<CCF_Shape::shape_def *,CCF_Shape::shape_def>, COMDAT

; 175  :   typedef typename __type_traits<_Tp>::has_trivial_destructor _Trivial_destructor;
; 176  :   __destroy_range_aux(__first, __last, __ptr, _Trivial_destructor());
; 177  : }

	ret	0
??$__destroy_range@PAUshape_def@CCF_Shape@@U12@@stlp_std@@YAXPAUshape_def@CCF_Shape@@00@Z ENDP ; stlp_std::__destroy_range<CCF_Shape::shape_def *,CCF_Shape::shape_def>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__destroy_range@PAUSElement@CCF_Skeleton@@U12@@stlp_std@@YAXPAUSElement@CCF_Skeleton@@00@Z
_TEXT	SEGMENT
??$__destroy_range@PAUSElement@CCF_Skeleton@@U12@@stlp_std@@YAXPAUSElement@CCF_Skeleton@@00@Z PROC ; stlp_std::__destroy_range<CCF_Skeleton::SElement *,CCF_Skeleton::SElement>, COMDAT

; 175  :   typedef typename __type_traits<_Tp>::has_trivial_destructor _Trivial_destructor;
; 176  :   __destroy_range_aux(__first, __last, __ptr, _Trivial_destructor());
; 177  : }

	ret	0
??$__destroy_range@PAUSElement@CCF_Skeleton@@U12@@stlp_std@@YAXPAUSElement@CCF_Skeleton@@00@Z ENDP ; stlp_std::__destroy_range<CCF_Skeleton::SElement *,CCF_Skeleton::SElement>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Destroy_Range@PAUshape_def@CCF_Shape@@@stlp_std@@YAXPAUshape_def@CCF_Shape@@0@Z
_TEXT	SEGMENT
??$_Destroy_Range@PAUshape_def@CCF_Shape@@@stlp_std@@YAXPAUshape_def@CCF_Shape@@0@Z PROC ; stlp_std::_Destroy_Range<CCF_Shape::shape_def *>, COMDAT

; 181  :   __destroy_range(__first, __last, _STLP_VALUE_TYPE(__first, _ForwardIterator));
; 182  : }

	ret	0
??$_Destroy_Range@PAUshape_def@CCF_Shape@@@stlp_std@@YAXPAUshape_def@CCF_Shape@@0@Z ENDP ; stlp_std::_Destroy_Range<CCF_Shape::shape_def *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Destroy_Range@PAUSElement@CCF_Skeleton@@@stlp_std@@YAXPAUSElement@CCF_Skeleton@@0@Z
_TEXT	SEGMENT
??$_Destroy_Range@PAUSElement@CCF_Skeleton@@@stlp_std@@YAXPAUSElement@CCF_Skeleton@@0@Z PROC ; stlp_std::_Destroy_Range<CCF_Skeleton::SElement *>, COMDAT

; 181  :   __destroy_range(__first, __last, _STLP_VALUE_TYPE(__first, _ForwardIterator));
; 182  : }

	ret	0
??$_Destroy_Range@PAUSElement@CCF_Skeleton@@@stlp_std@@YAXPAUSElement@CCF_Skeleton@@0@Z ENDP ; stlp_std::_Destroy_Range<CCF_Skeleton::SElement *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrmemory_subst_msvc.h
_TEXT	ENDS
;	COMDAT ??R?$xr_special_free@$00VICollisionForm@@@@QAEXAAPAVICollisionForm@@@Z
_TEXT	SEGMENT
??R?$xr_special_free@$00VICollisionForm@@@@QAEXAAPAVICollisionForm@@@Z PROC ; xr_special_free<1,ICollisionForm>::operator(), COMDAT
; _ptr$ = esi

; 132  : 		void*	_real_ptr	= dynamic_cast<void*>(ptr);

	mov	eax, DWORD PTR [esi]
	push	edi
	push	eax
	call	___RTCastToVoid

; 133  : 		ptr->~T			();

	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx]
	add	esp, 4
	mov	edi, eax
	mov	eax, DWORD PTR [edx]
	push	0
	call	eax

; 134  : 		Memory.mem_free	(_real_ptr);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	pop	edi

; 135  : 	}

	ret	0
??R?$xr_special_free@$00VICollisionForm@@@@QAEXAAPAVICollisionForm@@@Z ENDP ; xr_special_free<1,ICollisionForm>::operator()
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_iterator.h
_TEXT	ENDS
;	COMDAT ??0?$reverse_iterator@PAUshape_def@CCF_Shape@@@stlp_std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$reverse_iterator@PAUshape_def@CCF_Shape@@@stlp_std@@QAE@ABV01@@Z PROC ; stlp_std::reverse_iterator<CCF_Shape::shape_def *>::reverse_iterator<CCF_Shape::shape_def *>, COMDAT
; _this$ = eax
; ___x$ = ecx

; 66   :   reverse_iterator(const _Self& __x) : current(__x.current) {}

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	ret	0
??0?$reverse_iterator@PAUshape_def@CCF_Shape@@@stlp_std@@QAE@ABV01@@Z ENDP ; stlp_std::reverse_iterator<CCF_Shape::shape_def *>::reverse_iterator<CCF_Shape::shape_def *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$reverse_iterator@PAUSElement@CCF_Skeleton@@@stlp_std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$reverse_iterator@PAUSElement@CCF_Skeleton@@@stlp_std@@QAE@ABV01@@Z PROC ; stlp_std::reverse_iterator<CCF_Skeleton::SElement *>::reverse_iterator<CCF_Skeleton::SElement *>, COMDAT
; _this$ = eax
; ___x$ = ecx

; 66   :   reverse_iterator(const _Self& __x) : current(__x.current) {}

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	ret	0
??0?$reverse_iterator@PAUSElement@CCF_Skeleton@@@stlp_std@@QAE@ABV01@@Z ENDP ; stlp_std::reverse_iterator<CCF_Skeleton::SElement *>::reverse_iterator<CCF_Skeleton::SElement *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?capacity@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QBEIXZ PROC ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::capacity, COMDAT
; _this$ = eax

; 187  :   size_type capacity() const    { return size_type(this->_M_end_of_storage._M_data - this->_M_start); }

	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR [eax]
	mov	eax, 1041204193				; 3e0f83e1H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	ret	0
?capacity@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QBEIXZ ENDP ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::capacity
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?capacity@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QBEIXZ PROC ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::capacity, COMDAT
; _this$ = eax

; 187  :   size_type capacity() const    { return size_type(this->_M_end_of_storage._M_data - this->_M_start); }

	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR [eax]
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	ret	0
?capacity@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QBEIXZ ENDP ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::capacity
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrmemory.h
_TEXT	ENDS
;	COMDAT ??$xr_alloc@Ushape_def@CCF_Shape@@@@YAPAUshape_def@CCF_Shape@@I@Z
_TEXT	SEGMENT
??$xr_alloc@Ushape_def@CCF_Shape@@@@YAPAUshape_def@CCF_Shape@@I@Z PROC ; xr_alloc<CCF_Shape::shape_def>, COMDAT
; _count$ = eax

; 109  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	imul	eax, 132				; 00000084H
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
??$xr_alloc@Ushape_def@CCF_Shape@@@@YAPAUshape_def@CCF_Shape@@I@Z ENDP ; xr_alloc<CCF_Shape::shape_def>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$xr_alloc@USElement@CCF_Skeleton@@@@YAPAUSElement@CCF_Skeleton@@I@Z
_TEXT	SEGMENT
??$xr_alloc@USElement@CCF_Skeleton@@@@YAPAUSElement@CCF_Skeleton@@I@Z PROC ; xr_alloc<CCF_Skeleton::SElement>, COMDAT
; _count$ = eax

; 109  : 	IC T*		xr_alloc	(u32 count)				{	return  (T*)Memory.mem_alloc(count*sizeof(T));	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	lea	eax, DWORD PTR [eax+eax*4]
	shl	eax, 4
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
??$xr_alloc@USElement@CCF_Skeleton@@@@YAPAUSElement@CCF_Skeleton@@I@Z ENDP ; xr_alloc<CCF_Skeleton::SElement>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$xr_free@Ushape_def@CCF_Shape@@@@YAXAAPAUshape_def@CCF_Shape@@@Z
_TEXT	SEGMENT
??$xr_free@Ushape_def@CCF_Shape@@@@YAXAAPAUshape_def@CCF_Shape@@@Z PROC ; xr_free<CCF_Shape::shape_def>, COMDAT
; _P$ = esi

; 111  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN1@xr_free@32
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi], 0
$LN1@xr_free@32:
	ret	0
??$xr_free@Ushape_def@CCF_Shape@@@@YAXAAPAUshape_def@CCF_Shape@@@Z ENDP ; xr_free<CCF_Shape::shape_def>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$xr_free@USElement@CCF_Skeleton@@@@YAXAAPAUSElement@CCF_Skeleton@@@Z
_TEXT	SEGMENT
??$xr_free@USElement@CCF_Skeleton@@@@YAXAAPAUSElement@CCF_Skeleton@@@Z PROC ; xr_free<CCF_Skeleton::SElement>, COMDAT
; _P$ = esi

; 111  : 	IC void		xr_free		(T* &P)					{	if (P) { Memory.mem_free((void*)P); P=NULL;	};	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN1@xr_free@33
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi], 0
$LN1@xr_free@33:
	ret	0
??$xr_free@USElement@CCF_Skeleton@@@@YAXAAPAUSElement@CCF_Skeleton@@@Z ENDP ; xr_free<CCF_Skeleton::SElement>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\xrmemory_subst_msvc.h
_TEXT	ENDS
;	COMDAT ??$xr_delete@VICollisionForm@@@@YAXAAPAVICollisionForm@@@Z
_TEXT	SEGMENT
??$xr_delete@VICollisionForm@@@@YAXAAPAVICollisionForm@@@Z PROC ; xr_delete<ICollisionForm>, COMDAT
; _ptr$ = esi

; 151  : 	if (ptr) 

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN1@xr_delete@17
	push	edi

; 152  : 	{
; 153  : 		xr_special_free<is_polymorphic<T>::result,T>()(ptr);

	push	eax
	call	___RTCastToVoid
	mov	ecx, DWORD PTR [esi]
	mov	edi, eax
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	add	esp, 4
	push	0
	call	edx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z

; 154  : 		ptr = NULL;

	mov	DWORD PTR [esi], 0
	pop	edi
$LN1@xr_delete@17:

; 155  : 	}
; 156  : }

	ret	0
??$xr_delete@VICollisionForm@@@@YAXAAPAVICollisionForm@@@Z ENDP ; xr_delete<ICollisionForm>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?allocate@?$xalloc@Ushape_def@CCF_Shape@@@@QBEPAUshape_def@CCF_Shape@@IPBX@Z
_TEXT	SEGMENT
?allocate@?$xalloc@Ushape_def@CCF_Shape@@@@QBEPAUshape_def@CCF_Shape@@IPBX@Z PROC ; xalloc<CCF_Shape::shape_def>::allocate, COMDAT
; _n$ = eax

; 81   : 							pointer					allocate		(size_type n, const void* p=0) const	{	return xr_alloc<T>((u32)n);	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	imul	eax, 132				; 00000084H
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$xalloc@Ushape_def@CCF_Shape@@@@QBEPAUshape_def@CCF_Shape@@IPBX@Z ENDP ; xalloc<CCF_Shape::shape_def>::allocate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?allocate@?$xalloc@USElement@CCF_Skeleton@@@@QBEPAUSElement@CCF_Skeleton@@IPBX@Z
_TEXT	SEGMENT
?allocate@?$xalloc@USElement@CCF_Skeleton@@@@QBEPAUSElement@CCF_Skeleton@@IPBX@Z PROC ; xalloc<CCF_Skeleton::SElement>::allocate, COMDAT
; _n$ = eax

; 81   : 							pointer					allocate		(size_type n, const void* p=0) const	{	return xr_alloc<T>((u32)n);	}

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	lea	eax, DWORD PTR [eax+eax*4]
	shl	eax, 4
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$xalloc@USElement@CCF_Skeleton@@@@QBEPAUSElement@CCF_Skeleton@@IPBX@Z ENDP ; xalloc<CCF_Skeleton::SElement>::allocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_alloc.h
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@PAUshape_def@CCF_Shape@@U12@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEPAUshape_def@CCF_Shape@@I@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@PAUshape_def@CCF_Shape@@U12@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEPAUshape_def@CCF_Shape@@I@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<CCF_Shape::shape_def *,CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::allocate, COMDAT
; ___n$ = eax

; 633  :   { return _Base::allocate(__n); }

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	imul	eax, 132				; 00000084H
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$_STLP_alloc_proxy@PAUshape_def@CCF_Shape@@U12@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEPAUshape_def@CCF_Shape@@I@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<CCF_Shape::shape_def *,CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::allocate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@PAUSElement@CCF_Skeleton@@U12@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEPAUSElement@CCF_Skeleton@@I@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@PAUSElement@CCF_Skeleton@@U12@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEPAUSElement@CCF_Skeleton@@I@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<CCF_Skeleton::SElement *,CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::allocate, COMDAT
; ___n$ = eax

; 633  :   { return _Base::allocate(__n); }

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	lea	eax, DWORD PTR [eax+eax*4]
	shl	eax, 4
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$_STLP_alloc_proxy@PAUSElement@CCF_Skeleton@@U12@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEPAUSElement@CCF_Skeleton@@I@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<CCF_Skeleton::SElement *,CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::allocate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@PAUshape_def@CCF_Shape@@U12@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@AAEPAUshape_def@CCF_Shape@@IAAIABU__false_type@3@@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@PAUshape_def@CCF_Shape@@U12@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@AAEPAUshape_def@CCF_Shape@@IAAIABU__false_type@3@@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<CCF_Shape::shape_def *,CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::allocate, COMDAT
; ___n$ = eax
; ___allocated_n$ = ecx

; 640  :   { __allocated_n = __n; return allocate(__n); }

	mov	DWORD PTR [ecx], eax
	imul	eax, 132				; 00000084H
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$_STLP_alloc_proxy@PAUshape_def@CCF_Shape@@U12@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@AAEPAUshape_def@CCF_Shape@@IAAIABU__false_type@3@@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<CCF_Shape::shape_def *,CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::allocate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@PAUSElement@CCF_Skeleton@@U12@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@AAEPAUSElement@CCF_Skeleton@@IAAIABU__false_type@3@@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@PAUSElement@CCF_Skeleton@@U12@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@AAEPAUSElement@CCF_Skeleton@@IAAIABU__false_type@3@@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<CCF_Skeleton::SElement *,CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::allocate, COMDAT
; ___n$ = eax
; ___allocated_n$ = ecx

; 640  :   { __allocated_n = __n; return allocate(__n); }

	lea	edx, DWORD PTR [eax+eax*4]
	shl	edx, 4
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edx
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	ret	0
?allocate@?$_STLP_alloc_proxy@PAUSElement@CCF_Skeleton@@U12@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@AAEPAUSElement@CCF_Skeleton@@IAAIABU__false_type@3@@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<CCF_Skeleton::SElement *,CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::allocate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@PAUshape_def@CCF_Shape@@U12@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEPAUshape_def@CCF_Shape@@IAAI@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@PAUshape_def@CCF_Shape@@U12@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEPAUshape_def@CCF_Shape@@IAAI@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<CCF_Shape::shape_def *,CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::allocate, COMDAT
; ___n$ = eax
; ___allocated_n$ = ecx

; 611  : #if !defined (__BORLANDC__)
; 612  :     typedef typename _IsSTLportClass<_MaybeReboundAlloc>::_Ret _STLportAlloc;
; 613  : #else
; 614  :     typedef typename __bool2type<_IsSTLportClass<_MaybeReboundAlloc>::_Is>::_Ret _STLportAlloc;
; 615  : #endif
; 616  :     return allocate(__n, __allocated_n, _STLportAlloc());

	mov	DWORD PTR [ecx], eax
	imul	eax, 132				; 00000084H
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 617  :   }

	ret	0
?allocate@?$_STLP_alloc_proxy@PAUshape_def@CCF_Shape@@U12@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEPAUshape_def@CCF_Shape@@IAAI@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<CCF_Shape::shape_def *,CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::allocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xalloc@Ushape_def@CCF_Shape@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xalloc@Ushape_def@CCF_Shape@@@@QAE@ABV0@@Z PROC	; xalloc<CCF_Shape::shape_def>::xalloc<CCF_Shape::shape_def>, COMDAT
; _this$ = eax

; 78   : 													xalloc			(const xalloc<T>&)						{	}

	ret	0
??0?$xalloc@Ushape_def@CCF_Shape@@@@QAE@ABV0@@Z ENDP	; xalloc<CCF_Shape::shape_def>::xalloc<CCF_Shape::shape_def>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_alloc.h
_TEXT	ENDS
;	COMDAT ?allocate@?$_STLP_alloc_proxy@PAUSElement@CCF_Skeleton@@U12@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEPAUSElement@CCF_Skeleton@@IAAI@Z
_TEXT	SEGMENT
?allocate@?$_STLP_alloc_proxy@PAUSElement@CCF_Skeleton@@U12@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEPAUSElement@CCF_Skeleton@@IAAI@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<CCF_Skeleton::SElement *,CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::allocate, COMDAT
; ___n$ = eax
; ___allocated_n$ = ecx

; 611  : #if !defined (__BORLANDC__)
; 612  :     typedef typename _IsSTLportClass<_MaybeReboundAlloc>::_Ret _STLportAlloc;
; 613  : #else
; 614  :     typedef typename __bool2type<_IsSTLportClass<_MaybeReboundAlloc>::_Is>::_Ret _STLportAlloc;
; 615  : #endif
; 616  :     return allocate(__n, __allocated_n, _STLportAlloc());

	lea	edx, DWORD PTR [eax+eax*4]
	shl	edx, 4
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edx
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 617  :   }

	ret	0
?allocate@?$_STLP_alloc_proxy@PAUSElement@CCF_Skeleton@@U12@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEPAUSElement@CCF_Skeleton@@IAAI@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<CCF_Skeleton::SElement *,CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::allocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ??0?$xalloc@USElement@CCF_Skeleton@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xalloc@USElement@CCF_Skeleton@@@@QAE@ABV0@@Z PROC	; xalloc<CCF_Skeleton::SElement>::xalloc<CCF_Skeleton::SElement>, COMDAT
; _this$ = eax

; 78   : 													xalloc			(const xalloc<T>&)						{	}

	ret	0
??0?$xalloc@USElement@CCF_Skeleton@@@@QAE@ABV0@@Z ENDP	; xalloc<CCF_Skeleton::SElement>::xalloc<CCF_Skeleton::SElement>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_iterator.h
_TEXT	ENDS
;	COMDAT ??0?$reverse_iterator@PAUshape_def@CCF_Shape@@@stlp_std@@QAE@PAUshape_def@CCF_Shape@@@Z
_TEXT	SEGMENT
??0?$reverse_iterator@PAUshape_def@CCF_Shape@@@stlp_std@@QAE@PAUshape_def@CCF_Shape@@@Z PROC ; stlp_std::reverse_iterator<CCF_Shape::shape_def *>::reverse_iterator<CCF_Shape::shape_def *>, COMDAT
; _this$ = eax
; ___x$ = ecx

; 65   :   explicit reverse_iterator(iterator_type __x) : current(__x) {}

	mov	DWORD PTR [eax], ecx
	ret	0
??0?$reverse_iterator@PAUshape_def@CCF_Shape@@@stlp_std@@QAE@PAUshape_def@CCF_Shape@@@Z ENDP ; stlp_std::reverse_iterator<CCF_Shape::shape_def *>::reverse_iterator<CCF_Shape::shape_def *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$reverse_iterator@PAUSElement@CCF_Skeleton@@@stlp_std@@QAE@PAUSElement@CCF_Skeleton@@@Z
_TEXT	SEGMENT
??0?$reverse_iterator@PAUSElement@CCF_Skeleton@@@stlp_std@@QAE@PAUSElement@CCF_Skeleton@@@Z PROC ; stlp_std::reverse_iterator<CCF_Skeleton::SElement *>::reverse_iterator<CCF_Skeleton::SElement *>, COMDAT
; _this$ = eax
; ___x$ = ecx

; 65   :   explicit reverse_iterator(iterator_type __x) : current(__x) {}

	mov	DWORD PTR [eax], ecx
	ret	0
??0?$reverse_iterator@PAUSElement@CCF_Skeleton@@@stlp_std@@QAE@PAUSElement@CCF_Skeleton@@@Z ENDP ; stlp_std::reverse_iterator<CCF_Skeleton::SElement *>::reverse_iterator<CCF_Skeleton::SElement *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?size@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QBEIXZ PROC ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::size, COMDAT
; _this$ = eax

; 180  :   size_type size() const        { return size_type(this->_M_finish - this->_M_start); }

	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR [eax]
	mov	eax, 1041204193				; 3e0f83e1H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	ret	0
?size@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QBEIXZ ENDP ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?end@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QBEPBUshape_def@CCF_Shape@@XZ
_TEXT	SEGMENT
?end@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QBEPBUshape_def@CCF_Shape@@XZ PROC ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::end, COMDAT
; _this$ = eax

; 173  :   const_iterator end() const   { return this->_M_finish; }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?end@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QBEPBUshape_def@CCF_Shape@@XZ ENDP ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?end@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEPAUshape_def@CCF_Shape@@XZ
_TEXT	SEGMENT
?end@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEPAUshape_def@CCF_Shape@@XZ PROC ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::end, COMDAT
; _this$ = eax

; 172  :   iterator end()               { return this->_M_finish; }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?end@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEPAUshape_def@CCF_Shape@@XZ ENDP ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QBEPBUshape_def@CCF_Shape@@XZ
_TEXT	SEGMENT
?begin@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QBEPBUshape_def@CCF_Shape@@XZ PROC ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::begin, COMDAT
; _this$ = eax

; 171  :   const_iterator begin() const { return this->_M_start; }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QBEPBUshape_def@CCF_Shape@@XZ ENDP ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::begin
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEPAUshape_def@CCF_Shape@@XZ
_TEXT	SEGMENT
?begin@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEPAUshape_def@CCF_Shape@@XZ PROC ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::begin, COMDAT
; _this$ = eax

; 170  :   iterator begin()             { return this->_M_start; }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEPAUshape_def@CCF_Shape@@XZ ENDP ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::begin
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?get_allocator@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QBE?AV?$xalloc@Ushape_def@CCF_Shape@@@@XZ
_TEXT	SEGMENT
?get_allocator@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QBE?AV?$xalloc@Ushape_def@CCF_Shape@@@@XZ PROC ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::get_allocator, COMDAT
; ___$ReturnUdt$ = eax

; 134  :   { return _STLP_CONVERT_ALLOCATOR((const allocator_type&)this->_M_end_of_storage, _Tp); }

	ret	0
?get_allocator@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QBE?AV?$xalloc@Ushape_def@CCF_Shape@@@@XZ ENDP ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::get_allocator
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?deallocate@?$xalloc@Ushape_def@CCF_Shape@@@@QBEXPAUshape_def@CCF_Shape@@I@Z
_TEXT	SEGMENT
?deallocate@?$xalloc@Ushape_def@CCF_Shape@@@@QBEXPAUshape_def@CCF_Shape@@I@Z PROC ; xalloc<CCF_Shape::shape_def>::deallocate, COMDAT
; _p$ = eax

; 83   : 							void					deallocate		(pointer p, size_type n) const			{	xr_free	(p);				}

	test	eax, eax
	je	SHORT $LN3@deallocate@24
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN3@deallocate@24:
	ret	0
?deallocate@?$xalloc@Ushape_def@CCF_Shape@@@@QBEXPAUshape_def@CCF_Shape@@I@Z ENDP ; xalloc<CCF_Shape::shape_def>::deallocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ?size@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QBEIXZ PROC ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::size, COMDAT
; _this$ = eax

; 180  :   size_type size() const        { return size_type(this->_M_finish - this->_M_start); }

	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR [eax]
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	ret	0
?size@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QBEIXZ ENDP ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?end@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QBEPBUSElement@CCF_Skeleton@@XZ
_TEXT	SEGMENT
?end@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QBEPBUSElement@CCF_Skeleton@@XZ PROC ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::end, COMDAT
; _this$ = eax

; 173  :   const_iterator end() const   { return this->_M_finish; }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?end@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QBEPBUSElement@CCF_Skeleton@@XZ ENDP ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?end@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEPAUSElement@CCF_Skeleton@@XZ
_TEXT	SEGMENT
?end@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEPAUSElement@CCF_Skeleton@@XZ PROC ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::end, COMDAT
; _this$ = eax

; 172  :   iterator end()               { return this->_M_finish; }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?end@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEPAUSElement@CCF_Skeleton@@XZ ENDP ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QBEPBUSElement@CCF_Skeleton@@XZ
_TEXT	SEGMENT
?begin@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QBEPBUSElement@CCF_Skeleton@@XZ PROC ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::begin, COMDAT
; _this$ = eax

; 171  :   const_iterator begin() const { return this->_M_start; }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QBEPBUSElement@CCF_Skeleton@@XZ ENDP ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::begin
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEPAUSElement@CCF_Skeleton@@XZ
_TEXT	SEGMENT
?begin@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEPAUSElement@CCF_Skeleton@@XZ PROC ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::begin, COMDAT
; _this$ = eax

; 170  :   iterator begin()             { return this->_M_start; }

	mov	eax, DWORD PTR [eax]
	ret	0
?begin@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEPAUSElement@CCF_Skeleton@@XZ ENDP ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::begin
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?get_allocator@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QBE?AV?$xalloc@USElement@CCF_Skeleton@@@@XZ
_TEXT	SEGMENT
?get_allocator@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QBE?AV?$xalloc@USElement@CCF_Skeleton@@@@XZ PROC ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::get_allocator, COMDAT
; ___$ReturnUdt$ = eax

; 134  :   { return _STLP_CONVERT_ALLOCATOR((const allocator_type&)this->_M_end_of_storage, _Tp); }

	ret	0
?get_allocator@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QBE?AV?$xalloc@USElement@CCF_Skeleton@@@@XZ ENDP ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::get_allocator
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrcore\_stl_extensions.h
_TEXT	ENDS
;	COMDAT ?deallocate@?$xalloc@USElement@CCF_Skeleton@@@@QBEXPAUSElement@CCF_Skeleton@@I@Z
_TEXT	SEGMENT
?deallocate@?$xalloc@USElement@CCF_Skeleton@@@@QBEXPAUSElement@CCF_Skeleton@@I@Z PROC ; xalloc<CCF_Skeleton::SElement>::deallocate, COMDAT
; _p$ = eax

; 83   : 							void					deallocate		(pointer p, size_type n) const			{	xr_free	(p);				}

	test	eax, eax
	je	SHORT $LN3@deallocate@25
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN3@deallocate@25:
	ret	0
?deallocate@?$xalloc@USElement@CCF_Skeleton@@@@QBEXPAUSElement@CCF_Skeleton@@I@Z ENDP ; xalloc<CCF_Skeleton::SElement>::deallocate
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ??1?$_Vector_base@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_base@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@XZ PROC ; stlp_std::priv::_Vector_base<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::~_Vector_base<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >, COMDAT
; _this$ = eax

; 85   :     if (_M_start != _STLP_DEFAULT_CONSTRUCTED(pointer))

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN6@Vector_bas@15

; 86   :       _M_end_of_storage.deallocate(_M_start, _M_end_of_storage._M_data - _M_start);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN6@Vector_bas@15:

; 87   :   }

	ret	0
??1?$_Vector_base@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@XZ ENDP ; stlp_std::priv::_Vector_base<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::~_Vector_base<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?rend@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUshape_def@CCF_Shape@@@3@XZ
_TEXT	SEGMENT
?rend@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUshape_def@CCF_Shape@@@3@XZ PROC ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::rend, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 177  :   reverse_iterator rend()                { return reverse_iterator(begin()); }

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	ret	0
?rend@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUshape_def@CCF_Shape@@@3@XZ ENDP ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::rend
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?rbegin@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUshape_def@CCF_Shape@@@3@XZ
_TEXT	SEGMENT
?rbegin@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUshape_def@CCF_Shape@@@3@XZ PROC ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::rbegin, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 175  :   reverse_iterator rbegin()              { return reverse_iterator(end()); }

	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
	ret	0
?rbegin@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUshape_def@CCF_Shape@@@3@XZ ENDP ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::rbegin
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$_Vector_base@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_base@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@XZ PROC ; stlp_std::priv::_Vector_base<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::~_Vector_base<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >, COMDAT
; _this$ = eax

; 85   :     if (_M_start != _STLP_DEFAULT_CONSTRUCTED(pointer))

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN6@Vector_bas@16

; 86   :       _M_end_of_storage.deallocate(_M_start, _M_end_of_storage._M_data - _M_start);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN6@Vector_bas@16:

; 87   :   }

	ret	0
??1?$_Vector_base@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@XZ ENDP ; stlp_std::priv::_Vector_base<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::~_Vector_base<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?rend@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUSElement@CCF_Skeleton@@@3@XZ
_TEXT	SEGMENT
?rend@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUSElement@CCF_Skeleton@@@3@XZ PROC ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::rend, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 177  :   reverse_iterator rend()                { return reverse_iterator(begin()); }

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	ret	0
?rend@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUSElement@CCF_Skeleton@@@3@XZ ENDP ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::rend
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?rbegin@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUSElement@CCF_Skeleton@@@3@XZ
_TEXT	SEGMENT
?rbegin@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUSElement@CCF_Skeleton@@@3@XZ PROC ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::rbegin, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 175  :   reverse_iterator rbegin()              { return reverse_iterator(end()); }

	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
	ret	0
?rbegin@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE?AV?$reverse_iterator@PAUSElement@CCF_Skeleton@@@3@XZ ENDP ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::rbegin
_TEXT	ENDS
PUBLIC	??1ICollidable@@UAE@XZ				; ICollidable::~ICollidable
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\icollidable.cpp
;	COMDAT ??1ICollidable@@UAE@XZ
_TEXT	SEGMENT
??1ICollidable@@UAE@XZ PROC				; ICollidable::~ICollidable, COMDAT
; _this$ = ecx

; 13   : {

	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7ICollidable@@6B@

; 14   : 	xr_delete		( collidable.model );	

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN3@ICollidabl
	push	edi
	push	eax
	call	___RTCastToVoid
	mov	ecx, DWORD PTR [esi+4]
	mov	edi, eax
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	add	esp, 4
	push	0
	call	edx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	DWORD PTR [esi+4], 0
	pop	edi
$LN3@ICollidabl:
	pop	esi

; 15   : };

	ret	0
??1ICollidable@@UAE@XZ ENDP				; ICollidable::~ICollidable
_TEXT	ENDS
PUBLIC	??0ICollidable@@QAE@XZ				; ICollidable::ICollidable
; Function compile flags: /Ogtpy
;	COMDAT ??0ICollidable@@QAE@XZ
_TEXT	SEGMENT
??0ICollidable@@QAE@XZ PROC				; ICollidable::ICollidable, COMDAT
; _this$ = ecx

; 7    : {

	push	esi

; 8    : 	collidable.model					=	NULL;		
; 9    : 	ISpatial*		self				=	dynamic_cast<ISpatial*> (this);

	push	0
	push	OFFSET ??_R0?AVISpatial@@@8
	mov	esi, ecx
	push	OFFSET ??_R0?AVICollidable@@@8
	push	0
	push	esi
	mov	DWORD PTR [esi], OFFSET ??_7ICollidable@@6B@
	mov	DWORD PTR [esi+4], 0
	call	___RTDynamicCast
	add	esp, 20					; 00000014H

; 10   : 	if (self)		self->spatial.type	|=	STYPE_COLLIDEABLE;

	test	eax, eax
	je	SHORT $LN4@ICollidabl@2
	or	DWORD PTR [eax+4], 4
$LN4@ICollidabl@2:

; 11   : };

	mov	eax, esi
	pop	esi
	ret	0
??0ICollidable@@QAE@XZ ENDP				; ICollidable::ICollidable
_TEXT	ENDS
PUBLIC	?Shapes@CCF_Shape@@QAEAAV?$xr_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@@XZ ; CCF_Shape::Shapes
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\engine\xrengine\xr_collide_form.h
;	COMDAT ?Shapes@CCF_Shape@@QAEAAV?$xr_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@@XZ
_TEXT	SEGMENT
?Shapes@CCF_Shape@@QAEAAV?$xr_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@@XZ PROC ; CCF_Shape::Shapes, COMDAT
; _this$ = ecx

; 193  : 	xr_vector<shape_def>& Shapes	(){return shapes;}

	lea	eax, DWORD PTR [ecx+56]
	ret	0
?Shapes@CCF_Shape@@QAEAAV?$xr_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@@XZ ENDP ; CCF_Shape::Shapes
_TEXT	ENDS
PUBLIC	??1CCF_EventBox@@UAE@XZ				; CCF_EventBox::~CCF_EventBox
; Function compile flags: /Ogtpy
;	COMDAT ??1CCF_EventBox@@UAE@XZ
_TEXT	SEGMENT
??1CCF_EventBox@@UAE@XZ PROC				; CCF_EventBox::~CCF_EventBox, COMDAT
; _this$ = ecx
	mov	DWORD PTR [ecx], OFFSET ??_7ICollisionForm@@6B@
	ret	0
??1CCF_EventBox@@UAE@XZ ENDP				; CCF_EventBox::~CCF_EventBox
_TEXT	ENDS
PUBLIC	??4SElement@CCF_Skeleton@@QAEAAU01@ABU01@@Z	; CCF_Skeleton::SElement::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4SElement@CCF_Skeleton@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4SElement@CCF_Skeleton@@QAEAAU01@ABU01@@Z PROC	; CCF_Skeleton::SElement::operator=, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, DWORD PTR ___that$[esp]
	push	edi
	mov	eax, ecx
	mov	ecx, 20					; 00000014H
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	ret	4
??4SElement@CCF_Skeleton@@QAEAAU01@ABU01@@Z ENDP	; CCF_Skeleton::SElement::operator=
_TEXT	ENDS
PUBLIC	?_GetElements@CCF_Skeleton@@QAEABV?$xr_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@@XZ ; CCF_Skeleton::_GetElements
; Function compile flags: /Ogtpy
;	COMDAT ?_GetElements@CCF_Skeleton@@QAEABV?$xr_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@@XZ
_TEXT	SEGMENT
?_GetElements@CCF_Skeleton@@QAEABV?$xr_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@@XZ PROC ; CCF_Skeleton::_GetElements, COMDAT
; _this$ = ecx

; 147  : 	const ElementVec&	_GetElements	() {return elements;}

	lea	eax, DWORD PTR [ecx+64]
	ret	0
?_GetElements@CCF_Skeleton@@QAEABV?$xr_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@@XZ ENDP ; CCF_Skeleton::_GetElements
_TEXT	ENDS
PUBLIC	?valid@SElement@CCF_Skeleton@@QBEHXZ		; CCF_Skeleton::SElement::valid
; Function compile flags: /Ogtpy
;	COMDAT ?valid@SElement@CCF_Skeleton@@QBEHXZ
_TEXT	SEGMENT
?valid@SElement@CCF_Skeleton@@QBEHXZ PROC		; CCF_Skeleton::SElement::valid, COMDAT
; _this$ = ecx

; 129  : 		BOOL			valid		() const									{return (elem_id!=(u16(-1)))&&(type!=0);}

	cmp	WORD PTR [ecx+78], 65535		; 0000ffffH
	je	SHORT $LN3@valid@2
	cmp	WORD PTR [ecx+76], 0
	je	SHORT $LN3@valid@2
	mov	eax, 1
	ret	0
$LN3@valid@2:
	xor	eax, eax
	ret	0
?valid@SElement@CCF_Skeleton@@QBEHXZ ENDP		; CCF_Skeleton::SElement::valid
_TEXT	ENDS
PUBLIC	??0SElement@CCF_Skeleton@@QAE@GG@Z		; CCF_Skeleton::SElement::SElement
; Function compile flags: /Ogtpy
;	COMDAT ??0SElement@CCF_Skeleton@@QAE@GG@Z
_TEXT	SEGMENT
_id$ = 8						; size = 2
_t$ = 12						; size = 2
??0SElement@CCF_Skeleton@@QAE@GG@Z PROC			; CCF_Skeleton::SElement::SElement, COMDAT
; _this$ = ecx

; 128  : 						SElement	(u16 id, u16 t)	:elem_id(id),type(t)		{}

	mov	dx, WORD PTR _id$[esp-4]
	mov	eax, ecx
	mov	cx, WORD PTR _t$[esp-4]
	mov	WORD PTR [eax+76], cx
	mov	WORD PTR [eax+78], dx
	ret	8
??0SElement@CCF_Skeleton@@QAE@GG@Z ENDP			; CCF_Skeleton::SElement::SElement
_TEXT	ENDS
PUBLIC	??0SElement@CCF_Skeleton@@QAE@XZ		; CCF_Skeleton::SElement::SElement
; Function compile flags: /Ogtpy
;	COMDAT ??0SElement@CCF_Skeleton@@QAE@XZ
_TEXT	SEGMENT
??0SElement@CCF_Skeleton@@QAE@XZ PROC			; CCF_Skeleton::SElement::SElement, COMDAT
; _this$ = ecx

; 127  : 						SElement	()				:elem_id(u16(-1)),type(0)	{}

	mov	eax, ecx
	mov	WORD PTR [eax+76], 0
	mov	WORD PTR [eax+78], 65535		; 0000ffffH
	ret	0
??0SElement@CCF_Skeleton@@QAE@XZ ENDP			; CCF_Skeleton::SElement::SElement
_TEXT	ENDS
PUBLIC	??4ICollisionForm@@QAEAAV0@ABV0@@Z		; ICollisionForm::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4ICollisionForm@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4ICollisionForm@@QAEAAV0@ABV0@@Z PROC			; ICollisionForm::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], edx
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+44], edx
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+48], edx
	mov	ecx, DWORD PTR [ecx+52]
	mov	DWORD PTR [eax+52], ecx
	ret	4
??4ICollisionForm@@QAEAAV0@ABV0@@Z ENDP			; ICollisionForm::operator=
_TEXT	ENDS
PUBLIC	??0ICollisionForm@@QAE@ABV0@@Z			; ICollisionForm::ICollisionForm
; Function compile flags: /Ogtpy
;	COMDAT ??0ICollisionForm@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0ICollisionForm@@QAE@ABV0@@Z PROC			; ICollisionForm::ICollisionForm, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	DWORD PTR [eax], OFFSET ??_7ICollisionForm@@6B@
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], edx
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+44], edx
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+48], edx
	mov	ecx, DWORD PTR [ecx+52]
	mov	DWORD PTR [eax+52], ecx
	ret	4
??0ICollisionForm@@QAE@ABV0@@Z ENDP			; ICollisionForm::ICollisionForm
_TEXT	ENDS
PUBLIC	?Type@ICollisionForm@@QBE?BW4ECollisionFormType@@XZ ; ICollisionForm::Type
; Function compile flags: /Ogtpy
;	COMDAT ?Type@ICollisionForm@@QBE?BW4ECollisionFormType@@XZ
_TEXT	SEGMENT
?Type@ICollisionForm@@QBE?BW4ECollisionFormType@@XZ PROC ; ICollisionForm::Type, COMDAT
; _this$ = ecx

; 105  : 	const ECollisionFormType Type	( ) const				{ return m_type;		}

	mov	eax, DWORD PTR [ecx+52]
	ret	0
?Type@ICollisionForm@@QBE?BW4ECollisionFormType@@XZ ENDP ; ICollisionForm::Type
_TEXT	ENDS
PUBLIC	?getSphere@ICollisionForm@@QBEABU?$_sphere@M@@XZ ; ICollisionForm::getSphere
; Function compile flags: /Ogtpy
;	COMDAT ?getSphere@ICollisionForm@@QBEABU?$_sphere@M@@XZ
_TEXT	SEGMENT
?getSphere@ICollisionForm@@QBEABU?$_sphere@M@@XZ PROC	; ICollisionForm::getSphere, COMDAT
; _this$ = ecx

; 104  : 	const Fsphere&	getSphere		( )	const				{ return bv_sphere;		}

	lea	eax, DWORD PTR [ecx+36]
	ret	0
?getSphere@ICollisionForm@@QBEABU?$_sphere@M@@XZ ENDP	; ICollisionForm::getSphere
_TEXT	ENDS
PUBLIC	?getRadius@ICollisionForm@@QBEMXZ		; ICollisionForm::getRadius
; Function compile flags: /Ogtpy
;	COMDAT ?getRadius@ICollisionForm@@QBEMXZ
_TEXT	SEGMENT
?getRadius@ICollisionForm@@QBEMXZ PROC			; ICollisionForm::getRadius, COMDAT
; _this$ = ecx

; 103  : 	float			getRadius		( )	const				{ return bv_sphere.R;	}

	fld	DWORD PTR [ecx+48]
	ret	0
?getRadius@ICollisionForm@@QBEMXZ ENDP			; ICollisionForm::getRadius
_TEXT	ENDS
PUBLIC	?getBBox@ICollisionForm@@QBEABV?$_box3@M@@XZ	; ICollisionForm::getBBox
; Function compile flags: /Ogtpy
;	COMDAT ?getBBox@ICollisionForm@@QBEABV?$_box3@M@@XZ
_TEXT	SEGMENT
?getBBox@ICollisionForm@@QBEABV?$_box3@M@@XZ PROC	; ICollisionForm::getBBox, COMDAT
; _this$ = ecx

; 102  : 	const Fbox&		getBBox			( )	const				{ return bv_box;		}

	lea	eax, DWORD PTR [ecx+12]
	ret	0
?getBBox@ICollisionForm@@QBEABV?$_box3@M@@XZ ENDP	; ICollisionForm::getBBox
_TEXT	ENDS
PUBLIC	?Owner@ICollisionForm@@QBEPAVCObject@@XZ	; ICollisionForm::Owner
; Function compile flags: /Ogtpy
;	COMDAT ?Owner@ICollisionForm@@QBEPAVCObject@@XZ
_TEXT	SEGMENT
?Owner@ICollisionForm@@QBEPAVCObject@@XZ PROC		; ICollisionForm::Owner, COMDAT
; _this$ = ecx

; 101  : 	IC CObject*		Owner			( )	const				{ return owner;			}

	mov	eax, DWORD PTR [ecx+4]
	ret	0
?Owner@ICollisionForm@@QBEPAVCObject@@XZ ENDP		; ICollisionForm::Owner
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
;	COMDAT ??$__destroy_range@V?$reverse_iterator@PAUshape_def@CCF_Shape@@@stlp_std@@Ushape_def@CCF_Shape@@@stlp_std@@YAXV?$reverse_iterator@PAUshape_def@CCF_Shape@@@0@0PAUshape_def@CCF_Shape@@@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$__destroy_range@V?$reverse_iterator@PAUshape_def@CCF_Shape@@@stlp_std@@Ushape_def@CCF_Shape@@@stlp_std@@YAXV?$reverse_iterator@PAUshape_def@CCF_Shape@@@0@0PAUshape_def@CCF_Shape@@@Z PROC ; stlp_std::__destroy_range<stlp_std::reverse_iterator<CCF_Shape::shape_def *>,CCF_Shape::shape_def>, COMDAT

; 175  :   typedef typename __type_traits<_Tp>::has_trivial_destructor _Trivial_destructor;
; 176  :   __destroy_range_aux(__first, __last, __ptr, _Trivial_destructor());
; 177  : }

	ret	0
??$__destroy_range@V?$reverse_iterator@PAUshape_def@CCF_Shape@@@stlp_std@@Ushape_def@CCF_Shape@@@stlp_std@@YAXV?$reverse_iterator@PAUshape_def@CCF_Shape@@@0@0PAUshape_def@CCF_Shape@@@Z ENDP ; stlp_std::__destroy_range<stlp_std::reverse_iterator<CCF_Shape::shape_def *>,CCF_Shape::shape_def>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__destroy_range@V?$reverse_iterator@PAUSElement@CCF_Skeleton@@@stlp_std@@USElement@CCF_Skeleton@@@stlp_std@@YAXV?$reverse_iterator@PAUSElement@CCF_Skeleton@@@0@0PAUSElement@CCF_Skeleton@@@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$__destroy_range@V?$reverse_iterator@PAUSElement@CCF_Skeleton@@@stlp_std@@USElement@CCF_Skeleton@@@stlp_std@@YAXV?$reverse_iterator@PAUSElement@CCF_Skeleton@@@0@0PAUSElement@CCF_Skeleton@@@Z PROC ; stlp_std::__destroy_range<stlp_std::reverse_iterator<CCF_Skeleton::SElement *>,CCF_Skeleton::SElement>, COMDAT

; 175  :   typedef typename __type_traits<_Tp>::has_trivial_destructor _Trivial_destructor;
; 176  :   __destroy_range_aux(__first, __last, __ptr, _Trivial_destructor());
; 177  : }

	ret	0
??$__destroy_range@V?$reverse_iterator@PAUSElement@CCF_Skeleton@@@stlp_std@@USElement@CCF_Skeleton@@@stlp_std@@YAXV?$reverse_iterator@PAUSElement@CCF_Skeleton@@@0@0PAUSElement@CCF_Skeleton@@@Z ENDP ; stlp_std::__destroy_range<stlp_std::reverse_iterator<CCF_Skeleton::SElement *>,CCF_Skeleton::SElement>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_algobase.h
_TEXT	ENDS
;	COMDAT ??$__copy_ptrs@PBUshape_def@CCF_Shape@@PAU12@@priv@stlp_std@@YAPAUshape_def@CCF_Shape@@PBU23@0PAU23@ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__copy_ptrs@PBUshape_def@CCF_Shape@@PAU12@@priv@stlp_std@@YAPAUshape_def@CCF_Shape@@PBU23@0PAU23@ABU__true_type@1@@Z PROC ; stlp_std::priv::__copy_ptrs<CCF_Shape::shape_def const *,CCF_Shape::shape_def *>, COMDAT
; ___first$ = edx
; ___last$ = ecx
; ___result$ = eax

; 255  :   // we know they all pointers, so this cast is OK
; 256  :   //  return (_OutputIter)__copy_trivial(&(*__first), &(*__last), &(*__result));
; 257  :   return (_OutputIter)__copy_trivial(__first, __last, __result);

	sub	ecx, edx
	push	esi
	mov	esi, ecx
	je	SHORT $LN6@copy_ptrs@27
	push	esi
	push	edx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN6@copy_ptrs@27:
	pop	esi

; 258  : }

	ret	0
??$__copy_ptrs@PBUshape_def@CCF_Shape@@PAU12@@priv@stlp_std@@YAPAUshape_def@CCF_Shape@@PBU23@0PAU23@ABU__true_type@1@@Z ENDP ; stlp_std::priv::__copy_ptrs<CCF_Shape::shape_def const *,CCF_Shape::shape_def *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__copy_ptrs@PBUSElement@CCF_Skeleton@@PAU12@@priv@stlp_std@@YAPAUSElement@CCF_Skeleton@@PBU23@0PAU23@ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__copy_ptrs@PBUSElement@CCF_Skeleton@@PAU12@@priv@stlp_std@@YAPAUSElement@CCF_Skeleton@@PBU23@0PAU23@ABU__true_type@1@@Z PROC ; stlp_std::priv::__copy_ptrs<CCF_Skeleton::SElement const *,CCF_Skeleton::SElement *>, COMDAT
; ___first$ = edx
; ___last$ = ecx
; ___result$ = eax

; 255  :   // we know they all pointers, so this cast is OK
; 256  :   //  return (_OutputIter)__copy_trivial(&(*__first), &(*__last), &(*__result));
; 257  :   return (_OutputIter)__copy_trivial(__first, __last, __result);

	sub	ecx, edx
	push	esi
	mov	esi, ecx
	je	SHORT $LN6@copy_ptrs@28
	push	esi
	push	edx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN6@copy_ptrs@28:
	pop	esi

; 258  : }

	ret	0
??$__copy_ptrs@PBUSElement@CCF_Skeleton@@PAU12@@priv@stlp_std@@YAPAUSElement@CCF_Skeleton@@PBU23@0PAU23@ABU__true_type@1@@Z ENDP ; stlp_std::priv::__copy_ptrs<CCF_Skeleton::SElement const *,CCF_Skeleton::SElement *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_uninitialized.h
_TEXT	ENDS
;	COMDAT ??$__ucopy_ptrs@PBUshape_def@CCF_Shape@@PAU12@@priv@stlp_std@@YAPAUshape_def@CCF_Shape@@PBU23@0PAU23@ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__ucopy_ptrs@PBUshape_def@CCF_Shape@@PAU12@@priv@stlp_std@@YAPAUshape_def@CCF_Shape@@PBU23@0PAU23@ABU__true_type@1@@Z PROC ; stlp_std::priv::__ucopy_ptrs<CCF_Shape::shape_def const *,CCF_Shape::shape_def *>, COMDAT
; ___first$ = ecx
; ___last$ = edx
; ___result$ = eax

; 117  :                                 const __true_type& /*TrivialUCopy*/) {

	push	esi
	mov	esi, edx

; 118  :   // we know they all pointers, so this cast is OK
; 119  :   //  return (_OutputIter)__copy_trivial(&(*__first), &(*__last), &(*__result));
; 120  :   return (_OutputIter)__ucopy_trivial(__first, __last, __result);

	cmp	esi, ecx
	je	SHORT $LN6@ucopy_ptrs@19
	sub	esi, ecx
	push	esi
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN6@ucopy_ptrs@19:
	pop	esi

; 121  : }

	ret	0
??$__ucopy_ptrs@PBUshape_def@CCF_Shape@@PAU12@@priv@stlp_std@@YAPAUshape_def@CCF_Shape@@PBU23@0PAU23@ABU__true_type@1@@Z ENDP ; stlp_std::priv::__ucopy_ptrs<CCF_Shape::shape_def const *,CCF_Shape::shape_def *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__ucopy_ptrs@PBUSElement@CCF_Skeleton@@PAU12@@priv@stlp_std@@YAPAUSElement@CCF_Skeleton@@PBU23@0PAU23@ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__ucopy_ptrs@PBUSElement@CCF_Skeleton@@PAU12@@priv@stlp_std@@YAPAUSElement@CCF_Skeleton@@PBU23@0PAU23@ABU__true_type@1@@Z PROC ; stlp_std::priv::__ucopy_ptrs<CCF_Skeleton::SElement const *,CCF_Skeleton::SElement *>, COMDAT
; ___first$ = ecx
; ___last$ = edx
; ___result$ = eax

; 117  :                                 const __true_type& /*TrivialUCopy*/) {

	push	esi
	mov	esi, edx

; 118  :   // we know they all pointers, so this cast is OK
; 119  :   //  return (_OutputIter)__copy_trivial(&(*__first), &(*__last), &(*__result));
; 120  :   return (_OutputIter)__ucopy_trivial(__first, __last, __result);

	cmp	esi, ecx
	je	SHORT $LN6@ucopy_ptrs@20
	sub	esi, ecx
	push	esi
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN6@ucopy_ptrs@20:
	pop	esi

; 121  : }

	ret	0
??$__ucopy_ptrs@PBUSElement@CCF_Skeleton@@PAU12@@priv@stlp_std@@YAPAUSElement@CCF_Skeleton@@PBU23@0PAU23@ABU__true_type@1@@Z ENDP ; stlp_std::priv::__ucopy_ptrs<CCF_Skeleton::SElement const *,CCF_Skeleton::SElement *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_construct.h
_TEXT	ENDS
;	COMDAT ??$_Destroy_Range@V?$reverse_iterator@PAUshape_def@CCF_Shape@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAUshape_def@CCF_Shape@@@0@0@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$_Destroy_Range@V?$reverse_iterator@PAUshape_def@CCF_Shape@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAUshape_def@CCF_Shape@@@0@0@Z PROC ; stlp_std::_Destroy_Range<stlp_std::reverse_iterator<CCF_Shape::shape_def *> >, COMDAT

; 181  :   __destroy_range(__first, __last, _STLP_VALUE_TYPE(__first, _ForwardIterator));
; 182  : }

	ret	0
??$_Destroy_Range@V?$reverse_iterator@PAUshape_def@CCF_Shape@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAUshape_def@CCF_Shape@@@0@0@Z ENDP ; stlp_std::_Destroy_Range<stlp_std::reverse_iterator<CCF_Shape::shape_def *> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Destroy_Range@V?$reverse_iterator@PAUSElement@CCF_Skeleton@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAUSElement@CCF_Skeleton@@@0@0@Z
_TEXT	SEGMENT
___first$ = 8						; size = 4
___last$ = 12						; size = 4
??$_Destroy_Range@V?$reverse_iterator@PAUSElement@CCF_Skeleton@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAUSElement@CCF_Skeleton@@@0@0@Z PROC ; stlp_std::_Destroy_Range<stlp_std::reverse_iterator<CCF_Skeleton::SElement *> >, COMDAT

; 181  :   __destroy_range(__first, __last, _STLP_VALUE_TYPE(__first, _ForwardIterator));
; 182  : }

	ret	0
??$_Destroy_Range@V?$reverse_iterator@PAUSElement@CCF_Skeleton@@@stlp_std@@@stlp_std@@YAXV?$reverse_iterator@PAUSElement@CCF_Skeleton@@@0@0@Z ENDP ; stlp_std::_Destroy_Range<stlp_std::reverse_iterator<CCF_Skeleton::SElement *> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_alloc.h
_TEXT	ENDS
;	COMDAT ??0?$_STLP_alloc_proxy@PAUshape_def@CCF_Shape@@U12@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Ushape_def@CCF_Shape@@@@PAUshape_def@CCF_Shape@@@Z
_TEXT	SEGMENT
??0?$_STLP_alloc_proxy@PAUshape_def@CCF_Shape@@U12@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Ushape_def@CCF_Shape@@@@PAUshape_def@CCF_Shape@@@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<CCF_Shape::shape_def *,CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_STLP_alloc_proxy<CCF_Shape::shape_def *,CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >, COMDAT
; _this$ = eax

; 571  :     _MaybeReboundAlloc(__a), _M_data(__p) {}

	mov	DWORD PTR [eax], 0
	ret	0
??0?$_STLP_alloc_proxy@PAUshape_def@CCF_Shape@@U12@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@ABV?$xalloc@Ushape_def@CCF_Shape@@@@PAUshape_def@CCF_Shape@@@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<CCF_Shape::shape_def *,CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_STLP_alloc_proxy<CCF_Shape::shape_def *,CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_STLP_alloc_proxy@PAUSElement@CCF_Skeleton@@U12@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@ABV?$xalloc@USElement@CCF_Skeleton@@@@PAUSElement@CCF_Skeleton@@@Z
_TEXT	SEGMENT
??0?$_STLP_alloc_proxy@PAUSElement@CCF_Skeleton@@U12@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@ABV?$xalloc@USElement@CCF_Skeleton@@@@PAUSElement@CCF_Skeleton@@@Z PROC ; stlp_std::priv::_STLP_alloc_proxy<CCF_Skeleton::SElement *,CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_STLP_alloc_proxy<CCF_Skeleton::SElement *,CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >, COMDAT
; _this$ = eax

; 571  :     _MaybeReboundAlloc(__a), _M_data(__p) {}

	mov	DWORD PTR [eax], 0
	ret	0
??0?$_STLP_alloc_proxy@PAUSElement@CCF_Skeleton@@U12@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@ABV?$xalloc@USElement@CCF_Skeleton@@@@PAUSElement@CCF_Skeleton@@@Z ENDP ; stlp_std::priv::_STLP_alloc_proxy<CCF_Skeleton::SElement *,CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_STLP_alloc_proxy<CCF_Skeleton::SElement *,CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ??0?$_Vector_base@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@IABV?$xalloc@Ushape_def@CCF_Shape@@@@@Z
_TEXT	SEGMENT
??0?$_Vector_base@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@IABV?$xalloc@Ushape_def@CCF_Shape@@@@@Z PROC ; stlp_std::priv::_Vector_base<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_Vector_base<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >, COMDAT
; _this$ = esi
; ___n$ = ecx

; 70   :     : _M_start(0), _M_finish(0), _M_end_of_storage(__a, 0) {

	push	edi

; 71   :     _M_start = _M_end_of_storage.allocate(__n, __n);

	mov	edi, ecx
	imul	edi, 132				; 00000084H
	xor	eax, eax
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 72   :     _M_finish = _M_start;
; 73   :     _M_end_of_storage._M_data = _M_start + __n;

	add	edi, eax
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], edi

; 74   :     _STLP_MPWFIX_TRY _STLP_MPWFIX_CATCH
; 75   :   }

	mov	eax, esi
	pop	edi
	ret	0
??0?$_Vector_base@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@IABV?$xalloc@Ushape_def@CCF_Shape@@@@@Z ENDP ; stlp_std::priv::_Vector_base<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_Vector_base<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Vector_base@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@IABV?$xalloc@USElement@CCF_Skeleton@@@@@Z
_TEXT	SEGMENT
??0?$_Vector_base@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@IABV?$xalloc@USElement@CCF_Skeleton@@@@@Z PROC ; stlp_std::priv::_Vector_base<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_Vector_base<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >, COMDAT
; _this$ = esi
; ___n$ = eax

; 70   :     : _M_start(0), _M_finish(0), _M_end_of_storage(__a, 0) {

	push	edi
	xor	ecx, ecx

; 71   :     _M_start = _M_end_of_storage.allocate(__n, __n);

	lea	edi, DWORD PTR [eax+eax*4]
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], ecx
	mov	DWORD PTR [esi+8], ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	edi, 4
	push	edi
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 72   :     _M_finish = _M_start;
; 73   :     _M_end_of_storage._M_data = _M_start + __n;

	add	edi, eax
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], edi

; 74   :     _STLP_MPWFIX_TRY _STLP_MPWFIX_CATCH
; 75   :   }

	mov	eax, esi
	pop	edi
	ret	0
??0?$_Vector_base@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@IABV?$xalloc@USElement@CCF_Skeleton@@@@@Z ENDP ; stlp_std::priv::_Vector_base<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_Vector_base<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@ABV012@@Z
_TEXT	SEGMENT
??0?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@ABV012@@Z PROC ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >, COMDAT
; _this$ = esi
; ___x$ = eax

; 236  :   { this->_M_finish = _STLP_PRIV __ucopy_ptrs(__x.begin(), __x.end(), this->_M_start, _TrivialUCopy()); }

	push	ebx
	mov	ebx, eax
	mov	ecx, DWORD PTR [ebx+4]
	sub	ecx, DWORD PTR [ebx]
	mov	eax, 1041204193				; 3e0f83e1H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	push	edi
	add	eax, edx
	mov	edi, eax
	imul	edi, 132				; 00000084H
	xor	ecx, ecx
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], ecx
	mov	DWORD PTR [esi+8], ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	add	edi, eax
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], edi
	mov	ecx, DWORD PTR [ebx+4]
	mov	ebx, DWORD PTR [ebx]
	cmp	ecx, ebx
	je	SHORT $LN35@Impl_vecto@16
	mov	edi, ecx
	sub	edi, ebx
	push	edi
	push	ebx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, edi
$LN35@Impl_vecto@16:
	pop	edi
	mov	DWORD PTR [esi+4], eax
	mov	eax, esi
	pop	ebx
	ret	0
??0?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@ABV012@@Z ENDP ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@ABV012@@Z
_TEXT	SEGMENT
??0?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@ABV012@@Z PROC ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >, COMDAT
; _this$ = esi
; ___x$ = eax

; 236  :   { this->_M_finish = _STLP_PRIV __ucopy_ptrs(__x.begin(), __x.end(), this->_M_start, _TrivialUCopy()); }

	push	ebx
	mov	ebx, eax
	mov	ecx, DWORD PTR [ebx+4]
	sub	ecx, DWORD PTR [ebx]
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	push	edi
	xor	ecx, ecx
	add	eax, edx
	lea	edi, DWORD PTR [eax+eax*4]
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], ecx
	mov	DWORD PTR [esi+8], ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	shl	edi, 4
	push	edi
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	add	edi, eax
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], edi
	mov	ecx, DWORD PTR [ebx+4]
	mov	ebx, DWORD PTR [ebx]
	cmp	ecx, ebx
	je	SHORT $LN35@Impl_vecto@17
	mov	edi, ecx
	sub	edi, ebx
	push	edi
	push	ebx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, edi
$LN35@Impl_vecto@17:
	pop	edi
	mov	DWORD PTR [esi+4], eax
	mov	eax, esi
	pop	ebx
	ret	0
??0?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@ABV012@@Z ENDP ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@XZ PROC ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::~_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >, COMDAT
; _this$ = eax

; 286  :   ~vector() { _STLP_STD::_Destroy_Range(rbegin(), rend()); }

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN34@Impl_vecto@18
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN34@Impl_vecto@18:
	ret	0
??1?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@XZ ENDP ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::~_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ??0?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QAE@ABV01@@Z PROC ; stlp_std::vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >, COMDAT
; _this$ = ecx
; ___x$ = eax

; 123  :   vector(const _Self& __x)

	push	esi
	mov	esi, ecx
	call	??0?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >
	mov	eax, esi
	pop	esi
	ret	0
??0?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QAE@ABV01@@Z ENDP ; stlp_std::vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ??1?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@XZ PROC ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::~_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >, COMDAT
; _this$ = eax

; 286  :   ~vector() { _STLP_STD::_Destroy_Range(rbegin(), rend()); }

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN34@Impl_vecto@19
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN34@Impl_vecto@19:
	ret	0
??1?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@XZ ENDP ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::~_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ??0?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAE@ABV01@@Z PROC ; stlp_std::vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >, COMDAT
; _this$ = ecx
; ___x$ = eax

; 123  :   vector(const _Self& __x)

	push	esi
	mov	esi, ecx
	call	??0?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >
	mov	eax, esi
	pop	esi
	ret	0
??0?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAE@ABV01@@Z ENDP ; stlp_std::vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QAE@XZ PROC ; stlp_std::vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::~vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >, COMDAT
; _this$ = eax
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN36@vector@13
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN36@vector@13:
	ret	0
??1?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QAE@XZ ENDP ; stlp_std::vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::~vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$xr_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xr_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@@QAE@ABV0@@Z PROC ; xr_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::xr_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >, COMDAT
; _this$ = ecx
; ___that$ = eax
	push	esi
	mov	esi, ecx
	call	??0?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >
	mov	eax, esi
	pop	esi
	ret	0
??0?$xr_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@@QAE@ABV0@@Z ENDP ; xr_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::xr_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$xr_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@@QAE@XZ
_TEXT	SEGMENT
??1?$xr_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@@QAE@XZ PROC ; xr_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::~xr_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >, COMDAT
; _this$ = eax
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN38@xr_vector@10
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN38@xr_vector@10:
	ret	0
??1?$xr_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@@QAE@XZ ENDP ; xr_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::~xr_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >
_TEXT	ENDS
PUBLIC	??0CCF_Shape@@QAE@ABV0@@Z			; CCF_Shape::CCF_Shape
; Function compile flags: /Ogtpy
;	COMDAT ??0CCF_Shape@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0CCF_Shape@@QAE@ABV0@@Z PROC				; CCF_Shape::CCF_Shape, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR ___that$[esp-4]
	push	esi
	push	edi
	mov	edi, ecx
	mov	DWORD PTR [edi], OFFSET ??_7ICollisionForm@@6B@
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edi+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [edi+8], edx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edi+12], ecx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [edi+16], edx
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [edi+20], ecx
	mov	edx, DWORD PTR [eax+24]
	mov	DWORD PTR [edi+24], edx
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [edi+28], ecx
	mov	edx, DWORD PTR [eax+32]
	mov	DWORD PTR [edi+32], edx
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edi+36], ecx
	mov	edx, DWORD PTR [eax+40]
	mov	DWORD PTR [edi+40], edx
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR [edi+44], ecx
	mov	edx, DWORD PTR [eax+48]
	mov	DWORD PTR [edi+48], edx
	mov	ecx, DWORD PTR [eax+52]
	add	eax, 56					; 00000038H
	lea	esi, DWORD PTR [edi+56]
	mov	DWORD PTR [edi+52], ecx
	mov	DWORD PTR [edi], OFFSET ??_7CCF_Shape@@6B@
	call	??0?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >
	mov	eax, edi
	pop	edi
	pop	esi
	ret	4
??0CCF_Shape@@QAE@ABV0@@Z ENDP				; CCF_Shape::CCF_Shape
_TEXT	ENDS
PUBLIC	??1CCF_Shape@@UAE@XZ				; CCF_Shape::~CCF_Shape
; Function compile flags: /Ogtpy
;	COMDAT ??1CCF_Shape@@UAE@XZ
_TEXT	SEGMENT
??1CCF_Shape@@UAE@XZ PROC				; CCF_Shape::~CCF_Shape, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+56]
	test	eax, eax
	je	SHORT $LN45@CCF_Shape
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN45@CCF_Shape:
	mov	DWORD PTR [esi], OFFSET ??_7ICollisionForm@@6B@
	pop	esi
	ret	0
??1CCF_Shape@@UAE@XZ ENDP				; CCF_Shape::~CCF_Shape
_TEXT	ENDS
PUBLIC	??_GCCF_EventBox@@UAEPAXI@Z			; CCF_EventBox::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_GCCF_EventBox@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCCF_EventBox@@UAEPAXI@Z PROC			; CCF_EventBox::`scalar deleting destructor', COMDAT
; _this$ = ecx
	test	BYTE PTR ___flags$[esp-4], 1
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7ICollisionForm@@6B@
	je	SHORT $LN13@scalar@8
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN13@scalar@8:
	mov	eax, esi
	pop	esi
	ret	4
??_GCCF_EventBox@@UAEPAXI@Z ENDP			; CCF_EventBox::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??4CCF_EventBox@@QAEAAV0@ABV0@@Z		; CCF_EventBox::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4CCF_EventBox@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4CCF_EventBox@@QAEAAV0@ABV0@@Z PROC			; CCF_EventBox::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], edx
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+44], edx
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+48], edx
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR [eax+52], edx
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+56], edx
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+60], edx
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR [eax+64], edx
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR [eax+68], edx
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+72], edx
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+76], edx
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+80], edx
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+84], edx
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+88], edx
	mov	edx, DWORD PTR [ecx+92]
	mov	DWORD PTR [eax+92], edx
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR [eax+96], edx
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR [eax+100], edx
	mov	edx, DWORD PTR [ecx+104]
	mov	DWORD PTR [eax+104], edx
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+108], edx
	mov	edx, DWORD PTR [ecx+112]
	mov	DWORD PTR [eax+112], edx
	mov	edx, DWORD PTR [ecx+116]
	mov	DWORD PTR [eax+116], edx
	mov	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR [eax+120], edx
	mov	edx, DWORD PTR [ecx+124]
	mov	DWORD PTR [eax+124], edx
	mov	edx, DWORD PTR [ecx+128]
	mov	DWORD PTR [eax+128], edx
	mov	edx, DWORD PTR [ecx+132]
	add	ecx, 136				; 00000088H
	mov	DWORD PTR [eax+132], edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+136], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+140], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+144], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+148], ecx
	ret	4
??4CCF_EventBox@@QAEAAV0@ABV0@@Z ENDP			; CCF_EventBox::operator=
_TEXT	ENDS
PUBLIC	??0CCF_EventBox@@QAE@ABV0@@Z			; CCF_EventBox::CCF_EventBox
; Function compile flags: /Ogtpy
;	COMDAT ??0CCF_EventBox@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0CCF_EventBox@@QAE@ABV0@@Z PROC			; CCF_EventBox::CCF_EventBox, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	DWORD PTR [eax], OFFSET ??_7ICollisionForm@@6B@
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], edx
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+44], edx
	mov	edx, DWORD PTR [ecx+48]
	push	esi
	push	edi
	mov	DWORD PTR [eax+48], edx
	mov	edx, DWORD PTR [ecx+52]
	lea	esi, DWORD PTR [ecx+56]
	lea	edi, DWORD PTR [eax+56]
	mov	ecx, 24					; 00000018H
	mov	DWORD PTR [eax+52], edx
	mov	DWORD PTR [eax], OFFSET ??_7CCF_EventBox@@6B@
	rep movsd
	pop	edi
	pop	esi
	ret	4
??0CCF_EventBox@@QAE@ABV0@@Z ENDP			; CCF_EventBox::CCF_EventBox
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAE@XZ PROC ; stlp_std::vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::~vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >, COMDAT
; _this$ = eax
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN36@vector@14
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN36@vector@14:
	ret	0
??1?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAE@XZ ENDP ; stlp_std::vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::~vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$xr_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0?$xr_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@@QAE@ABV0@@Z PROC ; xr_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::xr_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >, COMDAT
; _this$ = ecx
; ___that$ = eax
	push	esi
	mov	esi, ecx
	call	??0?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >
	mov	eax, esi
	pop	esi
	ret	0
??0?$xr_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@@QAE@ABV0@@Z ENDP ; xr_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::xr_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$xr_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@@QAE@XZ
_TEXT	SEGMENT
??1?$xr_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@@QAE@XZ PROC ; xr_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::~xr_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >, COMDAT
; _this$ = eax
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN38@xr_vector@11
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN38@xr_vector@11:
	ret	0
??1?$xr_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@@QAE@XZ ENDP ; xr_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::~xr_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >
_TEXT	ENDS
PUBLIC	??0CCF_Skeleton@@QAE@ABV0@@Z			; CCF_Skeleton::CCF_Skeleton
; Function compile flags: /Ogtpy
;	COMDAT ??0CCF_Skeleton@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0CCF_Skeleton@@QAE@ABV0@@Z PROC			; CCF_Skeleton::CCF_Skeleton, COMDAT
; _this$ = ecx
	push	ebx
	mov	ebx, DWORD PTR ___that$[esp]
	push	esi
	push	edi
	mov	edi, ecx
	mov	DWORD PTR [edi], OFFSET ??_7ICollisionForm@@6B@
	mov	eax, DWORD PTR [ebx+4]
	mov	DWORD PTR [edi+4], eax
	mov	ecx, DWORD PTR [ebx+8]
	mov	DWORD PTR [edi+8], ecx
	mov	edx, DWORD PTR [ebx+12]
	mov	DWORD PTR [edi+12], edx
	mov	eax, DWORD PTR [ebx+16]
	mov	DWORD PTR [edi+16], eax
	mov	ecx, DWORD PTR [ebx+20]
	mov	DWORD PTR [edi+20], ecx
	mov	edx, DWORD PTR [ebx+24]
	mov	DWORD PTR [edi+24], edx
	mov	eax, DWORD PTR [ebx+28]
	mov	DWORD PTR [edi+28], eax
	mov	ecx, DWORD PTR [ebx+32]
	mov	DWORD PTR [edi+32], ecx
	mov	edx, DWORD PTR [ebx+36]
	mov	DWORD PTR [edi+36], edx
	mov	eax, DWORD PTR [ebx+40]
	mov	DWORD PTR [edi+40], eax
	mov	ecx, DWORD PTR [ebx+44]
	mov	DWORD PTR [edi+44], ecx
	mov	edx, DWORD PTR [ebx+48]
	mov	DWORD PTR [edi+48], edx
	mov	eax, DWORD PTR [ebx+52]
	mov	DWORD PTR [edi+52], eax
	mov	DWORD PTR [edi], OFFSET ??_7CCF_Skeleton@@6B@
	mov	ecx, DWORD PTR [ebx+56]
	mov	DWORD PTR [edi+56], ecx
	mov	edx, DWORD PTR [ebx+60]
	lea	eax, DWORD PTR [ebx+64]
	lea	esi, DWORD PTR [edi+64]
	mov	DWORD PTR [edi+60], edx
	call	??0?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAE@ABV012@@Z ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >
	mov	eax, DWORD PTR [ebx+76]
	mov	DWORD PTR [edi+76], eax
	mov	ecx, DWORD PTR [ebx+80]
	mov	DWORD PTR [edi+80], ecx
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	ret	4
??0CCF_Skeleton@@QAE@ABV0@@Z ENDP			; CCF_Skeleton::CCF_Skeleton
_TEXT	ENDS
PUBLIC	??1CCF_Skeleton@@UAE@XZ				; CCF_Skeleton::~CCF_Skeleton
; Function compile flags: /Ogtpy
;	COMDAT ??1CCF_Skeleton@@UAE@XZ
_TEXT	SEGMENT
??1CCF_Skeleton@@UAE@XZ PROC				; CCF_Skeleton::~CCF_Skeleton, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+64]
	test	eax, eax
	je	SHORT $LN45@CCF_Skelet
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN45@CCF_Skelet:
	mov	DWORD PTR [esi], OFFSET ??_7ICollisionForm@@6B@
	pop	esi
	ret	0
??1CCF_Skeleton@@UAE@XZ ENDP				; CCF_Skeleton::~CCF_Skeleton
_TEXT	ENDS
PUBLIC	??_GICollisionForm@@UAEPAXI@Z			; ICollisionForm::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_GICollisionForm@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GICollisionForm@@UAEPAXI@Z PROC			; ICollisionForm::`scalar deleting destructor', COMDAT
; _this$ = ecx
	test	BYTE PTR ___flags$[esp-4], 1
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7ICollisionForm@@6B@
	je	SHORT $LN11@scalar@9
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN11@scalar@9:
	mov	eax, esi
	pop	esi
	ret	4
??_GICollisionForm@@UAEPAXI@Z ENDP			; ICollisionForm::`scalar deleting destructor'
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_uninitialized.h
;	COMDAT ??$__ucopy_aux@PBUshape_def@CCF_Shape@@PAU12@@priv@stlp_std@@YAPAUshape_def@CCF_Shape@@PBU23@0PAU23@ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__ucopy_aux@PBUshape_def@CCF_Shape@@PAU12@@priv@stlp_std@@YAPAUshape_def@CCF_Shape@@PBU23@0PAU23@ABU__true_type@1@@Z PROC ; stlp_std::priv::__ucopy_aux<CCF_Shape::shape_def const *,CCF_Shape::shape_def *>, COMDAT
; ___first$ = ecx
; ___last$ = edx
; ___result$ = eax

; 125  :                                const __true_type& /*BothPtrType*/) {

	push	esi
	mov	esi, edx

; 126  :   return __ucopy_ptrs(__first, __last, __result,
; 127  :                       _UseTrivialUCopy(_STLP_VALUE_TYPE(__first, _InputIter),
; 128  :                                        _STLP_VALUE_TYPE(__result, _OutputIter))._Answer());

	cmp	esi, ecx
	je	SHORT $LN12@ucopy_aux@13
	sub	esi, ecx
	push	esi
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN12@ucopy_aux@13:
	pop	esi

; 129  : }

	ret	0
??$__ucopy_aux@PBUshape_def@CCF_Shape@@PAU12@@priv@stlp_std@@YAPAUshape_def@CCF_Shape@@PBU23@0PAU23@ABU__true_type@1@@Z ENDP ; stlp_std::priv::__ucopy_aux<CCF_Shape::shape_def const *,CCF_Shape::shape_def *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__ucopy_aux@PBUSElement@CCF_Skeleton@@PAU12@@priv@stlp_std@@YAPAUSElement@CCF_Skeleton@@PBU23@0PAU23@ABU__true_type@1@@Z
_TEXT	SEGMENT
??$__ucopy_aux@PBUSElement@CCF_Skeleton@@PAU12@@priv@stlp_std@@YAPAUSElement@CCF_Skeleton@@PBU23@0PAU23@ABU__true_type@1@@Z PROC ; stlp_std::priv::__ucopy_aux<CCF_Skeleton::SElement const *,CCF_Skeleton::SElement *>, COMDAT
; ___first$ = ecx
; ___last$ = edx
; ___result$ = eax

; 125  :                                const __true_type& /*BothPtrType*/) {

	push	esi
	mov	esi, edx

; 126  :   return __ucopy_ptrs(__first, __last, __result,
; 127  :                       _UseTrivialUCopy(_STLP_VALUE_TYPE(__first, _InputIter),
; 128  :                                        _STLP_VALUE_TYPE(__result, _OutputIter))._Answer());

	cmp	esi, ecx
	je	SHORT $LN12@ucopy_aux@14
	sub	esi, ecx
	push	esi
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN12@ucopy_aux@14:
	pop	esi

; 129  : }

	ret	0
??$__ucopy_aux@PBUSElement@CCF_Skeleton@@PAU12@@priv@stlp_std@@YAPAUSElement@CCF_Skeleton@@PBU23@0PAU23@ABU__true_type@1@@Z ENDP ; stlp_std::priv::__ucopy_aux<CCF_Skeleton::SElement const *,CCF_Skeleton::SElement *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$uninitialized_copy@PBUshape_def@CCF_Shape@@PAU12@@stlp_std@@YAPAUshape_def@CCF_Shape@@PBU12@0PAU12@@Z
_TEXT	SEGMENT
??$uninitialized_copy@PBUshape_def@CCF_Shape@@PAU12@@stlp_std@@YAPAUshape_def@CCF_Shape@@PBU12@0PAU12@@Z PROC ; stlp_std::uninitialized_copy<CCF_Shape::shape_def const *,CCF_Shape::shape_def *>, COMDAT
; ___first$ = ecx
; ___last$ = edx
; ___result$ = eax

; 144  : { return _STLP_PRIV __ucopy_aux(__first, __last, __result, _BothPtrType< _InputIter, _ForwardIter>::_Answer()); }

	push	esi
	mov	esi, edx
	cmp	esi, ecx
	je	SHORT $LN16@uninitiali@25
	sub	esi, ecx
	push	esi
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN16@uninitiali@25:
	pop	esi
	ret	0
??$uninitialized_copy@PBUshape_def@CCF_Shape@@PAU12@@stlp_std@@YAPAUshape_def@CCF_Shape@@PBU12@0PAU12@@Z ENDP ; stlp_std::uninitialized_copy<CCF_Shape::shape_def const *,CCF_Shape::shape_def *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$uninitialized_copy@PBUSElement@CCF_Skeleton@@PAU12@@stlp_std@@YAPAUSElement@CCF_Skeleton@@PBU12@0PAU12@@Z
_TEXT	SEGMENT
??$uninitialized_copy@PBUSElement@CCF_Skeleton@@PAU12@@stlp_std@@YAPAUSElement@CCF_Skeleton@@PBU12@0PAU12@@Z PROC ; stlp_std::uninitialized_copy<CCF_Skeleton::SElement const *,CCF_Skeleton::SElement *>, COMDAT
; ___first$ = ecx
; ___last$ = edx
; ___result$ = eax

; 144  : { return _STLP_PRIV __ucopy_aux(__first, __last, __result, _BothPtrType< _InputIter, _ForwardIter>::_Answer()); }

	push	esi
	mov	esi, edx
	cmp	esi, ecx
	je	SHORT $LN16@uninitiali@26
	sub	esi, ecx
	push	esi
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	add	eax, esi
$LN16@uninitiali@26:
	pop	esi
	ret	0
??$uninitialized_copy@PBUSElement@CCF_Skeleton@@PAU12@@stlp_std@@YAPAUSElement@CCF_Skeleton@@PBU12@0PAU12@@Z ENDP ; stlp_std::uninitialized_copy<CCF_Skeleton::SElement const *,CCF_Skeleton::SElement *>
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.h
_TEXT	ENDS
;	COMDAT ??$_M_allocate_and_copy@PBUshape_def@CCF_Shape@@@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@AAEPAUshape_def@CCF_Shape@@AAIPBU34@1@Z
_TEXT	SEGMENT
??$_M_allocate_and_copy@PBUshape_def@CCF_Shape@@@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@AAEPAUshape_def@CCF_Shape@@AAIPBU34@1@Z PROC ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_M_allocate_and_copy<CCF_Shape::shape_def const *>, COMDAT
; ___n$ = eax
; ___first$ = ebx
; ___last$ = ecx

; 634  :                                _ForwardIterator __first, _ForwardIterator __last)
; 635  : #else /* _STLP_MEMBER_TEMPLATES */
; 636  :   pointer _M_allocate_and_copy(size_type& __n,
; 637  :                                const_pointer __first, const_pointer __last)
; 638  : #endif /* _STLP_MEMBER_TEMPLATES */
; 639  :   {
; 640  :     pointer __result = this->_M_end_of_storage.allocate(__n, __n);

	mov	eax, DWORD PTR [eax]
	imul	eax, 132				; 00000084H
	push	esi
	push	edi
	mov	esi, ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 641  :     _STLP_TRY {
; 642  :       uninitialized_copy(__first, __last, __result);

	cmp	esi, ebx
	mov	edi, eax
	je	SHORT $LN28@M_allocate@13
	sub	esi, ebx
	push	esi
	push	ebx
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH

; 643  :       return __result;

	mov	eax, edi
$LN28@M_allocate@13:
	pop	edi
	pop	esi

; 644  :     }
; 645  :     _STLP_UNWIND(this->_M_end_of_storage.deallocate(__result, __n))
; 646  :     _STLP_RET_AFTER_THROW(__result)
; 647  :   }

	ret	0
??$_M_allocate_and_copy@PBUshape_def@CCF_Shape@@@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@AAEPAUshape_def@CCF_Shape@@AAIPBU34@1@Z ENDP ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_M_allocate_and_copy<CCF_Shape::shape_def const *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_M_allocate_and_copy@PBUSElement@CCF_Skeleton@@@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@AAEPAUSElement@CCF_Skeleton@@AAIPBU34@1@Z
_TEXT	SEGMENT
??$_M_allocate_and_copy@PBUSElement@CCF_Skeleton@@@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@AAEPAUSElement@CCF_Skeleton@@AAIPBU34@1@Z PROC ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_M_allocate_and_copy<CCF_Skeleton::SElement const *>, COMDAT
; ___n$ = eax
; ___first$ = ebx
; ___last$ = ecx

; 634  :                                _ForwardIterator __first, _ForwardIterator __last)
; 635  : #else /* _STLP_MEMBER_TEMPLATES */
; 636  :   pointer _M_allocate_and_copy(size_type& __n,
; 637  :                                const_pointer __first, const_pointer __last)
; 638  : #endif /* _STLP_MEMBER_TEMPLATES */
; 639  :   {
; 640  :     pointer __result = this->_M_end_of_storage.allocate(__n, __n);

	mov	eax, DWORD PTR [eax]
	push	esi
	mov	esi, ecx
	lea	ecx, DWORD PTR [eax+eax*4]
	shl	ecx, 4
	push	edi
	push	ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z

; 641  :     _STLP_TRY {
; 642  :       uninitialized_copy(__first, __last, __result);

	cmp	esi, ebx
	mov	edi, eax
	je	SHORT $LN28@M_allocate@14
	sub	esi, ebx
	push	esi
	push	ebx
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH

; 643  :       return __result;

	mov	eax, edi
$LN28@M_allocate@14:
	pop	edi
	pop	esi

; 644  :     }
; 645  :     _STLP_UNWIND(this->_M_end_of_storage.deallocate(__result, __n))
; 646  :     _STLP_RET_AFTER_THROW(__result)
; 647  :   }

	ret	0
??$_M_allocate_and_copy@PBUSElement@CCF_Skeleton@@@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@AAEPAUSElement@CCF_Skeleton@@AAIPBU34@1@Z ENDP ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_M_allocate_and_copy<CCF_Skeleton::SElement const *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_clear@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@AAEXXZ
_TEXT	SEGMENT
?_M_clear@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@AAEXXZ PROC ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_M_clear, COMDAT
; _this$ = eax

; 616  :     _STLP_STD::_Destroy_Range(rbegin(), rend());
; 617  :     this->_M_end_of_storage.deallocate(this->_M_start, this->_M_end_of_storage._M_data - this->_M_start);

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN31@M_clear@11
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN31@M_clear@11:

; 618  :   }

	ret	0
?_M_clear@?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@AAEXXZ ENDP ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::_M_clear
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_M_clear@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@AAEXXZ
_TEXT	SEGMENT
?_M_clear@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@AAEXXZ PROC ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_M_clear, COMDAT
; _this$ = eax

; 616  :     _STLP_STD::_Destroy_Range(rbegin(), rend());
; 617  :     this->_M_end_of_storage.deallocate(this->_M_start, this->_M_end_of_storage._M_data - this->_M_start);

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN31@M_clear@12
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN31@M_clear@12:

; 618  :   }

	ret	0
?_M_clear@?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@AAEXXZ ENDP ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::_M_clear
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\_vector.c
_TEXT	ENDS
;	COMDAT ??4?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z
_TEXT	SEGMENT
tv420 = -4						; size = 4
___result$323392 = 8					; size = 4
___x$ = 8						; size = 4
??4?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z PROC ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::operator=, COMDAT
; _this$ = edi

; 177  : vector<_Tp, _Alloc>& vector<_Tp, _Alloc>::operator = (const vector<_Tp, _Alloc>& __x) {

	push	ecx

; 178  :   if (&__x != this) {

	mov	eax, DWORD PTR ___x$[esp]
	cmp	eax, edi
	push	ebx
	push	ebp
	push	esi
	je	$LN97@operator@55

; 179  :     const size_type __xlen = __x.size();

	mov	ebp, DWORD PTR [eax+4]
	mov	ebx, DWORD PTR [eax]
	mov	ecx, ebp
	sub	ecx, ebx
	mov	eax, 1041204193				; 3e0f83e1H
	imul	ecx

; 180  :     if (__xlen > capacity()) {

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edi+8]
	sar	edx, 5
	sub	ecx, eax
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
	mov	eax, 1041204193				; 3e0f83e1H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	cmp	esi, eax
	jbe	SHORT $LN4@operator@55

; 181  :       size_type __len = __xlen;
; 182  :       pointer __tmp = _M_allocate_and_copy(__len, __CONST_CAST(const_pointer, __x._M_start) + 0,
; 183  :                                                   __CONST_CAST(const_pointer, __x._M_finish) + 0);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	mov	eax, esi
	imul	eax, 132				; 00000084H
	push	eax
	mov	DWORD PTR tv420[esp+20], eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	cmp	ebp, ebx
	mov	DWORD PTR ___result$323392[esp+12], eax
	je	SHORT $LN39@operator@55
	sub	ebp, ebx
	push	ebp
	push	ebx
	push	eax
	call	_memcpy
	mov	eax, DWORD PTR ___result$323392[esp+24]
	add	esp, 12					; 0000000cH
$LN39@operator@55:

; 184  :       _M_clear();

	mov	ecx, DWORD PTR [edi]
	test	ecx, ecx
	je	SHORT $LN70@operator@55
	push	ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	eax, DWORD PTR ___result$323392[esp+12]
$LN70@operator@55:

; 185  :       this->_M_start = __tmp;
; 186  :       this->_M_end_of_storage._M_data = this->_M_start + __len;

	mov	ecx, DWORD PTR tv420[esp+16]

; 196  :     }
; 197  :     this->_M_finish = this->_M_start + __xlen;

	imul	esi, 132				; 00000084H
	add	ecx, eax
	add	esi, eax
	mov	DWORD PTR [edi], eax
	mov	DWORD PTR [edi+8], ecx
	mov	DWORD PTR [edi+4], esi

; 198  :   }
; 199  :   return *this;

	mov	eax, edi

; 200  : }

	pop	esi
	pop	ebp
	pop	ebx
	pop	ecx
	ret	4
$LN4@operator@55:

; 187  :     } else if (size() >= __xlen) {

	mov	edx, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [edi]
	sub	edx, ecx
	mov	eax, 1041204193				; 3e0f83e1H
	imul	edx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	cmp	eax, esi
	jb	SHORT $LN2@operator@55

; 188  :       pointer __i = _STLP_PRIV __copy_ptrs(__CONST_CAST(const_pointer, __x._M_start) + 0,
; 189  :                                            __CONST_CAST(const_pointer, __x._M_finish) + 0, this->_M_start, _TrivialCopy());

	sub	ebp, ebx
	je	SHORT $LN96@operator@55
	push	ebp
	push	ebx
	push	ecx
	call	DWORD PTR __imp__memmove

; 190  :       _STLP_STD::_Destroy_Range(__i, this->_M_finish);
; 191  :     } else {

	jmp	SHORT $LN98@operator@55
$LN2@operator@55:

; 192  :       _STLP_PRIV __copy_ptrs(__CONST_CAST(const_pointer, __x._M_start),
; 193  :                              __CONST_CAST(const_pointer, __x._M_start) + size(), this->_M_start, _TrivialCopy());

	imul	eax, 132				; 00000084H
	sub	eax, ebx
	add	eax, ebx
	je	SHORT $LN87@operator@55
	push	eax
	push	ebx
	push	ecx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN87@operator@55:

; 194  :       _STLP_PRIV __ucopy_ptrs(__CONST_CAST(const_pointer, __x._M_start) + size(),
; 195  :                               __CONST_CAST(const_pointer, __x._M_finish) + 0, this->_M_finish, _TrivialUCopy());

	mov	ebp, DWORD PTR [edi+4]
	mov	edx, DWORD PTR ___x$[esp+12]
	mov	ebx, DWORD PTR [edx+4]
	mov	ecx, ebp
	sub	ecx, DWORD PTR [edi]
	mov	eax, 1041204193				; 3e0f83e1H
	imul	ecx
	mov	ecx, DWORD PTR ___x$[esp+12]
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	imul	eax, 132				; 00000084H
	add	eax, DWORD PTR [ecx]
	cmp	ebx, eax
	je	SHORT $LN96@operator@55
	sub	ebx, eax
	push	ebx
	push	eax
	push	ebp
	call	_memcpy
$LN98@operator@55:
	add	esp, 12					; 0000000cH
$LN96@operator@55:

; 196  :     }
; 197  :     this->_M_finish = this->_M_start + __xlen;

	imul	esi, 132				; 00000084H
	add	esi, DWORD PTR [edi]
	mov	DWORD PTR [edi+4], esi
$LN97@operator@55:

; 200  : }

	pop	esi
	pop	ebp
	mov	eax, edi
	pop	ebx
	pop	ecx
	ret	4
??4?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ENDP ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z
_TEXT	SEGMENT
tv420 = -4						; size = 4
___result$323800 = 8					; size = 4
___x$ = 8						; size = 4
??4?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z PROC ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::operator=, COMDAT
; _this$ = edi

; 177  : vector<_Tp, _Alloc>& vector<_Tp, _Alloc>::operator = (const vector<_Tp, _Alloc>& __x) {

	push	ecx

; 178  :   if (&__x != this) {

	mov	eax, DWORD PTR ___x$[esp]
	cmp	eax, edi
	push	ebx
	push	ebp
	push	esi
	je	$LN97@operator@56

; 179  :     const size_type __xlen = __x.size();

	mov	ebp, DWORD PTR [eax+4]
	mov	ebx, DWORD PTR [eax]
	mov	ecx, ebp
	sub	ecx, ebx
	mov	eax, 1717986919				; 66666667H
	imul	ecx

; 180  :     if (__xlen > capacity()) {

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edi+8]
	sar	edx, 5
	sub	ecx, eax
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	cmp	esi, eax
	jbe	SHORT $LN4@operator@56

; 181  :       size_type __len = __xlen;
; 182  :       pointer __tmp = _M_allocate_and_copy(__len, __CONST_CAST(const_pointer, __x._M_start) + 0,
; 183  :                                                   __CONST_CAST(const_pointer, __x._M_finish) + 0);

	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	lea	eax, DWORD PTR [esi+esi*4]
	shl	eax, 4
	push	eax
	mov	DWORD PTR tv420[esp+20], eax
	call	DWORD PTR __imp_?mem_alloc@xrMemory@@QAEPAXI@Z
	cmp	ebp, ebx
	mov	DWORD PTR ___result$323800[esp+12], eax
	je	SHORT $LN39@operator@56
	sub	ebp, ebx
	push	ebp
	push	ebx
	push	eax
	call	_memcpy
	mov	eax, DWORD PTR ___result$323800[esp+24]
	add	esp, 12					; 0000000cH
$LN39@operator@56:

; 184  :       _M_clear();

	mov	ecx, DWORD PTR [edi]
	test	ecx, ecx
	je	SHORT $LN70@operator@56
	push	ecx
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	mov	eax, DWORD PTR ___result$323800[esp+12]
$LN70@operator@56:

; 185  :       this->_M_start = __tmp;
; 186  :       this->_M_end_of_storage._M_data = this->_M_start + __len;

	mov	ecx, DWORD PTR tv420[esp+16]

; 196  :     }
; 197  :     this->_M_finish = this->_M_start + __xlen;

	lea	edx, DWORD PTR [esi+esi*4]
	add	ecx, eax
	shl	edx, 4
	add	edx, eax
	mov	DWORD PTR [edi], eax
	mov	DWORD PTR [edi+8], ecx
	mov	DWORD PTR [edi+4], edx

; 198  :   }
; 199  :   return *this;

	mov	eax, edi

; 200  : }

	pop	esi
	pop	ebp
	pop	ebx
	pop	ecx
	ret	4
$LN4@operator@56:

; 187  :     } else if (size() >= __xlen) {

	mov	edx, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [edi]
	sub	edx, ecx
	mov	eax, 1717986919				; 66666667H
	imul	edx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	cmp	eax, esi
	jb	SHORT $LN2@operator@56

; 188  :       pointer __i = _STLP_PRIV __copy_ptrs(__CONST_CAST(const_pointer, __x._M_start) + 0,
; 189  :                                            __CONST_CAST(const_pointer, __x._M_finish) + 0, this->_M_start, _TrivialCopy());

	sub	ebp, ebx
	je	SHORT $LN96@operator@56
	push	ebp
	push	ebx
	push	ecx
	call	DWORD PTR __imp__memmove

; 190  :       _STLP_STD::_Destroy_Range(__i, this->_M_finish);
; 191  :     } else {

	jmp	SHORT $LN98@operator@56
$LN2@operator@56:

; 192  :       _STLP_PRIV __copy_ptrs(__CONST_CAST(const_pointer, __x._M_start),
; 193  :                              __CONST_CAST(const_pointer, __x._M_start) + size(), this->_M_start, _TrivialCopy());

	lea	eax, DWORD PTR [eax+eax*4]
	shl	eax, 4
	sub	eax, ebx
	add	eax, ebx
	je	SHORT $LN87@operator@56
	push	eax
	push	ebx
	push	ecx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN87@operator@56:

; 194  :       _STLP_PRIV __ucopy_ptrs(__CONST_CAST(const_pointer, __x._M_start) + size(),
; 195  :                               __CONST_CAST(const_pointer, __x._M_finish) + 0, this->_M_finish, _TrivialUCopy());

	mov	ebp, DWORD PTR [edi+4]
	mov	edx, DWORD PTR ___x$[esp+12]
	mov	ebx, DWORD PTR [edx+4]
	mov	ecx, ebp
	sub	ecx, DWORD PTR [edi]
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	mov	ecx, DWORD PTR ___x$[esp+12]
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	lea	eax, DWORD PTR [eax+eax*4]
	shl	eax, 4
	add	eax, DWORD PTR [ecx]
	cmp	ebx, eax
	je	SHORT $LN96@operator@56
	sub	ebx, eax
	push	ebx
	push	eax
	push	ebp
	call	_memcpy
$LN98@operator@56:
	add	esp, 12					; 0000000cH
$LN96@operator@56:

; 196  :     }
; 197  :     this->_M_finish = this->_M_start + __xlen;

	lea	edx, DWORD PTR [esi+esi*4]
	shl	edx, 4
	add	edx, DWORD PTR [edi]
	mov	DWORD PTR [edi+4], edx
$LN97@operator@56:

; 200  : }

	pop	esi
	pop	ebp
	mov	eax, edi
	pop	ebx
	pop	ecx
	ret	4
??4?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ENDP ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::operator=
; Function compile flags: /Ogtpy
; File d:\clearsky\sources\sdk\include\stlport\stl\pointers\_vector.h
_TEXT	ENDS
;	COMDAT ??4?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
??4?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QAEAAV01@ABV01@@Z PROC ; stlp_std::vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::operator=, COMDAT
; _this$ = ecx
; ___x$ = eax

; 149  :   _Self& operator=(const _Self& __x) { _M_impl = __x._M_impl; return *this; }

	push	edi
	mov	edi, ecx
	push	eax
	call	??4?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::operator=
	mov	eax, edi
	pop	edi
	ret	0
??4?$vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@stlp_std@@QAEAAV01@ABV01@@Z ENDP ; stlp_std::vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
??4?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAEAAV01@ABV01@@Z PROC ; stlp_std::vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::operator=, COMDAT
; _this$ = ecx
; ___x$ = eax

; 149  :   _Self& operator=(const _Self& __x) { _M_impl = __x._M_impl; return *this; }

	push	edi
	mov	edi, ecx
	push	eax
	call	??4?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::operator=
	mov	eax, edi
	pop	edi
	ret	0
??4?$vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@stlp_std@@QAEAAV01@ABV01@@Z ENDP ; stlp_std::vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$xr_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
??4?$xr_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@@QAEAAV0@ABV0@@Z PROC ; xr_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::operator=, COMDAT
; _this$ = ecx
; ___that$ = eax
	push	edi
	mov	edi, ecx
	push	eax
	call	??4?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::operator=
	mov	eax, edi
	pop	edi
	ret	0
??4?$xr_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@@QAEAAV0@ABV0@@Z ENDP ; xr_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_ECCF_Shape@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_ECCF_Shape@@UAEPAXI@Z PROC				; CCF_Shape::`vector deleting destructor', COMDAT
; _this$ = ecx
	test	BYTE PTR ___flags$[esp-4], 2
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, ecx
	je	SHORT $LN3@vector@43
	mov	esi, DWORD PTR [edi-4]
	mov	ebx, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	lea	ebp, DWORD PTR [edi-4]
	mov	eax, esi
	shl	eax, 4
	add	eax, esi
	sub	esi, 1
	lea	edi, DWORD PTR [edi+eax*4]
	js	SHORT $LN6@vector@43
$LL7@vector@43:
	mov	eax, DWORD PTR [edi-12]
	sub	edi, 68					; 00000044H
	test	eax, eax
	je	SHORT $LN49@vector@43
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	ebx
$LN49@vector@43:
	sub	esi, 1
	mov	DWORD PTR [edi], OFFSET ??_7ICollisionForm@@6B@
	jns	SHORT $LL7@vector@43
$LN6@vector@43:
	test	BYTE PTR ___flags$[esp+12], 1
	je	SHORT $LN56@vector@43
	test	ebp, ebp
	je	SHORT $LN56@vector@43
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	ebp
	call	ebx
$LN56@vector@43:
	mov	eax, ebp
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	4
$LN3@vector@43:
	mov	eax, DWORD PTR [edi+56]
	test	eax, eax
	mov	esi, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	je	SHORT $LN98@vector@43
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	esi
$LN98@vector@43:
	test	BYTE PTR ___flags$[esp+12], 1
	mov	DWORD PTR [edi], OFFSET ??_7ICollisionForm@@6B@
	je	SHORT $LN105@vector@43
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	esi
$LN105@vector@43:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	4
??_ECCF_Shape@@UAEPAXI@Z ENDP				; CCF_Shape::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_GCCF_Shape@@UAEPAXI@Z			; CCF_Shape::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_GCCF_Shape@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCCF_Shape@@UAEPAXI@Z PROC				; CCF_Shape::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+56]
	test	eax, eax
	push	edi
	mov	edi, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	je	SHORT $LN43@scalar@30
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
$LN43@scalar@30:
	test	BYTE PTR ___flags$[esp+4], 1
	mov	DWORD PTR [esi], OFFSET ??_7ICollisionForm@@6B@
	je	SHORT $LN53@scalar@30
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	edi
$LN53@scalar@30:
	pop	edi
	mov	eax, esi
	pop	esi
	ret	4
??_GCCF_Shape@@UAEPAXI@Z ENDP				; CCF_Shape::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??4CCF_Shape@@QAEAAV0@ABV0@@Z			; CCF_Shape::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4CCF_Shape@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4CCF_Shape@@QAEAAV0@ABV0@@Z PROC			; CCF_Shape::operator=, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR ___that$[esp-4]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [esi+8], edx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [esi+12], ecx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [esi+16], edx
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [esi+20], ecx
	mov	edx, DWORD PTR [eax+24]
	mov	DWORD PTR [esi+24], edx
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [esi+28], ecx
	mov	edx, DWORD PTR [eax+32]
	mov	DWORD PTR [esi+32], edx
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [esi+36], ecx
	mov	edx, DWORD PTR [eax+40]
	mov	DWORD PTR [esi+40], edx
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR [esi+44], ecx
	mov	edx, DWORD PTR [eax+48]
	mov	DWORD PTR [esi+48], edx
	mov	ecx, DWORD PTR [eax+52]
	push	edi
	add	eax, 56					; 00000038H
	push	eax
	lea	edi, DWORD PTR [esi+56]
	mov	DWORD PTR [esi+52], ecx
	call	??4?$_Impl_vector@Ushape_def@CCF_Shape@@V?$xalloc@Ushape_def@CCF_Shape@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<CCF_Shape::shape_def,xalloc<CCF_Shape::shape_def> >::operator=
	pop	edi
	mov	eax, esi
	pop	esi
	ret	4
??4CCF_Shape@@QAEAAV0@ABV0@@Z ENDP			; CCF_Shape::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_ECCF_EventBox@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_ECCF_EventBox@@UAEPAXI@Z PROC			; CCF_EventBox::`vector deleting destructor', COMDAT
; _this$ = ecx
	mov	dl, BYTE PTR ___flags$[esp-4]
	test	dl, 2
	push	esi
	mov	esi, ecx
	je	SHORT $LN3@vector@44
	mov	ecx, DWORD PTR [esi-4]
	push	edi
	lea	edi, DWORD PTR [esi-4]
	mov	eax, ecx
	imul	eax, 152				; 00000098H
	add	eax, esi
	sub	ecx, 1
	js	SHORT $LN6@vector@44
$LL7@vector@44:
	sub	eax, 152				; 00000098H
	sub	ecx, 1
	mov	DWORD PTR [eax], OFFSET ??_7ICollisionForm@@6B@
	jns	SHORT $LL7@vector@44
$LN6@vector@44:
	test	dl, 1
	je	SHORT $LN16@vector@44
	test	edi, edi
	je	SHORT $LN16@vector@44
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN16@vector@44:
	mov	eax, edi
	pop	edi
	pop	esi
	ret	4
$LN3@vector@44:
	test	dl, 1
	mov	DWORD PTR [esi], OFFSET ??_7ICollisionForm@@6B@
	je	SHORT $LN25@vector@44
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN25@vector@44:
	mov	eax, esi
	pop	esi
	ret	4
??_ECCF_EventBox@@UAEPAXI@Z ENDP			; CCF_EventBox::`vector deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$xr_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
??4?$xr_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@@QAEAAV0@ABV0@@Z PROC ; xr_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::operator=, COMDAT
; _this$ = ecx
; ___that$ = eax
	push	edi
	mov	edi, ecx
	push	eax
	call	??4?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::operator=
	mov	eax, edi
	pop	edi
	ret	0
??4?$xr_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@@QAEAAV0@ABV0@@Z ENDP ; xr_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_ECCF_Skeleton@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_ECCF_Skeleton@@UAEPAXI@Z PROC			; CCF_Skeleton::`vector deleting destructor', COMDAT
; _this$ = ecx
	test	BYTE PTR ___flags$[esp-4], 2
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, ecx
	je	SHORT $LN3@vector@45
	mov	ebp, DWORD PTR [edi-4]
	lea	ebx, DWORD PTR [edi-4]
	mov	esi, ebp
	imul	esi, 88					; 00000058H
	add	esi, edi
	sub	ebp, 1
	mov	edi, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	js	SHORT $LN6@vector@45
$LL7@vector@45:
	mov	eax, DWORD PTR [esi-24]
	sub	esi, 88					; 00000058H
	test	eax, eax
	je	SHORT $LN49@vector@45
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
$LN49@vector@45:
	sub	ebp, 1
	mov	DWORD PTR [esi], OFFSET ??_7ICollisionForm@@6B@
	jns	SHORT $LL7@vector@45
$LN6@vector@45:
	test	BYTE PTR ___flags$[esp+12], 1
	je	SHORT $LN56@vector@45
	test	ebx, ebx
	je	SHORT $LN56@vector@45
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	ebx
	call	edi
$LN56@vector@45:
	mov	eax, ebx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	4
$LN3@vector@45:
	mov	eax, DWORD PTR [edi+64]
	test	eax, eax
	mov	esi, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	je	SHORT $LN98@vector@45
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	esi
$LN98@vector@45:
	test	BYTE PTR ___flags$[esp+12], 1
	mov	DWORD PTR [edi], OFFSET ??_7ICollisionForm@@6B@
	je	SHORT $LN105@vector@45
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	esi
$LN105@vector@45:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	4
??_ECCF_Skeleton@@UAEPAXI@Z ENDP			; CCF_Skeleton::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_GCCF_Skeleton@@UAEPAXI@Z			; CCF_Skeleton::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_GCCF_Skeleton@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCCF_Skeleton@@UAEPAXI@Z PROC			; CCF_Skeleton::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+64]
	test	eax, eax
	push	edi
	mov	edi, DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
	je	SHORT $LN43@scalar@31
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	eax
	call	edi
$LN43@scalar@31:
	test	BYTE PTR ___flags$[esp+4], 1
	mov	DWORD PTR [esi], OFFSET ??_7ICollisionForm@@6B@
	je	SHORT $LN53@scalar@31
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	edi
$LN53@scalar@31:
	pop	edi
	mov	eax, esi
	pop	esi
	ret	4
??_GCCF_Skeleton@@UAEPAXI@Z ENDP			; CCF_Skeleton::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??4CCF_Skeleton@@QAEAAV0@ABV0@@Z		; CCF_Skeleton::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4CCF_Skeleton@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4CCF_Skeleton@@QAEAAV0@ABV0@@Z PROC			; CCF_Skeleton::operator=, COMDAT
; _this$ = ecx
	push	ebx
	mov	ebx, DWORD PTR ___that$[esp]
	mov	eax, DWORD PTR [ebx+4]
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi+4], eax
	mov	ecx, DWORD PTR [ebx+8]
	mov	DWORD PTR [esi+8], ecx
	mov	edx, DWORD PTR [ebx+12]
	mov	DWORD PTR [esi+12], edx
	mov	eax, DWORD PTR [ebx+16]
	mov	DWORD PTR [esi+16], eax
	mov	ecx, DWORD PTR [ebx+20]
	mov	DWORD PTR [esi+20], ecx
	mov	edx, DWORD PTR [ebx+24]
	mov	DWORD PTR [esi+24], edx
	mov	eax, DWORD PTR [ebx+28]
	mov	DWORD PTR [esi+28], eax
	mov	ecx, DWORD PTR [ebx+32]
	mov	DWORD PTR [esi+32], ecx
	mov	edx, DWORD PTR [ebx+36]
	mov	DWORD PTR [esi+36], edx
	mov	eax, DWORD PTR [ebx+40]
	mov	DWORD PTR [esi+40], eax
	mov	ecx, DWORD PTR [ebx+44]
	mov	DWORD PTR [esi+44], ecx
	mov	edx, DWORD PTR [ebx+48]
	mov	DWORD PTR [esi+48], edx
	mov	eax, DWORD PTR [ebx+52]
	mov	DWORD PTR [esi+52], eax
	mov	ecx, DWORD PTR [ebx+56]
	push	edi
	mov	DWORD PTR [esi+56], ecx
	mov	edx, DWORD PTR [ebx+60]
	lea	eax, DWORD PTR [ebx+64]
	push	eax
	lea	edi, DWORD PTR [esi+64]
	mov	DWORD PTR [esi+60], edx
	call	??4?$_Impl_vector@USElement@CCF_Skeleton@@V?$xalloc@USElement@CCF_Skeleton@@@@@priv@stlp_std@@QAEAAV012@ABV012@@Z ; stlp_std::priv::_Impl_vector<CCF_Skeleton::SElement,xalloc<CCF_Skeleton::SElement> >::operator=
	mov	ecx, DWORD PTR [ebx+76]
	mov	DWORD PTR [esi+76], ecx
	mov	edx, DWORD PTR [ebx+80]
	pop	edi
	mov	DWORD PTR [esi+80], edx
	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??4CCF_Skeleton@@QAEAAV0@ABV0@@Z ENDP			; CCF_Skeleton::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_EICollisionForm@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_EICollisionForm@@UAEPAXI@Z PROC			; ICollisionForm::`vector deleting destructor', COMDAT
; _this$ = ecx
	mov	dl, BYTE PTR ___flags$[esp-4]
	test	dl, 2
	push	esi
	mov	esi, ecx
	je	SHORT $LN3@vector@46
	mov	eax, DWORD PTR [esi-4]
	push	edi
	lea	edi, DWORD PTR [esi-4]
	lea	ecx, DWORD PTR [eax*8]
	sub	ecx, eax
	sub	eax, 1
	lea	ecx, DWORD PTR [esi+ecx*8]
	js	SHORT $LN6@vector@46
$LL7@vector@46:
	sub	ecx, 56					; 00000038H
	sub	eax, 1
	mov	DWORD PTR [ecx], OFFSET ??_7ICollisionForm@@6B@
	jns	SHORT $LL7@vector@46
$LN6@vector@46:
	test	dl, 1
	je	SHORT $LN14@vector@46
	test	edi, edi
	je	SHORT $LN14@vector@46
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	edi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN14@vector@46:
	mov	eax, edi
	pop	edi
	pop	esi
	ret	4
$LN3@vector@46:
	test	dl, 1
	mov	DWORD PTR [esi], OFFSET ??_7ICollisionForm@@6B@
	je	SHORT $LN21@vector@46
	mov	ecx, DWORD PTR __imp_?Memory@@3VxrMemory@@A
	push	esi
	call	DWORD PTR __imp_?mem_free@xrMemory@@QAEXPAX@Z
$LN21@vector@46:
	mov	eax, esi
	pop	esi
	ret	4
??_EICollisionForm@@UAEPAXI@Z ENDP			; ICollisionForm::`vector deleting destructor'
END
